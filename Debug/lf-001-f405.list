
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001041c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  080105b0  080105b0  000205b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d74  08010d74  000304f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010d74  08010d74  00020d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d7c  08010d7c  000304f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d7c  08010d7c  00020d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d80  08010d80  00020d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f4  20000000  08010d84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304f4  2**0
                  CONTENTS
 10 .bss          00001024  200004f4  200004f4  000304f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001518  20001518  000304f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f536  00000000  00000000  00030524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a6a  00000000  00000000  0004fa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  000544c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00055eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004157a  00000000  00000000  000576a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000236b4  00000000  00000000  00098c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001309bd  00000000  00000000  000bc2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ecc93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e0c  00000000  00000000  001ecce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f4 	.word	0x200004f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010594 	.word	0x08010594

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	08010594 	.word	0x08010594

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa0:	4a7e      	ldr	r2, [pc, #504]	; (800119c <MX_ADC1_Init+0x210>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fcc:	4a74      	ldr	r2, [pc, #464]	; (80011a0 <MX_ADC1_Init+0x214>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd8:	220e      	movs	r2, #14
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	486b      	ldr	r0, [pc, #428]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fec:	f007 fb32 	bl	8008654 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f001 f998 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4863      	ldr	r0, [pc, #396]	; (8001198 <MX_ADC1_Init+0x20c>)
 800100c:	f007 fda4 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f001 f988 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	485c      	ldr	r0, [pc, #368]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001028:	f007 fd96 	bl	8008b58 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001032:	f001 f97a 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001036:	230e      	movs	r3, #14
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001044:	f007 fd88 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104e:	f001 f96c 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001052:	230b      	movs	r3, #11
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001060:	f007 fd7a 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800106a:	f001 f95e 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106e:	2307      	movs	r3, #7
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001072:	2305      	movs	r3, #5
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <MX_ADC1_Init+0x20c>)
 800107c:	f007 fd6c 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001086:	f001 f950 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800108a:	230c      	movs	r3, #12
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001098:	f007 fd5e 	bl	8008b58 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010a2:	f001 f942 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a6:	2306      	movs	r3, #6
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010b8:	f007 fd4e 	bl	8008b58 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010c2:	f001 f932 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c6:	230d      	movs	r3, #13
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010d8:	f007 fd3e 	bl	8008b58 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010e2:	f001 f922 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010f4:	f007 fd30 	bl	8008b58 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010fe:	f001 f914 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001106:	230a      	movs	r3, #10
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001110:	f007 fd22 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 800111a:	f001 f906 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111e:	2304      	movs	r3, #4
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001122:	230b      	movs	r3, #11
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <MX_ADC1_Init+0x20c>)
 800112c:	f007 fd14 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001136:	f001 f8f8 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113a:	2301      	movs	r3, #1
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001148:	f007 fd06 	bl	8008b58 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001152:	f001 f8ea 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001156:	2303      	movs	r3, #3
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800115a:	230d      	movs	r3, #13
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001164:	f007 fcf8 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800116e:	f001 f8dc 	bl	800232a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001176:	230e      	movs	r3, #14
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001180:	f007 fcea 	bl	8008b58 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 800118a:	f001 f8ce 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000510 	.word	0x20000510
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_ADC_MspInit+0x11c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d178      	bne.n	80012b8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x124>)
 800122e:	f008 fbd9 	bl	80099e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x128>)
 8001246:	f008 fbcd 	bl	80099e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_ADC_MspInit+0x130>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800128e:	f008 f839 	bl	8009304 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001298:	f001 f847 	bl	800232a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2012      	movs	r0, #18
 80012ae:	f007 ffee 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f008 f807 	bl	80092c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	20000558 	.word	0x20000558
 80012d4:	40026410 	.word	0x40026410

080012d8 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	2100      	movs	r1, #0
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <DISP_ClearBuff+0x14>)
 80012e4:	f00c fa82 	bl	800d7ec <memset>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005b8 	.word	0x200005b8

080012f0 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d03a      	beq.n	800138c <DISP_DrawPixel+0x9c>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc39      	bgt.n	800138e <DISP_DrawPixel+0x9e>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <DISP_DrawPixel+0x34>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d019      	beq.n	8001356 <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 8001322:	e034      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	491c      	ldr	r1, [pc, #112]	; (800139c <DISP_DrawPixel+0xac>)
 800132a:	01d2      	lsls	r2, r2, #7
 800132c:	440a      	add	r2, r1
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b2c8      	uxtb	r0, r1
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <DISP_DrawPixel+0xac>)
 800134a:	01d2      	lsls	r2, r2, #7
 800134c:	440a      	add	r2, r1
 800134e:	4413      	add	r3, r2
 8001350:	4602      	mov	r2, r0
 8001352:	701a      	strb	r2, [r3, #0]
		break;
 8001354:	e01b      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4910      	ldr	r1, [pc, #64]	; (800139c <DISP_DrawPixel+0xac>)
 800135c:	01d2      	lsls	r2, r2, #7
 800135e:	440a      	add	r2, r1
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4013      	ands	r3, r2
 8001376:	b259      	sxtb	r1, r3
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	b2c8      	uxtb	r0, r1
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <DISP_DrawPixel+0xac>)
 8001380:	01d2      	lsls	r2, r2, #7
 8001382:	440a      	add	r2, r1
 8001384:	4413      	add	r3, r2
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <DISP_DrawPixel+0x9e>
		break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200005b8 	.word	0x200005b8

080013a0 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e08d      	b.n	80014f4 <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	dd01      	ble.n	80013e6 <DISP_DrawChar+0x46>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08b      	b.n	80014fe <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f1a3 0220 	sub.w	r2, r3, #32
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a44      	ldr	r2, [pc, #272]	; (8001508 <DISP_DrawChar+0x168>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f1a3 0220 	sub.w	r2, r3, #32
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <DISP_DrawChar+0x168>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	461a      	mov	r2, r3
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f1c3 0308 	rsb	r3, r3, #8
 8001422:	fa42 f303 	asr.w	r3, r2, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e050      	b.n	80014d2 <DISP_DrawChar+0x132>
			switch(color) {
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d049      	beq.n	80014ca <DISP_DrawChar+0x12a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc48      	bgt.n	80014cc <DISP_DrawChar+0x12c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <DISP_DrawChar+0xa4>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01f      	beq.n	8001482 <DISP_DrawChar+0xe2>
 8001442:	e043      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	441a      	add	r2, r3
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	440b      	add	r3, r1
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <DISP_DrawChar+0x16c>)
 8001452:	01d2      	lsls	r2, r2, #7
 8001454:	440a      	add	r2, r1
 8001456:	4413      	add	r3, r2
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	441a      	add	r2, r3
 800146a:	79bc      	ldrb	r4, [r7, #6]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4423      	add	r3, r4
 8001470:	4301      	orrs	r1, r0
 8001472:	b2c8      	uxtb	r0, r1
 8001474:	4925      	ldr	r1, [pc, #148]	; (800150c <DISP_DrawChar+0x16c>)
 8001476:	01d2      	lsls	r2, r2, #7
 8001478:	440a      	add	r2, r1
 800147a:	4413      	add	r3, r2
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
				break;
 8001480:	e024      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	441a      	add	r2, r3
 8001488:	79b9      	ldrb	r1, [r7, #6]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	440b      	add	r3, r1
 800148e:	491f      	ldr	r1, [pc, #124]	; (800150c <DISP_DrawChar+0x16c>)
 8001490:	01d2      	lsls	r2, r2, #7
 8001492:	440a      	add	r2, r1
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b258      	sxtb	r0, r3
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	441a      	add	r2, r3
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	440b      	add	r3, r1
 80014ba:	b2c0      	uxtb	r0, r0
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <DISP_DrawChar+0x16c>)
 80014be:	01d2      	lsls	r2, r2, #7
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	4602      	mov	r2, r0
 80014c6:	701a      	strb	r2, [r3, #0]
				break;
 80014c8:	e000      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014ca:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <DISP_DrawChar+0x13c>
 80014d8:	2202      	movs	r2, #2
 80014da:	e000      	b.n	80014de <DISP_DrawChar+0x13e>
 80014dc:	2201      	movs	r2, #1
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dd04      	ble.n	80014ee <DISP_DrawChar+0x14e>
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	dda0      	ble.n	8001430 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	f77f af6e 	ble.w	80013d8 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc90      	pop	{r4, r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	200005b8 	.word	0x200005b8

08001510 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	460b      	mov	r3, r1
 8001524:	70bb      	strb	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	while(*text)
 800152e:	e015      	b.n	800155c <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	73fa      	strb	r2, [r7, #15]
 800153e:	461a      	mov	r2, r3
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	4413      	add	r3, r2
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	787b      	ldrb	r3, [r7, #1]
 8001550:	78ba      	ldrb	r2, [r7, #2]
 8001552:	f7ff ff25 	bl	80013a0 <DISP_DrawChar>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <DISP_DrawText+0x56>
	while(*text)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <DISP_DrawText+0x20>
}
 8001564:	e000      	b.n	8001568 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001566:	bf00      	nop
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4603      	mov	r3, r0
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	717b      	strb	r3, [r7, #5]
 800158a:	4613      	mov	r3, r2
 800158c:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 800158e:	793a      	ldrb	r2, [r7, #4]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d104      	bne.n	80015a0 <DISP_DrawLineSimple+0x30>
 8001596:	797a      	ldrb	r2, [r7, #5]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	429a      	cmp	r2, r3
 800159c:	f000 8086 	beq.w	80016ac <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 80015a0:	797a      	ldrb	r2, [r7, #5]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	7939      	ldrb	r1, [r7, #4]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db3e      	blt.n	800162e <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015b0:	793a      	ldrb	r2, [r7, #4]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015be:	797a      	ldrb	r2, [r7, #5]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e022      	b.n	8001620 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	ee07 2a90 	vmov	s15, r2
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f6:	79ba      	ldrb	r2, [r7, #6]
 80015f8:	ee07 2a90 	vmov	s15, r2
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001608:	edc7 7a00 	vstr	s15, [r7]
 800160c:	783a      	ldrb	r2, [r7, #0]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe6b 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	ddd6      	ble.n	80015da <DISP_DrawLineSimple+0x6a>
 800162c:	e03f      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 800162e:	797a      	ldrb	r2, [r7, #5]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163c:	793a      	ldrb	r2, [r7, #4]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e022      	b.n	800169e <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	edc7 7a00 	vstr	s15, [r7]
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fe2c 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	793a      	ldrb	r2, [r7, #4]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	ddd6      	ble.n	8001658 <DISP_DrawLineSimple+0xe8>
 80016aa:	e000      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016ac:	bf00      	nop
		}
	}
}
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	4603      	mov	r3, r0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	717b      	strb	r3, [r7, #5]
 80016ce:	4613      	mov	r3, r2
 80016d0:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016d2:	79bc      	ldrb	r4, [r7, #6]
 80016d4:	797a      	ldrb	r2, [r7, #5]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	79f8      	ldrb	r0, [r7, #7]
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4623      	mov	r3, r4
 80016e0:	f7ff ff46 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016e4:	793c      	ldrb	r4, [r7, #4]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	79b9      	ldrb	r1, [r7, #6]
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	7e3b      	ldrb	r3, [r7, #24]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7ff ff3d 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016f6:	793c      	ldrb	r4, [r7, #4]
 80016f8:	797a      	ldrb	r2, [r7, #5]
 80016fa:	79b9      	ldrb	r1, [r7, #6]
 80016fc:	7978      	ldrb	r0, [r7, #5]
 80016fe:	7e3b      	ldrb	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff ff34 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001708:	793c      	ldrb	r4, [r7, #4]
 800170a:	797a      	ldrb	r2, [r7, #5]
 800170c:	7939      	ldrb	r1, [r7, #4]
 800170e:	79f8      	ldrb	r0, [r7, #7]
 8001710:	7e3b      	ldrb	r3, [r7, #24]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7ff ff2b 	bl	8001570 <DISP_DrawLineSimple>
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
	...

08001724 <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 8001724:	b490      	push	{r4, r7}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	4603      	mov	r3, r0
 8001738:	71bb      	strb	r3, [r7, #6]
 800173a:	460b      	mov	r3, r1
 800173c:	717b      	strb	r3, [r7, #5]
 800173e:	4613      	mov	r3, r2
 8001740:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 8001756:	793b      	ldrb	r3, [r7, #4]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e074      	b.n	800184e <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e06a      	b.n	8001840 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <DISP_FillRect+0x62>
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d005      	beq.n	8001786 <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e022      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 8001786:	7bba      	ldrb	r2, [r7, #14]
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d110      	bne.n	80017b0 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	f1c3 0308 	rsb	r3, r3, #8
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	fa41 f303 	asr.w	r3, r1, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00d      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	fa42 f303 	asr.w	r3, r2, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e001      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d031      	beq.n	8001838 <DISP_FillRect+0x114>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dc30      	bgt.n	800183a <DISP_FillRect+0x116>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DISP_FillRect+0xbe>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d013      	beq.n	8001808 <DISP_FillRect+0xe4>
 80017e0:	e02b      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <DISP_FillRect+0x140>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	441a      	add	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <DISP_FillRect+0x140>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	441a      	add	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4413      	add	r3, r2
 8001802:	460a      	mov	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
				break;
 8001806:	e018      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <DISP_FillRect+0x140>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	43db      	mvns	r3, r3
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4013      	ands	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <DISP_FillRect+0x140>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	441a      	add	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
				break;
 8001836:	e000      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001838:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	dd90      	ble.n	800176a <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dd86      	ble.n	8001764 <DISP_FillRect+0x40>
			}
		}
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bc90      	pop	{r4, r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200005b8 	.word	0x200005b8

08001868 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e002      	b.n	800187c <DISP_CountCharString+0x14>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f6      	bne.n	8001876 <DISP_CountCharString+0xe>
	return ct;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f7ff ffe0 	bl	8001868 <DISP_CountCharString>
 80018a8:	4603      	mov	r3, r0
 80018aa:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	461a      	mov	r2, r3
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	757b      	strb	r3, [r7, #21]
 80018d2:	e005      	b.n	80018e0 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	4413      	add	r3, r2
 80018de:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d804      	bhi.n	80018f2 <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	3308      	adds	r3, #8
 80018ee:	753b      	strb	r3, [r7, #20]
 80018f0:	e005      	b.n	80018fe <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7818      	ldrb	r0, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461c      	mov	r4, r3
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	7d7a      	ldrb	r2, [r7, #21]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	f7ff ff02 	bl	8001724 <DISP_FillRect>

	switch(s->align_x) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d010      	beq.n	800194a <DISP_DisplayText+0xb2>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc20      	bgt.n	800196e <DISP_DisplayText+0xd6>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <DISP_DisplayText+0x9e>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <DISP_DisplayText+0xa8>
 8001934:	e01b      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
		break;
 800193e:	e016      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001940:	7d7a      	ldrb	r2, [r7, #21]
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	75fb      	strb	r3, [r7, #23]
		break;
 8001948:	e011      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	7d7b      	ldrb	r3, [r7, #21]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	7809      	ldrb	r1, [r1, #0]
 8001954:	1a5b      	subs	r3, r3, r1
 8001956:	0fd9      	lsrs	r1, r3, #31
 8001958:	440b      	add	r3, r1
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	75fb      	strb	r3, [r7, #23]
		break;
 800196c:	bf00      	nop
	}

	switch(s->align_y) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	799b      	ldrb	r3, [r3, #6]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d00f      	beq.n	8001996 <DISP_DisplayText+0xfe>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc1c      	bgt.n	80019b4 <DISP_DisplayText+0x11c>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <DISP_DisplayText+0xec>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d005      	beq.n	800198e <DISP_DisplayText+0xf6>
 8001982:	e017      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	3301      	adds	r3, #1
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e012      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	3b07      	subs	r3, #7
 8001992:	75bb      	strb	r3, [r7, #22]
		break;
 8001994:	e00e      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	785a      	ldrb	r2, [r3, #1]
 800199a:	7d3b      	ldrb	r3, [r7, #20]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	7849      	ldrb	r1, [r1, #1]
 80019a0:	1a5b      	subs	r3, r3, r1
 80019a2:	0fd9      	lsrs	r1, r3, #31
 80019a4:	440b      	add	r3, r1
 80019a6:	105b      	asrs	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b03      	subs	r3, #3
 80019b0:	75bb      	strb	r3, [r7, #22]
		break;
 80019b2:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	7dba      	ldrb	r2, [r7, #22]
 80019ba:	7df9      	ldrb	r1, [r7, #23]
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f7ff fda7 	bl	8001510 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019ca:	7d3b      	ldrb	r3, [r7, #20]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e024      	b.n	8001a20 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fefe 	bl	80027dc <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 ff0e 	bl	8002806 <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e00c      	b.n	8001a0c <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <DISP_DisplayText+0x1a0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fed3 	bl	80027ac <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dc02      	bgt.n	8001a1a <DISP_DisplayText+0x182>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	ddeb      	ble.n	80019f2 <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dc02      	bgt.n	8001a2e <DISP_DisplayText+0x196>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	ddd3      	ble.n	80019d6 <DISP_DisplayText+0x13e>
		}
	}

}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005b8 	.word	0x200005b8

08001a3c <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	460b      	mov	r3, r1
 8001a54:	717b      	strb	r3, [r7, #5]
 8001a56:	4613      	mov	r3, r2
 8001a58:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e022      	b.n	8001ab2 <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 feb3 	bl	80027dc <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fec4 	bl	8002806 <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00c      	b.n	8001a9e <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <DISP_OLEDUpdate+0x8c>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe8a 	bl	80027ac <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dc02      	bgt.n	8001aac <DISP_OLEDUpdate+0x70>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aaa:	ddeb      	ble.n	8001a84 <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dc02      	bgt.n	8001ac0 <DISP_OLEDUpdate+0x84>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	ddd5      	ble.n	8001a6c <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	200005b8 	.word	0x200005b8

08001acc <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785a      	ldrb	r2, [r3, #1]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001af0:	4413      	add	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	4622      	mov	r2, r4
 8001afe:	f7ff fe11 	bl	8001724 <DISP_FillRect>
			s->color);
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
	...

08001b0c <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b12:	2300      	movs	r3, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <DISP_Test+0x108>)
 8001b1a:	f7ff fcf9 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2208      	movs	r2, #8
 8001b22:	2100      	movs	r1, #0
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <DISP_Test+0x10c>)
 8001b26:	f7ff fcf3 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	2100      	movs	r1, #0
 8001b30:	483a      	ldr	r0, [pc, #232]	; (8001c1c <DISP_Test+0x110>)
 8001b32:	f7ff fced 	bl	8001510 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	233e      	movs	r3, #62	; 0x3e
 8001b3c:	227a      	movs	r2, #122	; 0x7a
 8001b3e:	211e      	movs	r1, #30
 8001b40:	203e      	movs	r0, #62	; 0x3e
 8001b42:	f7ff fdb7 	bl	80016b4 <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	233c      	movs	r3, #60	; 0x3c
 8001b4c:	2278      	movs	r2, #120	; 0x78
 8001b4e:	2120      	movs	r1, #32
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	f7ff fde7 	bl	8001724 <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b56:	2301      	movs	r3, #1
 8001b58:	222a      	movs	r2, #42	; 0x2a
 8001b5a:	2151      	movs	r1, #81	; 0x51
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <DISP_Test+0x114>)
 8001b5e:	f7ff fcd7 	bl	8001510 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e01d      	b.n	8001ba4 <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fe35 	bl	80027dc <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fe47 	bl	8002806 <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	e00c      	b.n	8001b98 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <DISP_Test+0x118>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	441a      	add	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fe0d 	bl	80027ac <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddef      	ble.n	8001b7e <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	ddde      	ble.n	8001b68 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e022      	b.n	8001bf6 <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fe0f 	bl	80027dc <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f000 fe21 	bl	8002806 <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00f      	b.n	8001bea <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <DISP_Test+0x11c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fde4 	bl	80027ac <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b27      	cmp	r3, #39	; 0x27
 8001bee:	ddec      	ble.n	8001bca <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	ddd9      	ble.n	8001bb0 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c00:	f006 fd04 	bl	800860c <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c04:	f000 fe19 	bl	800283a <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c08:	f7ff fb66 	bl	80012d8 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	080105b0 	.word	0x080105b0
 8001c18:	080105c4 	.word	0x080105c4
 8001c1c:	080105d8 	.word	0x080105d8
 8001c20:	080105e0 	.word	0x080105e0
 8001c24:	200005b8 	.word	0x200005b8
 8001c28:	200001e8 	.word	0x200001e8

08001c2c <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c30:	f000 fe03 	bl	800283a <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c34:	f7ff fb50 	bl	80012d8 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c38:	20af      	movs	r0, #175	; 0xaf
 8001c3a:	f000 fd8b 	bl	8002754 <OLED_Command>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2038      	movs	r0, #56	; 0x38
 8001c6c:	f007 fb0f 	bl	800928e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c70:	2038      	movs	r0, #56	; 0x38
 8001c72:	f007 fb28 	bl	80092c6 <HAL_NVIC_EnableIRQ>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <EEP_Init+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200009b8 	.word	0x200009b8

08001ca4 <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <EEP_WritePage+0x40>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	89fa      	ldrh	r2, [r7, #14]
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21a0      	movs	r1, #160	; 0xa0
 8001ccc:	f008 f99c 	bl	800a008 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cd0:	f006 fc90 	bl	80085f4 <HAL_GetTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <EEP_WritePage+0x44>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200009b8 	.word	0x200009b8
 8001ce8:	200009bc 	.word	0x200009bc

08001cec <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <EEP_WriteMem+0x40>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	9102      	str	r1, [sp, #8]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	21a0      	movs	r1, #160	; 0xa0
 8001d14:	f008 f978 	bl	800a008 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d18:	f006 fc6c 	bl	80085f4 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <EEP_WriteMem+0x44>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009b8 	.word	0x200009b8
 8001d30:	200009bc 	.word	0x200009bc

08001d34 <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <EEP_ReadPage+0x40>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	89fa      	ldrh	r2, [r7, #14]
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	21a0      	movs	r1, #160	; 0xa0
 8001d5c:	f008 fa4e 	bl	800a1fc <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <EEP_ReadPage+0x44>)
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200009b8 	.word	0x200009b8
 8001d78:	200009c0 	.word	0x200009c0

08001d7c <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <EEP_ReadMem+0x44>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	21a0      	movs	r1, #160	; 0xa0
 8001da4:	f008 fa2a 	bl	800a1fc <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <EEP_ReadMem+0x48>)
 8001db4:	801a      	strh	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200009b8 	.word	0x200009b8
 8001dc4:	200009c0 	.word	0x200009c0

08001dc8 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dcc:	f006 fc12 	bl	80085f4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <EEP_ReadyToWrite+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d901      	bls.n	8001de0 <EEP_ReadyToWrite+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <EEP_ReadyToWrite+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200009bc 	.word	0x200009bc

08001dec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3e      	ldr	r2, [pc, #248]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001e7a:	f007 ff67 	bl	8009d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001e86:	f007 ff61 	bl	8009d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ea0:	f007 fda0 	bl	80099e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ebe:	f007 fd91 	bl	80099e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001edc:	f007 fd82 	bl	80099e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ee0:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001ee4:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001ef6:	f007 fd75 	bl	80099e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001f14:	f007 fd66 	bl	80099e4 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400

08001f2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x58>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <MX_I2C1_Init+0x5c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f6c:	f007 ff08 	bl	8009d80 <HAL_I2C_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f76:	f000 f9d8 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009c4 	.word	0x200009c4
 8001f84:	40005400 	.word	0x40005400
 8001f88:	00061a80 	.word	0x00061a80

08001f8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_I2C2_Init+0x58>)
 8001f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fca:	f007 fed9 	bl	8009d80 <HAL_I2C_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fd4:	f000 f9a9 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000a18 	.word	0x20000a18
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	000186a0 	.word	0x000186a0

08001fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_I2C_MspInit+0xec>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12d      	bne.n	8002066 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4826      	ldr	r0, [pc, #152]	; (80020dc <HAL_I2C_MspInit+0xf4>)
 8002044:	f007 fcce 	bl	80099e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002064:	e031      	b.n	80020ca <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_I2C_MspInit+0xf8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d12c      	bne.n	80020ca <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800208c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002092:	2312      	movs	r3, #18
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209e:	2304      	movs	r3, #4
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <HAL_I2C_MspInit+0xf4>)
 80020aa:	f007 fc9b 	bl	80099e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40005800 	.word	0x40005800

080020e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e8:	f006 fa1e 	bl	8008528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ec:	f000 f860 	bl	80021b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f0:	f7ff fe7c 	bl	8001dec <MX_GPIO_Init>
  MX_DMA_Init();
 80020f4:	f7ff fda6 	bl	8001c44 <MX_DMA_Init>
  MX_ADC1_Init();
 80020f8:	f7fe ff48 	bl	8000f8c <MX_ADC1_Init>
  MX_I2C1_Init();
 80020fc:	f7ff ff16 	bl	8001f2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002100:	f7ff ff44 	bl	8001f8c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002104:	f002 ff66 	bl	8004fd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002108:	f003 f81c 	bl	8005144 <MX_TIM2_Init>
  MX_TIM3_Init();
 800210c:	f003 f86e 	bl	80051ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8002110:	f003 f8e6 	bl	80052e0 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002114:	f006 f964 	bl	80083e0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002118:	f006 f8f0 	bl	80082fc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800211c:	f003 f934 	bl	8005388 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002120:	481b      	ldr	r0, [pc, #108]	; (8002190 <main+0xac>)
 8002122:	f7ff fdaf 	bl	8001c84 <EEP_Init>
  SEN_Init(&hadc1);
 8002126:	481b      	ldr	r0, [pc, #108]	; (8002194 <main+0xb0>)
 8002128:	f001 ff6a 	bl	8004000 <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	481a      	ldr	r0, [pc, #104]	; (8002198 <main+0xb4>)
 8002130:	f009 fe16 	bl	800bd60 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002134:	213c      	movs	r1, #60	; 0x3c
 8002136:	4819      	ldr	r0, [pc, #100]	; (800219c <main+0xb8>)
 8002138:	f009 fe12 	bl	800bd60 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800213c:	2100      	movs	r1, #0
 800213e:	4818      	ldr	r0, [pc, #96]	; (80021a0 <main+0xbc>)
 8002140:	f009 fca0 	bl	800ba84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002144:	2104      	movs	r1, #4
 8002146:	4816      	ldr	r0, [pc, #88]	; (80021a0 <main+0xbc>)
 8002148:	f009 fc9c 	bl	800ba84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800214c:	2108      	movs	r1, #8
 800214e:	4814      	ldr	r0, [pc, #80]	; (80021a0 <main+0xbc>)
 8002150:	f009 fc98 	bl	800ba84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002154:	210c      	movs	r1, #12
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <main+0xbc>)
 8002158:	f009 fc94 	bl	800ba84 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002160:	f006 fa54 	bl	800860c <HAL_Delay>
  Run_Init();
 8002164:	f001 fae4 	bl	8003730 <Run_Init>
  OLED_Init(&hi2c1);
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <main+0xc0>)
 800216a:	f000 fb8b 	bl	8002884 <OLED_Init>
  DISP_Test();
 800216e:	f7ff fccd 	bl	8001b0c <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <main+0xc4>)
 800217a:	f007 fde7 	bl	8009d4c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <main+0xc8>)
 8002180:	f009 fbc0 	bl	800b904 <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002184:	f006 f82e 	bl	80081e4 <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 8002188:	f006 f83a 	bl	8008200 <UI_Main>
 800218c:	e7fc      	b.n	8002188 <main+0xa4>
 800218e:	bf00      	nop
 8002190:	20000a18 	.word	0x20000a18
 8002194:	20000510 	.word	0x20000510
 8002198:	20000da8 	.word	0x20000da8
 800219c:	20000e38 	.word	0x20000e38
 80021a0:	20000df0 	.word	0x20000df0
 80021a4:	200009c4 	.word	0x200009c4
 80021a8:	40020800 	.word	0x40020800
 80021ac:	20000e80 	.word	0x20000e80

080021b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b094      	sub	sp, #80	; 0x50
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	2230      	movs	r2, #48	; 0x30
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00b fb14 	bl	800d7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <SystemClock_Config+0xcc>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <SystemClock_Config+0xcc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <SystemClock_Config+0xd0>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <SystemClock_Config+0xd0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800220c:	2301      	movs	r3, #1
 800220e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2302      	movs	r3, #2
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002220:	2308      	movs	r3, #8
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002224:	23a8      	movs	r3, #168	; 0xa8
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002228:	2302      	movs	r3, #2
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800222c:	2307      	movs	r3, #7
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	4618      	mov	r0, r3
 8002236:	f008 fe7f 	bl	800af38 <HAL_RCC_OscConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002240:	f000 f873 	bl	800232a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002244:	230f      	movs	r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002250:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2105      	movs	r1, #5
 8002262:	4618      	mov	r0, r3
 8002264:	f009 f8e0 	bl	800b428 <HAL_RCC_ClockConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800226e:	f000 f85c 	bl	800232a <Error_Handler>
  }
}
 8002272:	bf00      	nop
 8002274:	3750      	adds	r7, #80	; 0x50
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12d      	bne.n	80022f2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800229e:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		Plan_Main(0.001);
 80022a0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002304 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022a4:	f001 f8d8 	bl	8003458 <Plan_Main>
		if(counter >= 10) {
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	dd11      	ble.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x50>
			Run_MotorRoutine(0.01);
 80022b0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002308 <HAL_TIM_PeriodElapsedCallback+0x84>
 80022b4:	f001 faa2 	bl	80037fc <Run_MotorRoutine>
			Run_MotorRoutine2(0.01);
 80022b8:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002308 <HAL_TIM_PeriodElapsedCallback+0x84>
 80022bc:	f001 fab6 	bl	800382c <Run_MotorRoutine2>
			main_flag |= MAIN_FLAG_DISP;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022cc:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
		}
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d108      	bne.n	80022f2 <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022e0:	f001 ff20 	bl	8004124 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40001000 	.word	0x40001000
 8002300:	20000a70 	.word	0x20000a70
 8002304:	3a83126f 	.word	0x3a83126f
 8002308:	3c23d70a 	.word	0x3c23d70a
 800230c:	20000a6c 	.word	0x20000a6c
 8002310:	20000c9d 	.word	0x20000c9d

08002314 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f001 ff11 	bl	8004144 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800232e:	b672      	cpsid	i
}
 8002330:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002332:	e7fe      	b.n	8002332 <Error_Handler+0x8>

08002334 <Motor_SetPWM>:

void Motor_Init(Motor_typedef* hmot) {

}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002340:	edd7 7a00 	vldr	s15, [r7]
 8002344:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002380 <Motor_SetPWM+0x4c>
 8002348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	dd02      	ble.n	8002358 <Motor_SetPWM+0x24>
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <Motor_SetPWM+0x50>)
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	e00a      	b.n	800236e <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 8002358:	edd7 7a00 	vldr	s15, [r7]
 800235c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002388 <Motor_SetPWM+0x54>
 8002360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	d501      	bpl.n	800236e <Motor_SetPWM+0x3a>
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <Motor_SetPWM+0x58>)
 800236c:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	42c60000 	.word	0x42c60000
 8002384:	42c60000 	.word	0x42c60000
 8002388:	c2c60000 	.word	0xc2c60000
 800238c:	c2c60000 	.word	0xc2c60000

08002390 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023a2:	ed97 7a00 	vldr	s14, [r7]
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023ae:	edd7 7a00 	vldr	s15, [r7]
 80023b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b6:	ee17 3a90 	vmov	r3, s15
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	841a      	strh	r2, [r3, #32]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <Motor_SetPoint+0x1a>
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d006      	beq.n	80023f2 <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023e4:	e00b      	b.n	80023fe <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023e6:	ed97 0a00 	vldr	s0, [r7]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <Motor_SetPWM>
		break;
 80023f0:	e005      	b.n	80023fe <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 80023f2:	ed97 0a00 	vldr	s0, [r7]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffca 	bl	8002390 <Motor_SetVel>
		break;
 80023fc:	bf00      	nop
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
	int16_t tim_period = (hmot->pwm*hmot->pwm_factor)*hmot->pwm_htim->Init.Period;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	ed93 7a06 	vldr	s14, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	edd3 7a07 	vldr	s15, [r3, #28]
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002434:	ee17 3a90 	vmov	r3, s15
 8002438:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 800243a:	89fb      	ldrh	r3, [r7, #14]
 800243c:	0bdb      	lsrs	r3, r3, #15
 800243e:	b2db      	uxtb	r3, r3
 8002440:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <Motor_ApplyPWM+0x4a>
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	425b      	negs	r3, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002450:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	429a      	cmp	r2, r3
 800245c:	d903      	bls.n	8002466 <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 8002466:	7b7b      	ldrb	r3, [r7, #13]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d04a      	beq.n	8002502 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	891b      	ldrh	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <Motor_ApplyPWM+0x7a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
 800247e:	e018      	b.n	80024b2 <Motor_ApplyPWM+0xac>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	891b      	ldrh	r3, [r3, #8]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d105      	bne.n	8002494 <Motor_ApplyPWM+0x8e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	6393      	str	r3, [r2, #56]	; 0x38
 8002492:	e00e      	b.n	80024b2 <Motor_ApplyPWM+0xac>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	891b      	ldrh	r3, [r3, #8]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d105      	bne.n	80024a8 <Motor_ApplyPWM+0xa2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024a6:	e004      	b.n	80024b2 <Motor_ApplyPWM+0xac>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	895b      	ldrh	r3, [r3, #10]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <Motor_ApplyPWM+0xc2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 80024c6:	e067      	b.n	8002598 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	895b      	ldrh	r3, [r3, #10]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d106      	bne.n	80024de <Motor_ApplyPWM+0xd8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024da:	6393      	str	r3, [r2, #56]	; 0x38
 80024dc:	e05c      	b.n	8002598 <Motor_ApplyPWM+0x192>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	895b      	ldrh	r3, [r3, #10]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d106      	bne.n	80024f4 <Motor_ApplyPWM+0xee>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024f2:	e051      	b.n	8002598 <Motor_ApplyPWM+0x192>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002500:	e04a      	b.n	8002598 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	891b      	ldrh	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <Motor_ApplyPWM+0x112>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
 8002516:	e01b      	b.n	8002550 <Motor_ApplyPWM+0x14a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	891b      	ldrh	r3, [r3, #8]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d106      	bne.n	800252e <Motor_ApplyPWM+0x128>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800252a:	6393      	str	r3, [r2, #56]	; 0x38
 800252c:	e010      	b.n	8002550 <Motor_ApplyPWM+0x14a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	891b      	ldrh	r3, [r3, #8]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d106      	bne.n	8002544 <Motor_ApplyPWM+0x13e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002540:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002542:	e005      	b.n	8002550 <Motor_ApplyPWM+0x14a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	895b      	ldrh	r3, [r3, #10]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <Motor_ApplyPWM+0x15e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002562:	e019      	b.n	8002598 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	895b      	ldrh	r3, [r3, #10]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d105      	bne.n	8002578 <Motor_ApplyPWM+0x172>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2300      	movs	r3, #0
 8002574:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002576:	e00f      	b.n	8002598 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	895b      	ldrh	r3, [r3, #10]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d105      	bne.n	800258c <Motor_ApplyPWM+0x186>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800258a:	e005      	b.n	8002598 <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002596:	e7ff      	b.n	8002598 <Motor_ApplyPWM+0x192>
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = __HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	fb12 f303 	smulbb	r3, r2, r3
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  tim_cnt_now - hmot->enc_cnt;
 80025ca:	89fa      	ldrh	r2, [r7, #14]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b21a      	sxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	82da      	strh	r2, [r3, #22]
	hmot->enc_cnt = tim_cnt_now;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	89fa      	ldrh	r2, [r7, #14]
 80025e2:	829a      	strh	r2, [r3, #20]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8099 	beq.w	8002738 <Motor_ControlRoutine+0x148>
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 8099 	bne.w	800273e <Motor_ControlRoutine+0x14e>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	ee07 3a90 	vmov	s15, r3
 8002620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002624:	edc7 7a03 	vstr	s15, [r7, #12]
		if(hmot->vel_sp == 0) hmot->sum_error=0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <Motor_ControlRoutine+0x4a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	635a      	str	r2, [r3, #52]	; 0x34
		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	dd07      	ble.n	8002654 <Motor_ControlRoutine+0x64>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	edd3 7a06 	vldr	s15, [r3, #24]
 800264a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002652:	d40c      	bmi.n	800266e <Motor_ControlRoutine+0x7e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da0b      	bge.n	8002676 <Motor_ControlRoutine+0x86>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	edd3 7a06 	vldr	s15, [r3, #24]
 8002664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	dd03      	ble.n	8002676 <Motor_ControlRoutine+0x86>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800267c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002690:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002694:	edd7 7a00 	vldr	s15, [r7]
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a0:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90) {
 80026a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002750 <Motor_ControlRoutine+0x160>
 80026ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	dd13      	ble.n	80026de <Motor_ControlRoutine+0xee>
			hmot->sum_error*=0.9;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff44 	bl	8000548 <__aeabi_f2d>
 80026c0:	a321      	add	r3, pc, #132	; (adr r3, 8002748 <Motor_ControlRoutine+0x158>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd ff97 	bl	80005f8 <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7fe fa89 	bl	8000be8 <__aeabi_d2f>
 80026d6:	4602      	mov	r2, r0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
 80026dc:	e009      	b.n	80026f2 <Motor_ControlRoutine+0x102>
		}
		else {
			hmot->sum_error += error;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80026e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		}
		hmot->pwm = mv;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	619a      	str	r2, [r3, #24]
		hmot->last_error = error;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30

		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800270a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800270e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edd3 6a06 	vldr	s13, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		hmot->pwm = hmot->filter;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fe64 	bl	8002406 <Motor_ApplyPWM>
	}
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	cccccccd 	.word	0xcccccccd
 800274c:	3feccccc 	.word	0x3feccccc
 8002750:	42b40000 	.word	0x42b40000

08002754 <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af04      	add	r7, sp, #16
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <OLED_Command+0x2c>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	230a      	movs	r3, #10
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	2301      	movs	r3, #1
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	2200      	movs	r2, #0
 8002772:	2178      	movs	r1, #120	; 0x78
 8002774:	f007 fc48 	bl	800a008 <HAL_I2C_Mem_Write>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000a74 	.word	0x20000a74

08002784 <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	460a      	mov	r2, r1
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	4613      	mov	r3, r2
 8002792:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ffdc 	bl	8002754 <OLED_Command>
	OLED_Command(byte2);
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ffd8 	bl	8002754 <OLED_Command>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <OLED_Data+0x2c>)
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	230a      	movs	r3, #10
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	2301      	movs	r3, #1
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	2178      	movs	r1, #120	; 0x78
 80027cc:	f007 fc1c 	bl	800a008 <HAL_I2C_Mem_Write>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000a74 	.word	0x20000a74

080027dc <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ffab 	bl	8002754 <OLED_Command>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	3302      	adds	r3, #2
 8002814:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	b2da      	uxtb	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f7ff ffa9 	bl	8002784 <OLED_DoubleCommand>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	e016      	b.n	8002874 <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ffc6 	bl	80027dc <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff ffd8 	bl	8002806 <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	e005      	b.n	8002868 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff ffa5 	bl	80027ac <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b7f      	cmp	r3, #127	; 0x7f
 800286c:	ddf6      	ble.n	800285c <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3301      	adds	r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b07      	cmp	r3, #7
 8002878:	dde5      	ble.n	8002846 <OLED_ClearRAM+0xc>
			}
		}
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 800288c:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <OLED_Init+0x6c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 8002892:	20ae      	movs	r0, #174	; 0xae
 8002894:	f7ff ff5e 	bl	8002754 <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 8002898:	213f      	movs	r1, #63	; 0x3f
 800289a:	20a8      	movs	r0, #168	; 0xa8
 800289c:	f7ff ff72 	bl	8002784 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 80028a0:	2100      	movs	r1, #0
 80028a2:	20d3      	movs	r0, #211	; 0xd3
 80028a4:	f7ff ff6e 	bl	8002784 <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 80028a8:	2040      	movs	r0, #64	; 0x40
 80028aa:	f7ff ff53 	bl	8002754 <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 80028ae:	20a1      	movs	r0, #161	; 0xa1
 80028b0:	f7ff ff50 	bl	8002754 <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 80028b4:	20c8      	movs	r0, #200	; 0xc8
 80028b6:	f7ff ff4d 	bl	8002754 <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 80028ba:	2112      	movs	r1, #18
 80028bc:	20da      	movs	r0, #218	; 0xda
 80028be:	f7ff ff61 	bl	8002784 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 80028c2:	2160      	movs	r1, #96	; 0x60
 80028c4:	2081      	movs	r0, #129	; 0x81
 80028c6:	f7ff ff5d 	bl	8002784 <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 80028ca:	20a4      	movs	r0, #164	; 0xa4
 80028cc:	f7ff ff42 	bl	8002754 <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 80028d0:	20a6      	movs	r0, #166	; 0xa6
 80028d2:	f7ff ff3f 	bl	8002754 <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 80028d6:	21f0      	movs	r1, #240	; 0xf0
 80028d8:	20d5      	movs	r0, #213	; 0xd5
 80028da:	f7ff ff53 	bl	8002784 <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 80028de:	f7ff ffac 	bl	800283a <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 80028e2:	20af      	movs	r0, #175	; 0xaf
 80028e4:	f7ff ff36 	bl	8002754 <OLED_Command>
//	OLED_Load();
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000a74 	.word	0x20000a74

080028f4 <Plan_SetCounter>:

uint8_t counter_status = 0;
uint8_t action_status = 0;
uint8_t acc_status = 0;

void Plan_SetCounter() {
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <Plan_SetCounter+0x18>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <Plan_SetCounter+0x1c>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000a78 	.word	0x20000a78
 8002910:	20000a7c 	.word	0x20000a7c

08002914 <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <Plan_CheckCounterValue+0x34>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <Plan_CheckCounterValue+0x38>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1ad1      	subs	r1, r2, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4299      	cmp	r1, r3
 8002932:	bf2c      	ite	cs
 8002934:	2301      	movcs	r3, #1
 8002936:	2300      	movcc	r3, #0
 8002938:	b2db      	uxtb	r3, r3
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000a78 	.word	0x20000a78
 800294c:	20000a7c 	.word	0x20000a7c

08002950 <Plan_CounterValue>:

uint32_t Plan_CounterValue() {
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
	return (plan_counter - plan_last_counter);
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <Plan_CounterValue+0x18>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <Plan_CounterValue+0x1c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1ad3      	subs	r3, r2, r3
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	20000a78 	.word	0x20000a78
 800296c:	20000a7c 	.word	0x20000a7c

08002970 <Plan_CheckSensor>:

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	460a      	mov	r2, r1
 800297a:	71fb      	strb	r3, [r7, #7]
 800297c:	4613      	mov	r3, r2
 800297e:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <Plan_CheckSensor+0x1a>
 8002986:	2301      	movs	r3, #1
 8002988:	e02c      	b.n	80029e4 <Plan_CheckSensor+0x74>
	else {
		s-=1;
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	3b01      	subs	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <Plan_CheckSensor+0x2c>
 8002996:	2b02      	cmp	r3, #2
 8002998:	d009      	beq.n	80029ae <Plan_CheckSensor+0x3e>
 800299a:	e019      	b.n	80029d0 <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <Plan_CheckSensor+0x80>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e01a      	b.n	80029e4 <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <Plan_CheckSensor+0x80>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <Plan_CheckSensor+0x56>
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f1c3 030d 	rsb	r3, r3, #13
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <Plan_CheckSensor+0x80>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <Plan_CheckSensor+0x5a>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <Plan_CheckSensor+0x5c>
 80029ca:	2300      	movs	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e009      	b.n	80029e4 <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f1c3 030d 	rsb	r3, r3, #13
 80029d6:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <Plan_CheckSensor+0x80>)
 80029d8:	5cd3      	ldrb	r3, [r2, r3]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
		}
	}
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	20000b70 	.word	0x20000b70
 80029f4:	00000000 	.word	0x00000000

080029f8 <Plan_Left>:

uint8_t Plan_Left(Action_typedef a) {
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 8002a04:	797b      	ldrb	r3, [r7, #5]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ffb1 	bl	8002970 <Plan_CheckSensor>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <Plan_Left+0x38>
 8002a14:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <Plan_Left+0x128>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <Plan_Left+0x38>
			Plan_SetCounter();
 8002a1c:	f7ff ff6a 	bl	80028f4 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002a20:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <Plan_Left+0x12c>)
 8002a22:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002a26:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <Plan_Left+0x130>)
 8002a28:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <Plan_Left+0x128>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <Plan_Left+0x128>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d168      	bne.n	8002b0a <Plan_Left+0x112>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002a38:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <Plan_Left+0x134>)
 8002a40:	7ddb      	ldrb	r3, [r3, #23]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd6c 	bl	8000524 <__aeabi_i2d>
 8002a4c:	a332      	add	r3, pc, #200	; (adr r3, 8002b18 <Plan_Left+0x120>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fdd1 	bl	80005f8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f8c3 	bl	8000be8 <__aeabi_d2f>
 8002a62:	4604      	mov	r4, r0
 8002a64:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <Plan_Left+0x134>)
 8002a6c:	7ddb      	ldrb	r3, [r3, #23]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd56 	bl	8000524 <__aeabi_i2d>
 8002a78:	a327      	add	r3, pc, #156	; (adr r3, 8002b18 <Plan_Left+0x120>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fdbb 	bl	80005f8 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fe f8ad 	bl	8000be8 <__aeabi_d2f>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	ee00 3a90 	vmov	s1, r3
 8002a94:	ee00 4a10 	vmov	s0, r4
 8002a98:	f001 fa98 	bl	8003fcc <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002a9c:	79bb      	ldrb	r3, [r7, #6]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d01f      	beq.n	8002ae2 <Plan_Left+0xea>
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	dc2f      	bgt.n	8002b06 <Plan_Left+0x10e>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <Plan_Left+0xb8>
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d009      	beq.n	8002ac2 <Plan_Left+0xca>
 8002aae:	e02a      	b.n	8002b06 <Plan_Left+0x10e>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff2e 	bl	8002914 <Plan_CheckCounterValue>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01e      	beq.n	8002afc <Plan_Left+0x104>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e024      	b.n	8002b0c <Plan_Left+0x114>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff25 	bl	8002914 <Plan_CheckCounterValue>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d017      	beq.n	8002b00 <Plan_Left+0x108>
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) return 2;
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2005      	movs	r0, #5
 8002ad4:	f7ff ff4c 	bl	8002970 <Plan_CheckSensor>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <Plan_Left+0x108>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e014      	b.n	8002b0c <Plan_Left+0x114>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <Plan_Left+0x12c>)
 8002ae4:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <Plan_Left+0x130>)
 8002aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	79fa      	ldrb	r2, [r7, #7]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	dd05      	ble.n	8002b04 <Plan_Left+0x10c>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e007      	b.n	8002b0c <Plan_Left+0x114>
			break;
 8002afc:	bf00      	nop
 8002afe:	e002      	b.n	8002b06 <Plan_Left+0x10e>
			break;
 8002b00:	bf00      	nop
 8002b02:	e000      	b.n	8002b06 <Plan_Left+0x10e>
			break;
 8002b04:	bf00      	nop
		}
		return 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <Plan_Left+0x114>
	}
	return 0;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	f3af 8000 	nop.w
 8002b18:	9999999a 	.word	0x9999999a
 8002b1c:	3fb99999 	.word	0x3fb99999
 8002b20:	20000a82 	.word	0x20000a82
 8002b24:	20000a88 	.word	0x20000a88
 8002b28:	20000a80 	.word	0x20000a80
 8002b2c:	20000d34 	.word	0x20000d34

08002b30 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002b3c:	797b      	ldrb	r3, [r7, #5]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff15 	bl	8002970 <Plan_CheckSensor>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <Plan_Right+0x38>
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <Plan_Right+0x128>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <Plan_Right+0x38>
			Plan_SetCounter();
 8002b54:	f7ff fece 	bl	80028f4 <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <Plan_Right+0x12c>)
 8002b5a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8002b5e:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <Plan_Right+0x130>)
 8002b60:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <Plan_Right+0x128>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002b68:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <Plan_Right+0x128>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d168      	bne.n	8002c42 <Plan_Right+0x112>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002b70:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <Plan_Right+0x134>)
 8002b78:	7ddb      	ldrb	r3, [r3, #23]
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fcd0 	bl	8000524 <__aeabi_i2d>
 8002b84:	a332      	add	r3, pc, #200	; (adr r3, 8002c50 <Plan_Right+0x120>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fd35 	bl	80005f8 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7fe f827 	bl	8000be8 <__aeabi_d2f>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <Plan_Right+0x134>)
 8002ba4:	7ddb      	ldrb	r3, [r3, #23]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fcba 	bl	8000524 <__aeabi_i2d>
 8002bb0:	a327      	add	r3, pc, #156	; (adr r3, 8002c50 <Plan_Right+0x120>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fd1f 	bl	80005f8 <__aeabi_dmul>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7fe f811 	bl	8000be8 <__aeabi_d2f>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	ee00 3a90 	vmov	s1, r3
 8002bcc:	ee00 4a10 	vmov	s0, r4
 8002bd0:	f001 f9fc 	bl	8003fcc <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002bd4:	79bb      	ldrb	r3, [r7, #6]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d01f      	beq.n	8002c1a <Plan_Right+0xea>
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	dc2f      	bgt.n	8002c3e <Plan_Right+0x10e>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <Plan_Right+0xb8>
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d009      	beq.n	8002bfa <Plan_Right+0xca>
 8002be6:	e02a      	b.n	8002c3e <Plan_Right+0x10e>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fe92 	bl	8002914 <Plan_CheckCounterValue>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01e      	beq.n	8002c34 <Plan_Right+0x104>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e024      	b.n	8002c44 <Plan_Right+0x114>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fe89 	bl	8002914 <Plan_CheckCounterValue>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <Plan_Right+0x108>
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) return 2;
 8002c08:	2101      	movs	r1, #1
 8002c0a:	2005      	movs	r0, #5
 8002c0c:	f7ff feb0 	bl	8002970 <Plan_CheckSensor>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <Plan_Right+0x108>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e014      	b.n	8002c44 <Plan_Right+0x114>
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <Plan_Right+0x12c>)
 8002c1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <Plan_Right+0x130>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	dd05      	ble.n	8002c3c <Plan_Right+0x10c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e007      	b.n	8002c44 <Plan_Right+0x114>
			break;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <Plan_Right+0x10e>
			break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <Plan_Right+0x10e>
			break;
 8002c3c:	bf00      	nop
		}
		return 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <Plan_Right+0x114>
	}
	return 0;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	f3af 8000 	nop.w
 8002c50:	9999999a 	.word	0x9999999a
 8002c54:	3fb99999 	.word	0x3fb99999
 8002c58:	20000a82 	.word	0x20000a82
 8002c5c:	20000a88 	.word	0x20000a88
 8002c60:	20000a80 	.word	0x20000a80
 8002c64:	20000d34 	.word	0x20000d34

08002c68 <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	1d3c      	adds	r4, r7, #4
 8002c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c74:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002c76:	797b      	ldrb	r3, [r7, #5]
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe78 	bl	8002970 <Plan_CheckSensor>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <Plan_Forward+0x3a>
 8002c86:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <Plan_Forward+0xdc>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <Plan_Forward+0x3a>
			Plan_SetCounter();
 8002c8e:	f7ff fe31 	bl	80028f4 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <Plan_Forward+0xe0>)
 8002c94:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002c98:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <Plan_Forward+0xe4>)
 8002c9a:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002c9c:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <Plan_Forward+0xdc>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <Plan_Forward+0xdc>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d146      	bne.n	8002d38 <Plan_Forward+0xd0>
		Run_SetMotorSpeed(_speed, _speed);
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	ee07 3a10 	vmov	s14, r3
 8002cba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002cbe:	eef0 0a47 	vmov.f32	s1, s14
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	f001 f981 	bl	8003fcc <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d01f      	beq.n	8002d10 <Plan_Forward+0xa8>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	dc2f      	bgt.n	8002d34 <Plan_Forward+0xcc>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <Plan_Forward+0x76>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d009      	beq.n	8002cf0 <Plan_Forward+0x88>
 8002cdc:	e02a      	b.n	8002d34 <Plan_Forward+0xcc>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe17 	bl	8002914 <Plan_CheckCounterValue>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01e      	beq.n	8002d2a <Plan_Forward+0xc2>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e024      	b.n	8002d3a <Plan_Forward+0xd2>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe0e 	bl	8002914 <Plan_CheckCounterValue>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d017      	beq.n	8002d2e <Plan_Forward+0xc6>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002cfe:	2102      	movs	r1, #2
 8002d00:	2007      	movs	r0, #7
 8002d02:	f7ff fe35 	bl	8002970 <Plan_CheckSensor>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <Plan_Forward+0xc6>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e014      	b.n	8002d3a <Plan_Forward+0xd2>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <Plan_Forward+0xe0>)
 8002d12:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <Plan_Forward+0xe4>)
 8002d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	4293      	cmp	r3, r2
 8002d24:	dd05      	ble.n	8002d32 <Plan_Forward+0xca>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e007      	b.n	8002d3a <Plan_Forward+0xd2>
			break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <Plan_Forward+0xcc>
			break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <Plan_Forward+0xcc>
			break;
 8002d32:	bf00      	nop
		}
		return 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <Plan_Forward+0xd2>
	}
	return 0;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000a82 	.word	0x20000a82
 8002d48:	20000a88 	.word	0x20000a88
 8002d4c:	20000a80 	.word	0x20000a80

08002d50 <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	1d3c      	adds	r4, r7, #4
 8002d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d5c:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002d5e:	797b      	ldrb	r3, [r7, #5]
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fe04 	bl	8002970 <Plan_CheckSensor>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <Plan_Backward+0x3a>
 8002d6e:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <Plan_Backward+0xe0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <Plan_Backward+0x3a>
			Plan_SetCounter();
 8002d76:	f7ff fdbd 	bl	80028f4 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <Plan_Backward+0xe4>)
 8002d7c:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <Plan_Backward+0xe8>)
 8002d82:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002d84:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <Plan_Backward+0xe0>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <Plan_Backward+0xe0>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d148      	bne.n	8002e24 <Plan_Backward+0xd4>
		Run_SetMotorSpeed(-_speed, -_speed);
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	425b      	negs	r3, r3
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	425b      	negs	r3, r3
 8002da2:	ee07 3a10 	vmov	s14, r3
 8002da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002daa:	eef0 0a47 	vmov.f32	s1, s14
 8002dae:	eeb0 0a67 	vmov.f32	s0, s15
 8002db2:	f001 f90b 	bl	8003fcc <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002db6:	79bb      	ldrb	r3, [r7, #6]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d01f      	beq.n	8002dfc <Plan_Backward+0xac>
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	dc2f      	bgt.n	8002e20 <Plan_Backward+0xd0>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <Plan_Backward+0x7a>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d009      	beq.n	8002ddc <Plan_Backward+0x8c>
 8002dc8:	e02a      	b.n	8002e20 <Plan_Backward+0xd0>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fda1 	bl	8002914 <Plan_CheckCounterValue>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01e      	beq.n	8002e16 <Plan_Backward+0xc6>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e024      	b.n	8002e26 <Plan_Backward+0xd6>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fd98 	bl	8002914 <Plan_CheckCounterValue>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d017      	beq.n	8002e1a <Plan_Backward+0xca>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002dea:	2102      	movs	r1, #2
 8002dec:	2007      	movs	r0, #7
 8002dee:	f7ff fdbf 	bl	8002970 <Plan_CheckSensor>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <Plan_Backward+0xca>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e014      	b.n	8002e26 <Plan_Backward+0xd6>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <Plan_Backward+0xe4>)
 8002dfe:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <Plan_Backward+0xe8>)
 8002e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	dd05      	ble.n	8002e1e <Plan_Backward+0xce>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e007      	b.n	8002e26 <Plan_Backward+0xd6>
			break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <Plan_Backward+0xd0>
			break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <Plan_Backward+0xd0>
			break;
 8002e1e:	bf00      	nop
		}
		return 1;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <Plan_Backward+0xd6>
	}
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000a82 	.word	0x20000a82
 8002e34:	20000a88 	.word	0x20000a88
 8002e38:	20000a80 	.word	0x20000a80

08002e3c <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <Plan_Follow+0x7c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <Plan_Follow+0x28>
		Plan_SetCounter();
 8002e50:	f7ff fd50 	bl	80028f4 <Plan_SetCounter>
		plan_last_enc = MOTOR_L.enc_cnt;
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <Plan_Follow+0x80>)
 8002e56:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <Plan_Follow+0x84>)
 8002e5c:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <Plan_Follow+0x7c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 8002e64:	79bb      	ldrb	r3, [r7, #6]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <Plan_Follow+0x34>
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d00c      	beq.n	8002e88 <Plan_Follow+0x4c>
 8002e6e:	e018      	b.n	8002ea2 <Plan_Follow+0x66>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fd4e 	bl	8002914 <Plan_CheckCounterValue>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d013      	beq.n	8002ea6 <Plan_Follow+0x6a>
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <Plan_Follow+0x6a>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e012      	b.n	8002eae <Plan_Follow+0x72>
		break;
	case 2:
		if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <Plan_Follow+0x80>)
 8002e8a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <Plan_Follow+0x84>)
 8002e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	79fa      	ldrb	r2, [r7, #7]
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	dd05      	ble.n	8002eaa <Plan_Follow+0x6e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e005      	b.n	8002eae <Plan_Follow+0x72>
		break;
	default: return 2;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e003      	b.n	8002eae <Plan_Follow+0x72>
		break;
 8002ea6:	bf00      	nop
 8002ea8:	e000      	b.n	8002eac <Plan_Follow+0x70>
		break;
 8002eaa:	bf00      	nop
	}
	return 0;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000a82 	.word	0x20000a82
 8002ebc:	20000a88 	.word	0x20000a88
 8002ec0:	20000a80 	.word	0x20000a80
 8002ec4:	00000000 	.word	0x00000000

08002ec8 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002ed4:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <Plan_FollowLeft+0x128>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <Plan_FollowLeft+0x28>
		Plan_SetCounter();
 8002edc:	f7ff fd0a 	bl	80028f4 <Plan_SetCounter>
		plan_last_enc = MOTOR_L.enc_cnt;
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <Plan_FollowLeft+0x12c>)
 8002ee2:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <Plan_FollowLeft+0x130>)
 8002ee8:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <Plan_FollowLeft+0x128>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 8002ef0:	797b      	ldrb	r3, [r7, #5]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fd3b 	bl	8002970 <Plan_CheckSensor>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <Plan_FollowLeft+0x46>
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <Plan_FollowLeft+0x128>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <Plan_FollowLeft+0x46>
		counter_status = 2;
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <Plan_FollowLeft+0x128>)
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <Plan_FollowLeft+0x128>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d13d      	bne.n	8002f92 <Plan_FollowLeft+0xca>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002f16:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <Plan_FollowLeft+0x134>)
 8002f1e:	7ddb      	ldrb	r3, [r3, #23]
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fafd 	bl	8000524 <__aeabi_i2d>
 8002f2a:	a32f      	add	r3, pc, #188	; (adr r3, 8002fe8 <Plan_FollowLeft+0x120>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fb62 	bl	80005f8 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fe54 	bl	8000be8 <__aeabi_d2f>
 8002f40:	4604      	mov	r4, r0
 8002f42:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <Plan_FollowLeft+0x134>)
 8002f4a:	7ddb      	ldrb	r3, [r3, #23]
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fae7 	bl	8000524 <__aeabi_i2d>
 8002f56:	a324      	add	r3, pc, #144	; (adr r3, 8002fe8 <Plan_FollowLeft+0x120>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fb4c 	bl	80005f8 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fd fe3e 	bl	8000be8 <__aeabi_d2f>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	ee00 3a90 	vmov	s1, r3
 8002f72:	ee00 4a10 	vmov	s0, r4
 8002f76:	f001 f829 	bl	8003fcc <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2005      	movs	r0, #5
 8002f7e:	f7ff fcf7 	bl	8002970 <Plan_CheckSensor>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <Plan_FollowLeft+0xc6>
			counter_status = 1;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <Plan_FollowLeft+0x128>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e024      	b.n	8002fdc <Plan_FollowLeft+0x114>
	}
	switch(a.act_mode) {
 8002f92:	79bb      	ldrb	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <Plan_FollowLeft+0xd6>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d00c      	beq.n	8002fb6 <Plan_FollowLeft+0xee>
 8002f9c:	e018      	b.n	8002fd0 <Plan_FollowLeft+0x108>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fcb7 	bl	8002914 <Plan_CheckCounterValue>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <Plan_FollowLeft+0x10c>
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <Plan_FollowLeft+0x10c>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e012      	b.n	8002fdc <Plan_FollowLeft+0x114>
		break;
	case 2:
		if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <Plan_FollowLeft+0x12c>)
 8002fb8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <Plan_FollowLeft+0x130>)
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	dd05      	ble.n	8002fd8 <Plan_FollowLeft+0x110>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e005      	b.n	8002fdc <Plan_FollowLeft+0x114>
		break;
	default: return 2;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e003      	b.n	8002fdc <Plan_FollowLeft+0x114>
		break;
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <Plan_FollowLeft+0x112>
		break;
 8002fd8:	bf00      	nop
	}
	return 0;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	9999999a 	.word	0x9999999a
 8002fec:	3fb99999 	.word	0x3fb99999
 8002ff0:	20000a82 	.word	0x20000a82
 8002ff4:	20000a88 	.word	0x20000a88
 8002ff8:	20000a80 	.word	0x20000a80
 8002ffc:	20000d34 	.word	0x20000d34

08003000 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 800300c:	4b46      	ldr	r3, [pc, #280]	; (8003128 <Plan_FollowRight+0x128>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <Plan_FollowRight+0x28>
		Plan_SetCounter();
 8003014:	f7ff fc6e 	bl	80028f4 <Plan_SetCounter>
		plan_last_enc = MOTOR_R.enc_cnt;
 8003018:	4b44      	ldr	r3, [pc, #272]	; (800312c <Plan_FollowRight+0x12c>)
 800301a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <Plan_FollowRight+0x130>)
 8003020:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <Plan_FollowRight+0x128>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 8003028:	797b      	ldrb	r3, [r7, #5]
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fc9f 	bl	8002970 <Plan_CheckSensor>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <Plan_FollowRight+0x46>
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <Plan_FollowRight+0x128>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d102      	bne.n	8003046 <Plan_FollowRight+0x46>
		counter_status = 2;
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <Plan_FollowRight+0x128>)
 8003042:	2202      	movs	r2, #2
 8003044:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <Plan_FollowRight+0x128>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d13d      	bne.n	80030ca <Plan_FollowRight+0xca>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 800304e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003052:	461a      	mov	r2, r3
 8003054:	4b37      	ldr	r3, [pc, #220]	; (8003134 <Plan_FollowRight+0x134>)
 8003056:	7ddb      	ldrb	r3, [r3, #23]
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa61 	bl	8000524 <__aeabi_i2d>
 8003062:	a32f      	add	r3, pc, #188	; (adr r3, 8003120 <Plan_FollowRight+0x120>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd fac6 	bl	80005f8 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f7fd fdb8 	bl	8000be8 <__aeabi_d2f>
 8003078:	4604      	mov	r4, r0
 800307a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800307e:	461a      	mov	r2, r3
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <Plan_FollowRight+0x134>)
 8003082:	7ddb      	ldrb	r3, [r3, #23]
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa4b 	bl	8000524 <__aeabi_i2d>
 800308e:	a324      	add	r3, pc, #144	; (adr r3, 8003120 <Plan_FollowRight+0x120>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fab0 	bl	80005f8 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fda2 	bl	8000be8 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	ee00 3a90 	vmov	s1, r3
 80030aa:	ee00 4a10 	vmov	s0, r4
 80030ae:	f000 ff8d 	bl	8003fcc <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 80030b2:	2101      	movs	r1, #1
 80030b4:	2005      	movs	r0, #5
 80030b6:	f7ff fc5b 	bl	8002970 <Plan_CheckSensor>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <Plan_FollowRight+0xc6>
			counter_status = 1;
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <Plan_FollowRight+0x128>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e024      	b.n	8003114 <Plan_FollowRight+0x114>
	}
	switch(a.act_mode) {
 80030ca:	79bb      	ldrb	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <Plan_FollowRight+0xd6>
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d00c      	beq.n	80030ee <Plan_FollowRight+0xee>
 80030d4:	e018      	b.n	8003108 <Plan_FollowRight+0x108>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fc1b 	bl	8002914 <Plan_CheckCounterValue>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d013      	beq.n	800310c <Plan_FollowRight+0x10c>
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <Plan_FollowRight+0x10c>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e012      	b.n	8003114 <Plan_FollowRight+0x114>
		break;
	case 2:
		if(MOTOR_R.enc_cnt - plan_last_enc > a.act_value) return 2;
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <Plan_FollowRight+0x12c>)
 80030f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <Plan_FollowRight+0x130>)
 80030f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	79fa      	ldrb	r2, [r7, #7]
 8003100:	4293      	cmp	r3, r2
 8003102:	dd05      	ble.n	8003110 <Plan_FollowRight+0x110>
 8003104:	2302      	movs	r3, #2
 8003106:	e005      	b.n	8003114 <Plan_FollowRight+0x114>
		break;
	default: return 2;
 8003108:	2302      	movs	r3, #2
 800310a:	e003      	b.n	8003114 <Plan_FollowRight+0x114>
		break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <Plan_FollowRight+0x112>
		break;
 8003110:	bf00      	nop
	}
	return 0;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	f3af 8000 	nop.w
 8003120:	9999999a 	.word	0x9999999a
 8003124:	3fb99999 	.word	0x3fb99999
 8003128:	20000a82 	.word	0x20000a82
 800312c:	20000a88 	.word	0x20000a88
 8003130:	20000a80 	.word	0x20000a80
 8003134:	20000d34 	.word	0x20000d34

08003138 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 8003144:	797b      	ldrb	r3, [r7, #5]
 8003146:	2102      	movs	r1, #2
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fc11 	bl	8002970 <Plan_CheckSensor>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <Plan_Invert+0x24>
		SEN_Invert();
 8003154:	f001 f9e0 	bl	8004518 <SEN_Invert>
		return 2;
 8003158:	2302      	movs	r3, #2
 800315a:	e000      	b.n	800315e <Plan_Invert+0x26>
	}
	return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 8003172:	2302      	movs	r3, #2
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 800318c:	2302      	movs	r3, #2
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	ed2d 8b02 	vpush	{d8}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	f107 040c 	add.w	r4, r7, #12
 80031aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80031b2:	71fb      	strb	r3, [r7, #7]
	static uint8_t stat = 0;
	uint8_t _speed = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
	if(counter_status == 0) {
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <Plan_ActionInit+0x184>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <Plan_ActionInit+0x2e>
		Plan_SetCounter();
 80031c0:	f7ff fb98 	bl	80028f4 <Plan_SetCounter>
		counter_status = 1;
 80031c4:	4b56      	ldr	r3, [pc, #344]	; (8003320 <Plan_ActionInit+0x184>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fba1 	bl	8002914 <Plan_CheckCounterValue>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <Plan_ActionInit+0x54>
 80031d8:	4b52      	ldr	r3, [pc, #328]	; (8003324 <Plan_ActionInit+0x188>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <Plan_ActionInit+0x54>
		counter_status = 0;
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <Plan_ActionInit+0x184>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
		stat = 1;
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <Plan_ActionInit+0x188>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
		return 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e091      	b.n	8003314 <Plan_ActionInit+0x178>
	}

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 80031f0:	7d3b      	ldrb	r3, [r7, #20]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb8e 	bl	8002914 <Plan_CheckCounterValue>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00e      	beq.n	800321c <Plan_ActionInit+0x80>
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <Plan_ActionInit+0x188>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10a      	bne.n	800321c <Plan_ActionInit+0x80>
		counter_status = 0;
 8003206:	4b46      	ldr	r3, [pc, #280]	; (8003320 <Plan_ActionInit+0x184>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
		acc_status = 0;
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <Plan_ActionInit+0x18c>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
		stat = 0;
 8003212:	4b44      	ldr	r3, [pc, #272]	; (8003324 <Plan_ActionInit+0x188>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
		return 3;
 8003218:	2303      	movs	r3, #3
 800321a:	e07b      	b.n	8003314 <Plan_ActionInit+0x178>
	}

	if(Plan_CheckCounterValue(plan.acc) && stat == 1 && acc_status == 1) {
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <Plan_ActionInit+0x190>)
 800321e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb76 	bl	8002914 <Plan_CheckCounterValue>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <Plan_ActionInit+0xa8>
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <Plan_ActionInit+0x188>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d106      	bne.n	8003244 <Plan_ActionInit+0xa8>
 8003236:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <Plan_ActionInit+0x18c>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d102      	bne.n	8003244 <Plan_ActionInit+0xa8>
		acc_status = 2;
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <Plan_ActionInit+0x18c>)
 8003240:	2202      	movs	r2, #2
 8003242:	701a      	strb	r2, [r3, #0]
	}

	if(acc_status == 0) {
 8003244:	4b38      	ldr	r3, [pc, #224]	; (8003328 <Plan_ActionInit+0x18c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <Plan_ActionInit+0xbc>
		_speed = sp;
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	77fb      	strb	r3, [r7, #31]
		acc_status = 1;
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <Plan_ActionInit+0x18c>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e050      	b.n	80032fa <Plan_ActionInit+0x15e>
	}
	else if(acc_status == 1) {
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <Plan_ActionInit+0x18c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d146      	bne.n	80032ee <Plan_ActionInit+0x152>
		if(sp > a.boost_speed) {
 8003260:	7d7b      	ldrb	r3, [r7, #21]
 8003262:	79fa      	ldrb	r2, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d91e      	bls.n	80032a6 <Plan_ActionInit+0x10a>
			_speed = (sp-a.boost_speed)*(float)(Plan_CounterValue()/(float)plan.acc);
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	7d7a      	ldrb	r2, [r7, #21]
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003276:	f7ff fb6b 	bl	8002950 <Plan_CounterValue>
 800327a:	ee07 0a90 	vmov	s15, r0
 800327e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <Plan_ActionInit+0x190>)
 8003284:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003294:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800329c:	edc7 7a00 	vstr	s15, [r7]
 80032a0:	783b      	ldrb	r3, [r7, #0]
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e029      	b.n	80032fa <Plan_ActionInit+0x15e>
		}
		else if(sp < a.boost_speed){
 80032a6:	7d7b      	ldrb	r3, [r7, #21]
 80032a8:	79fa      	ldrb	r2, [r7, #7]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d225      	bcs.n	80032fa <Plan_ActionInit+0x15e>
			_speed = (a.boost_speed-sp)*(float)(Plan_CounterValue()/(float)plan.acc);
 80032ae:	7d7b      	ldrb	r3, [r7, #21]
 80032b0:	461a      	mov	r2, r3
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80032be:	f7ff fb47 	bl	8002950 <Plan_CounterValue>
 80032c2:	ee07 0a90 	vmov	s15, r0
 80032c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <Plan_ActionInit+0x190>)
 80032cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032dc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80032e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e4:	edc7 7a00 	vstr	s15, [r7]
 80032e8:	783b      	ldrb	r3, [r7, #0]
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e005      	b.n	80032fa <Plan_ActionInit+0x15e>
		}
	}
	else if(acc_status == 2) {
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <Plan_ActionInit+0x18c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d101      	bne.n	80032fa <Plan_ActionInit+0x15e>
		_speed = a.boost_speed;
 80032f6:	7d7b      	ldrb	r3, [r7, #21]
 80032f8:	77fb      	strb	r3, [r7, #31]
	}
	Run_LineTracing(_speed, period, 0);
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	ee07 3a90 	vmov	s15, r3
 8003300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003304:	2000      	movs	r0, #0
 8003306:	edd7 0a02 	vldr	s1, [r7, #8]
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	f000 fe2d 	bl	8003f6c <Run_LineTracing>
	return 1;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3724      	adds	r7, #36	; 0x24
 8003318:	46bd      	mov	sp, r7
 800331a:	ecbd 8b02 	vpop	{d8}
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	20000a82 	.word	0x20000a82
 8003324:	20000a85 	.word	0x20000a85
 8003328:	20000a84 	.word	0x20000a84
 800332c:	20000d34 	.word	0x20000d34

08003330 <Plan_Stop>:


uint8_t Plan_Stop() {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 8003334:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8003370 <Plan_Stop+0x40>
 8003338:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003370 <Plan_Stop+0x40>
 800333c:	f000 fe46 	bl	8003fcc <Run_SetMotorSpeed>
	SEN_BlackLine();
 8003340:	f001 f8de 	bl	8004500 <SEN_BlackLine>
	num_checkpoint = 0;
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <Plan_Stop+0x44>)
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <Plan_Stop+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <Plan_Stop+0x48>)
 8003352:	4413      	add	r3, r2
 8003354:	789a      	ldrb	r2, [r3, #2]
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <Plan_Stop+0x4c>)
 8003358:	701a      	strb	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <Plan_Stop+0x50>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <Plan_Stop+0x50>)
 8003366:	701a      	strb	r2, [r3, #0]
	return 1;
 8003368:	2301      	movs	r3, #1
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	00000000 	.word	0x00000000
 8003374:	20000cac 	.word	0x20000cac
 8003378:	20000d34 	.word	0x20000d34
 800337c:	20000cad 	.word	0x20000cad
 8003380:	20000a6c 	.word	0x20000a6c

08003384 <Plan_Start>:

void Plan_Start() {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <Plan_Start+0x5c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <Plan_Start+0x60>)
 8003390:	4413      	add	r3, r2
 8003392:	789a      	ldrb	r2, [r3, #2]
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <Plan_Start+0x64>)
 8003396:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <Plan_Start+0x64>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f001 fcef 	bl	8004d80 <GetActionSequenceInit>
	action_status = 0;
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <Plan_Start+0x68>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <Plan_Start+0x6c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <Plan_Start+0x70>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
	kp = plan.kpid[0];
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <Plan_Start+0x60>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <Plan_Start+0x74>)
 80033ba:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <Plan_Start+0x60>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <Plan_Start+0x78>)
 80033c2:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <Plan_Start+0x60>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <Plan_Start+0x7c>)
 80033ca:	6013      	str	r3, [r2, #0]
	main_flag |= MAIN_FLAG_RUN;
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <Plan_Start+0x80>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <Plan_Start+0x80>)
 80033d8:	701a      	strb	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000cac 	.word	0x20000cac
 80033e4:	20000d34 	.word	0x20000d34
 80033e8:	20000cad 	.word	0x20000cad
 80033ec:	20000a83 	.word	0x20000a83
 80033f0:	20000a78 	.word	0x20000a78
 80033f4:	20000a7c 	.word	0x20000a7c
 80033f8:	20000b08 	.word	0x20000b08
 80033fc:	20000b0c 	.word	0x20000b0c
 8003400:	20000b10 	.word	0x20000b10
 8003404:	20000a6c 	.word	0x20000a6c

08003408 <Plan_UIRoutine>:

void Plan_UIRoutine() {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <Plan_UIRoutine+0x48>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <Plan_UIRoutine+0x48>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00e      	beq.n	8003444 <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <Plan_UIRoutine+0x4c>)
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	463b      	mov	r3, r7
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f001 f8f6 	bl	8004620 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <Plan_UIRoutine+0x48>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <Plan_UIRoutine+0x48>)
 8003440:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 8003442:	e001      	b.n	8003448 <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 8003444:	f001 fc2e 	bl	8004ca4 <GetActionSequenceRoutine>
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000a6c 	.word	0x20000a6c
 8003454:	20000cad 	.word	0x20000cad

08003458 <Plan_Main>:

void Plan_Main(float period) {
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 8003462:	4bab      	ldr	r3, [pc, #684]	; (8003710 <Plan_Main+0x2b8>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 814d 	beq.w	800370a <Plan_Main+0x2b2>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003470:	4ba7      	ldr	r3, [pc, #668]	; (8003710 <Plan_Main+0x2b8>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <Plan_Main+0x40>
			Run_LineTracing(plan.speed, period, 0);
 800347c:	4ba5      	ldr	r3, [pc, #660]	; (8003714 <Plan_Main+0x2bc>)
 800347e:	7d9b      	ldrb	r3, [r3, #22]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003488:	2000      	movs	r0, #0
 800348a:	edd7 0a01 	vldr	s1, [r7, #4]
 800348e:	eeb0 0a67 	vmov.f32	s0, s15
 8003492:	f000 fd6b 	bl	8003f6c <Run_LineTracing>
 8003496:	e133      	b.n	8003700 <Plan_Main+0x2a8>
		}
		else {
			uint8_t retval;
			uint8_t speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
 8003498:	4b9f      	ldr	r3, [pc, #636]	; (8003718 <Plan_Main+0x2c0>)
 800349a:	7a9b      	ldrb	r3, [r3, #10]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <Plan_Main+0x4e>
 80034a0:	4b9c      	ldr	r3, [pc, #624]	; (8003714 <Plan_Main+0x2bc>)
 80034a2:	7d9b      	ldrb	r3, [r3, #22]
 80034a4:	e001      	b.n	80034aa <Plan_Main+0x52>
 80034a6:	4b9c      	ldr	r3, [pc, #624]	; (8003718 <Plan_Main+0x2c0>)
 80034a8:	7a9b      	ldrb	r3, [r3, #10]
 80034aa:	73bb      	strb	r3, [r7, #14]
			if(action_status == 0 && (plan_active.act != PLAN_STOP || plan_active.act != PLAN_NULL)) {
 80034ac:	4b9b      	ldr	r3, [pc, #620]	; (800371c <Plan_Main+0x2c4>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d118      	bne.n	80034e6 <Plan_Main+0x8e>
 80034b4:	4b98      	ldr	r3, [pc, #608]	; (8003718 <Plan_Main+0x2c0>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <Plan_Main+0x6c>
 80034bc:	4b96      	ldr	r3, [pc, #600]	; (8003718 <Plan_Main+0x2c0>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b09      	cmp	r3, #9
 80034c2:	d010      	beq.n	80034e6 <Plan_Main+0x8e>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 80034c4:	7bba      	ldrb	r2, [r7, #14]
 80034c6:	4b94      	ldr	r3, [pc, #592]	; (8003718 <Plan_Main+0x2c0>)
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	4608      	mov	r0, r1
 80034cc:	685c      	ldr	r4, [r3, #4]
 80034ce:	4621      	mov	r1, r4
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	461c      	mov	r4, r3
 80034d4:	4613      	mov	r3, r2
 80034d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80034da:	4622      	mov	r2, r4
 80034dc:	f7ff fe5e 	bl	800319c <Plan_ActionInit>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e0bb      	b.n	800365e <Plan_Main+0x206>
			}
			else {
				switch(plan_active.act) {
 80034e6:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <Plan_Main+0x2c0>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b0a      	cmp	r3, #10
 80034ec:	f200 80b5 	bhi.w	800365a <Plan_Main+0x202>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <Plan_Main+0xa0>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	08003525 	.word	0x08003525
 80034fc:	0800352f 	.word	0x0800352f
 8003500:	0800354d 	.word	0x0800354d
 8003504:	0800356b 	.word	0x0800356b
 8003508:	08003589 	.word	0x08003589
 800350c:	080035a7 	.word	0x080035a7
 8003510:	080035c5 	.word	0x080035c5
 8003514:	080035e3 	.word	0x080035e3
 8003518:	08003601 	.word	0x08003601
 800351c:	0800361f 	.word	0x0800361f
 8003520:	0800363d 	.word	0x0800363d
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 8003524:	f7ff ff04 	bl	8003330 <Plan_Stop>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e097      	b.n	800365e <Plan_Main+0x206>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 800352e:	4b7a      	ldr	r3, [pc, #488]	; (8003718 <Plan_Main+0x2c0>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	6858      	ldr	r0, [r3, #4]
 8003536:	4602      	mov	r2, r0
 8003538:	6898      	ldr	r0, [r3, #8]
 800353a:	4603      	mov	r3, r0
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	f7ff fa59 	bl	80029f8 <Plan_Left>
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	e088      	b.n	800365e <Plan_Main+0x206>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 800354c:	4b72      	ldr	r3, [pc, #456]	; (8003718 <Plan_Main+0x2c0>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4611      	mov	r1, r2
 8003552:	6858      	ldr	r0, [r3, #4]
 8003554:	4602      	mov	r2, r0
 8003556:	6898      	ldr	r0, [r3, #8]
 8003558:	4603      	mov	r3, r0
 800355a:	4608      	mov	r0, r1
 800355c:	4611      	mov	r1, r2
 800355e:	461a      	mov	r2, r3
 8003560:	f7ff fae6 	bl	8002b30 <Plan_Right>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	e079      	b.n	800365e <Plan_Main+0x206>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 800356a:	7bba      	ldrb	r2, [r7, #14]
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <Plan_Main+0x2c0>)
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	4608      	mov	r0, r1
 8003572:	685c      	ldr	r4, [r3, #4]
 8003574:	4621      	mov	r1, r4
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	461c      	mov	r4, r3
 800357a:	4613      	mov	r3, r2
 800357c:	4622      	mov	r2, r4
 800357e:	f7ff fb73 	bl	8002c68 <Plan_Forward>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e06a      	b.n	800365e <Plan_Main+0x206>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 8003588:	4b63      	ldr	r3, [pc, #396]	; (8003718 <Plan_Main+0x2c0>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4611      	mov	r1, r2
 800358e:	6858      	ldr	r0, [r3, #4]
 8003590:	4602      	mov	r2, r0
 8003592:	6898      	ldr	r0, [r3, #8]
 8003594:	4603      	mov	r3, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	461a      	mov	r2, r3
 800359c:	f7ff fc4e 	bl	8002e3c <Plan_Follow>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e05b      	b.n	800365e <Plan_Main+0x206>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <Plan_Main+0x2c0>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4611      	mov	r1, r2
 80035ac:	6858      	ldr	r0, [r3, #4]
 80035ae:	4602      	mov	r2, r0
 80035b0:	6898      	ldr	r0, [r3, #8]
 80035b2:	4603      	mov	r3, r0
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	f7ff fc85 	bl	8002ec8 <Plan_FollowLeft>
 80035be:	4603      	mov	r3, r0
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e04c      	b.n	800365e <Plan_Main+0x206>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 80035c4:	4b54      	ldr	r3, [pc, #336]	; (8003718 <Plan_Main+0x2c0>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4611      	mov	r1, r2
 80035ca:	6858      	ldr	r0, [r3, #4]
 80035cc:	4602      	mov	r2, r0
 80035ce:	6898      	ldr	r0, [r3, #8]
 80035d0:	4603      	mov	r3, r0
 80035d2:	4608      	mov	r0, r1
 80035d4:	4611      	mov	r1, r2
 80035d6:	461a      	mov	r2, r3
 80035d8:	f7ff fd12 	bl	8003000 <Plan_FollowRight>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e03d      	b.n	800365e <Plan_Main+0x206>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <Plan_Main+0x2c0>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4611      	mov	r1, r2
 80035e8:	6858      	ldr	r0, [r3, #4]
 80035ea:	4602      	mov	r2, r0
 80035ec:	6898      	ldr	r0, [r3, #8]
 80035ee:	4603      	mov	r3, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	f7ff fd9f 	bl	8003138 <Plan_Invert>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e02e      	b.n	800365e <Plan_Main+0x206>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 8003600:	4b45      	ldr	r3, [pc, #276]	; (8003718 <Plan_Main+0x2c0>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4611      	mov	r1, r2
 8003606:	6858      	ldr	r0, [r3, #4]
 8003608:	4602      	mov	r2, r0
 800360a:	6898      	ldr	r0, [r3, #8]
 800360c:	4603      	mov	r3, r0
 800360e:	4608      	mov	r0, r1
 8003610:	4611      	mov	r1, r2
 8003612:	461a      	mov	r2, r3
 8003614:	f7ff fda7 	bl	8003166 <Plan_NextPlan>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e01f      	b.n	800365e <Plan_Main+0x206>
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 800361e:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <Plan_Main+0x2c0>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4611      	mov	r1, r2
 8003624:	6858      	ldr	r0, [r3, #4]
 8003626:	4602      	mov	r2, r0
 8003628:	6898      	ldr	r0, [r3, #8]
 800362a:	4603      	mov	r3, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	f7ff fda5 	bl	8003180 <Plan_Null>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e010      	b.n	800365e <Plan_Main+0x206>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 800363c:	7bba      	ldrb	r2, [r7, #14]
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <Plan_Main+0x2c0>)
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	4608      	mov	r0, r1
 8003644:	685c      	ldr	r4, [r3, #4]
 8003646:	4621      	mov	r1, r4
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	461c      	mov	r4, r3
 800364c:	4613      	mov	r3, r2
 800364e:	4622      	mov	r2, r4
 8003650:	f7ff fb7e 	bl	8002d50 <Plan_Backward>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e001      	b.n	800365e <Plan_Main+0x206>
				default: retval = 2;
 800365a:	2302      	movs	r3, #2
 800365c:	73fb      	strb	r3, [r7, #15]
				}
			}
			if(retval == 0) {
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10c      	bne.n	800367e <Plan_Main+0x226>
				Run_LineTracing(speed_now, period, 0);
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	2000      	movs	r0, #0
 8003670:	edd7 0a01 	vldr	s1, [r7, #4]
 8003674:	eeb0 0a67 	vmov.f32	s0, s15
 8003678:	f000 fc78 	bl	8003f6c <Run_LineTracing>
 800367c:	e040      	b.n	8003700 <Plan_Main+0x2a8>
			}
			else if(retval == 2){
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d134      	bne.n	80036ee <Plan_Main+0x296>
				counter_status = 0;
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <Plan_Main+0x2c8>)
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <Plan_Main+0x2c4>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
				speed_now = plan.speed;
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <Plan_Main+0x2bc>)
 8003692:	7d9b      	ldrb	r3, [r3, #22]
 8003694:	73bb      	strb	r3, [r7, #14]
				num_index++;
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <Plan_Main+0x2cc>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b21      	ldr	r3, [pc, #132]	; (8003724 <Plan_Main+0x2cc>)
 80036a0:	701a      	strb	r2, [r3, #0]
				if(num_index == plan.num_action) {
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <Plan_Main+0x2bc>)
 80036a4:	785a      	ldrb	r2, [r3, #1]
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <Plan_Main+0x2cc>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d102      	bne.n	80036b4 <Plan_Main+0x25c>
					Plan_Stop();
 80036ae:	f7ff fe3f 	bl	8003330 <Plan_Stop>
					return;
 80036b2:	e02a      	b.n	800370a <Plan_Main+0x2b2>
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <Plan_Main+0x2d0>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <Plan_Main+0x2bc>)
 80036bc:	4413      	add	r3, r2
 80036be:	789a      	ldrb	r2, [r3, #2]
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <Plan_Main+0x2cc>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d805      	bhi.n	80036d4 <Plan_Main+0x27c>
					num_checkpoint++;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <Plan_Main+0x2d0>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <Plan_Main+0x2d0>)
 80036d2:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 80036d4:	f001 fa96 	bl	8004c04 <GetActionSequence>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d110      	bne.n	8003700 <Plan_Main+0x2a8>
					main_flag |= MAIN_FLAG_NEXT;
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <Plan_Main+0x2b8>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <Plan_Main+0x2b8>)
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e008      	b.n	8003700 <Plan_Main+0x2a8>
			}
			else if(retval == 3){
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d105      	bne.n	8003700 <Plan_Main+0x2a8>
				counter_status = 0;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <Plan_Main+0x2c8>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
				action_status = 1;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <Plan_Main+0x2c4>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
			}
		}
		plan_counter++;
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <Plan_Main+0x2d4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <Plan_Main+0x2d4>)
 8003708:	6013      	str	r3, [r2, #0]
	}
}
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}
 8003710:	20000a6c 	.word	0x20000a6c
 8003714:	20000d34 	.word	0x20000d34
 8003718:	20000d24 	.word	0x20000d24
 800371c:	20000a83 	.word	0x20000a83
 8003720:	20000a82 	.word	0x20000a82
 8003724:	20000cad 	.word	0x20000cad
 8003728:	20000cac 	.word	0x20000cac
 800372c:	20000a78 	.word	0x20000a78

08003730 <Run_Init>:
#include "bindef.h"


Motor_typedef motor[2];

void Run_Init() {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	2100      	movs	r1, #0
 8003738:	4828      	ldr	r0, [pc, #160]	; (80037dc <Run_Init+0xac>)
 800373a:	f00a f857 	bl	800d7ec <memset>

	motor[0].mode = MOTOR_MODE_OPEN;
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <Run_Init+0xac>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <Run_Init+0xac>)
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <Run_Init+0xb0>)
 8003748:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <Run_Init+0xac>)
 800374c:	2200      	movs	r2, #0
 800374e:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <Run_Init+0xac>)
 8003752:	2204      	movs	r2, #4
 8003754:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 8003756:	4b21      	ldr	r3, [pc, #132]	; (80037dc <Run_Init+0xac>)
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <Run_Init+0xb4>)
 800375a:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <Run_Init+0xac>)
 800375e:	2201      	movs	r2, #1
 8003760:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.0095;
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <Run_Init+0xac>)
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <Run_Init+0xb8>)
 8003766:	61da      	str	r2, [r3, #28]
	motor[0].vel_factor = 0.625;
 8003768:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <Run_Init+0xac>)
 800376a:	4a20      	ldr	r2, [pc, #128]	; (80037ec <Run_Init+0xbc>)
 800376c:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].kp = 2;
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <Run_Init+0xac>)
 8003770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
	motor[0].ki = 15;
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <Run_Init+0xac>)
 8003778:	4a1d      	ldr	r2, [pc, #116]	; (80037f0 <Run_Init+0xc0>)
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].filter_alpha = 0.5;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <Run_Init+0xac>)
 800377e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c

	motor[1].mode = motor[0].mode;
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <Run_Init+0xac>)
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <Run_Init+0xac>)
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	motor[1].pwm_htim = &htim3;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <Run_Init+0xac>)
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <Run_Init+0xb0>)
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
	motor[1].ch1 = TIM_CHANNEL_4;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <Run_Init+0xac>)
 8003796:	220c      	movs	r2, #12
 8003798:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	motor[1].ch2 = TIM_CHANNEL_3;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <Run_Init+0xac>)
 800379e:	2208      	movs	r2, #8
 80037a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	motor[1].enc_htim = &htim4;
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <Run_Init+0xac>)
 80037a6:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <Run_Init+0xc4>)
 80037a8:	651a      	str	r2, [r3, #80]	; 0x50
	motor[1].dir = -1;
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <Run_Init+0xac>)
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	motor[1].pwm_factor = 0.01;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <Run_Init+0xac>)
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <Run_Init+0xc8>)
 80037b6:	65da      	str	r2, [r3, #92]	; 0x5c
	motor[1].vel_factor = 0.625;
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <Run_Init+0xac>)
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <Run_Init+0xbc>)
 80037bc:	665a      	str	r2, [r3, #100]	; 0x64
	motor[1].kp = motor[0].kp;
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <Run_Init+0xac>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	4a06      	ldr	r2, [pc, #24]	; (80037dc <Run_Init+0xac>)
 80037c4:	6693      	str	r3, [r2, #104]	; 0x68
	motor[1].ki = motor[0].ki;
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <Run_Init+0xac>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <Run_Init+0xac>)
 80037cc:	66d3      	str	r3, [r2, #108]	; 0x6c
	motor[1].filter_alpha = motor[0].filter_alpha;
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <Run_Init+0xac>)
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	4a02      	ldr	r2, [pc, #8]	; (80037dc <Run_Init+0xac>)
 80037d4:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000a88 	.word	0x20000a88
 80037e0:	20000df0 	.word	0x20000df0
 80037e4:	20000da8 	.word	0x20000da8
 80037e8:	3c1ba5e3 	.word	0x3c1ba5e3
 80037ec:	3f200000 	.word	0x3f200000
 80037f0:	41700000 	.word	0x41700000
 80037f4:	20000e38 	.word	0x20000e38
 80037f8:	3c23d70a 	.word	0x3c23d70a

080037fc <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 8003806:	ed97 0a01 	vldr	s0, [r7, #4]
 800380a:	4806      	ldr	r0, [pc, #24]	; (8003824 <Run_MotorRoutine+0x28>)
 800380c:	f7fe feca 	bl	80025a4 <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 8003810:	ed97 0a01 	vldr	s0, [r7, #4]
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <Run_MotorRoutine+0x2c>)
 8003816:	f7fe fec5 	bl	80025a4 <Motor_EnocderRoutine>
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000a88 	.word	0x20000a88
 8003828:	20000ac8 	.word	0x20000ac8

0800382c <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 8003836:	ed97 0a01 	vldr	s0, [r7, #4]
 800383a:	4806      	ldr	r0, [pc, #24]	; (8003854 <Run_MotorRoutine2+0x28>)
 800383c:	f7fe fed8 	bl	80025f0 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 8003840:	ed97 0a01 	vldr	s0, [r7, #4]
 8003844:	4804      	ldr	r0, [pc, #16]	; (8003858 <Run_MotorRoutine2+0x2c>)
 8003846:	f7fe fed3 	bl	80025f0 <Motor_ControlRoutine>
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000a88 	.word	0x20000a88
 8003858:	20000ac8 	.word	0x20000ac8

0800385c <Run_YawSpeed>:
float kp;
float ki;
float kd;
uint16_t sum_error;

float Run_YawSpeed(float period, uint8_t flag) {
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	ed87 0a01 	vstr	s0, [r7, #4]
 8003866:	4603      	mov	r3, r0
 8003868:	70fb      	strb	r3, [r7, #3]
	static int16_t last_error = 0;
	int16_t error = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	83fb      	strh	r3, [r7, #30]

	uint16_t pr_sensor_bin = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	83bb      	strh	r3, [r7, #28]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 8003872:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003876:	837b      	strh	r3, [r7, #26]
	if((flag&0x01)==0x01) {
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <Run_YawSpeed+0x3c>
		pr_sensor_bin = (~sensor_binary) & mask;
 8003882:	4bcb      	ldr	r3, [pc, #812]	; (8003bb0 <Run_YawSpeed+0x354>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b21b      	sxth	r3, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	b21a      	sxth	r2, r3
 800388c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003890:	4013      	ands	r3, r2
 8003892:	b21b      	sxth	r3, r3
 8003894:	83bb      	strh	r3, [r7, #28]
 8003896:	e004      	b.n	80038a2 <Run_YawSpeed+0x46>
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 8003898:	4bc5      	ldr	r3, [pc, #788]	; (8003bb0 <Run_YawSpeed+0x354>)
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	8b7b      	ldrh	r3, [r7, #26]
 800389e:	4013      	ands	r3, r2
 80038a0:	83bb      	strh	r3, [r7, #28]
	}

	switch(sensor_binary) {
 80038a2:	4bc3      	ldr	r3, [pc, #780]	; (8003bb0 <Run_YawSpeed+0x354>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	f643 6201 	movw	r2, #15873	; 0x3e01
 80038aa:	4293      	cmp	r3, r2
 80038ac:	f000 82c7 	beq.w	8003e3e <Run_YawSpeed+0x5e2>
 80038b0:	f643 6201 	movw	r2, #15873	; 0x3e01
 80038b4:	4293      	cmp	r3, r2
 80038b6:	f300 82f4 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80038ba:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 80038be:	f000 8291 	beq.w	8003de4 <Run_YawSpeed+0x588>
 80038c2:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 80038c6:	f300 82ec 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80038ca:	f643 4203 	movw	r2, #15363	; 0x3c03
 80038ce:	4293      	cmp	r3, r2
 80038d0:	f000 82bd 	beq.w	8003e4e <Run_YawSpeed+0x5f2>
 80038d4:	f643 4203 	movw	r2, #15363	; 0x3c03
 80038d8:	4293      	cmp	r3, r2
 80038da:	f300 82e2 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80038de:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80038e2:	f000 8282 	beq.w	8003dea <Run_YawSpeed+0x58e>
 80038e6:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80038ea:	f300 82da 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80038ee:	f643 0207 	movw	r2, #14343	; 0x3807
 80038f2:	4293      	cmp	r3, r2
 80038f4:	f000 82b5 	beq.w	8003e62 <Run_YawSpeed+0x606>
 80038f8:	f643 0207 	movw	r2, #14343	; 0x3807
 80038fc:	4293      	cmp	r3, r2
 80038fe:	f300 82d0 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003902:	f643 0201 	movw	r2, #14337	; 0x3801
 8003906:	4293      	cmp	r3, r2
 8003908:	f000 829d 	beq.w	8003e46 <Run_YawSpeed+0x5ea>
 800390c:	f643 0201 	movw	r2, #14337	; 0x3801
 8003910:	4293      	cmp	r3, r2
 8003912:	f300 82c6 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003916:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 800391a:	f000 8269 	beq.w	8003df0 <Run_YawSpeed+0x594>
 800391e:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003922:	f300 82be 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003926:	f243 02f0 	movw	r2, #12528	; 0x30f0
 800392a:	4293      	cmp	r3, r2
 800392c:	f000 82a8 	beq.w	8003e80 <Run_YawSpeed+0x624>
 8003930:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003934:	4293      	cmp	r3, r2
 8003936:	f300 82b4 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 800393a:	f243 020f 	movw	r2, #12303	; 0x300f
 800393e:	4293      	cmp	r3, r2
 8003940:	f000 8296 	beq.w	8003e70 <Run_YawSpeed+0x614>
 8003944:	f243 020f 	movw	r2, #12303	; 0x300f
 8003948:	4293      	cmp	r3, r2
 800394a:	f300 82aa 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 800394e:	f243 0203 	movw	r2, #12291	; 0x3003
 8003952:	4293      	cmp	r3, r2
 8003954:	f000 8282 	beq.w	8003e5c <Run_YawSpeed+0x600>
 8003958:	f243 0203 	movw	r2, #12291	; 0x3003
 800395c:	4293      	cmp	r3, r2
 800395e:	f300 82a0 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003962:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003966:	f000 8246 	beq.w	8003df6 <Run_YawSpeed+0x59a>
 800396a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800396e:	f300 8298 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003972:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003976:	4293      	cmp	r3, r2
 8003978:	f000 8290 	beq.w	8003e9c <Run_YawSpeed+0x640>
 800397c:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003980:	4293      	cmp	r3, r2
 8003982:	f300 828e 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003986:	f242 12f0 	movw	r2, #8688	; 0x21f0
 800398a:	4293      	cmp	r3, r2
 800398c:	f000 827c 	beq.w	8003e88 <Run_YawSpeed+0x62c>
 8003990:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003994:	4293      	cmp	r3, r2
 8003996:	f300 8284 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 800399a:	f242 12e1 	movw	r2, #8673	; 0x21e1
 800399e:	4293      	cmp	r3, r2
 80039a0:	f000 8276 	beq.w	8003e90 <Run_YawSpeed+0x634>
 80039a4:	f242 12e1 	movw	r2, #8673	; 0x21e1
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f300 827a 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80039ae:	f242 021f 	movw	r2, #8223	; 0x201f
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f300 8275 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80039b8:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 80039bc:	4293      	cmp	r3, r2
 80039be:	f280 809d 	bge.w	8003afc <Run_YawSpeed+0x2a0>
 80039c2:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 80039c6:	f000 8207 	beq.w	8003dd8 <Run_YawSpeed+0x57c>
 80039ca:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 80039ce:	f300 8268 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80039d2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80039d6:	f000 8202 	beq.w	8003dde <Run_YawSpeed+0x582>
 80039da:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80039de:	f300 8260 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80039e2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80039e6:	4293      	cmp	r3, r2
 80039e8:	f000 821d 	beq.w	8003e26 <Run_YawSpeed+0x5ca>
 80039ec:	f640 72fc 	movw	r2, #4092	; 0xffc
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f300 8256 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 80039f6:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 80039fa:	f000 821a 	beq.w	8003e32 <Run_YawSpeed+0x5d6>
 80039fe:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003a02:	f300 824e 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a06:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003a0a:	f000 81df 	beq.w	8003dcc <Run_YawSpeed+0x570>
 8003a0e:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003a12:	f300 8246 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a1a:	f000 81da 	beq.w	8003dd2 <Run_YawSpeed+0x576>
 8003a1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a22:	f300 823e 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a26:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	f000 81f1 	beq.w	8003e12 <Run_YawSpeed+0x5b6>
 8003a30:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003a34:	4293      	cmp	r3, r2
 8003a36:	f300 8234 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a3a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003a3e:	f000 81ef 	beq.w	8003e20 <Run_YawSpeed+0x5c4>
 8003a42:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003a46:	f300 822c 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a4a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003a4e:	f000 81ed 	beq.w	8003e2c <Run_YawSpeed+0x5d0>
 8003a52:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003a56:	f300 8224 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a5a:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003a5e:	f000 81af 	beq.w	8003dc0 <Run_YawSpeed+0x564>
 8003a62:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003a66:	f300 821c 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a6a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003a6e:	f000 81aa 	beq.w	8003dc6 <Run_YawSpeed+0x56a>
 8003a72:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003a76:	f300 8214 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a7a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003a7e:	f300 8210 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a82:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8003a86:	f280 8095 	bge.w	8003bb4 <Run_YawSpeed+0x358>
 8003a8a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003a8e:	f000 8194 	beq.w	8003dba <Run_YawSpeed+0x55e>
 8003a92:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003a96:	f300 8204 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003a9a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003a9e:	f000 81b0 	beq.w	8003e02 <Run_YawSpeed+0x5a6>
 8003aa2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003aa6:	f300 81fc 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003aaa:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003aae:	f000 817a 	beq.w	8003da6 <Run_YawSpeed+0x54a>
 8003ab2:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003ab6:	f300 81f4 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003aba:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003abe:	f000 8176 	beq.w	8003dae <Run_YawSpeed+0x552>
 8003ac2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003ac6:	f300 81ec 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003aca:	2bf8      	cmp	r3, #248	; 0xf8
 8003acc:	f000 8163 	beq.w	8003d96 <Run_YawSpeed+0x53a>
 8003ad0:	2bf8      	cmp	r3, #248	; 0xf8
 8003ad2:	f300 81e6 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003ad6:	2bf0      	cmp	r3, #240	; 0xf0
 8003ad8:	f000 8161 	beq.w	8003d9e <Run_YawSpeed+0x542>
 8003adc:	2bf0      	cmp	r3, #240	; 0xf0
 8003ade:	f300 81e0 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003ae2:	2b7c      	cmp	r3, #124	; 0x7c
 8003ae4:	f000 814f 	beq.w	8003d86 <Run_YawSpeed+0x52a>
 8003ae8:	2b7c      	cmp	r3, #124	; 0x7c
 8003aea:	f300 81da 	bgt.w	8003ea2 <Run_YawSpeed+0x646>
 8003aee:	2b3e      	cmp	r3, #62	; 0x3e
 8003af0:	f300 8126 	bgt.w	8003d40 <Run_YawSpeed+0x4e4>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f300 809f 	bgt.w	8003c38 <Run_YawSpeed+0x3dc>
 8003afa:	e1d2      	b.n	8003ea2 <Run_YawSpeed+0x646>
 8003afc:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8003b00:	3b18      	subs	r3, #24
 8003b02:	2b27      	cmp	r3, #39	; 0x27
 8003b04:	f200 81cd 	bhi.w	8003ea2 <Run_YawSpeed+0x646>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <Run_YawSpeed+0x2b4>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003e39 	.word	0x08003e39
 8003b14:	08003ea3 	.word	0x08003ea3
 8003b18:	08003ea3 	.word	0x08003ea3
 8003b1c:	08003ea3 	.word	0x08003ea3
 8003b20:	08003ea3 	.word	0x08003ea3
 8003b24:	08003ea3 	.word	0x08003ea3
 8003b28:	08003ea3 	.word	0x08003ea3
 8003b2c:	08003ea3 	.word	0x08003ea3
 8003b30:	08003dfd 	.word	0x08003dfd
 8003b34:	08003e57 	.word	0x08003e57
 8003b38:	08003ea3 	.word	0x08003ea3
 8003b3c:	08003ea3 	.word	0x08003ea3
 8003b40:	08003ea3 	.word	0x08003ea3
 8003b44:	08003ea3 	.word	0x08003ea3
 8003b48:	08003ea3 	.word	0x08003ea3
 8003b4c:	08003e69 	.word	0x08003e69
 8003b50:	08003ea3 	.word	0x08003ea3
 8003b54:	08003ea3 	.word	0x08003ea3
 8003b58:	08003ea3 	.word	0x08003ea3
 8003b5c:	08003ea3 	.word	0x08003ea3
 8003b60:	08003ea3 	.word	0x08003ea3
 8003b64:	08003ea3 	.word	0x08003ea3
 8003b68:	08003ea3 	.word	0x08003ea3
 8003b6c:	08003ea3 	.word	0x08003ea3
 8003b70:	08003ea3 	.word	0x08003ea3
 8003b74:	08003ea3 	.word	0x08003ea3
 8003b78:	08003ea3 	.word	0x08003ea3
 8003b7c:	08003ea3 	.word	0x08003ea3
 8003b80:	08003ea3 	.word	0x08003ea3
 8003b84:	08003ea3 	.word	0x08003ea3
 8003b88:	08003ea3 	.word	0x08003ea3
 8003b8c:	08003ea3 	.word	0x08003ea3
 8003b90:	08003ea3 	.word	0x08003ea3
 8003b94:	08003ea3 	.word	0x08003ea3
 8003b98:	08003ea3 	.word	0x08003ea3
 8003b9c:	08003ea3 	.word	0x08003ea3
 8003ba0:	08003ea3 	.word	0x08003ea3
 8003ba4:	08003ea3 	.word	0x08003ea3
 8003ba8:	08003ea3 	.word	0x08003ea3
 8003bac:	08003e79 	.word	0x08003e79
 8003bb0:	20000b7e 	.word	0x20000b7e
 8003bb4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003bb8:	2b1c      	cmp	r3, #28
 8003bba:	f200 8172 	bhi.w	8003ea2 <Run_YawSpeed+0x646>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <Run_YawSpeed+0x368>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003db5 	.word	0x08003db5
 8003bc8:	08003e97 	.word	0x08003e97
 8003bcc:	08003ea3 	.word	0x08003ea3
 8003bd0:	08003ea3 	.word	0x08003ea3
 8003bd4:	08003ea3 	.word	0x08003ea3
 8003bd8:	08003ea3 	.word	0x08003ea3
 8003bdc:	08003ea3 	.word	0x08003ea3
 8003be0:	08003ea3 	.word	0x08003ea3
 8003be4:	08003ea3 	.word	0x08003ea3
 8003be8:	08003ea3 	.word	0x08003ea3
 8003bec:	08003ea3 	.word	0x08003ea3
 8003bf0:	08003ea3 	.word	0x08003ea3
 8003bf4:	08003ea3 	.word	0x08003ea3
 8003bf8:	08003ea3 	.word	0x08003ea3
 8003bfc:	08003ea3 	.word	0x08003ea3
 8003c00:	08003ea3 	.word	0x08003ea3
 8003c04:	08003e1b 	.word	0x08003e1b
 8003c08:	08003ea3 	.word	0x08003ea3
 8003c0c:	08003ea3 	.word	0x08003ea3
 8003c10:	08003ea3 	.word	0x08003ea3
 8003c14:	08003ea3 	.word	0x08003ea3
 8003c18:	08003ea3 	.word	0x08003ea3
 8003c1c:	08003ea3 	.word	0x08003ea3
 8003c20:	08003ea3 	.word	0x08003ea3
 8003c24:	08003ea3 	.word	0x08003ea3
 8003c28:	08003ea3 	.word	0x08003ea3
 8003c2c:	08003ea3 	.word	0x08003ea3
 8003c30:	08003ea3 	.word	0x08003ea3
 8003c34:	08003e0b 	.word	0x08003e0b
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	2b3d      	cmp	r3, #61	; 0x3d
 8003c3c:	f200 8131 	bhi.w	8003ea2 <Run_YawSpeed+0x646>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <Run_YawSpeed+0x3ec>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003d47 	.word	0x08003d47
 8003c4c:	08003ea3 	.word	0x08003ea3
 8003c50:	08003d4f 	.word	0x08003d4f
 8003c54:	08003ea3 	.word	0x08003ea3
 8003c58:	08003ea3 	.word	0x08003ea3
 8003c5c:	08003ea3 	.word	0x08003ea3
 8003c60:	08003d57 	.word	0x08003d57
 8003c64:	08003ea3 	.word	0x08003ea3
 8003c68:	08003ea3 	.word	0x08003ea3
 8003c6c:	08003ea3 	.word	0x08003ea3
 8003c70:	08003ea3 	.word	0x08003ea3
 8003c74:	08003ea3 	.word	0x08003ea3
 8003c78:	08003ea3 	.word	0x08003ea3
 8003c7c:	08003ea3 	.word	0x08003ea3
 8003c80:	08003d5f 	.word	0x08003d5f
 8003c84:	08003ea3 	.word	0x08003ea3
 8003c88:	08003ea3 	.word	0x08003ea3
 8003c8c:	08003ea3 	.word	0x08003ea3
 8003c90:	08003ea3 	.word	0x08003ea3
 8003c94:	08003ea3 	.word	0x08003ea3
 8003c98:	08003ea3 	.word	0x08003ea3
 8003c9c:	08003ea3 	.word	0x08003ea3
 8003ca0:	08003ea3 	.word	0x08003ea3
 8003ca4:	08003ea3 	.word	0x08003ea3
 8003ca8:	08003ea3 	.word	0x08003ea3
 8003cac:	08003ea3 	.word	0x08003ea3
 8003cb0:	08003ea3 	.word	0x08003ea3
 8003cb4:	08003ea3 	.word	0x08003ea3
 8003cb8:	08003ea3 	.word	0x08003ea3
 8003cbc:	08003d6f 	.word	0x08003d6f
 8003cc0:	08003d67 	.word	0x08003d67
 8003cc4:	08003ea3 	.word	0x08003ea3
 8003cc8:	08003ea3 	.word	0x08003ea3
 8003ccc:	08003ea3 	.word	0x08003ea3
 8003cd0:	08003ea3 	.word	0x08003ea3
 8003cd4:	08003ea3 	.word	0x08003ea3
 8003cd8:	08003ea3 	.word	0x08003ea3
 8003cdc:	08003ea3 	.word	0x08003ea3
 8003ce0:	08003ea3 	.word	0x08003ea3
 8003ce4:	08003ea3 	.word	0x08003ea3
 8003ce8:	08003ea3 	.word	0x08003ea3
 8003cec:	08003ea3 	.word	0x08003ea3
 8003cf0:	08003ea3 	.word	0x08003ea3
 8003cf4:	08003ea3 	.word	0x08003ea3
 8003cf8:	08003ea3 	.word	0x08003ea3
 8003cfc:	08003ea3 	.word	0x08003ea3
 8003d00:	08003ea3 	.word	0x08003ea3
 8003d04:	08003ea3 	.word	0x08003ea3
 8003d08:	08003ea3 	.word	0x08003ea3
 8003d0c:	08003ea3 	.word	0x08003ea3
 8003d10:	08003ea3 	.word	0x08003ea3
 8003d14:	08003ea3 	.word	0x08003ea3
 8003d18:	08003ea3 	.word	0x08003ea3
 8003d1c:	08003ea3 	.word	0x08003ea3
 8003d20:	08003ea3 	.word	0x08003ea3
 8003d24:	08003ea3 	.word	0x08003ea3
 8003d28:	08003ea3 	.word	0x08003ea3
 8003d2c:	08003ea3 	.word	0x08003ea3
 8003d30:	08003ea3 	.word	0x08003ea3
 8003d34:	08003d7f 	.word	0x08003d7f
 8003d38:	08003ea3 	.word	0x08003ea3
 8003d3c:	08003d77 	.word	0x08003d77
 8003d40:	2b78      	cmp	r3, #120	; 0x78
 8003d42:	d024      	beq.n	8003d8e <Run_YawSpeed+0x532>
 8003d44:	e0ad      	b.n	8003ea2 <Run_YawSpeed+0x646>
	case B00000000000001: error = -15; break;
 8003d46:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8003d4a:	83fb      	strh	r3, [r7, #30]
 8003d4c:	e0ac      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000000011: error = -13; break;
 8003d4e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003d52:	83fb      	strh	r3, [r7, #30]
 8003d54:	e0a8      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000000111: error = -11; break;
 8003d56:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003d5a:	83fb      	strh	r3, [r7, #30]
 8003d5c:	e0a4      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000001111: error = -10; break;
 8003d5e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8003d62:	83fb      	strh	r3, [r7, #30]
 8003d64:	e0a0      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000011111: error = -9; break;
 8003d66:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003d6a:	83fb      	strh	r3, [r7, #30]
 8003d6c:	e09c      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000011110: error = -8; break;
 8003d6e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003d72:	83fb      	strh	r3, [r7, #30]
 8003d74:	e098      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000111110: error = -7; break;
 8003d76:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8003d7a:	83fb      	strh	r3, [r7, #30]
 8003d7c:	e094      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000000111100: error = -6; break;
 8003d7e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8003d82:	83fb      	strh	r3, [r7, #30]
 8003d84:	e090      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000001111100: error = -5; break;
 8003d86:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003d8a:	83fb      	strh	r3, [r7, #30]
 8003d8c:	e08c      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000001111000: error = -4; break;
 8003d8e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003d92:	83fb      	strh	r3, [r7, #30]
 8003d94:	e088      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000011111000: error = -3; break;
 8003d96:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003d9a:	83fb      	strh	r3, [r7, #30]
 8003d9c:	e084      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000011110000: error = -2; break;
 8003d9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003da2:	83fb      	strh	r3, [r7, #30]
 8003da4:	e080      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00000111110000: error = -1; break;
 8003da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003daa:	83fb      	strh	r3, [r7, #30]
 8003dac:	e07c      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B00000111100000: error = 0; break;
 8003dae:	2300      	movs	r3, #0
 8003db0:	83fb      	strh	r3, [r7, #30]
 8003db2:	e079      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B00001111100000: error = 1; break;
 8003db4:	2301      	movs	r3, #1
 8003db6:	83fb      	strh	r3, [r7, #30]
 8003db8:	e076      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00001111000000: error = 2; break;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	83fb      	strh	r3, [r7, #30]
 8003dbe:	e073      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00011111000000: error = 3; break;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	83fb      	strh	r3, [r7, #30]
 8003dc4:	e070      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00011110000000: error = 4; break;
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	83fb      	strh	r3, [r7, #30]
 8003dca:	e06d      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00111110000000: error = 5; break;
 8003dcc:	2305      	movs	r3, #5
 8003dce:	83fb      	strh	r3, [r7, #30]
 8003dd0:	e06a      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00111100000000: error = 6; break;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	83fb      	strh	r3, [r7, #30]
 8003dd6:	e067      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B01111100000000: error = 7; break;
 8003dd8:	2307      	movs	r3, #7
 8003dda:	83fb      	strh	r3, [r7, #30]
 8003ddc:	e064      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B01111000000000: error = 8; break;
 8003dde:	2308      	movs	r3, #8
 8003de0:	83fb      	strh	r3, [r7, #30]
 8003de2:	e061      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11111000000000: error = 9; break;
 8003de4:	2309      	movs	r3, #9
 8003de6:	83fb      	strh	r3, [r7, #30]
 8003de8:	e05e      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11110000000000: error = 10; break;
 8003dea:	230a      	movs	r3, #10
 8003dec:	83fb      	strh	r3, [r7, #30]
 8003dee:	e05b      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11100000000000: error = 11; break;
 8003df0:	230b      	movs	r3, #11
 8003df2:	83fb      	strh	r3, [r7, #30]
 8003df4:	e058      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11000000000000: error = 13; break;
 8003df6:	230d      	movs	r3, #13
 8003df8:	83fb      	strh	r3, [r7, #30]
 8003dfa:	e055      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B10000000000000: error = 15; break;
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	83fb      	strh	r3, [r7, #30]
 8003e00:	e052      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B00000111111000: error = -1; break;
 8003e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e06:	83fb      	strh	r3, [r7, #30]
 8003e08:	e04e      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00001111111100: error = -1; break;
 8003e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0e:	83fb      	strh	r3, [r7, #30]
 8003e10:	e04a      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00011111111110: error = -1; break;
 8003e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e16:	83fb      	strh	r3, [r7, #30]
 8003e18:	e046      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B00001111110000: error = 0; break;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	83fb      	strh	r3, [r7, #30]
 8003e1e:	e043      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00011111111000: error = 0; break;
 8003e20:	2300      	movs	r3, #0
 8003e22:	83fb      	strh	r3, [r7, #30]
 8003e24:	e040      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00111111111100: error = 0; break;
 8003e26:	2300      	movs	r3, #0
 8003e28:	83fb      	strh	r3, [r7, #30]
 8003e2a:	e03d      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B00011111100000: error = 1; break;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	83fb      	strh	r3, [r7, #30]
 8003e30:	e03a      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00111111110000: error = 1; break;
 8003e32:	2301      	movs	r3, #1
 8003e34:	83fb      	strh	r3, [r7, #30]
 8003e36:	e037      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B01111111111000: error = 1; break;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	83fb      	strh	r3, [r7, #30]
 8003e3c:	e034      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B11111000000001: error = -2; break;
 8003e3e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003e42:	83fb      	strh	r3, [r7, #30]
 8003e44:	e030      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B11100000000001: error = -1; break;
 8003e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e4a:	83fb      	strh	r3, [r7, #30]
 8003e4c:	e02c      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11110000000011: error = -1; break;
 8003e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e52:	83fb      	strh	r3, [r7, #30]
 8003e54:	e028      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B10000000000001: error = 0; break;
 8003e56:	2300      	movs	r3, #0
 8003e58:	83fb      	strh	r3, [r7, #30]
 8003e5a:	e025      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11000000000011: error = 0; break;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	83fb      	strh	r3, [r7, #30]
 8003e60:	e022      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11100000000111: error = 0; break;
 8003e62:	2300      	movs	r3, #0
 8003e64:	83fb      	strh	r3, [r7, #30]
 8003e66:	e01f      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B10000000000111: error = -1; break;
 8003e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e6c:	83fb      	strh	r3, [r7, #30]
 8003e6e:	e01b      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B11000000001111: error = -1; break;
 8003e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e74:	83fb      	strh	r3, [r7, #30]
 8003e76:	e017      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B10000000011111: error = -2; break;
 8003e78:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003e7c:	83fb      	strh	r3, [r7, #30]
 8003e7e:	e013      	b.n	8003ea8 <Run_YawSpeed+0x64c>

	case B11000011110000: error = -2; break;
 8003e80:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003e84:	83fb      	strh	r3, [r7, #30]
 8003e86:	e00f      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B10000111110000: error = -1; break;
 8003e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e8c:	83fb      	strh	r3, [r7, #30]
 8003e8e:	e00b      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B10000111100001: error = 0; break;
 8003e90:	2300      	movs	r3, #0
 8003e92:	83fb      	strh	r3, [r7, #30]
 8003e94:	e008      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B00001111100001: error = 1; break;
 8003e96:	2301      	movs	r3, #1
 8003e98:	83fb      	strh	r3, [r7, #30]
 8003e9a:	e005      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	case B10001111000011: error = 2; break;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	83fb      	strh	r3, [r7, #30]
 8003ea0:	e002      	b.n	8003ea8 <Run_YawSpeed+0x64c>
	default: error = last_error;
 8003ea2:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <Run_YawSpeed+0x6fc>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	83fb      	strh	r3, [r7, #30]
	}

	int8_t div_error = error - last_error;
 8003ea8:	8bfb      	ldrh	r3, [r7, #30]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <Run_YawSpeed+0x6fc>)
 8003eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	767b      	strb	r3, [r7, #25]
	sum_error += error;
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <Run_YawSpeed+0x700>)
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	8bfb      	ldrh	r3, [r7, #30]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <Run_YawSpeed+0x700>)
 8003ec6:	801a      	strh	r2, [r3, #0]
	float p = kp * (float)error;
 8003ec8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <Run_YawSpeed+0x704>)
 8003ed6:	edd3 7a00 	vldr	s15, [r3]
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a05 	vstr	s15, [r7, #20]
	float i = ki * (float)sum_error * period;
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <Run_YawSpeed+0x700>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eee:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <Run_YawSpeed+0x708>)
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f00:	edc7 7a04 	vstr	s15, [r7, #16]
	float d = kd * (float)div_error / period;
 8003f04:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f10:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <Run_YawSpeed+0x70c>)
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f22:	edc7 7a03 	vstr	s15, [r7, #12]
	float mv = p + i + d;
 8003f26:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f32:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3a:	edc7 7a02 	vstr	s15, [r7, #8]
	last_error = error;
 8003f3e:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <Run_YawSpeed+0x6fc>)
 8003f40:	8bfb      	ldrh	r3, [r7, #30]
 8003f42:	8013      	strh	r3, [r2, #0]
	return mv;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	ee07 3a90 	vmov	s15, r3
}
 8003f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4e:	3724      	adds	r7, #36	; 0x24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000b16 	.word	0x20000b16
 8003f5c:	20000b14 	.word	0x20000b14
 8003f60:	20000b08 	.word	0x20000b08
 8003f64:	20000b0c 	.word	0x20000b0c
 8003f68:	20000b10 	.word	0x20000b10

08003f6c <Run_LineTracing>:

void Run_LineTracing(float speed, float period, uint8_t flag) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f76:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, flag);
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	4618      	mov	r0, r3
 8003f82:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f86:	f7ff fc69 	bl	800385c <Run_YawSpeed>
 8003f8a:	ed87 0a05 	vstr	s0, [r7, #20]
	Motor_SetPoint(&MOTOR_R, speed-yaw_speed);
 8003f8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9e:	4809      	ldr	r0, [pc, #36]	; (8003fc4 <Run_LineTracing+0x58>)
 8003fa0:	f7fe fa14 	bl	80023cc <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed+yaw_speed);
 8003fa4:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb4:	4804      	ldr	r0, [pc, #16]	; (8003fc8 <Run_LineTracing+0x5c>)
 8003fb6:	f7fe fa09 	bl	80023cc <Motor_SetPoint>
}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000a88 	.word	0x20000a88
 8003fc8:	20000ac8 	.word	0x20000ac8

08003fcc <Run_SetMotorSpeed>:

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fd6:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 8003fda:	ed97 0a00 	vldr	s0, [r7]
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <Run_SetMotorSpeed+0x2c>)
 8003fe0:	f7fe f9f4 	bl	80023cc <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8003fe4:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fe8:	4804      	ldr	r0, [pc, #16]	; (8003ffc <Run_SetMotorSpeed+0x30>)
 8003fea:	f7fe f9ef 	bl	80023cc <Motor_SetPoint>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000a88 	.word	0x20000a88
 8003ffc:	20000ac8 	.word	0x20000ac8

08004000 <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 8004008:	4a0c      	ldr	r2, [pc, #48]	; (800403c <SEN_Init+0x3c>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e008      	b.n	8004026 <SEN_Init+0x26>
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <SEN_Init+0x40>)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800401c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b0d      	cmp	r3, #13
 800402a:	ddf3      	ble.n	8004014 <SEN_Init+0x14>
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000b18 	.word	0x20000b18
 8004040:	20000b54 	.word	0x20000b54

08004044 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b08d      	sub	sp, #52	; 0x34
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004050:	e05a      	b.n	8004108 <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <SEN_Filter+0xd4>)
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	4614      	mov	r4, r2
 8004060:	8818      	ldrh	r0, [r3, #0]
 8004062:	492e      	ldr	r1, [pc, #184]	; (800411c <SEN_Filter+0xd8>)
 8004064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4423      	add	r3, r4
 8004070:	4602      	mov	r2, r0
 8004072:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 8004076:	4b28      	ldr	r3, [pc, #160]	; (8004118 <SEN_Filter+0xd4>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d806      	bhi.n	800408c <SEN_Filter+0x48>
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <SEN_Filter+0xd4>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <SEN_Filter+0xd4>)
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e002      	b.n	8004092 <SEN_Filter+0x4e>
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <SEN_Filter+0xd4>)
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	221c      	movs	r2, #28
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f009 fba6 	bl	800d7ec <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a4:	e01f      	b.n	80040e6 <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	3330      	adds	r3, #48	; 0x30
 80040ac:	443b      	add	r3, r7
 80040ae:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80040b2:	481a      	ldr	r0, [pc, #104]	; (800411c <SEN_Filter+0xd8>)
 80040b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c0:	4413      	add	r3, r2
 80040c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <SEN_Filter+0xdc>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	440b      	add	r3, r1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	443b      	add	r3, r7
 80040dc:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	3301      	adds	r3, #1
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2b09      	cmp	r3, #9
 80040ea:	dddc      	ble.n	80040a6 <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	441a      	add	r2, r3
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	3330      	adds	r3, #48	; 0x30
 80040fa:	443b      	add	r3, r7
 80040fc:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004100:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	3301      	adds	r3, #1
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b0d      	cmp	r3, #13
 800410c:	dda1      	ble.n	8004052 <SEN_Filter+0xe>
	}
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3734      	adds	r7, #52	; 0x34
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	20000c9c 	.word	0x20000c9c
 800411c:	20000b84 	.word	0x20000b84
 8004120:	cccccccd 	.word	0xcccccccd

08004124 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <SEN_StartReadSensor+0x18>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	220e      	movs	r2, #14
 800412e:	4904      	ldr	r1, [pc, #16]	; (8004140 <SEN_StartReadSensor+0x1c>)
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fbe3 	bl	80088fc <HAL_ADC_Start_DMA>
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000b18 	.word	0x20000b18
 8004140:	20000b1c 	.word	0x20000b1c

08004144 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <SEN_CallbackRoutine+0x17c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	f040 80ad 	bne.w	80042b6 <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 800415c:	4859      	ldr	r0, [pc, #356]	; (80042c4 <SEN_CallbackRoutine+0x180>)
 800415e:	f7ff ff71 	bl	8004044 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e017      	b.n	8004198 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005a      	lsls	r2, r3, #1
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f1c3 030d 	rsb	r3, r3, #13
 8004172:	4954      	ldr	r1, [pc, #336]	; (80042c4 <SEN_CallbackRoutine+0x180>)
 8004174:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8004178:	4a53      	ldr	r2, [pc, #332]	; (80042c8 <SEN_CallbackRoutine+0x184>)
 800417a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	3301      	adds	r3, #1
 8004184:	4a4f      	ldr	r2, [pc, #316]	; (80042c4 <SEN_CallbackRoutine+0x180>)
 8004186:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <SEN_CallbackRoutine+0x184>)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3301      	adds	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b06      	cmp	r3, #6
 800419c:	dde4      	ble.n	8004168 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 800419e:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <SEN_CallbackRoutine+0x188>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e06c      	b.n	8004284 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 80041ae:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <SEN_CallbackRoutine+0x18c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d12a      	bne.n	800420c <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 80041b6:	4a44      	ldr	r2, [pc, #272]	; (80042c8 <SEN_CallbackRoutine+0x184>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80041be:	4945      	ldr	r1, [pc, #276]	; (80042d4 <SEN_CallbackRoutine+0x190>)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d91a      	bls.n	8004200 <SEN_CallbackRoutine+0xbc>
				bit = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 80041ce:	4a3e      	ldr	r2, [pc, #248]	; (80042c8 <SEN_CallbackRoutine+0x184>)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d6:	4619      	mov	r1, r3
 80041d8:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <SEN_CallbackRoutine+0x190>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041e0:	1acb      	subs	r3, r1, r3
 80041e2:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <SEN_CallbackRoutine+0x194>)
 80041e4:	fb82 1203 	smull	r1, r2, r2, r3
 80041e8:	1092      	asrs	r2, r2, #2
 80041ea:	17db      	asrs	r3, r3, #31
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	b2d9      	uxtb	r1, r3
 80041f4:	4a39      	ldr	r2, [pc, #228]	; (80042dc <SEN_CallbackRoutine+0x198>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	460a      	mov	r2, r1
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e02f      	b.n	8004260 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8004200:	4a36      	ldr	r2, [pc, #216]	; (80042dc <SEN_CallbackRoutine+0x198>)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e029      	b.n	8004260 <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 800420c:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <SEN_CallbackRoutine+0x184>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004214:	492f      	ldr	r1, [pc, #188]	; (80042d4 <SEN_CallbackRoutine+0x190>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21a      	bcs.n	8004256 <SEN_CallbackRoutine+0x112>
				bit = 1;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <SEN_CallbackRoutine+0x190>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800422c:	4619      	mov	r1, r3
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <SEN_CallbackRoutine+0x184>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004236:	1acb      	subs	r3, r1, r3
 8004238:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <SEN_CallbackRoutine+0x194>)
 800423a:	fb82 1203 	smull	r1, r2, r2, r3
 800423e:	1092      	asrs	r2, r2, #2
 8004240:	17db      	asrs	r3, r3, #31
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3301      	adds	r3, #1
 8004248:	b2d9      	uxtb	r1, r3
 800424a:	4a24      	ldr	r2, [pc, #144]	; (80042dc <SEN_CallbackRoutine+0x198>)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	460a      	mov	r2, r1
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e004      	b.n	8004260 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8004256:	4a21      	ldr	r2, [pc, #132]	; (80042dc <SEN_CallbackRoutine+0x198>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f1c3 030d 	rsb	r3, r3, #13
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	b21a      	sxth	r2, r3
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <SEN_CallbackRoutine+0x188>)
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b21b      	sxth	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b21b      	sxth	r3, r3
 8004278:	b29a      	uxth	r2, r3
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <SEN_CallbackRoutine+0x188>)
 800427c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3301      	adds	r3, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0d      	cmp	r3, #13
 8004288:	dd8f      	ble.n	80041aa <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <SEN_CallbackRoutine+0x19c>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 8004292:	2000      	movs	r0, #0
 8004294:	f000 f870 	bl	8004378 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 8004298:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <SEN_CallbackRoutine+0x1a0>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <SEN_CallbackRoutine+0x1a0>)
 80042a4:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <SEN_CallbackRoutine+0x1a0>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	f023 0302 	bic.w	r3, r3, #2
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <SEN_CallbackRoutine+0x1a0>)
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 80042b6:	bf00      	nop
}
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000b18 	.word	0x20000b18
 80042c4:	20000b1c 	.word	0x20000b1c
 80042c8:	20000b38 	.word	0x20000b38
 80042cc:	20000b7e 	.word	0x20000b7e
 80042d0:	20000b80 	.word	0x20000b80
 80042d4:	20000b54 	.word	0x20000b54
 80042d8:	66666667 	.word	0x66666667
 80042dc:	20000b70 	.word	0x20000b70
 80042e0:	20000ca8 	.word	0x20000ca8
 80042e4:	20000c9d 	.word	0x20000c9d

080042e8 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 80042ee:	4b1f      	ldr	r3, [pc, #124]	; (800436c <SEN_StartAutoCalibration+0x84>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d035      	beq.n	8004362 <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80042f6:	201c      	movs	r0, #28
 80042f8:	f009 fa5a 	bl	800d7b0 <malloc>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <SEN_StartAutoCalibration+0x88>)
 8004302:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8004304:	201c      	movs	r0, #28
 8004306:	f009 fa53 	bl	800d7b0 <malloc>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <SEN_StartAutoCalibration+0x8c>)
 8004310:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <SEN_StartAutoCalibration+0x88>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <SEN_StartAutoCalibration+0x3a>
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <SEN_StartAutoCalibration+0x8c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01b      	beq.n	800435a <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	e011      	b.n	800434c <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <SEN_StartAutoCalibration+0x88>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	2200      	movs	r2, #0
 8004334:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <SEN_StartAutoCalibration+0x8c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004344:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3301      	adds	r3, #1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b0d      	cmp	r3, #13
 8004350:	ddea      	ble.n	8004328 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <SEN_StartAutoCalibration+0x84>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e004      	b.n	8004364 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <SEN_StartAutoCalibration+0x84>)
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e000      	b.n	8004364 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 8004362:	bf00      	nop
}
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000ca8 	.word	0x20000ca8
 8004370:	20000ca0 	.word	0x20000ca0
 8004374:	20000ca4 	.word	0x20000ca4

08004378 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e02f      	b.n	80043e8 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <SEN_AutoCalibrationRoutine+0x84>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	491a      	ldr	r1, [pc, #104]	; (8004400 <SEN_AutoCalibrationRoutine+0x88>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800439c:	429a      	cmp	r2, r3
 800439e:	d20a      	bcs.n	80043b6 <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 80043a0:	4b16      	ldr	r3, [pc, #88]	; (80043fc <SEN_AutoCalibrationRoutine+0x84>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	4915      	ldr	r1, [pc, #84]	; (8004400 <SEN_AutoCalibrationRoutine+0x88>)
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	e015      	b.n	80043e2 <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <SEN_AutoCalibrationRoutine+0x8c>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	490f      	ldr	r1, [pc, #60]	; (8004400 <SEN_AutoCalibrationRoutine+0x88>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d909      	bls.n	80043e2 <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <SEN_AutoCalibrationRoutine+0x8c>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	4909      	ldr	r1, [pc, #36]	; (8004400 <SEN_AutoCalibrationRoutine+0x88>)
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80043e0:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b0d      	cmp	r3, #13
 80043ec:	ddcc      	ble.n	8004388 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000ca0 	.word	0x20000ca0
 8004400:	20000b38 	.word	0x20000b38
 8004404:	20000ca4 	.word	0x20000ca4

08004408 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <SEN_EndAutoCalibration+0xe8>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d060      	beq.n	80044dc <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d04d      	beq.n	80044c0 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e047      	b.n	80044ba <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 800442a:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <SEN_EndAutoCalibration+0xec>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <SEN_EndAutoCalibration+0xf0>)
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	440b      	add	r3, r1
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d335      	bcc.n	80044b2 <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 8004446:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <SEN_EndAutoCalibration+0xec>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <SEN_EndAutoCalibration+0xf0>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	1acb      	subs	r3, r1, r3
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc f85e 	bl	8000524 <__aeabi_i2d>
 8004468:	a31f      	add	r3, pc, #124	; (adr r3, 80044e8 <SEN_EndAutoCalibration+0xe0>)
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f7fc f8c3 	bl	80005f8 <__aeabi_dmul>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4614      	mov	r4, r2
 8004478:	461d      	mov	r5, r3
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <SEN_EndAutoCalibration+0xf0>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc f84c 	bl	8000524 <__aeabi_i2d>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4620      	mov	r0, r4
 8004492:	4629      	mov	r1, r5
 8004494:	f7fb fefa 	bl	800028c <__adddf3>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f7fc fb82 	bl	8000ba8 <__aeabi_d2uiz>
 80044a4:	4603      	mov	r3, r0
 80044a6:	b299      	uxth	r1, r3
 80044a8:	4a14      	ldr	r2, [pc, #80]	; (80044fc <SEN_EndAutoCalibration+0xf4>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80044b0:	e000      	b.n	80044b4 <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 80044b2:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b0d      	cmp	r3, #13
 80044be:	ddb4      	ble.n	800442a <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <SEN_EndAutoCalibration+0xec>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f009 f97b 	bl	800d7c0 <free>
	free(calib_lower_adc);
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <SEN_EndAutoCalibration+0xf0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f009 f976 	bl	800d7c0 <free>
	autocalib_status = 0;
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <SEN_EndAutoCalibration+0xe8>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e000      	b.n	80044de <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 80044dc:	bf00      	nop
}
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdb0      	pop	{r4, r5, r7, pc}
 80044e4:	f3af 8000 	nop.w
 80044e8:	9999999a 	.word	0x9999999a
 80044ec:	3fd99999 	.word	0x3fd99999
 80044f0:	20000ca8 	.word	0x20000ca8
 80044f4:	20000ca0 	.word	0x20000ca0
 80044f8:	20000ca4 	.word	0x20000ca4
 80044fc:	20000b54 	.word	0x20000b54

08004500 <SEN_BlackLine>:

void SEN_BlackLine() {
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <SEN_BlackLine+0x14>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	20000b80 	.word	0x20000b80

08004518 <SEN_Invert>:

void SEN_WhiteLine() {
	sensor_invert = 1;
}

void SEN_Invert() {
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <SEN_Invert+0x24>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <SEN_Invert+0x24>)
 800452e:	701a      	strb	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000b80 	.word	0x20000b80

08004540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_MspInit+0x4c>)
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	4a0f      	ldr	r2, [pc, #60]	; (800458c <HAL_MspInit+0x4c>)
 8004550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004554:	6453      	str	r3, [r2, #68]	; 0x44
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_MspInit+0x4c>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_MspInit+0x4c>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_MspInit+0x4c>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_MspInit+0x4c>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004594:	e7fe      	b.n	8004594 <NMI_Handler+0x4>

08004596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800459a:	e7fe      	b.n	800459a <HardFault_Handler+0x4>

0800459c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045a0:	e7fe      	b.n	80045a0 <MemManage_Handler+0x4>

080045a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045a6:	e7fe      	b.n	80045a6 <BusFault_Handler+0x4>

080045a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ac:	e7fe      	b.n	80045ac <UsageFault_Handler+0x4>

080045ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ae:	b480      	push	{r7}
 80045b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045dc:	f003 fff6 	bl	80085cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80045e8:	4802      	ldr	r0, [pc, #8]	; (80045f4 <ADC_IRQHandler+0x10>)
 80045ea:	f004 f876 	bl	80086da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000510 	.word	0x20000510

080045f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80045fc:	4802      	ldr	r0, [pc, #8]	; (8004608 <TIM6_DAC_IRQHandler+0x10>)
 80045fe:	f007 fc3d 	bl	800be7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000e80 	.word	0x20000e80

0800460c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <DMA2_Stream0_IRQHandler+0x10>)
 8004612:	f004 ff7d 	bl	8009510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000558 	.word	0x20000558

08004620 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <GetAction+0x78>)
 8004630:	fba2 1203 	umull	r1, r2, r2, r3
 8004634:	0952      	lsrs	r2, r2, #5
 8004636:	2164      	movs	r1, #100	; 0x64
 8004638:	fb01 f202 	mul.w	r2, r1, r2
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	b29b      	uxth	r3, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	b29a      	uxth	r2, r3
 8004648:	4b14      	ldr	r3, [pc, #80]	; (800469c <GetAction+0x7c>)
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	4413      	add	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 8004654:	bf00      	nop
 8004656:	f7fd fbb7 	bl	8001dc8 <EEP_ReadyToWrite>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0fa      	beq.n	8004656 <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8004660:	f107 010c 	add.w	r1, r7, #12
 8004664:	8bfb      	ldrh	r3, [r7, #30]
 8004666:	2210      	movs	r2, #16
 8004668:	4618      	mov	r0, r3
 800466a:	f7fd fb87 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <GetAction+0x80>)
 8004670:	461c      	mov	r4, r3
 8004672:	f107 030c 	add.w	r3, r7, #12
 8004676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800467a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return plan_active;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <GetAction+0x80>)
 8004682:	461c      	mov	r4, r3
 8004684:	4613      	mov	r3, r2
 8004686:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004688:	6020      	str	r0, [r4, #0]
 800468a:	6061      	str	r1, [r4, #4]
 800468c:	60a2      	str	r2, [r4, #8]
}
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd90      	pop	{r4, r7, pc}
 8004696:	bf00      	nop
 8004698:	51eb851f 	.word	0x51eb851f
 800469c:	20000caa 	.word	0x20000caa
 80046a0:	20000d24 	.word	0x20000d24

080046a4 <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b08b      	sub	sp, #44	; 0x2c
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	1d3c      	adds	r4, r7, #4
 80046ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046b0:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <SetAction+0x74>)
 80046b6:	fba2 1203 	umull	r1, r2, r2, r3
 80046ba:	0952      	lsrs	r2, r2, #5
 80046bc:	2164      	movs	r1, #100	; 0x64
 80046be:	fb01 f202 	mul.w	r2, r1, r2
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <SetAction+0x78>)
 80046c8:	461c      	mov	r4, r3
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <SetAction+0x7c>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3340      	adds	r3, #64	; 0x40
 80046e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 80046e8:	4a0c      	ldr	r2, [pc, #48]	; (800471c <SetAction+0x78>)
 80046ea:	f107 0314 	add.w	r3, r7, #20
 80046ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80046f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 80046f4:	bf00      	nop
 80046f6:	f7fd fb67 	bl	8001dc8 <EEP_ReadyToWrite>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0fa      	beq.n	80046f6 <SetAction+0x52>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004700:	f107 0114 	add.w	r1, r7, #20
 8004704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004706:	2210      	movs	r2, #16
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd faef 	bl	8001cec <EEP_WriteMem>
}
 800470e:	bf00      	nop
 8004710:	372c      	adds	r7, #44	; 0x2c
 8004712:	46bd      	mov	sp, r7
 8004714:	bd90      	pop	{r4, r7, pc}
 8004716:	bf00      	nop
 8004718:	51eb851f 	.word	0x51eb851f
 800471c:	20000d24 	.word	0x20000d24
 8004720:	20000caa 	.word	0x20000caa

08004724 <Storage_ResetPlan>:

void Storage_ResetPlan() {
 8004724:	b580      	push	{r7, lr}
 8004726:	b0b0      	sub	sp, #192	; 0xc0
 8004728:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 800472a:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <Storage_ResetPlan+0xd0>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 8004738:	2328      	movs	r3, #40	; 0x28
 800473a:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 800473e:	2364      	movs	r3, #100	; 0x64
 8004740:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 10;
 8004744:	230a      	movs	r3, #10
 8004746:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 800474a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800474e:	3302      	adds	r3, #2
 8004750:	2214      	movs	r2, #20
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f009 f849 	bl	800d7ec <memset>
	temp.kpid[0] = 4.71428;
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <Storage_ResetPlan+0xd4>)
 800475c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 0;
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 8004770:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004774:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004778:	2228      	movs	r2, #40	; 0x28
 800477a:	4618      	mov	r0, r3
 800477c:	f009 f828 	bl	800d7d0 <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <Storage_ResetPlan+0xd8>)
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 800478a:	bf00      	nop
 800478c:	f7fd fb1c 	bl	8001dc8 <EEP_ReadyToWrite>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0fa      	beq.n	800478c <Storage_ResetPlan+0x68>
	EEP_WritePage(page_plan, buff);
 8004796:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800479a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd fa7f 	bl	8001ca4 <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047ac:	e018      	b.n	80047e0 <Storage_ResetPlan+0xbc>

		action_temp = plan_default;
 80047ae:	4a14      	ldr	r2, [pc, #80]	; (8004800 <Storage_ResetPlan+0xdc>)
 80047b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80047b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80047c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80047c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		SetAction(action_temp, i);
 80047c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80047d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80047d2:	f7ff ff67 	bl	80046a4 <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 80047d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047da:	3301      	adds	r3, #1
 80047dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047e4:	2b63      	cmp	r3, #99	; 0x63
 80047e6:	dde2      	ble.n	80047ae <Storage_ResetPlan+0x8a>
	}
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	37c0      	adds	r7, #192	; 0xc0
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000ca9 	.word	0x20000ca9
 80047f8:	4096db62 	.word	0x4096db62
 80047fc:	20000caa 	.word	0x20000caa
 8004800:	0801096c 	.word	0x0801096c

08004804 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8004804:	b580      	push	{r7, lr}
 8004806:	b094      	sub	sp, #80	; 0x50
 8004808:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f008 ffeb 	bl	800d7ec <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 8004816:	23ab      	movs	r3, #171	; 0xab
 8004818:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 800481a:	230f      	movs	r3, #15
 800481c:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 8004822:	1d3b      	adds	r3, r7, #4
 8004824:	3310      	adds	r3, #16
 8004826:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8004828:	2300      	movs	r3, #0
 800482a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800482c:	e012      	b.n	8004854 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 800482e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	0052      	lsls	r2, r2, #1
 8004836:	441a      	add	r2, r3
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4413      	add	r3, r2
 800483c:	01db      	lsls	r3, r3, #7
 800483e:	b29a      	uxth	r2, r3
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004846:	440b      	add	r3, r1
 8004848:	3240      	adds	r2, #64	; 0x40
 800484a:	b292      	uxth	r2, r2
 800484c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	3301      	adds	r3, #1
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	2b0e      	cmp	r3, #14
 8004858:	dde9      	ble.n	800482e <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	3320      	adds	r3, #32
 800485e:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 8004860:	2300      	movs	r3, #0
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
 8004864:	e009      	b.n	800487a <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 8004866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800486c:	4413      	add	r3, r2
 800486e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004872:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	3301      	adds	r3, #1
 8004878:	64bb      	str	r3, [r7, #72]	; 0x48
 800487a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487c:	2b0d      	cmp	r3, #13
 800487e:	ddf2      	ble.n	8004866 <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 8004880:	bf00      	nop
 8004882:	f7fd faa1 	bl	8001dc8 <EEP_ReadyToWrite>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0fa      	beq.n	8004882 <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	4619      	mov	r1, r3
 8004890:	2000      	movs	r0, #0
 8004892:	f7fd fa07 	bl	8001ca4 <EEP_WritePage>
}
 8004896:	bf00      	nop
 8004898:	3750      	adds	r7, #80	; 0x50
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <Storage_Init>:

uint8_t Storage_Init() {
 80048a0:	b5b0      	push	{r4, r5, r7, lr}
 80048a2:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 80048a4:	bf00      	nop
 80048a6:	f7fd fa8f 	bl	8001dc8 <EEP_ReadyToWrite>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0fa      	beq.n	80048a6 <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 80048b0:	4913      	ldr	r1, [pc, #76]	; (8004900 <Storage_Init+0x60>)
 80048b2:	2000      	movs	r0, #0
 80048b4:	f7fd fa3e 	bl	8001d34 <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <Storage_Init+0x60>)
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2bab      	cmp	r3, #171	; 0xab
 80048be:	d001      	beq.n	80048c4 <Storage_Init+0x24>
 80048c0:	2300      	movs	r3, #0
 80048c2:	e01b      	b.n	80048fc <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <Storage_Init+0x60>)
 80048c6:	791a      	ldrb	r2, [r3, #4]
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <Storage_Init+0x64>)
 80048ca:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <Storage_Init+0x64>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <Storage_Init+0x60>)
 80048d6:	4413      	add	r3, r2
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <Storage_Init+0x68>)
 80048dc:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80048de:	4a0b      	ldr	r2, [pc, #44]	; (800490c <Storage_Init+0x6c>)
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <Storage_Init+0x60>)
 80048e2:	4615      	mov	r5, r2
 80048e4:	f103 0420 	add.w	r4, r3, #32
 80048e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ea:	6028      	str	r0, [r5, #0]
 80048ec:	6069      	str	r1, [r5, #4]
 80048ee:	60aa      	str	r2, [r5, #8]
 80048f0:	60eb      	str	r3, [r5, #12]
 80048f2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80048f4:	6128      	str	r0, [r5, #16]
 80048f6:	6169      	str	r1, [r5, #20]
 80048f8:	61aa      	str	r2, [r5, #24]
	return 1;
 80048fa:	2301      	movs	r3, #1
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004900:	20000cb0 	.word	0x20000cb0
 8004904:	20000ca9 	.word	0x20000ca9
 8004908:	20000caa 	.word	0x20000caa
 800490c:	20000b54 	.word	0x20000b54

08004910 <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8004910:	b580      	push	{r7, lr}
 8004912:	b092      	sub	sp, #72	; 0x48
 8004914:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <Storage_PlanInit+0x54>)
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	b29b      	uxth	r3, r3
 800491e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8004922:	bf00      	nop
 8004924:	f7fd fa50 	bl	8001dc8 <EEP_ReadyToWrite>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0fa      	beq.n	8004924 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 800492e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004932:	b29b      	uxth	r3, r3
 8004934:	1d3a      	adds	r2, r7, #4
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7fd f9fb 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2228      	movs	r2, #40	; 0x28
 8004942:	4619      	mov	r1, r3
 8004944:	4808      	ldr	r0, [pc, #32]	; (8004968 <Storage_PlanInit+0x58>)
 8004946:	f008 ff43 	bl	800d7d0 <memcpy>
	if(plan.id>>7 != 1) return 0;
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <Storage_PlanInit+0x58>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	09db      	lsrs	r3, r3, #7
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <Storage_PlanInit+0x4a>
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <Storage_PlanInit+0x4c>
	return 1;
 800495a:	2301      	movs	r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	3748      	adds	r7, #72	; 0x48
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000caa 	.word	0x20000caa
 8004968:	20000d34 	.word	0x20000d34

0800496c <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 800496c:	b5b0      	push	{r4, r5, r7, lr}
 800496e:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004970:	bf00      	nop
 8004972:	f7fd fa29 	bl	8001dc8 <EEP_ReadyToWrite>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0fa      	beq.n	8004972 <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 800497c:	221c      	movs	r2, #28
 800497e:	490a      	ldr	r1, [pc, #40]	; (80049a8 <Storage_GetADCThreshold+0x3c>)
 8004980:	2020      	movs	r0, #32
 8004982:	f7fd f9fb 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <Storage_GetADCThreshold+0x40>)
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <Storage_GetADCThreshold+0x44>)
 800498a:	4615      	mov	r5, r2
 800498c:	f103 0420 	add.w	r4, r3, #32
 8004990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004992:	6028      	str	r0, [r5, #0]
 8004994:	6069      	str	r1, [r5, #4]
 8004996:	60aa      	str	r2, [r5, #8]
 8004998:	60eb      	str	r3, [r5, #12]
 800499a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800499c:	6128      	str	r0, [r5, #16]
 800499e:	6169      	str	r1, [r5, #20]
 80049a0:	61aa      	str	r2, [r5, #24]
}
 80049a2:	bf00      	nop
 80049a4:	bdb0      	pop	{r4, r5, r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000cd0 	.word	0x20000cd0
 80049ac:	20000b54 	.word	0x20000b54
 80049b0:	20000cb0 	.word	0x20000cb0

080049b4 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 80049b4:	b5b0      	push	{r4, r5, r7, lr}
 80049b6:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <Storage_SetADCThreshold+0x3c>)
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <Storage_SetADCThreshold+0x40>)
 80049bc:	f103 0420 	add.w	r4, r3, #32
 80049c0:	4615      	mov	r5, r2
 80049c2:	6828      	ldr	r0, [r5, #0]
 80049c4:	6869      	ldr	r1, [r5, #4]
 80049c6:	68aa      	ldr	r2, [r5, #8]
 80049c8:	68eb      	ldr	r3, [r5, #12]
 80049ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049cc:	6928      	ldr	r0, [r5, #16]
 80049ce:	6969      	ldr	r1, [r5, #20]
 80049d0:	69aa      	ldr	r2, [r5, #24]
 80049d2:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 80049d4:	bf00      	nop
 80049d6:	f7fd f9f7 	bl	8001dc8 <EEP_ReadyToWrite>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0fa      	beq.n	80049d6 <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80049e0:	221c      	movs	r2, #28
 80049e2:	4905      	ldr	r1, [pc, #20]	; (80049f8 <Storage_SetADCThreshold+0x44>)
 80049e4:	2020      	movs	r0, #32
 80049e6:	f7fd f981 	bl	8001cec <EEP_WriteMem>
}
 80049ea:	bf00      	nop
 80049ec:	bdb0      	pop	{r4, r5, r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000cb0 	.word	0x20000cb0
 80049f4:	20000b54 	.word	0x20000b54
 80049f8:	20000cd0 	.word	0x20000cd0

080049fc <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b094      	sub	sp, #80	; 0x50
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 8004a06:	4a22      	ldr	r2, [pc, #136]	; (8004a90 <Storage_GetPlan+0x94>)
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 8004a0c:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <Storage_GetPlan+0x94>)
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <Storage_GetPlan+0x98>)
 8004a12:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004a14:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <Storage_GetPlan+0x94>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <Storage_GetPlan+0x98>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <Storage_GetPlan+0x9c>)
 8004a24:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8004a26:	bf00      	nop
 8004a28:	f7fd f9ce 	bl	8001dc8 <EEP_ReadyToWrite>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0fa      	beq.n	8004a28 <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8004a32:	2201      	movs	r2, #1
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <Storage_GetPlan+0x94>)
 8004a36:	2004      	movs	r0, #4
 8004a38:	f7fd f958 	bl	8001cec <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004a3c:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <Storage_GetPlan+0x9c>)
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8004a48:	bf00      	nop
 8004a4a:	f7fd f9bd 	bl	8001dc8 <EEP_ReadyToWrite>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0fa      	beq.n	8004a4a <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8004a54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f107 020c 	add.w	r2, r7, #12
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fd f967 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004a66:	f107 030c 	add.w	r3, r7, #12
 8004a6a:	2228      	movs	r2, #40	; 0x28
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	480b      	ldr	r0, [pc, #44]	; (8004a9c <Storage_GetPlan+0xa0>)
 8004a70:	f008 feae 	bl	800d7d0 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <Storage_GetPlan+0xa0>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	09db      	lsrs	r3, r3, #7
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d001      	beq.n	8004a84 <Storage_GetPlan+0x88>
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <Storage_GetPlan+0x8a>
	return 1;
 8004a84:	2301      	movs	r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3750      	adds	r7, #80	; 0x50
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000ca9 	.word	0x20000ca9
 8004a94:	20000cb0 	.word	0x20000cb0
 8004a98:	20000caa 	.word	0x20000caa
 8004a9c:	20000d34 	.word	0x20000d34

08004aa0 <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004aaa:	bf00      	nop
 8004aac:	f7fd f98c 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0fa      	beq.n	8004aac <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <Storage_SetCheckpoint+0x34>)
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2214      	movs	r2, #20
 8004ac4:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <Storage_SetCheckpoint+0x38>)
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd f910 	bl	8001cec <EEP_WriteMem>
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000caa 	.word	0x20000caa
 8004ad8:	20000d36 	.word	0x20000d36

08004adc <Storage_SetPID>:

void Storage_SetPID() {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8004ae2:	2318      	movs	r3, #24
 8004ae4:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004ae6:	bf00      	nop
 8004ae8:	f7fd f96e 	bl	8001dc8 <EEP_ReadyToWrite>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0fa      	beq.n	8004ae8 <Storage_SetPID+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, 3*sizeof(float));
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <Storage_SetPID+0x60>)
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	4413      	add	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	220c      	movs	r2, #12
 8004b00:	490f      	ldr	r1, [pc, #60]	; (8004b40 <Storage_SetPID+0x64>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd f8f2 	bl	8001cec <EEP_WriteMem>

	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
 8004b08:	2324      	movs	r3, #36	; 0x24
 8004b0a:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004b0c:	bf00      	nop
 8004b0e:	f7fd f95b 	bl	8001dc8 <EEP_ReadyToWrite>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0fa      	beq.n	8004b0e <Storage_SetPID+0x32>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <Storage_SetPID+0x60>)
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	4413      	add	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <Storage_SetPID+0x68>)
 8004b26:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd f8dc 	bl	8001cec <EEP_WriteMem>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000caa 	.word	0x20000caa
 8004b40:	20000d4c 	.word	0x20000d4c
 8004b44:	20000d34 	.word	0x20000d34

08004b48 <Storage_SetSpeed>:

void Storage_SetSpeed() {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8004b4e:	2316      	movs	r3, #22
 8004b50:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004b52:	bf00      	nop
 8004b54:	f7fd f938 	bl	8001dc8 <EEP_ReadyToWrite>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0fa      	beq.n	8004b54 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <Storage_SetSpeed+0x34>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4904      	ldr	r1, [pc, #16]	; (8004b80 <Storage_SetSpeed+0x38>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd f8bc 	bl	8001cec <EEP_WriteMem>
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000caa 	.word	0x20000caa
 8004b80:	20000d4a 	.word	0x20000d4a

08004b84 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, uint8_t index) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
 8004b90:	4613      	mov	r3, r2
 8004b92:	70bb      	strb	r3, [r7, #2]
	index = index%DEF_ACTION_PER_PLAN;
 8004b94:	78bb      	ldrb	r3, [r7, #2]
 8004b96:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <GetActionOther+0x78>)
 8004b98:	fba2 1203 	umull	r1, r2, r2, r3
 8004b9c:	0952      	lsrs	r2, r2, #5
 8004b9e:	2164      	movs	r1, #100	; 0x64
 8004ba0:	fb01 f202 	mul.w	r2, r1, r2
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	70bb      	strb	r3, [r7, #2]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	3308      	adds	r3, #8
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <GetActionOther+0x7c>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	83fb      	strh	r3, [r7, #30]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8004bb6:	78bb      	ldrb	r3, [r7, #2]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	8bfb      	ldrh	r3, [r7, #30]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3340      	adds	r3, #64	; 0x40
 8004bc6:	83bb      	strh	r3, [r7, #28]
	while(!EEP_ReadyToWrite());
 8004bc8:	bf00      	nop
 8004bca:	f7fd f8fd 	bl	8001dc8 <EEP_ReadyToWrite>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0fa      	beq.n	8004bca <GetActionOther+0x46>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8004bd4:	f107 010c 	add.w	r1, r7, #12
 8004bd8:	8bbb      	ldrh	r3, [r7, #28]
 8004bda:	2210      	movs	r2, #16
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fd f8cd 	bl	8001d7c <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 8004be2:	f107 020c 	add.w	r2, r7, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6810      	ldr	r0, [r2, #0]
 8004bea:	6851      	ldr	r1, [r2, #4]
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	6018      	str	r0, [r3, #0]
 8004bf0:	6059      	str	r1, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	51eb851f 	.word	0x51eb851f
 8004c00:	20000cb0 	.word	0x20000cb0

08004c04 <GetActionSequence>:
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
	while(!EEP_ReadyToWrite());
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
}

uint8_t GetActionSequence() {
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <GetActionSequence+0x8c>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d133      	bne.n	8004c7e <GetActionSequence+0x7a>
		plan_active = plan_buffer[plan_buffer_i];
 8004c16:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <GetActionSequence+0x90>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	481e      	ldr	r0, [pc, #120]	; (8004c98 <GetActionSequence+0x94>)
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <GetActionSequence+0x98>)
 8004c20:	460b      	mov	r3, r1
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	440b      	add	r3, r1
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <GetActionSequence+0x8c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <GetActionSequence+0x8c>)
 8004c3e:	701a      	strb	r2, [r3, #0]
		if(plan_buffer_i != plan_buffer_f) {
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <GetActionSequence+0x90>)
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <GetActionSequence+0x9c>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d00e      	beq.n	8004c6a <GetActionSequence+0x66>
			if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <GetActionSequence+0x90>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d903      	bls.n	8004c5c <GetActionSequence+0x58>
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <GetActionSequence+0x90>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e00d      	b.n	8004c78 <GetActionSequence+0x74>
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <GetActionSequence+0x90>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <GetActionSequence+0x90>)
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e006      	b.n	8004c78 <GetActionSequence+0x74>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <GetActionSequence+0x8c>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f043 0302 	orr.w	r3, r3, #2
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <GetActionSequence+0x8c>)
 8004c76:	701a      	strb	r2, [r3, #0]
		}
		retval = 1;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	71fb      	strb	r3, [r7, #7]
 8004c7c:	e001      	b.n	8004c82 <GetActionSequence+0x7e>
	} else {
		retval = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8004c82:	79fb      	ldrb	r3, [r7, #7]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000d30 	.word	0x20000d30
 8004c94:	20000d22 	.word	0x20000d22
 8004c98:	20000d24 	.word	0x20000d24
 8004c9c:	20000cf0 	.word	0x20000cf0
 8004ca0:	20000d21 	.word	0x20000d21

08004ca4 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8004caa:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <GetActionSequenceRoutine+0xc0>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <GetActionSequenceRoutine+0x1e>
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <GetActionSequenceRoutine+0xc0>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d107      	bne.n	8004cd2 <GetActionSequenceRoutine+0x2e>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <GetActionSequenceRoutine+0xc0>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d13f      	bne.n	8004d4a <GetActionSequenceRoutine+0xa6>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8004cca:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d03b      	beq.n	8004d4a <GetActionSequenceRoutine+0xa6>
		if(buff_index < plan.num_action-2) {
 8004cd2:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <GetActionSequenceRoutine+0xc8>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <GetActionSequenceRoutine+0xcc>)
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	3b02      	subs	r3, #2
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	da2b      	bge.n	8004d3a <GetActionSequenceRoutine+0x96>
			if(plan_buffer_f>=BUFFER_SIZE-1) plan_buffer_f=0; else plan_buffer_f++;
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d903      	bls.n	8004cf2 <GetActionSequenceRoutine+0x4e>
 8004cea:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e005      	b.n	8004cfe <GetActionSequenceRoutine+0x5a>
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004cfc:	701a      	strb	r2, [r3, #0]
			buff_index++;
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <GetActionSequenceRoutine+0xc8>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <GetActionSequenceRoutine+0xc8>)
 8004d08:	701a      	strb	r2, [r3, #0]
			plan_buffer[plan_buffer_f] = GetActionOther(num_plan, buff_index);
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <GetActionSequenceRoutine+0xd0>)
 8004d0c:	7819      	ldrb	r1, [r3, #0]
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <GetActionSequenceRoutine+0xc8>)
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <GetActionSequenceRoutine+0xc4>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	461c      	mov	r4, r3
 8004d18:	4817      	ldr	r0, [pc, #92]	; (8004d78 <GetActionSequenceRoutine+0xd4>)
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4423      	add	r3, r4
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	18c4      	adds	r4, r0, r3
 8004d24:	463b      	mov	r3, r7
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ff2c 	bl	8004b84 <GetActionOther>
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	463a      	mov	r2, r7
 8004d30:	6810      	ldr	r0, [r2, #0]
 8004d32:	6851      	ldr	r1, [r2, #4]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	c307      	stmia	r3!, {r0, r1, r2}
		if(buff_index < plan.num_action-2) {
 8004d38:	e00f      	b.n	8004d5a <GetActionSequenceRoutine+0xb6>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <GetActionSequenceRoutine+0xd8>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <GetActionSequenceRoutine+0xd8>)
 8004d46:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8004d48:	e007      	b.n	8004d5a <GetActionSequenceRoutine+0xb6>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <GetActionSequenceRoutine+0xd8>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <GetActionSequenceRoutine+0xd8>)
 8004d56:	701a      	strb	r2, [r3, #0]
	}
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd90      	pop	{r4, r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000d22 	.word	0x20000d22
 8004d68:	20000d21 	.word	0x20000d21
 8004d6c:	20000d20 	.word	0x20000d20
 8004d70:	20000d34 	.word	0x20000d34
 8004d74:	20000ca9 	.word	0x20000ca9
 8004d78:	20000cf0 	.word	0x20000cf0
 8004d7c:	20000d30 	.word	0x20000d30

08004d80 <GetActionSequenceInit>:

void GetActionSequenceInit(uint8_t num) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	7dfa      	ldrb	r2, [r7, #23]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fc45 	bl	8004620 <GetAction>
	buff_index = num;
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <GetActionSequenceInit+0x4c>)
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	7013      	strb	r3, [r2, #0]
	plan_buffer_i = 0;
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <GetActionSequenceInit+0x50>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
	plan_buffer_f = 0;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <GetActionSequenceInit+0x54>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <GetActionSequenceInit+0x58>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <GetActionSequenceInit+0x58>)
 8004db4:	701a      	strb	r2, [r3, #0]

	storage_flag = storage_flag | STO_FLAG_BUFF_EMPTY;
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <GetActionSequenceInit+0x58>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <GetActionSequenceInit+0x58>)
 8004dc2:	701a      	strb	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000d20 	.word	0x20000d20
 8004dd0:	20000d22 	.word	0x20000d22
 8004dd4:	20000d21 	.word	0x20000d21
 8004dd8:	20000d30 	.word	0x20000d30

08004ddc <Storage_CleanInit>:
		SetActionOther(temp, i);
	}
	SetActionOther(plan_default, plan.num_action-1);
}

void Storage_CleanInit() {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b092      	sub	sp, #72	; 0x48
 8004de0:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	2240      	movs	r2, #64	; 0x40
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f008 fcff 	bl	800d7ec <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 8004dee:	2300      	movs	r3, #0
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	e00f      	b.n	8004e14 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8004df4:	bf00      	nop
 8004df6:	f7fc ffe7 	bl	8001dc8 <EEP_ReadyToWrite>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0fa      	beq.n	8004df6 <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	1d3a      	adds	r2, r7, #4
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fc ff4b 	bl	8001ca4 <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 8004e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e10:	3301      	adds	r3, #1
 8004e12:	647b      	str	r3, [r7, #68]	; 0x44
 8004e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1a:	dbeb      	blt.n	8004df4 <Storage_CleanInit+0x18>
	}
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	3748      	adds	r7, #72	; 0x48
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0
  return 1;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <_kill>:

int _kill(int pid, int sig)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e40:	f008 fc8c 	bl	800d75c <__errno>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2216      	movs	r2, #22
 8004e48:	601a      	str	r2, [r3, #0]
  return -1;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_exit>:

void _exit (int status)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ffe7 	bl	8004e36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e68:	e7fe      	b.n	8004e68 <_exit+0x12>

08004e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e00a      	b.n	8004e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e7c:	f3af 8000 	nop.w
 8004e80:	4601      	mov	r1, r0
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	60ba      	str	r2, [r7, #8]
 8004e88:	b2ca      	uxtb	r2, r1
 8004e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	dbf0      	blt.n	8004e7c <_read+0x12>
  }

  return len;
 8004e9a:	687b      	ldr	r3, [r7, #4]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e009      	b.n	8004eca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	60ba      	str	r2, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	dbf1      	blt.n	8004eb6 <_write+0x12>
  }
  return len;
 8004ed2:	687b      	ldr	r3, [r7, #4]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <_close>:

int _close(int file)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f04:	605a      	str	r2, [r3, #4]
  return 0;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_isatty>:

int _isatty(int file)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f1c:	2301      	movs	r3, #1
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <_sbrk+0x5c>)
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <_sbrk+0x60>)
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f58:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <_sbrk+0x64>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <_sbrk+0x64>)
 8004f62:	4a12      	ldr	r2, [pc, #72]	; (8004fac <_sbrk+0x68>)
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <_sbrk+0x64>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d207      	bcs.n	8004f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f74:	f008 fbf2 	bl	800d75c <__errno>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	220c      	movs	r2, #12
 8004f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	e009      	b.n	8004f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <_sbrk+0x64>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <_sbrk+0x64>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <_sbrk+0x64>)
 8004f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20020000 	.word	0x20020000
 8004fa4:	00000400 	.word	0x00000400
 8004fa8:	20000d5c 	.word	0x20000d5c
 8004fac:	20001518 	.word	0x20001518

08004fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <SystemInit+0x20>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <SystemInit+0x20>)
 8004fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	e000ed00 	.word	0xe000ed00

08004fd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	615a      	str	r2, [r3, #20]
 8005004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	2220      	movs	r2, #32
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f008 fbed 	bl	800d7ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005012:	4b4a      	ldr	r3, [pc, #296]	; (800513c <MX_TIM1_Init+0x168>)
 8005014:	4a4a      	ldr	r2, [pc, #296]	; (8005140 <MX_TIM1_Init+0x16c>)
 8005016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005018:	4b48      	ldr	r3, [pc, #288]	; (800513c <MX_TIM1_Init+0x168>)
 800501a:	2253      	movs	r2, #83	; 0x53
 800501c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501e:	4b47      	ldr	r3, [pc, #284]	; (800513c <MX_TIM1_Init+0x168>)
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005024:	4b45      	ldr	r3, [pc, #276]	; (800513c <MX_TIM1_Init+0x168>)
 8005026:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800502a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800502c:	4b43      	ldr	r3, [pc, #268]	; (800513c <MX_TIM1_Init+0x168>)
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005032:	4b42      	ldr	r3, [pc, #264]	; (800513c <MX_TIM1_Init+0x168>)
 8005034:	2200      	movs	r2, #0
 8005036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <MX_TIM1_Init+0x168>)
 800503a:	2200      	movs	r2, #0
 800503c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800503e:	483f      	ldr	r0, [pc, #252]	; (800513c <MX_TIM1_Init+0x168>)
 8005040:	f006 fc10 	bl	800b864 <HAL_TIM_Base_Init>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800504a:	f7fd f96e 	bl	800232a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800504e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005052:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005058:	4619      	mov	r1, r3
 800505a:	4838      	ldr	r0, [pc, #224]	; (800513c <MX_TIM1_Init+0x168>)
 800505c:	f007 f8d8 	bl	800c210 <HAL_TIM_ConfigClockSource>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005066:	f7fd f960 	bl	800232a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800506a:	4834      	ldr	r0, [pc, #208]	; (800513c <MX_TIM1_Init+0x168>)
 800506c:	f006 fcba 	bl	800b9e4 <HAL_TIM_PWM_Init>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005076:	f7fd f958 	bl	800232a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800507e:	2300      	movs	r3, #0
 8005080:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005086:	4619      	mov	r1, r3
 8005088:	482c      	ldr	r0, [pc, #176]	; (800513c <MX_TIM1_Init+0x168>)
 800508a:	f007 fcc1 	bl	800ca10 <HAL_TIMEx_MasterConfigSynchronization>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005094:	f7fd f949 	bl	800232a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005098:	2360      	movs	r3, #96	; 0x60
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050a0:	2300      	movs	r3, #0
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80050a4:	2300      	movs	r3, #0
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80050ac:	2300      	movs	r3, #0
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80050b0:	2300      	movs	r3, #0
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b8:	2200      	movs	r2, #0
 80050ba:	4619      	mov	r1, r3
 80050bc:	481f      	ldr	r0, [pc, #124]	; (800513c <MX_TIM1_Init+0x168>)
 80050be:	f006 ffe5 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80050c8:	f7fd f92f 	bl	800232a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80050cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d0:	2204      	movs	r2, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4819      	ldr	r0, [pc, #100]	; (800513c <MX_TIM1_Init+0x168>)
 80050d6:	f006 ffd9 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80050e0:	f7fd f923 	bl	800232a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e8:	2208      	movs	r2, #8
 80050ea:	4619      	mov	r1, r3
 80050ec:	4813      	ldr	r0, [pc, #76]	; (800513c <MX_TIM1_Init+0x168>)
 80050ee:	f006 ffcd 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80050f8:	f7fd f917 	bl	800232a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005100:	2300      	movs	r3, #0
 8005102:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005114:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005116:	2300      	movs	r3, #0
 8005118:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4807      	ldr	r0, [pc, #28]	; (800513c <MX_TIM1_Init+0x168>)
 8005120:	f007 fcf2 	bl	800cb08 <HAL_TIMEx_ConfigBreakDeadTime>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800512a:	f7fd f8fe 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800512e:	4803      	ldr	r0, [pc, #12]	; (800513c <MX_TIM1_Init+0x168>)
 8005130:	f000 fa5a 	bl	80055e8 <HAL_TIM_MspPostInit>

}
 8005134:	bf00      	nop
 8005136:	3758      	adds	r7, #88	; 0x58
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000d60 	.word	0x20000d60
 8005140:	40010000 	.word	0x40010000

08005144 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08c      	sub	sp, #48	; 0x30
 8005148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f008 fb4a 	bl	800d7ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005160:	4b21      	ldr	r3, [pc, #132]	; (80051e8 <MX_TIM2_Init+0xa4>)
 8005162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <MX_TIM2_Init+0xa4>)
 800516a:	2200      	movs	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <MX_TIM2_Init+0xa4>)
 8005170:	2200      	movs	r2, #0
 8005172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <MX_TIM2_Init+0xa4>)
 8005176:	f04f 32ff 	mov.w	r2, #4294967295
 800517a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800517c:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <MX_TIM2_Init+0xa4>)
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005182:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <MX_TIM2_Init+0xa4>)
 8005184:	2200      	movs	r2, #0
 8005186:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005188:	2303      	movs	r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800519c:	2300      	movs	r3, #0
 800519e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051a0:	2301      	movs	r3, #1
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	4619      	mov	r1, r3
 80051b2:	480d      	ldr	r0, [pc, #52]	; (80051e8 <MX_TIM2_Init+0xa4>)
 80051b4:	f006 fd2e 	bl	800bc14 <HAL_TIM_Encoder_Init>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80051be:	f7fd f8b4 	bl	800232a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4806      	ldr	r0, [pc, #24]	; (80051e8 <MX_TIM2_Init+0xa4>)
 80051d0:	f007 fc1e 	bl	800ca10 <HAL_TIMEx_MasterConfigSynchronization>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80051da:	f7fd f8a6 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80051de:	bf00      	nop
 80051e0:	3730      	adds	r7, #48	; 0x30
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000da8 	.word	0x20000da8

080051ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051f2:	f107 0320 	add.w	r3, r7, #32
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	611a      	str	r2, [r3, #16]
 800520a:	615a      	str	r2, [r3, #20]
 800520c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005210:	4a32      	ldr	r2, [pc, #200]	; (80052dc <MX_TIM3_Init+0xf0>)
 8005212:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8005214:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005216:	2207      	movs	r2, #7
 8005218:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800521a:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <MX_TIM3_Init+0xec>)
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005222:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005226:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <MX_TIM3_Init+0xec>)
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005230:	2200      	movs	r2, #0
 8005232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005234:	4828      	ldr	r0, [pc, #160]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005236:	f006 fbd5 	bl	800b9e4 <HAL_TIM_PWM_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005240:	f7fd f873 	bl	800232a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005244:	2300      	movs	r3, #0
 8005246:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005248:	2300      	movs	r3, #0
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800524c:	f107 0320 	add.w	r3, r7, #32
 8005250:	4619      	mov	r1, r3
 8005252:	4821      	ldr	r0, [pc, #132]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005254:	f007 fbdc 	bl	800ca10 <HAL_TIMEx_MasterConfigSynchronization>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800525e:	f7fd f864 	bl	800232a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005262:	2360      	movs	r3, #96	; 0x60
 8005264:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	2200      	movs	r2, #0
 8005276:	4619      	mov	r1, r3
 8005278:	4817      	ldr	r0, [pc, #92]	; (80052d8 <MX_TIM3_Init+0xec>)
 800527a:	f006 ff07 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005284:	f7fd f851 	bl	800232a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	2204      	movs	r2, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4812      	ldr	r0, [pc, #72]	; (80052d8 <MX_TIM3_Init+0xec>)
 8005290:	f006 fefc 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800529a:	f7fd f846 	bl	800232a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	2208      	movs	r2, #8
 80052a2:	4619      	mov	r1, r3
 80052a4:	480c      	ldr	r0, [pc, #48]	; (80052d8 <MX_TIM3_Init+0xec>)
 80052a6:	f006 fef1 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80052b0:	f7fd f83b 	bl	800232a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	220c      	movs	r2, #12
 80052b8:	4619      	mov	r1, r3
 80052ba:	4807      	ldr	r0, [pc, #28]	; (80052d8 <MX_TIM3_Init+0xec>)
 80052bc:	f006 fee6 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80052c6:	f7fd f830 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80052ca:	4803      	ldr	r0, [pc, #12]	; (80052d8 <MX_TIM3_Init+0xec>)
 80052cc:	f000 f98c 	bl	80055e8 <HAL_TIM_MspPostInit>

}
 80052d0:	bf00      	nop
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000df0 	.word	0x20000df0
 80052dc:	40000400 	.word	0x40000400

080052e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	; 0x30
 80052e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052e6:	f107 030c 	add.w	r3, r7, #12
 80052ea:	2224      	movs	r2, #36	; 0x24
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f008 fa7c 	bl	800d7ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80052fc:	4b20      	ldr	r3, [pc, #128]	; (8005380 <MX_TIM4_Init+0xa0>)
 80052fe:	4a21      	ldr	r2, [pc, #132]	; (8005384 <MX_TIM4_Init+0xa4>)
 8005300:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005302:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <MX_TIM4_Init+0xa0>)
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005308:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <MX_TIM4_Init+0xa0>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800530e:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <MX_TIM4_Init+0xa0>)
 8005310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005314:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <MX_TIM4_Init+0xa0>)
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800531c:	4b18      	ldr	r3, [pc, #96]	; (8005380 <MX_TIM4_Init+0xa0>)
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005322:	2303      	movs	r3, #3
 8005324:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800532a:	2301      	movs	r3, #1
 800532c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800533a:	2301      	movs	r3, #1
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800533e:	2300      	movs	r3, #0
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005346:	f107 030c 	add.w	r3, r7, #12
 800534a:	4619      	mov	r1, r3
 800534c:	480c      	ldr	r0, [pc, #48]	; (8005380 <MX_TIM4_Init+0xa0>)
 800534e:	f006 fc61 	bl	800bc14 <HAL_TIM_Encoder_Init>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005358:	f7fc ffe7 	bl	800232a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800535c:	2300      	movs	r3, #0
 800535e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005360:	2300      	movs	r3, #0
 8005362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4805      	ldr	r0, [pc, #20]	; (8005380 <MX_TIM4_Init+0xa0>)
 800536a:	f007 fb51 	bl	800ca10 <HAL_TIMEx_MasterConfigSynchronization>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8005374:	f7fc ffd9 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005378:	bf00      	nop
 800537a:	3730      	adds	r7, #48	; 0x30
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20000e38 	.word	0x20000e38
 8005384:	40000800 	.word	0x40000800

08005388 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800538e:	463b      	mov	r3, r7
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <MX_TIM6_Init+0x64>)
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <MX_TIM6_Init+0x68>)
 800539a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800539c:	4b13      	ldr	r3, [pc, #76]	; (80053ec <MX_TIM6_Init+0x64>)
 800539e:	2253      	movs	r2, #83	; 0x53
 80053a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <MX_TIM6_Init+0x64>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <MX_TIM6_Init+0x64>)
 80053aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <MX_TIM6_Init+0x64>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80053b6:	480d      	ldr	r0, [pc, #52]	; (80053ec <MX_TIM6_Init+0x64>)
 80053b8:	f006 fa54 	bl	800b864 <HAL_TIM_Base_Init>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80053c2:	f7fc ffb2 	bl	800232a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053c6:	2300      	movs	r3, #0
 80053c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80053ce:	463b      	mov	r3, r7
 80053d0:	4619      	mov	r1, r3
 80053d2:	4806      	ldr	r0, [pc, #24]	; (80053ec <MX_TIM6_Init+0x64>)
 80053d4:	f007 fb1c 	bl	800ca10 <HAL_TIMEx_MasterConfigSynchronization>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80053de:	f7fc ffa4 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000e80 	.word	0x20000e80
 80053f0:	40001000 	.word	0x40001000

080053f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_TIM_Base_MspInit+0x70>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10e      	bne.n	8005424 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	4b17      	ldr	r3, [pc, #92]	; (8005468 <HAL_TIM_Base_MspInit+0x74>)
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	4a16      	ldr	r2, [pc, #88]	; (8005468 <HAL_TIM_Base_MspInit+0x74>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	6453      	str	r3, [r2, #68]	; 0x44
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <HAL_TIM_Base_MspInit+0x74>)
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005422:	e01a      	b.n	800545a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <HAL_TIM_Base_MspInit+0x78>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d115      	bne.n	800545a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <HAL_TIM_Base_MspInit+0x74>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <HAL_TIM_Base_MspInit+0x74>)
 8005438:	f043 0310 	orr.w	r3, r3, #16
 800543c:	6413      	str	r3, [r2, #64]	; 0x40
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <HAL_TIM_Base_MspInit+0x74>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	2036      	movs	r0, #54	; 0x36
 8005450:	f003 ff1d 	bl	800928e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005454:	2036      	movs	r0, #54	; 0x36
 8005456:	f003 ff36 	bl	80092c6 <HAL_NVIC_EnableIRQ>
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40023800 	.word	0x40023800
 800546c:	40001000 	.word	0x40001000

08005470 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	; 0x30
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005478:	f107 031c 	add.w	r3, r7, #28
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	605a      	str	r2, [r3, #4]
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d14b      	bne.n	800552a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a3e      	ldr	r2, [pc, #248]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	4b38      	ldr	r3, [pc, #224]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	4a37      	ldr	r2, [pc, #220]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	6313      	str	r3, [r2, #48]	; 0x30
 80054be:	4b35      	ldr	r3, [pc, #212]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054d4:	f043 0302 	orr.w	r3, r3, #2
 80054d8:	6313      	str	r3, [r2, #48]	; 0x30
 80054da:	4b2e      	ldr	r3, [pc, #184]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ec:	2302      	movs	r3, #2
 80054ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054f8:	2301      	movs	r3, #1
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fc:	f107 031c 	add.w	r3, r7, #28
 8005500:	4619      	mov	r1, r3
 8005502:	4825      	ldr	r0, [pc, #148]	; (8005598 <HAL_TIM_Encoder_MspInit+0x128>)
 8005504:	f004 fa6e 	bl	80099e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005508:	2308      	movs	r3, #8
 800550a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550c:	2302      	movs	r3, #2
 800550e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005514:	2300      	movs	r3, #0
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005518:	2301      	movs	r3, #1
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	f107 031c 	add.w	r3, r7, #28
 8005520:	4619      	mov	r1, r3
 8005522:	481e      	ldr	r0, [pc, #120]	; (800559c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005524:	f004 fa5e 	bl	80099e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005528:	e030      	b.n	800558c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <HAL_TIM_Encoder_MspInit+0x130>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d12b      	bne.n	800558c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	6413      	str	r3, [r2, #64]	; 0x40
 8005544:	4b13      	ldr	r3, [pc, #76]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <HAL_TIM_Encoder_MspInit+0x124>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800556c:	23c0      	movs	r3, #192	; 0xc0
 800556e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005570:	2302      	movs	r3, #2
 8005572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005578:	2300      	movs	r3, #0
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800557c:	2302      	movs	r3, #2
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005580:	f107 031c 	add.w	r3, r7, #28
 8005584:	4619      	mov	r1, r3
 8005586:	4805      	ldr	r0, [pc, #20]	; (800559c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005588:	f004 fa2c 	bl	80099e4 <HAL_GPIO_Init>
}
 800558c:	bf00      	nop
 800558e:	3730      	adds	r7, #48	; 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	40020000 	.word	0x40020000
 800559c:	40020400 	.word	0x40020400
 80055a0:	40000800 	.word	0x40000800

080055a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10d      	bne.n	80055d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <HAL_TIM_PWM_MspInit+0x40>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <HAL_TIM_PWM_MspInit+0x40>)
 80055c0:	f043 0302 	orr.w	r3, r3, #2
 80055c4:	6413      	str	r3, [r2, #64]	; 0x40
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <HAL_TIM_PWM_MspInit+0x40>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40023800 	.word	0x40023800

080055e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	60da      	str	r2, [r3, #12]
 80055fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a25      	ldr	r2, [pc, #148]	; (800569c <HAL_TIM_MspPostInit+0xb4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d11f      	bne.n	800564a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_TIM_MspPostInit+0xb8>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <HAL_TIM_MspPostInit+0xb8>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <HAL_TIM_MspPostInit+0xb8>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005626:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800562a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005638:	2301      	movs	r3, #1
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	4619      	mov	r1, r3
 8005642:	4818      	ldr	r0, [pc, #96]	; (80056a4 <HAL_TIM_MspPostInit+0xbc>)
 8005644:	f004 f9ce 	bl	80099e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005648:	e023      	b.n	8005692 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <HAL_TIM_MspPostInit+0xc0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d11e      	bne.n	8005692 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_TIM_MspPostInit+0xb8>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIM_MspPostInit+0xb8>)
 800565e:	f043 0304 	orr.w	r3, r3, #4
 8005662:	6313      	str	r3, [r2, #48]	; 0x30
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_TIM_MspPostInit+0xb8>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005670:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005682:	2302      	movs	r3, #2
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	4619      	mov	r1, r3
 800568c:	4807      	ldr	r0, [pc, #28]	; (80056ac <HAL_TIM_MspPostInit+0xc4>)
 800568e:	f004 f9a9 	bl	80099e4 <HAL_GPIO_Init>
}
 8005692:	bf00      	nop
 8005694:	3728      	adds	r7, #40	; 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40020000 	.word	0x40020000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40020800 	.word	0x40020800

080056b0 <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <UI_ShowSensor+0xec>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <UI_ShowSensor+0x16>
 80056c2:	2300      	movs	r3, #0
 80056c4:	e065      	b.n	8005792 <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 80056c6:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <UI_ShowSensor+0xf0>)
 80056c8:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 80056ca:	4b36      	ldr	r3, [pc, #216]	; (80057a4 <UI_ShowSensor+0xf4>)
 80056cc:	7818      	ldrb	r0, [r3, #0]
 80056ce:	4b35      	ldr	r3, [pc, #212]	; (80057a4 <UI_ShowSensor+0xf4>)
 80056d0:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 80056d2:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <UI_ShowSensor+0xf4>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 80056d6:	3362      	adds	r3, #98	; 0x62
 80056d8:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 80056da:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <UI_ShowSensor+0xf4>)
 80056dc:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 80056de:	330f      	adds	r3, #15
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2401      	movs	r4, #1
 80056e4:	9400      	str	r4, [sp, #0]
 80056e6:	f7fc f81d 	bl	8001724 <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 80056ea:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <UI_ShowSensor+0xf8>)
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056f2:	6018      	str	r0, [r3, #0]
 80056f4:	3304      	adds	r3, #4
 80056f6:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e03e      	b.n	800577c <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f1c3 030d 	rsb	r3, r3, #13
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	2b0e      	cmp	r3, #14
 8005710:	d902      	bls.n	8005718 <UI_ShowSensor+0x68>
 8005712:	230e      	movs	r3, #14
 8005714:	74fb      	strb	r3, [r7, #19]
 8005716:	e007      	b.n	8005728 <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d002      	beq.n	8005724 <UI_ShowSensor+0x74>
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d101      	bne.n	8005728 <UI_ShowSensor+0x78>
 8005724:	2303      	movs	r3, #3
 8005726:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8005728:	7cfb      	ldrb	r3, [r7, #19]
 800572a:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	00d2      	lsls	r2, r2, #3
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	b2da      	uxtb	r2, r3
 8005738:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <UI_ShowSensor+0xf4>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	4413      	add	r3, r2
 800573e:	b2db      	uxtb	r3, r3
 8005740:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 8005742:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <UI_ShowSensor+0xf4>)
 8005744:	785a      	ldrb	r2, [r3, #1]
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	330f      	adds	r3, #15
 800574e:	b2db      	uxtb	r3, r3
 8005750:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 8005752:	7afb      	ldrb	r3, [r7, #11]
 8005754:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fc f9b7 	bl	8001acc <DISP_FillRect2>
		DISP_OLEDUpdate(
 800575e:	7938      	ldrb	r0, [r7, #4]
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <UI_ShowSensor+0xf4>)
 8005762:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8005764:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8005766:	3306      	adds	r3, #6
 8005768:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <UI_ShowSensor+0xf4>)
 800576c:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 800576e:	330f      	adds	r3, #15
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f7fc f963 	bl	8001a3c <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	3301      	adds	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b0d      	cmp	r3, #13
 8005780:	ddbd      	ble.n	80056fe <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <UI_ShowSensor+0xec>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	b2da      	uxtb	r2, r3
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <UI_ShowSensor+0xec>)
 800578e:	701a      	strb	r2, [r3, #0]
	return 1;
 8005790:	2301      	movs	r3, #1
}
 8005792:	4618      	mov	r0, r3
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}
 800579a:	bf00      	nop
 800579c:	20000c9d 	.word	0x20000c9d
 80057a0:	20000b70 	.word	0x20000b70
 80057a4:	20000290 	.word	0x20000290
 80057a8:	080105e8 	.word	0x080105e8

080057ac <UI_ReadButton>:

uint8_t UI_ReadButton() {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 80057b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ba:	483c      	ldr	r0, [pc, #240]	; (80058ac <UI_ReadButton+0x100>)
 80057bc:	f004 faae 	bl	8009d1c <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	b25a      	sxtb	r2, r3
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 80057d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057dc:	4833      	ldr	r0, [pc, #204]	; (80058ac <UI_ReadButton+0x100>)
 80057de:	f004 fa9d 	bl	8009d1c <HAL_GPIO_ReadPin>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <UI_ReadButton+0x40>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e000      	b.n	80057ee <UI_ReadButton+0x42>
 80057ec:	2300      	movs	r3, #0
 80057ee:	b25a      	sxtb	r2, r3
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b25b      	sxtb	r3, r3
 80057f8:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 80057fa:	2110      	movs	r1, #16
 80057fc:	482c      	ldr	r0, [pc, #176]	; (80058b0 <UI_ReadButton+0x104>)
 80057fe:	f004 fa8d 	bl	8009d1c <HAL_GPIO_ReadPin>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <UI_ReadButton+0x60>
 8005808:	2304      	movs	r3, #4
 800580a:	e000      	b.n	800580e <UI_ReadButton+0x62>
 800580c:	2300      	movs	r3, #0
 800580e:	b25a      	sxtb	r2, r3
 8005810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005814:	4313      	orrs	r3, r2
 8005816:	b25b      	sxtb	r3, r3
 8005818:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 800581a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800581e:	4824      	ldr	r0, [pc, #144]	; (80058b0 <UI_ReadButton+0x104>)
 8005820:	f004 fa7c 	bl	8009d1c <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <UI_ReadButton+0x82>
 800582a:	2308      	movs	r3, #8
 800582c:	e000      	b.n	8005830 <UI_ReadButton+0x84>
 800582e:	2300      	movs	r3, #0
 8005830:	b25a      	sxtb	r2, r3
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	4313      	orrs	r3, r2
 8005838:	b25b      	sxtb	r3, r3
 800583a:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 800583c:	2120      	movs	r1, #32
 800583e:	481c      	ldr	r0, [pc, #112]	; (80058b0 <UI_ReadButton+0x104>)
 8005840:	f004 fa6c 	bl	8009d1c <HAL_GPIO_ReadPin>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <UI_ReadButton+0xa2>
 800584a:	2310      	movs	r3, #16
 800584c:	e000      	b.n	8005850 <UI_ReadButton+0xa4>
 800584e:	2300      	movs	r3, #0
 8005850:	b25a      	sxtb	r2, r3
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	4313      	orrs	r3, r2
 8005858:	b25b      	sxtb	r3, r3
 800585a:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 800585c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005860:	4813      	ldr	r0, [pc, #76]	; (80058b0 <UI_ReadButton+0x104>)
 8005862:	f004 fa5b 	bl	8009d1c <HAL_GPIO_ReadPin>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <UI_ReadButton+0xc4>
 800586c:	2320      	movs	r3, #32
 800586e:	e000      	b.n	8005872 <UI_ReadButton+0xc6>
 8005870:	2300      	movs	r3, #0
 8005872:	b25a      	sxtb	r2, r3
 8005874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005878:	4313      	orrs	r3, r2
 800587a:	b25b      	sxtb	r3, r3
 800587c:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 800587e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005882:	480b      	ldr	r0, [pc, #44]	; (80058b0 <UI_ReadButton+0x104>)
 8005884:	f004 fa4a 	bl	8009d1c <HAL_GPIO_ReadPin>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <UI_ReadButton+0xe6>
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	e000      	b.n	8005894 <UI_ReadButton+0xe8>
 8005892:	2300      	movs	r3, #0
 8005894:	b25a      	sxtb	r2, r3
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	4313      	orrs	r3, r2
 800589c:	b25b      	sxtb	r3, r3
 800589e:	71fb      	strb	r3, [r7, #7]
	return temp;
 80058a0:	79fb      	ldrb	r3, [r7, #7]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40020800 	.word	0x40020800
 80058b0:	40020400 	.word	0x40020400

080058b4 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 80058b8:	4b35      	ldr	r3, [pc, #212]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 80058be:	4b34      	ldr	r3, [pc, #208]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058c0:	221b      	movs	r2, #27
 80058c2:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 80058ca:	4b31      	ldr	r3, [pc, #196]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058cc:	227f      	movs	r2, #127	; 0x7f
 80058ce:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 80058d0:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058d2:	220a      	movs	r2, #10
 80058d4:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 80058d6:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058d8:	2202      	movs	r2, #2
 80058da:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 80058dc:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <UI_HomeScreenInit+0xdc>)
 80058de:	2202      	movs	r2, #2
 80058e0:	719a      	strb	r2, [r3, #6]

	home_menu[0].origin_x = 14;
 80058e2:	4b2c      	ldr	r3, [pc, #176]	; (8005994 <UI_HomeScreenInit+0xe0>)
 80058e4:	220e      	movs	r2, #14
 80058e6:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 80058e8:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <UI_HomeScreenInit+0xe0>)
 80058ea:	2226      	movs	r2, #38	; 0x26
 80058ec:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <UI_HomeScreenInit+0xe0>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <UI_HomeScreenInit+0xe0>)
 80058f6:	2228      	movs	r2, #40	; 0x28
 80058f8:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <UI_HomeScreenInit+0xe0>)
 80058fc:	2202      	movs	r2, #2
 80058fe:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8005900:	4b24      	ldr	r3, [pc, #144]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005902:	220e      	movs	r2, #14
 8005904:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005908:	2233      	movs	r2, #51	; 0x33
 800590a:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 800590c:	4b21      	ldr	r3, [pc, #132]	; (8005994 <UI_HomeScreenInit+0xe0>)
 800590e:	2200      	movs	r2, #0
 8005910:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005914:	2228      	movs	r2, #40	; 0x28
 8005916:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <UI_HomeScreenInit+0xe0>)
 800591a:	2202      	movs	r2, #2
 800591c:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005920:	2249      	movs	r2, #73	; 0x49
 8005922:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005926:	2226      	movs	r2, #38	; 0x26
 8005928:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <UI_HomeScreenInit+0xe0>)
 800592c:	2200      	movs	r2, #0
 800592e:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8005930:	4b18      	ldr	r3, [pc, #96]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005932:	2228      	movs	r2, #40	; 0x28
 8005934:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8005936:	4b17      	ldr	r3, [pc, #92]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005938:	2202      	movs	r2, #2
 800593a:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 800593c:	4b15      	ldr	r3, [pc, #84]	; (8005994 <UI_HomeScreenInit+0xe0>)
 800593e:	2249      	movs	r2, #73	; 0x49
 8005940:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8005942:	4b14      	ldr	r3, [pc, #80]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005944:	2233      	movs	r2, #51	; 0x33
 8005946:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <UI_HomeScreenInit+0xe0>)
 800594a:	2200      	movs	r2, #0
 800594c:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005950:	2228      	movs	r2, #40	; 0x28
 8005952:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <UI_HomeScreenInit+0xe0>)
 8005956:	2202      	movs	r2, #2
 8005958:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <UI_HomeScreenInit+0xe4>)
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <UI_HomeScreenInit+0xe4>)
 8005962:	2200      	movs	r2, #0
 8005964:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <UI_HomeScreenInit+0xe4>)
 8005968:	227f      	movs	r2, #127	; 0x7f
 800596a:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <UI_HomeScreenInit+0xe4>)
 800596e:	220a      	movs	r2, #10
 8005970:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <UI_HomeScreenInit+0xe4>)
 8005974:	2201      	movs	r2, #1
 8005976:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8005978:	4b07      	ldr	r3, [pc, #28]	; (8005998 <UI_HomeScreenInit+0xe4>)
 800597a:	2202      	movs	r2, #2
 800597c:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <UI_HomeScreenInit+0xe4>)
 8005980:	2202      	movs	r2, #2
 8005982:	719a      	strb	r2, [r3, #6]
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000ec8 	.word	0x20000ec8
 8005994:	20000ed0 	.word	0x20000ed0
 8005998:	20000eec 	.word	0x20000eec

0800599c <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	4603      	mov	r3, r0
 80059a4:	460a      	mov	r2, r1
 80059a6:	71fb      	strb	r3, [r7, #7]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 80059ac:	79bb      	ldrb	r3, [r7, #6]
 80059ae:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <UI_HomeScreenDisplay+0xa0>)
 80059b0:	4413      	add	r3, r2
 80059b2:	789b      	ldrb	r3, [r3, #2]
 80059b4:	4619      	mov	r1, r3
 80059b6:	79bb      	ldrb	r3, [r7, #6]
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <UI_HomeScreenDisplay+0xa4>)
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	f107 000c 	add.w	r0, r7, #12
 80059c0:	9200      	str	r2, [sp, #0]
 80059c2:	460a      	mov	r2, r1
 80059c4:	491f      	ldr	r1, [pc, #124]	; (8005a44 <UI_HomeScreenDisplay+0xa8>)
 80059c6:	f008 fc73 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&home_status, buff);
 80059ca:	f107 030c 	add.w	r3, r7, #12
 80059ce:	4619      	mov	r1, r3
 80059d0:	481d      	ldr	r0, [pc, #116]	; (8005a48 <UI_HomeScreenDisplay+0xac>)
 80059d2:	f7fb ff61 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
 80059da:	e027      	b.n	8005a2c <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d109      	bne.n	80059f8 <UI_HomeScreenDisplay+0x5c>
 80059e4:	4919      	ldr	r1, [pc, #100]	; (8005a4c <UI_HomeScreenDisplay+0xb0>)
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	440b      	add	r3, r1
 80059f0:	3302      	adds	r3, #2
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e008      	b.n	8005a0a <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 80059f8:	4914      	ldr	r1, [pc, #80]	; (8005a4c <UI_HomeScreenDisplay+0xb0>)
 80059fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	440b      	add	r3, r1
 8005a04:	3302      	adds	r3, #2
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <UI_HomeScreenDisplay+0xb0>)
 8005a14:	441a      	add	r2, r3
 8005a16:	490e      	ldr	r1, [pc, #56]	; (8005a50 <UI_HomeScreenDisplay+0xb4>)
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7fb ff39 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	3301      	adds	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	ddd4      	ble.n	80059dc <UI_HomeScreenDisplay+0x40>
	}
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	3728      	adds	r7, #40	; 0x28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000d34 	.word	0x20000d34
 8005a40:	20000ca9 	.word	0x20000ca9
 8005a44:	08010608 	.word	0x08010608
 8005a48:	20000eec 	.word	0x20000eec
 8005a4c:	20000ed0 	.word	0x20000ed0
 8005a50:	20000294 	.word	0x20000294

08005a54 <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8005a5a:	4b60      	ldr	r3, [pc, #384]	; (8005bdc <UI_HomeScreen+0x188>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8005a60:	4b5f      	ldr	r3, [pc, #380]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	79fa      	ldrb	r2, [r7, #7]
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff97 	bl	800599c <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8005a6e:	f002 fdc1 	bl	80085f4 <HAL_GetTick>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4a5b      	ldr	r2, [pc, #364]	; (8005be4 <UI_HomeScreen+0x190>)
 8005a76:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 8005a78:	f7ff fe1a 	bl	80056b0 <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8005a7c:	f002 fdba 	bl	80085f4 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <UI_HomeScreen+0x190>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b45      	cmp	r3, #69	; 0x45
 8005a8a:	f240 8097 	bls.w	8005bbc <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 8005a8e:	f7ff fe8d 	bl	80057ac <UI_ReadButton>
 8005a92:	4603      	mov	r3, r0
 8005a94:	461a      	mov	r2, r3
 8005a96:	4b54      	ldr	r3, [pc, #336]	; (8005be8 <UI_HomeScreen+0x194>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	f000 8090 	beq.w	8005bc0 <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 8005aa0:	f7ff fe84 	bl	80057ac <UI_ReadButton>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <UI_HomeScreen+0x194>)
 8005aaa:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 8005aac:	4b4e      	ldr	r3, [pc, #312]	; (8005be8 <UI_HomeScreen+0x194>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 8005ab8:	4b49      	ldr	r3, [pc, #292]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0cf      	beq.n	8005a60 <UI_HomeScreen+0xc>
 8005ac0:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b45      	ldr	r3, [pc, #276]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005aca:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005acc:	e7c8      	b.n	8005a60 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 8005ace:	4b46      	ldr	r3, [pc, #280]	; (8005be8 <UI_HomeScreen+0x194>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8005ada:	4b41      	ldr	r3, [pc, #260]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d806      	bhi.n	8005af0 <UI_HomeScreen+0x9c>
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005aec:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005aee:	e7b7      	b.n	8005a60 <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e06f      	b.n	8005bd4 <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8005af4:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <UI_HomeScreen+0x194>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b12      	cmp	r3, #18
 8005b04:	d803      	bhi.n	8005b0e <UI_HomeScreen+0xba>
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	71fb      	strb	r3, [r7, #7]
 8005b0c:	e7a8      	b.n	8005a60 <UI_HomeScreen+0xc>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8005b12:	e7a5      	b.n	8005a60 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <UI_HomeScreen+0x194>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <UI_HomeScreen+0xda>
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	71fb      	strb	r3, [r7, #7]
 8005b2c:	e798      	b.n	8005a60 <UI_HomeScreen+0xc>
 8005b2e:	2313      	movs	r3, #19
 8005b30:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8005b32:	e795      	b.n	8005a60 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 8005b34:	4b2c      	ldr	r3, [pc, #176]	; (8005be8 <UI_HomeScreen+0x194>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <UI_HomeScreen+0xf4>
			num_menu = 0;
 8005b40:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005b46:	e78b      	b.n	8005a60 <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d831      	bhi.n	8005bb4 <UI_HomeScreen+0x160>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UI_HomeScreen+0x104>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b7f 	.word	0x08005b7f
 8005b60:	08005b95 	.word	0x08005b95
 8005b64:	08005ba5 	.word	0x08005ba5
		case 0:
			if(bt & SW_OK_PRESS) {
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <UI_HomeScreen+0x194>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d027      	beq.n	8005bc4 <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <UI_HomeScreen+0x188>)
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	e02a      	b.n	8005bd4 <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <UI_HomeScreen+0x194>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01e      	beq.n	8005bc8 <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 8005b8a:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <UI_HomeScreen+0x188>)
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 8005b90:	2305      	movs	r3, #5
 8005b92:	e01f      	b.n	8005bd4 <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8005b94:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <UI_HomeScreen+0x194>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 8005ba0:	2306      	movs	r3, #6
 8005ba2:	e017      	b.n	8005bd4 <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <UI_HomeScreen+0x194>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <UI_HomeScreen+0x17c>
				return UI_SET;
 8005bb0:	2307      	movs	r3, #7
 8005bb2:	e00f      	b.n	8005bd4 <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <UI_HomeScreen+0x18c>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e75d      	b.n	8005a78 <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8005bbc:	bf00      	nop
 8005bbe:	e75b      	b.n	8005a78 <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 8005bc0:	bf00      	nop
 8005bc2:	e759      	b.n	8005a78 <UI_HomeScreen+0x24>
			break;
 8005bc4:	bf00      	nop
 8005bc6:	e757      	b.n	8005a78 <UI_HomeScreen+0x24>
			break;
 8005bc8:	bf00      	nop
 8005bca:	e755      	b.n	8005a78 <UI_HomeScreen+0x24>
			break;
 8005bcc:	bf00      	nop
 8005bce:	e753      	b.n	8005a78 <UI_HomeScreen+0x24>
			break;
 8005bd0:	bf00      	nop
	while(1) {
 8005bd2:	e751      	b.n	8005a78 <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000cac 	.word	0x20000cac
 8005be0:	20000fa3 	.word	0x20000fa3
 8005be4:	20000fa4 	.word	0x20000fa4
 8005be8:	20000fa8 	.word	0x20000fa8

08005bec <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 8005bf2:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 8005bf8:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005bfa:	220d      	movs	r2, #13
 8005bfc:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c00:	2278      	movs	r2, #120	; 0x78
 8005c02:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 8005c04:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c06:	220b      	movs	r2, #11
 8005c08:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 8005c0a:	4b3c      	ldr	r3, [pc, #240]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 8005c10:	4b3a      	ldr	r3, [pc, #232]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c12:	2202      	movs	r2, #2
 8005c14:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8005c16:	2301      	movs	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	e050      	b.n	8005cbe <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 8005c1c:	4b37      	ldr	r3, [pc, #220]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c1e:	7818      	ldrb	r0, [r3, #0]
 8005c20:	4936      	ldr	r1, [pc, #216]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1e5a      	subs	r2, r3, #1
 8005c34:	4931      	ldr	r1, [pc, #196]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c36:	4613      	mov	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3301      	adds	r3, #1
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	b2d8      	uxtb	r0, r3
 8005c4e:	492b      	ldr	r1, [pc, #172]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	440b      	add	r3, r1
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 8005c60:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c62:	78d8      	ldrb	r0, [r3, #3]
 8005c64:	4925      	ldr	r1, [pc, #148]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3303      	adds	r3, #3
 8005c72:	4602      	mov	r2, r0
 8005c74:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8005c76:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c78:	7918      	ldrb	r0, [r3, #4]
 8005c7a:	4920      	ldr	r1, [pc, #128]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	440b      	add	r3, r1
 8005c86:	3304      	adds	r3, #4
 8005c88:	4602      	mov	r2, r0
 8005c8a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 8005c8c:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c8e:	7898      	ldrb	r0, [r3, #2]
 8005c90:	491a      	ldr	r1, [pc, #104]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005ca4:	7998      	ldrb	r0, [r3, #6]
 8005ca6:	4915      	ldr	r1, [pc, #84]	; (8005cfc <UI_SettingDisplayInit+0x110>)
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	3306      	adds	r3, #6
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	ddab      	ble.n	8005c1c <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005cd2:	227f      	movs	r2, #127	; 0x7f
 8005cd4:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005cd8:	220a      	movs	r2, #10
 8005cda:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 8005ce2:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <UI_SettingDisplayInit+0x114>)
 8005cea:	2202      	movs	r2, #2
 8005cec:	719a      	strb	r2, [r3, #6]
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000ef4 	.word	0x20000ef4
 8005d00:	20000f10 	.word	0x20000f10

08005d04 <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <UI_SettingDisplay+0xb4>)
 8005d12:	f992 2000 	ldrsb.w	r2, [r2]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	dd06      	ble.n	8005d2a <UI_SettingDisplay+0x26>
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	3b03      	subs	r3, #3
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	b25a      	sxtb	r2, r3
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <UI_SettingDisplay+0xb4>)
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e009      	b.n	8005d3e <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	4a22      	ldr	r2, [pc, #136]	; (8005db8 <UI_SettingDisplay+0xb4>)
 8005d2e:	f992 2000 	ldrsb.w	r2, [r2]
 8005d32:	4293      	cmp	r3, r2
 8005d34:	da03      	bge.n	8005d3e <UI_SettingDisplay+0x3a>
 8005d36:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005d3a:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <UI_SettingDisplay+0xb4>)
 8005d3c:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e031      	b.n	8005da8 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8005d44:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <UI_SettingDisplay+0xb4>)
 8005d46:	f993 3000 	ldrsb.w	r3, [r3]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	441a      	add	r2, r3
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d109      	bne.n	8005d6a <UI_SettingDisplay+0x66>
 8005d56:	4919      	ldr	r1, [pc, #100]	; (8005dbc <UI_SettingDisplay+0xb8>)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	440b      	add	r3, r1
 8005d62:	3302      	adds	r3, #2
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e008      	b.n	8005d7c <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8005d6a:	4914      	ldr	r1, [pc, #80]	; (8005dbc <UI_SettingDisplay+0xb8>)
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	440b      	add	r3, r1
 8005d76:	3302      	adds	r3, #2
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <UI_SettingDisplay+0xb8>)
 8005d86:	441a      	add	r2, r3
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <UI_SettingDisplay+0xb4>)
 8005d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	440b      	add	r3, r1
 8005d94:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <UI_SettingDisplay+0xbc>)
 8005d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fb fd7b 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	ddca      	ble.n	8005d44 <UI_SettingDisplay+0x40>
	}
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000fa9 	.word	0x20000fa9
 8005dbc:	20000ef4 	.word	0x20000ef4
 8005dc0:	200002a4 	.word	0x200002a4

08005dc4 <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 8005dce:	494c      	ldr	r1, [pc, #304]	; (8005f00 <UI_Setting+0x13c>)
 8005dd0:	484c      	ldr	r0, [pc, #304]	; (8005f04 <UI_Setting+0x140>)
 8005dd2:	f7fb fd61 	bl	8001898 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 8005dd6:	4b4c      	ldr	r3, [pc, #304]	; (8005f08 <UI_Setting+0x144>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff ff92 	bl	8005d04 <UI_SettingDisplay>
	tick = HAL_GetTick();
 8005de0:	f002 fc08 	bl	80085f4 <HAL_GetTick>
 8005de4:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8005de6:	f002 fc05 	bl	80085f4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b45      	cmp	r3, #69	; 0x45
 8005df2:	d972      	bls.n	8005eda <UI_Setting+0x116>
		if(bt == UI_ReadButton()) continue;
 8005df4:	f7ff fcda 	bl	80057ac <UI_ReadButton>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d06d      	beq.n	8005ede <UI_Setting+0x11a>
		bt = UI_ReadButton();
 8005e02:	f7ff fcd3 	bl	80057ac <UI_ReadButton>
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00e      	beq.n	8005e32 <UI_Setting+0x6e>
			if(num_menu==7) num_menu = 0; else num_menu++;
 8005e14:	4b3c      	ldr	r3, [pc, #240]	; (8005f08 <UI_Setting+0x144>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b07      	cmp	r3, #7
 8005e1a:	d103      	bne.n	8005e24 <UI_Setting+0x60>
 8005e1c:	4b3a      	ldr	r3, [pc, #232]	; (8005f08 <UI_Setting+0x144>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e7d8      	b.n	8005dd6 <UI_Setting+0x12>
 8005e24:	4b38      	ldr	r3, [pc, #224]	; (8005f08 <UI_Setting+0x144>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b36      	ldr	r3, [pc, #216]	; (8005f08 <UI_Setting+0x144>)
 8005e2e:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8005e30:	e7d1      	b.n	8005dd6 <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00e      	beq.n	8005e5a <UI_Setting+0x96>
			if(num_menu==0) num_menu = 7; else num_menu--;
 8005e3c:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <UI_Setting+0x144>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <UI_Setting+0x88>
 8005e44:	4b30      	ldr	r3, [pc, #192]	; (8005f08 <UI_Setting+0x144>)
 8005e46:	2207      	movs	r2, #7
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e7c4      	b.n	8005dd6 <UI_Setting+0x12>
 8005e4c:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <UI_Setting+0x144>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b2c      	ldr	r3, [pc, #176]	; (8005f08 <UI_Setting+0x144>)
 8005e56:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8005e58:	e7bd      	b.n	8005dd6 <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <UI_Setting+0xaa>
			num_menu = 0;
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <UI_Setting+0x144>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e043      	b.n	8005ef6 <UI_Setting+0x132>
		}
		switch(num_menu) {
 8005e6e:	4b26      	ldr	r3, [pc, #152]	; (8005f08 <UI_Setting+0x144>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d8b7      	bhi.n	8005de6 <UI_Setting+0x22>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UI_Setting+0xb8>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005e95 	.word	0x08005e95
 8005e80:	08005ea3 	.word	0x08005ea3
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	08005ebf 	.word	0x08005ebf
 8005e8c:	08005de7 	.word	0x08005de7
 8005e90:	08005ecd 	.word	0x08005ecd
		case 0:
			if(bt & SW_OK_PRESS) {
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d021      	beq.n	8005ee2 <UI_Setting+0x11e>
				return UI_SET_ADC;
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	e029      	b.n	8005ef6 <UI_Setting+0x132>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01c      	beq.n	8005ee6 <UI_Setting+0x122>
				return UI_SET_CALIB;
 8005eac:	2309      	movs	r3, #9
 8005eae:	e022      	b.n	8005ef6 <UI_Setting+0x132>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d017      	beq.n	8005eea <UI_Setting+0x126>
				return UI_SET_CP;
 8005eba:	230a      	movs	r3, #10
 8005ebc:	e01b      	b.n	8005ef6 <UI_Setting+0x132>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d012      	beq.n	8005eee <UI_Setting+0x12a>
				return UI_SET_PID;
 8005ec8:	230b      	movs	r3, #11
 8005eca:	e014      	b.n	8005ef6 <UI_Setting+0x132>
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <UI_Setting+0x12e>
				return UI_SET_MEM;
 8005ed6:	230d      	movs	r3, #13
 8005ed8:	e00d      	b.n	8005ef6 <UI_Setting+0x132>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8005eda:	bf00      	nop
 8005edc:	e783      	b.n	8005de6 <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 8005ede:	bf00      	nop
 8005ee0:	e781      	b.n	8005de6 <UI_Setting+0x22>
			break;
 8005ee2:	bf00      	nop
 8005ee4:	e77f      	b.n	8005de6 <UI_Setting+0x22>
			break;
 8005ee6:	bf00      	nop
 8005ee8:	e77d      	b.n	8005de6 <UI_Setting+0x22>
			break;
 8005eea:	bf00      	nop
 8005eec:	e77b      	b.n	8005de6 <UI_Setting+0x22>
			break;
 8005eee:	bf00      	nop
 8005ef0:	e779      	b.n	8005de6 <UI_Setting+0x22>
			}
			break;
 8005ef2:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8005ef4:	e777      	b.n	8005de6 <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	08010690 	.word	0x08010690
 8005f04:	20000eec 	.word	0x20000eec
 8005f08:	20000faa 	.word	0x20000faa

08005f0c <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 8005f12:	4b49      	ldr	r3, [pc, #292]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f14:	2206      	movs	r2, #6
 8005f16:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 8005f18:	4b47      	ldr	r3, [pc, #284]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 8005f1e:	4b46      	ldr	r3, [pc, #280]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f20:	2236      	movs	r2, #54	; 0x36
 8005f22:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 8005f24:	4b44      	ldr	r3, [pc, #272]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f26:	220b      	movs	r2, #11
 8005f28:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 8005f2a:	4b43      	ldr	r3, [pc, #268]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 8005f30:	4b41      	ldr	r3, [pc, #260]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f32:	2202      	movs	r2, #2
 8005f34:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005f38:	4a3f      	ldr	r2, [pc, #252]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f3e:	6018      	str	r0, [r3, #0]
 8005f40:	3304      	adds	r3, #4
 8005f42:	8019      	strh	r1, [r3, #0]
 8005f44:	3302      	adds	r3, #2
 8005f46:	0c0a      	lsrs	r2, r1, #16
 8005f48:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 8005f4a:	4b3c      	ldr	r3, [pc, #240]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005f4c:	223e      	movs	r2, #62	; 0x3e
 8005f4e:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 8005f50:	4b3a      	ldr	r3, [pc, #232]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005f52:	223a      	movs	r2, #58	; 0x3a
 8005f54:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 8005f56:	4b39      	ldr	r3, [pc, #228]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005f58:	2202      	movs	r2, #2
 8005f5a:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	e04c      	b.n	8005ffc <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 8005f62:	4935      	ldr	r1, [pc, #212]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	4a32      	ldr	r2, [pc, #200]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f70:	6810      	ldr	r0, [r2, #0]
 8005f72:	6018      	str	r0, [r3, #0]
 8005f74:	8891      	ldrh	r1, [r2, #4]
 8005f76:	7992      	ldrb	r2, [r2, #6]
 8005f78:	8099      	strh	r1, [r3, #4]
 8005f7a:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1e5a      	subs	r2, r3, #1
 8005f80:	492d      	ldr	r1, [pc, #180]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f90:	791b      	ldrb	r3, [r3, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	b2d8      	uxtb	r0, r3
 8005f9a:	4927      	ldr	r1, [pc, #156]	; (8006038 <UI_PlanSetDisplayInit+0x12c>)
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	4602      	mov	r2, r0
 8005faa:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 8005fac:	4923      	ldr	r1, [pc, #140]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	4a20      	ldr	r2, [pc, #128]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005fba:	6810      	ldr	r0, [r2, #0]
 8005fbc:	6018      	str	r0, [r3, #0]
 8005fbe:	8891      	ldrh	r1, [r2, #4]
 8005fc0:	7992      	ldrb	r2, [r2, #6]
 8005fc2:	8099      	strh	r1, [r3, #4]
 8005fc4:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	1e5a      	subs	r2, r3, #1
 8005fca:	491c      	ldr	r1, [pc, #112]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005fcc:	4613      	mov	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	4b18      	ldr	r3, [pc, #96]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	4413      	add	r3, r2
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b2d8      	uxtb	r0, r3
 8005fe4:	4915      	ldr	r1, [pc, #84]	; (800603c <UI_PlanSetDisplayInit+0x130>)
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	ddaf      	ble.n	8005f62 <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 800600a:	2200      	movs	r2, #0
 800600c:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 8006010:	227f      	movs	r2, #127	; 0x7f
 8006012:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 8006016:	220d      	movs	r2, #13
 8006018:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 800601c:	2201      	movs	r2, #1
 800601e:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 8006022:	2200      	movs	r2, #0
 8006024:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <UI_PlanSetDisplayInit+0x134>)
 8006028:	2202      	movs	r2, #2
 800602a:	719a      	strb	r2, [r3, #6]
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20000f18 	.word	0x20000f18
 800603c:	20000f34 	.word	0x20000f34
 8006040:	20000f50 	.word	0x20000f50

08006044 <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af02      	add	r7, sp, #8
 800604a:	4603      	mov	r3, r0
 800604c:	6039      	str	r1, [r7, #0]
 800604e:	71fb      	strb	r3, [r7, #7]
 8006050:	4613      	mov	r3, r2
 8006052:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 8006054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 8006068:	79ba      	ldrb	r2, [r7, #6]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	4bc3      	ldr	r3, [pc, #780]	; (8006380 <UI_PlanSetDisplay+0x33c>)
 8006072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006076:	f107 000c 	add.w	r0, r7, #12
 800607a:	49c2      	ldr	r1, [pc, #776]	; (8006384 <UI_PlanSetDisplay+0x340>)
 800607c:	f008 f918 	bl	800e2b0 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 8006080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <UI_PlanSetDisplay+0x4c>
 8006088:	4bbf      	ldr	r3, [pc, #764]	; (8006388 <UI_PlanSetDisplay+0x344>)
 800608a:	2201      	movs	r2, #1
 800608c:	709a      	strb	r2, [r3, #2]
 800608e:	e002      	b.n	8006096 <UI_PlanSetDisplay+0x52>
 8006090:	4bbd      	ldr	r3, [pc, #756]	; (8006388 <UI_PlanSetDisplay+0x344>)
 8006092:	2200      	movs	r2, #0
 8006094:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	4619      	mov	r1, r3
 800609c:	48ba      	ldr	r0, [pc, #744]	; (8006388 <UI_PlanSetDisplay+0x344>)
 800609e:	f7fb fbfb 	bl	8001898 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 80060a2:	2300      	movs	r3, #0
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	230e      	movs	r3, #14
 80060a8:	227f      	movs	r2, #127	; 0x7f
 80060aa:	210e      	movs	r1, #14
 80060ac:	2000      	movs	r0, #0
 80060ae:	f7fb fa5f 	bl	8001570 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 80060b2:	230d      	movs	r3, #13
 80060b4:	227f      	movs	r2, #127	; 0x7f
 80060b6:	210d      	movs	r1, #13
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7fb fcbf 	bl	8001a3c <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 80060be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d101      	bne.n	80060cc <UI_PlanSetDisplay+0x88>
 80060c8:	2300      	movs	r3, #0
 80060ca:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 80060cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d0:	4aae      	ldr	r2, [pc, #696]	; (800638c <UI_PlanSetDisplay+0x348>)
 80060d2:	f992 2000 	ldrsb.w	r2, [r2]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	2b03      	cmp	r3, #3
 80060da:	dd06      	ble.n	80060ea <UI_PlanSetDisplay+0xa6>
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	3b03      	subs	r3, #3
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	b25a      	sxtb	r2, r3
 80060e4:	4ba9      	ldr	r3, [pc, #676]	; (800638c <UI_PlanSetDisplay+0x348>)
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e009      	b.n	80060fe <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 80060ea:	4ba8      	ldr	r3, [pc, #672]	; (800638c <UI_PlanSetDisplay+0x348>)
 80060ec:	f993 3000 	ldrsb.w	r3, [r3]
 80060f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	da02      	bge.n	80060fe <UI_PlanSetDisplay+0xba>
 80060f8:	4aa4      	ldr	r2, [pc, #656]	; (800638c <UI_PlanSetDisplay+0x348>)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 80060fe:	2300      	movs	r3, #0
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e231      	b.n	8006568 <UI_PlanSetDisplay+0x524>
		if(i + first_list == num && !temp) {
 8006104:	4ba1      	ldr	r3, [pc, #644]	; (800638c <UI_PlanSetDisplay+0x348>)
 8006106:	f993 3000 	ldrsb.w	r3, [r3]
 800610a:	461a      	mov	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	441a      	add	r2, r3
 8006110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006114:	429a      	cmp	r2, r3
 8006116:	d116      	bne.n	8006146 <UI_PlanSetDisplay+0x102>
 8006118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800611c:	2b00      	cmp	r3, #0
 800611e:	d112      	bne.n	8006146 <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 8006120:	499b      	ldr	r1, [pc, #620]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	4613      	mov	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	440b      	add	r3, r1
 800612c:	3302      	adds	r3, #2
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 8006132:	4998      	ldr	r1, [pc, #608]	; (8006394 <UI_PlanSetDisplay+0x350>)
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	4613      	mov	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	440b      	add	r3, r1
 800613e:	3302      	adds	r3, #2
 8006140:	2201      	movs	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e011      	b.n	800616a <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 8006146:	4992      	ldr	r1, [pc, #584]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	440b      	add	r3, r1
 8006152:	3302      	adds	r3, #2
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 8006158:	498e      	ldr	r1, [pc, #568]	; (8006394 <UI_PlanSetDisplay+0x350>)
 800615a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	440b      	add	r3, r1
 8006164:	3302      	adds	r3, #2
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 800616a:	4b88      	ldr	r3, [pc, #544]	; (800638c <UI_PlanSetDisplay+0x348>)
 800616c:	f993 3000 	ldrsb.w	r3, [r3]
 8006170:	461a      	mov	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	4413      	add	r3, r2
 8006176:	2b0c      	cmp	r3, #12
 8006178:	f200 81f3 	bhi.w	8006562 <UI_PlanSetDisplay+0x51e>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <UI_PlanSetDisplay+0x140>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061b9 	.word	0x080061b9
 8006188:	080061f9 	.word	0x080061f9
 800618c:	0800622f 	.word	0x0800622f
 8006190:	0800627b 	.word	0x0800627b
 8006194:	080062bb 	.word	0x080062bb
 8006198:	080062fd 	.word	0x080062fd
 800619c:	0800633f 	.word	0x0800633f
 80061a0:	080063bd 	.word	0x080063bd
 80061a4:	080063fd 	.word	0x080063fd
 80061a8:	0800643d 	.word	0x0800643d
 80061ac:	0800649b 	.word	0x0800649b
 80061b0:	0800650d 	.word	0x0800650d
 80061b4:	08006537 	.word	0x08006537
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	4a73      	ldr	r2, [pc, #460]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 80061c2:	4413      	add	r3, r2
 80061c4:	4974      	ldr	r1, [pc, #464]	; (8006398 <UI_PlanSetDisplay+0x354>)
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fb fb66 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f107 030c 	add.w	r3, r7, #12
 80061d6:	4971      	ldr	r1, [pc, #452]	; (800639c <UI_PlanSetDisplay+0x358>)
 80061d8:	4618      	mov	r0, r3
 80061da:	f008 f869 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	4613      	mov	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	4a6b      	ldr	r2, [pc, #428]	; (8006394 <UI_PlanSetDisplay+0x350>)
 80061e8:	4413      	add	r3, r2
 80061ea:	f107 020c 	add.w	r2, r7, #12
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fb fb51 	bl	8001898 <DISP_DisplayText>
			break;
 80061f6:	e1b4      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	4a63      	ldr	r2, [pc, #396]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006202:	4413      	add	r3, r2
 8006204:	4966      	ldr	r1, [pc, #408]	; (80063a0 <UI_PlanSetDisplay+0x35c>)
 8006206:	4618      	mov	r0, r3
 8006208:	f7fb fb46 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 800620c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620e:	4613      	mov	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	4a5f      	ldr	r2, [pc, #380]	; (8006394 <UI_PlanSetDisplay+0x350>)
 8006216:	441a      	add	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	789b      	ldrb	r3, [r3, #2]
 800621c:	4619      	mov	r1, r3
 800621e:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <UI_PlanSetDisplay+0x360>)
 8006220:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fb fb36 	bl	8001898 <DISP_DisplayText>
			break;
 800622c:	e199      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 2:
			DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 800622e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006230:	4613      	mov	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	4a56      	ldr	r2, [pc, #344]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006238:	441a      	add	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	4619      	mov	r1, r3
 8006240:	4b59      	ldr	r3, [pc, #356]	; (80063a8 <UI_PlanSetDisplay+0x364>)
 8006242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fb fb25 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->act_value);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	78db      	ldrb	r3, [r3, #3]
 8006252:	461a      	mov	r2, r3
 8006254:	f107 030c 	add.w	r3, r7, #12
 8006258:	4950      	ldr	r1, [pc, #320]	; (800639c <UI_PlanSetDisplay+0x358>)
 800625a:	4618      	mov	r0, r3
 800625c:	f008 f828 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	4613      	mov	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	4a4a      	ldr	r2, [pc, #296]	; (8006394 <UI_PlanSetDisplay+0x350>)
 800626a:	4413      	add	r3, r2
 800626c:	f107 020c 	add.w	r2, r7, #12
 8006270:	4611      	mov	r1, r2
 8006272:	4618      	mov	r0, r3
 8006274:	f7fb fb10 	bl	8001898 <DISP_DisplayText>
			break;
 8006278:	e173      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	4a43      	ldr	r2, [pc, #268]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006284:	4413      	add	r3, r2
 8006286:	4949      	ldr	r1, [pc, #292]	; (80063ac <UI_PlanSetDisplay+0x368>)
 8006288:	4618      	mov	r0, r3
 800628a:	f7fb fb05 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	461a      	mov	r2, r3
 8006294:	f107 030c 	add.w	r3, r7, #12
 8006298:	4940      	ldr	r1, [pc, #256]	; (800639c <UI_PlanSetDisplay+0x358>)
 800629a:	4618      	mov	r0, r3
 800629c:	f008 f808 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80062a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	4a3a      	ldr	r2, [pc, #232]	; (8006394 <UI_PlanSetDisplay+0x350>)
 80062aa:	4413      	add	r3, r2
 80062ac:	f107 020c 	add.w	r2, r7, #12
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fb faf0 	bl	8001898 <DISP_DisplayText>
			break;
 80062b8:	e153      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 80062ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	4a33      	ldr	r2, [pc, #204]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 80062c4:	4413      	add	r3, r2
 80062c6:	493a      	ldr	r1, [pc, #232]	; (80063b0 <UI_PlanSetDisplay+0x36c>)
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fb fae5 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	4930      	ldr	r1, [pc, #192]	; (800639c <UI_PlanSetDisplay+0x358>)
 80062dc:	4618      	mov	r0, r3
 80062de:	f007 ffe7 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <UI_PlanSetDisplay+0x350>)
 80062ec:	4413      	add	r3, r2
 80062ee:	f107 020c 	add.w	r2, r7, #12
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb facf 	bl	8001898 <DISP_DisplayText>
			break;
 80062fa:	e132      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	4613      	mov	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	4a22      	ldr	r2, [pc, #136]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006306:	4413      	add	r3, r2
 8006308:	492a      	ldr	r1, [pc, #168]	; (80063b4 <UI_PlanSetDisplay+0x370>)
 800630a:	4618      	mov	r0, r3
 800630c:	f7fb fac4 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006316:	461a      	mov	r2, r3
 8006318:	f107 030c 	add.w	r3, r7, #12
 800631c:	491f      	ldr	r1, [pc, #124]	; (800639c <UI_PlanSetDisplay+0x358>)
 800631e:	4618      	mov	r0, r3
 8006320:	f007 ffc6 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	4a19      	ldr	r2, [pc, #100]	; (8006394 <UI_PlanSetDisplay+0x350>)
 800632e:	4413      	add	r3, r2
 8006330:	f107 020c 	add.w	r2, r7, #12
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f7fb faae 	bl	8001898 <DISP_DisplayText>
			break;
 800633c:	e111      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	4a12      	ldr	r2, [pc, #72]	; (8006390 <UI_PlanSetDisplay+0x34c>)
 8006348:	4413      	add	r3, r2
 800634a:	491b      	ldr	r1, [pc, #108]	; (80063b8 <UI_PlanSetDisplay+0x374>)
 800634c:	4618      	mov	r0, r3
 800634e:	f7fb faa3 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	79db      	ldrb	r3, [r3, #7]
 8006356:	461a      	mov	r2, r3
 8006358:	f107 030c 	add.w	r3, r7, #12
 800635c:	490f      	ldr	r1, [pc, #60]	; (800639c <UI_PlanSetDisplay+0x358>)
 800635e:	4618      	mov	r0, r3
 8006360:	f007 ffa6 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006366:	4613      	mov	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	4a09      	ldr	r2, [pc, #36]	; (8006394 <UI_PlanSetDisplay+0x350>)
 800636e:	4413      	add	r3, r2
 8006370:	f107 020c 	add.w	r2, r7, #12
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7fb fa8e 	bl	8001898 <DISP_DisplayText>
			break;
 800637c:	e0f1      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
 800637e:	bf00      	nop
 8006380:	200002c4 	.word	0x200002c4
 8006384:	08010724 	.word	0x08010724
 8006388:	20000f50 	.word	0x20000f50
 800638c:	20000fab 	.word	0x20000fab
 8006390:	20000f18 	.word	0x20000f18
 8006394:	20000f34 	.word	0x20000f34
 8006398:	08010730 	.word	0x08010730
 800639c:	08010738 	.word	0x08010738
 80063a0:	0801073c 	.word	0x0801073c
 80063a4:	200002f0 	.word	0x200002f0
 80063a8:	200002fc 	.word	0x200002fc
 80063ac:	08010744 	.word	0x08010744
 80063b0:	0801074c 	.word	0x0801074c
 80063b4:	08010754 	.word	0x08010754
 80063b8:	0801075c 	.word	0x0801075c
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	4a6d      	ldr	r2, [pc, #436]	; (800657c <UI_PlanSetDisplay+0x538>)
 80063c6:	4413      	add	r3, r2
 80063c8:	496d      	ldr	r1, [pc, #436]	; (8006580 <UI_PlanSetDisplay+0x53c>)
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fb fa64 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	7a1b      	ldrb	r3, [r3, #8]
 80063d4:	461a      	mov	r2, r3
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	496a      	ldr	r1, [pc, #424]	; (8006584 <UI_PlanSetDisplay+0x540>)
 80063dc:	4618      	mov	r0, r3
 80063de:	f007 ff67 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	4a67      	ldr	r2, [pc, #412]	; (8006588 <UI_PlanSetDisplay+0x544>)
 80063ec:	4413      	add	r3, r2
 80063ee:	f107 020c 	add.w	r2, r7, #12
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fb fa4f 	bl	8001898 <DISP_DisplayText>
			break;
 80063fa:	e0b2      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <UI_PlanSetDisplay+0x538>)
 8006406:	4413      	add	r3, r2
 8006408:	4960      	ldr	r1, [pc, #384]	; (800658c <UI_PlanSetDisplay+0x548>)
 800640a:	4618      	mov	r0, r3
 800640c:	f7fb fa44 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	7a5b      	ldrb	r3, [r3, #9]
 8006414:	461a      	mov	r2, r3
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	495a      	ldr	r1, [pc, #360]	; (8006584 <UI_PlanSetDisplay+0x540>)
 800641c:	4618      	mov	r0, r3
 800641e:	f007 ff47 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	4a57      	ldr	r2, [pc, #348]	; (8006588 <UI_PlanSetDisplay+0x544>)
 800642c:	4413      	add	r3, r2
 800642e:	f107 020c 	add.w	r2, r7, #12
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f7fb fa2f 	bl	8001898 <DISP_DisplayText>
			break;
 800643a:	e092      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 800643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643e:	4613      	mov	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	1a9b      	subs	r3, r3, r2
 8006444:	4a4d      	ldr	r2, [pc, #308]	; (800657c <UI_PlanSetDisplay+0x538>)
 8006446:	4413      	add	r3, r2
 8006448:	4951      	ldr	r1, [pc, #324]	; (8006590 <UI_PlanSetDisplay+0x54c>)
 800644a:	4618      	mov	r0, r3
 800644c:	f7fb fa24 	bl	8001898 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	7a9b      	ldrb	r3, [r3, #10]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <UI_PlanSetDisplay+0x42a>
				DISP_DisplayText(&planset_list_value[i], "Default");
 8006458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645a:	4613      	mov	r3, r2
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	4a49      	ldr	r2, [pc, #292]	; (8006588 <UI_PlanSetDisplay+0x544>)
 8006462:	4413      	add	r3, r2
 8006464:	494b      	ldr	r1, [pc, #300]	; (8006594 <UI_PlanSetDisplay+0x550>)
 8006466:	4618      	mov	r0, r3
 8006468:	f7fb fa16 	bl	8001898 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 800646c:	e079      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
				sprintf(buff, "%i", plan->unit_speed);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	7a9b      	ldrb	r3, [r3, #10]
 8006472:	461a      	mov	r2, r3
 8006474:	f107 030c 	add.w	r3, r7, #12
 8006478:	4942      	ldr	r1, [pc, #264]	; (8006584 <UI_PlanSetDisplay+0x540>)
 800647a:	4618      	mov	r0, r3
 800647c:	f007 ff18 	bl	800e2b0 <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	4613      	mov	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	4a3f      	ldr	r2, [pc, #252]	; (8006588 <UI_PlanSetDisplay+0x544>)
 800648a:	4413      	add	r3, r2
 800648c:	f107 020c 	add.w	r2, r7, #12
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fb fa00 	bl	8001898 <DISP_DisplayText>
			break;
 8006498:	e063      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 800649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649c:	4613      	mov	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	4a36      	ldr	r2, [pc, #216]	; (800657c <UI_PlanSetDisplay+0x538>)
 80064a4:	4413      	add	r3, r2
 80064a6:	493c      	ldr	r1, [pc, #240]	; (8006598 <UI_PlanSetDisplay+0x554>)
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fb f9f5 	bl	8001898 <DISP_DisplayText>
			switch(GET_LINE_COLOR_STAT(plan->status)) {
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	7adb      	ldrb	r3, [r3, #11]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d01c      	beq.n	80064f4 <UI_PlanSetDisplay+0x4b0>
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	dc50      	bgt.n	8006560 <UI_PlanSetDisplay+0x51c>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <UI_PlanSetDisplay+0x484>
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d00b      	beq.n	80064de <UI_PlanSetDisplay+0x49a>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 80064c6:	e04b      	b.n	8006560 <UI_PlanSetDisplay+0x51c>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	4a2d      	ldr	r2, [pc, #180]	; (8006588 <UI_PlanSetDisplay+0x544>)
 80064d2:	4413      	add	r3, r2
 80064d4:	4931      	ldr	r1, [pc, #196]	; (800659c <UI_PlanSetDisplay+0x558>)
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fb f9de 	bl	8001898 <DISP_DisplayText>
 80064dc:	e015      	b.n	800650a <UI_PlanSetDisplay+0x4c6>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	4613      	mov	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	4a28      	ldr	r2, [pc, #160]	; (8006588 <UI_PlanSetDisplay+0x544>)
 80064e8:	4413      	add	r3, r2
 80064ea:	492d      	ldr	r1, [pc, #180]	; (80065a0 <UI_PlanSetDisplay+0x55c>)
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fb f9d3 	bl	8001898 <DISP_DisplayText>
 80064f2:	e00a      	b.n	800650a <UI_PlanSetDisplay+0x4c6>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	4613      	mov	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	4a22      	ldr	r2, [pc, #136]	; (8006588 <UI_PlanSetDisplay+0x544>)
 80064fe:	4413      	add	r3, r2
 8006500:	4928      	ldr	r1, [pc, #160]	; (80065a4 <UI_PlanSetDisplay+0x560>)
 8006502:	4618      	mov	r0, r3
 8006504:	f7fb f9c8 	bl	8001898 <DISP_DisplayText>
 8006508:	bf00      	nop
			break;
 800650a:	e029      	b.n	8006560 <UI_PlanSetDisplay+0x51c>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 800650c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650e:	4613      	mov	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <UI_PlanSetDisplay+0x538>)
 8006516:	4413      	add	r3, r2
 8006518:	4923      	ldr	r1, [pc, #140]	; (80065a8 <UI_PlanSetDisplay+0x564>)
 800651a:	4618      	mov	r0, r3
 800651c:	f7fb f9bc 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	4a17      	ldr	r2, [pc, #92]	; (8006588 <UI_PlanSetDisplay+0x544>)
 800652a:	4413      	add	r3, r2
 800652c:	491f      	ldr	r1, [pc, #124]	; (80065ac <UI_PlanSetDisplay+0x568>)
 800652e:	4618      	mov	r0, r3
 8006530:	f7fb f9b2 	bl	8001898 <DISP_DisplayText>
			break;
 8006534:	e015      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8006536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	4a0f      	ldr	r2, [pc, #60]	; (800657c <UI_PlanSetDisplay+0x538>)
 8006540:	4413      	add	r3, r2
 8006542:	491b      	ldr	r1, [pc, #108]	; (80065b0 <UI_PlanSetDisplay+0x56c>)
 8006544:	4618      	mov	r0, r3
 8006546:	f7fb f9a7 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 800654a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	4a0d      	ldr	r2, [pc, #52]	; (8006588 <UI_PlanSetDisplay+0x544>)
 8006554:	4413      	add	r3, r2
 8006556:	4915      	ldr	r1, [pc, #84]	; (80065ac <UI_PlanSetDisplay+0x568>)
 8006558:	4618      	mov	r0, r3
 800655a:	f7fb f99d 	bl	8001898 <DISP_DisplayText>
			break;
 800655e:	e000      	b.n	8006562 <UI_PlanSetDisplay+0x51e>
			break;
 8006560:	bf00      	nop
	for(int i=0; i<4; i++) {
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	3301      	adds	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2b03      	cmp	r3, #3
 800656c:	f77f adca 	ble.w	8006104 <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3728      	adds	r7, #40	; 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000f18 	.word	0x20000f18
 8006580:	08010764 	.word	0x08010764
 8006584:	08010738 	.word	0x08010738
 8006588:	20000f34 	.word	0x20000f34
 800658c:	08010770 	.word	0x08010770
 8006590:	08010778 	.word	0x08010778
 8006594:	08010780 	.word	0x08010780
 8006598:	08010788 	.word	0x08010788
 800659c:	08010790 	.word	0x08010790
 80065a0:	08010798 	.word	0x08010798
 80065a4:	080107a0 	.word	0x080107a0
 80065a8:	080107a8 	.word	0x080107a8
 80065ac:	080107b0 	.word	0x080107b0
 80065b0:	080107b4 	.word	0x080107b4

080065b4 <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	; 0x30
 80065b8:	af00      	add	r7, sp, #0
	uint8_t num_index = plan.checkpoint[num_checkpoint];
 80065ba:	4bc3      	ldr	r3, [pc, #780]	; (80068c8 <UI_PlanSet+0x314>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	4bc2      	ldr	r3, [pc, #776]	; (80068cc <UI_PlanSet+0x318>)
 80065c2:	4413      	add	r3, r2
 80065c4:	789b      	ldrb	r3, [r3, #2]
 80065c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Action_typedef plan_set = GetAction(num_index);
 80065ca:	f107 0314 	add.w	r3, r7, #20
 80065ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe f823 	bl	8004620 <GetAction>
	int8_t num = -1;
 80065da:	23ff      	movs	r3, #255	; 0xff
 80065dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t change_status = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 80065ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80065f0:	f107 0114 	add.w	r1, r7, #20
 80065f4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fd23 	bl	8006044 <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 80065fe:	f001 fff9 	bl	80085f4 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8006604:	f001 fff6 	bl	80085f4 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006612:	2a01      	cmp	r2, #1
 8006614:	d101      	bne.n	800661a <UI_PlanSet+0x66>
 8006616:	2219      	movs	r2, #25
 8006618:	e000      	b.n	800661c <UI_PlanSet+0x68>
 800661a:	2246      	movs	r2, #70	; 0x46
 800661c:	429a      	cmp	r2, r3
 800661e:	f200 836e 	bhi.w	8006cfe <UI_PlanSet+0x74a>

		bt2 = UI_ReadButton();
 8006622:	f7ff f8c3 	bl	80057ac <UI_ReadButton>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 800662c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006634:	429a      	cmp	r2, r3
 8006636:	d104      	bne.n	8006642 <UI_PlanSet+0x8e>
 8006638:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8360 	beq.w	8006d02 <UI_PlanSet+0x74e>
		bt = bt2;
 8006642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006646:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 800664a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <UI_PlanSet+0xac>
			num = -1;
 8006656:	23ff      	movs	r3, #255	; 0xff
 8006658:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return UI_HOMESCREEN;
 800665c:	2302      	movs	r3, #2
 800665e:	e36a      	b.n	8006d36 <UI_PlanSet+0x782>
		}
		if(num != -1) {
 8006660:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d03e      	beq.n	80066e8 <UI_PlanSet+0x134>
			if(bt & SW_UP_PRESS) {
 800666a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d012      	beq.n	800669c <UI_PlanSet+0xe8>
				if(num != 0) num--; else num=12;
 8006676:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <UI_PlanSet+0xda>
 800667e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006682:	b2db      	uxtb	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800668c:	e002      	b.n	8006694 <UI_PlanSet+0xe0>
 800668e:	230c      	movs	r3, #12
 8006690:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 800669a:	e7a7      	b.n	80065ec <UI_PlanSet+0x38>
			}
			else if(bt & SW_DW_PRESS) {
 800669c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <UI_PlanSet+0x11a>
				if(num != 12) num++; else num=0;
 80066a8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	d007      	beq.n	80066c0 <UI_PlanSet+0x10c>
 80066b0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80066be:	e002      	b.n	80066c6 <UI_PlanSet+0x112>
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 80066cc:	e78e      	b.n	80065ec <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 80066ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <UI_PlanSet+0x134>
				bt_status = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				num = -1;
 80066e0:	23ff      	movs	r3, #255	; 0xff
 80066e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				goto plan_set;
 80066e6:	e781      	b.n	80065ec <UI_PlanSet+0x38>
			}
		}
		switch(num) {
 80066e8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80066ec:	3301      	adds	r3, #1
 80066ee:	2b0b      	cmp	r3, #11
 80066f0:	d888      	bhi.n	8006604 <UI_PlanSet+0x50>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UI_PlanSet+0x144>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006729 	.word	0x08006729
 80066fc:	08006899 	.word	0x08006899
 8006700:	08006905 	.word	0x08006905
 8006704:	08006963 	.word	0x08006963
 8006708:	080069c1 	.word	0x080069c1
 800670c:	08006a1f 	.word	0x08006a1f
 8006710:	08006a8f 	.word	0x08006a8f
 8006714:	08006aff 	.word	0x08006aff
 8006718:	08006b5d 	.word	0x08006b5d
 800671c:	08006bbb 	.word	0x08006bbb
 8006720:	08006c19 	.word	0x08006c19
 8006724:	08006c75 	.word	0x08006c75
		case -1:
			if(bt & SW_DW_PRESS) {
 8006728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <UI_PlanSet+0x1a2>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8006734:	7d3b      	ldrb	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <UI_PlanSet+0x190>
 800673a:	7d3b      	ldrb	r3, [r7, #20]
 800673c:	3b01      	subs	r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	753b      	strb	r3, [r7, #20]
 8006742:	e001      	b.n	8006748 <UI_PlanSet+0x194>
 8006744:	230a      	movs	r3, #10
 8006746:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800674e:	2301      	movs	r3, #1
 8006750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006754:	e74a      	b.n	80065ec <UI_PlanSet+0x38>
			}
			else if(bt & SW_UP_PRESS) {
 8006756:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d010      	beq.n	8006784 <UI_PlanSet+0x1d0>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8006762:	7d3b      	ldrb	r3, [r7, #20]
 8006764:	2b0a      	cmp	r3, #10
 8006766:	d004      	beq.n	8006772 <UI_PlanSet+0x1be>
 8006768:	7d3b      	ldrb	r3, [r7, #20]
 800676a:	3301      	adds	r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	753b      	strb	r3, [r7, #20]
 8006770:	e001      	b.n	8006776 <UI_PlanSet+0x1c2>
 8006772:	2300      	movs	r3, #0
 8006774:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006782:	e733      	b.n	80065ec <UI_PlanSet+0x38>
			}
			else if(bt & SW_OK_PRESS) {
 8006784:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <UI_PlanSet+0x1ea>
				num = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 800679c:	e726      	b.n	80065ec <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 800679e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d012      	beq.n	80067d0 <UI_PlanSet+0x21c>
				if(change_status == 1) SetAction(plan_set, num_index);
 80067aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d106      	bne.n	80067c0 <UI_PlanSet+0x20c>
 80067b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067b6:	f107 0214 	add.w	r2, r7, #20
 80067ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80067bc:	f7fd ff72 	bl	80046a4 <SetAction>
				num = -1;
 80067c0:	23ff      	movs	r3, #255	; 0xff
 80067c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				return UI_HOMESCREEN;
 80067cc:	2302      	movs	r3, #2
 80067ce:	e2b2      	b.n	8006d36 <UI_PlanSet+0x782>
			}
			else if(bt2 & SW_RG_PRESS) {
 80067d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02b      	beq.n	8006834 <UI_PlanSet+0x280>
				if(change_status == 1) SetAction(plan_set, num_index);
 80067dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d106      	bne.n	80067f2 <UI_PlanSet+0x23e>
 80067e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e8:	f107 0214 	add.w	r2, r7, #20
 80067ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80067ee:	f7fd ff59 	bl	80046a4 <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 80067f2:	4b37      	ldr	r3, [pc, #220]	; (80068d0 <UI_PlanSet+0x31c>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d005      	beq.n	800680a <UI_PlanSet+0x256>
 80067fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006802:	3301      	adds	r3, #1
 8006804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006808:	e002      	b.n	8006810 <UI_PlanSet+0x25c>
 800680a:	2300      	movs	r3, #0
 800680c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8006810:	463b      	mov	r3, r7
 8006812:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006816:	4611      	mov	r1, r2
 8006818:	4618      	mov	r0, r3
 800681a:	f7fd ff01 	bl	8004620 <GetAction>
 800681e:	f107 0314 	add.w	r3, r7, #20
 8006822:	463a      	mov	r2, r7
 8006824:	6810      	ldr	r0, [r2, #0]
 8006826:	6851      	ldr	r1, [r2, #4]
 8006828:	6892      	ldr	r2, [r2, #8]
 800682a:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006832:	e6db      	b.n	80065ec <UI_PlanSet+0x38>
			}
			else if(bt2 & SW_LF_PRESS) {
 8006834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8262 	beq.w	8006d06 <UI_PlanSet+0x752>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006846:	2b01      	cmp	r3, #1
 8006848:	d106      	bne.n	8006858 <UI_PlanSet+0x2a4>
 800684a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800684e:	f107 0214 	add.w	r2, r7, #20
 8006852:	ca07      	ldmia	r2, {r0, r1, r2}
 8006854:	f7fd ff26 	bl	80046a4 <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8006858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <UI_PlanSet+0x2b8>
 8006860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006864:	3b01      	subs	r3, #1
 8006866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800686a:	e003      	b.n	8006874 <UI_PlanSet+0x2c0>
 800686c:	4b18      	ldr	r3, [pc, #96]	; (80068d0 <UI_PlanSet+0x31c>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8006874:	463b      	mov	r3, r7
 8006876:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd fecf 	bl	8004620 <GetAction>
 8006882:	f107 0314 	add.w	r3, r7, #20
 8006886:	463a      	mov	r2, r7
 8006888:	6810      	ldr	r0, [r2, #0]
 800688a:	6851      	ldr	r1, [r2, #4]
 800688c:	6892      	ldr	r2, [r2, #8]
 800688e:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006896:	e6a9      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8006898:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <UI_PlanSet+0x320>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 80068a4:	7d7b      	ldrb	r3, [r7, #21]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <UI_PlanSet+0x300>
 80068aa:	7d7b      	ldrb	r3, [r7, #21]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	757b      	strb	r3, [r7, #21]
 80068b2:	e001      	b.n	80068b8 <UI_PlanSet+0x304>
 80068b4:	230e      	movs	r3, #14
 80068b6:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80068c4:	e692      	b.n	80065ec <UI_PlanSet+0x38>
 80068c6:	bf00      	nop
 80068c8:	20000cac 	.word	0x20000cac
 80068cc:	20000d34 	.word	0x20000d34
 80068d0:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 80068d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8214 	beq.w	8006d0a <UI_PlanSet+0x756>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 80068e2:	7d7b      	ldrb	r3, [r7, #21]
 80068e4:	2b0e      	cmp	r3, #14
 80068e6:	d004      	beq.n	80068f2 <UI_PlanSet+0x33e>
 80068e8:	7d7b      	ldrb	r3, [r7, #21]
 80068ea:	3301      	adds	r3, #1
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	757b      	strb	r3, [r7, #21]
 80068f0:	e001      	b.n	80068f6 <UI_PlanSet+0x342>
 80068f2:	2300      	movs	r3, #0
 80068f4:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006902:	e673      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8006904:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <UI_PlanSet+0x37e>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8006910:	7dbb      	ldrb	r3, [r7, #22]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <UI_PlanSet+0x36c>
 8006916:	7dbb      	ldrb	r3, [r7, #22]
 8006918:	3b01      	subs	r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	75bb      	strb	r3, [r7, #22]
 800691e:	e001      	b.n	8006924 <UI_PlanSet+0x370>
 8006920:	2302      	movs	r3, #2
 8006922:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006930:	e65c      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006932:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 81e7 	beq.w	8006d0e <UI_PlanSet+0x75a>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8006940:	7dbb      	ldrb	r3, [r7, #22]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d004      	beq.n	8006950 <UI_PlanSet+0x39c>
 8006946:	7dbb      	ldrb	r3, [r7, #22]
 8006948:	3301      	adds	r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	75bb      	strb	r3, [r7, #22]
 800694e:	e001      	b.n	8006954 <UI_PlanSet+0x3a0>
 8006950:	2300      	movs	r3, #0
 8006952:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006960:	e644      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8006962:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <UI_PlanSet+0x3dc>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <UI_PlanSet+0x3ca>
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	3b01      	subs	r3, #1
 8006978:	b2db      	uxtb	r3, r3
 800697a:	75fb      	strb	r3, [r7, #23]
 800697c:	e001      	b.n	8006982 <UI_PlanSet+0x3ce>
 800697e:	23ff      	movs	r3, #255	; 0xff
 8006980:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800698e:	e62d      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006990:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 81ba 	beq.w	8006d12 <UI_PlanSet+0x75e>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	2bff      	cmp	r3, #255	; 0xff
 80069a2:	d004      	beq.n	80069ae <UI_PlanSet+0x3fa>
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	3301      	adds	r3, #1
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	75fb      	strb	r3, [r7, #23]
 80069ac:	e001      	b.n	80069b2 <UI_PlanSet+0x3fe>
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80069be:	e615      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 80069c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d010      	beq.n	80069ee <UI_PlanSet+0x43a>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 80069cc:	7e3b      	ldrb	r3, [r7, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <UI_PlanSet+0x428>
 80069d2:	7e3b      	ldrb	r3, [r7, #24]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	763b      	strb	r3, [r7, #24]
 80069da:	e001      	b.n	80069e0 <UI_PlanSet+0x42c>
 80069dc:	23ff      	movs	r3, #255	; 0xff
 80069de:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80069ec:	e5fe      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80069ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 818d 	beq.w	8006d16 <UI_PlanSet+0x762>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 80069fc:	7e3b      	ldrb	r3, [r7, #24]
 80069fe:	2bff      	cmp	r3, #255	; 0xff
 8006a00:	d004      	beq.n	8006a0c <UI_PlanSet+0x458>
 8006a02:	7e3b      	ldrb	r3, [r7, #24]
 8006a04:	3301      	adds	r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	763b      	strb	r3, [r7, #24]
 8006a0a:	e001      	b.n	8006a10 <UI_PlanSet+0x45c>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006a1c:	e5e6      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8006a1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d015      	beq.n	8006a56 <UI_PlanSet+0x4a2>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 8006a2a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006a2e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8006a32:	d007      	beq.n	8006a44 <UI_PlanSet+0x490>
 8006a34:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	b25b      	sxtb	r3, r3
 8006a40:	767b      	strb	r3, [r7, #25]
 8006a42:	e001      	b.n	8006a48 <UI_PlanSet+0x494>
 8006a44:	2363      	movs	r3, #99	; 0x63
 8006a46:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006a54:	e5ca      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006a56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 815b 	beq.w	8006d1a <UI_PlanSet+0x766>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8006a64:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006a68:	2b63      	cmp	r3, #99	; 0x63
 8006a6a:	d007      	beq.n	8006a7c <UI_PlanSet+0x4c8>
 8006a6c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	767b      	strb	r3, [r7, #25]
 8006a7a:	e001      	b.n	8006a80 <UI_PlanSet+0x4cc>
 8006a7c:	239d      	movs	r3, #157	; 0x9d
 8006a7e:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006a8c:	e5ae      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 8006a8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d015      	beq.n	8006ac6 <UI_PlanSet+0x512>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 8006a9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006a9e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8006aa2:	d007      	beq.n	8006ab4 <UI_PlanSet+0x500>
 8006aa4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	76bb      	strb	r3, [r7, #26]
 8006ab2:	e001      	b.n	8006ab8 <UI_PlanSet+0x504>
 8006ab4:	2363      	movs	r3, #99	; 0x63
 8006ab6:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006ac4:	e592      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006ac6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8125 	beq.w	8006d1e <UI_PlanSet+0x76a>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8006ad4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006ad8:	2b63      	cmp	r3, #99	; 0x63
 8006ada:	d007      	beq.n	8006aec <UI_PlanSet+0x538>
 8006adc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	76bb      	strb	r3, [r7, #26]
 8006aea:	e001      	b.n	8006af0 <UI_PlanSet+0x53c>
 8006aec:	239d      	movs	r3, #157	; 0x9d
 8006aee:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006afc:	e576      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 8006afe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d010      	beq.n	8006b2c <UI_PlanSet+0x578>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 8006b0a:	7efb      	ldrb	r3, [r7, #27]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <UI_PlanSet+0x566>
 8006b10:	7efb      	ldrb	r3, [r7, #27]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	76fb      	strb	r3, [r7, #27]
 8006b18:	e001      	b.n	8006b1e <UI_PlanSet+0x56a>
 8006b1a:	23ff      	movs	r3, #255	; 0xff
 8006b1c:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006b2a:	e55f      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006b2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80f4 	beq.w	8006d22 <UI_PlanSet+0x76e>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 8006b3a:	7efb      	ldrb	r3, [r7, #27]
 8006b3c:	2bff      	cmp	r3, #255	; 0xff
 8006b3e:	d004      	beq.n	8006b4a <UI_PlanSet+0x596>
 8006b40:	7efb      	ldrb	r3, [r7, #27]
 8006b42:	3301      	adds	r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	76fb      	strb	r3, [r7, #27]
 8006b48:	e001      	b.n	8006b4e <UI_PlanSet+0x59a>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006b5a:	e547      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 8006b5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d010      	beq.n	8006b8a <UI_PlanSet+0x5d6>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 8006b68:	7f3b      	ldrb	r3, [r7, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <UI_PlanSet+0x5c4>
 8006b6e:	7f3b      	ldrb	r3, [r7, #28]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	773b      	strb	r3, [r7, #28]
 8006b76:	e001      	b.n	8006b7c <UI_PlanSet+0x5c8>
 8006b78:	23ff      	movs	r3, #255	; 0xff
 8006b7a:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006b88:	e530      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006b8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80c7 	beq.w	8006d26 <UI_PlanSet+0x772>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 8006b98:	7f3b      	ldrb	r3, [r7, #28]
 8006b9a:	2bff      	cmp	r3, #255	; 0xff
 8006b9c:	d004      	beq.n	8006ba8 <UI_PlanSet+0x5f4>
 8006b9e:	7f3b      	ldrb	r3, [r7, #28]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	773b      	strb	r3, [r7, #28]
 8006ba6:	e001      	b.n	8006bac <UI_PlanSet+0x5f8>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006bb8:	e518      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 8006bba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d010      	beq.n	8006be8 <UI_PlanSet+0x634>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 8006bc6:	7f7b      	ldrb	r3, [r7, #29]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <UI_PlanSet+0x622>
 8006bcc:	7f7b      	ldrb	r3, [r7, #29]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	777b      	strb	r3, [r7, #29]
 8006bd4:	e001      	b.n	8006bda <UI_PlanSet+0x626>
 8006bd6:	23ff      	movs	r3, #255	; 0xff
 8006bd8:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006be6:	e501      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006be8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 809a 	beq.w	8006d2a <UI_PlanSet+0x776>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 8006bf6:	7f7b      	ldrb	r3, [r7, #29]
 8006bf8:	2bff      	cmp	r3, #255	; 0xff
 8006bfa:	d004      	beq.n	8006c06 <UI_PlanSet+0x652>
 8006bfc:	7f7b      	ldrb	r3, [r7, #29]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	777b      	strb	r3, [r7, #29]
 8006c04:	e001      	b.n	8006c0a <UI_PlanSet+0x656>
 8006c06:	2300      	movs	r3, #0
 8006c08:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006c16:	e4e9      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 8006c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d010      	beq.n	8006c46 <UI_PlanSet+0x692>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 8006c24:	7fbb      	ldrb	r3, [r7, #30]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <UI_PlanSet+0x680>
 8006c2a:	7fbb      	ldrb	r3, [r7, #30]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	77bb      	strb	r3, [r7, #30]
 8006c32:	e001      	b.n	8006c38 <UI_PlanSet+0x684>
 8006c34:	23ff      	movs	r3, #255	; 0xff
 8006c36:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006c44:	e4d2      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006c46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d06d      	beq.n	8006d2e <UI_PlanSet+0x77a>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 8006c52:	7fbb      	ldrb	r3, [r7, #30]
 8006c54:	2bff      	cmp	r3, #255	; 0xff
 8006c56:	d004      	beq.n	8006c62 <UI_PlanSet+0x6ae>
 8006c58:	7fbb      	ldrb	r3, [r7, #30]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	77bb      	strb	r3, [r7, #30]
 8006c60:	e001      	b.n	8006c66 <UI_PlanSet+0x6b2>
 8006c62:	2300      	movs	r3, #0
 8006c64:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006c72:	e4bb      	b.n	80065ec <UI_PlanSet+0x38>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 8006c74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01d      	beq.n	8006cbc <UI_PlanSet+0x708>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 8006c80:	7ffb      	ldrb	r3, [r7, #31]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <UI_PlanSet+0x6e6>
 8006c8a:	7ffb      	ldrb	r3, [r7, #31]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e009      	b.n	8006cae <UI_PlanSet+0x6fa>
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	7ffb      	ldrb	r3, [r7, #31]
 8006ca6:	f043 0302 	orr.w	r3, r3, #2
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006cba:	e497      	b.n	80065ec <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006cbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d034      	beq.n	8006d32 <UI_PlanSet+0x77e>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8006cc8:	7ffb      	ldrb	r3, [r7, #31]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d007      	beq.n	8006ce2 <UI_PlanSet+0x72e>
 8006cd2:	7ffb      	ldrb	r3, [r7, #31]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e006      	b.n	8006cf0 <UI_PlanSet+0x73c>
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	7ffb      	ldrb	r3, [r7, #31]
 8006cee:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006cfc:	e476      	b.n	80065ec <UI_PlanSet+0x38>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8006cfe:	bf00      	nop
 8006d00:	e480      	b.n	8006604 <UI_PlanSet+0x50>
		if(bt == bt2 && bt_status == 0) continue;
 8006d02:	bf00      	nop
 8006d04:	e47e      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d06:	bf00      	nop
 8006d08:	e47c      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d0a:	bf00      	nop
 8006d0c:	e47a      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d0e:	bf00      	nop
 8006d10:	e478      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d12:	bf00      	nop
 8006d14:	e476      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d16:	bf00      	nop
 8006d18:	e474      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d1a:	bf00      	nop
 8006d1c:	e472      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d1e:	bf00      	nop
 8006d20:	e470      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d22:	bf00      	nop
 8006d24:	e46e      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d26:	bf00      	nop
 8006d28:	e46c      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d2a:	bf00      	nop
 8006d2c:	e46a      	b.n	8006604 <UI_PlanSet+0x50>
			break;
 8006d2e:	bf00      	nop
 8006d30:	e468      	b.n	8006604 <UI_PlanSet+0x50>
			}
			break;
 8006d32:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8006d34:	e466      	b.n	8006604 <UI_PlanSet+0x50>
		}
	}
	return UI_IDLE;
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3730      	adds	r7, #48	; 0x30
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 8006d44:	4b24      	ldr	r3, [pc, #144]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d46:	2204      	movs	r2, #4
 8006d48:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d4c:	2232      	movs	r2, #50	; 0x32
 8006d4e:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 8006d50:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d52:	223a      	movs	r2, #58	; 0x3a
 8006d54:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 8006d56:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d58:	220b      	movs	r2, #11
 8006d5a:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 8006d5c:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 8006d62:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d64:	2202      	movs	r2, #2
 8006d66:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 8006d68:	4b1b      	ldr	r3, [pc, #108]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d72:	3307      	adds	r3, #7
 8006d74:	6810      	ldr	r0, [r2, #0]
 8006d76:	6018      	str	r0, [r3, #0]
 8006d78:	8891      	ldrh	r1, [r2, #4]
 8006d7a:	7992      	ldrb	r2, [r2, #6]
 8006d7c:	8099      	strh	r1, [r3, #4]
 8006d7e:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 8006d80:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d82:	223f      	movs	r2, #63	; 0x3f
 8006d84:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d88:	223c      	movs	r2, #60	; 0x3c
 8006d8a:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 8006d8c:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <UI_ADCThresholdDisplayInit+0x98>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 8006d98:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006da0:	227f      	movs	r2, #127	; 0x7f
 8006da2:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 8006da4:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006da6:	220a      	movs	r2, #10
 8006da8:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006dac:	2201      	movs	r2, #1
 8006dae:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006db2:	2202      	movs	r2, #2
 8006db4:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <UI_ADCThresholdDisplayInit+0x9c>)
 8006db8:	2202      	movs	r2, #2
 8006dba:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 8006dbc:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <UI_ADCThresholdDisplayInit+0xa0>)
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 8006dc2:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <UI_ADCThresholdDisplayInit+0xa0>)
 8006dc4:	2206      	movs	r2, #6
 8006dc6:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <UI_ADCThresholdDisplayInit+0xa0>)
 8006dca:	2202      	movs	r2, #2
 8006dcc:	715a      	strb	r2, [r3, #5]

}
 8006dce:	bf00      	nop
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000f58 	.word	0x20000f58
 8006ddc:	20000f68 	.word	0x20000f68
 8006de0:	20000f70 	.word	0x20000f70

08006de4 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 8006dee:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <UI_ADCThresholdDisplay+0xc0>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	79fa      	ldrb	r2, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d03e      	beq.n	8006e76 <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	f107 0310 	add.w	r3, r7, #16
 8006e00:	4929      	ldr	r1, [pc, #164]	; (8006ea8 <UI_ADCThresholdDisplay+0xc4>)
 8006e02:	4618      	mov	r0, r3
 8006e04:	f007 fa54 	bl	800e2b0 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 8006e08:	f107 0310 	add.w	r3, r7, #16
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4827      	ldr	r0, [pc, #156]	; (8006eac <UI_ADCThresholdDisplay+0xc8>)
 8006e10:	f7fa fd42 	bl	8001898 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 8006e14:	4b23      	ldr	r3, [pc, #140]	; (8006ea4 <UI_ADCThresholdDisplay+0xc0>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	00d2      	lsls	r2, r2, #3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <UI_ADCThresholdDisplay+0xcc>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 8006e2e:	2320      	movs	r3, #32
 8006e30:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <UI_ADCThresholdDisplay+0xd0>)
 8006e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e38:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 8006e3a:	f107 030c 	add.w	r3, r7, #12
 8006e3e:	4619      	mov	r1, r3
 8006e40:	481c      	ldr	r0, [pc, #112]	; (8006eb4 <UI_ADCThresholdDisplay+0xd0>)
 8006e42:	f7fa fd29 	bl	8001898 <DISP_DisplayText>

		point[0] = '~'+2;
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	00d2      	lsls	r2, r2, #3
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <UI_ADCThresholdDisplay+0xcc>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	4413      	add	r3, r2
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <UI_ADCThresholdDisplay+0xd0>)
 8006e62:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4812      	ldr	r0, [pc, #72]	; (8006eb4 <UI_ADCThresholdDisplay+0xd0>)
 8006e6c:	f7fa fd14 	bl	8001898 <DISP_DisplayText>

		last_num = num;
 8006e70:	4a0c      	ldr	r2, [pc, #48]	; (8006ea4 <UI_ADCThresholdDisplay+0xc0>)
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f1c3 030d 	rsb	r3, r3, #13
 8006e7c:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <UI_ADCThresholdDisplay+0xd4>)
 8006e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f107 0310 	add.w	r3, r7, #16
 8006e88:	490c      	ldr	r1, [pc, #48]	; (8006ebc <UI_ADCThresholdDisplay+0xd8>)
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f007 fa10 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	4619      	mov	r1, r3
 8006e96:	480a      	ldr	r0, [pc, #40]	; (8006ec0 <UI_ADCThresholdDisplay+0xdc>)
 8006e98:	f7fa fcfe 	bl	8001898 <DISP_DisplayText>

}
 8006e9c:	bf00      	nop
 8006e9e:	3728      	adds	r7, #40	; 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000318 	.word	0x20000318
 8006ea8:	080107bc 	.word	0x080107bc
 8006eac:	20000f68 	.word	0x20000f68
 8006eb0:	20000290 	.word	0x20000290
 8006eb4:	20000f70 	.word	0x20000f70
 8006eb8:	20000b54 	.word	0x20000b54
 8006ebc:	080107c8 	.word	0x080107c8
 8006ec0:	20000f58 	.word	0x20000f58

08006ec4 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 8006ed6:	f7fd fd49 	bl	800496c <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 8006eda:	7f7b      	ldrb	r3, [r7, #29]
 8006edc:	3301      	adds	r3, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff ff7f 	bl	8006de4 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 8006ee6:	7f7b      	ldrb	r3, [r7, #29]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ff7b 	bl	8006de4 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 8006eee:	f001 fb81 	bl	80085f4 <HAL_GetTick>
 8006ef2:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8006ef4:	7f7b      	ldrb	r3, [r7, #29]
 8006ef6:	f1c3 030d 	rsb	r3, r3, #13
 8006efa:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 8006efc:	f7fe fbd8 	bl	80056b0 <UI_ShowSensor>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00e      	beq.n	8006f24 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 8006f06:	7f3b      	ldrb	r3, [r7, #28]
 8006f08:	4a52      	ldr	r2, [pc, #328]	; (8007054 <UI_ADCThreshold+0x190>)
 8006f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	463b      	mov	r3, r7
 8006f12:	4951      	ldr	r1, [pc, #324]	; (8007058 <UI_ADCThreshold+0x194>)
 8006f14:	4618      	mov	r0, r3
 8006f16:	f007 f9cb 	bl	800e2b0 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	484f      	ldr	r0, [pc, #316]	; (800705c <UI_ADCThreshold+0x198>)
 8006f20:	f7fa fcba 	bl	8001898 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8006f24:	f001 fb66 	bl	80085f4 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	7fba      	ldrb	r2, [r7, #30]
 8006f30:	2a01      	cmp	r2, #1
 8006f32:	d101      	bne.n	8006f38 <UI_ADCThreshold+0x74>
 8006f34:	2214      	movs	r2, #20
 8006f36:	e000      	b.n	8006f3a <UI_ADCThreshold+0x76>
 8006f38:	2246      	movs	r2, #70	; 0x46
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	f200 8081 	bhi.w	8007042 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 8006f40:	f7fe fc34 	bl	80057ac <UI_ReadButton>
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 8006f48:	7ffa      	ldrb	r2, [r7, #31]
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d102      	bne.n	8006f56 <UI_ADCThreshold+0x92>
 8006f50:	7fbb      	ldrb	r3, [r7, #30]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d077      	beq.n	8007046 <UI_ADCThreshold+0x182>
		bt = bt2;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 8006f5a:	7ffb      	ldrb	r3, [r7, #31]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <UI_ADCThreshold+0xa8>
			num_sen = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e06e      	b.n	800704a <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8006f6c:	7ffb      	ldrb	r3, [r7, #31]
 8006f6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 8006f76:	f7fd fd1d 	bl	80049b4 <Storage_SetADCThreshold>
			num_sen = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 8006f7e:	2307      	movs	r3, #7
 8006f80:	e063      	b.n	800704a <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 8006f82:	7ffb      	ldrb	r3, [r7, #31]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 8006f8c:	7f7b      	ldrb	r3, [r7, #29]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <UI_ADCThreshold+0xd6>
 8006f92:	7f7b      	ldrb	r3, [r7, #29]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	777b      	strb	r3, [r7, #29]
 8006f98:	e001      	b.n	8006f9e <UI_ADCThreshold+0xda>
 8006f9a:	230d      	movs	r3, #13
 8006f9c:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8006fa2:	e7a0      	b.n	8006ee6 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 8006fa4:	7ffb      	ldrb	r3, [r7, #31]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 8006fae:	7f7b      	ldrb	r3, [r7, #29]
 8006fb0:	2b0d      	cmp	r3, #13
 8006fb2:	d003      	beq.n	8006fbc <UI_ADCThreshold+0xf8>
 8006fb4:	7f7b      	ldrb	r3, [r7, #29]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	777b      	strb	r3, [r7, #29]
 8006fba:	e001      	b.n	8006fc0 <UI_ADCThreshold+0xfc>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8006fc4:	e78f      	b.n	8006ee6 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d018      	beq.n	8007002 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 8006fd0:	7f3b      	ldrb	r3, [r7, #28]
 8006fd2:	4a23      	ldr	r2, [pc, #140]	; (8007060 <UI_ADCThreshold+0x19c>)
 8006fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <UI_ADCThreshold+0x12c>
 8006fdc:	7f3b      	ldrb	r3, [r7, #28]
 8006fde:	4a20      	ldr	r2, [pc, #128]	; (8007060 <UI_ADCThreshold+0x19c>)
 8006fe0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006fe4:	3a01      	subs	r2, #1
 8006fe6:	b291      	uxth	r1, r2
 8006fe8:	4a1d      	ldr	r2, [pc, #116]	; (8007060 <UI_ADCThreshold+0x19c>)
 8006fea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8006fee:	e005      	b.n	8006ffc <UI_ADCThreshold+0x138>
 8006ff0:	7f3b      	ldrb	r3, [r7, #28]
 8006ff2:	4a1b      	ldr	r2, [pc, #108]	; (8007060 <UI_ADCThreshold+0x19c>)
 8006ff4:	f640 71ff 	movw	r1, #4095	; 0xfff
 8006ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007000:	e771      	b.n	8006ee6 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 8007002:	7ffb      	ldrb	r3, [r7, #31]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	f43f af73 	beq.w	8006ef4 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 800700e:	7f3b      	ldrb	r3, [r7, #28]
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <UI_ADCThreshold+0x19c>)
 8007012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007016:	f640 72ff 	movw	r2, #4095	; 0xfff
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <UI_ADCThreshold+0x16e>
 800701e:	7f3b      	ldrb	r3, [r7, #28]
 8007020:	4a0f      	ldr	r2, [pc, #60]	; (8007060 <UI_ADCThreshold+0x19c>)
 8007022:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007026:	3201      	adds	r2, #1
 8007028:	b291      	uxth	r1, r2
 800702a:	4a0d      	ldr	r2, [pc, #52]	; (8007060 <UI_ADCThreshold+0x19c>)
 800702c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007030:	e004      	b.n	800703c <UI_ADCThreshold+0x178>
 8007032:	7f3b      	ldrb	r3, [r7, #28]
 8007034:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <UI_ADCThreshold+0x19c>)
 8007036:	2100      	movs	r1, #0
 8007038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 800703c:	2301      	movs	r3, #1
 800703e:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007040:	e751      	b.n	8006ee6 <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8007042:	bf00      	nop
 8007044:	e756      	b.n	8006ef4 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 8007046:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8007048:	e754      	b.n	8006ef4 <UI_ADCThreshold+0x30>
		}
	}
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000b38 	.word	0x20000b38
 8007058:	080107d0 	.word	0x080107d0
 800705c:	20000f5f 	.word	0x20000f5f
 8007060:	20000b54 	.word	0x20000b54

08007064 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 800706a:	f7fe fb9f 	bl	80057ac <UI_ReadButton>
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 8007072:	f7fd f939 	bl	80042e8 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 8007076:	f7fe fb1b 	bl	80056b0 <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 800707a:	f7fe fb97 	bl	80057ac <UI_ReadButton>
 800707e:	4603      	mov	r3, r0
 8007080:	461a      	mov	r2, r3
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4293      	cmp	r3, r2
 8007086:	d02a      	beq.n	80070de <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 8007088:	f7fe fb90 	bl	80057ac <UI_ReadButton>
 800708c:	4603      	mov	r3, r0
 800708e:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 800709a:	2000      	movs	r0, #0
 800709c:	f7fd f9b4 	bl	8004408 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 80070a0:	2302      	movs	r3, #2
 80070a2:	e01e      	b.n	80070e2 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7fd f9aa 	bl	8004408 <SEN_EndAutoCalibration>
			return UI_SET;
 80070b4:	2307      	movs	r3, #7
 80070b6:	e014      	b.n	80070e2 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0d9      	beq.n	8007076 <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7fd f9a0 	bl	8004408 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 80070c8:	4908      	ldr	r1, [pc, #32]	; (80070ec <UI_AutoCalib+0x88>)
 80070ca:	4809      	ldr	r0, [pc, #36]	; (80070f0 <UI_AutoCalib+0x8c>)
 80070cc:	f7fa fbe4 	bl	8001898 <DISP_DisplayText>
			Storage_SetADCThreshold();
 80070d0:	f7fd fc70 	bl	80049b4 <Storage_SetADCThreshold>
			HAL_Delay(200);
 80070d4:	20c8      	movs	r0, #200	; 0xc8
 80070d6:	f001 fa99 	bl	800860c <HAL_Delay>
			return UI_SET;
 80070da:	2307      	movs	r3, #7
 80070dc:	e001      	b.n	80070e2 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 80070de:	bf00      	nop
		UI_ShowSensor();
 80070e0:	e7c9      	b.n	8007076 <UI_AutoCalib+0x12>
		}
	}
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	080107d8 	.word	0x080107d8
 80070f0:	20000ec8 	.word	0x20000ec8

080070f4 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 80070fa:	4b5e      	ldr	r3, [pc, #376]	; (8007274 <UI_Startup+0x180>)
 80070fc:	2209      	movs	r2, #9
 80070fe:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 8007100:	f001 fa78 	bl	80085f4 <HAL_GetTick>
 8007104:	4603      	mov	r3, r0
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	463b      	mov	r3, r7
 800710c:	495a      	ldr	r1, [pc, #360]	; (8007278 <UI_Startup+0x184>)
 800710e:	4618      	mov	r0, r3
 8007110:	f007 f8ce 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007114:	463b      	mov	r3, r7
 8007116:	4619      	mov	r1, r3
 8007118:	4856      	ldr	r0, [pc, #344]	; (8007274 <UI_Startup+0x180>)
 800711a:	f7fa fbbd 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800711e:	4b55      	ldr	r3, [pc, #340]	; (8007274 <UI_Startup+0x180>)
 8007120:	785a      	ldrb	r2, [r3, #1]
 8007122:	4b54      	ldr	r3, [pc, #336]	; (8007274 <UI_Startup+0x180>)
 8007124:	791b      	ldrb	r3, [r3, #4]
 8007126:	4413      	add	r3, r2
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b52      	ldr	r3, [pc, #328]	; (8007274 <UI_Startup+0x180>)
 800712c:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 800712e:	2001      	movs	r0, #1
 8007130:	f001 fa6c 	bl	800860c <HAL_Delay>
	if(!Storage_Init()) {
 8007134:	f7fd fbb4 	bl	80048a0 <Storage_Init>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d11d      	bne.n	800717a <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 800713e:	f001 fa59 	bl	80085f4 <HAL_GetTick>
 8007142:	4603      	mov	r3, r0
 8007144:	b29b      	uxth	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	463b      	mov	r3, r7
 800714a:	494c      	ldr	r1, [pc, #304]	; (800727c <UI_Startup+0x188>)
 800714c:	4618      	mov	r0, r3
 800714e:	f007 f8af 	bl	800e2b0 <siprintf>
		DISP_DisplayText(&startup, buff);
 8007152:	463b      	mov	r3, r7
 8007154:	4619      	mov	r1, r3
 8007156:	4847      	ldr	r0, [pc, #284]	; (8007274 <UI_Startup+0x180>)
 8007158:	f7fa fb9e 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 800715c:	4b45      	ldr	r3, [pc, #276]	; (8007274 <UI_Startup+0x180>)
 800715e:	785a      	ldrb	r2, [r3, #1]
 8007160:	4b44      	ldr	r3, [pc, #272]	; (8007274 <UI_Startup+0x180>)
 8007162:	791b      	ldrb	r3, [r3, #4]
 8007164:	4413      	add	r3, r2
 8007166:	b2da      	uxtb	r2, r3
 8007168:	4b42      	ldr	r3, [pc, #264]	; (8007274 <UI_Startup+0x180>)
 800716a:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 800716c:	f7fd fb4a 	bl	8004804 <Storage_ResetMemory>
		} while(!Storage_Init());
 8007170:	f7fd fb96 	bl	80048a0 <Storage_Init>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f8      	beq.n	800716c <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 800717a:	f001 fa3b 	bl	80085f4 <HAL_GetTick>
 800717e:	4603      	mov	r3, r0
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	463b      	mov	r3, r7
 8007186:	493e      	ldr	r1, [pc, #248]	; (8007280 <UI_Startup+0x18c>)
 8007188:	4618      	mov	r0, r3
 800718a:	f007 f891 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&startup, buff);
 800718e:	463b      	mov	r3, r7
 8007190:	4619      	mov	r1, r3
 8007192:	4838      	ldr	r0, [pc, #224]	; (8007274 <UI_Startup+0x180>)
 8007194:	f7fa fb80 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007198:	4b36      	ldr	r3, [pc, #216]	; (8007274 <UI_Startup+0x180>)
 800719a:	785a      	ldrb	r2, [r3, #1]
 800719c:	4b35      	ldr	r3, [pc, #212]	; (8007274 <UI_Startup+0x180>)
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	4b33      	ldr	r3, [pc, #204]	; (8007274 <UI_Startup+0x180>)
 80071a6:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 80071a8:	f001 fa24 	bl	80085f4 <HAL_GetTick>
 80071ac:	4603      	mov	r3, r0
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	463b      	mov	r3, r7
 80071b4:	4933      	ldr	r1, [pc, #204]	; (8007284 <UI_Startup+0x190>)
 80071b6:	4618      	mov	r0, r3
 80071b8:	f007 f87a 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&startup, buff);
 80071bc:	463b      	mov	r3, r7
 80071be:	4619      	mov	r1, r3
 80071c0:	482c      	ldr	r0, [pc, #176]	; (8007274 <UI_Startup+0x180>)
 80071c2:	f7fa fb69 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80071c6:	4b2b      	ldr	r3, [pc, #172]	; (8007274 <UI_Startup+0x180>)
 80071c8:	785a      	ldrb	r2, [r3, #1]
 80071ca:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <UI_Startup+0x180>)
 80071cc:	791b      	ldrb	r3, [r3, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	4b28      	ldr	r3, [pc, #160]	; (8007274 <UI_Startup+0x180>)
 80071d4:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 80071d6:	2001      	movs	r0, #1
 80071d8:	f001 fa18 	bl	800860c <HAL_Delay>
	if(!Storage_PlanInit()) {
 80071dc:	f7fd fb98 	bl	8004910 <Storage_PlanInit>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11d      	bne.n	8007222 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 80071e6:	f001 fa05 	bl	80085f4 <HAL_GetTick>
 80071ea:	4603      	mov	r3, r0
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	463b      	mov	r3, r7
 80071f2:	4925      	ldr	r1, [pc, #148]	; (8007288 <UI_Startup+0x194>)
 80071f4:	4618      	mov	r0, r3
 80071f6:	f007 f85b 	bl	800e2b0 <siprintf>
		DISP_DisplayText(&startup, buff);
 80071fa:	463b      	mov	r3, r7
 80071fc:	4619      	mov	r1, r3
 80071fe:	481d      	ldr	r0, [pc, #116]	; (8007274 <UI_Startup+0x180>)
 8007200:	f7fa fb4a 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <UI_Startup+0x180>)
 8007206:	785a      	ldrb	r2, [r3, #1]
 8007208:	4b1a      	ldr	r3, [pc, #104]	; (8007274 <UI_Startup+0x180>)
 800720a:	791b      	ldrb	r3, [r3, #4]
 800720c:	4413      	add	r3, r2
 800720e:	b2da      	uxtb	r2, r3
 8007210:	4b18      	ldr	r3, [pc, #96]	; (8007274 <UI_Startup+0x180>)
 8007212:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 8007214:	f7fd fa86 	bl	8004724 <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 8007218:	f7fd fb7a 	bl	8004910 <Storage_PlanInit>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f8      	beq.n	8007214 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 8007222:	4b1a      	ldr	r3, [pc, #104]	; (800728c <UI_Startup+0x198>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7fd fbe8 	bl	80049fc <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 800722c:	f001 f9e2 	bl	80085f4 <HAL_GetTick>
 8007230:	4603      	mov	r3, r0
 8007232:	b29b      	uxth	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	463b      	mov	r3, r7
 8007238:	4915      	ldr	r1, [pc, #84]	; (8007290 <UI_Startup+0x19c>)
 800723a:	4618      	mov	r0, r3
 800723c:	f007 f838 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007240:	463b      	mov	r3, r7
 8007242:	4619      	mov	r1, r3
 8007244:	480b      	ldr	r0, [pc, #44]	; (8007274 <UI_Startup+0x180>)
 8007246:	f7fa fb27 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <UI_Startup+0x180>)
 800724c:	785a      	ldrb	r2, [r3, #1]
 800724e:	4b09      	ldr	r3, [pc, #36]	; (8007274 <UI_Startup+0x180>)
 8007250:	791b      	ldrb	r3, [r3, #4]
 8007252:	4413      	add	r3, r2
 8007254:	b2da      	uxtb	r2, r3
 8007256:	4b07      	ldr	r3, [pc, #28]	; (8007274 <UI_Startup+0x180>)
 8007258:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 800725a:	bf00      	nop
 800725c:	f7fe faa6 	bl	80057ac <UI_ReadButton>
 8007260:	4603      	mov	r3, r0
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f8      	bne.n	800725c <UI_Startup+0x168>

	return UI_HOMESCREEN;
 800726a:	2302      	movs	r3, #2
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000f78 	.word	0x20000f78
 8007278:	080107e4 	.word	0x080107e4
 800727c:	080107f8 	.word	0x080107f8
 8007280:	0801080c 	.word	0x0801080c
 8007284:	0801081c 	.word	0x0801081c
 8007288:	08010830 	.word	0x08010830
 800728c:	20000ca9 	.word	0x20000ca9
 8007290:	08010844 	.word	0x08010844

08007294 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 800729a:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <UI_CPDisplayInit+0xc4>)
 800729c:	2203      	movs	r2, #3
 800729e:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 80072a0:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072a2:	220d      	movs	r2, #13
 80072a4:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 80072a6:	4b2c      	ldr	r3, [pc, #176]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072a8:	2278      	movs	r2, #120	; 0x78
 80072aa:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 80072ac:	4b2a      	ldr	r3, [pc, #168]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072ae:	220b      	movs	r2, #11
 80072b0:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 80072b2:	4b29      	ldr	r3, [pc, #164]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 80072b8:	4b27      	ldr	r3, [pc, #156]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072ba:	2202      	movs	r2, #2
 80072bc:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 80072be:	4b26      	ldr	r3, [pc, #152]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072c0:	2202      	movs	r2, #2
 80072c2:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 80072c4:	2301      	movs	r3, #1
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	e027      	b.n	800731a <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 80072ca:	4923      	ldr	r1, [pc, #140]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	440b      	add	r3, r1
 80072d6:	4a20      	ldr	r2, [pc, #128]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072d8:	6810      	ldr	r0, [r2, #0]
 80072da:	6018      	str	r0, [r3, #0]
 80072dc:	8891      	ldrh	r1, [r2, #4]
 80072de:	7992      	ldrb	r2, [r2, #6]
 80072e0:	8099      	strh	r1, [r3, #4]
 80072e2:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	1e5a      	subs	r2, r3, #1
 80072e8:	491b      	ldr	r1, [pc, #108]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	440b      	add	r3, r1
 80072f2:	3301      	adds	r3, #1
 80072f4:	781a      	ldrb	r2, [r3, #0]
 80072f6:	4b18      	ldr	r3, [pc, #96]	; (8007358 <UI_CPDisplayInit+0xc4>)
 80072f8:	791b      	ldrb	r3, [r3, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	3302      	adds	r3, #2
 8007300:	b2d8      	uxtb	r0, r3
 8007302:	4915      	ldr	r1, [pc, #84]	; (8007358 <UI_CPDisplayInit+0xc4>)
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	440b      	add	r3, r1
 800730e:	3301      	adds	r3, #1
 8007310:	4602      	mov	r2, r0
 8007312:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3301      	adds	r3, #1
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b03      	cmp	r3, #3
 800731e:	ddd4      	ble.n	80072ca <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <UI_CPDisplayInit+0xc8>)
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 8007326:	4b0d      	ldr	r3, [pc, #52]	; (800735c <UI_CPDisplayInit+0xc8>)
 8007328:	2200      	movs	r2, #0
 800732a:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <UI_CPDisplayInit+0xc8>)
 800732e:	227f      	movs	r2, #127	; 0x7f
 8007330:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 8007332:	4b0a      	ldr	r3, [pc, #40]	; (800735c <UI_CPDisplayInit+0xc8>)
 8007334:	220a      	movs	r2, #10
 8007336:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 8007338:	4b08      	ldr	r3, [pc, #32]	; (800735c <UI_CPDisplayInit+0xc8>)
 800733a:	2201      	movs	r2, #1
 800733c:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 800733e:	4b07      	ldr	r3, [pc, #28]	; (800735c <UI_CPDisplayInit+0xc8>)
 8007340:	2202      	movs	r2, #2
 8007342:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <UI_CPDisplayInit+0xc8>)
 8007346:	2202      	movs	r2, #2
 8007348:	719a      	strb	r2, [r3, #6]
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	20000f80 	.word	0x20000f80
 800735c:	20000f9c 	.word	0x20000f9c

08007360 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	6039      	str	r1, [r7, #0]
 800736a:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	4a31      	ldr	r2, [pc, #196]	; (8007434 <UI_CPDisplay+0xd4>)
 8007370:	f992 2000 	ldrsb.w	r2, [r2]
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	2b03      	cmp	r3, #3
 8007378:	dd06      	ble.n	8007388 <UI_CPDisplay+0x28>
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	3b03      	subs	r3, #3
 800737e:	b2db      	uxtb	r3, r3
 8007380:	b25a      	sxtb	r2, r3
 8007382:	4b2c      	ldr	r3, [pc, #176]	; (8007434 <UI_CPDisplay+0xd4>)
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e009      	b.n	800739c <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <UI_CPDisplay+0xd4>)
 800738c:	f992 2000 	ldrsb.w	r2, [r2]
 8007390:	4293      	cmp	r3, r2
 8007392:	da03      	bge.n	800739c <UI_CPDisplay+0x3c>
 8007394:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007398:	4b26      	ldr	r3, [pc, #152]	; (8007434 <UI_CPDisplay+0xd4>)
 800739a:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800739c:	2300      	movs	r3, #0
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
 80073a0:	e03f      	b.n	8007422 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <UI_CPDisplay+0xd4>)
 80073a4:	f993 3000 	ldrsb.w	r3, [r3]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	441a      	add	r2, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d109      	bne.n	80073c8 <UI_CPDisplay+0x68>
 80073b4:	4920      	ldr	r1, [pc, #128]	; (8007438 <UI_CPDisplay+0xd8>)
 80073b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	440b      	add	r3, r1
 80073c0:	3302      	adds	r3, #2
 80073c2:	2201      	movs	r2, #1
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	e008      	b.n	80073da <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80073c8:	491b      	ldr	r1, [pc, #108]	; (8007438 <UI_CPDisplay+0xd8>)
 80073ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	440b      	add	r3, r1
 80073d4:	3302      	adds	r3, #2
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 80073da:	4b16      	ldr	r3, [pc, #88]	; (8007434 <UI_CPDisplay+0xd4>)
 80073dc:	f993 3000 	ldrsb.w	r3, [r3]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	441a      	add	r2, r3
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <UI_CPDisplay+0xd4>)
 80073e8:	f993 3000 	ldrsb.w	r3, [r3]
 80073ec:	4619      	mov	r1, r3
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	440b      	add	r3, r1
 80073f2:	4619      	mov	r1, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	440b      	add	r3, r1
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f107 000c 	add.w	r0, r7, #12
 80073fe:	490f      	ldr	r1, [pc, #60]	; (800743c <UI_CPDisplay+0xdc>)
 8007400:	f006 ff56 	bl	800e2b0 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <UI_CPDisplay+0xd8>)
 800740e:	4413      	add	r3, r2
 8007410:	f107 020c 	add.w	r2, r7, #12
 8007414:	4611      	mov	r1, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f7fa fa3e 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	3301      	adds	r3, #1
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2b03      	cmp	r3, #3
 8007426:	ddbc      	ble.n	80073a2 <UI_CPDisplay+0x42>
	}
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	3728      	adds	r7, #40	; 0x28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000fac 	.word	0x20000fac
 8007438:	20000f80 	.word	0x20000f80
 800743c:	08010854 	.word	0x08010854

08007440 <UI_CP>:

UI_Menu_Lists UI_CP() {
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 800744e:	4949      	ldr	r1, [pc, #292]	; (8007574 <UI_CP+0x134>)
 8007450:	4849      	ldr	r0, [pc, #292]	; (8007578 <UI_CP+0x138>)
 8007452:	f7fa fa21 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 8007456:	79bb      	ldrb	r3, [r7, #6]
 8007458:	4948      	ldr	r1, [pc, #288]	; (800757c <UI_CP+0x13c>)
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff ff80 	bl	8007360 <UI_CPDisplay>
	tick = HAL_GetTick();
 8007460:	f001 f8c8 	bl	80085f4 <HAL_GetTick>
 8007464:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007466:	f001 f8c5 	bl	80085f4 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b45      	cmp	r3, #69	; 0x45
 8007472:	d977      	bls.n	8007564 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 8007474:	f7fe f99a 	bl	80057ac <UI_ReadButton>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	4293      	cmp	r3, r2
 8007480:	d072      	beq.n	8007568 <UI_CP+0x128>
		bt = UI_ReadButton();
 8007482:	f7fe f993 	bl	80057ac <UI_ReadButton>
 8007486:	4603      	mov	r3, r0
 8007488:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8007494:	79bb      	ldrb	r3, [r7, #6]
 8007496:	2b13      	cmp	r3, #19
 8007498:	d102      	bne.n	80074a0 <UI_CP+0x60>
 800749a:	2300      	movs	r3, #0
 800749c:	71bb      	strb	r3, [r7, #6]
 800749e:	e7da      	b.n	8007456 <UI_CP+0x16>
 80074a0:	79bb      	ldrb	r3, [r7, #6]
 80074a2:	3301      	adds	r3, #1
 80074a4:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 80074a6:	e7d6      	b.n	8007456 <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 80074b2:	79bb      	ldrb	r3, [r7, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <UI_CP+0x7e>
 80074b8:	2313      	movs	r3, #19
 80074ba:	71bb      	strb	r3, [r7, #6]
 80074bc:	e7cb      	b.n	8007456 <UI_CP+0x16>
 80074be:	79bb      	ldrb	r3, [r7, #6]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 80074c4:	e7c7      	b.n	8007456 <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d016      	beq.n	80074fe <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 80074d0:	79bb      	ldrb	r3, [r7, #6]
 80074d2:	4a2b      	ldr	r2, [pc, #172]	; (8007580 <UI_CP+0x140>)
 80074d4:	4413      	add	r3, r2
 80074d6:	789b      	ldrb	r3, [r3, #2]
 80074d8:	2b63      	cmp	r3, #99	; 0x63
 80074da:	d105      	bne.n	80074e8 <UI_CP+0xa8>
 80074dc:	79bb      	ldrb	r3, [r7, #6]
 80074de:	4a28      	ldr	r2, [pc, #160]	; (8007580 <UI_CP+0x140>)
 80074e0:	4413      	add	r3, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	709a      	strb	r2, [r3, #2]
 80074e6:	e7b6      	b.n	8007456 <UI_CP+0x16>
 80074e8:	79bb      	ldrb	r3, [r7, #6]
 80074ea:	4a25      	ldr	r2, [pc, #148]	; (8007580 <UI_CP+0x140>)
 80074ec:	441a      	add	r2, r3
 80074ee:	7892      	ldrb	r2, [r2, #2]
 80074f0:	3201      	adds	r2, #1
 80074f2:	b2d1      	uxtb	r1, r2
 80074f4:	4a22      	ldr	r2, [pc, #136]	; (8007580 <UI_CP+0x140>)
 80074f6:	4413      	add	r3, r2
 80074f8:	460a      	mov	r2, r1
 80074fa:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 80074fc:	e7ab      	b.n	8007456 <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d016      	beq.n	8007536 <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 8007508:	79bb      	ldrb	r3, [r7, #6]
 800750a:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <UI_CP+0x140>)
 800750c:	4413      	add	r3, r2
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <UI_CP+0xe0>
 8007514:	79bb      	ldrb	r3, [r7, #6]
 8007516:	4a1a      	ldr	r2, [pc, #104]	; (8007580 <UI_CP+0x140>)
 8007518:	4413      	add	r3, r2
 800751a:	2263      	movs	r2, #99	; 0x63
 800751c:	709a      	strb	r2, [r3, #2]
 800751e:	e79a      	b.n	8007456 <UI_CP+0x16>
 8007520:	79bb      	ldrb	r3, [r7, #6]
 8007522:	4a17      	ldr	r2, [pc, #92]	; (8007580 <UI_CP+0x140>)
 8007524:	441a      	add	r2, r3
 8007526:	7892      	ldrb	r2, [r2, #2]
 8007528:	3a01      	subs	r2, #1
 800752a:	b2d1      	uxtb	r1, r2
 800752c:	4a14      	ldr	r2, [pc, #80]	; (8007580 <UI_CP+0x140>)
 800752e:	4413      	add	r3, r2
 8007530:	460a      	mov	r2, r1
 8007532:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8007534:	e78f      	b.n	8007456 <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <UI_CP+0x104>
			return UI_HOMESCREEN;
 8007540:	2302      	movs	r3, #2
 8007542:	e013      	b.n	800756c <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d08b      	beq.n	8007466 <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 800754e:	490d      	ldr	r1, [pc, #52]	; (8007584 <UI_CP+0x144>)
 8007550:	480d      	ldr	r0, [pc, #52]	; (8007588 <UI_CP+0x148>)
 8007552:	f7fa f9a1 	bl	8001898 <DISP_DisplayText>
			Storage_SetCheckpoint();
 8007556:	f7fd faa3 	bl	8004aa0 <Storage_SetCheckpoint>
			HAL_Delay(200);
 800755a:	20c8      	movs	r0, #200	; 0xc8
 800755c:	f001 f856 	bl	800860c <HAL_Delay>
			return UI_SET;
 8007560:	2307      	movs	r3, #7
 8007562:	e003      	b.n	800756c <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007564:	bf00      	nop
 8007566:	e77e      	b.n	8007466 <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 8007568:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800756a:	e77c      	b.n	8007466 <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	08010864 	.word	0x08010864
 8007578:	20000f9c 	.word	0x20000f9c
 800757c:	20000d36 	.word	0x20000d36
 8007580:	20000d34 	.word	0x20000d34
 8007584:	080107d8 	.word	0x080107d8
 8007588:	20000ec8 	.word	0x20000ec8

0800758c <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	; 0x28
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <UI_PlanSelectDisplay+0xc0>)
 800759a:	f992 2000 	ldrsb.w	r2, [r2]
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	dd06      	ble.n	80075b2 <UI_PlanSelectDisplay+0x26>
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	3b03      	subs	r3, #3
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	b25a      	sxtb	r2, r3
 80075ac:	4b27      	ldr	r3, [pc, #156]	; (800764c <UI_PlanSelectDisplay+0xc0>)
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e009      	b.n	80075c6 <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <UI_PlanSelectDisplay+0xc0>)
 80075b6:	f992 2000 	ldrsb.w	r2, [r2]
 80075ba:	4293      	cmp	r3, r2
 80075bc:	da03      	bge.n	80075c6 <UI_PlanSelectDisplay+0x3a>
 80075be:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80075c2:	4b22      	ldr	r3, [pc, #136]	; (800764c <UI_PlanSelectDisplay+0xc0>)
 80075c4:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
 80075ca:	e036      	b.n	800763a <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80075cc:	4b1f      	ldr	r3, [pc, #124]	; (800764c <UI_PlanSelectDisplay+0xc0>)
 80075ce:	f993 3000 	ldrsb.w	r3, [r3]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	441a      	add	r2, r3
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d109      	bne.n	80075f2 <UI_PlanSelectDisplay+0x66>
 80075de:	491c      	ldr	r1, [pc, #112]	; (8007650 <UI_PlanSelectDisplay+0xc4>)
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	4613      	mov	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	1a9b      	subs	r3, r3, r2
 80075e8:	440b      	add	r3, r1
 80075ea:	3302      	adds	r3, #2
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e008      	b.n	8007604 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80075f2:	4917      	ldr	r1, [pc, #92]	; (8007650 <UI_PlanSelectDisplay+0xc4>)
 80075f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f6:	4613      	mov	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	440b      	add	r3, r1
 80075fe:	3302      	adds	r3, #2
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8007604:	4b11      	ldr	r3, [pc, #68]	; (800764c <UI_PlanSelectDisplay+0xc0>)
 8007606:	f993 3000 	ldrsb.w	r3, [r3]
 800760a:	461a      	mov	r2, r3
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	441a      	add	r2, r3
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	490f      	ldr	r1, [pc, #60]	; (8007654 <UI_PlanSelectDisplay+0xc8>)
 8007616:	4618      	mov	r0, r3
 8007618:	f006 fe4a 	bl	800e2b0 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 800761c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761e:	4613      	mov	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <UI_PlanSelectDisplay+0xc4>)
 8007626:	4413      	add	r3, r2
 8007628:	f107 020c 	add.w	r2, r7, #12
 800762c:	4611      	mov	r1, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f7fa f932 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	3301      	adds	r3, #1
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	2b03      	cmp	r3, #3
 800763e:	ddc5      	ble.n	80075cc <UI_PlanSelectDisplay+0x40>
	}
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	20000fad 	.word	0x20000fad
 8007650:	20000f80 	.word	0x20000f80
 8007654:	08010870 	.word	0x08010870

08007658 <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 8007666:	4937      	ldr	r1, [pc, #220]	; (8007744 <UI_PlanSelect+0xec>)
 8007668:	4837      	ldr	r0, [pc, #220]	; (8007748 <UI_PlanSelect+0xf0>)
 800766a:	f7fa f915 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 800766e:	79bb      	ldrb	r3, [r7, #6]
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff ff8b 	bl	800758c <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 8007676:	f000 ffbd 	bl	80085f4 <HAL_GetTick>
 800767a:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800767c:	f000 ffba 	bl	80085f4 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b45      	cmp	r3, #69	; 0x45
 8007688:	d953      	bls.n	8007732 <UI_PlanSelect+0xda>
		if(bt == UI_ReadButton()) continue;
 800768a:	f7fe f88f 	bl	80057ac <UI_ReadButton>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	4293      	cmp	r3, r2
 8007696:	d04e      	beq.n	8007736 <UI_PlanSelect+0xde>
		bt = UI_ReadButton();
 8007698:	f7fe f888 	bl	80057ac <UI_ReadButton>
 800769c:	4603      	mov	r3, r0
 800769e:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d009      	beq.n	80076be <UI_PlanSelect+0x66>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 80076aa:	79bb      	ldrb	r3, [r7, #6]
 80076ac:	2b0e      	cmp	r3, #14
 80076ae:	d102      	bne.n	80076b6 <UI_PlanSelect+0x5e>
 80076b0:	2300      	movs	r3, #0
 80076b2:	71bb      	strb	r3, [r7, #6]
 80076b4:	e7db      	b.n	800766e <UI_PlanSelect+0x16>
 80076b6:	79bb      	ldrb	r3, [r7, #6]
 80076b8:	3301      	adds	r3, #1
 80076ba:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 80076bc:	e7d7      	b.n	800766e <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <UI_PlanSelect+0x84>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 80076c8:	79bb      	ldrb	r3, [r7, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <UI_PlanSelect+0x7c>
 80076ce:	230e      	movs	r3, #14
 80076d0:	71bb      	strb	r3, [r7, #6]
 80076d2:	e7cc      	b.n	800766e <UI_PlanSelect+0x16>
 80076d4:	79bb      	ldrb	r3, [r7, #6]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 80076da:	e7c8      	b.n	800766e <UI_PlanSelect+0x16>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	f003 0348 	and.w	r3, r3, #72	; 0x48
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <UI_PlanSelect+0x92>
			return UI_HOMESCREEN;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e027      	b.n	800773a <UI_PlanSelect+0xe2>
		}
		else if(bt & SW_OK_PRESS) {
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0c3      	beq.n	800767c <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 80076f4:	4915      	ldr	r1, [pc, #84]	; (800774c <UI_PlanSelect+0xf4>)
 80076f6:	4816      	ldr	r0, [pc, #88]	; (8007750 <UI_PlanSelect+0xf8>)
 80076f8:	f7fa f8ce 	bl	8001898 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 80076fc:	79bb      	ldrb	r3, [r7, #6]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd f97c 	bl	80049fc <Storage_GetPlan>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <UI_PlanSelect+0xc8>
				DISP_DisplayText(&short_message, "Reseting...");
 800770a:	4912      	ldr	r1, [pc, #72]	; (8007754 <UI_PlanSelect+0xfc>)
 800770c:	4810      	ldr	r0, [pc, #64]	; (8007750 <UI_PlanSelect+0xf8>)
 800770e:	f7fa f8c3 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8007712:	f7fd f807 	bl	8004724 <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8007716:	f7fd f8fb 	bl	8004910 <Storage_PlanInit>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0f8      	beq.n	8007712 <UI_PlanSelect+0xba>
			}
			DISP_DisplayText(&short_message, "Done!");
 8007720:	490d      	ldr	r1, [pc, #52]	; (8007758 <UI_PlanSelect+0x100>)
 8007722:	480b      	ldr	r0, [pc, #44]	; (8007750 <UI_PlanSelect+0xf8>)
 8007724:	f7fa f8b8 	bl	8001898 <DISP_DisplayText>
			HAL_Delay(200);
 8007728:	20c8      	movs	r0, #200	; 0xc8
 800772a:	f000 ff6f 	bl	800860c <HAL_Delay>
			return UI_HOMESCREEN;
 800772e:	2302      	movs	r3, #2
 8007730:	e003      	b.n	800773a <UI_PlanSelect+0xe2>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007732:	bf00      	nop
 8007734:	e7a2      	b.n	800767c <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8007736:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007738:	e7a0      	b.n	800767c <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	08010878 	.word	0x08010878
 8007748:	20000f9c 	.word	0x20000f9c
 800774c:	08010884 	.word	0x08010884
 8007750:	20000ec8 	.word	0x20000ec8
 8007754:	08010890 	.word	0x08010890
 8007758:	0801089c 	.word	0x0801089c

0800775c <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	4a29      	ldr	r2, [pc, #164]	; (8007810 <UI_MemSettingDisplay+0xb4>)
 800776a:	f992 2000 	ldrsb.w	r2, [r2]
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	2b03      	cmp	r3, #3
 8007772:	dd06      	ble.n	8007782 <UI_MemSettingDisplay+0x26>
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	3b03      	subs	r3, #3
 8007778:	b2db      	uxtb	r3, r3
 800777a:	b25a      	sxtb	r2, r3
 800777c:	4b24      	ldr	r3, [pc, #144]	; (8007810 <UI_MemSettingDisplay+0xb4>)
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	e009      	b.n	8007796 <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	4a22      	ldr	r2, [pc, #136]	; (8007810 <UI_MemSettingDisplay+0xb4>)
 8007786:	f992 2000 	ldrsb.w	r2, [r2]
 800778a:	4293      	cmp	r3, r2
 800778c:	da03      	bge.n	8007796 <UI_MemSettingDisplay+0x3a>
 800778e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007792:	4b1f      	ldr	r3, [pc, #124]	; (8007810 <UI_MemSettingDisplay+0xb4>)
 8007794:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	e031      	b.n	8007800 <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 800779c:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <UI_MemSettingDisplay+0xb4>)
 800779e:	f993 3000 	ldrsb.w	r3, [r3]
 80077a2:	461a      	mov	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	441a      	add	r2, r3
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d109      	bne.n	80077c2 <UI_MemSettingDisplay+0x66>
 80077ae:	4919      	ldr	r1, [pc, #100]	; (8007814 <UI_MemSettingDisplay+0xb8>)
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4613      	mov	r3, r2
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	440b      	add	r3, r1
 80077ba:	3302      	adds	r3, #2
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	e008      	b.n	80077d4 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 80077c2:	4914      	ldr	r1, [pc, #80]	; (8007814 <UI_MemSettingDisplay+0xb8>)
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	440b      	add	r3, r1
 80077ce:	3302      	adds	r3, #2
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	4a0d      	ldr	r2, [pc, #52]	; (8007814 <UI_MemSettingDisplay+0xb8>)
 80077de:	441a      	add	r2, r3
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <UI_MemSettingDisplay+0xb4>)
 80077e2:	f993 3000 	ldrsb.w	r3, [r3]
 80077e6:	4619      	mov	r1, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	440b      	add	r3, r1
 80077ec:	490a      	ldr	r1, [pc, #40]	; (8007818 <UI_MemSettingDisplay+0xbc>)
 80077ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fa f84f 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b03      	cmp	r3, #3
 8007804:	ddca      	ble.n	800779c <UI_MemSettingDisplay+0x40>
	}
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000fae 	.word	0x20000fae
 8007814:	20000ef4 	.word	0x20000ef4
 8007818:	20000308 	.word	0x20000308

0800781c <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 8007826:	495b      	ldr	r1, [pc, #364]	; (8007994 <UI_MemSetting+0x178>)
 8007828:	485b      	ldr	r0, [pc, #364]	; (8007998 <UI_MemSetting+0x17c>)
 800782a:	f7fa f835 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 800782e:	4b5b      	ldr	r3, [pc, #364]	; (800799c <UI_MemSetting+0x180>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff ff92 	bl	800775c <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8007838:	f000 fedc 	bl	80085f4 <HAL_GetTick>
 800783c:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800783e:	f000 fed9 	bl	80085f4 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b45      	cmp	r3, #69	; 0x45
 800784a:	f240 8097 	bls.w	800797c <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 800784e:	f7fd ffad 	bl	80057ac <UI_ReadButton>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	4293      	cmp	r3, r2
 800785a:	f000 8091 	beq.w	8007980 <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 800785e:	f7fd ffa5 	bl	80057ac <UI_ReadButton>
 8007862:	4603      	mov	r3, r0
 8007864:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00e      	beq.n	800788e <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8007870:	4b4a      	ldr	r3, [pc, #296]	; (800799c <UI_MemSetting+0x180>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d103      	bne.n	8007880 <UI_MemSetting+0x64>
 8007878:	4b48      	ldr	r3, [pc, #288]	; (800799c <UI_MemSetting+0x180>)
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e7d6      	b.n	800782e <UI_MemSetting+0x12>
 8007880:	4b46      	ldr	r3, [pc, #280]	; (800799c <UI_MemSetting+0x180>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	b2da      	uxtb	r2, r3
 8007888:	4b44      	ldr	r3, [pc, #272]	; (800799c <UI_MemSetting+0x180>)
 800788a:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 800788c:	e7cf      	b.n	800782e <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00e      	beq.n	80078b6 <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 8007898:	4b40      	ldr	r3, [pc, #256]	; (800799c <UI_MemSetting+0x180>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <UI_MemSetting+0x8c>
 80078a0:	4b3e      	ldr	r3, [pc, #248]	; (800799c <UI_MemSetting+0x180>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e7c2      	b.n	800782e <UI_MemSetting+0x12>
 80078a8:	4b3c      	ldr	r3, [pc, #240]	; (800799c <UI_MemSetting+0x180>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	4b3a      	ldr	r3, [pc, #232]	; (800799c <UI_MemSetting+0x180>)
 80078b2:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 80078b4:	e7bb      	b.n	800782e <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d004      	beq.n	80078ca <UI_MemSetting+0xae>
			num_menu = 0;
 80078c0:	4b36      	ldr	r3, [pc, #216]	; (800799c <UI_MemSetting+0x180>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 80078c6:	2302      	movs	r3, #2
 80078c8:	e060      	b.n	800798c <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <UI_MemSetting+0xc2>
			num_menu = 0;
 80078d4:	4b31      	ldr	r3, [pc, #196]	; (800799c <UI_MemSetting+0x180>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 80078da:	2307      	movs	r3, #7
 80078dc:	e056      	b.n	800798c <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 80078de:	4b2f      	ldr	r3, [pc, #188]	; (800799c <UI_MemSetting+0x180>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d027      	beq.n	8007936 <UI_MemSetting+0x11a>
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	dca9      	bgt.n	800783e <UI_MemSetting+0x22>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <UI_MemSetting+0xd8>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d018      	beq.n	8007924 <UI_MemSetting+0x108>
 80078f2:	e04a      	b.n	800798a <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d042      	beq.n	8007984 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 80078fe:	4928      	ldr	r1, [pc, #160]	; (80079a0 <UI_MemSetting+0x184>)
 8007900:	4828      	ldr	r0, [pc, #160]	; (80079a4 <UI_MemSetting+0x188>)
 8007902:	f7f9 ffc9 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8007906:	f7fc ff0d 	bl	8004724 <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 800790a:	f7fd f801 	bl	8004910 <Storage_PlanInit>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0f8      	beq.n	8007906 <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 8007914:	4924      	ldr	r1, [pc, #144]	; (80079a8 <UI_MemSetting+0x18c>)
 8007916:	4823      	ldr	r0, [pc, #140]	; (80079a4 <UI_MemSetting+0x188>)
 8007918:	f7f9 ffbe 	bl	8001898 <DISP_DisplayText>
				HAL_Delay(200);
 800791c:	20c8      	movs	r0, #200	; 0xc8
 800791e:	f000 fe75 	bl	800860c <HAL_Delay>
				goto ui_mem;
 8007922:	e784      	b.n	800782e <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d02c      	beq.n	8007988 <UI_MemSetting+0x16c>
				num_menu = 3;
 800792e:	4b1b      	ldr	r3, [pc, #108]	; (800799c <UI_MemSetting+0x180>)
 8007930:	2203      	movs	r2, #3
 8007932:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007934:	e028      	b.n	8007988 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 8007936:	491d      	ldr	r1, [pc, #116]	; (80079ac <UI_MemSetting+0x190>)
 8007938:	481d      	ldr	r0, [pc, #116]	; (80079b0 <UI_MemSetting+0x194>)
 800793a:	f7f9 ffad 	bl	8001898 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 800793e:	f7fd ff35 	bl	80057ac <UI_ReadButton>
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <UI_MemSetting+0x13c>
					num_menu = 1;
 8007950:	4b12      	ldr	r3, [pc, #72]	; (800799c <UI_MemSetting+0x180>)
 8007952:	2201      	movs	r2, #1
 8007954:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 8007956:	e76a      	b.n	800782e <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0ed      	beq.n	800793e <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 8007962:	4914      	ldr	r1, [pc, #80]	; (80079b4 <UI_MemSetting+0x198>)
 8007964:	4812      	ldr	r0, [pc, #72]	; (80079b0 <UI_MemSetting+0x194>)
 8007966:	f7f9 ff97 	bl	8001898 <DISP_DisplayText>
					Storage_CleanInit();
 800796a:	f7fd fa37 	bl	8004ddc <Storage_CleanInit>
					HAL_Delay(1000);
 800796e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007972:	f000 fe4b 	bl	800860c <HAL_Delay>
					HAL_NVIC_SystemReset();
 8007976:	f001 fcb4 	bl	80092e2 <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 800797a:	e7e0      	b.n	800793e <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800797c:	bf00      	nop
 800797e:	e75e      	b.n	800783e <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 8007980:	bf00      	nop
 8007982:	e75c      	b.n	800783e <UI_MemSetting+0x22>
			break;
 8007984:	bf00      	nop
 8007986:	e75a      	b.n	800783e <UI_MemSetting+0x22>
			break;
 8007988:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800798a:	e758      	b.n	800783e <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	080108bc 	.word	0x080108bc
 8007998:	20000eec 	.word	0x20000eec
 800799c:	20000faf 	.word	0x20000faf
 80079a0:	08010890 	.word	0x08010890
 80079a4:	20000ec8 	.word	0x20000ec8
 80079a8:	0801089c 	.word	0x0801089c
 80079ac:	080108c4 	.word	0x080108c4
 80079b0:	20000f09 	.word	0x20000f09
 80079b4:	080108d4 	.word	0x080108d4

080079b8 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	4a4b      	ldr	r2, [pc, #300]	; (8007af4 <UI_PIDSettingDisplay+0x13c>)
 80079c6:	f992 2000 	ldrsb.w	r2, [r2]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	dd06      	ble.n	80079de <UI_PIDSettingDisplay+0x26>
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	3b03      	subs	r3, #3
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	b25a      	sxtb	r2, r3
 80079d8:	4b46      	ldr	r3, [pc, #280]	; (8007af4 <UI_PIDSettingDisplay+0x13c>)
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e009      	b.n	80079f2 <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	4a44      	ldr	r2, [pc, #272]	; (8007af4 <UI_PIDSettingDisplay+0x13c>)
 80079e2:	f992 2000 	ldrsb.w	r2, [r2]
 80079e6:	4293      	cmp	r3, r2
 80079e8:	da03      	bge.n	80079f2 <UI_PIDSettingDisplay+0x3a>
 80079ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80079ee:	4b41      	ldr	r3, [pc, #260]	; (8007af4 <UI_PIDSettingDisplay+0x13c>)
 80079f0:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 80079f2:	2300      	movs	r3, #0
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
 80079f6:	e074      	b.n	8007ae2 <UI_PIDSettingDisplay+0x12a>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80079f8:	4b3e      	ldr	r3, [pc, #248]	; (8007af4 <UI_PIDSettingDisplay+0x13c>)
 80079fa:	f993 3000 	ldrsb.w	r3, [r3]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	441a      	add	r2, r3
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d109      	bne.n	8007a1e <UI_PIDSettingDisplay+0x66>
 8007a0a:	493b      	ldr	r1, [pc, #236]	; (8007af8 <UI_PIDSettingDisplay+0x140>)
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	4613      	mov	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	440b      	add	r3, r1
 8007a16:	3302      	adds	r3, #2
 8007a18:	2201      	movs	r2, #1
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e008      	b.n	8007a30 <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007a1e:	4936      	ldr	r1, [pc, #216]	; (8007af8 <UI_PIDSettingDisplay+0x140>)
 8007a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a22:	4613      	mov	r3, r2
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	440b      	add	r3, r1
 8007a2a:	3302      	adds	r3, #2
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8007a30:	4b30      	ldr	r3, [pc, #192]	; (8007af4 <UI_PIDSettingDisplay+0x13c>)
 8007a32:	f993 3000 	ldrsb.w	r3, [r3]
 8007a36:	461a      	mov	r2, r3
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	4413      	add	r3, r2
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d841      	bhi.n	8007ac4 <UI_PIDSettingDisplay+0x10c>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <UI_PIDSettingDisplay+0x90>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a73 	.word	0x08007a73
 8007a50:	08007a8d 	.word	0x08007a8d
 8007a54:	08007aa7 	.word	0x08007aa7
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 8007a58:	4b28      	ldr	r3, [pc, #160]	; (8007afc <UI_PIDSettingDisplay+0x144>)
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7f8 fd73 	bl	8000548 <__aeabi_f2d>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	f107 000c 	add.w	r0, r7, #12
 8007a6a:	4925      	ldr	r1, [pc, #148]	; (8007b00 <UI_PIDSettingDisplay+0x148>)
 8007a6c:	f006 fc20 	bl	800e2b0 <siprintf>
			break;
 8007a70:	e028      	b.n	8007ac4 <UI_PIDSettingDisplay+0x10c>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 8007a72:	4b22      	ldr	r3, [pc, #136]	; (8007afc <UI_PIDSettingDisplay+0x144>)
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7f8 fd66 	bl	8000548 <__aeabi_f2d>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	f107 000c 	add.w	r0, r7, #12
 8007a84:	491f      	ldr	r1, [pc, #124]	; (8007b04 <UI_PIDSettingDisplay+0x14c>)
 8007a86:	f006 fc13 	bl	800e2b0 <siprintf>
			break;
 8007a8a:	e01b      	b.n	8007ac4 <UI_PIDSettingDisplay+0x10c>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 8007a8c:	4b1b      	ldr	r3, [pc, #108]	; (8007afc <UI_PIDSettingDisplay+0x144>)
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7f8 fd59 	bl	8000548 <__aeabi_f2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	f107 000c 	add.w	r0, r7, #12
 8007a9e:	491a      	ldr	r1, [pc, #104]	; (8007b08 <UI_PIDSettingDisplay+0x150>)
 8007aa0:	f006 fc06 	bl	800e2b0 <siprintf>
			break;
 8007aa4:	e00e      	b.n	8007ac4 <UI_PIDSettingDisplay+0x10c>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <UI_PIDSettingDisplay+0x144>)
 8007aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <UI_PIDSettingDisplay+0xfc>
 8007ab0:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <UI_PIDSettingDisplay+0x154>)
 8007ab2:	e000      	b.n	8007ab6 <UI_PIDSettingDisplay+0xfe>
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <UI_PIDSettingDisplay+0x158>)
 8007ab6:	f107 030c 	add.w	r3, r7, #12
 8007aba:	4916      	ldr	r1, [pc, #88]	; (8007b14 <UI_PIDSettingDisplay+0x15c>)
 8007abc:	4618      	mov	r0, r3
 8007abe:	f006 fbf7 	bl	800e2b0 <siprintf>
			break;
 8007ac2:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8007ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	4a0a      	ldr	r2, [pc, #40]	; (8007af8 <UI_PIDSettingDisplay+0x140>)
 8007ace:	4413      	add	r3, r2
 8007ad0:	f107 020c 	add.w	r2, r7, #12
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7f9 fede 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	3301      	adds	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	dd87      	ble.n	80079f8 <UI_PIDSettingDisplay+0x40>
	}
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	3728      	adds	r7, #40	; 0x28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000fb0 	.word	0x20000fb0
 8007af8:	20000f80 	.word	0x20000f80
 8007afc:	20000d34 	.word	0x20000d34
 8007b00:	080108dc 	.word	0x080108dc
 8007b04:	080108e8 	.word	0x080108e8
 8007b08:	080108f4 	.word	0x080108f4
 8007b0c:	08010900 	.word	0x08010900
 8007b10:	08010908 	.word	0x08010908
 8007b14:	08010910 	.word	0x08010910

08007b18 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8007b18:	b590      	push	{r4, r7, lr}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8007b26:	49a0      	ldr	r1, [pc, #640]	; (8007da8 <UI_PIDSetting+0x290>)
 8007b28:	48a0      	ldr	r0, [pc, #640]	; (8007dac <UI_PIDSetting+0x294>)
 8007b2a:	f7f9 feb5 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 8007b2e:	4ba0      	ldr	r3, [pc, #640]	; (8007db0 <UI_PIDSetting+0x298>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff ff40 	bl	80079b8 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8007b38:	f000 fd5c 	bl	80085f4 <HAL_GetTick>
 8007b3c:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 8007b3e:	f000 fd59 	bl	80085f4 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	7bba      	ldrb	r2, [r7, #14]
 8007b4a:	2a01      	cmp	r2, #1
 8007b4c:	d101      	bne.n	8007b52 <UI_PIDSetting+0x3a>
 8007b4e:	2219      	movs	r2, #25
 8007b50:	e000      	b.n	8007b54 <UI_PIDSetting+0x3c>
 8007b52:	2246      	movs	r2, #70	; 0x46
 8007b54:	429a      	cmp	r2, r3
 8007b56:	f200 816d 	bhi.w	8007e34 <UI_PIDSetting+0x31c>
		bt2 = UI_ReadButton();
 8007b5a:	f7fd fe27 	bl	80057ac <UI_ReadButton>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8007b62:	7bfa      	ldrb	r2, [r7, #15]
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d103      	bne.n	8007b72 <UI_PIDSetting+0x5a>
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8163 	beq.w	8007e38 <UI_PIDSetting+0x320>
		bt = bt2;
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d010      	beq.n	8007ba2 <UI_PIDSetting+0x8a>
			if(num_menu==3) num_menu = 0; else num_menu++;
 8007b80:	4b8b      	ldr	r3, [pc, #556]	; (8007db0 <UI_PIDSetting+0x298>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d103      	bne.n	8007b90 <UI_PIDSetting+0x78>
 8007b88:	4b89      	ldr	r3, [pc, #548]	; (8007db0 <UI_PIDSetting+0x298>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e005      	b.n	8007b9c <UI_PIDSetting+0x84>
 8007b90:	4b87      	ldr	r3, [pc, #540]	; (8007db0 <UI_PIDSetting+0x298>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	4b85      	ldr	r3, [pc, #532]	; (8007db0 <UI_PIDSetting+0x298>)
 8007b9a:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 8007ba0:	e7c5      	b.n	8007b2e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d010      	beq.n	8007bce <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 3; else num_menu--;
 8007bac:	4b80      	ldr	r3, [pc, #512]	; (8007db0 <UI_PIDSetting+0x298>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d103      	bne.n	8007bbc <UI_PIDSetting+0xa4>
 8007bb4:	4b7e      	ldr	r3, [pc, #504]	; (8007db0 <UI_PIDSetting+0x298>)
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e005      	b.n	8007bc8 <UI_PIDSetting+0xb0>
 8007bbc:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <UI_PIDSetting+0x298>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	4b7a      	ldr	r3, [pc, #488]	; (8007db0 <UI_PIDSetting+0x298>)
 8007bc6:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 8007bcc:	e7af      	b.n	8007b2e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <UI_PIDSetting+0xca>
			num_menu = 0;
 8007bd8:	4b75      	ldr	r3, [pc, #468]	; (8007db0 <UI_PIDSetting+0x298>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8007bde:	2302      	movs	r3, #2
 8007be0:	e12e      	b.n	8007e40 <UI_PIDSetting+0x328>
		}
		else if(bt & SW_BK_PRESS) {
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <UI_PIDSetting+0xea>
			num_menu = 0;
 8007bec:	4b70      	ldr	r3, [pc, #448]	; (8007db0 <UI_PIDSetting+0x298>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8007bf2:	4970      	ldr	r1, [pc, #448]	; (8007db4 <UI_PIDSetting+0x29c>)
 8007bf4:	4870      	ldr	r0, [pc, #448]	; (8007db8 <UI_PIDSetting+0x2a0>)
 8007bf6:	f7f9 fe4f 	bl	8001898 <DISP_DisplayText>
			Storage_SetPID();
 8007bfa:	f7fc ff6f 	bl	8004adc <Storage_SetPID>
			return UI_SET;
 8007bfe:	2307      	movs	r3, #7
 8007c00:	e11e      	b.n	8007e40 <UI_PIDSetting+0x328>
		}
		switch(num_menu) {
 8007c02:	4b6b      	ldr	r3, [pc, #428]	; (8007db0 <UI_PIDSetting+0x298>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	dc02      	bgt.n	8007c10 <UI_PIDSetting+0xf8>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da04      	bge.n	8007c18 <UI_PIDSetting+0x100>
 8007c0e:	e116      	b.n	8007e3e <UI_PIDSetting+0x326>
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	f000 80fa 	beq.w	8007e0a <UI_PIDSetting+0x2f2>
 8007c16:	e112      	b.n	8007e3e <UI_PIDSetting+0x326>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d12c      	bne.n	8007c7c <UI_PIDSetting+0x164>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=1.0;
 8007c22:	4b63      	ldr	r3, [pc, #396]	; (8007db0 <UI_PIDSetting+0x298>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	4a65      	ldr	r2, [pc, #404]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007c28:	3306      	adds	r3, #6
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	edd3 7a00 	vldr	s15, [r3]
 8007c32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3a:	d108      	bne.n	8007c4e <UI_PIDSetting+0x136>
 8007c3c:	4b5c      	ldr	r3, [pc, #368]	; (8007db0 <UI_PIDSetting+0x298>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	4a5e      	ldr	r2, [pc, #376]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007c42:	3306      	adds	r3, #6
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	4a5d      	ldr	r2, [pc, #372]	; (8007dc0 <UI_PIDSetting+0x2a8>)
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e013      	b.n	8007c76 <UI_PIDSetting+0x15e>
 8007c4e:	4b58      	ldr	r3, [pc, #352]	; (8007db0 <UI_PIDSetting+0x298>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	4a5a      	ldr	r2, [pc, #360]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007c54:	3306      	adds	r3, #6
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	edd3 7a00 	vldr	s15, [r3]
 8007c5e:	4b54      	ldr	r3, [pc, #336]	; (8007db0 <UI_PIDSetting+0x298>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c6a:	4a54      	ldr	r2, [pc, #336]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007c6c:	3306      	adds	r3, #6
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8007c7a:	e758      	b.n	8007b2e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d12f      	bne.n	8007ce6 <UI_PIDSetting+0x1ce>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 8007c86:	4b4a      	ldr	r3, [pc, #296]	; (8007db0 <UI_PIDSetting+0x298>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	4a4c      	ldr	r2, [pc, #304]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007c8c:	3306      	adds	r3, #6
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	edd3 7a00 	vldr	s15, [r3]
 8007c96:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007dc4 <UI_PIDSetting+0x2ac>
 8007c9a:	eef4 7a47 	vcmp.f32	s15, s14
 8007c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca2:	d109      	bne.n	8007cb8 <UI_PIDSetting+0x1a0>
 8007ca4:	4b42      	ldr	r3, [pc, #264]	; (8007db0 <UI_PIDSetting+0x298>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	4a44      	ldr	r2, [pc, #272]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007caa:	3306      	adds	r3, #6
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e013      	b.n	8007ce0 <UI_PIDSetting+0x1c8>
 8007cb8:	4b3d      	ldr	r3, [pc, #244]	; (8007db0 <UI_PIDSetting+0x298>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	4a3f      	ldr	r2, [pc, #252]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007cbe:	3306      	adds	r3, #6
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	edd3 7a00 	vldr	s15, [r3]
 8007cc8:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <UI_PIDSetting+0x298>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cd4:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007cd6:	3306      	adds	r3, #6
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8007ce4:	e723      	b.n	8007b2e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cec:	2b30      	cmp	r3, #48	; 0x30
 8007cee:	d136      	bne.n	8007d5e <UI_PIDSetting+0x246>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=0.10;
 8007cf0:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <UI_PIDSetting+0x298>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	4a31      	ldr	r2, [pc, #196]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007cf6:	3306      	adds	r3, #6
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	edd3 7a00 	vldr	s15, [r3]
 8007d00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d08:	d108      	bne.n	8007d1c <UI_PIDSetting+0x204>
 8007d0a:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <UI_PIDSetting+0x298>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4a2b      	ldr	r2, [pc, #172]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007d10:	3306      	adds	r3, #6
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	4a2a      	ldr	r2, [pc, #168]	; (8007dc0 <UI_PIDSetting+0x2a8>)
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e01d      	b.n	8007d58 <UI_PIDSetting+0x240>
 8007d1c:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <UI_PIDSetting+0x298>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	4a26      	ldr	r2, [pc, #152]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007d22:	3306      	adds	r3, #6
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fc0c 	bl	8000548 <__aeabi_f2d>
 8007d30:	a31b      	add	r3, pc, #108	; (adr r3, 8007da0 <UI_PIDSetting+0x288>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f7f8 faa7 	bl	8000288 <__aeabi_dsub>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	491c      	ldr	r1, [pc, #112]	; (8007db0 <UI_PIDSetting+0x298>)
 8007d40:	7809      	ldrb	r1, [r1, #0]
 8007d42:	460c      	mov	r4, r1
 8007d44:	4610      	mov	r0, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	f7f8 ff4e 	bl	8000be8 <__aeabi_d2f>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	491b      	ldr	r1, [pc, #108]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007d50:	1da3      	adds	r3, r4, #6
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8007d5c:	e6e7      	b.n	8007b2e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8007d64:	2b22      	cmp	r3, #34	; 0x22
 8007d66:	d169      	bne.n	8007e3c <UI_PIDSetting+0x324>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 8007d68:	4b11      	ldr	r3, [pc, #68]	; (8007db0 <UI_PIDSetting+0x298>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007d6e:	3306      	adds	r3, #6
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	edd3 7a00 	vldr	s15, [r3]
 8007d78:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007dc4 <UI_PIDSetting+0x2ac>
 8007d7c:	eef4 7a47 	vcmp.f32	s15, s14
 8007d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d84:	d120      	bne.n	8007dc8 <UI_PIDSetting+0x2b0>
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <UI_PIDSetting+0x298>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <UI_PIDSetting+0x2a4>)
 8007d8c:	3306      	adds	r3, #6
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	e034      	b.n	8007e04 <UI_PIDSetting+0x2ec>
 8007d9a:	bf00      	nop
 8007d9c:	f3af 8000 	nop.w
 8007da0:	9999999a 	.word	0x9999999a
 8007da4:	3fb99999 	.word	0x3fb99999
 8007da8:	08010914 	.word	0x08010914
 8007dac:	20000eec 	.word	0x20000eec
 8007db0:	20000fb1 	.word	0x20000fb1
 8007db4:	08010918 	.word	0x08010918
 8007db8:	20000ec8 	.word	0x20000ec8
 8007dbc:	20000d34 	.word	0x20000d34
 8007dc0:	42c60000 	.word	0x42c60000
 8007dc4:	42c60000 	.word	0x42c60000
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <UI_PIDSetting+0x338>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	4a21      	ldr	r2, [pc, #132]	; (8007e54 <UI_PIDSetting+0x33c>)
 8007dce:	3306      	adds	r3, #6
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7f8 fbb6 	bl	8000548 <__aeabi_f2d>
 8007ddc:	a31a      	add	r3, pc, #104	; (adr r3, 8007e48 <UI_PIDSetting+0x330>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fa53 	bl	800028c <__adddf3>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4919      	ldr	r1, [pc, #100]	; (8007e50 <UI_PIDSetting+0x338>)
 8007dec:	7809      	ldrb	r1, [r1, #0]
 8007dee:	460c      	mov	r4, r1
 8007df0:	4610      	mov	r0, r2
 8007df2:	4619      	mov	r1, r3
 8007df4:	f7f8 fef8 	bl	8000be8 <__aeabi_d2f>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4916      	ldr	r1, [pc, #88]	; (8007e54 <UI_PIDSetting+0x33c>)
 8007dfc:	1da3      	adds	r3, r4, #6
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8007e08:	e691      	b.n	8007b2e <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	f003 0312 	and.w	r3, r3, #18
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f43f ae94 	beq.w	8007b3e <UI_PIDSetting+0x26>
				plan.status_pid = !plan.status_pid;
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <UI_PIDSetting+0x33c>)
 8007e18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf0c      	ite	eq
 8007e20:	2301      	moveq	r3, #1
 8007e22:	2300      	movne	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <UI_PIDSetting+0x33c>)
 8007e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8007e32:	e67c      	b.n	8007b2e <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 8007e34:	bf00      	nop
 8007e36:	e682      	b.n	8007b3e <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 8007e38:	bf00      	nop
 8007e3a:	e680      	b.n	8007b3e <UI_PIDSetting+0x26>
			break;
 8007e3c:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 8007e3e:	e67e      	b.n	8007b3e <UI_PIDSetting+0x26>
			}
		}
	}
	return UI_IDLE;
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	9999999a 	.word	0x9999999a
 8007e4c:	3fb99999 	.word	0x3fb99999
 8007e50:	20000fb1 	.word	0x20000fb1
 8007e54:	20000d34 	.word	0x20000d34

08007e58 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
	for(int i=2; i<4; i++) {
 8007e62:	2302      	movs	r3, #2
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
 8007e66:	e040      	b.n	8007eea <UI_SpeedSetDisplay+0x92>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d109      	bne.n	8007e84 <UI_SpeedSetDisplay+0x2c>
 8007e70:	4922      	ldr	r1, [pc, #136]	; (8007efc <UI_SpeedSetDisplay+0xa4>)
 8007e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e74:	4613      	mov	r3, r2
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	3302      	adds	r3, #2
 8007e7e:	2201      	movs	r2, #1
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	e008      	b.n	8007e96 <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007e84:	491d      	ldr	r1, [pc, #116]	; (8007efc <UI_SpeedSetDisplay+0xa4>)
 8007e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	440b      	add	r3, r1
 8007e90:	3302      	adds	r3, #2
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d003      	beq.n	8007ea4 <UI_SpeedSetDisplay+0x4c>
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d00a      	beq.n	8007eb8 <UI_SpeedSetDisplay+0x60>
 8007ea2:	e013      	b.n	8007ecc <UI_SpeedSetDisplay+0x74>
		case 2:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 8007ea4:	4b16      	ldr	r3, [pc, #88]	; (8007f00 <UI_SpeedSetDisplay+0xa8>)
 8007ea6:	7d9b      	ldrb	r3, [r3, #22]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f107 030c 	add.w	r3, r7, #12
 8007eae:	4915      	ldr	r1, [pc, #84]	; (8007f04 <UI_SpeedSetDisplay+0xac>)
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f006 f9fd 	bl	800e2b0 <siprintf>
			break;
 8007eb6:	e009      	b.n	8007ecc <UI_SpeedSetDisplay+0x74>
		case 3:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 8007eb8:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <UI_SpeedSetDisplay+0xa8>)
 8007eba:	7ddb      	ldrb	r3, [r3, #23]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f107 030c 	add.w	r3, r7, #12
 8007ec2:	4911      	ldr	r1, [pc, #68]	; (8007f08 <UI_SpeedSetDisplay+0xb0>)
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f006 f9f3 	bl	800e2b0 <siprintf>
			break;
 8007eca:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8007ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ece:	4613      	mov	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	4a09      	ldr	r2, [pc, #36]	; (8007efc <UI_SpeedSetDisplay+0xa4>)
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f107 020c 	add.w	r2, r7, #12
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f9 fcda 	bl	8001898 <DISP_DisplayText>
	for(int i=2; i<4; i++) {
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	ddbb      	ble.n	8007e68 <UI_SpeedSetDisplay+0x10>
	}
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	3728      	adds	r7, #40	; 0x28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000f80 	.word	0x20000f80
 8007f00:	20000d34 	.word	0x20000d34
 8007f04:	08010924 	.word	0x08010924
 8007f08:	08010934 	.word	0x08010934

08007f0c <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 2;
 8007f12:	2302      	movs	r3, #2
 8007f14:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 8007f1e:	495e      	ldr	r1, [pc, #376]	; (8008098 <UI_SpeedSetting+0x18c>)
 8007f20:	485e      	ldr	r0, [pc, #376]	; (800809c <UI_SpeedSetting+0x190>)
 8007f22:	f7f9 fcb9 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff ff95 	bl	8007e58 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 8007f2e:	f000 fb61 	bl	80085f4 <HAL_GetTick>
 8007f32:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8007f34:	f000 fb5e 	bl	80085f4 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	7b7a      	ldrb	r2, [r7, #13]
 8007f40:	2a01      	cmp	r2, #1
 8007f42:	d101      	bne.n	8007f48 <UI_SpeedSetting+0x3c>
 8007f44:	221e      	movs	r2, #30
 8007f46:	e000      	b.n	8007f4a <UI_SpeedSetting+0x3e>
 8007f48:	2246      	movs	r2, #70	; 0x46
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	f200 809c 	bhi.w	8008088 <UI_SpeedSetting+0x17c>
		bt2 = UI_ReadButton();
 8007f50:	f7fd fc2c 	bl	80057ac <UI_ReadButton>
 8007f54:	4603      	mov	r3, r0
 8007f56:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d103      	bne.n	8007f68 <UI_SpeedSetting+0x5c>
 8007f60:	7b7b      	ldrb	r3, [r7, #13]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8092 	beq.w	800808c <UI_SpeedSetting+0x180>
		bt = bt2;
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <UI_SpeedSetting+0x80>
			if(num_menu!=3) num_menu++;
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d002      	beq.n	8007f82 <UI_SpeedSetting+0x76>
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8007f86:	f7fc fddf 	bl	8004b48 <Storage_SetSpeed>
			goto ui_mem;
 8007f8a:	e7cc      	b.n	8007f26 <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <UI_SpeedSetting+0xa8>
			if(num_menu==2) {
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d103      	bne.n	8007fa4 <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 8007f9c:	f7fc fdd4 	bl	8004b48 <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e075      	b.n	8008090 <UI_SpeedSetting+0x184>
			}
			else num_menu--;
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8007fae:	f7fc fdcb 	bl	8004b48 <Storage_SetSpeed>
			goto ui_mem;
 8007fb2:	e7b8      	b.n	8007f26 <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <UI_SpeedSetting+0xbe>
			num_menu = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 8007fc2:	f7fc fdc1 	bl	8004b48 <Storage_SetSpeed>
			return UI_HOMESCREEN;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e062      	b.n	8008090 <UI_SpeedSetting+0x184>
		}
		switch(num_menu) {
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d002      	beq.n	8007fd6 <UI_SpeedSetting+0xca>
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d02c      	beq.n	800802e <UI_SpeedSetting+0x122>
 8007fd4:	e05b      	b.n	800808e <UI_SpeedSetting+0x182>
		case 2 :
			if(bt & SW_LF_PRESS) {
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d010      	beq.n	8008002 <UI_SpeedSetting+0xf6>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 8007fe0:	4b2f      	ldr	r3, [pc, #188]	; (80080a0 <UI_SpeedSetting+0x194>)
 8007fe2:	7d9b      	ldrb	r3, [r3, #22]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <UI_SpeedSetting+0xe4>
 8007fe8:	4b2d      	ldr	r3, [pc, #180]	; (80080a0 <UI_SpeedSetting+0x194>)
 8007fea:	2263      	movs	r2, #99	; 0x63
 8007fec:	759a      	strb	r2, [r3, #22]
 8007fee:	e005      	b.n	8007ffc <UI_SpeedSetting+0xf0>
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <UI_SpeedSetting+0x194>)
 8007ff2:	7d9b      	ldrb	r3, [r3, #22]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	4b29      	ldr	r3, [pc, #164]	; (80080a0 <UI_SpeedSetting+0x194>)
 8007ffa:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008000:	e791      	b.n	8007f26 <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d010      	beq.n	800802e <UI_SpeedSetting+0x122>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 800800c:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <UI_SpeedSetting+0x194>)
 800800e:	7d9b      	ldrb	r3, [r3, #22]
 8008010:	2b63      	cmp	r3, #99	; 0x63
 8008012:	d103      	bne.n	800801c <UI_SpeedSetting+0x110>
 8008014:	4b22      	ldr	r3, [pc, #136]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008016:	2200      	movs	r2, #0
 8008018:	759a      	strb	r2, [r3, #22]
 800801a:	e005      	b.n	8008028 <UI_SpeedSetting+0x11c>
 800801c:	4b20      	ldr	r3, [pc, #128]	; (80080a0 <UI_SpeedSetting+0x194>)
 800801e:	7d9b      	ldrb	r3, [r3, #22]
 8008020:	3301      	adds	r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	4b1e      	ldr	r3, [pc, #120]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008026:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8008028:	2301      	movs	r3, #1
 800802a:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 800802c:	e77b      	b.n	8007f26 <UI_SpeedSetting+0x1a>
			}
		case 3 :
			if(bt & SW_LF_PRESS) {
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <UI_SpeedSetting+0x14e>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 8008038:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <UI_SpeedSetting+0x194>)
 800803a:	7ddb      	ldrb	r3, [r3, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d103      	bne.n	8008048 <UI_SpeedSetting+0x13c>
 8008040:	4b17      	ldr	r3, [pc, #92]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008042:	2263      	movs	r2, #99	; 0x63
 8008044:	75da      	strb	r2, [r3, #23]
 8008046:	e005      	b.n	8008054 <UI_SpeedSetting+0x148>
 8008048:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <UI_SpeedSetting+0x194>)
 800804a:	7ddb      	ldrb	r3, [r3, #23]
 800804c:	3b01      	subs	r3, #1
 800804e:	b2da      	uxtb	r2, r3
 8008050:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008052:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8008054:	2301      	movs	r3, #1
 8008056:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008058:	e765      	b.n	8007f26 <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	f43f af67 	beq.w	8007f34 <UI_SpeedSetting+0x28>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 8008066:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008068:	7ddb      	ldrb	r3, [r3, #23]
 800806a:	2b63      	cmp	r3, #99	; 0x63
 800806c:	d103      	bne.n	8008076 <UI_SpeedSetting+0x16a>
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008070:	2200      	movs	r2, #0
 8008072:	75da      	strb	r2, [r3, #23]
 8008074:	e005      	b.n	8008082 <UI_SpeedSetting+0x176>
 8008076:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008078:	7ddb      	ldrb	r3, [r3, #23]
 800807a:	3301      	adds	r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <UI_SpeedSetting+0x194>)
 8008080:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8008082:	2301      	movs	r3, #1
 8008084:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008086:	e74e      	b.n	8007f26 <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008088:	bf00      	nop
 800808a:	e753      	b.n	8007f34 <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 800808c:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 800808e:	e751      	b.n	8007f34 <UI_SpeedSetting+0x28>
			}

		}
	}
	return UI_IDLE;
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	08010944 	.word	0x08010944
 800809c:	20000eec 	.word	0x20000eec
 80080a0:	20000d34 	.word	0x20000d34

080080a4 <UI_Run>:



UI_Menu_Lists UI_Run() {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 80080aa:	f7fb f96b 	bl	8003384 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 80080ae:	f7fb f9ab 	bl	8003408 <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 80080b2:	4b3c      	ldr	r3, [pc, #240]	; (80081a4 <UI_Run+0x100>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	4b3b      	ldr	r3, [pc, #236]	; (80081a8 <UI_Run+0x104>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	4619      	mov	r1, r3
 80080be:	4b3b      	ldr	r3, [pc, #236]	; (80081ac <UI_Run+0x108>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	4638      	mov	r0, r7
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	460b      	mov	r3, r1
 80080c8:	4939      	ldr	r1, [pc, #228]	; (80081b0 <UI_Run+0x10c>)
 80080ca:	f006 f8f1 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&home_status, buff);
 80080ce:	463b      	mov	r3, r7
 80080d0:	4619      	mov	r1, r3
 80080d2:	4838      	ldr	r0, [pc, #224]	; (80081b4 <UI_Run+0x110>)
 80080d4:	f7f9 fbe0 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 80080d8:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <UI_Run+0x114>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <UI_Run+0x118>)
 80080e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080e4:	463b      	mov	r3, r7
 80080e6:	4936      	ldr	r1, [pc, #216]	; (80081c0 <UI_Run+0x11c>)
 80080e8:	4618      	mov	r0, r3
 80080ea:	f006 f8e1 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 80080ee:	463b      	mov	r3, r7
 80080f0:	4619      	mov	r1, r3
 80080f2:	4834      	ldr	r0, [pc, #208]	; (80081c4 <UI_Run+0x120>)
 80080f4:	f7f9 fbd0 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 80080f8:	4b33      	ldr	r3, [pc, #204]	; (80081c8 <UI_Run+0x124>)
 80080fa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80080fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008102:	ee17 3a90 	vmov	r3, s15
 8008106:	b21b      	sxth	r3, r3
 8008108:	461a      	mov	r2, r3
 800810a:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <UI_Run+0x124>)
 800810c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008114:	ee17 3a90 	vmov	r3, s15
 8008118:	b21b      	sxth	r3, r3
 800811a:	4638      	mov	r0, r7
 800811c:	492b      	ldr	r1, [pc, #172]	; (80081cc <UI_Run+0x128>)
 800811e:	f006 f8c7 	bl	800e2b0 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 8008122:	463b      	mov	r3, r7
 8008124:	4619      	mov	r1, r3
 8008126:	482a      	ldr	r0, [pc, #168]	; (80081d0 <UI_Run+0x12c>)
 8008128:	f7f9 fbb6 	bl	8001898 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 800812c:	4b29      	ldr	r3, [pc, #164]	; (80081d4 <UI_Run+0x130>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d027      	beq.n	8008188 <UI_Run+0xe4>
		Plan_UIRoutine();
 8008138:	f7fb f966 	bl	8003408 <Plan_UIRoutine>
		UI_ShowSensor();
 800813c:	f7fd fab8 	bl	80056b0 <UI_ShowSensor>
		bt = UI_ReadButton();
 8008140:	f7fd fb34 	bl	80057ac <UI_ReadButton>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	4b23      	ldr	r3, [pc, #140]	; (80081d8 <UI_Run+0x134>)
 800814a:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 800814c:	4b22      	ldr	r3, [pc, #136]	; (80081d8 <UI_Run+0x134>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <UI_Run+0xca>
			main_flag &=~0x01;
 8008158:	4b1e      	ldr	r3, [pc, #120]	; (80081d4 <UI_Run+0x130>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f023 0301 	bic.w	r3, r3, #1
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <UI_Run+0x130>)
 8008164:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 8008166:	f7fb f8e3 	bl	8003330 <Plan_Stop>
			return UI_HOMESCREEN;
 800816a:	2302      	movs	r3, #2
 800816c:	e016      	b.n	800819c <UI_Run+0xf8>
		}
		if(main_flag & 0x80) {
 800816e:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <UI_Run+0x130>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b25b      	sxtb	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	dad9      	bge.n	800812c <UI_Run+0x88>
			main_flag &=~0x80;
 8008178:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <UI_Run+0x130>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008180:	b2da      	uxtb	r2, r3
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <UI_Run+0x130>)
 8008184:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 8008186:	e792      	b.n	80080ae <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8008188:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 800818a:	4914      	ldr	r1, [pc, #80]	; (80081dc <UI_Run+0x138>)
 800818c:	4814      	ldr	r0, [pc, #80]	; (80081e0 <UI_Run+0x13c>)
 800818e:	f7f9 fb83 	bl	8001898 <DISP_DisplayText>
	HAL_Delay(500);
 8008192:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008196:	f000 fa39 	bl	800860c <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 800819a:	2302      	movs	r3, #2
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000cad 	.word	0x20000cad
 80081a8:	20000cac 	.word	0x20000cac
 80081ac:	20000ca9 	.word	0x20000ca9
 80081b0:	08010608 	.word	0x08010608
 80081b4:	20000eec 	.word	0x20000eec
 80081b8:	20000d24 	.word	0x20000d24
 80081bc:	200002c4 	.word	0x200002c4
 80081c0:	0801094c 	.word	0x0801094c
 80081c4:	20000f8e 	.word	0x20000f8e
 80081c8:	20000a88 	.word	0x20000a88
 80081cc:	08010958 	.word	0x08010958
 80081d0:	20000f95 	.word	0x20000f95
 80081d4:	20000a6c 	.word	0x20000a6c
 80081d8:	20000fb2 	.word	0x20000fb2
 80081dc:	08010964 	.word	0x08010964
 80081e0:	20000ec8 	.word	0x20000ec8

080081e4 <UI_Init>:


void UI_Init() {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 80081e8:	f7fd fb64 	bl	80058b4 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 80081ec:	f7fd fcfe 	bl	8005bec <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 80081f0:	f7fd fe8c 	bl	8005f0c <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 80081f4:	f7fe fda4 	bl	8006d40 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 80081f8:	f7ff f84c 	bl	8007294 <UI_CPDisplayInit>
}
 80081fc:	bf00      	nop
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UI_Main>:

void UI_Main() {
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 8008204:	f7f9 fd12 	bl	8001c2c <DISP_ClearAll>
	switch(retval) {
 8008208:	4b3b      	ldr	r3, [pc, #236]	; (80082f8 <UI_Main+0xf8>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	3b01      	subs	r3, #1
 800820e:	2b0c      	cmp	r3, #12
 8008210:	d870      	bhi.n	80082f4 <UI_Main+0xf4>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <UI_Main+0x18>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	0800824d 	.word	0x0800824d
 800821c:	0800825b 	.word	0x0800825b
 8008220:	08008269 	.word	0x08008269
 8008224:	08008277 	.word	0x08008277
 8008228:	08008285 	.word	0x08008285
 800822c:	08008293 	.word	0x08008293
 8008230:	080082a1 	.word	0x080082a1
 8008234:	080082af 	.word	0x080082af
 8008238:	080082bd 	.word	0x080082bd
 800823c:	080082cb 	.word	0x080082cb
 8008240:	080082d9 	.word	0x080082d9
 8008244:	080082f5 	.word	0x080082f5
 8008248:	080082e7 	.word	0x080082e7
	case UI_STARTUP:
		retval = UI_Startup();
 800824c:	f7fe ff52 	bl	80070f4 <UI_Startup>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <UI_Main+0xf8>)
 8008256:	701a      	strb	r2, [r3, #0]
		break;
 8008258:	e04c      	b.n	80082f4 <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 800825a:	f7fd fbfb 	bl	8005a54 <UI_HomeScreen>
 800825e:	4603      	mov	r3, r0
 8008260:	461a      	mov	r2, r3
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <UI_Main+0xf8>)
 8008264:	701a      	strb	r2, [r3, #0]
		break;
 8008266:	e045      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 8008268:	f7ff fe50 	bl	8007f0c <UI_SpeedSetting>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	4b21      	ldr	r3, [pc, #132]	; (80082f8 <UI_Main+0xf8>)
 8008272:	701a      	strb	r2, [r3, #0]
		break;
 8008274:	e03e      	b.n	80082f4 <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 8008276:	f7ff ff15 	bl	80080a4 <UI_Run>
 800827a:	4603      	mov	r3, r0
 800827c:	461a      	mov	r2, r3
 800827e:	4b1e      	ldr	r3, [pc, #120]	; (80082f8 <UI_Main+0xf8>)
 8008280:	701a      	strb	r2, [r3, #0]
		break;
 8008282:	e037      	b.n	80082f4 <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 8008284:	f7fe f996 	bl	80065b4 <UI_PlanSet>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <UI_Main+0xf8>)
 800828e:	701a      	strb	r2, [r3, #0]
		break;
 8008290:	e030      	b.n	80082f4 <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 8008292:	f7ff f9e1 	bl	8007658 <UI_PlanSelect>
 8008296:	4603      	mov	r3, r0
 8008298:	461a      	mov	r2, r3
 800829a:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <UI_Main+0xf8>)
 800829c:	701a      	strb	r2, [r3, #0]
		break;
 800829e:	e029      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 80082a0:	f7fd fd90 	bl	8005dc4 <UI_Setting>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <UI_Main+0xf8>)
 80082aa:	701a      	strb	r2, [r3, #0]
		break;
 80082ac:	e022      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 80082ae:	f7fe fe09 	bl	8006ec4 <UI_ADCThreshold>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <UI_Main+0xf8>)
 80082b8:	701a      	strb	r2, [r3, #0]
		break;
 80082ba:	e01b      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 80082bc:	f7fe fed2 	bl	8007064 <UI_AutoCalib>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <UI_Main+0xf8>)
 80082c6:	701a      	strb	r2, [r3, #0]
		break;
 80082c8:	e014      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 80082ca:	f7ff f8b9 	bl	8007440 <UI_CP>
 80082ce:	4603      	mov	r3, r0
 80082d0:	461a      	mov	r2, r3
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <UI_Main+0xf8>)
 80082d4:	701a      	strb	r2, [r3, #0]
		break;
 80082d6:	e00d      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 80082d8:	f7ff fc1e 	bl	8007b18 <UI_PIDSetting>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <UI_Main+0xf8>)
 80082e2:	701a      	strb	r2, [r3, #0]
		break;
 80082e4:	e006      	b.n	80082f4 <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 80082e6:	f7ff fa99 	bl	800781c <UI_MemSetting>
 80082ea:	4603      	mov	r3, r0
 80082ec:	461a      	mov	r2, r3
 80082ee:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <UI_Main+0xf8>)
 80082f0:	701a      	strb	r2, [r3, #0]
		break;
 80082f2:	bf00      	nop
	default:
		;
	}
}
 80082f4:	bf00      	nop
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000319 	.word	0x20000319

080082fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008302:	4a12      	ldr	r2, [pc, #72]	; (800834c <MX_USART3_UART_Init+0x50>)
 8008304:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800830c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800830e:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008310:	2200      	movs	r2, #0
 8008312:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008316:	2200      	movs	r2, #0
 8008318:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800831a:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 800831c:	2200      	movs	r2, #0
 800831e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008322:	220c      	movs	r2, #12
 8008324:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008328:	2200      	movs	r2, #0
 800832a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 800832e:	2200      	movs	r2, #0
 8008330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008332:	4805      	ldr	r0, [pc, #20]	; (8008348 <MX_USART3_UART_Init+0x4c>)
 8008334:	f004 fc4e 	bl	800cbd4 <HAL_UART_Init>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800833e:	f7f9 fff4 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000fb4 	.word	0x20000fb4
 800834c:	40004800 	.word	0x40004800

08008350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	609a      	str	r2, [r3, #8]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a19      	ldr	r2, [pc, #100]	; (80083d4 <HAL_UART_MspInit+0x84>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d12c      	bne.n	80083cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	4b18      	ldr	r3, [pc, #96]	; (80083d8 <HAL_UART_MspInit+0x88>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <HAL_UART_MspInit+0x88>)
 800837c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008380:	6413      	str	r3, [r2, #64]	; 0x40
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <HAL_UART_MspInit+0x88>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <HAL_UART_MspInit+0x88>)
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	4a10      	ldr	r2, [pc, #64]	; (80083d8 <HAL_UART_MspInit+0x88>)
 8008398:	f043 0304 	orr.w	r3, r3, #4
 800839c:	6313      	str	r3, [r2, #48]	; 0x30
 800839e:	4b0e      	ldr	r3, [pc, #56]	; (80083d8 <HAL_UART_MspInit+0x88>)
 80083a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80083aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80083ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b0:	2302      	movs	r3, #2
 80083b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083b8:	2303      	movs	r3, #3
 80083ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80083bc:	2307      	movs	r3, #7
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	4619      	mov	r1, r3
 80083c6:	4805      	ldr	r0, [pc, #20]	; (80083dc <HAL_UART_MspInit+0x8c>)
 80083c8:	f001 fb0c 	bl	80099e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80083cc:	bf00      	nop
 80083ce:	3728      	adds	r7, #40	; 0x28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40004800 	.word	0x40004800
 80083d8:	40023800 	.word	0x40023800
 80083dc:	40020800 	.word	0x40020800

080083e0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083e4:	4b14      	ldr	r3, [pc, #80]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80083e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083ec:	4b12      	ldr	r3, [pc, #72]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80083ee:	2204      	movs	r2, #4
 80083f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80083f4:	2202      	movs	r2, #2
 80083f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083f8:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083fe:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008400:	2202      	movs	r2, #2
 8008402:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008406:	2200      	movs	r2, #0
 8008408:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800840a:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800840c:	2200      	movs	r2, #0
 800840e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008412:	2200      	movs	r2, #0
 8008414:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008416:	4b08      	ldr	r3, [pc, #32]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008418:	2200      	movs	r2, #0
 800841a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800841e:	2200      	movs	r2, #0
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008422:	4805      	ldr	r0, [pc, #20]	; (8008438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008424:	f002 fc6b 	bl	800acfe <HAL_PCD_Init>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800842e:	f7f9 ff7c 	bl	800232a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008432:	bf00      	nop
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000ff8 	.word	0x20000ff8

0800843c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	; 0x28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008444:	f107 0314 	add.w	r3, r7, #20
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	605a      	str	r2, [r3, #4]
 800844e:	609a      	str	r2, [r3, #8]
 8008450:	60da      	str	r2, [r3, #12]
 8008452:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800845c:	d132      	bne.n	80084c4 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800845e:	2300      	movs	r3, #0
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	4b1a      	ldr	r3, [pc, #104]	; (80084cc <HAL_PCD_MspInit+0x90>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	4a19      	ldr	r2, [pc, #100]	; (80084cc <HAL_PCD_MspInit+0x90>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	6313      	str	r3, [r2, #48]	; 0x30
 800846e:	4b17      	ldr	r3, [pc, #92]	; (80084cc <HAL_PCD_MspInit+0x90>)
 8008470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800847a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800847e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008480:	2302      	movs	r3, #2
 8008482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008488:	2303      	movs	r3, #3
 800848a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800848c:	230a      	movs	r3, #10
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	4619      	mov	r1, r3
 8008496:	480e      	ldr	r0, [pc, #56]	; (80084d0 <HAL_PCD_MspInit+0x94>)
 8008498:	f001 faa4 	bl	80099e4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <HAL_PCD_MspInit+0x90>)
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <HAL_PCD_MspInit+0x90>)
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	6353      	str	r3, [r2, #52]	; 0x34
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	4b07      	ldr	r3, [pc, #28]	; (80084cc <HAL_PCD_MspInit+0x90>)
 80084ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b0:	4a06      	ldr	r2, [pc, #24]	; (80084cc <HAL_PCD_MspInit+0x90>)
 80084b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084b6:	6453      	str	r3, [r2, #68]	; 0x44
 80084b8:	4b04      	ldr	r3, [pc, #16]	; (80084cc <HAL_PCD_MspInit+0x90>)
 80084ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084c4:	bf00      	nop
 80084c6:	3728      	adds	r7, #40	; 0x28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40023800 	.word	0x40023800
 80084d0:	40020000 	.word	0x40020000

080084d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80084d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800850c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80084d8:	480d      	ldr	r0, [pc, #52]	; (8008510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80084da:	490e      	ldr	r1, [pc, #56]	; (8008514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80084dc:	4a0e      	ldr	r2, [pc, #56]	; (8008518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80084de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084e0:	e002      	b.n	80084e8 <LoopCopyDataInit>

080084e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084e6:	3304      	adds	r3, #4

080084e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084ec:	d3f9      	bcc.n	80084e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084ee:	4a0b      	ldr	r2, [pc, #44]	; (800851c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80084f0:	4c0b      	ldr	r4, [pc, #44]	; (8008520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80084f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80084f4:	e001      	b.n	80084fa <LoopFillZerobss>

080084f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80084f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80084f8:	3204      	adds	r2, #4

080084fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80084fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80084fc:	d3fb      	bcc.n	80084f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80084fe:	f7fc fd57 	bl	8004fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008502:	f005 f931 	bl	800d768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008506:	f7f9 fded 	bl	80020e4 <main>
  bx  lr    
 800850a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800850c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008514:	200004f4 	.word	0x200004f4
  ldr r2, =_sidata
 8008518:	08010d84 	.word	0x08010d84
  ldr r2, =_sbss
 800851c:	200004f4 	.word	0x200004f4
  ldr r4, =_ebss
 8008520:	20001518 	.word	0x20001518

08008524 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008524:	e7fe      	b.n	8008524 <CAN1_RX0_IRQHandler>
	...

08008528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800852c:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <HAL_Init+0x40>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0d      	ldr	r2, [pc, #52]	; (8008568 <HAL_Init+0x40>)
 8008532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_Init+0x40>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_Init+0x40>)
 800853e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008544:	4b08      	ldr	r3, [pc, #32]	; (8008568 <HAL_Init+0x40>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a07      	ldr	r2, [pc, #28]	; (8008568 <HAL_Init+0x40>)
 800854a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800854e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008550:	2003      	movs	r0, #3
 8008552:	f000 fe91 	bl	8009278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008556:	200f      	movs	r0, #15
 8008558:	f000 f808 	bl	800856c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800855c:	f7fb fff0 	bl	8004540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	40023c00 	.word	0x40023c00

0800856c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008574:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <HAL_InitTick+0x54>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <HAL_InitTick+0x58>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	4619      	mov	r1, r3
 800857e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008582:	fbb3 f3f1 	udiv	r3, r3, r1
 8008586:	fbb2 f3f3 	udiv	r3, r2, r3
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fead 	bl	80092ea <HAL_SYSTICK_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e00e      	b.n	80085b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b0f      	cmp	r3, #15
 800859e:	d80a      	bhi.n	80085b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085a0:	2200      	movs	r2, #0
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	f000 fe71 	bl	800928e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085ac:	4a06      	ldr	r2, [pc, #24]	; (80085c8 <HAL_InitTick+0x5c>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e000      	b.n	80085b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	2000028c 	.word	0x2000028c
 80085c4:	20000320 	.word	0x20000320
 80085c8:	2000031c 	.word	0x2000031c

080085cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <HAL_IncTick+0x20>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <HAL_IncTick+0x24>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4413      	add	r3, r2
 80085dc:	4a04      	ldr	r2, [pc, #16]	; (80085f0 <HAL_IncTick+0x24>)
 80085de:	6013      	str	r3, [r2, #0]
}
 80085e0:	bf00      	nop
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20000320 	.word	0x20000320
 80085f0:	20001504 	.word	0x20001504

080085f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
  return uwTick;
 80085f8:	4b03      	ldr	r3, [pc, #12]	; (8008608 <HAL_GetTick+0x14>)
 80085fa:	681b      	ldr	r3, [r3, #0]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20001504 	.word	0x20001504

0800860c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008614:	f7ff ffee 	bl	80085f4 <HAL_GetTick>
 8008618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d005      	beq.n	8008632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <HAL_Delay+0x44>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4413      	add	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008632:	bf00      	nop
 8008634:	f7ff ffde 	bl	80085f4 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	429a      	cmp	r2, r3
 8008642:	d8f7      	bhi.n	8008634 <HAL_Delay+0x28>
  {
  }
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000320 	.word	0x20000320

08008654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e033      	b.n	80086d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d109      	bne.n	8008686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7f8 fd96 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f003 0310 	and.w	r3, r3, #16
 800868e:	2b00      	cmp	r3, #0
 8008690:	d118      	bne.n	80086c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800869a:	f023 0302 	bic.w	r3, r3, #2
 800869e:	f043 0202 	orr.w	r2, r3, #2
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fb78 	bl	8008d9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	f043 0201 	orr.w	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	641a      	str	r2, [r3, #64]	; 0x40
 80086c2:	e001      	b.n	80086c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	2300      	movs	r3, #0
 80086e8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d049      	beq.n	80087a4 <HAL_ADC_IRQHandler+0xca>
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d046      	beq.n	80087a4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	f003 0310 	and.w	r3, r3, #16
 800871e:	2b00      	cmp	r3, #0
 8008720:	d105      	bne.n	800872e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d12b      	bne.n	8008794 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008740:	2b00      	cmp	r3, #0
 8008742:	d127      	bne.n	8008794 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800874e:	2b00      	cmp	r3, #0
 8008750:	d006      	beq.n	8008760 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800875c:	2b00      	cmp	r3, #0
 800875e:	d119      	bne.n	8008794 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0220 	bic.w	r2, r2, #32
 800876e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d105      	bne.n	8008794 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	f043 0201 	orr.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f9 fdbd 	bl	8002314 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f06f 0212 	mvn.w	r2, #18
 80087a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d057      	beq.n	800886a <HAL_ADC_IRQHandler+0x190>
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d054      	beq.n	800886a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d139      	bne.n	800885a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d006      	beq.n	8008802 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d12b      	bne.n	800885a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800880c:	2b00      	cmp	r3, #0
 800880e:	d124      	bne.n	800885a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800881a:	2b00      	cmp	r3, #0
 800881c:	d11d      	bne.n	800885a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008822:	2b00      	cmp	r3, #0
 8008824:	d119      	bne.n	800885a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008834:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f043 0201 	orr.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc1c 	bl	8009098 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f06f 020c 	mvn.w	r2, #12
 8008868:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d017      	beq.n	80088b0 <HAL_ADC_IRQHandler+0x1d6>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d014      	beq.n	80088b0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	d10d      	bne.n	80088b0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f945 	bl	8008b30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0201 	mvn.w	r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088be:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d015      	beq.n	80088f2 <HAL_ADC_IRQHandler+0x218>
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d012      	beq.n	80088f2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d0:	f043 0202 	orr.w	r2, r3, #2
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f06f 0220 	mvn.w	r2, #32
 80088e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f92e 	bl	8008b44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0220 	mvn.w	r2, #32
 80088f0:	601a      	str	r2, [r3, #0]
  }
}
 80088f2:	bf00      	nop
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_ADC_Start_DMA+0x1e>
 8008916:	2302      	movs	r3, #2
 8008918:	e0e9      	b.n	8008aee <HAL_ADC_Start_DMA+0x1f2>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b01      	cmp	r3, #1
 800892e:	d018      	beq.n	8008962 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0201 	orr.w	r2, r2, #1
 800893e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008940:	4b6d      	ldr	r3, [pc, #436]	; (8008af8 <HAL_ADC_Start_DMA+0x1fc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a6d      	ldr	r2, [pc, #436]	; (8008afc <HAL_ADC_Start_DMA+0x200>)
 8008946:	fba2 2303 	umull	r2, r3, r2, r3
 800894a:	0c9a      	lsrs	r2, r3, #18
 800894c:	4613      	mov	r3, r2
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	4413      	add	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008954:	e002      	b.n	800895c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	3b01      	subs	r3, #1
 800895a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f9      	bne.n	8008956 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008970:	d107      	bne.n	8008982 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008980:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b01      	cmp	r3, #1
 800898e:	f040 80a1 	bne.w	8008ad4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800899a:	f023 0301 	bic.w	r3, r3, #1
 800899e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d007      	beq.n	80089c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80089bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d0:	d106      	bne.n	80089e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d6:	f023 0206 	bic.w	r2, r3, #6
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	645a      	str	r2, [r3, #68]	; 0x44
 80089de:	e002      	b.n	80089e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80089ee:	4b44      	ldr	r3, [pc, #272]	; (8008b00 <HAL_ADC_Start_DMA+0x204>)
 80089f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	4a43      	ldr	r2, [pc, #268]	; (8008b04 <HAL_ADC_Start_DMA+0x208>)
 80089f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	4a42      	ldr	r2, [pc, #264]	; (8008b08 <HAL_ADC_Start_DMA+0x20c>)
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	4a41      	ldr	r2, [pc, #260]	; (8008b0c <HAL_ADC_Start_DMA+0x210>)
 8008a08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008a12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	334c      	adds	r3, #76	; 0x4c
 8008a3e:	4619      	mov	r1, r3
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f000 fd0c 	bl	8009460 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d12a      	bne.n	8008aaa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a2d      	ldr	r2, [pc, #180]	; (8008b10 <HAL_ADC_Start_DMA+0x214>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d015      	beq.n	8008a8a <HAL_ADC_Start_DMA+0x18e>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a2c      	ldr	r2, [pc, #176]	; (8008b14 <HAL_ADC_Start_DMA+0x218>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d105      	bne.n	8008a74 <HAL_ADC_Start_DMA+0x178>
 8008a68:	4b25      	ldr	r3, [pc, #148]	; (8008b00 <HAL_ADC_Start_DMA+0x204>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00a      	beq.n	8008a8a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a27      	ldr	r2, [pc, #156]	; (8008b18 <HAL_ADC_Start_DMA+0x21c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d136      	bne.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
 8008a7e:	4b20      	ldr	r3, [pc, #128]	; (8008b00 <HAL_ADC_Start_DMA+0x204>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d130      	bne.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d129      	bne.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689a      	ldr	r2, [r3, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008aa6:	609a      	str	r2, [r3, #8]
 8008aa8:	e020      	b.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <HAL_ADC_Start_DMA+0x214>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d11b      	bne.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d114      	bne.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008ad0:	609a      	str	r2, [r3, #8]
 8008ad2:	e00b      	b.n	8008aec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	f043 0210 	orr.w	r2, r3, #16
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae4:	f043 0201 	orr.w	r2, r3, #1
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	2000028c 	.word	0x2000028c
 8008afc:	431bde83 	.word	0x431bde83
 8008b00:	40012300 	.word	0x40012300
 8008b04:	08008f95 	.word	0x08008f95
 8008b08:	0800904f 	.word	0x0800904f
 8008b0c:	0800906b 	.word	0x0800906b
 8008b10:	40012000 	.word	0x40012000
 8008b14:	40012100 	.word	0x40012100
 8008b18:	40012200 	.word	0x40012200

08008b1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_ADC_ConfigChannel+0x1c>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e105      	b.n	8008d80 <HAL_ADC_ConfigChannel+0x228>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d925      	bls.n	8008bd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68d9      	ldr	r1, [r3, #12]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	461a      	mov	r2, r3
 8008b92:	4613      	mov	r3, r2
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	3b1e      	subs	r3, #30
 8008b9a:	2207      	movs	r2, #7
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	43da      	mvns	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	400a      	ands	r2, r1
 8008ba8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68d9      	ldr	r1, [r3, #12]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	4618      	mov	r0, r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	4403      	add	r3, r0
 8008bc2:	3b1e      	subs	r3, #30
 8008bc4:	409a      	lsls	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	60da      	str	r2, [r3, #12]
 8008bce:	e022      	b.n	8008c16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6919      	ldr	r1, [r3, #16]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4613      	mov	r3, r2
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	4413      	add	r3, r2
 8008be4:	2207      	movs	r2, #7
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	43da      	mvns	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	400a      	ands	r2, r1
 8008bf2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6919      	ldr	r1, [r3, #16]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	4618      	mov	r0, r3
 8008c06:	4603      	mov	r3, r0
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	4403      	add	r3, r0
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b06      	cmp	r3, #6
 8008c1c:	d824      	bhi.n	8008c68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	3b05      	subs	r3, #5
 8008c30:	221f      	movs	r2, #31
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	43da      	mvns	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	400a      	ands	r2, r1
 8008c3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	3b05      	subs	r3, #5
 8008c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	635a      	str	r2, [r3, #52]	; 0x34
 8008c66:	e04c      	b.n	8008d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2b0c      	cmp	r3, #12
 8008c6e:	d824      	bhi.n	8008cba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	3b23      	subs	r3, #35	; 0x23
 8008c82:	221f      	movs	r2, #31
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	43da      	mvns	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	400a      	ands	r2, r1
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	3b23      	subs	r3, #35	; 0x23
 8008cac:	fa00 f203 	lsl.w	r2, r0, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8008cb8:	e023      	b.n	8008d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	3b41      	subs	r3, #65	; 0x41
 8008ccc:	221f      	movs	r2, #31
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	400a      	ands	r2, r1
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4618      	mov	r0, r3
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	3b41      	subs	r3, #65	; 0x41
 8008cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008d02:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <HAL_ADC_ConfigChannel+0x234>)
 8008d04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a21      	ldr	r2, [pc, #132]	; (8008d90 <HAL_ADC_ConfigChannel+0x238>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d109      	bne.n	8008d24 <HAL_ADC_ConfigChannel+0x1cc>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b12      	cmp	r3, #18
 8008d16:	d105      	bne.n	8008d24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <HAL_ADC_ConfigChannel+0x238>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d123      	bne.n	8008d76 <HAL_ADC_ConfigChannel+0x21e>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b10      	cmp	r3, #16
 8008d34:	d003      	beq.n	8008d3e <HAL_ADC_ConfigChannel+0x1e6>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b11      	cmp	r3, #17
 8008d3c:	d11b      	bne.n	8008d76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	d111      	bne.n	8008d76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008d52:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <HAL_ADC_ConfigChannel+0x23c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a10      	ldr	r2, [pc, #64]	; (8008d98 <HAL_ADC_ConfigChannel+0x240>)
 8008d58:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5c:	0c9a      	lsrs	r2, r3, #18
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008d68:	e002      	b.n	8008d70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f9      	bne.n	8008d6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	40012300 	.word	0x40012300
 8008d90:	40012000 	.word	0x40012000
 8008d94:	2000028c 	.word	0x2000028c
 8008d98:	431bde83 	.word	0x431bde83

08008d9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008da4:	4b79      	ldr	r3, [pc, #484]	; (8008f8c <ADC_Init+0x1f0>)
 8008da6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6859      	ldr	r1, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	021a      	lsls	r2, r3, #8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6859      	ldr	r1, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6899      	ldr	r1, [r3, #8]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2e:	4a58      	ldr	r2, [pc, #352]	; (8008f90 <ADC_Init+0x1f4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d022      	beq.n	8008e7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689a      	ldr	r2, [r3, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6899      	ldr	r1, [r3, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6899      	ldr	r1, [r3, #8]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	e00f      	b.n	8008e9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008e98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0202 	bic.w	r2, r2, #2
 8008ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6899      	ldr	r1, [r3, #8]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	7e1b      	ldrb	r3, [r3, #24]
 8008eb4:	005a      	lsls	r2, r3, #1
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01b      	beq.n	8008f00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ed6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008ee6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6859      	ldr	r1, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	035a      	lsls	r2, r3, #13
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	605a      	str	r2, [r3, #4]
 8008efe:	e007      	b.n	8008f10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	051a      	lsls	r2, r3, #20
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6899      	ldr	r1, [r3, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f52:	025a      	lsls	r2, r3, #9
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6899      	ldr	r1, [r3, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	029a      	lsls	r2, r3, #10
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	609a      	str	r2, [r3, #8]
}
 8008f80:	bf00      	nop
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	40012300 	.word	0x40012300
 8008f90:	0f000001 	.word	0x0f000001

08008f94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d13c      	bne.n	8009028 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d12b      	bne.n	8009020 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d127      	bne.n	8009020 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d006      	beq.n	8008fec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d119      	bne.n	8009020 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0220 	bic.w	r2, r2, #32
 8008ffa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009018:	f043 0201 	orr.w	r2, r3, #1
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7f9 f977 	bl	8002314 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009026:	e00e      	b.n	8009046 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7ff fd85 	bl	8008b44 <HAL_ADC_ErrorCallback>
}
 800903a:	e004      	b.n	8009046 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	4798      	blx	r3
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fd5d 	bl	8008b1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2240      	movs	r2, #64	; 0x40
 800907c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009082:	f043 0204 	orr.w	r2, r3, #4
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fd5a 	bl	8008b44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <__NVIC_SetPriorityGrouping+0x44>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090c8:	4013      	ands	r3, r2
 80090ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090de:	4a04      	ldr	r2, [pc, #16]	; (80090f0 <__NVIC_SetPriorityGrouping+0x44>)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	60d3      	str	r3, [r2, #12]
}
 80090e4:	bf00      	nop
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	e000ed00 	.word	0xe000ed00

080090f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <__NVIC_GetPriorityGrouping+0x18>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	0a1b      	lsrs	r3, r3, #8
 80090fe:	f003 0307 	and.w	r3, r3, #7
}
 8009102:	4618      	mov	r0, r3
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	e000ed00 	.word	0xe000ed00

08009110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800911a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911e:	2b00      	cmp	r3, #0
 8009120:	db0b      	blt.n	800913a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	f003 021f 	and.w	r2, r3, #31
 8009128:	4907      	ldr	r1, [pc, #28]	; (8009148 <__NVIC_EnableIRQ+0x38>)
 800912a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	2001      	movs	r0, #1
 8009132:	fa00 f202 	lsl.w	r2, r0, r2
 8009136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	e000e100 	.word	0xe000e100

0800914c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915c:	2b00      	cmp	r3, #0
 800915e:	db0a      	blt.n	8009176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	b2da      	uxtb	r2, r3
 8009164:	490c      	ldr	r1, [pc, #48]	; (8009198 <__NVIC_SetPriority+0x4c>)
 8009166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800916a:	0112      	lsls	r2, r2, #4
 800916c:	b2d2      	uxtb	r2, r2
 800916e:	440b      	add	r3, r1
 8009170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009174:	e00a      	b.n	800918c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	b2da      	uxtb	r2, r3
 800917a:	4908      	ldr	r1, [pc, #32]	; (800919c <__NVIC_SetPriority+0x50>)
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	3b04      	subs	r3, #4
 8009184:	0112      	lsls	r2, r2, #4
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	440b      	add	r3, r1
 800918a:	761a      	strb	r2, [r3, #24]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	e000e100 	.word	0xe000e100
 800919c:	e000ed00 	.word	0xe000ed00

080091a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f1c3 0307 	rsb	r3, r3, #7
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	bf28      	it	cs
 80091be:	2304      	movcs	r3, #4
 80091c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3304      	adds	r3, #4
 80091c6:	2b06      	cmp	r3, #6
 80091c8:	d902      	bls.n	80091d0 <NVIC_EncodePriority+0x30>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	3b03      	subs	r3, #3
 80091ce:	e000      	b.n	80091d2 <NVIC_EncodePriority+0x32>
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	43da      	mvns	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	401a      	ands	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091e8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	fa01 f303 	lsl.w	r3, r1, r3
 80091f2:	43d9      	mvns	r1, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091f8:	4313      	orrs	r3, r2
         );
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3724      	adds	r7, #36	; 0x24
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800920c:	f3bf 8f4f 	dsb	sy
}
 8009210:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009212:	4b06      	ldr	r3, [pc, #24]	; (800922c <__NVIC_SystemReset+0x24>)
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800921a:	4904      	ldr	r1, [pc, #16]	; (800922c <__NVIC_SystemReset+0x24>)
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <__NVIC_SystemReset+0x28>)
 800921e:	4313      	orrs	r3, r2
 8009220:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009222:	f3bf 8f4f 	dsb	sy
}
 8009226:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <__NVIC_SystemReset+0x20>
 800922c:	e000ed00 	.word	0xe000ed00
 8009230:	05fa0004 	.word	0x05fa0004

08009234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3b01      	subs	r3, #1
 8009240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009244:	d301      	bcc.n	800924a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009246:	2301      	movs	r3, #1
 8009248:	e00f      	b.n	800926a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <SysTick_Config+0x40>)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3b01      	subs	r3, #1
 8009250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009252:	210f      	movs	r1, #15
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	f7ff ff78 	bl	800914c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <SysTick_Config+0x40>)
 800925e:	2200      	movs	r2, #0
 8009260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009262:	4b04      	ldr	r3, [pc, #16]	; (8009274 <SysTick_Config+0x40>)
 8009264:	2207      	movs	r2, #7
 8009266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	e000e010 	.word	0xe000e010

08009278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ff13 	bl	80090ac <__NVIC_SetPriorityGrouping>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800928e:	b580      	push	{r7, lr}
 8009290:	b086      	sub	sp, #24
 8009292:	af00      	add	r7, sp, #0
 8009294:	4603      	mov	r3, r0
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80092a0:	f7ff ff28 	bl	80090f4 <__NVIC_GetPriorityGrouping>
 80092a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f7ff ff78 	bl	80091a0 <NVIC_EncodePriority>
 80092b0:	4602      	mov	r2, r0
 80092b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7ff ff47 	bl	800914c <__NVIC_SetPriority>
}
 80092be:	bf00      	nop
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	4603      	mov	r3, r0
 80092ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80092d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff ff1b 	bl	8009110 <__NVIC_EnableIRQ>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80092e6:	f7ff ff8f 	bl	8009208 <__NVIC_SystemReset>

080092ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff ff9e 	bl	8009234 <SysTick_Config>
 80092f8:	4603      	mov	r3, r0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009310:	f7ff f970 	bl	80085f4 <HAL_GetTick>
 8009314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e099      	b.n	8009454 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0201 	bic.w	r2, r2, #1
 800933e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009340:	e00f      	b.n	8009362 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009342:	f7ff f957 	bl	80085f4 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b05      	cmp	r3, #5
 800934e:	d908      	bls.n	8009362 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2203      	movs	r2, #3
 800935a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e078      	b.n	8009454 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e8      	bne.n	8009342 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4b38      	ldr	r3, [pc, #224]	; (800945c <HAL_DMA_Init+0x158>)
 800937c:	4013      	ands	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800938e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800939a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d107      	bne.n	80093cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c4:	4313      	orrs	r3, r2
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f023 0307 	bic.w	r3, r3, #7
 80093e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d117      	bne.n	8009426 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00e      	beq.n	8009426 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa6f 	bl	80098ec <DMA_CheckFifoParam>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2240      	movs	r2, #64	; 0x40
 8009418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009422:	2301      	movs	r3, #1
 8009424:	e016      	b.n	8009454 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa26 	bl	8009880 <DMA_CalcBaseAndBitshift>
 8009434:	4603      	mov	r3, r0
 8009436:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943c:	223f      	movs	r2, #63	; 0x3f
 800943e:	409a      	lsls	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	f010803f 	.word	0xf010803f

08009460 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009476:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_DMA_Start_IT+0x26>
 8009482:	2302      	movs	r3, #2
 8009484:	e040      	b.n	8009508 <HAL_DMA_Start_IT+0xa8>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b01      	cmp	r3, #1
 8009498:	d12f      	bne.n	80094fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	68b9      	ldr	r1, [r7, #8]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f9b8 	bl	8009824 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b8:	223f      	movs	r2, #63	; 0x3f
 80094ba:	409a      	lsls	r2, r3
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0216 	orr.w	r2, r2, #22
 80094ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d007      	beq.n	80094e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0208 	orr.w	r2, r2, #8
 80094e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0201 	orr.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	e005      	b.n	8009506 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009502:	2302      	movs	r3, #2
 8009504:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800951c:	4b8e      	ldr	r3, [pc, #568]	; (8009758 <HAL_DMA_IRQHandler+0x248>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a8e      	ldr	r2, [pc, #568]	; (800975c <HAL_DMA_IRQHandler+0x24c>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	0a9b      	lsrs	r3, r3, #10
 8009528:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953a:	2208      	movs	r2, #8
 800953c:	409a      	lsls	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01a      	beq.n	800957c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d013      	beq.n	800957c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0204 	bic.w	r2, r2, #4
 8009562:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	2208      	movs	r2, #8
 800956a:	409a      	lsls	r2, r3
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009574:	f043 0201 	orr.w	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009580:	2201      	movs	r2, #1
 8009582:	409a      	lsls	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4013      	ands	r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d012      	beq.n	80095b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800959e:	2201      	movs	r2, #1
 80095a0:	409a      	lsls	r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095aa:	f043 0202 	orr.w	r2, r3, #2
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b6:	2204      	movs	r2, #4
 80095b8:	409a      	lsls	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4013      	ands	r3, r2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d012      	beq.n	80095e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d4:	2204      	movs	r2, #4
 80095d6:	409a      	lsls	r2, r3
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e0:	f043 0204 	orr.w	r2, r3, #4
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ec:	2210      	movs	r2, #16
 80095ee:	409a      	lsls	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4013      	ands	r3, r2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d043      	beq.n	8009680 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d03c      	beq.n	8009680 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800960a:	2210      	movs	r2, #16
 800960c:	409a      	lsls	r2, r3
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d018      	beq.n	8009652 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d108      	bne.n	8009640 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	d024      	beq.n	8009680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	4798      	blx	r3
 800963e:	e01f      	b.n	8009680 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01b      	beq.n	8009680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3
 8009650:	e016      	b.n	8009680 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965c:	2b00      	cmp	r3, #0
 800965e:	d107      	bne.n	8009670 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0208 	bic.w	r2, r2, #8
 800966e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009684:	2220      	movs	r2, #32
 8009686:	409a      	lsls	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 808f 	beq.w	80097b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8087 	beq.w	80097b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a6:	2220      	movs	r2, #32
 80096a8:	409a      	lsls	r2, r3
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d136      	bne.n	8009728 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0216 	bic.w	r2, r2, #22
 80096c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	695a      	ldr	r2, [r3, #20]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d103      	bne.n	80096ea <HAL_DMA_IRQHandler+0x1da>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d007      	beq.n	80096fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 0208 	bic.w	r2, r2, #8
 80096f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096fe:	223f      	movs	r2, #63	; 0x3f
 8009700:	409a      	lsls	r2, r3
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971a:	2b00      	cmp	r3, #0
 800971c:	d07e      	beq.n	800981c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
        }
        return;
 8009726:	e079      	b.n	800981c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d01d      	beq.n	8009772 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10d      	bne.n	8009760 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009748:	2b00      	cmp	r3, #0
 800974a:	d031      	beq.n	80097b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
 8009754:	e02c      	b.n	80097b0 <HAL_DMA_IRQHandler+0x2a0>
 8009756:	bf00      	nop
 8009758:	2000028c 	.word	0x2000028c
 800975c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d023      	beq.n	80097b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
 8009770:	e01e      	b.n	80097b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10f      	bne.n	80097a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0210 	bic.w	r2, r2, #16
 800978e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d032      	beq.n	800981e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d022      	beq.n	800980a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2205      	movs	r2, #5
 80097c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0201 	bic.w	r2, r2, #1
 80097da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	3301      	adds	r3, #1
 80097e0:	60bb      	str	r3, [r7, #8]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d307      	bcc.n	80097f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1f2      	bne.n	80097dc <HAL_DMA_IRQHandler+0x2cc>
 80097f6:	e000      	b.n	80097fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80097f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d005      	beq.n	800981e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
 800981a:	e000      	b.n	800981e <HAL_DMA_IRQHandler+0x30e>
        return;
 800981c:	bf00      	nop
    }
  }
}
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009840:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d108      	bne.n	8009864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009862:	e007      	b.n	8009874 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	60da      	str	r2, [r3, #12]
}
 8009874:	bf00      	nop
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	3b10      	subs	r3, #16
 8009890:	4a14      	ldr	r2, [pc, #80]	; (80098e4 <DMA_CalcBaseAndBitshift+0x64>)
 8009892:	fba2 2303 	umull	r2, r3, r2, r3
 8009896:	091b      	lsrs	r3, r3, #4
 8009898:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800989a:	4a13      	ldr	r2, [pc, #76]	; (80098e8 <DMA_CalcBaseAndBitshift+0x68>)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d909      	bls.n	80098c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	1d1a      	adds	r2, r3, #4
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	659a      	str	r2, [r3, #88]	; 0x58
 80098c0:	e007      	b.n	80098d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	aaaaaaab 	.word	0xaaaaaaab
 80098e8:	08010990 	.word	0x08010990

080098ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d11f      	bne.n	8009946 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b03      	cmp	r3, #3
 800990a:	d856      	bhi.n	80099ba <DMA_CheckFifoParam+0xce>
 800990c:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <DMA_CheckFifoParam+0x28>)
 800990e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009912:	bf00      	nop
 8009914:	08009925 	.word	0x08009925
 8009918:	08009937 	.word	0x08009937
 800991c:	08009925 	.word	0x08009925
 8009920:	080099bb 	.word	0x080099bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d046      	beq.n	80099be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009934:	e043      	b.n	80099be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800993e:	d140      	bne.n	80099c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009944:	e03d      	b.n	80099c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800994e:	d121      	bne.n	8009994 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b03      	cmp	r3, #3
 8009954:	d837      	bhi.n	80099c6 <DMA_CheckFifoParam+0xda>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <DMA_CheckFifoParam+0x70>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	0800996d 	.word	0x0800996d
 8009960:	08009973 	.word	0x08009973
 8009964:	0800996d 	.word	0x0800996d
 8009968:	08009985 	.word	0x08009985
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	73fb      	strb	r3, [r7, #15]
      break;
 8009970:	e030      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d025      	beq.n	80099ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009982:	e022      	b.n	80099ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800998c:	d11f      	bne.n	80099ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009992:	e01c      	b.n	80099ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d903      	bls.n	80099a2 <DMA_CheckFifoParam+0xb6>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b03      	cmp	r3, #3
 800999e:	d003      	beq.n	80099a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80099a0:	e018      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	73fb      	strb	r3, [r7, #15]
      break;
 80099a6:	e015      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00e      	beq.n	80099d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
      break;
 80099b8:	e00b      	b.n	80099d2 <DMA_CheckFifoParam+0xe6>
      break;
 80099ba:	bf00      	nop
 80099bc:	e00a      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      break;
 80099be:	bf00      	nop
 80099c0:	e008      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      break;
 80099c2:	bf00      	nop
 80099c4:	e006      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      break;
 80099c6:	bf00      	nop
 80099c8:	e004      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      break;
 80099ca:	bf00      	nop
 80099cc:	e002      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <DMA_CheckFifoParam+0xe8>
      break;
 80099d2:	bf00      	nop
    }
  } 
  
  return status; 
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b089      	sub	sp, #36	; 0x24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099fa:	2300      	movs	r3, #0
 80099fc:	61fb      	str	r3, [r7, #28]
 80099fe:	e16b      	b.n	8009cd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a00:	2201      	movs	r2, #1
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	fa02 f303 	lsl.w	r3, r2, r3
 8009a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	4013      	ands	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	f040 815a 	bne.w	8009cd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f003 0303 	and.w	r3, r3, #3
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d005      	beq.n	8009a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d130      	bne.n	8009a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	2203      	movs	r2, #3
 8009a42:	fa02 f303 	lsl.w	r3, r2, r3
 8009a46:	43db      	mvns	r3, r3
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	43db      	mvns	r3, r3
 8009a76:	69ba      	ldr	r2, [r7, #24]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	091b      	lsrs	r3, r3, #4
 8009a82:	f003 0201 	and.w	r2, r3, #1
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d017      	beq.n	8009ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	2203      	movs	r2, #3
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	43db      	mvns	r3, r3
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f003 0303 	and.w	r3, r3, #3
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d123      	bne.n	8009b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	08da      	lsrs	r2, r3, #3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3208      	adds	r2, #8
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	220f      	movs	r2, #15
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	43db      	mvns	r3, r3
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	4013      	ands	r3, r2
 8009b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	691a      	ldr	r2, [r3, #16]
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	fa02 f303 	lsl.w	r3, r2, r3
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	08da      	lsrs	r2, r3, #3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3208      	adds	r2, #8
 8009b22:	69b9      	ldr	r1, [r7, #24]
 8009b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	2203      	movs	r2, #3
 8009b34:	fa02 f303 	lsl.w	r3, r2, r3
 8009b38:	43db      	mvns	r3, r3
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f003 0203 	and.w	r2, r3, #3
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 80b4 	beq.w	8009cd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	4b60      	ldr	r3, [pc, #384]	; (8009cf0 <HAL_GPIO_Init+0x30c>)
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	4a5f      	ldr	r2, [pc, #380]	; (8009cf0 <HAL_GPIO_Init+0x30c>)
 8009b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b78:	6453      	str	r3, [r2, #68]	; 0x44
 8009b7a:	4b5d      	ldr	r3, [pc, #372]	; (8009cf0 <HAL_GPIO_Init+0x30c>)
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b86:	4a5b      	ldr	r2, [pc, #364]	; (8009cf4 <HAL_GPIO_Init+0x310>)
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	089b      	lsrs	r3, r3, #2
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	220f      	movs	r2, #15
 8009b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba2:	43db      	mvns	r3, r3
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a52      	ldr	r2, [pc, #328]	; (8009cf8 <HAL_GPIO_Init+0x314>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d02b      	beq.n	8009c0a <HAL_GPIO_Init+0x226>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a51      	ldr	r2, [pc, #324]	; (8009cfc <HAL_GPIO_Init+0x318>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d025      	beq.n	8009c06 <HAL_GPIO_Init+0x222>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a50      	ldr	r2, [pc, #320]	; (8009d00 <HAL_GPIO_Init+0x31c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d01f      	beq.n	8009c02 <HAL_GPIO_Init+0x21e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a4f      	ldr	r2, [pc, #316]	; (8009d04 <HAL_GPIO_Init+0x320>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d019      	beq.n	8009bfe <HAL_GPIO_Init+0x21a>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a4e      	ldr	r2, [pc, #312]	; (8009d08 <HAL_GPIO_Init+0x324>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d013      	beq.n	8009bfa <HAL_GPIO_Init+0x216>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a4d      	ldr	r2, [pc, #308]	; (8009d0c <HAL_GPIO_Init+0x328>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00d      	beq.n	8009bf6 <HAL_GPIO_Init+0x212>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a4c      	ldr	r2, [pc, #304]	; (8009d10 <HAL_GPIO_Init+0x32c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d007      	beq.n	8009bf2 <HAL_GPIO_Init+0x20e>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a4b      	ldr	r2, [pc, #300]	; (8009d14 <HAL_GPIO_Init+0x330>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d101      	bne.n	8009bee <HAL_GPIO_Init+0x20a>
 8009bea:	2307      	movs	r3, #7
 8009bec:	e00e      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009bee:	2308      	movs	r3, #8
 8009bf0:	e00c      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009bf2:	2306      	movs	r3, #6
 8009bf4:	e00a      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009bf6:	2305      	movs	r3, #5
 8009bf8:	e008      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009bfa:	2304      	movs	r3, #4
 8009bfc:	e006      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e004      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e002      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <HAL_GPIO_Init+0x228>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	f002 0203 	and.w	r2, r2, #3
 8009c12:	0092      	lsls	r2, r2, #2
 8009c14:	4093      	lsls	r3, r2
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c1c:	4935      	ldr	r1, [pc, #212]	; (8009cf4 <HAL_GPIO_Init+0x310>)
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	089b      	lsrs	r3, r3, #2
 8009c22:	3302      	adds	r3, #2
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c2a:	4b3b      	ldr	r3, [pc, #236]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	43db      	mvns	r3, r3
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	4013      	ands	r3, r2
 8009c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c4e:	4a32      	ldr	r2, [pc, #200]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c54:	4b30      	ldr	r3, [pc, #192]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	4013      	ands	r3, r2
 8009c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c78:	4a27      	ldr	r2, [pc, #156]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009c7e:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	43db      	mvns	r3, r3
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ca8:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	69ba      	ldr	r2, [r7, #24]
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009ccc:	4a12      	ldr	r2, [pc, #72]	; (8009d18 <HAL_GPIO_Init+0x334>)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	61fb      	str	r3, [r7, #28]
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b0f      	cmp	r3, #15
 8009cdc:	f67f ae90 	bls.w	8009a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	bf00      	nop
 8009ce4:	3724      	adds	r7, #36	; 0x24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40023800 	.word	0x40023800
 8009cf4:	40013800 	.word	0x40013800
 8009cf8:	40020000 	.word	0x40020000
 8009cfc:	40020400 	.word	0x40020400
 8009d00:	40020800 	.word	0x40020800
 8009d04:	40020c00 	.word	0x40020c00
 8009d08:	40021000 	.word	0x40021000
 8009d0c:	40021400 	.word	0x40021400
 8009d10:	40021800 	.word	0x40021800
 8009d14:	40021c00 	.word	0x40021c00
 8009d18:	40013c00 	.word	0x40013c00

08009d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	887b      	ldrh	r3, [r7, #2]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d34:	2301      	movs	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
 8009d38:	e001      	b.n	8009d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d5c:	787b      	ldrb	r3, [r7, #1]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d62:	887a      	ldrh	r2, [r7, #2]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009d68:	e003      	b.n	8009d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009d6a:	887b      	ldrh	r3, [r7, #2]
 8009d6c:	041a      	lsls	r2, r3, #16
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	619a      	str	r2, [r3, #24]
}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e12b      	b.n	8009fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d106      	bne.n	8009dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7f8 f91e 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2224      	movs	r2, #36	; 0x24
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009de4:	f001 fd16 	bl	800b814 <HAL_RCC_GetPCLK1Freq>
 8009de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	4a81      	ldr	r2, [pc, #516]	; (8009ff4 <HAL_I2C_Init+0x274>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d807      	bhi.n	8009e04 <HAL_I2C_Init+0x84>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4a80      	ldr	r2, [pc, #512]	; (8009ff8 <HAL_I2C_Init+0x278>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	bf94      	ite	ls
 8009dfc:	2301      	movls	r3, #1
 8009dfe:	2300      	movhi	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	e006      	b.n	8009e12 <HAL_I2C_Init+0x92>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4a7d      	ldr	r2, [pc, #500]	; (8009ffc <HAL_I2C_Init+0x27c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	bf94      	ite	ls
 8009e0c:	2301      	movls	r3, #1
 8009e0e:	2300      	movhi	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e0e7      	b.n	8009fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4a78      	ldr	r2, [pc, #480]	; (800a000 <HAL_I2C_Init+0x280>)
 8009e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e22:	0c9b      	lsrs	r3, r3, #18
 8009e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	4a6a      	ldr	r2, [pc, #424]	; (8009ff4 <HAL_I2C_Init+0x274>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d802      	bhi.n	8009e54 <HAL_I2C_Init+0xd4>
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	3301      	adds	r3, #1
 8009e52:	e009      	b.n	8009e68 <HAL_I2C_Init+0xe8>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009e5a:	fb02 f303 	mul.w	r3, r2, r3
 8009e5e:	4a69      	ldr	r2, [pc, #420]	; (800a004 <HAL_I2C_Init+0x284>)
 8009e60:	fba2 2303 	umull	r2, r3, r2, r3
 8009e64:	099b      	lsrs	r3, r3, #6
 8009e66:	3301      	adds	r3, #1
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	430b      	orrs	r3, r1
 8009e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	495c      	ldr	r1, [pc, #368]	; (8009ff4 <HAL_I2C_Init+0x274>)
 8009e84:	428b      	cmp	r3, r1
 8009e86:	d819      	bhi.n	8009ebc <HAL_I2C_Init+0x13c>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	1e59      	subs	r1, r3, #1
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e96:	1c59      	adds	r1, r3, #1
 8009e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e9c:	400b      	ands	r3, r1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <HAL_I2C_Init+0x138>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1e59      	subs	r1, r3, #1
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb6:	e051      	b.n	8009f5c <HAL_I2C_Init+0x1dc>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	e04f      	b.n	8009f5c <HAL_I2C_Init+0x1dc>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d111      	bne.n	8009ee8 <HAL_I2C_Init+0x168>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	1e58      	subs	r0, r3, #1
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6859      	ldr	r1, [r3, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	440b      	add	r3, r1
 8009ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bf0c      	ite	eq
 8009ee0:	2301      	moveq	r3, #1
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e012      	b.n	8009f0e <HAL_I2C_Init+0x18e>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	1e58      	subs	r0, r3, #1
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6859      	ldr	r1, [r3, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	0099      	lsls	r1, r3, #2
 8009ef8:	440b      	add	r3, r1
 8009efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8009efe:	3301      	adds	r3, #1
 8009f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bf0c      	ite	eq
 8009f08:	2301      	moveq	r3, #1
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <HAL_I2C_Init+0x196>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e022      	b.n	8009f5c <HAL_I2C_Init+0x1dc>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10e      	bne.n	8009f3c <HAL_I2C_Init+0x1bc>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	1e58      	subs	r0, r3, #1
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6859      	ldr	r1, [r3, #4]
 8009f26:	460b      	mov	r3, r1
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	440b      	add	r3, r1
 8009f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f30:	3301      	adds	r3, #1
 8009f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f3a:	e00f      	b.n	8009f5c <HAL_I2C_Init+0x1dc>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	1e58      	subs	r0, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6859      	ldr	r1, [r3, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	0099      	lsls	r1, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f52:	3301      	adds	r3, #1
 8009f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	6809      	ldr	r1, [r1, #0]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69da      	ldr	r2, [r3, #28]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	6911      	ldr	r1, [r2, #16]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	68d2      	ldr	r2, [r2, #12]
 8009f96:	4311      	orrs	r1, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6812      	ldr	r2, [r2, #0]
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695a      	ldr	r2, [r3, #20]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f042 0201 	orr.w	r2, r2, #1
 8009fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	000186a0 	.word	0x000186a0
 8009ff8:	001e847f 	.word	0x001e847f
 8009ffc:	003d08ff 	.word	0x003d08ff
 800a000:	431bde83 	.word	0x431bde83
 800a004:	10624dd3 	.word	0x10624dd3

0800a008 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	4608      	mov	r0, r1
 800a012:	4611      	mov	r1, r2
 800a014:	461a      	mov	r2, r3
 800a016:	4603      	mov	r3, r0
 800a018:	817b      	strh	r3, [r7, #10]
 800a01a:	460b      	mov	r3, r1
 800a01c:	813b      	strh	r3, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a022:	f7fe fae7 	bl	80085f4 <HAL_GetTick>
 800a026:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b20      	cmp	r3, #32
 800a032:	f040 80d9 	bne.w	800a1e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	2319      	movs	r3, #25
 800a03c:	2201      	movs	r2, #1
 800a03e:	496d      	ldr	r1, [pc, #436]	; (800a1f4 <HAL_I2C_Mem_Write+0x1ec>)
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 fc7f 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a04c:	2302      	movs	r3, #2
 800a04e:	e0cc      	b.n	800a1ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_I2C_Mem_Write+0x56>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e0c5      	b.n	800a1ea <HAL_I2C_Mem_Write+0x1e2>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b01      	cmp	r3, #1
 800a072:	d007      	beq.n	800a084 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2221      	movs	r2, #33	; 0x21
 800a098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2240      	movs	r2, #64	; 0x40
 800a0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a3a      	ldr	r2, [r7, #32]
 800a0ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4a4d      	ldr	r2, [pc, #308]	; (800a1f8 <HAL_I2C_Mem_Write+0x1f0>)
 800a0c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0c6:	88f8      	ldrh	r0, [r7, #6]
 800a0c8:	893a      	ldrh	r2, [r7, #8]
 800a0ca:	8979      	ldrh	r1, [r7, #10]
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fab6 	bl	800a648 <I2C_RequestMemoryWrite>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d052      	beq.n	800a188 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e081      	b.n	800a1ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fd00 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00d      	beq.n	800a112 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d107      	bne.n	800a10e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a10c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e06b      	b.n	800a1ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	781a      	ldrb	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a138:	b29b      	uxth	r3, r3
 800a13a:	3b01      	subs	r3, #1
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d11b      	bne.n	800a188 <HAL_I2C_Mem_Write+0x180>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a154:	2b00      	cmp	r3, #0
 800a156:	d017      	beq.n	800a188 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a172:	3b01      	subs	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1aa      	bne.n	800a0e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 fcec 	bl	800ab72 <I2C_WaitOnBTFFlagUntilTimeout>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00d      	beq.n	800a1bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d107      	bne.n	800a1b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e016      	b.n	800a1ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e000      	b.n	800a1ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a1e8:	2302      	movs	r3, #2
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	00100002 	.word	0x00100002
 800a1f8:	ffff0000 	.word	0xffff0000

0800a1fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08c      	sub	sp, #48	; 0x30
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	4603      	mov	r3, r0
 800a20c:	817b      	strh	r3, [r7, #10]
 800a20e:	460b      	mov	r3, r1
 800a210:	813b      	strh	r3, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a216:	f7fe f9ed 	bl	80085f4 <HAL_GetTick>
 800a21a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b20      	cmp	r3, #32
 800a226:	f040 8208 	bne.w	800a63a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	2319      	movs	r3, #25
 800a230:	2201      	movs	r2, #1
 800a232:	497b      	ldr	r1, [pc, #492]	; (800a420 <HAL_I2C_Mem_Read+0x224>)
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fb85 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
 800a242:	e1fb      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_I2C_Mem_Read+0x56>
 800a24e:	2302      	movs	r3, #2
 800a250:	e1f4      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b01      	cmp	r3, #1
 800a266:	d007      	beq.n	800a278 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f042 0201 	orr.w	r2, r2, #1
 800a276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2222      	movs	r2, #34	; 0x22
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2240      	movs	r2, #64	; 0x40
 800a294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a2a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4a5b      	ldr	r2, [pc, #364]	; (800a424 <HAL_I2C_Mem_Read+0x228>)
 800a2b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a2ba:	88f8      	ldrh	r0, [r7, #6]
 800a2bc:	893a      	ldrh	r2, [r7, #8]
 800a2be:	8979      	ldrh	r1, [r7, #10]
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fa52 	bl	800a774 <I2C_RequestMemoryRead>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e1b0      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d113      	bne.n	800a30a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	623b      	str	r3, [r7, #32]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	623b      	str	r3, [r7, #32]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	623b      	str	r3, [r7, #32]
 800a2f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	e184      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d11b      	bne.n	800a34a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a322:	2300      	movs	r3, #0
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	61fb      	str	r3, [r7, #28]
 800a336:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	e164      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d11b      	bne.n	800a38a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a360:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a372:	2300      	movs	r3, #0
 800a374:	61bb      	str	r3, [r7, #24]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	e144      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	617b      	str	r3, [r7, #20]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a3a0:	e138      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	f200 80f1 	bhi.w	800a58e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d123      	bne.n	800a3fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 fc1b 	bl	800abf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e139      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3fa:	e10b      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a400:	2b02      	cmp	r3, #2
 800a402:	d14e      	bne.n	800a4a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	2200      	movs	r2, #0
 800a40c:	4906      	ldr	r1, [pc, #24]	; (800a428 <HAL_I2C_Mem_Read+0x22c>)
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fa98 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d008      	beq.n	800a42c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e10e      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
 800a41e:	bf00      	nop
 800a420:	00100002 	.word	0x00100002
 800a424:	ffff0000 	.word	0xffff0000
 800a428:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a43a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	1c5a      	adds	r2, r3, #1
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a464:	b29b      	uxth	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	b2d2      	uxtb	r2, r2
 800a47a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4a0:	e0b8      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4966      	ldr	r1, [pc, #408]	; (800a644 <HAL_I2C_Mem_Read+0x448>)
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f000 fa49 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e0bf      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	2200      	movs	r2, #0
 800a506:	494f      	ldr	r1, [pc, #316]	; (800a644 <HAL_I2C_Mem_Read+0x448>)
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fa1b 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e091      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	b2d2      	uxtb	r2, r2
 800a534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	1c5a      	adds	r2, r3, #1
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a544:	3b01      	subs	r3, #1
 800a546:	b29a      	uxth	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a550:	b29b      	uxth	r3, r3
 800a552:	3b01      	subs	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a576:	3b01      	subs	r3, #1
 800a578:	b29a      	uxth	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a58c:	e042      	b.n	800a614 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 fb2e 	bl	800abf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e04c      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691a      	ldr	r2, [r3, #16]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	1c5a      	adds	r2, r3, #1
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d118      	bne.n	800a614 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	691a      	ldr	r2, [r3, #16]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	1c5a      	adds	r2, r3, #1
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f47f aec2 	bne.w	800a3a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2220      	movs	r2, #32
 800a622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	e000      	b.n	800a63c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a63a:	2302      	movs	r3, #2
  }
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3728      	adds	r7, #40	; 0x28
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	00010004 	.word	0x00010004

0800a648 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	4608      	mov	r0, r1
 800a652:	4611      	mov	r1, r2
 800a654:	461a      	mov	r2, r3
 800a656:	4603      	mov	r3, r0
 800a658:	817b      	strh	r3, [r7, #10]
 800a65a:	460b      	mov	r3, r1
 800a65c:	813b      	strh	r3, [r7, #8]
 800a65e:	4613      	mov	r3, r2
 800a660:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	2200      	movs	r2, #0
 800a67a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f960 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a698:	d103      	bne.n	800a6a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e05f      	b.n	800a766 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6a6:	897b      	ldrh	r3, [r7, #10]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	6a3a      	ldr	r2, [r7, #32]
 800a6ba:	492d      	ldr	r1, [pc, #180]	; (800a770 <I2C_RequestMemoryWrite+0x128>)
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f998 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e04c      	b.n	800a766 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e4:	6a39      	ldr	r1, [r7, #32]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 fa02 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00d      	beq.n	800a70e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d107      	bne.n	800a70a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e02b      	b.n	800a766 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d105      	bne.n	800a720 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a714:	893b      	ldrh	r3, [r7, #8]
 800a716:	b2da      	uxtb	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	611a      	str	r2, [r3, #16]
 800a71e:	e021      	b.n	800a764 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a720:	893b      	ldrh	r3, [r7, #8]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	b29b      	uxth	r3, r3
 800a726:	b2da      	uxtb	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a730:	6a39      	ldr	r1, [r7, #32]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f9dc 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00d      	beq.n	800a75a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	2b04      	cmp	r3, #4
 800a744:	d107      	bne.n	800a756 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e005      	b.n	800a766 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a75a:	893b      	ldrh	r3, [r7, #8]
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	00010002 	.word	0x00010002

0800a774 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	4608      	mov	r0, r1
 800a77e:	4611      	mov	r1, r2
 800a780:	461a      	mov	r2, r3
 800a782:	4603      	mov	r3, r0
 800a784:	817b      	strh	r3, [r7, #10]
 800a786:	460b      	mov	r3, r1
 800a788:	813b      	strh	r3, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a79c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 f8c2 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00d      	beq.n	800a7e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d4:	d103      	bne.n	800a7de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e0aa      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7e2:	897b      	ldrh	r3, [r7, #10]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	6a3a      	ldr	r2, [r7, #32]
 800a7f6:	4952      	ldr	r1, [pc, #328]	; (800a940 <I2C_RequestMemoryRead+0x1cc>)
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f8fa 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e097      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a820:	6a39      	ldr	r1, [r7, #32]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 f964 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00d      	beq.n	800a84a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a832:	2b04      	cmp	r3, #4
 800a834:	d107      	bne.n	800a846 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e076      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d105      	bne.n	800a85c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a850:	893b      	ldrh	r3, [r7, #8]
 800a852:	b2da      	uxtb	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	611a      	str	r2, [r3, #16]
 800a85a:	e021      	b.n	800a8a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a85c:	893b      	ldrh	r3, [r7, #8]
 800a85e:	0a1b      	lsrs	r3, r3, #8
 800a860:	b29b      	uxth	r3, r3
 800a862:	b2da      	uxtb	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86c:	6a39      	ldr	r1, [r7, #32]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f93e 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00d      	beq.n	800a896 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d107      	bne.n	800a892 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e050      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a896:	893b      	ldrh	r3, [r7, #8]
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a2:	6a39      	ldr	r1, [r7, #32]
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f923 	bl	800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00d      	beq.n	800a8cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d107      	bne.n	800a8c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e035      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 f82b 	bl	800a944 <I2C_WaitOnFlagUntilTimeout>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00d      	beq.n	800a910 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a902:	d103      	bne.n	800a90c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a90a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e013      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a910:	897b      	ldrh	r3, [r7, #10]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	6a3a      	ldr	r2, [r7, #32]
 800a924:	4906      	ldr	r1, [pc, #24]	; (800a940 <I2C_RequestMemoryRead+0x1cc>)
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 f863 	bl	800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	00010002 	.word	0x00010002

0800a944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a954:	e025      	b.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95c:	d021      	beq.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a95e:	f7fd fe49 	bl	80085f4 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d302      	bcc.n	800a974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d116      	bne.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	f043 0220 	orr.w	r2, r3, #32
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e023      	b.n	800a9ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	0c1b      	lsrs	r3, r3, #16
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d10d      	bne.n	800a9c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	43da      	mvns	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	bf0c      	ite	eq
 800a9be:	2301      	moveq	r3, #1
 800a9c0:	2300      	movne	r3, #0
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	e00c      	b.n	800a9e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	43da      	mvns	r2, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bf0c      	ite	eq
 800a9da:	2301      	moveq	r3, #1
 800a9dc:	2300      	movne	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d0b6      	beq.n	800a956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa00:	e051      	b.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa10:	d123      	bne.n	800aa5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa46:	f043 0204 	orr.w	r2, r3, #4
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e046      	b.n	800aae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d021      	beq.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa62:	f7fd fdc7 	bl	80085f4 <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d302      	bcc.n	800aa78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d116      	bne.n	800aaa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f043 0220 	orr.w	r2, r3, #32
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e020      	b.n	800aae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d10c      	bne.n	800aaca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	43da      	mvns	r2, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	4013      	ands	r3, r2
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bf14      	ite	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	2300      	moveq	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	e00b      	b.n	800aae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	43da      	mvns	r2, r3
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	4013      	ands	r3, r2
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bf14      	ite	ne
 800aadc:	2301      	movne	r3, #1
 800aade:	2300      	moveq	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d18d      	bne.n	800aa02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aafc:	e02d      	b.n	800ab5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 f8ce 	bl	800aca0 <I2C_IsAcknowledgeFailed>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e02d      	b.n	800ab6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d021      	beq.n	800ab5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab16:	f7fd fd6d 	bl	80085f4 <HAL_GetTick>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d302      	bcc.n	800ab2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d116      	bne.n	800ab5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	f043 0220 	orr.w	r2, r3, #32
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e007      	b.n	800ab6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab64:	2b80      	cmp	r3, #128	; 0x80
 800ab66:	d1ca      	bne.n	800aafe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab7e:	e02d      	b.n	800abdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f88d 	bl	800aca0 <I2C_IsAcknowledgeFailed>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e02d      	b.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d021      	beq.n	800abdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab98:	f7fd fd2c 	bl	80085f4 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d302      	bcc.n	800abae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d116      	bne.n	800abdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc8:	f043 0220 	orr.w	r2, r3, #32
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e007      	b.n	800abec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d1ca      	bne.n	800ab80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac00:	e042      	b.n	800ac88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	f003 0310 	and.w	r3, r3, #16
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d119      	bne.n	800ac44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f06f 0210 	mvn.w	r2, #16
 800ac18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e029      	b.n	800ac98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac44:	f7fd fcd6 	bl	80085f4 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d302      	bcc.n	800ac5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d116      	bne.n	800ac88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac74:	f043 0220 	orr.w	r2, r3, #32
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e007      	b.n	800ac98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac92:	2b40      	cmp	r3, #64	; 0x40
 800ac94:	d1b5      	bne.n	800ac02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb6:	d11b      	bne.n	800acf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2220      	movs	r2, #32
 800accc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acdc:	f043 0204 	orr.w	r2, r3, #4
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e000      	b.n	800acf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800acfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad00:	b08f      	sub	sp, #60	; 0x3c
 800ad02:	af0a      	add	r7, sp, #40	; 0x28
 800ad04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e10f      	b.n	800af30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7fd fb86 	bl	800843c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2203      	movs	r2, #3
 800ad34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d102      	bne.n	800ad4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f002 fa63 	bl	800d21a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	687e      	ldr	r6, [r7, #4]
 800ad5c:	466d      	mov	r5, sp
 800ad5e:	f106 0410 	add.w	r4, r6, #16
 800ad62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad6e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad72:	1d33      	adds	r3, r6, #4
 800ad74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad76:	6838      	ldr	r0, [r7, #0]
 800ad78:	f002 f9ee 	bl	800d158 <USB_CoreInit>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e0d0      	b.n	800af30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f002 fa51 	bl	800d23c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
 800ad9e:	e04a      	b.n	800ae36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ada0:	7bfa      	ldrb	r2, [r7, #15]
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	4413      	add	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	440b      	add	r3, r1
 800adae:	333d      	adds	r3, #61	; 0x3d
 800adb0:	2201      	movs	r2, #1
 800adb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800adb4:	7bfa      	ldrb	r2, [r7, #15]
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	4613      	mov	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	4413      	add	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	333c      	adds	r3, #60	; 0x3c
 800adc4:	7bfa      	ldrb	r2, [r7, #15]
 800adc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800adc8:	7bfa      	ldrb	r2, [r7, #15]
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	b298      	uxth	r0, r3
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	4613      	mov	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	4413      	add	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	440b      	add	r3, r1
 800adda:	3344      	adds	r3, #68	; 0x44
 800addc:	4602      	mov	r2, r0
 800adde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	3340      	adds	r3, #64	; 0x40
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800adf4:	7bfa      	ldrb	r2, [r7, #15]
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	4413      	add	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	440b      	add	r3, r1
 800ae02:	3348      	adds	r3, #72	; 0x48
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae08:	7bfa      	ldrb	r2, [r7, #15]
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	334c      	adds	r3, #76	; 0x4c
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae1c:	7bfa      	ldrb	r2, [r7, #15]
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4613      	mov	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	440b      	add	r3, r1
 800ae2a:	3354      	adds	r3, #84	; 0x54
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	3301      	adds	r3, #1
 800ae34:	73fb      	strb	r3, [r7, #15]
 800ae36:	7bfa      	ldrb	r2, [r7, #15]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d3af      	bcc.n	800ada0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
 800ae44:	e044      	b.n	800aed0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae46:	7bfa      	ldrb	r2, [r7, #15]
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae5c:	7bfa      	ldrb	r2, [r7, #15]
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	4613      	mov	r3, r2
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	4413      	add	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	440b      	add	r3, r1
 800ae6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ae6e:	7bfa      	ldrb	r2, [r7, #15]
 800ae70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae72:	7bfa      	ldrb	r2, [r7, #15]
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	4613      	mov	r3, r2
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	4413      	add	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	440b      	add	r3, r1
 800ae80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae88:	7bfa      	ldrb	r2, [r7, #15]
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	440b      	add	r3, r1
 800ae96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae9e:	7bfa      	ldrb	r2, [r7, #15]
 800aea0:	6879      	ldr	r1, [r7, #4]
 800aea2:	4613      	mov	r3, r2
 800aea4:	00db      	lsls	r3, r3, #3
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	440b      	add	r3, r1
 800aeac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aeb4:	7bfa      	ldrb	r2, [r7, #15]
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800aec6:	2200      	movs	r2, #0
 800aec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	3301      	adds	r3, #1
 800aece:	73fb      	strb	r3, [r7, #15]
 800aed0:	7bfa      	ldrb	r2, [r7, #15]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d3b5      	bcc.n	800ae46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	687e      	ldr	r6, [r7, #4]
 800aee2:	466d      	mov	r5, sp
 800aee4:	f106 0410 	add.w	r4, r6, #16
 800aee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aeea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aeec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aeee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aef4:	e885 0003 	stmia.w	r5, {r0, r1}
 800aef8:	1d33      	adds	r3, r6, #4
 800aefa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aefc:	6838      	ldr	r0, [r7, #0]
 800aefe:	f002 f9e9 	bl	800d2d4 <USB_DevInit>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e00d      	b.n	800af30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f002 fbb4 	bl	800d696 <USB_DevDisconnect>

  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e267      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d075      	beq.n	800b042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af56:	4b88      	ldr	r3, [pc, #544]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f003 030c 	and.w	r3, r3, #12
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d00c      	beq.n	800af7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af62:	4b85      	ldr	r3, [pc, #532]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d112      	bne.n	800af94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af6e:	4b82      	ldr	r3, [pc, #520]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af7a:	d10b      	bne.n	800af94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af7c:	4b7e      	ldr	r3, [pc, #504]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af84:	2b00      	cmp	r3, #0
 800af86:	d05b      	beq.n	800b040 <HAL_RCC_OscConfig+0x108>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d157      	bne.n	800b040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e242      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af9c:	d106      	bne.n	800afac <HAL_RCC_OscConfig+0x74>
 800af9e:	4b76      	ldr	r3, [pc, #472]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a75      	ldr	r2, [pc, #468]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	e01d      	b.n	800afe8 <HAL_RCC_OscConfig+0xb0>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afb4:	d10c      	bne.n	800afd0 <HAL_RCC_OscConfig+0x98>
 800afb6:	4b70      	ldr	r3, [pc, #448]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a6f      	ldr	r2, [pc, #444]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	4b6d      	ldr	r3, [pc, #436]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a6c      	ldr	r2, [pc, #432]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	e00b      	b.n	800afe8 <HAL_RCC_OscConfig+0xb0>
 800afd0:	4b69      	ldr	r3, [pc, #420]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a68      	ldr	r2, [pc, #416]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	4b66      	ldr	r3, [pc, #408]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a65      	ldr	r2, [pc, #404]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800afe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d013      	beq.n	800b018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aff0:	f7fd fb00 	bl	80085f4 <HAL_GetTick>
 800aff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aff6:	e008      	b.n	800b00a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aff8:	f7fd fafc 	bl	80085f4 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b64      	cmp	r3, #100	; 0x64
 800b004:	d901      	bls.n	800b00a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e207      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b00a:	4b5b      	ldr	r3, [pc, #364]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0f0      	beq.n	800aff8 <HAL_RCC_OscConfig+0xc0>
 800b016:	e014      	b.n	800b042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b018:	f7fd faec 	bl	80085f4 <HAL_GetTick>
 800b01c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b01e:	e008      	b.n	800b032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b020:	f7fd fae8 	bl	80085f4 <HAL_GetTick>
 800b024:	4602      	mov	r2, r0
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	2b64      	cmp	r3, #100	; 0x64
 800b02c:	d901      	bls.n	800b032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e1f3      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b032:	4b51      	ldr	r3, [pc, #324]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1f0      	bne.n	800b020 <HAL_RCC_OscConfig+0xe8>
 800b03e:	e000      	b.n	800b042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d063      	beq.n	800b116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b04e:	4b4a      	ldr	r3, [pc, #296]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f003 030c 	and.w	r3, r3, #12
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b05a:	4b47      	ldr	r3, [pc, #284]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b062:	2b08      	cmp	r3, #8
 800b064:	d11c      	bne.n	800b0a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b066:	4b44      	ldr	r3, [pc, #272]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d116      	bne.n	800b0a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b072:	4b41      	ldr	r3, [pc, #260]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d005      	beq.n	800b08a <HAL_RCC_OscConfig+0x152>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d001      	beq.n	800b08a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e1c7      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b08a:	4b3b      	ldr	r3, [pc, #236]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4937      	ldr	r1, [pc, #220]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b09e:	e03a      	b.n	800b116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d020      	beq.n	800b0ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0a8:	4b34      	ldr	r3, [pc, #208]	; (800b17c <HAL_RCC_OscConfig+0x244>)
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ae:	f7fd faa1 	bl	80085f4 <HAL_GetTick>
 800b0b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0b4:	e008      	b.n	800b0c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0b6:	f7fd fa9d 	bl	80085f4 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e1a8      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0c8:	4b2b      	ldr	r3, [pc, #172]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f0      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0d4:	4b28      	ldr	r3, [pc, #160]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	4925      	ldr	r1, [pc, #148]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	600b      	str	r3, [r1, #0]
 800b0e8:	e015      	b.n	800b116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0ea:	4b24      	ldr	r3, [pc, #144]	; (800b17c <HAL_RCC_OscConfig+0x244>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f0:	f7fd fa80 	bl	80085f4 <HAL_GetTick>
 800b0f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0f6:	e008      	b.n	800b10a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0f8:	f7fd fa7c 	bl	80085f4 <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	2b02      	cmp	r3, #2
 800b104:	d901      	bls.n	800b10a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e187      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b10a:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1f0      	bne.n	800b0f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 0308 	and.w	r3, r3, #8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d036      	beq.n	800b190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d016      	beq.n	800b158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <HAL_RCC_OscConfig+0x248>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b130:	f7fd fa60 	bl	80085f4 <HAL_GetTick>
 800b134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b136:	e008      	b.n	800b14a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b138:	f7fd fa5c 	bl	80085f4 <HAL_GetTick>
 800b13c:	4602      	mov	r2, r0
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	2b02      	cmp	r3, #2
 800b144:	d901      	bls.n	800b14a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e167      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b14a:	4b0b      	ldr	r3, [pc, #44]	; (800b178 <HAL_RCC_OscConfig+0x240>)
 800b14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b14e:	f003 0302 	and.w	r3, r3, #2
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0f0      	beq.n	800b138 <HAL_RCC_OscConfig+0x200>
 800b156:	e01b      	b.n	800b190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b158:	4b09      	ldr	r3, [pc, #36]	; (800b180 <HAL_RCC_OscConfig+0x248>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b15e:	f7fd fa49 	bl	80085f4 <HAL_GetTick>
 800b162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b164:	e00e      	b.n	800b184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b166:	f7fd fa45 	bl	80085f4 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	2b02      	cmp	r3, #2
 800b172:	d907      	bls.n	800b184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e150      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
 800b178:	40023800 	.word	0x40023800
 800b17c:	42470000 	.word	0x42470000
 800b180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b184:	4b88      	ldr	r3, [pc, #544]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b188:	f003 0302 	and.w	r3, r3, #2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1ea      	bne.n	800b166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 8097 	beq.w	800b2cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1a2:	4b81      	ldr	r3, [pc, #516]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10f      	bne.n	800b1ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60bb      	str	r3, [r7, #8]
 800b1b2:	4b7d      	ldr	r3, [pc, #500]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	4a7c      	ldr	r2, [pc, #496]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1bc:	6413      	str	r3, [r2, #64]	; 0x40
 800b1be:	4b7a      	ldr	r3, [pc, #488]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c6:	60bb      	str	r3, [r7, #8]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1ce:	4b77      	ldr	r3, [pc, #476]	; (800b3ac <HAL_RCC_OscConfig+0x474>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d118      	bne.n	800b20c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1da:	4b74      	ldr	r3, [pc, #464]	; (800b3ac <HAL_RCC_OscConfig+0x474>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a73      	ldr	r2, [pc, #460]	; (800b3ac <HAL_RCC_OscConfig+0x474>)
 800b1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1e6:	f7fd fa05 	bl	80085f4 <HAL_GetTick>
 800b1ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1ec:	e008      	b.n	800b200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1ee:	f7fd fa01 	bl	80085f4 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d901      	bls.n	800b200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e10c      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b200:	4b6a      	ldr	r3, [pc, #424]	; (800b3ac <HAL_RCC_OscConfig+0x474>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0f0      	beq.n	800b1ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d106      	bne.n	800b222 <HAL_RCC_OscConfig+0x2ea>
 800b214:	4b64      	ldr	r3, [pc, #400]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b218:	4a63      	ldr	r2, [pc, #396]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b21a:	f043 0301 	orr.w	r3, r3, #1
 800b21e:	6713      	str	r3, [r2, #112]	; 0x70
 800b220:	e01c      	b.n	800b25c <HAL_RCC_OscConfig+0x324>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2b05      	cmp	r3, #5
 800b228:	d10c      	bne.n	800b244 <HAL_RCC_OscConfig+0x30c>
 800b22a:	4b5f      	ldr	r3, [pc, #380]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22e:	4a5e      	ldr	r2, [pc, #376]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b230:	f043 0304 	orr.w	r3, r3, #4
 800b234:	6713      	str	r3, [r2, #112]	; 0x70
 800b236:	4b5c      	ldr	r3, [pc, #368]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23a:	4a5b      	ldr	r2, [pc, #364]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b23c:	f043 0301 	orr.w	r3, r3, #1
 800b240:	6713      	str	r3, [r2, #112]	; 0x70
 800b242:	e00b      	b.n	800b25c <HAL_RCC_OscConfig+0x324>
 800b244:	4b58      	ldr	r3, [pc, #352]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b248:	4a57      	ldr	r2, [pc, #348]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b24a:	f023 0301 	bic.w	r3, r3, #1
 800b24e:	6713      	str	r3, [r2, #112]	; 0x70
 800b250:	4b55      	ldr	r3, [pc, #340]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b254:	4a54      	ldr	r2, [pc, #336]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b256:	f023 0304 	bic.w	r3, r3, #4
 800b25a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d015      	beq.n	800b290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b264:	f7fd f9c6 	bl	80085f4 <HAL_GetTick>
 800b268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b26a:	e00a      	b.n	800b282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b26c:	f7fd f9c2 	bl	80085f4 <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e0cb      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b282:	4b49      	ldr	r3, [pc, #292]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0ee      	beq.n	800b26c <HAL_RCC_OscConfig+0x334>
 800b28e:	e014      	b.n	800b2ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b290:	f7fd f9b0 	bl	80085f4 <HAL_GetTick>
 800b294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b296:	e00a      	b.n	800b2ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b298:	f7fd f9ac 	bl	80085f4 <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d901      	bls.n	800b2ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e0b5      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b2ae:	4b3e      	ldr	r3, [pc, #248]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1ee      	bne.n	800b298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d105      	bne.n	800b2cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2c0:	4b39      	ldr	r3, [pc, #228]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	4a38      	ldr	r2, [pc, #224]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b2c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 80a1 	beq.w	800b418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2d6:	4b34      	ldr	r3, [pc, #208]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f003 030c 	and.w	r3, r3, #12
 800b2de:	2b08      	cmp	r3, #8
 800b2e0:	d05c      	beq.n	800b39c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d141      	bne.n	800b36e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2ea:	4b31      	ldr	r3, [pc, #196]	; (800b3b0 <HAL_RCC_OscConfig+0x478>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2f0:	f7fd f980 	bl	80085f4 <HAL_GetTick>
 800b2f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2f6:	e008      	b.n	800b30a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2f8:	f7fd f97c 	bl	80085f4 <HAL_GetTick>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	2b02      	cmp	r3, #2
 800b304:	d901      	bls.n	800b30a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e087      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b30a:	4b27      	ldr	r3, [pc, #156]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f0      	bne.n	800b2f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	69da      	ldr	r2, [r3, #28]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b324:	019b      	lsls	r3, r3, #6
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	085b      	lsrs	r3, r3, #1
 800b32e:	3b01      	subs	r3, #1
 800b330:	041b      	lsls	r3, r3, #16
 800b332:	431a      	orrs	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	061b      	lsls	r3, r3, #24
 800b33a:	491b      	ldr	r1, [pc, #108]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b340:	4b1b      	ldr	r3, [pc, #108]	; (800b3b0 <HAL_RCC_OscConfig+0x478>)
 800b342:	2201      	movs	r2, #1
 800b344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b346:	f7fd f955 	bl	80085f4 <HAL_GetTick>
 800b34a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b34c:	e008      	b.n	800b360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b34e:	f7fd f951 	bl	80085f4 <HAL_GetTick>
 800b352:	4602      	mov	r2, r0
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d901      	bls.n	800b360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e05c      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b360:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0f0      	beq.n	800b34e <HAL_RCC_OscConfig+0x416>
 800b36c:	e054      	b.n	800b418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <HAL_RCC_OscConfig+0x478>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b374:	f7fd f93e 	bl	80085f4 <HAL_GetTick>
 800b378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b37a:	e008      	b.n	800b38e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b37c:	f7fd f93a 	bl	80085f4 <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d901      	bls.n	800b38e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e045      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b38e:	4b06      	ldr	r3, [pc, #24]	; (800b3a8 <HAL_RCC_OscConfig+0x470>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f0      	bne.n	800b37c <HAL_RCC_OscConfig+0x444>
 800b39a:	e03d      	b.n	800b418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d107      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e038      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
 800b3a8:	40023800 	.word	0x40023800
 800b3ac:	40007000 	.word	0x40007000
 800b3b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b3b4:	4b1b      	ldr	r3, [pc, #108]	; (800b424 <HAL_RCC_OscConfig+0x4ec>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d028      	beq.n	800b414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d121      	bne.n	800b414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d11a      	bne.n	800b414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d111      	bne.n	800b414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fa:	085b      	lsrs	r3, r3, #1
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b400:	429a      	cmp	r2, r3
 800b402:	d107      	bne.n	800b414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b410:	429a      	cmp	r2, r3
 800b412:	d001      	beq.n	800b418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e000      	b.n	800b41a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	40023800 	.word	0x40023800

0800b428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e0cc      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b43c:	4b68      	ldr	r3, [pc, #416]	; (800b5e0 <HAL_RCC_ClockConfig+0x1b8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d90c      	bls.n	800b464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b44a:	4b65      	ldr	r3, [pc, #404]	; (800b5e0 <HAL_RCC_ClockConfig+0x1b8>)
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b452:	4b63      	ldr	r3, [pc, #396]	; (800b5e0 <HAL_RCC_ClockConfig+0x1b8>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d001      	beq.n	800b464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e0b8      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d020      	beq.n	800b4b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d005      	beq.n	800b488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b47c:	4b59      	ldr	r3, [pc, #356]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	4a58      	ldr	r2, [pc, #352]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0308 	and.w	r3, r3, #8
 800b490:	2b00      	cmp	r3, #0
 800b492:	d005      	beq.n	800b4a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b494:	4b53      	ldr	r3, [pc, #332]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	4a52      	ldr	r2, [pc, #328]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b49a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b49e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4a0:	4b50      	ldr	r3, [pc, #320]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	494d      	ldr	r1, [pc, #308]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d044      	beq.n	800b548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d107      	bne.n	800b4d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4c6:	4b47      	ldr	r3, [pc, #284]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d119      	bne.n	800b506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e07f      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d003      	beq.n	800b4e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d107      	bne.n	800b4f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4e6:	4b3f      	ldr	r3, [pc, #252]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d109      	bne.n	800b506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e06f      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4f6:	4b3b      	ldr	r3, [pc, #236]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0302 	and.w	r3, r3, #2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e067      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b506:	4b37      	ldr	r3, [pc, #220]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f023 0203 	bic.w	r2, r3, #3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	4934      	ldr	r1, [pc, #208]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b514:	4313      	orrs	r3, r2
 800b516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b518:	f7fd f86c 	bl	80085f4 <HAL_GetTick>
 800b51c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b51e:	e00a      	b.n	800b536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b520:	f7fd f868 	bl	80085f4 <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b52e:	4293      	cmp	r3, r2
 800b530:	d901      	bls.n	800b536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e04f      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b536:	4b2b      	ldr	r3, [pc, #172]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f003 020c 	and.w	r2, r3, #12
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	429a      	cmp	r2, r3
 800b546:	d1eb      	bne.n	800b520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b548:	4b25      	ldr	r3, [pc, #148]	; (800b5e0 <HAL_RCC_ClockConfig+0x1b8>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0307 	and.w	r3, r3, #7
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d20c      	bcs.n	800b570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b556:	4b22      	ldr	r3, [pc, #136]	; (800b5e0 <HAL_RCC_ClockConfig+0x1b8>)
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	b2d2      	uxtb	r2, r2
 800b55c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b55e:	4b20      	ldr	r3, [pc, #128]	; (800b5e0 <HAL_RCC_ClockConfig+0x1b8>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0307 	and.w	r3, r3, #7
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d001      	beq.n	800b570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e032      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d008      	beq.n	800b58e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b57c:	4b19      	ldr	r3, [pc, #100]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4916      	ldr	r1, [pc, #88]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 0308 	and.w	r3, r3, #8
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	490e      	ldr	r1, [pc, #56]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5ae:	f000 f821 	bl	800b5f4 <HAL_RCC_GetSysClockFreq>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <HAL_RCC_ClockConfig+0x1bc>)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	091b      	lsrs	r3, r3, #4
 800b5ba:	f003 030f 	and.w	r3, r3, #15
 800b5be:	490a      	ldr	r1, [pc, #40]	; (800b5e8 <HAL_RCC_ClockConfig+0x1c0>)
 800b5c0:	5ccb      	ldrb	r3, [r1, r3]
 800b5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c6:	4a09      	ldr	r2, [pc, #36]	; (800b5ec <HAL_RCC_ClockConfig+0x1c4>)
 800b5c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <HAL_RCC_ClockConfig+0x1c8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fc ffcc 	bl	800856c <HAL_InitTick>

  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40023c00 	.word	0x40023c00
 800b5e4:	40023800 	.word	0x40023800
 800b5e8:	08010978 	.word	0x08010978
 800b5ec:	2000028c 	.word	0x2000028c
 800b5f0:	2000031c 	.word	0x2000031c

0800b5f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5f8:	b094      	sub	sp, #80	; 0x50
 800b5fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800b600:	2300      	movs	r3, #0
 800b602:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b604:	2300      	movs	r3, #0
 800b606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b60c:	4b79      	ldr	r3, [pc, #484]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f003 030c 	and.w	r3, r3, #12
 800b614:	2b08      	cmp	r3, #8
 800b616:	d00d      	beq.n	800b634 <HAL_RCC_GetSysClockFreq+0x40>
 800b618:	2b08      	cmp	r3, #8
 800b61a:	f200 80e1 	bhi.w	800b7e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <HAL_RCC_GetSysClockFreq+0x34>
 800b622:	2b04      	cmp	r3, #4
 800b624:	d003      	beq.n	800b62e <HAL_RCC_GetSysClockFreq+0x3a>
 800b626:	e0db      	b.n	800b7e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b628:	4b73      	ldr	r3, [pc, #460]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b62a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b62c:	e0db      	b.n	800b7e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b62e:	4b72      	ldr	r3, [pc, #456]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b632:	e0d8      	b.n	800b7e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b634:	4b6f      	ldr	r3, [pc, #444]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b63c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b63e:	4b6d      	ldr	r3, [pc, #436]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d063      	beq.n	800b712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b64a:	4b6a      	ldr	r3, [pc, #424]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	099b      	lsrs	r3, r3, #6
 800b650:	2200      	movs	r2, #0
 800b652:	63bb      	str	r3, [r7, #56]	; 0x38
 800b654:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b65c:	633b      	str	r3, [r7, #48]	; 0x30
 800b65e:	2300      	movs	r3, #0
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
 800b662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f04f 0000 	mov.w	r0, #0
 800b66e:	f04f 0100 	mov.w	r1, #0
 800b672:	0159      	lsls	r1, r3, #5
 800b674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b678:	0150      	lsls	r0, r2, #5
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4621      	mov	r1, r4
 800b680:	1a51      	subs	r1, r2, r1
 800b682:	6139      	str	r1, [r7, #16]
 800b684:	4629      	mov	r1, r5
 800b686:	eb63 0301 	sbc.w	r3, r3, r1
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	f04f 0300 	mov.w	r3, #0
 800b694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b698:	4659      	mov	r1, fp
 800b69a:	018b      	lsls	r3, r1, #6
 800b69c:	4651      	mov	r1, sl
 800b69e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b6a2:	4651      	mov	r1, sl
 800b6a4:	018a      	lsls	r2, r1, #6
 800b6a6:	4651      	mov	r1, sl
 800b6a8:	ebb2 0801 	subs.w	r8, r2, r1
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	eb63 0901 	sbc.w	r9, r3, r1
 800b6b2:	f04f 0200 	mov.w	r2, #0
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6c6:	4690      	mov	r8, r2
 800b6c8:	4699      	mov	r9, r3
 800b6ca:	4623      	mov	r3, r4
 800b6cc:	eb18 0303 	adds.w	r3, r8, r3
 800b6d0:	60bb      	str	r3, [r7, #8]
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	eb49 0303 	adc.w	r3, r9, r3
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	f04f 0200 	mov.w	r2, #0
 800b6de:	f04f 0300 	mov.w	r3, #0
 800b6e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	028b      	lsls	r3, r1, #10
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	028a      	lsls	r2, r1, #10
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b704:	f7f5 fac0 	bl	8000c88 <__aeabi_uldivmod>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4613      	mov	r3, r2
 800b70e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b710:	e058      	b.n	800b7c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b712:	4b38      	ldr	r3, [pc, #224]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	099b      	lsrs	r3, r3, #6
 800b718:	2200      	movs	r2, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	4611      	mov	r1, r2
 800b71e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b722:	623b      	str	r3, [r7, #32]
 800b724:	2300      	movs	r3, #0
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
 800b728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b72c:	4642      	mov	r2, r8
 800b72e:	464b      	mov	r3, r9
 800b730:	f04f 0000 	mov.w	r0, #0
 800b734:	f04f 0100 	mov.w	r1, #0
 800b738:	0159      	lsls	r1, r3, #5
 800b73a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b73e:	0150      	lsls	r0, r2, #5
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4641      	mov	r1, r8
 800b746:	ebb2 0a01 	subs.w	sl, r2, r1
 800b74a:	4649      	mov	r1, r9
 800b74c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b750:	f04f 0200 	mov.w	r2, #0
 800b754:	f04f 0300 	mov.w	r3, #0
 800b758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b75c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b764:	ebb2 040a 	subs.w	r4, r2, sl
 800b768:	eb63 050b 	sbc.w	r5, r3, fp
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	00eb      	lsls	r3, r5, #3
 800b776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b77a:	00e2      	lsls	r2, r4, #3
 800b77c:	4614      	mov	r4, r2
 800b77e:	461d      	mov	r5, r3
 800b780:	4643      	mov	r3, r8
 800b782:	18e3      	adds	r3, r4, r3
 800b784:	603b      	str	r3, [r7, #0]
 800b786:	464b      	mov	r3, r9
 800b788:	eb45 0303 	adc.w	r3, r5, r3
 800b78c:	607b      	str	r3, [r7, #4]
 800b78e:	f04f 0200 	mov.w	r2, #0
 800b792:	f04f 0300 	mov.w	r3, #0
 800b796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b79a:	4629      	mov	r1, r5
 800b79c:	028b      	lsls	r3, r1, #10
 800b79e:	4621      	mov	r1, r4
 800b7a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	028a      	lsls	r2, r1, #10
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	61bb      	str	r3, [r7, #24]
 800b7b2:	61fa      	str	r2, [r7, #28]
 800b7b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7b8:	f7f5 fa66 	bl	8000c88 <__aeabi_uldivmod>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b7c4:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	0c1b      	lsrs	r3, r3, #16
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b7d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b7de:	e002      	b.n	800b7e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b7e0:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b7e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b7e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3750      	adds	r7, #80	; 0x50
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7f2:	bf00      	nop
 800b7f4:	40023800 	.word	0x40023800
 800b7f8:	00f42400 	.word	0x00f42400

0800b7fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b800:	4b03      	ldr	r3, [pc, #12]	; (800b810 <HAL_RCC_GetHCLKFreq+0x14>)
 800b802:	681b      	ldr	r3, [r3, #0]
}
 800b804:	4618      	mov	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	2000028c 	.word	0x2000028c

0800b814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b818:	f7ff fff0 	bl	800b7fc <HAL_RCC_GetHCLKFreq>
 800b81c:	4602      	mov	r2, r0
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	0a9b      	lsrs	r3, r3, #10
 800b824:	f003 0307 	and.w	r3, r3, #7
 800b828:	4903      	ldr	r1, [pc, #12]	; (800b838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b82a:	5ccb      	ldrb	r3, [r1, r3]
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b830:	4618      	mov	r0, r3
 800b832:	bd80      	pop	{r7, pc}
 800b834:	40023800 	.word	0x40023800
 800b838:	08010988 	.word	0x08010988

0800b83c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b840:	f7ff ffdc 	bl	800b7fc <HAL_RCC_GetHCLKFreq>
 800b844:	4602      	mov	r2, r0
 800b846:	4b05      	ldr	r3, [pc, #20]	; (800b85c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	0b5b      	lsrs	r3, r3, #13
 800b84c:	f003 0307 	and.w	r3, r3, #7
 800b850:	4903      	ldr	r1, [pc, #12]	; (800b860 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b852:	5ccb      	ldrb	r3, [r1, r3]
 800b854:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b858:	4618      	mov	r0, r3
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	40023800 	.word	0x40023800
 800b860:	08010988 	.word	0x08010988

0800b864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e041      	b.n	800b8fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7f9 fdb2 	bl	80053f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2202      	movs	r2, #2
 800b894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f000 fda4 	bl	800c3f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b01      	cmp	r3, #1
 800b916:	d001      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e04e      	b.n	800b9ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2202      	movs	r2, #2
 800b920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a23      	ldr	r2, [pc, #140]	; (800b9c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d022      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b946:	d01d      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a1f      	ldr	r2, [pc, #124]	; (800b9cc <HAL_TIM_Base_Start_IT+0xc8>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d018      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a1e      	ldr	r2, [pc, #120]	; (800b9d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d013      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a1c      	ldr	r2, [pc, #112]	; (800b9d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d00e      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a1b      	ldr	r2, [pc, #108]	; (800b9d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d009      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a19      	ldr	r2, [pc, #100]	; (800b9dc <HAL_TIM_Base_Start_IT+0xd8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d004      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x80>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a18      	ldr	r2, [pc, #96]	; (800b9e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d111      	bne.n	800b9a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2b06      	cmp	r3, #6
 800b994:	d010      	beq.n	800b9b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f042 0201 	orr.w	r2, r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9a6:	e007      	b.n	800b9b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0201 	orr.w	r2, r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	40010000 	.word	0x40010000
 800b9cc:	40000400 	.word	0x40000400
 800b9d0:	40000800 	.word	0x40000800
 800b9d4:	40000c00 	.word	0x40000c00
 800b9d8:	40010400 	.word	0x40010400
 800b9dc:	40014000 	.word	0x40014000
 800b9e0:	40001800 	.word	0x40001800

0800b9e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e041      	b.n	800ba7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d106      	bne.n	800ba10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7f9 fdca 	bl	80055a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f000 fce4 	bl	800c3f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d109      	bne.n	800baa8 <HAL_TIM_PWM_Start+0x24>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	bf14      	ite	ne
 800baa0:	2301      	movne	r3, #1
 800baa2:	2300      	moveq	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	e022      	b.n	800baee <HAL_TIM_PWM_Start+0x6a>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b04      	cmp	r3, #4
 800baac:	d109      	bne.n	800bac2 <HAL_TIM_PWM_Start+0x3e>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	bf14      	ite	ne
 800baba:	2301      	movne	r3, #1
 800babc:	2300      	moveq	r3, #0
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	e015      	b.n	800baee <HAL_TIM_PWM_Start+0x6a>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d109      	bne.n	800badc <HAL_TIM_PWM_Start+0x58>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	bf14      	ite	ne
 800bad4:	2301      	movne	r3, #1
 800bad6:	2300      	moveq	r3, #0
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	e008      	b.n	800baee <HAL_TIM_PWM_Start+0x6a>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	bf14      	ite	ne
 800bae8:	2301      	movne	r3, #1
 800baea:	2300      	moveq	r3, #0
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e07c      	b.n	800bbf0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d104      	bne.n	800bb06 <HAL_TIM_PWM_Start+0x82>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2202      	movs	r2, #2
 800bb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb04:	e013      	b.n	800bb2e <HAL_TIM_PWM_Start+0xaa>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	d104      	bne.n	800bb16 <HAL_TIM_PWM_Start+0x92>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb14:	e00b      	b.n	800bb2e <HAL_TIM_PWM_Start+0xaa>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d104      	bne.n	800bb26 <HAL_TIM_PWM_Start+0xa2>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb24:	e003      	b.n	800bb2e <HAL_TIM_PWM_Start+0xaa>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2201      	movs	r2, #1
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 ff44 	bl	800c9c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a2d      	ldr	r2, [pc, #180]	; (800bbf8 <HAL_TIM_PWM_Start+0x174>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d004      	beq.n	800bb50 <HAL_TIM_PWM_Start+0xcc>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a2c      	ldr	r2, [pc, #176]	; (800bbfc <HAL_TIM_PWM_Start+0x178>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d101      	bne.n	800bb54 <HAL_TIM_PWM_Start+0xd0>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <HAL_TIM_PWM_Start+0xd2>
 800bb54:	2300      	movs	r3, #0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d007      	beq.n	800bb6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a22      	ldr	r2, [pc, #136]	; (800bbf8 <HAL_TIM_PWM_Start+0x174>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d022      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb7c:	d01d      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <HAL_TIM_PWM_Start+0x17c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d018      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <HAL_TIM_PWM_Start+0x180>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d013      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a1c      	ldr	r2, [pc, #112]	; (800bc08 <HAL_TIM_PWM_Start+0x184>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d00e      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a16      	ldr	r2, [pc, #88]	; (800bbfc <HAL_TIM_PWM_Start+0x178>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d009      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a18      	ldr	r2, [pc, #96]	; (800bc0c <HAL_TIM_PWM_Start+0x188>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d004      	beq.n	800bbba <HAL_TIM_PWM_Start+0x136>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a16      	ldr	r2, [pc, #88]	; (800bc10 <HAL_TIM_PWM_Start+0x18c>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d111      	bne.n	800bbde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f003 0307 	and.w	r3, r3, #7
 800bbc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2b06      	cmp	r3, #6
 800bbca:	d010      	beq.n	800bbee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0201 	orr.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbdc:	e007      	b.n	800bbee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f042 0201 	orr.w	r2, r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	40010000 	.word	0x40010000
 800bbfc:	40010400 	.word	0x40010400
 800bc00:	40000400 	.word	0x40000400
 800bc04:	40000800 	.word	0x40000800
 800bc08:	40000c00 	.word	0x40000c00
 800bc0c:	40014000 	.word	0x40014000
 800bc10:	40001800 	.word	0x40001800

0800bc14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e097      	b.n	800bd58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d106      	bne.n	800bc42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7f9 fc17 	bl	8005470 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2202      	movs	r2, #2
 800bc46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc58:	f023 0307 	bic.w	r3, r3, #7
 800bc5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3304      	adds	r3, #4
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f000 fbc1 	bl	800c3f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc96:	f023 0303 	bic.w	r3, r3, #3
 800bc9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	4313      	orrs	r3, r2
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bcb4:	f023 030c 	bic.w	r3, r3, #12
 800bcb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	68da      	ldr	r2, [r3, #12]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	021b      	lsls	r3, r3, #8
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	011a      	lsls	r2, r3, #4
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	031b      	lsls	r3, r3, #12
 800bce4:	4313      	orrs	r3, r2
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bcf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bcfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	4313      	orrs	r3, r2
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d110      	bne.n	800bdb2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d102      	bne.n	800bd9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd96:	7b7b      	ldrb	r3, [r7, #13]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d001      	beq.n	800bda0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e069      	b.n	800be74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdb0:	e031      	b.n	800be16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d110      	bne.n	800bdda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d102      	bne.n	800bdc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bdbe:	7b3b      	ldrb	r3, [r7, #12]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d001      	beq.n	800bdc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e055      	b.n	800be74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2202      	movs	r2, #2
 800bdcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bdd8:	e01d      	b.n	800be16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d108      	bne.n	800bdf2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d105      	bne.n	800bdf2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bde6:	7b7b      	ldrb	r3, [r7, #13]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d102      	bne.n	800bdf2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bdec:	7b3b      	ldrb	r3, [r7, #12]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d001      	beq.n	800bdf6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e03e      	b.n	800be74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2202      	movs	r2, #2
 800be02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2202      	movs	r2, #2
 800be0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2202      	movs	r2, #2
 800be12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d003      	beq.n	800be24 <HAL_TIM_Encoder_Start+0xc4>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d008      	beq.n	800be34 <HAL_TIM_Encoder_Start+0xd4>
 800be22:	e00f      	b.n	800be44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2201      	movs	r2, #1
 800be2a:	2100      	movs	r1, #0
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fdc9 	bl	800c9c4 <TIM_CCxChannelCmd>
      break;
 800be32:	e016      	b.n	800be62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2201      	movs	r2, #1
 800be3a:	2104      	movs	r1, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fdc1 	bl	800c9c4 <TIM_CCxChannelCmd>
      break;
 800be42:	e00e      	b.n	800be62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2201      	movs	r2, #1
 800be4a:	2100      	movs	r1, #0
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fdb9 	bl	800c9c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	2104      	movs	r1, #4
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 fdb2 	bl	800c9c4 <TIM_CCxChannelCmd>
      break;
 800be60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f042 0201 	orr.w	r2, r2, #1
 800be70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d122      	bne.n	800bed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d11b      	bne.n	800bed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f06f 0202 	mvn.w	r2, #2
 800bea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fa77 	bl	800c3b2 <HAL_TIM_IC_CaptureCallback>
 800bec4:	e005      	b.n	800bed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa69 	bl	800c39e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fa7a 	bl	800c3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	f003 0304 	and.w	r3, r3, #4
 800bee2:	2b04      	cmp	r3, #4
 800bee4:	d122      	bne.n	800bf2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d11b      	bne.n	800bf2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f06f 0204 	mvn.w	r2, #4
 800befc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2202      	movs	r2, #2
 800bf02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa4d 	bl	800c3b2 <HAL_TIM_IC_CaptureCallback>
 800bf18:	e005      	b.n	800bf26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa3f 	bl	800c39e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fa50 	bl	800c3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f003 0308 	and.w	r3, r3, #8
 800bf36:	2b08      	cmp	r3, #8
 800bf38:	d122      	bne.n	800bf80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f003 0308 	and.w	r3, r3, #8
 800bf44:	2b08      	cmp	r3, #8
 800bf46:	d11b      	bne.n	800bf80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f06f 0208 	mvn.w	r2, #8
 800bf50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2204      	movs	r2, #4
 800bf56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	69db      	ldr	r3, [r3, #28]
 800bf5e:	f003 0303 	and.w	r3, r3, #3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa23 	bl	800c3b2 <HAL_TIM_IC_CaptureCallback>
 800bf6c:	e005      	b.n	800bf7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fa15 	bl	800c39e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fa26 	bl	800c3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	f003 0310 	and.w	r3, r3, #16
 800bf8a:	2b10      	cmp	r3, #16
 800bf8c:	d122      	bne.n	800bfd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	f003 0310 	and.w	r3, r3, #16
 800bf98:	2b10      	cmp	r3, #16
 800bf9a:	d11b      	bne.n	800bfd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f06f 0210 	mvn.w	r2, #16
 800bfa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69db      	ldr	r3, [r3, #28]
 800bfb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f9f9 	bl	800c3b2 <HAL_TIM_IC_CaptureCallback>
 800bfc0:	e005      	b.n	800bfce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f9eb 	bl	800c39e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f9fc 	bl	800c3c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d10e      	bne.n	800c000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d107      	bne.n	800c000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f06f 0201 	mvn.w	r2, #1
 800bff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7f6 f942 	bl	8002284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c00a:	2b80      	cmp	r3, #128	; 0x80
 800c00c:	d10e      	bne.n	800c02c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c018:	2b80      	cmp	r3, #128	; 0x80
 800c01a:	d107      	bne.n	800c02c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fdca 	bl	800cbc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c036:	2b40      	cmp	r3, #64	; 0x40
 800c038:	d10e      	bne.n	800c058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c044:	2b40      	cmp	r3, #64	; 0x40
 800c046:	d107      	bne.n	800c058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f9c1 	bl	800c3da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	f003 0320 	and.w	r3, r3, #32
 800c062:	2b20      	cmp	r3, #32
 800c064:	d10e      	bne.n	800c084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b20      	cmp	r3, #32
 800c072:	d107      	bne.n	800c084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f06f 0220 	mvn.w	r2, #32
 800c07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fd94 	bl	800cbac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d101      	bne.n	800c0aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e0ae      	b.n	800c208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b0c      	cmp	r3, #12
 800c0b6:	f200 809f 	bhi.w	800c1f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c0ba:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c0:	0800c0f5 	.word	0x0800c0f5
 800c0c4:	0800c1f9 	.word	0x0800c1f9
 800c0c8:	0800c1f9 	.word	0x0800c1f9
 800c0cc:	0800c1f9 	.word	0x0800c1f9
 800c0d0:	0800c135 	.word	0x0800c135
 800c0d4:	0800c1f9 	.word	0x0800c1f9
 800c0d8:	0800c1f9 	.word	0x0800c1f9
 800c0dc:	0800c1f9 	.word	0x0800c1f9
 800c0e0:	0800c177 	.word	0x0800c177
 800c0e4:	0800c1f9 	.word	0x0800c1f9
 800c0e8:	0800c1f9 	.word	0x0800c1f9
 800c0ec:	0800c1f9 	.word	0x0800c1f9
 800c0f0:	0800c1b7 	.word	0x0800c1b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f000 fa18 	bl	800c530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	699a      	ldr	r2, [r3, #24]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0208 	orr.w	r2, r2, #8
 800c10e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699a      	ldr	r2, [r3, #24]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f022 0204 	bic.w	r2, r2, #4
 800c11e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6999      	ldr	r1, [r3, #24]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	691a      	ldr	r2, [r3, #16]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	619a      	str	r2, [r3, #24]
      break;
 800c132:	e064      	b.n	800c1fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fa68 	bl	800c610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699a      	ldr	r2, [r3, #24]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c14e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	699a      	ldr	r2, [r3, #24]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c15e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6999      	ldr	r1, [r3, #24]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	021a      	lsls	r2, r3, #8
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	619a      	str	r2, [r3, #24]
      break;
 800c174:	e043      	b.n	800c1fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fabd 	bl	800c6fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69da      	ldr	r2, [r3, #28]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f042 0208 	orr.w	r2, r2, #8
 800c190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	69da      	ldr	r2, [r3, #28]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0204 	bic.w	r2, r2, #4
 800c1a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	69d9      	ldr	r1, [r3, #28]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	691a      	ldr	r2, [r3, #16]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	61da      	str	r2, [r3, #28]
      break;
 800c1b4:	e023      	b.n	800c1fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 fb11 	bl	800c7e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	69da      	ldr	r2, [r3, #28]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69d9      	ldr	r1, [r3, #28]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	021a      	lsls	r2, r3, #8
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	430a      	orrs	r2, r1
 800c1f4:	61da      	str	r2, [r3, #28]
      break;
 800c1f6:	e002      	b.n	800c1fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c1fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c206:	7dfb      	ldrb	r3, [r7, #23]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d101      	bne.n	800c22c <HAL_TIM_ConfigClockSource+0x1c>
 800c228:	2302      	movs	r3, #2
 800c22a:	e0b4      	b.n	800c396 <HAL_TIM_ConfigClockSource+0x186>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c24a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c264:	d03e      	beq.n	800c2e4 <HAL_TIM_ConfigClockSource+0xd4>
 800c266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c26a:	f200 8087 	bhi.w	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c272:	f000 8086 	beq.w	800c382 <HAL_TIM_ConfigClockSource+0x172>
 800c276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c27a:	d87f      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c27c:	2b70      	cmp	r3, #112	; 0x70
 800c27e:	d01a      	beq.n	800c2b6 <HAL_TIM_ConfigClockSource+0xa6>
 800c280:	2b70      	cmp	r3, #112	; 0x70
 800c282:	d87b      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c284:	2b60      	cmp	r3, #96	; 0x60
 800c286:	d050      	beq.n	800c32a <HAL_TIM_ConfigClockSource+0x11a>
 800c288:	2b60      	cmp	r3, #96	; 0x60
 800c28a:	d877      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c28c:	2b50      	cmp	r3, #80	; 0x50
 800c28e:	d03c      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0xfa>
 800c290:	2b50      	cmp	r3, #80	; 0x50
 800c292:	d873      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c294:	2b40      	cmp	r3, #64	; 0x40
 800c296:	d058      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x13a>
 800c298:	2b40      	cmp	r3, #64	; 0x40
 800c29a:	d86f      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c29c:	2b30      	cmp	r3, #48	; 0x30
 800c29e:	d064      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0x15a>
 800c2a0:	2b30      	cmp	r3, #48	; 0x30
 800c2a2:	d86b      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c2a4:	2b20      	cmp	r3, #32
 800c2a6:	d060      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0x15a>
 800c2a8:	2b20      	cmp	r3, #32
 800c2aa:	d867      	bhi.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d05c      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0x15a>
 800c2b0:	2b10      	cmp	r3, #16
 800c2b2:	d05a      	beq.n	800c36a <HAL_TIM_ConfigClockSource+0x15a>
 800c2b4:	e062      	b.n	800c37c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	6899      	ldr	r1, [r3, #8]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f000 fb5d 	bl	800c984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c2d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	609a      	str	r2, [r3, #8]
      break;
 800c2e2:	e04f      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	6899      	ldr	r1, [r3, #8]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	f000 fb46 	bl	800c984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c306:	609a      	str	r2, [r3, #8]
      break;
 800c308:	e03c      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	6859      	ldr	r1, [r3, #4]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	461a      	mov	r2, r3
 800c318:	f000 faba 	bl	800c890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2150      	movs	r1, #80	; 0x50
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fb13 	bl	800c94e <TIM_ITRx_SetConfig>
      break;
 800c328:	e02c      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	6859      	ldr	r1, [r3, #4]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	461a      	mov	r2, r3
 800c338:	f000 fad9 	bl	800c8ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2160      	movs	r1, #96	; 0x60
 800c342:	4618      	mov	r0, r3
 800c344:	f000 fb03 	bl	800c94e <TIM_ITRx_SetConfig>
      break;
 800c348:	e01c      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6818      	ldr	r0, [r3, #0]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	6859      	ldr	r1, [r3, #4]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	461a      	mov	r2, r3
 800c358:	f000 fa9a 	bl	800c890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2140      	movs	r1, #64	; 0x40
 800c362:	4618      	mov	r0, r3
 800c364:	f000 faf3 	bl	800c94e <TIM_ITRx_SetConfig>
      break;
 800c368:	e00c      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4619      	mov	r1, r3
 800c374:	4610      	mov	r0, r2
 800c376:	f000 faea 	bl	800c94e <TIM_ITRx_SetConfig>
      break;
 800c37a:	e003      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	73fb      	strb	r3, [r7, #15]
      break;
 800c380:	e000      	b.n	800c384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b083      	sub	sp, #12
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3a6:	bf00      	nop
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3b2:	b480      	push	{r7}
 800c3b4:	b083      	sub	sp, #12
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3ba:	bf00      	nop
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3c6:	b480      	push	{r7}
 800c3c8:	b083      	sub	sp, #12
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3ce:	bf00      	nop
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3e2:	bf00      	nop
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a40      	ldr	r2, [pc, #256]	; (800c504 <TIM_Base_SetConfig+0x114>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d013      	beq.n	800c430 <TIM_Base_SetConfig+0x40>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c40e:	d00f      	beq.n	800c430 <TIM_Base_SetConfig+0x40>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a3d      	ldr	r2, [pc, #244]	; (800c508 <TIM_Base_SetConfig+0x118>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d00b      	beq.n	800c430 <TIM_Base_SetConfig+0x40>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a3c      	ldr	r2, [pc, #240]	; (800c50c <TIM_Base_SetConfig+0x11c>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d007      	beq.n	800c430 <TIM_Base_SetConfig+0x40>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a3b      	ldr	r2, [pc, #236]	; (800c510 <TIM_Base_SetConfig+0x120>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d003      	beq.n	800c430 <TIM_Base_SetConfig+0x40>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a3a      	ldr	r2, [pc, #232]	; (800c514 <TIM_Base_SetConfig+0x124>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d108      	bne.n	800c442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	4313      	orrs	r3, r2
 800c440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a2f      	ldr	r2, [pc, #188]	; (800c504 <TIM_Base_SetConfig+0x114>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d02b      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c450:	d027      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a2c      	ldr	r2, [pc, #176]	; (800c508 <TIM_Base_SetConfig+0x118>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d023      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a2b      	ldr	r2, [pc, #172]	; (800c50c <TIM_Base_SetConfig+0x11c>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d01f      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a2a      	ldr	r2, [pc, #168]	; (800c510 <TIM_Base_SetConfig+0x120>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d01b      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a29      	ldr	r2, [pc, #164]	; (800c514 <TIM_Base_SetConfig+0x124>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d017      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a28      	ldr	r2, [pc, #160]	; (800c518 <TIM_Base_SetConfig+0x128>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d013      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a27      	ldr	r2, [pc, #156]	; (800c51c <TIM_Base_SetConfig+0x12c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d00f      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a26      	ldr	r2, [pc, #152]	; (800c520 <TIM_Base_SetConfig+0x130>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d00b      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a25      	ldr	r2, [pc, #148]	; (800c524 <TIM_Base_SetConfig+0x134>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d007      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a24      	ldr	r2, [pc, #144]	; (800c528 <TIM_Base_SetConfig+0x138>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d003      	beq.n	800c4a2 <TIM_Base_SetConfig+0xb2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a23      	ldr	r2, [pc, #140]	; (800c52c <TIM_Base_SetConfig+0x13c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d108      	bne.n	800c4b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a0a      	ldr	r2, [pc, #40]	; (800c504 <TIM_Base_SetConfig+0x114>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d003      	beq.n	800c4e8 <TIM_Base_SetConfig+0xf8>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a0c      	ldr	r2, [pc, #48]	; (800c514 <TIM_Base_SetConfig+0x124>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d103      	bne.n	800c4f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	691a      	ldr	r2, [r3, #16]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	615a      	str	r2, [r3, #20]
}
 800c4f6:	bf00      	nop
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	40010000 	.word	0x40010000
 800c508:	40000400 	.word	0x40000400
 800c50c:	40000800 	.word	0x40000800
 800c510:	40000c00 	.word	0x40000c00
 800c514:	40010400 	.word	0x40010400
 800c518:	40014000 	.word	0x40014000
 800c51c:	40014400 	.word	0x40014400
 800c520:	40014800 	.word	0x40014800
 800c524:	40001800 	.word	0x40001800
 800c528:	40001c00 	.word	0x40001c00
 800c52c:	40002000 	.word	0x40002000

0800c530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f023 0201 	bic.w	r2, r3, #1
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f023 0303 	bic.w	r3, r3, #3
 800c566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4313      	orrs	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f023 0302 	bic.w	r3, r3, #2
 800c578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4313      	orrs	r3, r2
 800c582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a20      	ldr	r2, [pc, #128]	; (800c608 <TIM_OC1_SetConfig+0xd8>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d003      	beq.n	800c594 <TIM_OC1_SetConfig+0x64>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a1f      	ldr	r2, [pc, #124]	; (800c60c <TIM_OC1_SetConfig+0xdc>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d10c      	bne.n	800c5ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0308 	bic.w	r3, r3, #8
 800c59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f023 0304 	bic.w	r3, r3, #4
 800c5ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a15      	ldr	r2, [pc, #84]	; (800c608 <TIM_OC1_SetConfig+0xd8>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d003      	beq.n	800c5be <TIM_OC1_SetConfig+0x8e>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a14      	ldr	r2, [pc, #80]	; (800c60c <TIM_OC1_SetConfig+0xdc>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d111      	bne.n	800c5e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	693a      	ldr	r2, [r7, #16]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	697a      	ldr	r2, [r7, #20]
 800c5fa:	621a      	str	r2, [r3, #32]
}
 800c5fc:	bf00      	nop
 800c5fe:	371c      	adds	r7, #28
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40010000 	.word	0x40010000
 800c60c:	40010400 	.word	0x40010400

0800c610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f023 0210 	bic.w	r2, r3, #16
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	4313      	orrs	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f023 0320 	bic.w	r3, r3, #32
 800c65a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	011b      	lsls	r3, r3, #4
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	4313      	orrs	r3, r2
 800c666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a22      	ldr	r2, [pc, #136]	; (800c6f4 <TIM_OC2_SetConfig+0xe4>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d003      	beq.n	800c678 <TIM_OC2_SetConfig+0x68>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a21      	ldr	r2, [pc, #132]	; (800c6f8 <TIM_OC2_SetConfig+0xe8>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d10d      	bne.n	800c694 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c67e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	4313      	orrs	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c692:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a17      	ldr	r2, [pc, #92]	; (800c6f4 <TIM_OC2_SetConfig+0xe4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d003      	beq.n	800c6a4 <TIM_OC2_SetConfig+0x94>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a16      	ldr	r2, [pc, #88]	; (800c6f8 <TIM_OC2_SetConfig+0xe8>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d113      	bne.n	800c6cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	621a      	str	r2, [r3, #32]
}
 800c6e6:	bf00      	nop
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	40010000 	.word	0x40010000
 800c6f8:	40010400 	.word	0x40010400

0800c6fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a1b      	ldr	r3, [r3, #32]
 800c716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f023 0303 	bic.w	r3, r3, #3
 800c732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	021b      	lsls	r3, r3, #8
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	4313      	orrs	r3, r2
 800c750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a21      	ldr	r2, [pc, #132]	; (800c7dc <TIM_OC3_SetConfig+0xe0>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d003      	beq.n	800c762 <TIM_OC3_SetConfig+0x66>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a20      	ldr	r2, [pc, #128]	; (800c7e0 <TIM_OC3_SetConfig+0xe4>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d10d      	bne.n	800c77e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	021b      	lsls	r3, r3, #8
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	4313      	orrs	r3, r2
 800c774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c77c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a16      	ldr	r2, [pc, #88]	; (800c7dc <TIM_OC3_SetConfig+0xe0>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d003      	beq.n	800c78e <TIM_OC3_SetConfig+0x92>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a15      	ldr	r2, [pc, #84]	; (800c7e0 <TIM_OC3_SetConfig+0xe4>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d113      	bne.n	800c7b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c79c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	011b      	lsls	r3, r3, #4
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	011b      	lsls	r3, r3, #4
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	621a      	str	r2, [r3, #32]
}
 800c7d0:	bf00      	nop
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	40010000 	.word	0x40010000
 800c7e0:	40010400 	.word	0x40010400

0800c7e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b087      	sub	sp, #28
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c81a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	021b      	lsls	r3, r3, #8
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	4313      	orrs	r3, r2
 800c826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c82e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	031b      	lsls	r3, r3, #12
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	4313      	orrs	r3, r2
 800c83a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a12      	ldr	r2, [pc, #72]	; (800c888 <TIM_OC4_SetConfig+0xa4>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d003      	beq.n	800c84c <TIM_OC4_SetConfig+0x68>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a11      	ldr	r2, [pc, #68]	; (800c88c <TIM_OC4_SetConfig+0xa8>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d109      	bne.n	800c860 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c852:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	019b      	lsls	r3, r3, #6
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	621a      	str	r2, [r3, #32]
}
 800c87a:	bf00      	nop
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	40010000 	.word	0x40010000
 800c88c:	40010400 	.word	0x40010400

0800c890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6a1b      	ldr	r3, [r3, #32]
 800c8a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	f023 0201 	bic.w	r2, r3, #1
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f023 030a 	bic.w	r3, r3, #10
 800c8cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	621a      	str	r2, [r3, #32]
}
 800c8e2:	bf00      	nop
 800c8e4:	371c      	adds	r7, #28
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b087      	sub	sp, #28
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	60f8      	str	r0, [r7, #12]
 800c8f6:	60b9      	str	r1, [r7, #8]
 800c8f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	f023 0210 	bic.w	r2, r3, #16
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	031b      	lsls	r3, r3, #12
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	4313      	orrs	r3, r2
 800c922:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c92a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	4313      	orrs	r3, r2
 800c934:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	621a      	str	r2, [r3, #32]
}
 800c942:	bf00      	nop
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c94e:	b480      	push	{r7}
 800c950:	b085      	sub	sp, #20
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	f043 0307 	orr.w	r3, r3, #7
 800c970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	609a      	str	r2, [r3, #8]
}
 800c978:	bf00      	nop
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c984:	b480      	push	{r7}
 800c986:	b087      	sub	sp, #28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c99e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	021a      	lsls	r2, r3, #8
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	431a      	orrs	r2, r3
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	609a      	str	r2, [r3, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	371c      	adds	r7, #28
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f003 031f 	and.w	r3, r3, #31
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6a1a      	ldr	r2, [r3, #32]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	43db      	mvns	r3, r3
 800c9e6:	401a      	ands	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6a1a      	ldr	r2, [r3, #32]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	f003 031f 	and.w	r3, r3, #31
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
	...

0800ca10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d101      	bne.n	800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca24:	2302      	movs	r3, #2
 800ca26:	e05a      	b.n	800cade <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2202      	movs	r2, #2
 800ca34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a21      	ldr	r2, [pc, #132]	; (800caec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d022      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca74:	d01d      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a1d      	ldr	r2, [pc, #116]	; (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d018      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a1b      	ldr	r2, [pc, #108]	; (800caf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d013      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a1a      	ldr	r2, [pc, #104]	; (800caf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00e      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a18      	ldr	r2, [pc, #96]	; (800cafc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d009      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a17      	ldr	r2, [pc, #92]	; (800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d004      	beq.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a15      	ldr	r2, [pc, #84]	; (800cb04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d10c      	bne.n	800cacc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40010000 	.word	0x40010000
 800caf0:	40000400 	.word	0x40000400
 800caf4:	40000800 	.word	0x40000800
 800caf8:	40000c00 	.word	0x40000c00
 800cafc:	40010400 	.word	0x40010400
 800cb00:	40014000 	.word	0x40014000
 800cb04:	40001800 	.word	0x40001800

0800cb08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d101      	bne.n	800cb24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e03d      	b.n	800cba0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e03f      	b.n	800cc66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7fb fba8 	bl	8008350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2224      	movs	r2, #36	; 0x24
 800cc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f829 	bl	800cc70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	691a      	ldr	r2, [r3, #16]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	695a      	ldr	r2, [r3, #20]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2220      	movs	r2, #32
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2220      	movs	r2, #32
 800cc60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc74:	b0c0      	sub	sp, #256	; 0x100
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc8c:	68d9      	ldr	r1, [r3, #12]
 800cc8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	ea40 0301 	orr.w	r3, r0, r1
 800cc98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	431a      	orrs	r2, r3
 800cca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	431a      	orrs	r2, r3
 800ccb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ccbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ccc8:	f021 010c 	bic.w	r1, r1, #12
 800cccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccd6:	430b      	orrs	r3, r1
 800ccd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ccda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccea:	6999      	ldr	r1, [r3, #24]
 800ccec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	ea40 0301 	orr.w	r3, r0, r1
 800ccf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b8f      	ldr	r3, [pc, #572]	; (800cf3c <UART_SetConfig+0x2cc>)
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d005      	beq.n	800cd10 <UART_SetConfig+0xa0>
 800cd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b8d      	ldr	r3, [pc, #564]	; (800cf40 <UART_SetConfig+0x2d0>)
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d104      	bne.n	800cd1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd10:	f7fe fd94 	bl	800b83c <HAL_RCC_GetPCLK2Freq>
 800cd14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cd18:	e003      	b.n	800cd22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd1a:	f7fe fd7b 	bl	800b814 <HAL_RCC_GetPCLK1Freq>
 800cd1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd2c:	f040 810c 	bne.w	800cf48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd34:	2200      	movs	r2, #0
 800cd36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cd3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cd42:	4622      	mov	r2, r4
 800cd44:	462b      	mov	r3, r5
 800cd46:	1891      	adds	r1, r2, r2
 800cd48:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd4a:	415b      	adcs	r3, r3
 800cd4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cd52:	4621      	mov	r1, r4
 800cd54:	eb12 0801 	adds.w	r8, r2, r1
 800cd58:	4629      	mov	r1, r5
 800cd5a:	eb43 0901 	adc.w	r9, r3, r1
 800cd5e:	f04f 0200 	mov.w	r2, #0
 800cd62:	f04f 0300 	mov.w	r3, #0
 800cd66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd72:	4690      	mov	r8, r2
 800cd74:	4699      	mov	r9, r3
 800cd76:	4623      	mov	r3, r4
 800cd78:	eb18 0303 	adds.w	r3, r8, r3
 800cd7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cd80:	462b      	mov	r3, r5
 800cd82:	eb49 0303 	adc.w	r3, r9, r3
 800cd86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cd8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cd96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cd9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cd9e:	460b      	mov	r3, r1
 800cda0:	18db      	adds	r3, r3, r3
 800cda2:	653b      	str	r3, [r7, #80]	; 0x50
 800cda4:	4613      	mov	r3, r2
 800cda6:	eb42 0303 	adc.w	r3, r2, r3
 800cdaa:	657b      	str	r3, [r7, #84]	; 0x54
 800cdac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cdb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cdb4:	f7f3 ff68 	bl	8000c88 <__aeabi_uldivmod>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4b61      	ldr	r3, [pc, #388]	; (800cf44 <UART_SetConfig+0x2d4>)
 800cdbe:	fba3 2302 	umull	r2, r3, r3, r2
 800cdc2:	095b      	lsrs	r3, r3, #5
 800cdc4:	011c      	lsls	r4, r3, #4
 800cdc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cdd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cdd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cdd8:	4642      	mov	r2, r8
 800cdda:	464b      	mov	r3, r9
 800cddc:	1891      	adds	r1, r2, r2
 800cdde:	64b9      	str	r1, [r7, #72]	; 0x48
 800cde0:	415b      	adcs	r3, r3
 800cde2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cde4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cde8:	4641      	mov	r1, r8
 800cdea:	eb12 0a01 	adds.w	sl, r2, r1
 800cdee:	4649      	mov	r1, r9
 800cdf0:	eb43 0b01 	adc.w	fp, r3, r1
 800cdf4:	f04f 0200 	mov.w	r2, #0
 800cdf8:	f04f 0300 	mov.w	r3, #0
 800cdfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce08:	4692      	mov	sl, r2
 800ce0a:	469b      	mov	fp, r3
 800ce0c:	4643      	mov	r3, r8
 800ce0e:	eb1a 0303 	adds.w	r3, sl, r3
 800ce12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce16:	464b      	mov	r3, r9
 800ce18:	eb4b 0303 	adc.w	r3, fp, r3
 800ce1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ce20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ce30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ce34:	460b      	mov	r3, r1
 800ce36:	18db      	adds	r3, r3, r3
 800ce38:	643b      	str	r3, [r7, #64]	; 0x40
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	eb42 0303 	adc.w	r3, r2, r3
 800ce40:	647b      	str	r3, [r7, #68]	; 0x44
 800ce42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ce46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ce4a:	f7f3 ff1d 	bl	8000c88 <__aeabi_uldivmod>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	4611      	mov	r1, r2
 800ce54:	4b3b      	ldr	r3, [pc, #236]	; (800cf44 <UART_SetConfig+0x2d4>)
 800ce56:	fba3 2301 	umull	r2, r3, r3, r1
 800ce5a:	095b      	lsrs	r3, r3, #5
 800ce5c:	2264      	movs	r2, #100	; 0x64
 800ce5e:	fb02 f303 	mul.w	r3, r2, r3
 800ce62:	1acb      	subs	r3, r1, r3
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ce6a:	4b36      	ldr	r3, [pc, #216]	; (800cf44 <UART_SetConfig+0x2d4>)
 800ce6c:	fba3 2302 	umull	r2, r3, r3, r2
 800ce70:	095b      	lsrs	r3, r3, #5
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ce78:	441c      	add	r4, r3
 800ce7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ce88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	1891      	adds	r1, r2, r2
 800ce92:	63b9      	str	r1, [r7, #56]	; 0x38
 800ce94:	415b      	adcs	r3, r3
 800ce96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ce9c:	4641      	mov	r1, r8
 800ce9e:	1851      	adds	r1, r2, r1
 800cea0:	6339      	str	r1, [r7, #48]	; 0x30
 800cea2:	4649      	mov	r1, r9
 800cea4:	414b      	adcs	r3, r1
 800cea6:	637b      	str	r3, [r7, #52]	; 0x34
 800cea8:	f04f 0200 	mov.w	r2, #0
 800ceac:	f04f 0300 	mov.w	r3, #0
 800ceb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ceb4:	4659      	mov	r1, fp
 800ceb6:	00cb      	lsls	r3, r1, #3
 800ceb8:	4651      	mov	r1, sl
 800ceba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cebe:	4651      	mov	r1, sl
 800cec0:	00ca      	lsls	r2, r1, #3
 800cec2:	4610      	mov	r0, r2
 800cec4:	4619      	mov	r1, r3
 800cec6:	4603      	mov	r3, r0
 800cec8:	4642      	mov	r2, r8
 800ceca:	189b      	adds	r3, r3, r2
 800cecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ced0:	464b      	mov	r3, r9
 800ced2:	460a      	mov	r2, r1
 800ced4:	eb42 0303 	adc.w	r3, r2, r3
 800ced8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cee8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ceec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cef0:	460b      	mov	r3, r1
 800cef2:	18db      	adds	r3, r3, r3
 800cef4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cef6:	4613      	mov	r3, r2
 800cef8:	eb42 0303 	adc.w	r3, r2, r3
 800cefc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cefe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cf06:	f7f3 febf 	bl	8000c88 <__aeabi_uldivmod>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4b0d      	ldr	r3, [pc, #52]	; (800cf44 <UART_SetConfig+0x2d4>)
 800cf10:	fba3 1302 	umull	r1, r3, r3, r2
 800cf14:	095b      	lsrs	r3, r3, #5
 800cf16:	2164      	movs	r1, #100	; 0x64
 800cf18:	fb01 f303 	mul.w	r3, r1, r3
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	3332      	adds	r3, #50	; 0x32
 800cf22:	4a08      	ldr	r2, [pc, #32]	; (800cf44 <UART_SetConfig+0x2d4>)
 800cf24:	fba2 2303 	umull	r2, r3, r2, r3
 800cf28:	095b      	lsrs	r3, r3, #5
 800cf2a:	f003 0207 	and.w	r2, r3, #7
 800cf2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4422      	add	r2, r4
 800cf36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cf38:	e105      	b.n	800d146 <UART_SetConfig+0x4d6>
 800cf3a:	bf00      	nop
 800cf3c:	40011000 	.word	0x40011000
 800cf40:	40011400 	.word	0x40011400
 800cf44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cf56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cf5a:	4642      	mov	r2, r8
 800cf5c:	464b      	mov	r3, r9
 800cf5e:	1891      	adds	r1, r2, r2
 800cf60:	6239      	str	r1, [r7, #32]
 800cf62:	415b      	adcs	r3, r3
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
 800cf66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	1854      	adds	r4, r2, r1
 800cf6e:	4649      	mov	r1, r9
 800cf70:	eb43 0501 	adc.w	r5, r3, r1
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	f04f 0300 	mov.w	r3, #0
 800cf7c:	00eb      	lsls	r3, r5, #3
 800cf7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf82:	00e2      	lsls	r2, r4, #3
 800cf84:	4614      	mov	r4, r2
 800cf86:	461d      	mov	r5, r3
 800cf88:	4643      	mov	r3, r8
 800cf8a:	18e3      	adds	r3, r4, r3
 800cf8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf90:	464b      	mov	r3, r9
 800cf92:	eb45 0303 	adc.w	r3, r5, r3
 800cf96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cfa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cfaa:	f04f 0200 	mov.w	r2, #0
 800cfae:	f04f 0300 	mov.w	r3, #0
 800cfb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	008b      	lsls	r3, r1, #2
 800cfba:	4621      	mov	r1, r4
 800cfbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	008a      	lsls	r2, r1, #2
 800cfc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cfc8:	f7f3 fe5e 	bl	8000c88 <__aeabi_uldivmod>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4b60      	ldr	r3, [pc, #384]	; (800d154 <UART_SetConfig+0x4e4>)
 800cfd2:	fba3 2302 	umull	r2, r3, r3, r2
 800cfd6:	095b      	lsrs	r3, r3, #5
 800cfd8:	011c      	lsls	r4, r3, #4
 800cfda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cfe4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cfe8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cfec:	4642      	mov	r2, r8
 800cfee:	464b      	mov	r3, r9
 800cff0:	1891      	adds	r1, r2, r2
 800cff2:	61b9      	str	r1, [r7, #24]
 800cff4:	415b      	adcs	r3, r3
 800cff6:	61fb      	str	r3, [r7, #28]
 800cff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cffc:	4641      	mov	r1, r8
 800cffe:	1851      	adds	r1, r2, r1
 800d000:	6139      	str	r1, [r7, #16]
 800d002:	4649      	mov	r1, r9
 800d004:	414b      	adcs	r3, r1
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	f04f 0200 	mov.w	r2, #0
 800d00c:	f04f 0300 	mov.w	r3, #0
 800d010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d014:	4659      	mov	r1, fp
 800d016:	00cb      	lsls	r3, r1, #3
 800d018:	4651      	mov	r1, sl
 800d01a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d01e:	4651      	mov	r1, sl
 800d020:	00ca      	lsls	r2, r1, #3
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	4603      	mov	r3, r0
 800d028:	4642      	mov	r2, r8
 800d02a:	189b      	adds	r3, r3, r2
 800d02c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d030:	464b      	mov	r3, r9
 800d032:	460a      	mov	r2, r1
 800d034:	eb42 0303 	adc.w	r3, r2, r3
 800d038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	67bb      	str	r3, [r7, #120]	; 0x78
 800d046:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d048:	f04f 0200 	mov.w	r2, #0
 800d04c:	f04f 0300 	mov.w	r3, #0
 800d050:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d054:	4649      	mov	r1, r9
 800d056:	008b      	lsls	r3, r1, #2
 800d058:	4641      	mov	r1, r8
 800d05a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d05e:	4641      	mov	r1, r8
 800d060:	008a      	lsls	r2, r1, #2
 800d062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d066:	f7f3 fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4b39      	ldr	r3, [pc, #228]	; (800d154 <UART_SetConfig+0x4e4>)
 800d070:	fba3 1302 	umull	r1, r3, r3, r2
 800d074:	095b      	lsrs	r3, r3, #5
 800d076:	2164      	movs	r1, #100	; 0x64
 800d078:	fb01 f303 	mul.w	r3, r1, r3
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	3332      	adds	r3, #50	; 0x32
 800d082:	4a34      	ldr	r2, [pc, #208]	; (800d154 <UART_SetConfig+0x4e4>)
 800d084:	fba2 2303 	umull	r2, r3, r2, r3
 800d088:	095b      	lsrs	r3, r3, #5
 800d08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d08e:	441c      	add	r4, r3
 800d090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d094:	2200      	movs	r2, #0
 800d096:	673b      	str	r3, [r7, #112]	; 0x70
 800d098:	677a      	str	r2, [r7, #116]	; 0x74
 800d09a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d09e:	4642      	mov	r2, r8
 800d0a0:	464b      	mov	r3, r9
 800d0a2:	1891      	adds	r1, r2, r2
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	415b      	adcs	r3, r3
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0ae:	4641      	mov	r1, r8
 800d0b0:	1851      	adds	r1, r2, r1
 800d0b2:	6039      	str	r1, [r7, #0]
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	414b      	adcs	r3, r1
 800d0b8:	607b      	str	r3, [r7, #4]
 800d0ba:	f04f 0200 	mov.w	r2, #0
 800d0be:	f04f 0300 	mov.w	r3, #0
 800d0c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d0c6:	4659      	mov	r1, fp
 800d0c8:	00cb      	lsls	r3, r1, #3
 800d0ca:	4651      	mov	r1, sl
 800d0cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0d0:	4651      	mov	r1, sl
 800d0d2:	00ca      	lsls	r2, r1, #3
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4603      	mov	r3, r0
 800d0da:	4642      	mov	r2, r8
 800d0dc:	189b      	adds	r3, r3, r2
 800d0de:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	eb42 0303 	adc.w	r3, r2, r3
 800d0e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	663b      	str	r3, [r7, #96]	; 0x60
 800d0f4:	667a      	str	r2, [r7, #100]	; 0x64
 800d0f6:	f04f 0200 	mov.w	r2, #0
 800d0fa:	f04f 0300 	mov.w	r3, #0
 800d0fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d102:	4649      	mov	r1, r9
 800d104:	008b      	lsls	r3, r1, #2
 800d106:	4641      	mov	r1, r8
 800d108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d10c:	4641      	mov	r1, r8
 800d10e:	008a      	lsls	r2, r1, #2
 800d110:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d114:	f7f3 fdb8 	bl	8000c88 <__aeabi_uldivmod>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4b0d      	ldr	r3, [pc, #52]	; (800d154 <UART_SetConfig+0x4e4>)
 800d11e:	fba3 1302 	umull	r1, r3, r3, r2
 800d122:	095b      	lsrs	r3, r3, #5
 800d124:	2164      	movs	r1, #100	; 0x64
 800d126:	fb01 f303 	mul.w	r3, r1, r3
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	011b      	lsls	r3, r3, #4
 800d12e:	3332      	adds	r3, #50	; 0x32
 800d130:	4a08      	ldr	r2, [pc, #32]	; (800d154 <UART_SetConfig+0x4e4>)
 800d132:	fba2 2303 	umull	r2, r3, r2, r3
 800d136:	095b      	lsrs	r3, r3, #5
 800d138:	f003 020f 	and.w	r2, r3, #15
 800d13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4422      	add	r2, r4
 800d144:	609a      	str	r2, [r3, #8]
}
 800d146:	bf00      	nop
 800d148:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d14c:	46bd      	mov	sp, r7
 800d14e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d152:	bf00      	nop
 800d154:	51eb851f 	.word	0x51eb851f

0800d158 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d158:	b084      	sub	sp, #16
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	f107 001c 	add.w	r0, r7, #28
 800d166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d122      	bne.n	800d1b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d105      	bne.n	800d1aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 faa2 	bl	800d6f4 <USB_CoreReset>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]
 800d1b4:	e01a      	b.n	800d1ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fa96 	bl	800d6f4 <USB_CoreReset>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d106      	bne.n	800d1e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
 800d1de:	e005      	b.n	800d1ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d10b      	bne.n	800d20a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f043 0206 	orr.w	r2, r3, #6
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	f043 0220 	orr.w	r2, r3, #32
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d216:	b004      	add	sp, #16
 800d218:	4770      	bx	lr

0800d21a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d21a:	b480      	push	{r7}
 800d21c:	b083      	sub	sp, #12
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f023 0201 	bic.w	r2, r3, #1
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d258:	78fb      	ldrb	r3, [r7, #3]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d115      	bne.n	800d28a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d26a:	2001      	movs	r0, #1
 800d26c:	f7fb f9ce 	bl	800860c <HAL_Delay>
      ms++;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3301      	adds	r3, #1
 800d274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fa2e 	bl	800d6d8 <USB_GetMode>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d01e      	beq.n	800d2c0 <USB_SetCurrentMode+0x84>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b31      	cmp	r3, #49	; 0x31
 800d286:	d9f0      	bls.n	800d26a <USB_SetCurrentMode+0x2e>
 800d288:	e01a      	b.n	800d2c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d115      	bne.n	800d2bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d29c:	2001      	movs	r0, #1
 800d29e:	f7fb f9b5 	bl	800860c <HAL_Delay>
      ms++;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fa15 	bl	800d6d8 <USB_GetMode>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <USB_SetCurrentMode+0x84>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b31      	cmp	r3, #49	; 0x31
 800d2b8:	d9f0      	bls.n	800d29c <USB_SetCurrentMode+0x60>
 800d2ba:	e001      	b.n	800d2c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e005      	b.n	800d2cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b32      	cmp	r3, #50	; 0x32
 800d2c4:	d101      	bne.n	800d2ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e000      	b.n	800d2cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b086      	sub	sp, #24
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	e009      	b.n	800d308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	3340      	adds	r3, #64	; 0x40
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	3301      	adds	r3, #1
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	2b0e      	cmp	r3, #14
 800d30c:	d9f2      	bls.n	800d2f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d310:	2b00      	cmp	r3, #0
 800d312:	d11c      	bne.n	800d34e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d322:	f043 0302 	orr.w	r3, r3, #2
 800d326:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d338:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d344:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	639a      	str	r2, [r3, #56]	; 0x38
 800d34c:	e00b      	b.n	800d366 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d352:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d36c:	461a      	mov	r2, r3
 800d36e:	2300      	movs	r3, #0
 800d370:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d378:	4619      	mov	r1, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d380:	461a      	mov	r2, r3
 800d382:	680b      	ldr	r3, [r1, #0]
 800d384:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d10c      	bne.n	800d3a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d104      	bne.n	800d39c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d392:	2100      	movs	r1, #0
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f965 	bl	800d664 <USB_SetDevSpeed>
 800d39a:	e008      	b.n	800d3ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d39c:	2101      	movs	r1, #1
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f960 	bl	800d664 <USB_SetDevSpeed>
 800d3a4:	e003      	b.n	800d3ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d3a6:	2103      	movs	r1, #3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f95b 	bl	800d664 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d3ae:	2110      	movs	r1, #16
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f8f3 	bl	800d59c <USB_FlushTxFifo>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f91f 	bl	800d604 <USB_FlushRxFifo>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	2300      	movs	r3, #0
 800d3da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	e043      	b.n	800d482 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d40c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d410:	d118      	bne.n	800d444 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10a      	bne.n	800d42e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	015a      	lsls	r2, r3, #5
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d424:	461a      	mov	r2, r3
 800d426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d42a:	6013      	str	r3, [r2, #0]
 800d42c:	e013      	b.n	800d456 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4413      	add	r3, r2
 800d436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43a:	461a      	mov	r2, r3
 800d43c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	e008      	b.n	800d456 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d450:	461a      	mov	r2, r3
 800d452:	2300      	movs	r3, #0
 800d454:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d462:	461a      	mov	r2, r3
 800d464:	2300      	movs	r3, #0
 800d466:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d474:	461a      	mov	r2, r3
 800d476:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d47a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	3301      	adds	r3, #1
 800d480:	613b      	str	r3, [r7, #16]
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	429a      	cmp	r2, r3
 800d488:	d3b7      	bcc.n	800d3fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d48a:	2300      	movs	r3, #0
 800d48c:	613b      	str	r3, [r7, #16]
 800d48e:	e043      	b.n	800d518 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a6:	d118      	bne.n	800d4da <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10a      	bne.n	800d4c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	015a      	lsls	r2, r3, #5
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4c0:	6013      	str	r3, [r2, #0]
 800d4c2:	e013      	b.n	800d4ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d4d6:	6013      	str	r3, [r2, #0]
 800d4d8:	e008      	b.n	800d4ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	015a      	lsls	r2, r3, #5
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	4413      	add	r3, r2
 800d506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50a:	461a      	mov	r2, r3
 800d50c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	3301      	adds	r3, #1
 800d516:	613b      	str	r3, [r7, #16]
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d3b7      	bcc.n	800d490 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d52e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d532:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d540:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	2b00      	cmp	r3, #0
 800d546:	d105      	bne.n	800d554 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	699b      	ldr	r3, [r3, #24]
 800d54c:	f043 0210 	orr.w	r2, r3, #16
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	699a      	ldr	r2, [r3, #24]
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <USB_DevInit+0x2c4>)
 800d55a:	4313      	orrs	r3, r2
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d005      	beq.n	800d572 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	f043 0208 	orr.w	r2, r3, #8
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d574:	2b01      	cmp	r3, #1
 800d576:	d107      	bne.n	800d588 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d580:	f043 0304 	orr.w	r3, r3, #4
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d588:	7dfb      	ldrb	r3, [r7, #23]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d594:	b004      	add	sp, #16
 800d596:	4770      	bx	lr
 800d598:	803c3800 	.word	0x803c3800

0800d59c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4a13      	ldr	r2, [pc, #76]	; (800d600 <USB_FlushTxFifo+0x64>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d901      	bls.n	800d5bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	e01b      	b.n	800d5f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	daf2      	bge.n	800d5aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	019b      	lsls	r3, r3, #6
 800d5cc:	f043 0220 	orr.w	r2, r3, #32
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4a08      	ldr	r2, [pc, #32]	; (800d600 <USB_FlushTxFifo+0x64>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d901      	bls.n	800d5e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e006      	b.n	800d5f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	f003 0320 	and.w	r3, r3, #32
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	d0f0      	beq.n	800d5d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	00030d40 	.word	0x00030d40

0800d604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	3301      	adds	r3, #1
 800d614:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	4a11      	ldr	r2, [pc, #68]	; (800d660 <USB_FlushRxFifo+0x5c>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d901      	bls.n	800d622 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d61e:	2303      	movs	r3, #3
 800d620:	e018      	b.n	800d654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	daf2      	bge.n	800d610 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2210      	movs	r2, #16
 800d632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	4a08      	ldr	r2, [pc, #32]	; (800d660 <USB_FlushRxFifo+0x5c>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d901      	bls.n	800d646 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e006      	b.n	800d654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	f003 0310 	and.w	r3, r3, #16
 800d64e:	2b10      	cmp	r3, #16
 800d650:	d0f0      	beq.n	800d634 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	00030d40 	.word	0x00030d40

0800d664 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	68f9      	ldr	r1, [r7, #12]
 800d680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d684:	4313      	orrs	r3, r2
 800d686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d696:	b480      	push	{r7}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6b0:	f023 0303 	bic.w	r3, r3, #3
 800d6b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6c4:	f043 0302 	orr.w	r3, r3, #2
 800d6c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	f003 0301 	and.w	r3, r3, #1
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	3301      	adds	r3, #1
 800d704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	4a13      	ldr	r2, [pc, #76]	; (800d758 <USB_CoreReset+0x64>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d901      	bls.n	800d712 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e01b      	b.n	800d74a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	daf2      	bge.n	800d700 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d71a:	2300      	movs	r3, #0
 800d71c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	f043 0201 	orr.w	r2, r3, #1
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	3301      	adds	r3, #1
 800d72e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4a09      	ldr	r2, [pc, #36]	; (800d758 <USB_CoreReset+0x64>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d901      	bls.n	800d73c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d738:	2303      	movs	r3, #3
 800d73a:	e006      	b.n	800d74a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	691b      	ldr	r3, [r3, #16]
 800d740:	f003 0301 	and.w	r3, r3, #1
 800d744:	2b01      	cmp	r3, #1
 800d746:	d0f0      	beq.n	800d72a <USB_CoreReset+0x36>

  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	00030d40 	.word	0x00030d40

0800d75c <__errno>:
 800d75c:	4b01      	ldr	r3, [pc, #4]	; (800d764 <__errno+0x8>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	20000324 	.word	0x20000324

0800d768 <__libc_init_array>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	4d0d      	ldr	r5, [pc, #52]	; (800d7a0 <__libc_init_array+0x38>)
 800d76c:	4c0d      	ldr	r4, [pc, #52]	; (800d7a4 <__libc_init_array+0x3c>)
 800d76e:	1b64      	subs	r4, r4, r5
 800d770:	10a4      	asrs	r4, r4, #2
 800d772:	2600      	movs	r6, #0
 800d774:	42a6      	cmp	r6, r4
 800d776:	d109      	bne.n	800d78c <__libc_init_array+0x24>
 800d778:	4d0b      	ldr	r5, [pc, #44]	; (800d7a8 <__libc_init_array+0x40>)
 800d77a:	4c0c      	ldr	r4, [pc, #48]	; (800d7ac <__libc_init_array+0x44>)
 800d77c:	f002 ff0a 	bl	8010594 <_init>
 800d780:	1b64      	subs	r4, r4, r5
 800d782:	10a4      	asrs	r4, r4, #2
 800d784:	2600      	movs	r6, #0
 800d786:	42a6      	cmp	r6, r4
 800d788:	d105      	bne.n	800d796 <__libc_init_array+0x2e>
 800d78a:	bd70      	pop	{r4, r5, r6, pc}
 800d78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d790:	4798      	blx	r3
 800d792:	3601      	adds	r6, #1
 800d794:	e7ee      	b.n	800d774 <__libc_init_array+0xc>
 800d796:	f855 3b04 	ldr.w	r3, [r5], #4
 800d79a:	4798      	blx	r3
 800d79c:	3601      	adds	r6, #1
 800d79e:	e7f2      	b.n	800d786 <__libc_init_array+0x1e>
 800d7a0:	08010d7c 	.word	0x08010d7c
 800d7a4:	08010d7c 	.word	0x08010d7c
 800d7a8:	08010d7c 	.word	0x08010d7c
 800d7ac:	08010d80 	.word	0x08010d80

0800d7b0 <malloc>:
 800d7b0:	4b02      	ldr	r3, [pc, #8]	; (800d7bc <malloc+0xc>)
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	6818      	ldr	r0, [r3, #0]
 800d7b6:	f000 b88d 	b.w	800d8d4 <_malloc_r>
 800d7ba:	bf00      	nop
 800d7bc:	20000324 	.word	0x20000324

0800d7c0 <free>:
 800d7c0:	4b02      	ldr	r3, [pc, #8]	; (800d7cc <free+0xc>)
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	6818      	ldr	r0, [r3, #0]
 800d7c6:	f000 b819 	b.w	800d7fc <_free_r>
 800d7ca:	bf00      	nop
 800d7cc:	20000324 	.word	0x20000324

0800d7d0 <memcpy>:
 800d7d0:	440a      	add	r2, r1
 800d7d2:	4291      	cmp	r1, r2
 800d7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7d8:	d100      	bne.n	800d7dc <memcpy+0xc>
 800d7da:	4770      	bx	lr
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7e6:	4291      	cmp	r1, r2
 800d7e8:	d1f9      	bne.n	800d7de <memcpy+0xe>
 800d7ea:	bd10      	pop	{r4, pc}

0800d7ec <memset>:
 800d7ec:	4402      	add	r2, r0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d100      	bne.n	800d7f6 <memset+0xa>
 800d7f4:	4770      	bx	lr
 800d7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7fa:	e7f9      	b.n	800d7f0 <memset+0x4>

0800d7fc <_free_r>:
 800d7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7fe:	2900      	cmp	r1, #0
 800d800:	d044      	beq.n	800d88c <_free_r+0x90>
 800d802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d806:	9001      	str	r0, [sp, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f1a1 0404 	sub.w	r4, r1, #4
 800d80e:	bfb8      	it	lt
 800d810:	18e4      	addlt	r4, r4, r3
 800d812:	f001 fbeb 	bl	800efec <__malloc_lock>
 800d816:	4a1e      	ldr	r2, [pc, #120]	; (800d890 <_free_r+0x94>)
 800d818:	9801      	ldr	r0, [sp, #4]
 800d81a:	6813      	ldr	r3, [r2, #0]
 800d81c:	b933      	cbnz	r3, 800d82c <_free_r+0x30>
 800d81e:	6063      	str	r3, [r4, #4]
 800d820:	6014      	str	r4, [r2, #0]
 800d822:	b003      	add	sp, #12
 800d824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d828:	f001 bbe6 	b.w	800eff8 <__malloc_unlock>
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d908      	bls.n	800d842 <_free_r+0x46>
 800d830:	6825      	ldr	r5, [r4, #0]
 800d832:	1961      	adds	r1, r4, r5
 800d834:	428b      	cmp	r3, r1
 800d836:	bf01      	itttt	eq
 800d838:	6819      	ldreq	r1, [r3, #0]
 800d83a:	685b      	ldreq	r3, [r3, #4]
 800d83c:	1949      	addeq	r1, r1, r5
 800d83e:	6021      	streq	r1, [r4, #0]
 800d840:	e7ed      	b.n	800d81e <_free_r+0x22>
 800d842:	461a      	mov	r2, r3
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	b10b      	cbz	r3, 800d84c <_free_r+0x50>
 800d848:	42a3      	cmp	r3, r4
 800d84a:	d9fa      	bls.n	800d842 <_free_r+0x46>
 800d84c:	6811      	ldr	r1, [r2, #0]
 800d84e:	1855      	adds	r5, r2, r1
 800d850:	42a5      	cmp	r5, r4
 800d852:	d10b      	bne.n	800d86c <_free_r+0x70>
 800d854:	6824      	ldr	r4, [r4, #0]
 800d856:	4421      	add	r1, r4
 800d858:	1854      	adds	r4, r2, r1
 800d85a:	42a3      	cmp	r3, r4
 800d85c:	6011      	str	r1, [r2, #0]
 800d85e:	d1e0      	bne.n	800d822 <_free_r+0x26>
 800d860:	681c      	ldr	r4, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	6053      	str	r3, [r2, #4]
 800d866:	4421      	add	r1, r4
 800d868:	6011      	str	r1, [r2, #0]
 800d86a:	e7da      	b.n	800d822 <_free_r+0x26>
 800d86c:	d902      	bls.n	800d874 <_free_r+0x78>
 800d86e:	230c      	movs	r3, #12
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	e7d6      	b.n	800d822 <_free_r+0x26>
 800d874:	6825      	ldr	r5, [r4, #0]
 800d876:	1961      	adds	r1, r4, r5
 800d878:	428b      	cmp	r3, r1
 800d87a:	bf04      	itt	eq
 800d87c:	6819      	ldreq	r1, [r3, #0]
 800d87e:	685b      	ldreq	r3, [r3, #4]
 800d880:	6063      	str	r3, [r4, #4]
 800d882:	bf04      	itt	eq
 800d884:	1949      	addeq	r1, r1, r5
 800d886:	6021      	streq	r1, [r4, #0]
 800d888:	6054      	str	r4, [r2, #4]
 800d88a:	e7ca      	b.n	800d822 <_free_r+0x26>
 800d88c:	b003      	add	sp, #12
 800d88e:	bd30      	pop	{r4, r5, pc}
 800d890:	20001508 	.word	0x20001508

0800d894 <sbrk_aligned>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	4e0e      	ldr	r6, [pc, #56]	; (800d8d0 <sbrk_aligned+0x3c>)
 800d898:	460c      	mov	r4, r1
 800d89a:	6831      	ldr	r1, [r6, #0]
 800d89c:	4605      	mov	r5, r0
 800d89e:	b911      	cbnz	r1, 800d8a6 <sbrk_aligned+0x12>
 800d8a0:	f000 fcf6 	bl	800e290 <_sbrk_r>
 800d8a4:	6030      	str	r0, [r6, #0]
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f000 fcf1 	bl	800e290 <_sbrk_r>
 800d8ae:	1c43      	adds	r3, r0, #1
 800d8b0:	d00a      	beq.n	800d8c8 <sbrk_aligned+0x34>
 800d8b2:	1cc4      	adds	r4, r0, #3
 800d8b4:	f024 0403 	bic.w	r4, r4, #3
 800d8b8:	42a0      	cmp	r0, r4
 800d8ba:	d007      	beq.n	800d8cc <sbrk_aligned+0x38>
 800d8bc:	1a21      	subs	r1, r4, r0
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f000 fce6 	bl	800e290 <_sbrk_r>
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d101      	bne.n	800d8cc <sbrk_aligned+0x38>
 800d8c8:	f04f 34ff 	mov.w	r4, #4294967295
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	2000150c 	.word	0x2000150c

0800d8d4 <_malloc_r>:
 800d8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d8:	1ccd      	adds	r5, r1, #3
 800d8da:	f025 0503 	bic.w	r5, r5, #3
 800d8de:	3508      	adds	r5, #8
 800d8e0:	2d0c      	cmp	r5, #12
 800d8e2:	bf38      	it	cc
 800d8e4:	250c      	movcc	r5, #12
 800d8e6:	2d00      	cmp	r5, #0
 800d8e8:	4607      	mov	r7, r0
 800d8ea:	db01      	blt.n	800d8f0 <_malloc_r+0x1c>
 800d8ec:	42a9      	cmp	r1, r5
 800d8ee:	d905      	bls.n	800d8fc <_malloc_r+0x28>
 800d8f0:	230c      	movs	r3, #12
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	2600      	movs	r6, #0
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	4e2e      	ldr	r6, [pc, #184]	; (800d9b8 <_malloc_r+0xe4>)
 800d8fe:	f001 fb75 	bl	800efec <__malloc_lock>
 800d902:	6833      	ldr	r3, [r6, #0]
 800d904:	461c      	mov	r4, r3
 800d906:	bb34      	cbnz	r4, 800d956 <_malloc_r+0x82>
 800d908:	4629      	mov	r1, r5
 800d90a:	4638      	mov	r0, r7
 800d90c:	f7ff ffc2 	bl	800d894 <sbrk_aligned>
 800d910:	1c43      	adds	r3, r0, #1
 800d912:	4604      	mov	r4, r0
 800d914:	d14d      	bne.n	800d9b2 <_malloc_r+0xde>
 800d916:	6834      	ldr	r4, [r6, #0]
 800d918:	4626      	mov	r6, r4
 800d91a:	2e00      	cmp	r6, #0
 800d91c:	d140      	bne.n	800d9a0 <_malloc_r+0xcc>
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	4631      	mov	r1, r6
 800d922:	4638      	mov	r0, r7
 800d924:	eb04 0803 	add.w	r8, r4, r3
 800d928:	f000 fcb2 	bl	800e290 <_sbrk_r>
 800d92c:	4580      	cmp	r8, r0
 800d92e:	d13a      	bne.n	800d9a6 <_malloc_r+0xd2>
 800d930:	6821      	ldr	r1, [r4, #0]
 800d932:	3503      	adds	r5, #3
 800d934:	1a6d      	subs	r5, r5, r1
 800d936:	f025 0503 	bic.w	r5, r5, #3
 800d93a:	3508      	adds	r5, #8
 800d93c:	2d0c      	cmp	r5, #12
 800d93e:	bf38      	it	cc
 800d940:	250c      	movcc	r5, #12
 800d942:	4629      	mov	r1, r5
 800d944:	4638      	mov	r0, r7
 800d946:	f7ff ffa5 	bl	800d894 <sbrk_aligned>
 800d94a:	3001      	adds	r0, #1
 800d94c:	d02b      	beq.n	800d9a6 <_malloc_r+0xd2>
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	442b      	add	r3, r5
 800d952:	6023      	str	r3, [r4, #0]
 800d954:	e00e      	b.n	800d974 <_malloc_r+0xa0>
 800d956:	6822      	ldr	r2, [r4, #0]
 800d958:	1b52      	subs	r2, r2, r5
 800d95a:	d41e      	bmi.n	800d99a <_malloc_r+0xc6>
 800d95c:	2a0b      	cmp	r2, #11
 800d95e:	d916      	bls.n	800d98e <_malloc_r+0xba>
 800d960:	1961      	adds	r1, r4, r5
 800d962:	42a3      	cmp	r3, r4
 800d964:	6025      	str	r5, [r4, #0]
 800d966:	bf18      	it	ne
 800d968:	6059      	strne	r1, [r3, #4]
 800d96a:	6863      	ldr	r3, [r4, #4]
 800d96c:	bf08      	it	eq
 800d96e:	6031      	streq	r1, [r6, #0]
 800d970:	5162      	str	r2, [r4, r5]
 800d972:	604b      	str	r3, [r1, #4]
 800d974:	4638      	mov	r0, r7
 800d976:	f104 060b 	add.w	r6, r4, #11
 800d97a:	f001 fb3d 	bl	800eff8 <__malloc_unlock>
 800d97e:	f026 0607 	bic.w	r6, r6, #7
 800d982:	1d23      	adds	r3, r4, #4
 800d984:	1af2      	subs	r2, r6, r3
 800d986:	d0b6      	beq.n	800d8f6 <_malloc_r+0x22>
 800d988:	1b9b      	subs	r3, r3, r6
 800d98a:	50a3      	str	r3, [r4, r2]
 800d98c:	e7b3      	b.n	800d8f6 <_malloc_r+0x22>
 800d98e:	6862      	ldr	r2, [r4, #4]
 800d990:	42a3      	cmp	r3, r4
 800d992:	bf0c      	ite	eq
 800d994:	6032      	streq	r2, [r6, #0]
 800d996:	605a      	strne	r2, [r3, #4]
 800d998:	e7ec      	b.n	800d974 <_malloc_r+0xa0>
 800d99a:	4623      	mov	r3, r4
 800d99c:	6864      	ldr	r4, [r4, #4]
 800d99e:	e7b2      	b.n	800d906 <_malloc_r+0x32>
 800d9a0:	4634      	mov	r4, r6
 800d9a2:	6876      	ldr	r6, [r6, #4]
 800d9a4:	e7b9      	b.n	800d91a <_malloc_r+0x46>
 800d9a6:	230c      	movs	r3, #12
 800d9a8:	603b      	str	r3, [r7, #0]
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	f001 fb24 	bl	800eff8 <__malloc_unlock>
 800d9b0:	e7a1      	b.n	800d8f6 <_malloc_r+0x22>
 800d9b2:	6025      	str	r5, [r4, #0]
 800d9b4:	e7de      	b.n	800d974 <_malloc_r+0xa0>
 800d9b6:	bf00      	nop
 800d9b8:	20001508 	.word	0x20001508

0800d9bc <__cvt>:
 800d9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c0:	ec55 4b10 	vmov	r4, r5, d0
 800d9c4:	2d00      	cmp	r5, #0
 800d9c6:	460e      	mov	r6, r1
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	bfbb      	ittet	lt
 800d9ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d9d2:	461d      	movlt	r5, r3
 800d9d4:	2300      	movge	r3, #0
 800d9d6:	232d      	movlt	r3, #45	; 0x2d
 800d9d8:	700b      	strb	r3, [r1, #0]
 800d9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d9e0:	4691      	mov	r9, r2
 800d9e2:	f023 0820 	bic.w	r8, r3, #32
 800d9e6:	bfbc      	itt	lt
 800d9e8:	4622      	movlt	r2, r4
 800d9ea:	4614      	movlt	r4, r2
 800d9ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d9f0:	d005      	beq.n	800d9fe <__cvt+0x42>
 800d9f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d9f6:	d100      	bne.n	800d9fa <__cvt+0x3e>
 800d9f8:	3601      	adds	r6, #1
 800d9fa:	2102      	movs	r1, #2
 800d9fc:	e000      	b.n	800da00 <__cvt+0x44>
 800d9fe:	2103      	movs	r1, #3
 800da00:	ab03      	add	r3, sp, #12
 800da02:	9301      	str	r3, [sp, #4]
 800da04:	ab02      	add	r3, sp, #8
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	ec45 4b10 	vmov	d0, r4, r5
 800da0c:	4653      	mov	r3, sl
 800da0e:	4632      	mov	r2, r6
 800da10:	f000 fcfa 	bl	800e408 <_dtoa_r>
 800da14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da18:	4607      	mov	r7, r0
 800da1a:	d102      	bne.n	800da22 <__cvt+0x66>
 800da1c:	f019 0f01 	tst.w	r9, #1
 800da20:	d022      	beq.n	800da68 <__cvt+0xac>
 800da22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da26:	eb07 0906 	add.w	r9, r7, r6
 800da2a:	d110      	bne.n	800da4e <__cvt+0x92>
 800da2c:	783b      	ldrb	r3, [r7, #0]
 800da2e:	2b30      	cmp	r3, #48	; 0x30
 800da30:	d10a      	bne.n	800da48 <__cvt+0x8c>
 800da32:	2200      	movs	r2, #0
 800da34:	2300      	movs	r3, #0
 800da36:	4620      	mov	r0, r4
 800da38:	4629      	mov	r1, r5
 800da3a:	f7f3 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 800da3e:	b918      	cbnz	r0, 800da48 <__cvt+0x8c>
 800da40:	f1c6 0601 	rsb	r6, r6, #1
 800da44:	f8ca 6000 	str.w	r6, [sl]
 800da48:	f8da 3000 	ldr.w	r3, [sl]
 800da4c:	4499      	add	r9, r3
 800da4e:	2200      	movs	r2, #0
 800da50:	2300      	movs	r3, #0
 800da52:	4620      	mov	r0, r4
 800da54:	4629      	mov	r1, r5
 800da56:	f7f3 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 800da5a:	b108      	cbz	r0, 800da60 <__cvt+0xa4>
 800da5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800da60:	2230      	movs	r2, #48	; 0x30
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	454b      	cmp	r3, r9
 800da66:	d307      	bcc.n	800da78 <__cvt+0xbc>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da6c:	1bdb      	subs	r3, r3, r7
 800da6e:	4638      	mov	r0, r7
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	b004      	add	sp, #16
 800da74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da78:	1c59      	adds	r1, r3, #1
 800da7a:	9103      	str	r1, [sp, #12]
 800da7c:	701a      	strb	r2, [r3, #0]
 800da7e:	e7f0      	b.n	800da62 <__cvt+0xa6>

0800da80 <__exponent>:
 800da80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da82:	4603      	mov	r3, r0
 800da84:	2900      	cmp	r1, #0
 800da86:	bfb8      	it	lt
 800da88:	4249      	neglt	r1, r1
 800da8a:	f803 2b02 	strb.w	r2, [r3], #2
 800da8e:	bfb4      	ite	lt
 800da90:	222d      	movlt	r2, #45	; 0x2d
 800da92:	222b      	movge	r2, #43	; 0x2b
 800da94:	2909      	cmp	r1, #9
 800da96:	7042      	strb	r2, [r0, #1]
 800da98:	dd2a      	ble.n	800daf0 <__exponent+0x70>
 800da9a:	f10d 0407 	add.w	r4, sp, #7
 800da9e:	46a4      	mov	ip, r4
 800daa0:	270a      	movs	r7, #10
 800daa2:	46a6      	mov	lr, r4
 800daa4:	460a      	mov	r2, r1
 800daa6:	fb91 f6f7 	sdiv	r6, r1, r7
 800daaa:	fb07 1516 	mls	r5, r7, r6, r1
 800daae:	3530      	adds	r5, #48	; 0x30
 800dab0:	2a63      	cmp	r2, #99	; 0x63
 800dab2:	f104 34ff 	add.w	r4, r4, #4294967295
 800dab6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800daba:	4631      	mov	r1, r6
 800dabc:	dcf1      	bgt.n	800daa2 <__exponent+0x22>
 800dabe:	3130      	adds	r1, #48	; 0x30
 800dac0:	f1ae 0502 	sub.w	r5, lr, #2
 800dac4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dac8:	1c44      	adds	r4, r0, #1
 800daca:	4629      	mov	r1, r5
 800dacc:	4561      	cmp	r1, ip
 800dace:	d30a      	bcc.n	800dae6 <__exponent+0x66>
 800dad0:	f10d 0209 	add.w	r2, sp, #9
 800dad4:	eba2 020e 	sub.w	r2, r2, lr
 800dad8:	4565      	cmp	r5, ip
 800dada:	bf88      	it	hi
 800dadc:	2200      	movhi	r2, #0
 800dade:	4413      	add	r3, r2
 800dae0:	1a18      	subs	r0, r3, r0
 800dae2:	b003      	add	sp, #12
 800dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800daee:	e7ed      	b.n	800dacc <__exponent+0x4c>
 800daf0:	2330      	movs	r3, #48	; 0x30
 800daf2:	3130      	adds	r1, #48	; 0x30
 800daf4:	7083      	strb	r3, [r0, #2]
 800daf6:	70c1      	strb	r1, [r0, #3]
 800daf8:	1d03      	adds	r3, r0, #4
 800dafa:	e7f1      	b.n	800dae0 <__exponent+0x60>

0800dafc <_printf_float>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	ed2d 8b02 	vpush	{d8}
 800db04:	b08d      	sub	sp, #52	; 0x34
 800db06:	460c      	mov	r4, r1
 800db08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db0c:	4616      	mov	r6, r2
 800db0e:	461f      	mov	r7, r3
 800db10:	4605      	mov	r5, r0
 800db12:	f001 fa67 	bl	800efe4 <_localeconv_r>
 800db16:	f8d0 a000 	ldr.w	sl, [r0]
 800db1a:	4650      	mov	r0, sl
 800db1c:	f7f2 fb58 	bl	80001d0 <strlen>
 800db20:	2300      	movs	r3, #0
 800db22:	930a      	str	r3, [sp, #40]	; 0x28
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	9305      	str	r3, [sp, #20]
 800db28:	f8d8 3000 	ldr.w	r3, [r8]
 800db2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800db30:	3307      	adds	r3, #7
 800db32:	f023 0307 	bic.w	r3, r3, #7
 800db36:	f103 0208 	add.w	r2, r3, #8
 800db3a:	f8c8 2000 	str.w	r2, [r8]
 800db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800db46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800db4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db4e:	9307      	str	r3, [sp, #28]
 800db50:	f8cd 8018 	str.w	r8, [sp, #24]
 800db54:	ee08 0a10 	vmov	s16, r0
 800db58:	4b9f      	ldr	r3, [pc, #636]	; (800ddd8 <_printf_float+0x2dc>)
 800db5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db5e:	f04f 32ff 	mov.w	r2, #4294967295
 800db62:	f7f2 ffe3 	bl	8000b2c <__aeabi_dcmpun>
 800db66:	bb88      	cbnz	r0, 800dbcc <_printf_float+0xd0>
 800db68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db6c:	4b9a      	ldr	r3, [pc, #616]	; (800ddd8 <_printf_float+0x2dc>)
 800db6e:	f04f 32ff 	mov.w	r2, #4294967295
 800db72:	f7f2 ffbd 	bl	8000af0 <__aeabi_dcmple>
 800db76:	bb48      	cbnz	r0, 800dbcc <_printf_float+0xd0>
 800db78:	2200      	movs	r2, #0
 800db7a:	2300      	movs	r3, #0
 800db7c:	4640      	mov	r0, r8
 800db7e:	4649      	mov	r1, r9
 800db80:	f7f2 ffac 	bl	8000adc <__aeabi_dcmplt>
 800db84:	b110      	cbz	r0, 800db8c <_printf_float+0x90>
 800db86:	232d      	movs	r3, #45	; 0x2d
 800db88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db8c:	4b93      	ldr	r3, [pc, #588]	; (800dddc <_printf_float+0x2e0>)
 800db8e:	4894      	ldr	r0, [pc, #592]	; (800dde0 <_printf_float+0x2e4>)
 800db90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800db94:	bf94      	ite	ls
 800db96:	4698      	movls	r8, r3
 800db98:	4680      	movhi	r8, r0
 800db9a:	2303      	movs	r3, #3
 800db9c:	6123      	str	r3, [r4, #16]
 800db9e:	9b05      	ldr	r3, [sp, #20]
 800dba0:	f023 0204 	bic.w	r2, r3, #4
 800dba4:	6022      	str	r2, [r4, #0]
 800dba6:	f04f 0900 	mov.w	r9, #0
 800dbaa:	9700      	str	r7, [sp, #0]
 800dbac:	4633      	mov	r3, r6
 800dbae:	aa0b      	add	r2, sp, #44	; 0x2c
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f000 f9d8 	bl	800df68 <_printf_common>
 800dbb8:	3001      	adds	r0, #1
 800dbba:	f040 8090 	bne.w	800dcde <_printf_float+0x1e2>
 800dbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc2:	b00d      	add	sp, #52	; 0x34
 800dbc4:	ecbd 8b02 	vpop	{d8}
 800dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbcc:	4642      	mov	r2, r8
 800dbce:	464b      	mov	r3, r9
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	f7f2 ffaa 	bl	8000b2c <__aeabi_dcmpun>
 800dbd8:	b140      	cbz	r0, 800dbec <_printf_float+0xf0>
 800dbda:	464b      	mov	r3, r9
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	bfbc      	itt	lt
 800dbe0:	232d      	movlt	r3, #45	; 0x2d
 800dbe2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dbe6:	487f      	ldr	r0, [pc, #508]	; (800dde4 <_printf_float+0x2e8>)
 800dbe8:	4b7f      	ldr	r3, [pc, #508]	; (800dde8 <_printf_float+0x2ec>)
 800dbea:	e7d1      	b.n	800db90 <_printf_float+0x94>
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dbf2:	9206      	str	r2, [sp, #24]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	d13f      	bne.n	800dc78 <_printf_float+0x17c>
 800dbf8:	2306      	movs	r3, #6
 800dbfa:	6063      	str	r3, [r4, #4]
 800dbfc:	9b05      	ldr	r3, [sp, #20]
 800dbfe:	6861      	ldr	r1, [r4, #4]
 800dc00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc04:	2300      	movs	r3, #0
 800dc06:	9303      	str	r3, [sp, #12]
 800dc08:	ab0a      	add	r3, sp, #40	; 0x28
 800dc0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc0e:	ab09      	add	r3, sp, #36	; 0x24
 800dc10:	ec49 8b10 	vmov	d0, r8, r9
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	6022      	str	r2, [r4, #0]
 800dc18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f7ff fecd 	bl	800d9bc <__cvt>
 800dc22:	9b06      	ldr	r3, [sp, #24]
 800dc24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc26:	2b47      	cmp	r3, #71	; 0x47
 800dc28:	4680      	mov	r8, r0
 800dc2a:	d108      	bne.n	800dc3e <_printf_float+0x142>
 800dc2c:	1cc8      	adds	r0, r1, #3
 800dc2e:	db02      	blt.n	800dc36 <_printf_float+0x13a>
 800dc30:	6863      	ldr	r3, [r4, #4]
 800dc32:	4299      	cmp	r1, r3
 800dc34:	dd41      	ble.n	800dcba <_printf_float+0x1be>
 800dc36:	f1ab 0b02 	sub.w	fp, fp, #2
 800dc3a:	fa5f fb8b 	uxtb.w	fp, fp
 800dc3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc42:	d820      	bhi.n	800dc86 <_printf_float+0x18a>
 800dc44:	3901      	subs	r1, #1
 800dc46:	465a      	mov	r2, fp
 800dc48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc4c:	9109      	str	r1, [sp, #36]	; 0x24
 800dc4e:	f7ff ff17 	bl	800da80 <__exponent>
 800dc52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc54:	1813      	adds	r3, r2, r0
 800dc56:	2a01      	cmp	r2, #1
 800dc58:	4681      	mov	r9, r0
 800dc5a:	6123      	str	r3, [r4, #16]
 800dc5c:	dc02      	bgt.n	800dc64 <_printf_float+0x168>
 800dc5e:	6822      	ldr	r2, [r4, #0]
 800dc60:	07d2      	lsls	r2, r2, #31
 800dc62:	d501      	bpl.n	800dc68 <_printf_float+0x16c>
 800dc64:	3301      	adds	r3, #1
 800dc66:	6123      	str	r3, [r4, #16]
 800dc68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d09c      	beq.n	800dbaa <_printf_float+0xae>
 800dc70:	232d      	movs	r3, #45	; 0x2d
 800dc72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc76:	e798      	b.n	800dbaa <_printf_float+0xae>
 800dc78:	9a06      	ldr	r2, [sp, #24]
 800dc7a:	2a47      	cmp	r2, #71	; 0x47
 800dc7c:	d1be      	bne.n	800dbfc <_printf_float+0x100>
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1bc      	bne.n	800dbfc <_printf_float+0x100>
 800dc82:	2301      	movs	r3, #1
 800dc84:	e7b9      	b.n	800dbfa <_printf_float+0xfe>
 800dc86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dc8a:	d118      	bne.n	800dcbe <_printf_float+0x1c2>
 800dc8c:	2900      	cmp	r1, #0
 800dc8e:	6863      	ldr	r3, [r4, #4]
 800dc90:	dd0b      	ble.n	800dcaa <_printf_float+0x1ae>
 800dc92:	6121      	str	r1, [r4, #16]
 800dc94:	b913      	cbnz	r3, 800dc9c <_printf_float+0x1a0>
 800dc96:	6822      	ldr	r2, [r4, #0]
 800dc98:	07d0      	lsls	r0, r2, #31
 800dc9a:	d502      	bpl.n	800dca2 <_printf_float+0x1a6>
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	440b      	add	r3, r1
 800dca0:	6123      	str	r3, [r4, #16]
 800dca2:	65a1      	str	r1, [r4, #88]	; 0x58
 800dca4:	f04f 0900 	mov.w	r9, #0
 800dca8:	e7de      	b.n	800dc68 <_printf_float+0x16c>
 800dcaa:	b913      	cbnz	r3, 800dcb2 <_printf_float+0x1b6>
 800dcac:	6822      	ldr	r2, [r4, #0]
 800dcae:	07d2      	lsls	r2, r2, #31
 800dcb0:	d501      	bpl.n	800dcb6 <_printf_float+0x1ba>
 800dcb2:	3302      	adds	r3, #2
 800dcb4:	e7f4      	b.n	800dca0 <_printf_float+0x1a4>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e7f2      	b.n	800dca0 <_printf_float+0x1a4>
 800dcba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dcbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc0:	4299      	cmp	r1, r3
 800dcc2:	db05      	blt.n	800dcd0 <_printf_float+0x1d4>
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	6121      	str	r1, [r4, #16]
 800dcc8:	07d8      	lsls	r0, r3, #31
 800dcca:	d5ea      	bpl.n	800dca2 <_printf_float+0x1a6>
 800dccc:	1c4b      	adds	r3, r1, #1
 800dcce:	e7e7      	b.n	800dca0 <_printf_float+0x1a4>
 800dcd0:	2900      	cmp	r1, #0
 800dcd2:	bfd4      	ite	le
 800dcd4:	f1c1 0202 	rsble	r2, r1, #2
 800dcd8:	2201      	movgt	r2, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	e7e0      	b.n	800dca0 <_printf_float+0x1a4>
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	055a      	lsls	r2, r3, #21
 800dce2:	d407      	bmi.n	800dcf4 <_printf_float+0x1f8>
 800dce4:	6923      	ldr	r3, [r4, #16]
 800dce6:	4642      	mov	r2, r8
 800dce8:	4631      	mov	r1, r6
 800dcea:	4628      	mov	r0, r5
 800dcec:	47b8      	blx	r7
 800dcee:	3001      	adds	r0, #1
 800dcf0:	d12c      	bne.n	800dd4c <_printf_float+0x250>
 800dcf2:	e764      	b.n	800dbbe <_printf_float+0xc2>
 800dcf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dcf8:	f240 80e0 	bls.w	800debc <_printf_float+0x3c0>
 800dcfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd00:	2200      	movs	r2, #0
 800dd02:	2300      	movs	r3, #0
 800dd04:	f7f2 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d034      	beq.n	800dd76 <_printf_float+0x27a>
 800dd0c:	4a37      	ldr	r2, [pc, #220]	; (800ddec <_printf_float+0x2f0>)
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4631      	mov	r1, r6
 800dd12:	4628      	mov	r0, r5
 800dd14:	47b8      	blx	r7
 800dd16:	3001      	adds	r0, #1
 800dd18:	f43f af51 	beq.w	800dbbe <_printf_float+0xc2>
 800dd1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd20:	429a      	cmp	r2, r3
 800dd22:	db02      	blt.n	800dd2a <_printf_float+0x22e>
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	07d8      	lsls	r0, r3, #31
 800dd28:	d510      	bpl.n	800dd4c <_printf_float+0x250>
 800dd2a:	ee18 3a10 	vmov	r3, s16
 800dd2e:	4652      	mov	r2, sl
 800dd30:	4631      	mov	r1, r6
 800dd32:	4628      	mov	r0, r5
 800dd34:	47b8      	blx	r7
 800dd36:	3001      	adds	r0, #1
 800dd38:	f43f af41 	beq.w	800dbbe <_printf_float+0xc2>
 800dd3c:	f04f 0800 	mov.w	r8, #0
 800dd40:	f104 091a 	add.w	r9, r4, #26
 800dd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd46:	3b01      	subs	r3, #1
 800dd48:	4543      	cmp	r3, r8
 800dd4a:	dc09      	bgt.n	800dd60 <_printf_float+0x264>
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	079b      	lsls	r3, r3, #30
 800dd50:	f100 8105 	bmi.w	800df5e <_printf_float+0x462>
 800dd54:	68e0      	ldr	r0, [r4, #12]
 800dd56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd58:	4298      	cmp	r0, r3
 800dd5a:	bfb8      	it	lt
 800dd5c:	4618      	movlt	r0, r3
 800dd5e:	e730      	b.n	800dbc2 <_printf_float+0xc6>
 800dd60:	2301      	movs	r3, #1
 800dd62:	464a      	mov	r2, r9
 800dd64:	4631      	mov	r1, r6
 800dd66:	4628      	mov	r0, r5
 800dd68:	47b8      	blx	r7
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	f43f af27 	beq.w	800dbbe <_printf_float+0xc2>
 800dd70:	f108 0801 	add.w	r8, r8, #1
 800dd74:	e7e6      	b.n	800dd44 <_printf_float+0x248>
 800dd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	dc39      	bgt.n	800ddf0 <_printf_float+0x2f4>
 800dd7c:	4a1b      	ldr	r2, [pc, #108]	; (800ddec <_printf_float+0x2f0>)
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4631      	mov	r1, r6
 800dd82:	4628      	mov	r0, r5
 800dd84:	47b8      	blx	r7
 800dd86:	3001      	adds	r0, #1
 800dd88:	f43f af19 	beq.w	800dbbe <_printf_float+0xc2>
 800dd8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd90:	4313      	orrs	r3, r2
 800dd92:	d102      	bne.n	800dd9a <_printf_float+0x29e>
 800dd94:	6823      	ldr	r3, [r4, #0]
 800dd96:	07d9      	lsls	r1, r3, #31
 800dd98:	d5d8      	bpl.n	800dd4c <_printf_float+0x250>
 800dd9a:	ee18 3a10 	vmov	r3, s16
 800dd9e:	4652      	mov	r2, sl
 800dda0:	4631      	mov	r1, r6
 800dda2:	4628      	mov	r0, r5
 800dda4:	47b8      	blx	r7
 800dda6:	3001      	adds	r0, #1
 800dda8:	f43f af09 	beq.w	800dbbe <_printf_float+0xc2>
 800ddac:	f04f 0900 	mov.w	r9, #0
 800ddb0:	f104 0a1a 	add.w	sl, r4, #26
 800ddb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb6:	425b      	negs	r3, r3
 800ddb8:	454b      	cmp	r3, r9
 800ddba:	dc01      	bgt.n	800ddc0 <_printf_float+0x2c4>
 800ddbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddbe:	e792      	b.n	800dce6 <_printf_float+0x1ea>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	4652      	mov	r2, sl
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f43f aef7 	beq.w	800dbbe <_printf_float+0xc2>
 800ddd0:	f109 0901 	add.w	r9, r9, #1
 800ddd4:	e7ee      	b.n	800ddb4 <_printf_float+0x2b8>
 800ddd6:	bf00      	nop
 800ddd8:	7fefffff 	.word	0x7fefffff
 800dddc:	0801099c 	.word	0x0801099c
 800dde0:	080109a0 	.word	0x080109a0
 800dde4:	080109a8 	.word	0x080109a8
 800dde8:	080109a4 	.word	0x080109a4
 800ddec:	080109ac 	.word	0x080109ac
 800ddf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	bfa8      	it	ge
 800ddf8:	461a      	movge	r2, r3
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	4691      	mov	r9, r2
 800ddfe:	dc37      	bgt.n	800de70 <_printf_float+0x374>
 800de00:	f04f 0b00 	mov.w	fp, #0
 800de04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de08:	f104 021a 	add.w	r2, r4, #26
 800de0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de0e:	9305      	str	r3, [sp, #20]
 800de10:	eba3 0309 	sub.w	r3, r3, r9
 800de14:	455b      	cmp	r3, fp
 800de16:	dc33      	bgt.n	800de80 <_printf_float+0x384>
 800de18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de1c:	429a      	cmp	r2, r3
 800de1e:	db3b      	blt.n	800de98 <_printf_float+0x39c>
 800de20:	6823      	ldr	r3, [r4, #0]
 800de22:	07da      	lsls	r2, r3, #31
 800de24:	d438      	bmi.n	800de98 <_printf_float+0x39c>
 800de26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de28:	9a05      	ldr	r2, [sp, #20]
 800de2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de2c:	1a9a      	subs	r2, r3, r2
 800de2e:	eba3 0901 	sub.w	r9, r3, r1
 800de32:	4591      	cmp	r9, r2
 800de34:	bfa8      	it	ge
 800de36:	4691      	movge	r9, r2
 800de38:	f1b9 0f00 	cmp.w	r9, #0
 800de3c:	dc35      	bgt.n	800deaa <_printf_float+0x3ae>
 800de3e:	f04f 0800 	mov.w	r8, #0
 800de42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de46:	f104 0a1a 	add.w	sl, r4, #26
 800de4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de4e:	1a9b      	subs	r3, r3, r2
 800de50:	eba3 0309 	sub.w	r3, r3, r9
 800de54:	4543      	cmp	r3, r8
 800de56:	f77f af79 	ble.w	800dd4c <_printf_float+0x250>
 800de5a:	2301      	movs	r3, #1
 800de5c:	4652      	mov	r2, sl
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	f43f aeaa 	beq.w	800dbbe <_printf_float+0xc2>
 800de6a:	f108 0801 	add.w	r8, r8, #1
 800de6e:	e7ec      	b.n	800de4a <_printf_float+0x34e>
 800de70:	4613      	mov	r3, r2
 800de72:	4631      	mov	r1, r6
 800de74:	4642      	mov	r2, r8
 800de76:	4628      	mov	r0, r5
 800de78:	47b8      	blx	r7
 800de7a:	3001      	adds	r0, #1
 800de7c:	d1c0      	bne.n	800de00 <_printf_float+0x304>
 800de7e:	e69e      	b.n	800dbbe <_printf_float+0xc2>
 800de80:	2301      	movs	r3, #1
 800de82:	4631      	mov	r1, r6
 800de84:	4628      	mov	r0, r5
 800de86:	9205      	str	r2, [sp, #20]
 800de88:	47b8      	blx	r7
 800de8a:	3001      	adds	r0, #1
 800de8c:	f43f ae97 	beq.w	800dbbe <_printf_float+0xc2>
 800de90:	9a05      	ldr	r2, [sp, #20]
 800de92:	f10b 0b01 	add.w	fp, fp, #1
 800de96:	e7b9      	b.n	800de0c <_printf_float+0x310>
 800de98:	ee18 3a10 	vmov	r3, s16
 800de9c:	4652      	mov	r2, sl
 800de9e:	4631      	mov	r1, r6
 800dea0:	4628      	mov	r0, r5
 800dea2:	47b8      	blx	r7
 800dea4:	3001      	adds	r0, #1
 800dea6:	d1be      	bne.n	800de26 <_printf_float+0x32a>
 800dea8:	e689      	b.n	800dbbe <_printf_float+0xc2>
 800deaa:	9a05      	ldr	r2, [sp, #20]
 800deac:	464b      	mov	r3, r9
 800deae:	4442      	add	r2, r8
 800deb0:	4631      	mov	r1, r6
 800deb2:	4628      	mov	r0, r5
 800deb4:	47b8      	blx	r7
 800deb6:	3001      	adds	r0, #1
 800deb8:	d1c1      	bne.n	800de3e <_printf_float+0x342>
 800deba:	e680      	b.n	800dbbe <_printf_float+0xc2>
 800debc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800debe:	2a01      	cmp	r2, #1
 800dec0:	dc01      	bgt.n	800dec6 <_printf_float+0x3ca>
 800dec2:	07db      	lsls	r3, r3, #31
 800dec4:	d538      	bpl.n	800df38 <_printf_float+0x43c>
 800dec6:	2301      	movs	r3, #1
 800dec8:	4642      	mov	r2, r8
 800deca:	4631      	mov	r1, r6
 800decc:	4628      	mov	r0, r5
 800dece:	47b8      	blx	r7
 800ded0:	3001      	adds	r0, #1
 800ded2:	f43f ae74 	beq.w	800dbbe <_printf_float+0xc2>
 800ded6:	ee18 3a10 	vmov	r3, s16
 800deda:	4652      	mov	r2, sl
 800dedc:	4631      	mov	r1, r6
 800dede:	4628      	mov	r0, r5
 800dee0:	47b8      	blx	r7
 800dee2:	3001      	adds	r0, #1
 800dee4:	f43f ae6b 	beq.w	800dbbe <_printf_float+0xc2>
 800dee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800deec:	2200      	movs	r2, #0
 800deee:	2300      	movs	r3, #0
 800def0:	f7f2 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800def4:	b9d8      	cbnz	r0, 800df2e <_printf_float+0x432>
 800def6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def8:	f108 0201 	add.w	r2, r8, #1
 800defc:	3b01      	subs	r3, #1
 800defe:	4631      	mov	r1, r6
 800df00:	4628      	mov	r0, r5
 800df02:	47b8      	blx	r7
 800df04:	3001      	adds	r0, #1
 800df06:	d10e      	bne.n	800df26 <_printf_float+0x42a>
 800df08:	e659      	b.n	800dbbe <_printf_float+0xc2>
 800df0a:	2301      	movs	r3, #1
 800df0c:	4652      	mov	r2, sl
 800df0e:	4631      	mov	r1, r6
 800df10:	4628      	mov	r0, r5
 800df12:	47b8      	blx	r7
 800df14:	3001      	adds	r0, #1
 800df16:	f43f ae52 	beq.w	800dbbe <_printf_float+0xc2>
 800df1a:	f108 0801 	add.w	r8, r8, #1
 800df1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df20:	3b01      	subs	r3, #1
 800df22:	4543      	cmp	r3, r8
 800df24:	dcf1      	bgt.n	800df0a <_printf_float+0x40e>
 800df26:	464b      	mov	r3, r9
 800df28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df2c:	e6dc      	b.n	800dce8 <_printf_float+0x1ec>
 800df2e:	f04f 0800 	mov.w	r8, #0
 800df32:	f104 0a1a 	add.w	sl, r4, #26
 800df36:	e7f2      	b.n	800df1e <_printf_float+0x422>
 800df38:	2301      	movs	r3, #1
 800df3a:	4642      	mov	r2, r8
 800df3c:	e7df      	b.n	800defe <_printf_float+0x402>
 800df3e:	2301      	movs	r3, #1
 800df40:	464a      	mov	r2, r9
 800df42:	4631      	mov	r1, r6
 800df44:	4628      	mov	r0, r5
 800df46:	47b8      	blx	r7
 800df48:	3001      	adds	r0, #1
 800df4a:	f43f ae38 	beq.w	800dbbe <_printf_float+0xc2>
 800df4e:	f108 0801 	add.w	r8, r8, #1
 800df52:	68e3      	ldr	r3, [r4, #12]
 800df54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df56:	1a5b      	subs	r3, r3, r1
 800df58:	4543      	cmp	r3, r8
 800df5a:	dcf0      	bgt.n	800df3e <_printf_float+0x442>
 800df5c:	e6fa      	b.n	800dd54 <_printf_float+0x258>
 800df5e:	f04f 0800 	mov.w	r8, #0
 800df62:	f104 0919 	add.w	r9, r4, #25
 800df66:	e7f4      	b.n	800df52 <_printf_float+0x456>

0800df68 <_printf_common>:
 800df68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df6c:	4616      	mov	r6, r2
 800df6e:	4699      	mov	r9, r3
 800df70:	688a      	ldr	r2, [r1, #8]
 800df72:	690b      	ldr	r3, [r1, #16]
 800df74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df78:	4293      	cmp	r3, r2
 800df7a:	bfb8      	it	lt
 800df7c:	4613      	movlt	r3, r2
 800df7e:	6033      	str	r3, [r6, #0]
 800df80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df84:	4607      	mov	r7, r0
 800df86:	460c      	mov	r4, r1
 800df88:	b10a      	cbz	r2, 800df8e <_printf_common+0x26>
 800df8a:	3301      	adds	r3, #1
 800df8c:	6033      	str	r3, [r6, #0]
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	0699      	lsls	r1, r3, #26
 800df92:	bf42      	ittt	mi
 800df94:	6833      	ldrmi	r3, [r6, #0]
 800df96:	3302      	addmi	r3, #2
 800df98:	6033      	strmi	r3, [r6, #0]
 800df9a:	6825      	ldr	r5, [r4, #0]
 800df9c:	f015 0506 	ands.w	r5, r5, #6
 800dfa0:	d106      	bne.n	800dfb0 <_printf_common+0x48>
 800dfa2:	f104 0a19 	add.w	sl, r4, #25
 800dfa6:	68e3      	ldr	r3, [r4, #12]
 800dfa8:	6832      	ldr	r2, [r6, #0]
 800dfaa:	1a9b      	subs	r3, r3, r2
 800dfac:	42ab      	cmp	r3, r5
 800dfae:	dc26      	bgt.n	800dffe <_printf_common+0x96>
 800dfb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfb4:	1e13      	subs	r3, r2, #0
 800dfb6:	6822      	ldr	r2, [r4, #0]
 800dfb8:	bf18      	it	ne
 800dfba:	2301      	movne	r3, #1
 800dfbc:	0692      	lsls	r2, r2, #26
 800dfbe:	d42b      	bmi.n	800e018 <_printf_common+0xb0>
 800dfc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	47c0      	blx	r8
 800dfca:	3001      	adds	r0, #1
 800dfcc:	d01e      	beq.n	800e00c <_printf_common+0xa4>
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	68e5      	ldr	r5, [r4, #12]
 800dfd2:	6832      	ldr	r2, [r6, #0]
 800dfd4:	f003 0306 	and.w	r3, r3, #6
 800dfd8:	2b04      	cmp	r3, #4
 800dfda:	bf08      	it	eq
 800dfdc:	1aad      	subeq	r5, r5, r2
 800dfde:	68a3      	ldr	r3, [r4, #8]
 800dfe0:	6922      	ldr	r2, [r4, #16]
 800dfe2:	bf0c      	ite	eq
 800dfe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfe8:	2500      	movne	r5, #0
 800dfea:	4293      	cmp	r3, r2
 800dfec:	bfc4      	itt	gt
 800dfee:	1a9b      	subgt	r3, r3, r2
 800dff0:	18ed      	addgt	r5, r5, r3
 800dff2:	2600      	movs	r6, #0
 800dff4:	341a      	adds	r4, #26
 800dff6:	42b5      	cmp	r5, r6
 800dff8:	d11a      	bne.n	800e030 <_printf_common+0xc8>
 800dffa:	2000      	movs	r0, #0
 800dffc:	e008      	b.n	800e010 <_printf_common+0xa8>
 800dffe:	2301      	movs	r3, #1
 800e000:	4652      	mov	r2, sl
 800e002:	4649      	mov	r1, r9
 800e004:	4638      	mov	r0, r7
 800e006:	47c0      	blx	r8
 800e008:	3001      	adds	r0, #1
 800e00a:	d103      	bne.n	800e014 <_printf_common+0xac>
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e014:	3501      	adds	r5, #1
 800e016:	e7c6      	b.n	800dfa6 <_printf_common+0x3e>
 800e018:	18e1      	adds	r1, r4, r3
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	2030      	movs	r0, #48	; 0x30
 800e01e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e022:	4422      	add	r2, r4
 800e024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e02c:	3302      	adds	r3, #2
 800e02e:	e7c7      	b.n	800dfc0 <_printf_common+0x58>
 800e030:	2301      	movs	r3, #1
 800e032:	4622      	mov	r2, r4
 800e034:	4649      	mov	r1, r9
 800e036:	4638      	mov	r0, r7
 800e038:	47c0      	blx	r8
 800e03a:	3001      	adds	r0, #1
 800e03c:	d0e6      	beq.n	800e00c <_printf_common+0xa4>
 800e03e:	3601      	adds	r6, #1
 800e040:	e7d9      	b.n	800dff6 <_printf_common+0x8e>
	...

0800e044 <_printf_i>:
 800e044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e048:	7e0f      	ldrb	r7, [r1, #24]
 800e04a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e04c:	2f78      	cmp	r7, #120	; 0x78
 800e04e:	4691      	mov	r9, r2
 800e050:	4680      	mov	r8, r0
 800e052:	460c      	mov	r4, r1
 800e054:	469a      	mov	sl, r3
 800e056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e05a:	d807      	bhi.n	800e06c <_printf_i+0x28>
 800e05c:	2f62      	cmp	r7, #98	; 0x62
 800e05e:	d80a      	bhi.n	800e076 <_printf_i+0x32>
 800e060:	2f00      	cmp	r7, #0
 800e062:	f000 80d8 	beq.w	800e216 <_printf_i+0x1d2>
 800e066:	2f58      	cmp	r7, #88	; 0x58
 800e068:	f000 80a3 	beq.w	800e1b2 <_printf_i+0x16e>
 800e06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e074:	e03a      	b.n	800e0ec <_printf_i+0xa8>
 800e076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e07a:	2b15      	cmp	r3, #21
 800e07c:	d8f6      	bhi.n	800e06c <_printf_i+0x28>
 800e07e:	a101      	add	r1, pc, #4	; (adr r1, 800e084 <_printf_i+0x40>)
 800e080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e084:	0800e0dd 	.word	0x0800e0dd
 800e088:	0800e0f1 	.word	0x0800e0f1
 800e08c:	0800e06d 	.word	0x0800e06d
 800e090:	0800e06d 	.word	0x0800e06d
 800e094:	0800e06d 	.word	0x0800e06d
 800e098:	0800e06d 	.word	0x0800e06d
 800e09c:	0800e0f1 	.word	0x0800e0f1
 800e0a0:	0800e06d 	.word	0x0800e06d
 800e0a4:	0800e06d 	.word	0x0800e06d
 800e0a8:	0800e06d 	.word	0x0800e06d
 800e0ac:	0800e06d 	.word	0x0800e06d
 800e0b0:	0800e1fd 	.word	0x0800e1fd
 800e0b4:	0800e121 	.word	0x0800e121
 800e0b8:	0800e1df 	.word	0x0800e1df
 800e0bc:	0800e06d 	.word	0x0800e06d
 800e0c0:	0800e06d 	.word	0x0800e06d
 800e0c4:	0800e21f 	.word	0x0800e21f
 800e0c8:	0800e06d 	.word	0x0800e06d
 800e0cc:	0800e121 	.word	0x0800e121
 800e0d0:	0800e06d 	.word	0x0800e06d
 800e0d4:	0800e06d 	.word	0x0800e06d
 800e0d8:	0800e1e7 	.word	0x0800e1e7
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	1d1a      	adds	r2, r3, #4
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	602a      	str	r2, [r5, #0]
 800e0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e0a3      	b.n	800e238 <_printf_i+0x1f4>
 800e0f0:	6820      	ldr	r0, [r4, #0]
 800e0f2:	6829      	ldr	r1, [r5, #0]
 800e0f4:	0606      	lsls	r6, r0, #24
 800e0f6:	f101 0304 	add.w	r3, r1, #4
 800e0fa:	d50a      	bpl.n	800e112 <_printf_i+0xce>
 800e0fc:	680e      	ldr	r6, [r1, #0]
 800e0fe:	602b      	str	r3, [r5, #0]
 800e100:	2e00      	cmp	r6, #0
 800e102:	da03      	bge.n	800e10c <_printf_i+0xc8>
 800e104:	232d      	movs	r3, #45	; 0x2d
 800e106:	4276      	negs	r6, r6
 800e108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e10c:	485e      	ldr	r0, [pc, #376]	; (800e288 <_printf_i+0x244>)
 800e10e:	230a      	movs	r3, #10
 800e110:	e019      	b.n	800e146 <_printf_i+0x102>
 800e112:	680e      	ldr	r6, [r1, #0]
 800e114:	602b      	str	r3, [r5, #0]
 800e116:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e11a:	bf18      	it	ne
 800e11c:	b236      	sxthne	r6, r6
 800e11e:	e7ef      	b.n	800e100 <_printf_i+0xbc>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	6820      	ldr	r0, [r4, #0]
 800e124:	1d19      	adds	r1, r3, #4
 800e126:	6029      	str	r1, [r5, #0]
 800e128:	0601      	lsls	r1, r0, #24
 800e12a:	d501      	bpl.n	800e130 <_printf_i+0xec>
 800e12c:	681e      	ldr	r6, [r3, #0]
 800e12e:	e002      	b.n	800e136 <_printf_i+0xf2>
 800e130:	0646      	lsls	r6, r0, #25
 800e132:	d5fb      	bpl.n	800e12c <_printf_i+0xe8>
 800e134:	881e      	ldrh	r6, [r3, #0]
 800e136:	4854      	ldr	r0, [pc, #336]	; (800e288 <_printf_i+0x244>)
 800e138:	2f6f      	cmp	r7, #111	; 0x6f
 800e13a:	bf0c      	ite	eq
 800e13c:	2308      	moveq	r3, #8
 800e13e:	230a      	movne	r3, #10
 800e140:	2100      	movs	r1, #0
 800e142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e146:	6865      	ldr	r5, [r4, #4]
 800e148:	60a5      	str	r5, [r4, #8]
 800e14a:	2d00      	cmp	r5, #0
 800e14c:	bfa2      	ittt	ge
 800e14e:	6821      	ldrge	r1, [r4, #0]
 800e150:	f021 0104 	bicge.w	r1, r1, #4
 800e154:	6021      	strge	r1, [r4, #0]
 800e156:	b90e      	cbnz	r6, 800e15c <_printf_i+0x118>
 800e158:	2d00      	cmp	r5, #0
 800e15a:	d04d      	beq.n	800e1f8 <_printf_i+0x1b4>
 800e15c:	4615      	mov	r5, r2
 800e15e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e162:	fb03 6711 	mls	r7, r3, r1, r6
 800e166:	5dc7      	ldrb	r7, [r0, r7]
 800e168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e16c:	4637      	mov	r7, r6
 800e16e:	42bb      	cmp	r3, r7
 800e170:	460e      	mov	r6, r1
 800e172:	d9f4      	bls.n	800e15e <_printf_i+0x11a>
 800e174:	2b08      	cmp	r3, #8
 800e176:	d10b      	bne.n	800e190 <_printf_i+0x14c>
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	07de      	lsls	r6, r3, #31
 800e17c:	d508      	bpl.n	800e190 <_printf_i+0x14c>
 800e17e:	6923      	ldr	r3, [r4, #16]
 800e180:	6861      	ldr	r1, [r4, #4]
 800e182:	4299      	cmp	r1, r3
 800e184:	bfde      	ittt	le
 800e186:	2330      	movle	r3, #48	; 0x30
 800e188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e18c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e190:	1b52      	subs	r2, r2, r5
 800e192:	6122      	str	r2, [r4, #16]
 800e194:	f8cd a000 	str.w	sl, [sp]
 800e198:	464b      	mov	r3, r9
 800e19a:	aa03      	add	r2, sp, #12
 800e19c:	4621      	mov	r1, r4
 800e19e:	4640      	mov	r0, r8
 800e1a0:	f7ff fee2 	bl	800df68 <_printf_common>
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	d14c      	bne.n	800e242 <_printf_i+0x1fe>
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	b004      	add	sp, #16
 800e1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b2:	4835      	ldr	r0, [pc, #212]	; (800e288 <_printf_i+0x244>)
 800e1b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e1b8:	6829      	ldr	r1, [r5, #0]
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1c0:	6029      	str	r1, [r5, #0]
 800e1c2:	061d      	lsls	r5, r3, #24
 800e1c4:	d514      	bpl.n	800e1f0 <_printf_i+0x1ac>
 800e1c6:	07df      	lsls	r7, r3, #31
 800e1c8:	bf44      	itt	mi
 800e1ca:	f043 0320 	orrmi.w	r3, r3, #32
 800e1ce:	6023      	strmi	r3, [r4, #0]
 800e1d0:	b91e      	cbnz	r6, 800e1da <_printf_i+0x196>
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	f023 0320 	bic.w	r3, r3, #32
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	2310      	movs	r3, #16
 800e1dc:	e7b0      	b.n	800e140 <_printf_i+0xfc>
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	f043 0320 	orr.w	r3, r3, #32
 800e1e4:	6023      	str	r3, [r4, #0]
 800e1e6:	2378      	movs	r3, #120	; 0x78
 800e1e8:	4828      	ldr	r0, [pc, #160]	; (800e28c <_printf_i+0x248>)
 800e1ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e1ee:	e7e3      	b.n	800e1b8 <_printf_i+0x174>
 800e1f0:	0659      	lsls	r1, r3, #25
 800e1f2:	bf48      	it	mi
 800e1f4:	b2b6      	uxthmi	r6, r6
 800e1f6:	e7e6      	b.n	800e1c6 <_printf_i+0x182>
 800e1f8:	4615      	mov	r5, r2
 800e1fa:	e7bb      	b.n	800e174 <_printf_i+0x130>
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	6826      	ldr	r6, [r4, #0]
 800e200:	6961      	ldr	r1, [r4, #20]
 800e202:	1d18      	adds	r0, r3, #4
 800e204:	6028      	str	r0, [r5, #0]
 800e206:	0635      	lsls	r5, r6, #24
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	d501      	bpl.n	800e210 <_printf_i+0x1cc>
 800e20c:	6019      	str	r1, [r3, #0]
 800e20e:	e002      	b.n	800e216 <_printf_i+0x1d2>
 800e210:	0670      	lsls	r0, r6, #25
 800e212:	d5fb      	bpl.n	800e20c <_printf_i+0x1c8>
 800e214:	8019      	strh	r1, [r3, #0]
 800e216:	2300      	movs	r3, #0
 800e218:	6123      	str	r3, [r4, #16]
 800e21a:	4615      	mov	r5, r2
 800e21c:	e7ba      	b.n	800e194 <_printf_i+0x150>
 800e21e:	682b      	ldr	r3, [r5, #0]
 800e220:	1d1a      	adds	r2, r3, #4
 800e222:	602a      	str	r2, [r5, #0]
 800e224:	681d      	ldr	r5, [r3, #0]
 800e226:	6862      	ldr	r2, [r4, #4]
 800e228:	2100      	movs	r1, #0
 800e22a:	4628      	mov	r0, r5
 800e22c:	f7f1 ffd8 	bl	80001e0 <memchr>
 800e230:	b108      	cbz	r0, 800e236 <_printf_i+0x1f2>
 800e232:	1b40      	subs	r0, r0, r5
 800e234:	6060      	str	r0, [r4, #4]
 800e236:	6863      	ldr	r3, [r4, #4]
 800e238:	6123      	str	r3, [r4, #16]
 800e23a:	2300      	movs	r3, #0
 800e23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e240:	e7a8      	b.n	800e194 <_printf_i+0x150>
 800e242:	6923      	ldr	r3, [r4, #16]
 800e244:	462a      	mov	r2, r5
 800e246:	4649      	mov	r1, r9
 800e248:	4640      	mov	r0, r8
 800e24a:	47d0      	blx	sl
 800e24c:	3001      	adds	r0, #1
 800e24e:	d0ab      	beq.n	800e1a8 <_printf_i+0x164>
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	079b      	lsls	r3, r3, #30
 800e254:	d413      	bmi.n	800e27e <_printf_i+0x23a>
 800e256:	68e0      	ldr	r0, [r4, #12]
 800e258:	9b03      	ldr	r3, [sp, #12]
 800e25a:	4298      	cmp	r0, r3
 800e25c:	bfb8      	it	lt
 800e25e:	4618      	movlt	r0, r3
 800e260:	e7a4      	b.n	800e1ac <_printf_i+0x168>
 800e262:	2301      	movs	r3, #1
 800e264:	4632      	mov	r2, r6
 800e266:	4649      	mov	r1, r9
 800e268:	4640      	mov	r0, r8
 800e26a:	47d0      	blx	sl
 800e26c:	3001      	adds	r0, #1
 800e26e:	d09b      	beq.n	800e1a8 <_printf_i+0x164>
 800e270:	3501      	adds	r5, #1
 800e272:	68e3      	ldr	r3, [r4, #12]
 800e274:	9903      	ldr	r1, [sp, #12]
 800e276:	1a5b      	subs	r3, r3, r1
 800e278:	42ab      	cmp	r3, r5
 800e27a:	dcf2      	bgt.n	800e262 <_printf_i+0x21e>
 800e27c:	e7eb      	b.n	800e256 <_printf_i+0x212>
 800e27e:	2500      	movs	r5, #0
 800e280:	f104 0619 	add.w	r6, r4, #25
 800e284:	e7f5      	b.n	800e272 <_printf_i+0x22e>
 800e286:	bf00      	nop
 800e288:	080109ae 	.word	0x080109ae
 800e28c:	080109bf 	.word	0x080109bf

0800e290 <_sbrk_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d06      	ldr	r5, [pc, #24]	; (800e2ac <_sbrk_r+0x1c>)
 800e294:	2300      	movs	r3, #0
 800e296:	4604      	mov	r4, r0
 800e298:	4608      	mov	r0, r1
 800e29a:	602b      	str	r3, [r5, #0]
 800e29c:	f7f6 fe52 	bl	8004f44 <_sbrk>
 800e2a0:	1c43      	adds	r3, r0, #1
 800e2a2:	d102      	bne.n	800e2aa <_sbrk_r+0x1a>
 800e2a4:	682b      	ldr	r3, [r5, #0]
 800e2a6:	b103      	cbz	r3, 800e2aa <_sbrk_r+0x1a>
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	bd38      	pop	{r3, r4, r5, pc}
 800e2ac:	20001510 	.word	0x20001510

0800e2b0 <siprintf>:
 800e2b0:	b40e      	push	{r1, r2, r3}
 800e2b2:	b500      	push	{lr}
 800e2b4:	b09c      	sub	sp, #112	; 0x70
 800e2b6:	ab1d      	add	r3, sp, #116	; 0x74
 800e2b8:	9002      	str	r0, [sp, #8]
 800e2ba:	9006      	str	r0, [sp, #24]
 800e2bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e2c0:	4809      	ldr	r0, [pc, #36]	; (800e2e8 <siprintf+0x38>)
 800e2c2:	9107      	str	r1, [sp, #28]
 800e2c4:	9104      	str	r1, [sp, #16]
 800e2c6:	4909      	ldr	r1, [pc, #36]	; (800e2ec <siprintf+0x3c>)
 800e2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2cc:	9105      	str	r1, [sp, #20]
 800e2ce:	6800      	ldr	r0, [r0, #0]
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	a902      	add	r1, sp, #8
 800e2d4:	f001 fa8c 	bl	800f7f0 <_svfiprintf_r>
 800e2d8:	9b02      	ldr	r3, [sp, #8]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
 800e2de:	b01c      	add	sp, #112	; 0x70
 800e2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2e4:	b003      	add	sp, #12
 800e2e6:	4770      	bx	lr
 800e2e8:	20000324 	.word	0x20000324
 800e2ec:	ffff0208 	.word	0xffff0208

0800e2f0 <quorem>:
 800e2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f4:	6903      	ldr	r3, [r0, #16]
 800e2f6:	690c      	ldr	r4, [r1, #16]
 800e2f8:	42a3      	cmp	r3, r4
 800e2fa:	4607      	mov	r7, r0
 800e2fc:	f2c0 8081 	blt.w	800e402 <quorem+0x112>
 800e300:	3c01      	subs	r4, #1
 800e302:	f101 0814 	add.w	r8, r1, #20
 800e306:	f100 0514 	add.w	r5, r0, #20
 800e30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e318:	3301      	adds	r3, #1
 800e31a:	429a      	cmp	r2, r3
 800e31c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e320:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e324:	fbb2 f6f3 	udiv	r6, r2, r3
 800e328:	d331      	bcc.n	800e38e <quorem+0x9e>
 800e32a:	f04f 0e00 	mov.w	lr, #0
 800e32e:	4640      	mov	r0, r8
 800e330:	46ac      	mov	ip, r5
 800e332:	46f2      	mov	sl, lr
 800e334:	f850 2b04 	ldr.w	r2, [r0], #4
 800e338:	b293      	uxth	r3, r2
 800e33a:	fb06 e303 	mla	r3, r6, r3, lr
 800e33e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e342:	b29b      	uxth	r3, r3
 800e344:	ebaa 0303 	sub.w	r3, sl, r3
 800e348:	f8dc a000 	ldr.w	sl, [ip]
 800e34c:	0c12      	lsrs	r2, r2, #16
 800e34e:	fa13 f38a 	uxtah	r3, r3, sl
 800e352:	fb06 e202 	mla	r2, r6, r2, lr
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	9b00      	ldr	r3, [sp, #0]
 800e35a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e35e:	b292      	uxth	r2, r2
 800e360:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e364:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e368:	f8bd 3000 	ldrh.w	r3, [sp]
 800e36c:	4581      	cmp	r9, r0
 800e36e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e372:	f84c 3b04 	str.w	r3, [ip], #4
 800e376:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e37a:	d2db      	bcs.n	800e334 <quorem+0x44>
 800e37c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e380:	b92b      	cbnz	r3, 800e38e <quorem+0x9e>
 800e382:	9b01      	ldr	r3, [sp, #4]
 800e384:	3b04      	subs	r3, #4
 800e386:	429d      	cmp	r5, r3
 800e388:	461a      	mov	r2, r3
 800e38a:	d32e      	bcc.n	800e3ea <quorem+0xfa>
 800e38c:	613c      	str	r4, [r7, #16]
 800e38e:	4638      	mov	r0, r7
 800e390:	f001 f8ba 	bl	800f508 <__mcmp>
 800e394:	2800      	cmp	r0, #0
 800e396:	db24      	blt.n	800e3e2 <quorem+0xf2>
 800e398:	3601      	adds	r6, #1
 800e39a:	4628      	mov	r0, r5
 800e39c:	f04f 0c00 	mov.w	ip, #0
 800e3a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3a4:	f8d0 e000 	ldr.w	lr, [r0]
 800e3a8:	b293      	uxth	r3, r2
 800e3aa:	ebac 0303 	sub.w	r3, ip, r3
 800e3ae:	0c12      	lsrs	r2, r2, #16
 800e3b0:	fa13 f38e 	uxtah	r3, r3, lr
 800e3b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e3b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3c2:	45c1      	cmp	r9, r8
 800e3c4:	f840 3b04 	str.w	r3, [r0], #4
 800e3c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e3cc:	d2e8      	bcs.n	800e3a0 <quorem+0xb0>
 800e3ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3d6:	b922      	cbnz	r2, 800e3e2 <quorem+0xf2>
 800e3d8:	3b04      	subs	r3, #4
 800e3da:	429d      	cmp	r5, r3
 800e3dc:	461a      	mov	r2, r3
 800e3de:	d30a      	bcc.n	800e3f6 <quorem+0x106>
 800e3e0:	613c      	str	r4, [r7, #16]
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	b003      	add	sp, #12
 800e3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ea:	6812      	ldr	r2, [r2, #0]
 800e3ec:	3b04      	subs	r3, #4
 800e3ee:	2a00      	cmp	r2, #0
 800e3f0:	d1cc      	bne.n	800e38c <quorem+0x9c>
 800e3f2:	3c01      	subs	r4, #1
 800e3f4:	e7c7      	b.n	800e386 <quorem+0x96>
 800e3f6:	6812      	ldr	r2, [r2, #0]
 800e3f8:	3b04      	subs	r3, #4
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	d1f0      	bne.n	800e3e0 <quorem+0xf0>
 800e3fe:	3c01      	subs	r4, #1
 800e400:	e7eb      	b.n	800e3da <quorem+0xea>
 800e402:	2000      	movs	r0, #0
 800e404:	e7ee      	b.n	800e3e4 <quorem+0xf4>
	...

0800e408 <_dtoa_r>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	ed2d 8b04 	vpush	{d8-d9}
 800e410:	ec57 6b10 	vmov	r6, r7, d0
 800e414:	b093      	sub	sp, #76	; 0x4c
 800e416:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e418:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e41c:	9106      	str	r1, [sp, #24]
 800e41e:	ee10 aa10 	vmov	sl, s0
 800e422:	4604      	mov	r4, r0
 800e424:	9209      	str	r2, [sp, #36]	; 0x24
 800e426:	930c      	str	r3, [sp, #48]	; 0x30
 800e428:	46bb      	mov	fp, r7
 800e42a:	b975      	cbnz	r5, 800e44a <_dtoa_r+0x42>
 800e42c:	2010      	movs	r0, #16
 800e42e:	f7ff f9bf 	bl	800d7b0 <malloc>
 800e432:	4602      	mov	r2, r0
 800e434:	6260      	str	r0, [r4, #36]	; 0x24
 800e436:	b920      	cbnz	r0, 800e442 <_dtoa_r+0x3a>
 800e438:	4ba7      	ldr	r3, [pc, #668]	; (800e6d8 <_dtoa_r+0x2d0>)
 800e43a:	21ea      	movs	r1, #234	; 0xea
 800e43c:	48a7      	ldr	r0, [pc, #668]	; (800e6dc <_dtoa_r+0x2d4>)
 800e43e:	f001 fad7 	bl	800f9f0 <__assert_func>
 800e442:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e446:	6005      	str	r5, [r0, #0]
 800e448:	60c5      	str	r5, [r0, #12]
 800e44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e44c:	6819      	ldr	r1, [r3, #0]
 800e44e:	b151      	cbz	r1, 800e466 <_dtoa_r+0x5e>
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	604a      	str	r2, [r1, #4]
 800e454:	2301      	movs	r3, #1
 800e456:	4093      	lsls	r3, r2
 800e458:	608b      	str	r3, [r1, #8]
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 fe12 	bl	800f084 <_Bfree>
 800e460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e462:	2200      	movs	r2, #0
 800e464:	601a      	str	r2, [r3, #0]
 800e466:	1e3b      	subs	r3, r7, #0
 800e468:	bfaa      	itet	ge
 800e46a:	2300      	movge	r3, #0
 800e46c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e470:	f8c8 3000 	strge.w	r3, [r8]
 800e474:	4b9a      	ldr	r3, [pc, #616]	; (800e6e0 <_dtoa_r+0x2d8>)
 800e476:	bfbc      	itt	lt
 800e478:	2201      	movlt	r2, #1
 800e47a:	f8c8 2000 	strlt.w	r2, [r8]
 800e47e:	ea33 030b 	bics.w	r3, r3, fp
 800e482:	d11b      	bne.n	800e4bc <_dtoa_r+0xb4>
 800e484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e486:	f242 730f 	movw	r3, #9999	; 0x270f
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e490:	4333      	orrs	r3, r6
 800e492:	f000 8592 	beq.w	800efba <_dtoa_r+0xbb2>
 800e496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e498:	b963      	cbnz	r3, 800e4b4 <_dtoa_r+0xac>
 800e49a:	4b92      	ldr	r3, [pc, #584]	; (800e6e4 <_dtoa_r+0x2dc>)
 800e49c:	e022      	b.n	800e4e4 <_dtoa_r+0xdc>
 800e49e:	4b92      	ldr	r3, [pc, #584]	; (800e6e8 <_dtoa_r+0x2e0>)
 800e4a0:	9301      	str	r3, [sp, #4]
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	9801      	ldr	r0, [sp, #4]
 800e4aa:	b013      	add	sp, #76	; 0x4c
 800e4ac:	ecbd 8b04 	vpop	{d8-d9}
 800e4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b4:	4b8b      	ldr	r3, [pc, #556]	; (800e6e4 <_dtoa_r+0x2dc>)
 800e4b6:	9301      	str	r3, [sp, #4]
 800e4b8:	3303      	adds	r3, #3
 800e4ba:	e7f3      	b.n	800e4a4 <_dtoa_r+0x9c>
 800e4bc:	2200      	movs	r2, #0
 800e4be:	2300      	movs	r3, #0
 800e4c0:	4650      	mov	r0, sl
 800e4c2:	4659      	mov	r1, fp
 800e4c4:	f7f2 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4c8:	ec4b ab19 	vmov	d9, sl, fp
 800e4cc:	4680      	mov	r8, r0
 800e4ce:	b158      	cbz	r0, 800e4e8 <_dtoa_r+0xe0>
 800e4d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	6013      	str	r3, [r2, #0]
 800e4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 856b 	beq.w	800efb4 <_dtoa_r+0xbac>
 800e4de:	4883      	ldr	r0, [pc, #524]	; (800e6ec <_dtoa_r+0x2e4>)
 800e4e0:	6018      	str	r0, [r3, #0]
 800e4e2:	1e43      	subs	r3, r0, #1
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	e7df      	b.n	800e4a8 <_dtoa_r+0xa0>
 800e4e8:	ec4b ab10 	vmov	d0, sl, fp
 800e4ec:	aa10      	add	r2, sp, #64	; 0x40
 800e4ee:	a911      	add	r1, sp, #68	; 0x44
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	f001 f8af 	bl	800f654 <__d2b>
 800e4f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e4fa:	ee08 0a10 	vmov	s16, r0
 800e4fe:	2d00      	cmp	r5, #0
 800e500:	f000 8084 	beq.w	800e60c <_dtoa_r+0x204>
 800e504:	ee19 3a90 	vmov	r3, s19
 800e508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e50c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e510:	4656      	mov	r6, sl
 800e512:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e51a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e51e:	4b74      	ldr	r3, [pc, #464]	; (800e6f0 <_dtoa_r+0x2e8>)
 800e520:	2200      	movs	r2, #0
 800e522:	4630      	mov	r0, r6
 800e524:	4639      	mov	r1, r7
 800e526:	f7f1 feaf 	bl	8000288 <__aeabi_dsub>
 800e52a:	a365      	add	r3, pc, #404	; (adr r3, 800e6c0 <_dtoa_r+0x2b8>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f2 f862 	bl	80005f8 <__aeabi_dmul>
 800e534:	a364      	add	r3, pc, #400	; (adr r3, 800e6c8 <_dtoa_r+0x2c0>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fea7 	bl	800028c <__adddf3>
 800e53e:	4606      	mov	r6, r0
 800e540:	4628      	mov	r0, r5
 800e542:	460f      	mov	r7, r1
 800e544:	f7f1 ffee 	bl	8000524 <__aeabi_i2d>
 800e548:	a361      	add	r3, pc, #388	; (adr r3, 800e6d0 <_dtoa_r+0x2c8>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f2 f853 	bl	80005f8 <__aeabi_dmul>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	4630      	mov	r0, r6
 800e558:	4639      	mov	r1, r7
 800e55a:	f7f1 fe97 	bl	800028c <__adddf3>
 800e55e:	4606      	mov	r6, r0
 800e560:	460f      	mov	r7, r1
 800e562:	f7f2 faf9 	bl	8000b58 <__aeabi_d2iz>
 800e566:	2200      	movs	r2, #0
 800e568:	9000      	str	r0, [sp, #0]
 800e56a:	2300      	movs	r3, #0
 800e56c:	4630      	mov	r0, r6
 800e56e:	4639      	mov	r1, r7
 800e570:	f7f2 fab4 	bl	8000adc <__aeabi_dcmplt>
 800e574:	b150      	cbz	r0, 800e58c <_dtoa_r+0x184>
 800e576:	9800      	ldr	r0, [sp, #0]
 800e578:	f7f1 ffd4 	bl	8000524 <__aeabi_i2d>
 800e57c:	4632      	mov	r2, r6
 800e57e:	463b      	mov	r3, r7
 800e580:	f7f2 faa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e584:	b910      	cbnz	r0, 800e58c <_dtoa_r+0x184>
 800e586:	9b00      	ldr	r3, [sp, #0]
 800e588:	3b01      	subs	r3, #1
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	9b00      	ldr	r3, [sp, #0]
 800e58e:	2b16      	cmp	r3, #22
 800e590:	d85a      	bhi.n	800e648 <_dtoa_r+0x240>
 800e592:	9a00      	ldr	r2, [sp, #0]
 800e594:	4b57      	ldr	r3, [pc, #348]	; (800e6f4 <_dtoa_r+0x2ec>)
 800e596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	ec51 0b19 	vmov	r0, r1, d9
 800e5a2:	f7f2 fa9b 	bl	8000adc <__aeabi_dcmplt>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d050      	beq.n	800e64c <_dtoa_r+0x244>
 800e5aa:	9b00      	ldr	r3, [sp, #0]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5b6:	1b5d      	subs	r5, r3, r5
 800e5b8:	1e6b      	subs	r3, r5, #1
 800e5ba:	9305      	str	r3, [sp, #20]
 800e5bc:	bf45      	ittet	mi
 800e5be:	f1c5 0301 	rsbmi	r3, r5, #1
 800e5c2:	9304      	strmi	r3, [sp, #16]
 800e5c4:	2300      	movpl	r3, #0
 800e5c6:	2300      	movmi	r3, #0
 800e5c8:	bf4c      	ite	mi
 800e5ca:	9305      	strmi	r3, [sp, #20]
 800e5cc:	9304      	strpl	r3, [sp, #16]
 800e5ce:	9b00      	ldr	r3, [sp, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	db3d      	blt.n	800e650 <_dtoa_r+0x248>
 800e5d4:	9b05      	ldr	r3, [sp, #20]
 800e5d6:	9a00      	ldr	r2, [sp, #0]
 800e5d8:	920a      	str	r2, [sp, #40]	; 0x28
 800e5da:	4413      	add	r3, r2
 800e5dc:	9305      	str	r3, [sp, #20]
 800e5de:	2300      	movs	r3, #0
 800e5e0:	9307      	str	r3, [sp, #28]
 800e5e2:	9b06      	ldr	r3, [sp, #24]
 800e5e4:	2b09      	cmp	r3, #9
 800e5e6:	f200 8089 	bhi.w	800e6fc <_dtoa_r+0x2f4>
 800e5ea:	2b05      	cmp	r3, #5
 800e5ec:	bfc4      	itt	gt
 800e5ee:	3b04      	subgt	r3, #4
 800e5f0:	9306      	strgt	r3, [sp, #24]
 800e5f2:	9b06      	ldr	r3, [sp, #24]
 800e5f4:	f1a3 0302 	sub.w	r3, r3, #2
 800e5f8:	bfcc      	ite	gt
 800e5fa:	2500      	movgt	r5, #0
 800e5fc:	2501      	movle	r5, #1
 800e5fe:	2b03      	cmp	r3, #3
 800e600:	f200 8087 	bhi.w	800e712 <_dtoa_r+0x30a>
 800e604:	e8df f003 	tbb	[pc, r3]
 800e608:	59383a2d 	.word	0x59383a2d
 800e60c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e610:	441d      	add	r5, r3
 800e612:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e616:	2b20      	cmp	r3, #32
 800e618:	bfc1      	itttt	gt
 800e61a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e61e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e622:	fa0b f303 	lslgt.w	r3, fp, r3
 800e626:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e62a:	bfda      	itte	le
 800e62c:	f1c3 0320 	rsble	r3, r3, #32
 800e630:	fa06 f003 	lslle.w	r0, r6, r3
 800e634:	4318      	orrgt	r0, r3
 800e636:	f7f1 ff65 	bl	8000504 <__aeabi_ui2d>
 800e63a:	2301      	movs	r3, #1
 800e63c:	4606      	mov	r6, r0
 800e63e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e642:	3d01      	subs	r5, #1
 800e644:	930e      	str	r3, [sp, #56]	; 0x38
 800e646:	e76a      	b.n	800e51e <_dtoa_r+0x116>
 800e648:	2301      	movs	r3, #1
 800e64a:	e7b2      	b.n	800e5b2 <_dtoa_r+0x1aa>
 800e64c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e64e:	e7b1      	b.n	800e5b4 <_dtoa_r+0x1ac>
 800e650:	9b04      	ldr	r3, [sp, #16]
 800e652:	9a00      	ldr	r2, [sp, #0]
 800e654:	1a9b      	subs	r3, r3, r2
 800e656:	9304      	str	r3, [sp, #16]
 800e658:	4253      	negs	r3, r2
 800e65a:	9307      	str	r3, [sp, #28]
 800e65c:	2300      	movs	r3, #0
 800e65e:	930a      	str	r3, [sp, #40]	; 0x28
 800e660:	e7bf      	b.n	800e5e2 <_dtoa_r+0x1da>
 800e662:	2300      	movs	r3, #0
 800e664:	9308      	str	r3, [sp, #32]
 800e666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e668:	2b00      	cmp	r3, #0
 800e66a:	dc55      	bgt.n	800e718 <_dtoa_r+0x310>
 800e66c:	2301      	movs	r3, #1
 800e66e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e672:	461a      	mov	r2, r3
 800e674:	9209      	str	r2, [sp, #36]	; 0x24
 800e676:	e00c      	b.n	800e692 <_dtoa_r+0x28a>
 800e678:	2301      	movs	r3, #1
 800e67a:	e7f3      	b.n	800e664 <_dtoa_r+0x25c>
 800e67c:	2300      	movs	r3, #0
 800e67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e680:	9308      	str	r3, [sp, #32]
 800e682:	9b00      	ldr	r3, [sp, #0]
 800e684:	4413      	add	r3, r2
 800e686:	9302      	str	r3, [sp, #8]
 800e688:	3301      	adds	r3, #1
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	9303      	str	r3, [sp, #12]
 800e68e:	bfb8      	it	lt
 800e690:	2301      	movlt	r3, #1
 800e692:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e694:	2200      	movs	r2, #0
 800e696:	6042      	str	r2, [r0, #4]
 800e698:	2204      	movs	r2, #4
 800e69a:	f102 0614 	add.w	r6, r2, #20
 800e69e:	429e      	cmp	r6, r3
 800e6a0:	6841      	ldr	r1, [r0, #4]
 800e6a2:	d93d      	bls.n	800e720 <_dtoa_r+0x318>
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f000 fcad 	bl	800f004 <_Balloc>
 800e6aa:	9001      	str	r0, [sp, #4]
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d13b      	bne.n	800e728 <_dtoa_r+0x320>
 800e6b0:	4b11      	ldr	r3, [pc, #68]	; (800e6f8 <_dtoa_r+0x2f0>)
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e6b8:	e6c0      	b.n	800e43c <_dtoa_r+0x34>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	e7df      	b.n	800e67e <_dtoa_r+0x276>
 800e6be:	bf00      	nop
 800e6c0:	636f4361 	.word	0x636f4361
 800e6c4:	3fd287a7 	.word	0x3fd287a7
 800e6c8:	8b60c8b3 	.word	0x8b60c8b3
 800e6cc:	3fc68a28 	.word	0x3fc68a28
 800e6d0:	509f79fb 	.word	0x509f79fb
 800e6d4:	3fd34413 	.word	0x3fd34413
 800e6d8:	080109dd 	.word	0x080109dd
 800e6dc:	080109f4 	.word	0x080109f4
 800e6e0:	7ff00000 	.word	0x7ff00000
 800e6e4:	080109d9 	.word	0x080109d9
 800e6e8:	080109d0 	.word	0x080109d0
 800e6ec:	080109ad 	.word	0x080109ad
 800e6f0:	3ff80000 	.word	0x3ff80000
 800e6f4:	08010ae8 	.word	0x08010ae8
 800e6f8:	08010a4f 	.word	0x08010a4f
 800e6fc:	2501      	movs	r5, #1
 800e6fe:	2300      	movs	r3, #0
 800e700:	9306      	str	r3, [sp, #24]
 800e702:	9508      	str	r5, [sp, #32]
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e70c:	2200      	movs	r2, #0
 800e70e:	2312      	movs	r3, #18
 800e710:	e7b0      	b.n	800e674 <_dtoa_r+0x26c>
 800e712:	2301      	movs	r3, #1
 800e714:	9308      	str	r3, [sp, #32]
 800e716:	e7f5      	b.n	800e704 <_dtoa_r+0x2fc>
 800e718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e71e:	e7b8      	b.n	800e692 <_dtoa_r+0x28a>
 800e720:	3101      	adds	r1, #1
 800e722:	6041      	str	r1, [r0, #4]
 800e724:	0052      	lsls	r2, r2, #1
 800e726:	e7b8      	b.n	800e69a <_dtoa_r+0x292>
 800e728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e72a:	9a01      	ldr	r2, [sp, #4]
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	9b03      	ldr	r3, [sp, #12]
 800e730:	2b0e      	cmp	r3, #14
 800e732:	f200 809d 	bhi.w	800e870 <_dtoa_r+0x468>
 800e736:	2d00      	cmp	r5, #0
 800e738:	f000 809a 	beq.w	800e870 <_dtoa_r+0x468>
 800e73c:	9b00      	ldr	r3, [sp, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	dd32      	ble.n	800e7a8 <_dtoa_r+0x3a0>
 800e742:	4ab7      	ldr	r2, [pc, #732]	; (800ea20 <_dtoa_r+0x618>)
 800e744:	f003 030f 	and.w	r3, r3, #15
 800e748:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e74c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e750:	9b00      	ldr	r3, [sp, #0]
 800e752:	05d8      	lsls	r0, r3, #23
 800e754:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e758:	d516      	bpl.n	800e788 <_dtoa_r+0x380>
 800e75a:	4bb2      	ldr	r3, [pc, #712]	; (800ea24 <_dtoa_r+0x61c>)
 800e75c:	ec51 0b19 	vmov	r0, r1, d9
 800e760:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e764:	f7f2 f872 	bl	800084c <__aeabi_ddiv>
 800e768:	f007 070f 	and.w	r7, r7, #15
 800e76c:	4682      	mov	sl, r0
 800e76e:	468b      	mov	fp, r1
 800e770:	2503      	movs	r5, #3
 800e772:	4eac      	ldr	r6, [pc, #688]	; (800ea24 <_dtoa_r+0x61c>)
 800e774:	b957      	cbnz	r7, 800e78c <_dtoa_r+0x384>
 800e776:	4642      	mov	r2, r8
 800e778:	464b      	mov	r3, r9
 800e77a:	4650      	mov	r0, sl
 800e77c:	4659      	mov	r1, fp
 800e77e:	f7f2 f865 	bl	800084c <__aeabi_ddiv>
 800e782:	4682      	mov	sl, r0
 800e784:	468b      	mov	fp, r1
 800e786:	e028      	b.n	800e7da <_dtoa_r+0x3d2>
 800e788:	2502      	movs	r5, #2
 800e78a:	e7f2      	b.n	800e772 <_dtoa_r+0x36a>
 800e78c:	07f9      	lsls	r1, r7, #31
 800e78e:	d508      	bpl.n	800e7a2 <_dtoa_r+0x39a>
 800e790:	4640      	mov	r0, r8
 800e792:	4649      	mov	r1, r9
 800e794:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e798:	f7f1 ff2e 	bl	80005f8 <__aeabi_dmul>
 800e79c:	3501      	adds	r5, #1
 800e79e:	4680      	mov	r8, r0
 800e7a0:	4689      	mov	r9, r1
 800e7a2:	107f      	asrs	r7, r7, #1
 800e7a4:	3608      	adds	r6, #8
 800e7a6:	e7e5      	b.n	800e774 <_dtoa_r+0x36c>
 800e7a8:	f000 809b 	beq.w	800e8e2 <_dtoa_r+0x4da>
 800e7ac:	9b00      	ldr	r3, [sp, #0]
 800e7ae:	4f9d      	ldr	r7, [pc, #628]	; (800ea24 <_dtoa_r+0x61c>)
 800e7b0:	425e      	negs	r6, r3
 800e7b2:	4b9b      	ldr	r3, [pc, #620]	; (800ea20 <_dtoa_r+0x618>)
 800e7b4:	f006 020f 	and.w	r2, r6, #15
 800e7b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	ec51 0b19 	vmov	r0, r1, d9
 800e7c4:	f7f1 ff18 	bl	80005f8 <__aeabi_dmul>
 800e7c8:	1136      	asrs	r6, r6, #4
 800e7ca:	4682      	mov	sl, r0
 800e7cc:	468b      	mov	fp, r1
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	2502      	movs	r5, #2
 800e7d2:	2e00      	cmp	r6, #0
 800e7d4:	d17a      	bne.n	800e8cc <_dtoa_r+0x4c4>
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1d3      	bne.n	800e782 <_dtoa_r+0x37a>
 800e7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 8082 	beq.w	800e8e6 <_dtoa_r+0x4de>
 800e7e2:	4b91      	ldr	r3, [pc, #580]	; (800ea28 <_dtoa_r+0x620>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	4659      	mov	r1, fp
 800e7ea:	f7f2 f977 	bl	8000adc <__aeabi_dcmplt>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d079      	beq.n	800e8e6 <_dtoa_r+0x4de>
 800e7f2:	9b03      	ldr	r3, [sp, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d076      	beq.n	800e8e6 <_dtoa_r+0x4de>
 800e7f8:	9b02      	ldr	r3, [sp, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	dd36      	ble.n	800e86c <_dtoa_r+0x464>
 800e7fe:	9b00      	ldr	r3, [sp, #0]
 800e800:	4650      	mov	r0, sl
 800e802:	4659      	mov	r1, fp
 800e804:	1e5f      	subs	r7, r3, #1
 800e806:	2200      	movs	r2, #0
 800e808:	4b88      	ldr	r3, [pc, #544]	; (800ea2c <_dtoa_r+0x624>)
 800e80a:	f7f1 fef5 	bl	80005f8 <__aeabi_dmul>
 800e80e:	9e02      	ldr	r6, [sp, #8]
 800e810:	4682      	mov	sl, r0
 800e812:	468b      	mov	fp, r1
 800e814:	3501      	adds	r5, #1
 800e816:	4628      	mov	r0, r5
 800e818:	f7f1 fe84 	bl	8000524 <__aeabi_i2d>
 800e81c:	4652      	mov	r2, sl
 800e81e:	465b      	mov	r3, fp
 800e820:	f7f1 feea 	bl	80005f8 <__aeabi_dmul>
 800e824:	4b82      	ldr	r3, [pc, #520]	; (800ea30 <_dtoa_r+0x628>)
 800e826:	2200      	movs	r2, #0
 800e828:	f7f1 fd30 	bl	800028c <__adddf3>
 800e82c:	46d0      	mov	r8, sl
 800e82e:	46d9      	mov	r9, fp
 800e830:	4682      	mov	sl, r0
 800e832:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e836:	2e00      	cmp	r6, #0
 800e838:	d158      	bne.n	800e8ec <_dtoa_r+0x4e4>
 800e83a:	4b7e      	ldr	r3, [pc, #504]	; (800ea34 <_dtoa_r+0x62c>)
 800e83c:	2200      	movs	r2, #0
 800e83e:	4640      	mov	r0, r8
 800e840:	4649      	mov	r1, r9
 800e842:	f7f1 fd21 	bl	8000288 <__aeabi_dsub>
 800e846:	4652      	mov	r2, sl
 800e848:	465b      	mov	r3, fp
 800e84a:	4680      	mov	r8, r0
 800e84c:	4689      	mov	r9, r1
 800e84e:	f7f2 f963 	bl	8000b18 <__aeabi_dcmpgt>
 800e852:	2800      	cmp	r0, #0
 800e854:	f040 8295 	bne.w	800ed82 <_dtoa_r+0x97a>
 800e858:	4652      	mov	r2, sl
 800e85a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e85e:	4640      	mov	r0, r8
 800e860:	4649      	mov	r1, r9
 800e862:	f7f2 f93b 	bl	8000adc <__aeabi_dcmplt>
 800e866:	2800      	cmp	r0, #0
 800e868:	f040 8289 	bne.w	800ed7e <_dtoa_r+0x976>
 800e86c:	ec5b ab19 	vmov	sl, fp, d9
 800e870:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e872:	2b00      	cmp	r3, #0
 800e874:	f2c0 8148 	blt.w	800eb08 <_dtoa_r+0x700>
 800e878:	9a00      	ldr	r2, [sp, #0]
 800e87a:	2a0e      	cmp	r2, #14
 800e87c:	f300 8144 	bgt.w	800eb08 <_dtoa_r+0x700>
 800e880:	4b67      	ldr	r3, [pc, #412]	; (800ea20 <_dtoa_r+0x618>)
 800e882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e886:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f280 80d5 	bge.w	800ea3c <_dtoa_r+0x634>
 800e892:	9b03      	ldr	r3, [sp, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	f300 80d1 	bgt.w	800ea3c <_dtoa_r+0x634>
 800e89a:	f040 826f 	bne.w	800ed7c <_dtoa_r+0x974>
 800e89e:	4b65      	ldr	r3, [pc, #404]	; (800ea34 <_dtoa_r+0x62c>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	4649      	mov	r1, r9
 800e8a6:	f7f1 fea7 	bl	80005f8 <__aeabi_dmul>
 800e8aa:	4652      	mov	r2, sl
 800e8ac:	465b      	mov	r3, fp
 800e8ae:	f7f2 f929 	bl	8000b04 <__aeabi_dcmpge>
 800e8b2:	9e03      	ldr	r6, [sp, #12]
 800e8b4:	4637      	mov	r7, r6
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	f040 8245 	bne.w	800ed46 <_dtoa_r+0x93e>
 800e8bc:	9d01      	ldr	r5, [sp, #4]
 800e8be:	2331      	movs	r3, #49	; 0x31
 800e8c0:	f805 3b01 	strb.w	r3, [r5], #1
 800e8c4:	9b00      	ldr	r3, [sp, #0]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	e240      	b.n	800ed4e <_dtoa_r+0x946>
 800e8cc:	07f2      	lsls	r2, r6, #31
 800e8ce:	d505      	bpl.n	800e8dc <_dtoa_r+0x4d4>
 800e8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8d4:	f7f1 fe90 	bl	80005f8 <__aeabi_dmul>
 800e8d8:	3501      	adds	r5, #1
 800e8da:	2301      	movs	r3, #1
 800e8dc:	1076      	asrs	r6, r6, #1
 800e8de:	3708      	adds	r7, #8
 800e8e0:	e777      	b.n	800e7d2 <_dtoa_r+0x3ca>
 800e8e2:	2502      	movs	r5, #2
 800e8e4:	e779      	b.n	800e7da <_dtoa_r+0x3d2>
 800e8e6:	9f00      	ldr	r7, [sp, #0]
 800e8e8:	9e03      	ldr	r6, [sp, #12]
 800e8ea:	e794      	b.n	800e816 <_dtoa_r+0x40e>
 800e8ec:	9901      	ldr	r1, [sp, #4]
 800e8ee:	4b4c      	ldr	r3, [pc, #304]	; (800ea20 <_dtoa_r+0x618>)
 800e8f0:	4431      	add	r1, r6
 800e8f2:	910d      	str	r1, [sp, #52]	; 0x34
 800e8f4:	9908      	ldr	r1, [sp, #32]
 800e8f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e8fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8fe:	2900      	cmp	r1, #0
 800e900:	d043      	beq.n	800e98a <_dtoa_r+0x582>
 800e902:	494d      	ldr	r1, [pc, #308]	; (800ea38 <_dtoa_r+0x630>)
 800e904:	2000      	movs	r0, #0
 800e906:	f7f1 ffa1 	bl	800084c <__aeabi_ddiv>
 800e90a:	4652      	mov	r2, sl
 800e90c:	465b      	mov	r3, fp
 800e90e:	f7f1 fcbb 	bl	8000288 <__aeabi_dsub>
 800e912:	9d01      	ldr	r5, [sp, #4]
 800e914:	4682      	mov	sl, r0
 800e916:	468b      	mov	fp, r1
 800e918:	4649      	mov	r1, r9
 800e91a:	4640      	mov	r0, r8
 800e91c:	f7f2 f91c 	bl	8000b58 <__aeabi_d2iz>
 800e920:	4606      	mov	r6, r0
 800e922:	f7f1 fdff 	bl	8000524 <__aeabi_i2d>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4640      	mov	r0, r8
 800e92c:	4649      	mov	r1, r9
 800e92e:	f7f1 fcab 	bl	8000288 <__aeabi_dsub>
 800e932:	3630      	adds	r6, #48	; 0x30
 800e934:	f805 6b01 	strb.w	r6, [r5], #1
 800e938:	4652      	mov	r2, sl
 800e93a:	465b      	mov	r3, fp
 800e93c:	4680      	mov	r8, r0
 800e93e:	4689      	mov	r9, r1
 800e940:	f7f2 f8cc 	bl	8000adc <__aeabi_dcmplt>
 800e944:	2800      	cmp	r0, #0
 800e946:	d163      	bne.n	800ea10 <_dtoa_r+0x608>
 800e948:	4642      	mov	r2, r8
 800e94a:	464b      	mov	r3, r9
 800e94c:	4936      	ldr	r1, [pc, #216]	; (800ea28 <_dtoa_r+0x620>)
 800e94e:	2000      	movs	r0, #0
 800e950:	f7f1 fc9a 	bl	8000288 <__aeabi_dsub>
 800e954:	4652      	mov	r2, sl
 800e956:	465b      	mov	r3, fp
 800e958:	f7f2 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	f040 80b5 	bne.w	800eacc <_dtoa_r+0x6c4>
 800e962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e964:	429d      	cmp	r5, r3
 800e966:	d081      	beq.n	800e86c <_dtoa_r+0x464>
 800e968:	4b30      	ldr	r3, [pc, #192]	; (800ea2c <_dtoa_r+0x624>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	4650      	mov	r0, sl
 800e96e:	4659      	mov	r1, fp
 800e970:	f7f1 fe42 	bl	80005f8 <__aeabi_dmul>
 800e974:	4b2d      	ldr	r3, [pc, #180]	; (800ea2c <_dtoa_r+0x624>)
 800e976:	4682      	mov	sl, r0
 800e978:	468b      	mov	fp, r1
 800e97a:	4640      	mov	r0, r8
 800e97c:	4649      	mov	r1, r9
 800e97e:	2200      	movs	r2, #0
 800e980:	f7f1 fe3a 	bl	80005f8 <__aeabi_dmul>
 800e984:	4680      	mov	r8, r0
 800e986:	4689      	mov	r9, r1
 800e988:	e7c6      	b.n	800e918 <_dtoa_r+0x510>
 800e98a:	4650      	mov	r0, sl
 800e98c:	4659      	mov	r1, fp
 800e98e:	f7f1 fe33 	bl	80005f8 <__aeabi_dmul>
 800e992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e994:	9d01      	ldr	r5, [sp, #4]
 800e996:	930f      	str	r3, [sp, #60]	; 0x3c
 800e998:	4682      	mov	sl, r0
 800e99a:	468b      	mov	fp, r1
 800e99c:	4649      	mov	r1, r9
 800e99e:	4640      	mov	r0, r8
 800e9a0:	f7f2 f8da 	bl	8000b58 <__aeabi_d2iz>
 800e9a4:	4606      	mov	r6, r0
 800e9a6:	f7f1 fdbd 	bl	8000524 <__aeabi_i2d>
 800e9aa:	3630      	adds	r6, #48	; 0x30
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4640      	mov	r0, r8
 800e9b2:	4649      	mov	r1, r9
 800e9b4:	f7f1 fc68 	bl	8000288 <__aeabi_dsub>
 800e9b8:	f805 6b01 	strb.w	r6, [r5], #1
 800e9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9be:	429d      	cmp	r5, r3
 800e9c0:	4680      	mov	r8, r0
 800e9c2:	4689      	mov	r9, r1
 800e9c4:	f04f 0200 	mov.w	r2, #0
 800e9c8:	d124      	bne.n	800ea14 <_dtoa_r+0x60c>
 800e9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ea38 <_dtoa_r+0x630>)
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	4659      	mov	r1, fp
 800e9d0:	f7f1 fc5c 	bl	800028c <__adddf3>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4640      	mov	r0, r8
 800e9da:	4649      	mov	r1, r9
 800e9dc:	f7f2 f89c 	bl	8000b18 <__aeabi_dcmpgt>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d173      	bne.n	800eacc <_dtoa_r+0x6c4>
 800e9e4:	4652      	mov	r2, sl
 800e9e6:	465b      	mov	r3, fp
 800e9e8:	4913      	ldr	r1, [pc, #76]	; (800ea38 <_dtoa_r+0x630>)
 800e9ea:	2000      	movs	r0, #0
 800e9ec:	f7f1 fc4c 	bl	8000288 <__aeabi_dsub>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	f7f2 f870 	bl	8000adc <__aeabi_dcmplt>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	f43f af35 	beq.w	800e86c <_dtoa_r+0x464>
 800ea02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea04:	1e6b      	subs	r3, r5, #1
 800ea06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea0c:	2b30      	cmp	r3, #48	; 0x30
 800ea0e:	d0f8      	beq.n	800ea02 <_dtoa_r+0x5fa>
 800ea10:	9700      	str	r7, [sp, #0]
 800ea12:	e049      	b.n	800eaa8 <_dtoa_r+0x6a0>
 800ea14:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <_dtoa_r+0x624>)
 800ea16:	f7f1 fdef 	bl	80005f8 <__aeabi_dmul>
 800ea1a:	4680      	mov	r8, r0
 800ea1c:	4689      	mov	r9, r1
 800ea1e:	e7bd      	b.n	800e99c <_dtoa_r+0x594>
 800ea20:	08010ae8 	.word	0x08010ae8
 800ea24:	08010ac0 	.word	0x08010ac0
 800ea28:	3ff00000 	.word	0x3ff00000
 800ea2c:	40240000 	.word	0x40240000
 800ea30:	401c0000 	.word	0x401c0000
 800ea34:	40140000 	.word	0x40140000
 800ea38:	3fe00000 	.word	0x3fe00000
 800ea3c:	9d01      	ldr	r5, [sp, #4]
 800ea3e:	4656      	mov	r6, sl
 800ea40:	465f      	mov	r7, fp
 800ea42:	4642      	mov	r2, r8
 800ea44:	464b      	mov	r3, r9
 800ea46:	4630      	mov	r0, r6
 800ea48:	4639      	mov	r1, r7
 800ea4a:	f7f1 feff 	bl	800084c <__aeabi_ddiv>
 800ea4e:	f7f2 f883 	bl	8000b58 <__aeabi_d2iz>
 800ea52:	4682      	mov	sl, r0
 800ea54:	f7f1 fd66 	bl	8000524 <__aeabi_i2d>
 800ea58:	4642      	mov	r2, r8
 800ea5a:	464b      	mov	r3, r9
 800ea5c:	f7f1 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4630      	mov	r0, r6
 800ea66:	4639      	mov	r1, r7
 800ea68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ea6c:	f7f1 fc0c 	bl	8000288 <__aeabi_dsub>
 800ea70:	f805 6b01 	strb.w	r6, [r5], #1
 800ea74:	9e01      	ldr	r6, [sp, #4]
 800ea76:	9f03      	ldr	r7, [sp, #12]
 800ea78:	1bae      	subs	r6, r5, r6
 800ea7a:	42b7      	cmp	r7, r6
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	d135      	bne.n	800eaee <_dtoa_r+0x6e6>
 800ea82:	f7f1 fc03 	bl	800028c <__adddf3>
 800ea86:	4642      	mov	r2, r8
 800ea88:	464b      	mov	r3, r9
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	460f      	mov	r7, r1
 800ea8e:	f7f2 f843 	bl	8000b18 <__aeabi_dcmpgt>
 800ea92:	b9d0      	cbnz	r0, 800eaca <_dtoa_r+0x6c2>
 800ea94:	4642      	mov	r2, r8
 800ea96:	464b      	mov	r3, r9
 800ea98:	4630      	mov	r0, r6
 800ea9a:	4639      	mov	r1, r7
 800ea9c:	f7f2 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaa0:	b110      	cbz	r0, 800eaa8 <_dtoa_r+0x6a0>
 800eaa2:	f01a 0f01 	tst.w	sl, #1
 800eaa6:	d110      	bne.n	800eaca <_dtoa_r+0x6c2>
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	ee18 1a10 	vmov	r1, s16
 800eaae:	f000 fae9 	bl	800f084 <_Bfree>
 800eab2:	2300      	movs	r3, #0
 800eab4:	9800      	ldr	r0, [sp, #0]
 800eab6:	702b      	strb	r3, [r5, #0]
 800eab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaba:	3001      	adds	r0, #1
 800eabc:	6018      	str	r0, [r3, #0]
 800eabe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f43f acf1 	beq.w	800e4a8 <_dtoa_r+0xa0>
 800eac6:	601d      	str	r5, [r3, #0]
 800eac8:	e4ee      	b.n	800e4a8 <_dtoa_r+0xa0>
 800eaca:	9f00      	ldr	r7, [sp, #0]
 800eacc:	462b      	mov	r3, r5
 800eace:	461d      	mov	r5, r3
 800ead0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ead4:	2a39      	cmp	r2, #57	; 0x39
 800ead6:	d106      	bne.n	800eae6 <_dtoa_r+0x6de>
 800ead8:	9a01      	ldr	r2, [sp, #4]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d1f7      	bne.n	800eace <_dtoa_r+0x6c6>
 800eade:	9901      	ldr	r1, [sp, #4]
 800eae0:	2230      	movs	r2, #48	; 0x30
 800eae2:	3701      	adds	r7, #1
 800eae4:	700a      	strb	r2, [r1, #0]
 800eae6:	781a      	ldrb	r2, [r3, #0]
 800eae8:	3201      	adds	r2, #1
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	e790      	b.n	800ea10 <_dtoa_r+0x608>
 800eaee:	4ba6      	ldr	r3, [pc, #664]	; (800ed88 <_dtoa_r+0x980>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f7f1 fd81 	bl	80005f8 <__aeabi_dmul>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2300      	movs	r3, #0
 800eafa:	4606      	mov	r6, r0
 800eafc:	460f      	mov	r7, r1
 800eafe:	f7f1 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d09d      	beq.n	800ea42 <_dtoa_r+0x63a>
 800eb06:	e7cf      	b.n	800eaa8 <_dtoa_r+0x6a0>
 800eb08:	9a08      	ldr	r2, [sp, #32]
 800eb0a:	2a00      	cmp	r2, #0
 800eb0c:	f000 80d7 	beq.w	800ecbe <_dtoa_r+0x8b6>
 800eb10:	9a06      	ldr	r2, [sp, #24]
 800eb12:	2a01      	cmp	r2, #1
 800eb14:	f300 80ba 	bgt.w	800ec8c <_dtoa_r+0x884>
 800eb18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	f000 80b2 	beq.w	800ec84 <_dtoa_r+0x87c>
 800eb20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb24:	9e07      	ldr	r6, [sp, #28]
 800eb26:	9d04      	ldr	r5, [sp, #16]
 800eb28:	9a04      	ldr	r2, [sp, #16]
 800eb2a:	441a      	add	r2, r3
 800eb2c:	9204      	str	r2, [sp, #16]
 800eb2e:	9a05      	ldr	r2, [sp, #20]
 800eb30:	2101      	movs	r1, #1
 800eb32:	441a      	add	r2, r3
 800eb34:	4620      	mov	r0, r4
 800eb36:	9205      	str	r2, [sp, #20]
 800eb38:	f000 fb5c 	bl	800f1f4 <__i2b>
 800eb3c:	4607      	mov	r7, r0
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	dd0c      	ble.n	800eb5c <_dtoa_r+0x754>
 800eb42:	9b05      	ldr	r3, [sp, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dd09      	ble.n	800eb5c <_dtoa_r+0x754>
 800eb48:	42ab      	cmp	r3, r5
 800eb4a:	9a04      	ldr	r2, [sp, #16]
 800eb4c:	bfa8      	it	ge
 800eb4e:	462b      	movge	r3, r5
 800eb50:	1ad2      	subs	r2, r2, r3
 800eb52:	9204      	str	r2, [sp, #16]
 800eb54:	9a05      	ldr	r2, [sp, #20]
 800eb56:	1aed      	subs	r5, r5, r3
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	9305      	str	r3, [sp, #20]
 800eb5c:	9b07      	ldr	r3, [sp, #28]
 800eb5e:	b31b      	cbz	r3, 800eba8 <_dtoa_r+0x7a0>
 800eb60:	9b08      	ldr	r3, [sp, #32]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f000 80af 	beq.w	800ecc6 <_dtoa_r+0x8be>
 800eb68:	2e00      	cmp	r6, #0
 800eb6a:	dd13      	ble.n	800eb94 <_dtoa_r+0x78c>
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	4632      	mov	r2, r6
 800eb70:	4620      	mov	r0, r4
 800eb72:	f000 fbff 	bl	800f374 <__pow5mult>
 800eb76:	ee18 2a10 	vmov	r2, s16
 800eb7a:	4601      	mov	r1, r0
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f000 fb4e 	bl	800f220 <__multiply>
 800eb84:	ee18 1a10 	vmov	r1, s16
 800eb88:	4680      	mov	r8, r0
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 fa7a 	bl	800f084 <_Bfree>
 800eb90:	ee08 8a10 	vmov	s16, r8
 800eb94:	9b07      	ldr	r3, [sp, #28]
 800eb96:	1b9a      	subs	r2, r3, r6
 800eb98:	d006      	beq.n	800eba8 <_dtoa_r+0x7a0>
 800eb9a:	ee18 1a10 	vmov	r1, s16
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f000 fbe8 	bl	800f374 <__pow5mult>
 800eba4:	ee08 0a10 	vmov	s16, r0
 800eba8:	2101      	movs	r1, #1
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f000 fb22 	bl	800f1f4 <__i2b>
 800ebb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	4606      	mov	r6, r0
 800ebb6:	f340 8088 	ble.w	800ecca <_dtoa_r+0x8c2>
 800ebba:	461a      	mov	r2, r3
 800ebbc:	4601      	mov	r1, r0
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 fbd8 	bl	800f374 <__pow5mult>
 800ebc4:	9b06      	ldr	r3, [sp, #24]
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	4606      	mov	r6, r0
 800ebca:	f340 8081 	ble.w	800ecd0 <_dtoa_r+0x8c8>
 800ebce:	f04f 0800 	mov.w	r8, #0
 800ebd2:	6933      	ldr	r3, [r6, #16]
 800ebd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ebd8:	6918      	ldr	r0, [r3, #16]
 800ebda:	f000 fabb 	bl	800f154 <__hi0bits>
 800ebde:	f1c0 0020 	rsb	r0, r0, #32
 800ebe2:	9b05      	ldr	r3, [sp, #20]
 800ebe4:	4418      	add	r0, r3
 800ebe6:	f010 001f 	ands.w	r0, r0, #31
 800ebea:	f000 8092 	beq.w	800ed12 <_dtoa_r+0x90a>
 800ebee:	f1c0 0320 	rsb	r3, r0, #32
 800ebf2:	2b04      	cmp	r3, #4
 800ebf4:	f340 808a 	ble.w	800ed0c <_dtoa_r+0x904>
 800ebf8:	f1c0 001c 	rsb	r0, r0, #28
 800ebfc:	9b04      	ldr	r3, [sp, #16]
 800ebfe:	4403      	add	r3, r0
 800ec00:	9304      	str	r3, [sp, #16]
 800ec02:	9b05      	ldr	r3, [sp, #20]
 800ec04:	4403      	add	r3, r0
 800ec06:	4405      	add	r5, r0
 800ec08:	9305      	str	r3, [sp, #20]
 800ec0a:	9b04      	ldr	r3, [sp, #16]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	dd07      	ble.n	800ec20 <_dtoa_r+0x818>
 800ec10:	ee18 1a10 	vmov	r1, s16
 800ec14:	461a      	mov	r2, r3
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 fc06 	bl	800f428 <__lshift>
 800ec1c:	ee08 0a10 	vmov	s16, r0
 800ec20:	9b05      	ldr	r3, [sp, #20]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dd05      	ble.n	800ec32 <_dtoa_r+0x82a>
 800ec26:	4631      	mov	r1, r6
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f000 fbfc 	bl	800f428 <__lshift>
 800ec30:	4606      	mov	r6, r0
 800ec32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d06e      	beq.n	800ed16 <_dtoa_r+0x90e>
 800ec38:	ee18 0a10 	vmov	r0, s16
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	f000 fc63 	bl	800f508 <__mcmp>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	da67      	bge.n	800ed16 <_dtoa_r+0x90e>
 800ec46:	9b00      	ldr	r3, [sp, #0]
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	ee18 1a10 	vmov	r1, s16
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	220a      	movs	r2, #10
 800ec52:	2300      	movs	r3, #0
 800ec54:	4620      	mov	r0, r4
 800ec56:	f000 fa37 	bl	800f0c8 <__multadd>
 800ec5a:	9b08      	ldr	r3, [sp, #32]
 800ec5c:	ee08 0a10 	vmov	s16, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f000 81b1 	beq.w	800efc8 <_dtoa_r+0xbc0>
 800ec66:	2300      	movs	r3, #0
 800ec68:	4639      	mov	r1, r7
 800ec6a:	220a      	movs	r2, #10
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f000 fa2b 	bl	800f0c8 <__multadd>
 800ec72:	9b02      	ldr	r3, [sp, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	4607      	mov	r7, r0
 800ec78:	f300 808e 	bgt.w	800ed98 <_dtoa_r+0x990>
 800ec7c:	9b06      	ldr	r3, [sp, #24]
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	dc51      	bgt.n	800ed26 <_dtoa_r+0x91e>
 800ec82:	e089      	b.n	800ed98 <_dtoa_r+0x990>
 800ec84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec8a:	e74b      	b.n	800eb24 <_dtoa_r+0x71c>
 800ec8c:	9b03      	ldr	r3, [sp, #12]
 800ec8e:	1e5e      	subs	r6, r3, #1
 800ec90:	9b07      	ldr	r3, [sp, #28]
 800ec92:	42b3      	cmp	r3, r6
 800ec94:	bfbf      	itttt	lt
 800ec96:	9b07      	ldrlt	r3, [sp, #28]
 800ec98:	9607      	strlt	r6, [sp, #28]
 800ec9a:	1af2      	sublt	r2, r6, r3
 800ec9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ec9e:	bfb6      	itet	lt
 800eca0:	189b      	addlt	r3, r3, r2
 800eca2:	1b9e      	subge	r6, r3, r6
 800eca4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eca6:	9b03      	ldr	r3, [sp, #12]
 800eca8:	bfb8      	it	lt
 800ecaa:	2600      	movlt	r6, #0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bfb7      	itett	lt
 800ecb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ecb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ecb8:	1a9d      	sublt	r5, r3, r2
 800ecba:	2300      	movlt	r3, #0
 800ecbc:	e734      	b.n	800eb28 <_dtoa_r+0x720>
 800ecbe:	9e07      	ldr	r6, [sp, #28]
 800ecc0:	9d04      	ldr	r5, [sp, #16]
 800ecc2:	9f08      	ldr	r7, [sp, #32]
 800ecc4:	e73b      	b.n	800eb3e <_dtoa_r+0x736>
 800ecc6:	9a07      	ldr	r2, [sp, #28]
 800ecc8:	e767      	b.n	800eb9a <_dtoa_r+0x792>
 800ecca:	9b06      	ldr	r3, [sp, #24]
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	dc18      	bgt.n	800ed02 <_dtoa_r+0x8fa>
 800ecd0:	f1ba 0f00 	cmp.w	sl, #0
 800ecd4:	d115      	bne.n	800ed02 <_dtoa_r+0x8fa>
 800ecd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ecda:	b993      	cbnz	r3, 800ed02 <_dtoa_r+0x8fa>
 800ecdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ece0:	0d1b      	lsrs	r3, r3, #20
 800ece2:	051b      	lsls	r3, r3, #20
 800ece4:	b183      	cbz	r3, 800ed08 <_dtoa_r+0x900>
 800ece6:	9b04      	ldr	r3, [sp, #16]
 800ece8:	3301      	adds	r3, #1
 800ecea:	9304      	str	r3, [sp, #16]
 800ecec:	9b05      	ldr	r3, [sp, #20]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	9305      	str	r3, [sp, #20]
 800ecf2:	f04f 0801 	mov.w	r8, #1
 800ecf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f47f af6a 	bne.w	800ebd2 <_dtoa_r+0x7ca>
 800ecfe:	2001      	movs	r0, #1
 800ed00:	e76f      	b.n	800ebe2 <_dtoa_r+0x7da>
 800ed02:	f04f 0800 	mov.w	r8, #0
 800ed06:	e7f6      	b.n	800ecf6 <_dtoa_r+0x8ee>
 800ed08:	4698      	mov	r8, r3
 800ed0a:	e7f4      	b.n	800ecf6 <_dtoa_r+0x8ee>
 800ed0c:	f43f af7d 	beq.w	800ec0a <_dtoa_r+0x802>
 800ed10:	4618      	mov	r0, r3
 800ed12:	301c      	adds	r0, #28
 800ed14:	e772      	b.n	800ebfc <_dtoa_r+0x7f4>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	dc37      	bgt.n	800ed8c <_dtoa_r+0x984>
 800ed1c:	9b06      	ldr	r3, [sp, #24]
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	dd34      	ble.n	800ed8c <_dtoa_r+0x984>
 800ed22:	9b03      	ldr	r3, [sp, #12]
 800ed24:	9302      	str	r3, [sp, #8]
 800ed26:	9b02      	ldr	r3, [sp, #8]
 800ed28:	b96b      	cbnz	r3, 800ed46 <_dtoa_r+0x93e>
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	2205      	movs	r2, #5
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f000 f9ca 	bl	800f0c8 <__multadd>
 800ed34:	4601      	mov	r1, r0
 800ed36:	4606      	mov	r6, r0
 800ed38:	ee18 0a10 	vmov	r0, s16
 800ed3c:	f000 fbe4 	bl	800f508 <__mcmp>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	f73f adbb 	bgt.w	800e8bc <_dtoa_r+0x4b4>
 800ed46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed48:	9d01      	ldr	r5, [sp, #4]
 800ed4a:	43db      	mvns	r3, r3
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	f04f 0800 	mov.w	r8, #0
 800ed52:	4631      	mov	r1, r6
 800ed54:	4620      	mov	r0, r4
 800ed56:	f000 f995 	bl	800f084 <_Bfree>
 800ed5a:	2f00      	cmp	r7, #0
 800ed5c:	f43f aea4 	beq.w	800eaa8 <_dtoa_r+0x6a0>
 800ed60:	f1b8 0f00 	cmp.w	r8, #0
 800ed64:	d005      	beq.n	800ed72 <_dtoa_r+0x96a>
 800ed66:	45b8      	cmp	r8, r7
 800ed68:	d003      	beq.n	800ed72 <_dtoa_r+0x96a>
 800ed6a:	4641      	mov	r1, r8
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f000 f989 	bl	800f084 <_Bfree>
 800ed72:	4639      	mov	r1, r7
 800ed74:	4620      	mov	r0, r4
 800ed76:	f000 f985 	bl	800f084 <_Bfree>
 800ed7a:	e695      	b.n	800eaa8 <_dtoa_r+0x6a0>
 800ed7c:	2600      	movs	r6, #0
 800ed7e:	4637      	mov	r7, r6
 800ed80:	e7e1      	b.n	800ed46 <_dtoa_r+0x93e>
 800ed82:	9700      	str	r7, [sp, #0]
 800ed84:	4637      	mov	r7, r6
 800ed86:	e599      	b.n	800e8bc <_dtoa_r+0x4b4>
 800ed88:	40240000 	.word	0x40240000
 800ed8c:	9b08      	ldr	r3, [sp, #32]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 80ca 	beq.w	800ef28 <_dtoa_r+0xb20>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	9302      	str	r3, [sp, #8]
 800ed98:	2d00      	cmp	r5, #0
 800ed9a:	dd05      	ble.n	800eda8 <_dtoa_r+0x9a0>
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	462a      	mov	r2, r5
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fb41 	bl	800f428 <__lshift>
 800eda6:	4607      	mov	r7, r0
 800eda8:	f1b8 0f00 	cmp.w	r8, #0
 800edac:	d05b      	beq.n	800ee66 <_dtoa_r+0xa5e>
 800edae:	6879      	ldr	r1, [r7, #4]
 800edb0:	4620      	mov	r0, r4
 800edb2:	f000 f927 	bl	800f004 <_Balloc>
 800edb6:	4605      	mov	r5, r0
 800edb8:	b928      	cbnz	r0, 800edc6 <_dtoa_r+0x9be>
 800edba:	4b87      	ldr	r3, [pc, #540]	; (800efd8 <_dtoa_r+0xbd0>)
 800edbc:	4602      	mov	r2, r0
 800edbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800edc2:	f7ff bb3b 	b.w	800e43c <_dtoa_r+0x34>
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	3202      	adds	r2, #2
 800edca:	0092      	lsls	r2, r2, #2
 800edcc:	f107 010c 	add.w	r1, r7, #12
 800edd0:	300c      	adds	r0, #12
 800edd2:	f7fe fcfd 	bl	800d7d0 <memcpy>
 800edd6:	2201      	movs	r2, #1
 800edd8:	4629      	mov	r1, r5
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 fb24 	bl	800f428 <__lshift>
 800ede0:	9b01      	ldr	r3, [sp, #4]
 800ede2:	f103 0901 	add.w	r9, r3, #1
 800ede6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800edea:	4413      	add	r3, r2
 800edec:	9305      	str	r3, [sp, #20]
 800edee:	f00a 0301 	and.w	r3, sl, #1
 800edf2:	46b8      	mov	r8, r7
 800edf4:	9304      	str	r3, [sp, #16]
 800edf6:	4607      	mov	r7, r0
 800edf8:	4631      	mov	r1, r6
 800edfa:	ee18 0a10 	vmov	r0, s16
 800edfe:	f7ff fa77 	bl	800e2f0 <quorem>
 800ee02:	4641      	mov	r1, r8
 800ee04:	9002      	str	r0, [sp, #8]
 800ee06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee0a:	ee18 0a10 	vmov	r0, s16
 800ee0e:	f000 fb7b 	bl	800f508 <__mcmp>
 800ee12:	463a      	mov	r2, r7
 800ee14:	9003      	str	r0, [sp, #12]
 800ee16:	4631      	mov	r1, r6
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f000 fb91 	bl	800f540 <__mdiff>
 800ee1e:	68c2      	ldr	r2, [r0, #12]
 800ee20:	f109 3bff 	add.w	fp, r9, #4294967295
 800ee24:	4605      	mov	r5, r0
 800ee26:	bb02      	cbnz	r2, 800ee6a <_dtoa_r+0xa62>
 800ee28:	4601      	mov	r1, r0
 800ee2a:	ee18 0a10 	vmov	r0, s16
 800ee2e:	f000 fb6b 	bl	800f508 <__mcmp>
 800ee32:	4602      	mov	r2, r0
 800ee34:	4629      	mov	r1, r5
 800ee36:	4620      	mov	r0, r4
 800ee38:	9207      	str	r2, [sp, #28]
 800ee3a:	f000 f923 	bl	800f084 <_Bfree>
 800ee3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ee42:	ea43 0102 	orr.w	r1, r3, r2
 800ee46:	9b04      	ldr	r3, [sp, #16]
 800ee48:	430b      	orrs	r3, r1
 800ee4a:	464d      	mov	r5, r9
 800ee4c:	d10f      	bne.n	800ee6e <_dtoa_r+0xa66>
 800ee4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee52:	d02a      	beq.n	800eeaa <_dtoa_r+0xaa2>
 800ee54:	9b03      	ldr	r3, [sp, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	dd02      	ble.n	800ee60 <_dtoa_r+0xa58>
 800ee5a:	9b02      	ldr	r3, [sp, #8]
 800ee5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ee60:	f88b a000 	strb.w	sl, [fp]
 800ee64:	e775      	b.n	800ed52 <_dtoa_r+0x94a>
 800ee66:	4638      	mov	r0, r7
 800ee68:	e7ba      	b.n	800ede0 <_dtoa_r+0x9d8>
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	e7e2      	b.n	800ee34 <_dtoa_r+0xa2c>
 800ee6e:	9b03      	ldr	r3, [sp, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	db04      	blt.n	800ee7e <_dtoa_r+0xa76>
 800ee74:	9906      	ldr	r1, [sp, #24]
 800ee76:	430b      	orrs	r3, r1
 800ee78:	9904      	ldr	r1, [sp, #16]
 800ee7a:	430b      	orrs	r3, r1
 800ee7c:	d122      	bne.n	800eec4 <_dtoa_r+0xabc>
 800ee7e:	2a00      	cmp	r2, #0
 800ee80:	ddee      	ble.n	800ee60 <_dtoa_r+0xa58>
 800ee82:	ee18 1a10 	vmov	r1, s16
 800ee86:	2201      	movs	r2, #1
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f000 facd 	bl	800f428 <__lshift>
 800ee8e:	4631      	mov	r1, r6
 800ee90:	ee08 0a10 	vmov	s16, r0
 800ee94:	f000 fb38 	bl	800f508 <__mcmp>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	dc03      	bgt.n	800eea4 <_dtoa_r+0xa9c>
 800ee9c:	d1e0      	bne.n	800ee60 <_dtoa_r+0xa58>
 800ee9e:	f01a 0f01 	tst.w	sl, #1
 800eea2:	d0dd      	beq.n	800ee60 <_dtoa_r+0xa58>
 800eea4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eea8:	d1d7      	bne.n	800ee5a <_dtoa_r+0xa52>
 800eeaa:	2339      	movs	r3, #57	; 0x39
 800eeac:	f88b 3000 	strb.w	r3, [fp]
 800eeb0:	462b      	mov	r3, r5
 800eeb2:	461d      	mov	r5, r3
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eeba:	2a39      	cmp	r2, #57	; 0x39
 800eebc:	d071      	beq.n	800efa2 <_dtoa_r+0xb9a>
 800eebe:	3201      	adds	r2, #1
 800eec0:	701a      	strb	r2, [r3, #0]
 800eec2:	e746      	b.n	800ed52 <_dtoa_r+0x94a>
 800eec4:	2a00      	cmp	r2, #0
 800eec6:	dd07      	ble.n	800eed8 <_dtoa_r+0xad0>
 800eec8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eecc:	d0ed      	beq.n	800eeaa <_dtoa_r+0xaa2>
 800eece:	f10a 0301 	add.w	r3, sl, #1
 800eed2:	f88b 3000 	strb.w	r3, [fp]
 800eed6:	e73c      	b.n	800ed52 <_dtoa_r+0x94a>
 800eed8:	9b05      	ldr	r3, [sp, #20]
 800eeda:	f809 ac01 	strb.w	sl, [r9, #-1]
 800eede:	4599      	cmp	r9, r3
 800eee0:	d047      	beq.n	800ef72 <_dtoa_r+0xb6a>
 800eee2:	ee18 1a10 	vmov	r1, s16
 800eee6:	2300      	movs	r3, #0
 800eee8:	220a      	movs	r2, #10
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 f8ec 	bl	800f0c8 <__multadd>
 800eef0:	45b8      	cmp	r8, r7
 800eef2:	ee08 0a10 	vmov	s16, r0
 800eef6:	f04f 0300 	mov.w	r3, #0
 800eefa:	f04f 020a 	mov.w	r2, #10
 800eefe:	4641      	mov	r1, r8
 800ef00:	4620      	mov	r0, r4
 800ef02:	d106      	bne.n	800ef12 <_dtoa_r+0xb0a>
 800ef04:	f000 f8e0 	bl	800f0c8 <__multadd>
 800ef08:	4680      	mov	r8, r0
 800ef0a:	4607      	mov	r7, r0
 800ef0c:	f109 0901 	add.w	r9, r9, #1
 800ef10:	e772      	b.n	800edf8 <_dtoa_r+0x9f0>
 800ef12:	f000 f8d9 	bl	800f0c8 <__multadd>
 800ef16:	4639      	mov	r1, r7
 800ef18:	4680      	mov	r8, r0
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	220a      	movs	r2, #10
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f000 f8d2 	bl	800f0c8 <__multadd>
 800ef24:	4607      	mov	r7, r0
 800ef26:	e7f1      	b.n	800ef0c <_dtoa_r+0xb04>
 800ef28:	9b03      	ldr	r3, [sp, #12]
 800ef2a:	9302      	str	r3, [sp, #8]
 800ef2c:	9d01      	ldr	r5, [sp, #4]
 800ef2e:	ee18 0a10 	vmov	r0, s16
 800ef32:	4631      	mov	r1, r6
 800ef34:	f7ff f9dc 	bl	800e2f0 <quorem>
 800ef38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef3c:	9b01      	ldr	r3, [sp, #4]
 800ef3e:	f805 ab01 	strb.w	sl, [r5], #1
 800ef42:	1aea      	subs	r2, r5, r3
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	4293      	cmp	r3, r2
 800ef48:	dd09      	ble.n	800ef5e <_dtoa_r+0xb56>
 800ef4a:	ee18 1a10 	vmov	r1, s16
 800ef4e:	2300      	movs	r3, #0
 800ef50:	220a      	movs	r2, #10
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 f8b8 	bl	800f0c8 <__multadd>
 800ef58:	ee08 0a10 	vmov	s16, r0
 800ef5c:	e7e7      	b.n	800ef2e <_dtoa_r+0xb26>
 800ef5e:	9b02      	ldr	r3, [sp, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	bfc8      	it	gt
 800ef64:	461d      	movgt	r5, r3
 800ef66:	9b01      	ldr	r3, [sp, #4]
 800ef68:	bfd8      	it	le
 800ef6a:	2501      	movle	r5, #1
 800ef6c:	441d      	add	r5, r3
 800ef6e:	f04f 0800 	mov.w	r8, #0
 800ef72:	ee18 1a10 	vmov	r1, s16
 800ef76:	2201      	movs	r2, #1
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f000 fa55 	bl	800f428 <__lshift>
 800ef7e:	4631      	mov	r1, r6
 800ef80:	ee08 0a10 	vmov	s16, r0
 800ef84:	f000 fac0 	bl	800f508 <__mcmp>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	dc91      	bgt.n	800eeb0 <_dtoa_r+0xaa8>
 800ef8c:	d102      	bne.n	800ef94 <_dtoa_r+0xb8c>
 800ef8e:	f01a 0f01 	tst.w	sl, #1
 800ef92:	d18d      	bne.n	800eeb0 <_dtoa_r+0xaa8>
 800ef94:	462b      	mov	r3, r5
 800ef96:	461d      	mov	r5, r3
 800ef98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef9c:	2a30      	cmp	r2, #48	; 0x30
 800ef9e:	d0fa      	beq.n	800ef96 <_dtoa_r+0xb8e>
 800efa0:	e6d7      	b.n	800ed52 <_dtoa_r+0x94a>
 800efa2:	9a01      	ldr	r2, [sp, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d184      	bne.n	800eeb2 <_dtoa_r+0xaaa>
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	3301      	adds	r3, #1
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	2331      	movs	r3, #49	; 0x31
 800efb0:	7013      	strb	r3, [r2, #0]
 800efb2:	e6ce      	b.n	800ed52 <_dtoa_r+0x94a>
 800efb4:	4b09      	ldr	r3, [pc, #36]	; (800efdc <_dtoa_r+0xbd4>)
 800efb6:	f7ff ba95 	b.w	800e4e4 <_dtoa_r+0xdc>
 800efba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f47f aa6e 	bne.w	800e49e <_dtoa_r+0x96>
 800efc2:	4b07      	ldr	r3, [pc, #28]	; (800efe0 <_dtoa_r+0xbd8>)
 800efc4:	f7ff ba8e 	b.w	800e4e4 <_dtoa_r+0xdc>
 800efc8:	9b02      	ldr	r3, [sp, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	dcae      	bgt.n	800ef2c <_dtoa_r+0xb24>
 800efce:	9b06      	ldr	r3, [sp, #24]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	f73f aea8 	bgt.w	800ed26 <_dtoa_r+0x91e>
 800efd6:	e7a9      	b.n	800ef2c <_dtoa_r+0xb24>
 800efd8:	08010a4f 	.word	0x08010a4f
 800efdc:	080109ac 	.word	0x080109ac
 800efe0:	080109d0 	.word	0x080109d0

0800efe4 <_localeconv_r>:
 800efe4:	4800      	ldr	r0, [pc, #0]	; (800efe8 <_localeconv_r+0x4>)
 800efe6:	4770      	bx	lr
 800efe8:	20000478 	.word	0x20000478

0800efec <__malloc_lock>:
 800efec:	4801      	ldr	r0, [pc, #4]	; (800eff4 <__malloc_lock+0x8>)
 800efee:	f000 bd30 	b.w	800fa52 <__retarget_lock_acquire_recursive>
 800eff2:	bf00      	nop
 800eff4:	20001514 	.word	0x20001514

0800eff8 <__malloc_unlock>:
 800eff8:	4801      	ldr	r0, [pc, #4]	; (800f000 <__malloc_unlock+0x8>)
 800effa:	f000 bd2b 	b.w	800fa54 <__retarget_lock_release_recursive>
 800effe:	bf00      	nop
 800f000:	20001514 	.word	0x20001514

0800f004 <_Balloc>:
 800f004:	b570      	push	{r4, r5, r6, lr}
 800f006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f008:	4604      	mov	r4, r0
 800f00a:	460d      	mov	r5, r1
 800f00c:	b976      	cbnz	r6, 800f02c <_Balloc+0x28>
 800f00e:	2010      	movs	r0, #16
 800f010:	f7fe fbce 	bl	800d7b0 <malloc>
 800f014:	4602      	mov	r2, r0
 800f016:	6260      	str	r0, [r4, #36]	; 0x24
 800f018:	b920      	cbnz	r0, 800f024 <_Balloc+0x20>
 800f01a:	4b18      	ldr	r3, [pc, #96]	; (800f07c <_Balloc+0x78>)
 800f01c:	4818      	ldr	r0, [pc, #96]	; (800f080 <_Balloc+0x7c>)
 800f01e:	2166      	movs	r1, #102	; 0x66
 800f020:	f000 fce6 	bl	800f9f0 <__assert_func>
 800f024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f028:	6006      	str	r6, [r0, #0]
 800f02a:	60c6      	str	r6, [r0, #12]
 800f02c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f02e:	68f3      	ldr	r3, [r6, #12]
 800f030:	b183      	cbz	r3, 800f054 <_Balloc+0x50>
 800f032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f03a:	b9b8      	cbnz	r0, 800f06c <_Balloc+0x68>
 800f03c:	2101      	movs	r1, #1
 800f03e:	fa01 f605 	lsl.w	r6, r1, r5
 800f042:	1d72      	adds	r2, r6, #5
 800f044:	0092      	lsls	r2, r2, #2
 800f046:	4620      	mov	r0, r4
 800f048:	f000 fb60 	bl	800f70c <_calloc_r>
 800f04c:	b160      	cbz	r0, 800f068 <_Balloc+0x64>
 800f04e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f052:	e00e      	b.n	800f072 <_Balloc+0x6e>
 800f054:	2221      	movs	r2, #33	; 0x21
 800f056:	2104      	movs	r1, #4
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 fb57 	bl	800f70c <_calloc_r>
 800f05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f060:	60f0      	str	r0, [r6, #12]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1e4      	bne.n	800f032 <_Balloc+0x2e>
 800f068:	2000      	movs	r0, #0
 800f06a:	bd70      	pop	{r4, r5, r6, pc}
 800f06c:	6802      	ldr	r2, [r0, #0]
 800f06e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f072:	2300      	movs	r3, #0
 800f074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f078:	e7f7      	b.n	800f06a <_Balloc+0x66>
 800f07a:	bf00      	nop
 800f07c:	080109dd 	.word	0x080109dd
 800f080:	08010a60 	.word	0x08010a60

0800f084 <_Bfree>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f088:	4605      	mov	r5, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	b976      	cbnz	r6, 800f0ac <_Bfree+0x28>
 800f08e:	2010      	movs	r0, #16
 800f090:	f7fe fb8e 	bl	800d7b0 <malloc>
 800f094:	4602      	mov	r2, r0
 800f096:	6268      	str	r0, [r5, #36]	; 0x24
 800f098:	b920      	cbnz	r0, 800f0a4 <_Bfree+0x20>
 800f09a:	4b09      	ldr	r3, [pc, #36]	; (800f0c0 <_Bfree+0x3c>)
 800f09c:	4809      	ldr	r0, [pc, #36]	; (800f0c4 <_Bfree+0x40>)
 800f09e:	218a      	movs	r1, #138	; 0x8a
 800f0a0:	f000 fca6 	bl	800f9f0 <__assert_func>
 800f0a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0a8:	6006      	str	r6, [r0, #0]
 800f0aa:	60c6      	str	r6, [r0, #12]
 800f0ac:	b13c      	cbz	r4, 800f0be <_Bfree+0x3a>
 800f0ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0b0:	6862      	ldr	r2, [r4, #4]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0b8:	6021      	str	r1, [r4, #0]
 800f0ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0be:	bd70      	pop	{r4, r5, r6, pc}
 800f0c0:	080109dd 	.word	0x080109dd
 800f0c4:	08010a60 	.word	0x08010a60

0800f0c8 <__multadd>:
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	690d      	ldr	r5, [r1, #16]
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	461e      	mov	r6, r3
 800f0d4:	f101 0c14 	add.w	ip, r1, #20
 800f0d8:	2000      	movs	r0, #0
 800f0da:	f8dc 3000 	ldr.w	r3, [ip]
 800f0de:	b299      	uxth	r1, r3
 800f0e0:	fb02 6101 	mla	r1, r2, r1, r6
 800f0e4:	0c1e      	lsrs	r6, r3, #16
 800f0e6:	0c0b      	lsrs	r3, r1, #16
 800f0e8:	fb02 3306 	mla	r3, r2, r6, r3
 800f0ec:	b289      	uxth	r1, r1
 800f0ee:	3001      	adds	r0, #1
 800f0f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0f4:	4285      	cmp	r5, r0
 800f0f6:	f84c 1b04 	str.w	r1, [ip], #4
 800f0fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0fe:	dcec      	bgt.n	800f0da <__multadd+0x12>
 800f100:	b30e      	cbz	r6, 800f146 <__multadd+0x7e>
 800f102:	68a3      	ldr	r3, [r4, #8]
 800f104:	42ab      	cmp	r3, r5
 800f106:	dc19      	bgt.n	800f13c <__multadd+0x74>
 800f108:	6861      	ldr	r1, [r4, #4]
 800f10a:	4638      	mov	r0, r7
 800f10c:	3101      	adds	r1, #1
 800f10e:	f7ff ff79 	bl	800f004 <_Balloc>
 800f112:	4680      	mov	r8, r0
 800f114:	b928      	cbnz	r0, 800f122 <__multadd+0x5a>
 800f116:	4602      	mov	r2, r0
 800f118:	4b0c      	ldr	r3, [pc, #48]	; (800f14c <__multadd+0x84>)
 800f11a:	480d      	ldr	r0, [pc, #52]	; (800f150 <__multadd+0x88>)
 800f11c:	21b5      	movs	r1, #181	; 0xb5
 800f11e:	f000 fc67 	bl	800f9f0 <__assert_func>
 800f122:	6922      	ldr	r2, [r4, #16]
 800f124:	3202      	adds	r2, #2
 800f126:	f104 010c 	add.w	r1, r4, #12
 800f12a:	0092      	lsls	r2, r2, #2
 800f12c:	300c      	adds	r0, #12
 800f12e:	f7fe fb4f 	bl	800d7d0 <memcpy>
 800f132:	4621      	mov	r1, r4
 800f134:	4638      	mov	r0, r7
 800f136:	f7ff ffa5 	bl	800f084 <_Bfree>
 800f13a:	4644      	mov	r4, r8
 800f13c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f140:	3501      	adds	r5, #1
 800f142:	615e      	str	r6, [r3, #20]
 800f144:	6125      	str	r5, [r4, #16]
 800f146:	4620      	mov	r0, r4
 800f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14c:	08010a4f 	.word	0x08010a4f
 800f150:	08010a60 	.word	0x08010a60

0800f154 <__hi0bits>:
 800f154:	0c03      	lsrs	r3, r0, #16
 800f156:	041b      	lsls	r3, r3, #16
 800f158:	b9d3      	cbnz	r3, 800f190 <__hi0bits+0x3c>
 800f15a:	0400      	lsls	r0, r0, #16
 800f15c:	2310      	movs	r3, #16
 800f15e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f162:	bf04      	itt	eq
 800f164:	0200      	lsleq	r0, r0, #8
 800f166:	3308      	addeq	r3, #8
 800f168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f16c:	bf04      	itt	eq
 800f16e:	0100      	lsleq	r0, r0, #4
 800f170:	3304      	addeq	r3, #4
 800f172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f176:	bf04      	itt	eq
 800f178:	0080      	lsleq	r0, r0, #2
 800f17a:	3302      	addeq	r3, #2
 800f17c:	2800      	cmp	r0, #0
 800f17e:	db05      	blt.n	800f18c <__hi0bits+0x38>
 800f180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f184:	f103 0301 	add.w	r3, r3, #1
 800f188:	bf08      	it	eq
 800f18a:	2320      	moveq	r3, #32
 800f18c:	4618      	mov	r0, r3
 800f18e:	4770      	bx	lr
 800f190:	2300      	movs	r3, #0
 800f192:	e7e4      	b.n	800f15e <__hi0bits+0xa>

0800f194 <__lo0bits>:
 800f194:	6803      	ldr	r3, [r0, #0]
 800f196:	f013 0207 	ands.w	r2, r3, #7
 800f19a:	4601      	mov	r1, r0
 800f19c:	d00b      	beq.n	800f1b6 <__lo0bits+0x22>
 800f19e:	07da      	lsls	r2, r3, #31
 800f1a0:	d423      	bmi.n	800f1ea <__lo0bits+0x56>
 800f1a2:	0798      	lsls	r0, r3, #30
 800f1a4:	bf49      	itett	mi
 800f1a6:	085b      	lsrmi	r3, r3, #1
 800f1a8:	089b      	lsrpl	r3, r3, #2
 800f1aa:	2001      	movmi	r0, #1
 800f1ac:	600b      	strmi	r3, [r1, #0]
 800f1ae:	bf5c      	itt	pl
 800f1b0:	600b      	strpl	r3, [r1, #0]
 800f1b2:	2002      	movpl	r0, #2
 800f1b4:	4770      	bx	lr
 800f1b6:	b298      	uxth	r0, r3
 800f1b8:	b9a8      	cbnz	r0, 800f1e6 <__lo0bits+0x52>
 800f1ba:	0c1b      	lsrs	r3, r3, #16
 800f1bc:	2010      	movs	r0, #16
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	b90a      	cbnz	r2, 800f1c6 <__lo0bits+0x32>
 800f1c2:	3008      	adds	r0, #8
 800f1c4:	0a1b      	lsrs	r3, r3, #8
 800f1c6:	071a      	lsls	r2, r3, #28
 800f1c8:	bf04      	itt	eq
 800f1ca:	091b      	lsreq	r3, r3, #4
 800f1cc:	3004      	addeq	r0, #4
 800f1ce:	079a      	lsls	r2, r3, #30
 800f1d0:	bf04      	itt	eq
 800f1d2:	089b      	lsreq	r3, r3, #2
 800f1d4:	3002      	addeq	r0, #2
 800f1d6:	07da      	lsls	r2, r3, #31
 800f1d8:	d403      	bmi.n	800f1e2 <__lo0bits+0x4e>
 800f1da:	085b      	lsrs	r3, r3, #1
 800f1dc:	f100 0001 	add.w	r0, r0, #1
 800f1e0:	d005      	beq.n	800f1ee <__lo0bits+0x5a>
 800f1e2:	600b      	str	r3, [r1, #0]
 800f1e4:	4770      	bx	lr
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	e7e9      	b.n	800f1be <__lo0bits+0x2a>
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	4770      	bx	lr
 800f1ee:	2020      	movs	r0, #32
 800f1f0:	4770      	bx	lr
	...

0800f1f4 <__i2b>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	2101      	movs	r1, #1
 800f1fa:	f7ff ff03 	bl	800f004 <_Balloc>
 800f1fe:	4602      	mov	r2, r0
 800f200:	b928      	cbnz	r0, 800f20e <__i2b+0x1a>
 800f202:	4b05      	ldr	r3, [pc, #20]	; (800f218 <__i2b+0x24>)
 800f204:	4805      	ldr	r0, [pc, #20]	; (800f21c <__i2b+0x28>)
 800f206:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f20a:	f000 fbf1 	bl	800f9f0 <__assert_func>
 800f20e:	2301      	movs	r3, #1
 800f210:	6144      	str	r4, [r0, #20]
 800f212:	6103      	str	r3, [r0, #16]
 800f214:	bd10      	pop	{r4, pc}
 800f216:	bf00      	nop
 800f218:	08010a4f 	.word	0x08010a4f
 800f21c:	08010a60 	.word	0x08010a60

0800f220 <__multiply>:
 800f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f224:	4691      	mov	r9, r2
 800f226:	690a      	ldr	r2, [r1, #16]
 800f228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	bfb8      	it	lt
 800f230:	460b      	movlt	r3, r1
 800f232:	460c      	mov	r4, r1
 800f234:	bfbc      	itt	lt
 800f236:	464c      	movlt	r4, r9
 800f238:	4699      	movlt	r9, r3
 800f23a:	6927      	ldr	r7, [r4, #16]
 800f23c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f240:	68a3      	ldr	r3, [r4, #8]
 800f242:	6861      	ldr	r1, [r4, #4]
 800f244:	eb07 060a 	add.w	r6, r7, sl
 800f248:	42b3      	cmp	r3, r6
 800f24a:	b085      	sub	sp, #20
 800f24c:	bfb8      	it	lt
 800f24e:	3101      	addlt	r1, #1
 800f250:	f7ff fed8 	bl	800f004 <_Balloc>
 800f254:	b930      	cbnz	r0, 800f264 <__multiply+0x44>
 800f256:	4602      	mov	r2, r0
 800f258:	4b44      	ldr	r3, [pc, #272]	; (800f36c <__multiply+0x14c>)
 800f25a:	4845      	ldr	r0, [pc, #276]	; (800f370 <__multiply+0x150>)
 800f25c:	f240 115d 	movw	r1, #349	; 0x15d
 800f260:	f000 fbc6 	bl	800f9f0 <__assert_func>
 800f264:	f100 0514 	add.w	r5, r0, #20
 800f268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f26c:	462b      	mov	r3, r5
 800f26e:	2200      	movs	r2, #0
 800f270:	4543      	cmp	r3, r8
 800f272:	d321      	bcc.n	800f2b8 <__multiply+0x98>
 800f274:	f104 0314 	add.w	r3, r4, #20
 800f278:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f27c:	f109 0314 	add.w	r3, r9, #20
 800f280:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f284:	9202      	str	r2, [sp, #8]
 800f286:	1b3a      	subs	r2, r7, r4
 800f288:	3a15      	subs	r2, #21
 800f28a:	f022 0203 	bic.w	r2, r2, #3
 800f28e:	3204      	adds	r2, #4
 800f290:	f104 0115 	add.w	r1, r4, #21
 800f294:	428f      	cmp	r7, r1
 800f296:	bf38      	it	cc
 800f298:	2204      	movcc	r2, #4
 800f29a:	9201      	str	r2, [sp, #4]
 800f29c:	9a02      	ldr	r2, [sp, #8]
 800f29e:	9303      	str	r3, [sp, #12]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d80c      	bhi.n	800f2be <__multiply+0x9e>
 800f2a4:	2e00      	cmp	r6, #0
 800f2a6:	dd03      	ble.n	800f2b0 <__multiply+0x90>
 800f2a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d05a      	beq.n	800f366 <__multiply+0x146>
 800f2b0:	6106      	str	r6, [r0, #16]
 800f2b2:	b005      	add	sp, #20
 800f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b8:	f843 2b04 	str.w	r2, [r3], #4
 800f2bc:	e7d8      	b.n	800f270 <__multiply+0x50>
 800f2be:	f8b3 a000 	ldrh.w	sl, [r3]
 800f2c2:	f1ba 0f00 	cmp.w	sl, #0
 800f2c6:	d024      	beq.n	800f312 <__multiply+0xf2>
 800f2c8:	f104 0e14 	add.w	lr, r4, #20
 800f2cc:	46a9      	mov	r9, r5
 800f2ce:	f04f 0c00 	mov.w	ip, #0
 800f2d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f2d6:	f8d9 1000 	ldr.w	r1, [r9]
 800f2da:	fa1f fb82 	uxth.w	fp, r2
 800f2de:	b289      	uxth	r1, r1
 800f2e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f2e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f2ec:	4461      	add	r1, ip
 800f2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f2f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f2fa:	b289      	uxth	r1, r1
 800f2fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f300:	4577      	cmp	r7, lr
 800f302:	f849 1b04 	str.w	r1, [r9], #4
 800f306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f30a:	d8e2      	bhi.n	800f2d2 <__multiply+0xb2>
 800f30c:	9a01      	ldr	r2, [sp, #4]
 800f30e:	f845 c002 	str.w	ip, [r5, r2]
 800f312:	9a03      	ldr	r2, [sp, #12]
 800f314:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f318:	3304      	adds	r3, #4
 800f31a:	f1b9 0f00 	cmp.w	r9, #0
 800f31e:	d020      	beq.n	800f362 <__multiply+0x142>
 800f320:	6829      	ldr	r1, [r5, #0]
 800f322:	f104 0c14 	add.w	ip, r4, #20
 800f326:	46ae      	mov	lr, r5
 800f328:	f04f 0a00 	mov.w	sl, #0
 800f32c:	f8bc b000 	ldrh.w	fp, [ip]
 800f330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f334:	fb09 220b 	mla	r2, r9, fp, r2
 800f338:	4492      	add	sl, r2
 800f33a:	b289      	uxth	r1, r1
 800f33c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f340:	f84e 1b04 	str.w	r1, [lr], #4
 800f344:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f348:	f8be 1000 	ldrh.w	r1, [lr]
 800f34c:	0c12      	lsrs	r2, r2, #16
 800f34e:	fb09 1102 	mla	r1, r9, r2, r1
 800f352:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f356:	4567      	cmp	r7, ip
 800f358:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f35c:	d8e6      	bhi.n	800f32c <__multiply+0x10c>
 800f35e:	9a01      	ldr	r2, [sp, #4]
 800f360:	50a9      	str	r1, [r5, r2]
 800f362:	3504      	adds	r5, #4
 800f364:	e79a      	b.n	800f29c <__multiply+0x7c>
 800f366:	3e01      	subs	r6, #1
 800f368:	e79c      	b.n	800f2a4 <__multiply+0x84>
 800f36a:	bf00      	nop
 800f36c:	08010a4f 	.word	0x08010a4f
 800f370:	08010a60 	.word	0x08010a60

0800f374 <__pow5mult>:
 800f374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f378:	4615      	mov	r5, r2
 800f37a:	f012 0203 	ands.w	r2, r2, #3
 800f37e:	4606      	mov	r6, r0
 800f380:	460f      	mov	r7, r1
 800f382:	d007      	beq.n	800f394 <__pow5mult+0x20>
 800f384:	4c25      	ldr	r4, [pc, #148]	; (800f41c <__pow5mult+0xa8>)
 800f386:	3a01      	subs	r2, #1
 800f388:	2300      	movs	r3, #0
 800f38a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f38e:	f7ff fe9b 	bl	800f0c8 <__multadd>
 800f392:	4607      	mov	r7, r0
 800f394:	10ad      	asrs	r5, r5, #2
 800f396:	d03d      	beq.n	800f414 <__pow5mult+0xa0>
 800f398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f39a:	b97c      	cbnz	r4, 800f3bc <__pow5mult+0x48>
 800f39c:	2010      	movs	r0, #16
 800f39e:	f7fe fa07 	bl	800d7b0 <malloc>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	6270      	str	r0, [r6, #36]	; 0x24
 800f3a6:	b928      	cbnz	r0, 800f3b4 <__pow5mult+0x40>
 800f3a8:	4b1d      	ldr	r3, [pc, #116]	; (800f420 <__pow5mult+0xac>)
 800f3aa:	481e      	ldr	r0, [pc, #120]	; (800f424 <__pow5mult+0xb0>)
 800f3ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f3b0:	f000 fb1e 	bl	800f9f0 <__assert_func>
 800f3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3b8:	6004      	str	r4, [r0, #0]
 800f3ba:	60c4      	str	r4, [r0, #12]
 800f3bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3c4:	b94c      	cbnz	r4, 800f3da <__pow5mult+0x66>
 800f3c6:	f240 2171 	movw	r1, #625	; 0x271
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7ff ff12 	bl	800f1f4 <__i2b>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	6003      	str	r3, [r0, #0]
 800f3da:	f04f 0900 	mov.w	r9, #0
 800f3de:	07eb      	lsls	r3, r5, #31
 800f3e0:	d50a      	bpl.n	800f3f8 <__pow5mult+0x84>
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	4622      	mov	r2, r4
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f7ff ff1a 	bl	800f220 <__multiply>
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	4680      	mov	r8, r0
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7ff fe47 	bl	800f084 <_Bfree>
 800f3f6:	4647      	mov	r7, r8
 800f3f8:	106d      	asrs	r5, r5, #1
 800f3fa:	d00b      	beq.n	800f414 <__pow5mult+0xa0>
 800f3fc:	6820      	ldr	r0, [r4, #0]
 800f3fe:	b938      	cbnz	r0, 800f410 <__pow5mult+0x9c>
 800f400:	4622      	mov	r2, r4
 800f402:	4621      	mov	r1, r4
 800f404:	4630      	mov	r0, r6
 800f406:	f7ff ff0b 	bl	800f220 <__multiply>
 800f40a:	6020      	str	r0, [r4, #0]
 800f40c:	f8c0 9000 	str.w	r9, [r0]
 800f410:	4604      	mov	r4, r0
 800f412:	e7e4      	b.n	800f3de <__pow5mult+0x6a>
 800f414:	4638      	mov	r0, r7
 800f416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f41a:	bf00      	nop
 800f41c:	08010bb0 	.word	0x08010bb0
 800f420:	080109dd 	.word	0x080109dd
 800f424:	08010a60 	.word	0x08010a60

0800f428 <__lshift>:
 800f428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	460c      	mov	r4, r1
 800f42e:	6849      	ldr	r1, [r1, #4]
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f436:	68a3      	ldr	r3, [r4, #8]
 800f438:	4607      	mov	r7, r0
 800f43a:	4691      	mov	r9, r2
 800f43c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f440:	f108 0601 	add.w	r6, r8, #1
 800f444:	42b3      	cmp	r3, r6
 800f446:	db0b      	blt.n	800f460 <__lshift+0x38>
 800f448:	4638      	mov	r0, r7
 800f44a:	f7ff fddb 	bl	800f004 <_Balloc>
 800f44e:	4605      	mov	r5, r0
 800f450:	b948      	cbnz	r0, 800f466 <__lshift+0x3e>
 800f452:	4602      	mov	r2, r0
 800f454:	4b2a      	ldr	r3, [pc, #168]	; (800f500 <__lshift+0xd8>)
 800f456:	482b      	ldr	r0, [pc, #172]	; (800f504 <__lshift+0xdc>)
 800f458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f45c:	f000 fac8 	bl	800f9f0 <__assert_func>
 800f460:	3101      	adds	r1, #1
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	e7ee      	b.n	800f444 <__lshift+0x1c>
 800f466:	2300      	movs	r3, #0
 800f468:	f100 0114 	add.w	r1, r0, #20
 800f46c:	f100 0210 	add.w	r2, r0, #16
 800f470:	4618      	mov	r0, r3
 800f472:	4553      	cmp	r3, sl
 800f474:	db37      	blt.n	800f4e6 <__lshift+0xbe>
 800f476:	6920      	ldr	r0, [r4, #16]
 800f478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f47c:	f104 0314 	add.w	r3, r4, #20
 800f480:	f019 091f 	ands.w	r9, r9, #31
 800f484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f48c:	d02f      	beq.n	800f4ee <__lshift+0xc6>
 800f48e:	f1c9 0e20 	rsb	lr, r9, #32
 800f492:	468a      	mov	sl, r1
 800f494:	f04f 0c00 	mov.w	ip, #0
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	fa02 f209 	lsl.w	r2, r2, r9
 800f49e:	ea42 020c 	orr.w	r2, r2, ip
 800f4a2:	f84a 2b04 	str.w	r2, [sl], #4
 800f4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4aa:	4298      	cmp	r0, r3
 800f4ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f4b0:	d8f2      	bhi.n	800f498 <__lshift+0x70>
 800f4b2:	1b03      	subs	r3, r0, r4
 800f4b4:	3b15      	subs	r3, #21
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	f104 0215 	add.w	r2, r4, #21
 800f4c0:	4290      	cmp	r0, r2
 800f4c2:	bf38      	it	cc
 800f4c4:	2304      	movcc	r3, #4
 800f4c6:	f841 c003 	str.w	ip, [r1, r3]
 800f4ca:	f1bc 0f00 	cmp.w	ip, #0
 800f4ce:	d001      	beq.n	800f4d4 <__lshift+0xac>
 800f4d0:	f108 0602 	add.w	r6, r8, #2
 800f4d4:	3e01      	subs	r6, #1
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	612e      	str	r6, [r5, #16]
 800f4da:	4621      	mov	r1, r4
 800f4dc:	f7ff fdd2 	bl	800f084 <_Bfree>
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	e7c1      	b.n	800f472 <__lshift+0x4a>
 800f4ee:	3904      	subs	r1, #4
 800f4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4f8:	4298      	cmp	r0, r3
 800f4fa:	d8f9      	bhi.n	800f4f0 <__lshift+0xc8>
 800f4fc:	e7ea      	b.n	800f4d4 <__lshift+0xac>
 800f4fe:	bf00      	nop
 800f500:	08010a4f 	.word	0x08010a4f
 800f504:	08010a60 	.word	0x08010a60

0800f508 <__mcmp>:
 800f508:	b530      	push	{r4, r5, lr}
 800f50a:	6902      	ldr	r2, [r0, #16]
 800f50c:	690c      	ldr	r4, [r1, #16]
 800f50e:	1b12      	subs	r2, r2, r4
 800f510:	d10e      	bne.n	800f530 <__mcmp+0x28>
 800f512:	f100 0314 	add.w	r3, r0, #20
 800f516:	3114      	adds	r1, #20
 800f518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f528:	42a5      	cmp	r5, r4
 800f52a:	d003      	beq.n	800f534 <__mcmp+0x2c>
 800f52c:	d305      	bcc.n	800f53a <__mcmp+0x32>
 800f52e:	2201      	movs	r2, #1
 800f530:	4610      	mov	r0, r2
 800f532:	bd30      	pop	{r4, r5, pc}
 800f534:	4283      	cmp	r3, r0
 800f536:	d3f3      	bcc.n	800f520 <__mcmp+0x18>
 800f538:	e7fa      	b.n	800f530 <__mcmp+0x28>
 800f53a:	f04f 32ff 	mov.w	r2, #4294967295
 800f53e:	e7f7      	b.n	800f530 <__mcmp+0x28>

0800f540 <__mdiff>:
 800f540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	460c      	mov	r4, r1
 800f546:	4606      	mov	r6, r0
 800f548:	4611      	mov	r1, r2
 800f54a:	4620      	mov	r0, r4
 800f54c:	4690      	mov	r8, r2
 800f54e:	f7ff ffdb 	bl	800f508 <__mcmp>
 800f552:	1e05      	subs	r5, r0, #0
 800f554:	d110      	bne.n	800f578 <__mdiff+0x38>
 800f556:	4629      	mov	r1, r5
 800f558:	4630      	mov	r0, r6
 800f55a:	f7ff fd53 	bl	800f004 <_Balloc>
 800f55e:	b930      	cbnz	r0, 800f56e <__mdiff+0x2e>
 800f560:	4b3a      	ldr	r3, [pc, #232]	; (800f64c <__mdiff+0x10c>)
 800f562:	4602      	mov	r2, r0
 800f564:	f240 2132 	movw	r1, #562	; 0x232
 800f568:	4839      	ldr	r0, [pc, #228]	; (800f650 <__mdiff+0x110>)
 800f56a:	f000 fa41 	bl	800f9f0 <__assert_func>
 800f56e:	2301      	movs	r3, #1
 800f570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f578:	bfa4      	itt	ge
 800f57a:	4643      	movge	r3, r8
 800f57c:	46a0      	movge	r8, r4
 800f57e:	4630      	mov	r0, r6
 800f580:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f584:	bfa6      	itte	ge
 800f586:	461c      	movge	r4, r3
 800f588:	2500      	movge	r5, #0
 800f58a:	2501      	movlt	r5, #1
 800f58c:	f7ff fd3a 	bl	800f004 <_Balloc>
 800f590:	b920      	cbnz	r0, 800f59c <__mdiff+0x5c>
 800f592:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <__mdiff+0x10c>)
 800f594:	4602      	mov	r2, r0
 800f596:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f59a:	e7e5      	b.n	800f568 <__mdiff+0x28>
 800f59c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5a0:	6926      	ldr	r6, [r4, #16]
 800f5a2:	60c5      	str	r5, [r0, #12]
 800f5a4:	f104 0914 	add.w	r9, r4, #20
 800f5a8:	f108 0514 	add.w	r5, r8, #20
 800f5ac:	f100 0e14 	add.w	lr, r0, #20
 800f5b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f5b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f5b8:	f108 0210 	add.w	r2, r8, #16
 800f5bc:	46f2      	mov	sl, lr
 800f5be:	2100      	movs	r1, #0
 800f5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f5c8:	fa1f f883 	uxth.w	r8, r3
 800f5cc:	fa11 f18b 	uxtah	r1, r1, fp
 800f5d0:	0c1b      	lsrs	r3, r3, #16
 800f5d2:	eba1 0808 	sub.w	r8, r1, r8
 800f5d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f5da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f5de:	fa1f f888 	uxth.w	r8, r8
 800f5e2:	1419      	asrs	r1, r3, #16
 800f5e4:	454e      	cmp	r6, r9
 800f5e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f5ea:	f84a 3b04 	str.w	r3, [sl], #4
 800f5ee:	d8e7      	bhi.n	800f5c0 <__mdiff+0x80>
 800f5f0:	1b33      	subs	r3, r6, r4
 800f5f2:	3b15      	subs	r3, #21
 800f5f4:	f023 0303 	bic.w	r3, r3, #3
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	3415      	adds	r4, #21
 800f5fc:	42a6      	cmp	r6, r4
 800f5fe:	bf38      	it	cc
 800f600:	2304      	movcc	r3, #4
 800f602:	441d      	add	r5, r3
 800f604:	4473      	add	r3, lr
 800f606:	469e      	mov	lr, r3
 800f608:	462e      	mov	r6, r5
 800f60a:	4566      	cmp	r6, ip
 800f60c:	d30e      	bcc.n	800f62c <__mdiff+0xec>
 800f60e:	f10c 0203 	add.w	r2, ip, #3
 800f612:	1b52      	subs	r2, r2, r5
 800f614:	f022 0203 	bic.w	r2, r2, #3
 800f618:	3d03      	subs	r5, #3
 800f61a:	45ac      	cmp	ip, r5
 800f61c:	bf38      	it	cc
 800f61e:	2200      	movcc	r2, #0
 800f620:	441a      	add	r2, r3
 800f622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f626:	b17b      	cbz	r3, 800f648 <__mdiff+0x108>
 800f628:	6107      	str	r7, [r0, #16]
 800f62a:	e7a3      	b.n	800f574 <__mdiff+0x34>
 800f62c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f630:	fa11 f288 	uxtah	r2, r1, r8
 800f634:	1414      	asrs	r4, r2, #16
 800f636:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f63a:	b292      	uxth	r2, r2
 800f63c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f640:	f84e 2b04 	str.w	r2, [lr], #4
 800f644:	1421      	asrs	r1, r4, #16
 800f646:	e7e0      	b.n	800f60a <__mdiff+0xca>
 800f648:	3f01      	subs	r7, #1
 800f64a:	e7ea      	b.n	800f622 <__mdiff+0xe2>
 800f64c:	08010a4f 	.word	0x08010a4f
 800f650:	08010a60 	.word	0x08010a60

0800f654 <__d2b>:
 800f654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f658:	4689      	mov	r9, r1
 800f65a:	2101      	movs	r1, #1
 800f65c:	ec57 6b10 	vmov	r6, r7, d0
 800f660:	4690      	mov	r8, r2
 800f662:	f7ff fccf 	bl	800f004 <_Balloc>
 800f666:	4604      	mov	r4, r0
 800f668:	b930      	cbnz	r0, 800f678 <__d2b+0x24>
 800f66a:	4602      	mov	r2, r0
 800f66c:	4b25      	ldr	r3, [pc, #148]	; (800f704 <__d2b+0xb0>)
 800f66e:	4826      	ldr	r0, [pc, #152]	; (800f708 <__d2b+0xb4>)
 800f670:	f240 310a 	movw	r1, #778	; 0x30a
 800f674:	f000 f9bc 	bl	800f9f0 <__assert_func>
 800f678:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f67c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f680:	bb35      	cbnz	r5, 800f6d0 <__d2b+0x7c>
 800f682:	2e00      	cmp	r6, #0
 800f684:	9301      	str	r3, [sp, #4]
 800f686:	d028      	beq.n	800f6da <__d2b+0x86>
 800f688:	4668      	mov	r0, sp
 800f68a:	9600      	str	r6, [sp, #0]
 800f68c:	f7ff fd82 	bl	800f194 <__lo0bits>
 800f690:	9900      	ldr	r1, [sp, #0]
 800f692:	b300      	cbz	r0, 800f6d6 <__d2b+0x82>
 800f694:	9a01      	ldr	r2, [sp, #4]
 800f696:	f1c0 0320 	rsb	r3, r0, #32
 800f69a:	fa02 f303 	lsl.w	r3, r2, r3
 800f69e:	430b      	orrs	r3, r1
 800f6a0:	40c2      	lsrs	r2, r0
 800f6a2:	6163      	str	r3, [r4, #20]
 800f6a4:	9201      	str	r2, [sp, #4]
 800f6a6:	9b01      	ldr	r3, [sp, #4]
 800f6a8:	61a3      	str	r3, [r4, #24]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	bf14      	ite	ne
 800f6ae:	2202      	movne	r2, #2
 800f6b0:	2201      	moveq	r2, #1
 800f6b2:	6122      	str	r2, [r4, #16]
 800f6b4:	b1d5      	cbz	r5, 800f6ec <__d2b+0x98>
 800f6b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f6ba:	4405      	add	r5, r0
 800f6bc:	f8c9 5000 	str.w	r5, [r9]
 800f6c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f6c4:	f8c8 0000 	str.w	r0, [r8]
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	b003      	add	sp, #12
 800f6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6d4:	e7d5      	b.n	800f682 <__d2b+0x2e>
 800f6d6:	6161      	str	r1, [r4, #20]
 800f6d8:	e7e5      	b.n	800f6a6 <__d2b+0x52>
 800f6da:	a801      	add	r0, sp, #4
 800f6dc:	f7ff fd5a 	bl	800f194 <__lo0bits>
 800f6e0:	9b01      	ldr	r3, [sp, #4]
 800f6e2:	6163      	str	r3, [r4, #20]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	6122      	str	r2, [r4, #16]
 800f6e8:	3020      	adds	r0, #32
 800f6ea:	e7e3      	b.n	800f6b4 <__d2b+0x60>
 800f6ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f6f4:	f8c9 0000 	str.w	r0, [r9]
 800f6f8:	6918      	ldr	r0, [r3, #16]
 800f6fa:	f7ff fd2b 	bl	800f154 <__hi0bits>
 800f6fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f702:	e7df      	b.n	800f6c4 <__d2b+0x70>
 800f704:	08010a4f 	.word	0x08010a4f
 800f708:	08010a60 	.word	0x08010a60

0800f70c <_calloc_r>:
 800f70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f70e:	fba1 2402 	umull	r2, r4, r1, r2
 800f712:	b94c      	cbnz	r4, 800f728 <_calloc_r+0x1c>
 800f714:	4611      	mov	r1, r2
 800f716:	9201      	str	r2, [sp, #4]
 800f718:	f7fe f8dc 	bl	800d8d4 <_malloc_r>
 800f71c:	9a01      	ldr	r2, [sp, #4]
 800f71e:	4605      	mov	r5, r0
 800f720:	b930      	cbnz	r0, 800f730 <_calloc_r+0x24>
 800f722:	4628      	mov	r0, r5
 800f724:	b003      	add	sp, #12
 800f726:	bd30      	pop	{r4, r5, pc}
 800f728:	220c      	movs	r2, #12
 800f72a:	6002      	str	r2, [r0, #0]
 800f72c:	2500      	movs	r5, #0
 800f72e:	e7f8      	b.n	800f722 <_calloc_r+0x16>
 800f730:	4621      	mov	r1, r4
 800f732:	f7fe f85b 	bl	800d7ec <memset>
 800f736:	e7f4      	b.n	800f722 <_calloc_r+0x16>

0800f738 <__ssputs_r>:
 800f738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f73c:	688e      	ldr	r6, [r1, #8]
 800f73e:	429e      	cmp	r6, r3
 800f740:	4682      	mov	sl, r0
 800f742:	460c      	mov	r4, r1
 800f744:	4690      	mov	r8, r2
 800f746:	461f      	mov	r7, r3
 800f748:	d838      	bhi.n	800f7bc <__ssputs_r+0x84>
 800f74a:	898a      	ldrh	r2, [r1, #12]
 800f74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f750:	d032      	beq.n	800f7b8 <__ssputs_r+0x80>
 800f752:	6825      	ldr	r5, [r4, #0]
 800f754:	6909      	ldr	r1, [r1, #16]
 800f756:	eba5 0901 	sub.w	r9, r5, r1
 800f75a:	6965      	ldr	r5, [r4, #20]
 800f75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f764:	3301      	adds	r3, #1
 800f766:	444b      	add	r3, r9
 800f768:	106d      	asrs	r5, r5, #1
 800f76a:	429d      	cmp	r5, r3
 800f76c:	bf38      	it	cc
 800f76e:	461d      	movcc	r5, r3
 800f770:	0553      	lsls	r3, r2, #21
 800f772:	d531      	bpl.n	800f7d8 <__ssputs_r+0xa0>
 800f774:	4629      	mov	r1, r5
 800f776:	f7fe f8ad 	bl	800d8d4 <_malloc_r>
 800f77a:	4606      	mov	r6, r0
 800f77c:	b950      	cbnz	r0, 800f794 <__ssputs_r+0x5c>
 800f77e:	230c      	movs	r3, #12
 800f780:	f8ca 3000 	str.w	r3, [sl]
 800f784:	89a3      	ldrh	r3, [r4, #12]
 800f786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f78a:	81a3      	strh	r3, [r4, #12]
 800f78c:	f04f 30ff 	mov.w	r0, #4294967295
 800f790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f794:	6921      	ldr	r1, [r4, #16]
 800f796:	464a      	mov	r2, r9
 800f798:	f7fe f81a 	bl	800d7d0 <memcpy>
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	6126      	str	r6, [r4, #16]
 800f7aa:	6165      	str	r5, [r4, #20]
 800f7ac:	444e      	add	r6, r9
 800f7ae:	eba5 0509 	sub.w	r5, r5, r9
 800f7b2:	6026      	str	r6, [r4, #0]
 800f7b4:	60a5      	str	r5, [r4, #8]
 800f7b6:	463e      	mov	r6, r7
 800f7b8:	42be      	cmp	r6, r7
 800f7ba:	d900      	bls.n	800f7be <__ssputs_r+0x86>
 800f7bc:	463e      	mov	r6, r7
 800f7be:	6820      	ldr	r0, [r4, #0]
 800f7c0:	4632      	mov	r2, r6
 800f7c2:	4641      	mov	r1, r8
 800f7c4:	f000 f959 	bl	800fa7a <memmove>
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	1b9b      	subs	r3, r3, r6
 800f7cc:	60a3      	str	r3, [r4, #8]
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	4433      	add	r3, r6
 800f7d2:	6023      	str	r3, [r4, #0]
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	e7db      	b.n	800f790 <__ssputs_r+0x58>
 800f7d8:	462a      	mov	r2, r5
 800f7da:	f000 f968 	bl	800faae <_realloc_r>
 800f7de:	4606      	mov	r6, r0
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d1e1      	bne.n	800f7a8 <__ssputs_r+0x70>
 800f7e4:	6921      	ldr	r1, [r4, #16]
 800f7e6:	4650      	mov	r0, sl
 800f7e8:	f7fe f808 	bl	800d7fc <_free_r>
 800f7ec:	e7c7      	b.n	800f77e <__ssputs_r+0x46>
	...

0800f7f0 <_svfiprintf_r>:
 800f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f4:	4698      	mov	r8, r3
 800f7f6:	898b      	ldrh	r3, [r1, #12]
 800f7f8:	061b      	lsls	r3, r3, #24
 800f7fa:	b09d      	sub	sp, #116	; 0x74
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	4614      	mov	r4, r2
 800f802:	d50e      	bpl.n	800f822 <_svfiprintf_r+0x32>
 800f804:	690b      	ldr	r3, [r1, #16]
 800f806:	b963      	cbnz	r3, 800f822 <_svfiprintf_r+0x32>
 800f808:	2140      	movs	r1, #64	; 0x40
 800f80a:	f7fe f863 	bl	800d8d4 <_malloc_r>
 800f80e:	6028      	str	r0, [r5, #0]
 800f810:	6128      	str	r0, [r5, #16]
 800f812:	b920      	cbnz	r0, 800f81e <_svfiprintf_r+0x2e>
 800f814:	230c      	movs	r3, #12
 800f816:	603b      	str	r3, [r7, #0]
 800f818:	f04f 30ff 	mov.w	r0, #4294967295
 800f81c:	e0d1      	b.n	800f9c2 <_svfiprintf_r+0x1d2>
 800f81e:	2340      	movs	r3, #64	; 0x40
 800f820:	616b      	str	r3, [r5, #20]
 800f822:	2300      	movs	r3, #0
 800f824:	9309      	str	r3, [sp, #36]	; 0x24
 800f826:	2320      	movs	r3, #32
 800f828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f830:	2330      	movs	r3, #48	; 0x30
 800f832:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f9dc <_svfiprintf_r+0x1ec>
 800f836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f83a:	f04f 0901 	mov.w	r9, #1
 800f83e:	4623      	mov	r3, r4
 800f840:	469a      	mov	sl, r3
 800f842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f846:	b10a      	cbz	r2, 800f84c <_svfiprintf_r+0x5c>
 800f848:	2a25      	cmp	r2, #37	; 0x25
 800f84a:	d1f9      	bne.n	800f840 <_svfiprintf_r+0x50>
 800f84c:	ebba 0b04 	subs.w	fp, sl, r4
 800f850:	d00b      	beq.n	800f86a <_svfiprintf_r+0x7a>
 800f852:	465b      	mov	r3, fp
 800f854:	4622      	mov	r2, r4
 800f856:	4629      	mov	r1, r5
 800f858:	4638      	mov	r0, r7
 800f85a:	f7ff ff6d 	bl	800f738 <__ssputs_r>
 800f85e:	3001      	adds	r0, #1
 800f860:	f000 80aa 	beq.w	800f9b8 <_svfiprintf_r+0x1c8>
 800f864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f866:	445a      	add	r2, fp
 800f868:	9209      	str	r2, [sp, #36]	; 0x24
 800f86a:	f89a 3000 	ldrb.w	r3, [sl]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f000 80a2 	beq.w	800f9b8 <_svfiprintf_r+0x1c8>
 800f874:	2300      	movs	r3, #0
 800f876:	f04f 32ff 	mov.w	r2, #4294967295
 800f87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f87e:	f10a 0a01 	add.w	sl, sl, #1
 800f882:	9304      	str	r3, [sp, #16]
 800f884:	9307      	str	r3, [sp, #28]
 800f886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f88a:	931a      	str	r3, [sp, #104]	; 0x68
 800f88c:	4654      	mov	r4, sl
 800f88e:	2205      	movs	r2, #5
 800f890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f894:	4851      	ldr	r0, [pc, #324]	; (800f9dc <_svfiprintf_r+0x1ec>)
 800f896:	f7f0 fca3 	bl	80001e0 <memchr>
 800f89a:	9a04      	ldr	r2, [sp, #16]
 800f89c:	b9d8      	cbnz	r0, 800f8d6 <_svfiprintf_r+0xe6>
 800f89e:	06d0      	lsls	r0, r2, #27
 800f8a0:	bf44      	itt	mi
 800f8a2:	2320      	movmi	r3, #32
 800f8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8a8:	0711      	lsls	r1, r2, #28
 800f8aa:	bf44      	itt	mi
 800f8ac:	232b      	movmi	r3, #43	; 0x2b
 800f8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8b8:	d015      	beq.n	800f8e6 <_svfiprintf_r+0xf6>
 800f8ba:	9a07      	ldr	r2, [sp, #28]
 800f8bc:	4654      	mov	r4, sl
 800f8be:	2000      	movs	r0, #0
 800f8c0:	f04f 0c0a 	mov.w	ip, #10
 800f8c4:	4621      	mov	r1, r4
 800f8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8ca:	3b30      	subs	r3, #48	; 0x30
 800f8cc:	2b09      	cmp	r3, #9
 800f8ce:	d94e      	bls.n	800f96e <_svfiprintf_r+0x17e>
 800f8d0:	b1b0      	cbz	r0, 800f900 <_svfiprintf_r+0x110>
 800f8d2:	9207      	str	r2, [sp, #28]
 800f8d4:	e014      	b.n	800f900 <_svfiprintf_r+0x110>
 800f8d6:	eba0 0308 	sub.w	r3, r0, r8
 800f8da:	fa09 f303 	lsl.w	r3, r9, r3
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	9304      	str	r3, [sp, #16]
 800f8e2:	46a2      	mov	sl, r4
 800f8e4:	e7d2      	b.n	800f88c <_svfiprintf_r+0x9c>
 800f8e6:	9b03      	ldr	r3, [sp, #12]
 800f8e8:	1d19      	adds	r1, r3, #4
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	9103      	str	r1, [sp, #12]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	bfbb      	ittet	lt
 800f8f2:	425b      	neglt	r3, r3
 800f8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f8f8:	9307      	strge	r3, [sp, #28]
 800f8fa:	9307      	strlt	r3, [sp, #28]
 800f8fc:	bfb8      	it	lt
 800f8fe:	9204      	strlt	r2, [sp, #16]
 800f900:	7823      	ldrb	r3, [r4, #0]
 800f902:	2b2e      	cmp	r3, #46	; 0x2e
 800f904:	d10c      	bne.n	800f920 <_svfiprintf_r+0x130>
 800f906:	7863      	ldrb	r3, [r4, #1]
 800f908:	2b2a      	cmp	r3, #42	; 0x2a
 800f90a:	d135      	bne.n	800f978 <_svfiprintf_r+0x188>
 800f90c:	9b03      	ldr	r3, [sp, #12]
 800f90e:	1d1a      	adds	r2, r3, #4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	9203      	str	r2, [sp, #12]
 800f914:	2b00      	cmp	r3, #0
 800f916:	bfb8      	it	lt
 800f918:	f04f 33ff 	movlt.w	r3, #4294967295
 800f91c:	3402      	adds	r4, #2
 800f91e:	9305      	str	r3, [sp, #20]
 800f920:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f9ec <_svfiprintf_r+0x1fc>
 800f924:	7821      	ldrb	r1, [r4, #0]
 800f926:	2203      	movs	r2, #3
 800f928:	4650      	mov	r0, sl
 800f92a:	f7f0 fc59 	bl	80001e0 <memchr>
 800f92e:	b140      	cbz	r0, 800f942 <_svfiprintf_r+0x152>
 800f930:	2340      	movs	r3, #64	; 0x40
 800f932:	eba0 000a 	sub.w	r0, r0, sl
 800f936:	fa03 f000 	lsl.w	r0, r3, r0
 800f93a:	9b04      	ldr	r3, [sp, #16]
 800f93c:	4303      	orrs	r3, r0
 800f93e:	3401      	adds	r4, #1
 800f940:	9304      	str	r3, [sp, #16]
 800f942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f946:	4826      	ldr	r0, [pc, #152]	; (800f9e0 <_svfiprintf_r+0x1f0>)
 800f948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f94c:	2206      	movs	r2, #6
 800f94e:	f7f0 fc47 	bl	80001e0 <memchr>
 800f952:	2800      	cmp	r0, #0
 800f954:	d038      	beq.n	800f9c8 <_svfiprintf_r+0x1d8>
 800f956:	4b23      	ldr	r3, [pc, #140]	; (800f9e4 <_svfiprintf_r+0x1f4>)
 800f958:	bb1b      	cbnz	r3, 800f9a2 <_svfiprintf_r+0x1b2>
 800f95a:	9b03      	ldr	r3, [sp, #12]
 800f95c:	3307      	adds	r3, #7
 800f95e:	f023 0307 	bic.w	r3, r3, #7
 800f962:	3308      	adds	r3, #8
 800f964:	9303      	str	r3, [sp, #12]
 800f966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f968:	4433      	add	r3, r6
 800f96a:	9309      	str	r3, [sp, #36]	; 0x24
 800f96c:	e767      	b.n	800f83e <_svfiprintf_r+0x4e>
 800f96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f972:	460c      	mov	r4, r1
 800f974:	2001      	movs	r0, #1
 800f976:	e7a5      	b.n	800f8c4 <_svfiprintf_r+0xd4>
 800f978:	2300      	movs	r3, #0
 800f97a:	3401      	adds	r4, #1
 800f97c:	9305      	str	r3, [sp, #20]
 800f97e:	4619      	mov	r1, r3
 800f980:	f04f 0c0a 	mov.w	ip, #10
 800f984:	4620      	mov	r0, r4
 800f986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f98a:	3a30      	subs	r2, #48	; 0x30
 800f98c:	2a09      	cmp	r2, #9
 800f98e:	d903      	bls.n	800f998 <_svfiprintf_r+0x1a8>
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0c5      	beq.n	800f920 <_svfiprintf_r+0x130>
 800f994:	9105      	str	r1, [sp, #20]
 800f996:	e7c3      	b.n	800f920 <_svfiprintf_r+0x130>
 800f998:	fb0c 2101 	mla	r1, ip, r1, r2
 800f99c:	4604      	mov	r4, r0
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e7f0      	b.n	800f984 <_svfiprintf_r+0x194>
 800f9a2:	ab03      	add	r3, sp, #12
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	462a      	mov	r2, r5
 800f9a8:	4b0f      	ldr	r3, [pc, #60]	; (800f9e8 <_svfiprintf_r+0x1f8>)
 800f9aa:	a904      	add	r1, sp, #16
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	f7fe f8a5 	bl	800dafc <_printf_float>
 800f9b2:	1c42      	adds	r2, r0, #1
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	d1d6      	bne.n	800f966 <_svfiprintf_r+0x176>
 800f9b8:	89ab      	ldrh	r3, [r5, #12]
 800f9ba:	065b      	lsls	r3, r3, #25
 800f9bc:	f53f af2c 	bmi.w	800f818 <_svfiprintf_r+0x28>
 800f9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9c2:	b01d      	add	sp, #116	; 0x74
 800f9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c8:	ab03      	add	r3, sp, #12
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	462a      	mov	r2, r5
 800f9ce:	4b06      	ldr	r3, [pc, #24]	; (800f9e8 <_svfiprintf_r+0x1f8>)
 800f9d0:	a904      	add	r1, sp, #16
 800f9d2:	4638      	mov	r0, r7
 800f9d4:	f7fe fb36 	bl	800e044 <_printf_i>
 800f9d8:	e7eb      	b.n	800f9b2 <_svfiprintf_r+0x1c2>
 800f9da:	bf00      	nop
 800f9dc:	08010bbc 	.word	0x08010bbc
 800f9e0:	08010bc6 	.word	0x08010bc6
 800f9e4:	0800dafd 	.word	0x0800dafd
 800f9e8:	0800f739 	.word	0x0800f739
 800f9ec:	08010bc2 	.word	0x08010bc2

0800f9f0 <__assert_func>:
 800f9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9f2:	4614      	mov	r4, r2
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <__assert_func+0x2c>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	68d8      	ldr	r0, [r3, #12]
 800f9fe:	b14c      	cbz	r4, 800fa14 <__assert_func+0x24>
 800fa00:	4b07      	ldr	r3, [pc, #28]	; (800fa20 <__assert_func+0x30>)
 800fa02:	9100      	str	r1, [sp, #0]
 800fa04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa08:	4906      	ldr	r1, [pc, #24]	; (800fa24 <__assert_func+0x34>)
 800fa0a:	462b      	mov	r3, r5
 800fa0c:	f000 f80e 	bl	800fa2c <fiprintf>
 800fa10:	f000 faa4 	bl	800ff5c <abort>
 800fa14:	4b04      	ldr	r3, [pc, #16]	; (800fa28 <__assert_func+0x38>)
 800fa16:	461c      	mov	r4, r3
 800fa18:	e7f3      	b.n	800fa02 <__assert_func+0x12>
 800fa1a:	bf00      	nop
 800fa1c:	20000324 	.word	0x20000324
 800fa20:	08010bcd 	.word	0x08010bcd
 800fa24:	08010bda 	.word	0x08010bda
 800fa28:	08010c08 	.word	0x08010c08

0800fa2c <fiprintf>:
 800fa2c:	b40e      	push	{r1, r2, r3}
 800fa2e:	b503      	push	{r0, r1, lr}
 800fa30:	4601      	mov	r1, r0
 800fa32:	ab03      	add	r3, sp, #12
 800fa34:	4805      	ldr	r0, [pc, #20]	; (800fa4c <fiprintf+0x20>)
 800fa36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa3a:	6800      	ldr	r0, [r0, #0]
 800fa3c:	9301      	str	r3, [sp, #4]
 800fa3e:	f000 f88f 	bl	800fb60 <_vfiprintf_r>
 800fa42:	b002      	add	sp, #8
 800fa44:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa48:	b003      	add	sp, #12
 800fa4a:	4770      	bx	lr
 800fa4c:	20000324 	.word	0x20000324

0800fa50 <__retarget_lock_init_recursive>:
 800fa50:	4770      	bx	lr

0800fa52 <__retarget_lock_acquire_recursive>:
 800fa52:	4770      	bx	lr

0800fa54 <__retarget_lock_release_recursive>:
 800fa54:	4770      	bx	lr

0800fa56 <__ascii_mbtowc>:
 800fa56:	b082      	sub	sp, #8
 800fa58:	b901      	cbnz	r1, 800fa5c <__ascii_mbtowc+0x6>
 800fa5a:	a901      	add	r1, sp, #4
 800fa5c:	b142      	cbz	r2, 800fa70 <__ascii_mbtowc+0x1a>
 800fa5e:	b14b      	cbz	r3, 800fa74 <__ascii_mbtowc+0x1e>
 800fa60:	7813      	ldrb	r3, [r2, #0]
 800fa62:	600b      	str	r3, [r1, #0]
 800fa64:	7812      	ldrb	r2, [r2, #0]
 800fa66:	1e10      	subs	r0, r2, #0
 800fa68:	bf18      	it	ne
 800fa6a:	2001      	movne	r0, #1
 800fa6c:	b002      	add	sp, #8
 800fa6e:	4770      	bx	lr
 800fa70:	4610      	mov	r0, r2
 800fa72:	e7fb      	b.n	800fa6c <__ascii_mbtowc+0x16>
 800fa74:	f06f 0001 	mvn.w	r0, #1
 800fa78:	e7f8      	b.n	800fa6c <__ascii_mbtowc+0x16>

0800fa7a <memmove>:
 800fa7a:	4288      	cmp	r0, r1
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	eb01 0402 	add.w	r4, r1, r2
 800fa82:	d902      	bls.n	800fa8a <memmove+0x10>
 800fa84:	4284      	cmp	r4, r0
 800fa86:	4623      	mov	r3, r4
 800fa88:	d807      	bhi.n	800fa9a <memmove+0x20>
 800fa8a:	1e43      	subs	r3, r0, #1
 800fa8c:	42a1      	cmp	r1, r4
 800fa8e:	d008      	beq.n	800faa2 <memmove+0x28>
 800fa90:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa94:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa98:	e7f8      	b.n	800fa8c <memmove+0x12>
 800fa9a:	4402      	add	r2, r0
 800fa9c:	4601      	mov	r1, r0
 800fa9e:	428a      	cmp	r2, r1
 800faa0:	d100      	bne.n	800faa4 <memmove+0x2a>
 800faa2:	bd10      	pop	{r4, pc}
 800faa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faa8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800faac:	e7f7      	b.n	800fa9e <memmove+0x24>

0800faae <_realloc_r>:
 800faae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab2:	4680      	mov	r8, r0
 800fab4:	4614      	mov	r4, r2
 800fab6:	460e      	mov	r6, r1
 800fab8:	b921      	cbnz	r1, 800fac4 <_realloc_r+0x16>
 800faba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fabe:	4611      	mov	r1, r2
 800fac0:	f7fd bf08 	b.w	800d8d4 <_malloc_r>
 800fac4:	b92a      	cbnz	r2, 800fad2 <_realloc_r+0x24>
 800fac6:	f7fd fe99 	bl	800d7fc <_free_r>
 800faca:	4625      	mov	r5, r4
 800facc:	4628      	mov	r0, r5
 800face:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad2:	f000 fc67 	bl	80103a4 <_malloc_usable_size_r>
 800fad6:	4284      	cmp	r4, r0
 800fad8:	4607      	mov	r7, r0
 800fada:	d802      	bhi.n	800fae2 <_realloc_r+0x34>
 800fadc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fae0:	d812      	bhi.n	800fb08 <_realloc_r+0x5a>
 800fae2:	4621      	mov	r1, r4
 800fae4:	4640      	mov	r0, r8
 800fae6:	f7fd fef5 	bl	800d8d4 <_malloc_r>
 800faea:	4605      	mov	r5, r0
 800faec:	2800      	cmp	r0, #0
 800faee:	d0ed      	beq.n	800facc <_realloc_r+0x1e>
 800faf0:	42bc      	cmp	r4, r7
 800faf2:	4622      	mov	r2, r4
 800faf4:	4631      	mov	r1, r6
 800faf6:	bf28      	it	cs
 800faf8:	463a      	movcs	r2, r7
 800fafa:	f7fd fe69 	bl	800d7d0 <memcpy>
 800fafe:	4631      	mov	r1, r6
 800fb00:	4640      	mov	r0, r8
 800fb02:	f7fd fe7b 	bl	800d7fc <_free_r>
 800fb06:	e7e1      	b.n	800facc <_realloc_r+0x1e>
 800fb08:	4635      	mov	r5, r6
 800fb0a:	e7df      	b.n	800facc <_realloc_r+0x1e>

0800fb0c <__sfputc_r>:
 800fb0c:	6893      	ldr	r3, [r2, #8]
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	b410      	push	{r4}
 800fb14:	6093      	str	r3, [r2, #8]
 800fb16:	da08      	bge.n	800fb2a <__sfputc_r+0x1e>
 800fb18:	6994      	ldr	r4, [r2, #24]
 800fb1a:	42a3      	cmp	r3, r4
 800fb1c:	db01      	blt.n	800fb22 <__sfputc_r+0x16>
 800fb1e:	290a      	cmp	r1, #10
 800fb20:	d103      	bne.n	800fb2a <__sfputc_r+0x1e>
 800fb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb26:	f000 b94b 	b.w	800fdc0 <__swbuf_r>
 800fb2a:	6813      	ldr	r3, [r2, #0]
 800fb2c:	1c58      	adds	r0, r3, #1
 800fb2e:	6010      	str	r0, [r2, #0]
 800fb30:	7019      	strb	r1, [r3, #0]
 800fb32:	4608      	mov	r0, r1
 800fb34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <__sfputs_r>:
 800fb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	460f      	mov	r7, r1
 800fb40:	4614      	mov	r4, r2
 800fb42:	18d5      	adds	r5, r2, r3
 800fb44:	42ac      	cmp	r4, r5
 800fb46:	d101      	bne.n	800fb4c <__sfputs_r+0x12>
 800fb48:	2000      	movs	r0, #0
 800fb4a:	e007      	b.n	800fb5c <__sfputs_r+0x22>
 800fb4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb50:	463a      	mov	r2, r7
 800fb52:	4630      	mov	r0, r6
 800fb54:	f7ff ffda 	bl	800fb0c <__sfputc_r>
 800fb58:	1c43      	adds	r3, r0, #1
 800fb5a:	d1f3      	bne.n	800fb44 <__sfputs_r+0xa>
 800fb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb60 <_vfiprintf_r>:
 800fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb64:	460d      	mov	r5, r1
 800fb66:	b09d      	sub	sp, #116	; 0x74
 800fb68:	4614      	mov	r4, r2
 800fb6a:	4698      	mov	r8, r3
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	b118      	cbz	r0, 800fb78 <_vfiprintf_r+0x18>
 800fb70:	6983      	ldr	r3, [r0, #24]
 800fb72:	b90b      	cbnz	r3, 800fb78 <_vfiprintf_r+0x18>
 800fb74:	f000 fb14 	bl	80101a0 <__sinit>
 800fb78:	4b89      	ldr	r3, [pc, #548]	; (800fda0 <_vfiprintf_r+0x240>)
 800fb7a:	429d      	cmp	r5, r3
 800fb7c:	d11b      	bne.n	800fbb6 <_vfiprintf_r+0x56>
 800fb7e:	6875      	ldr	r5, [r6, #4]
 800fb80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb82:	07d9      	lsls	r1, r3, #31
 800fb84:	d405      	bmi.n	800fb92 <_vfiprintf_r+0x32>
 800fb86:	89ab      	ldrh	r3, [r5, #12]
 800fb88:	059a      	lsls	r2, r3, #22
 800fb8a:	d402      	bmi.n	800fb92 <_vfiprintf_r+0x32>
 800fb8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb8e:	f7ff ff60 	bl	800fa52 <__retarget_lock_acquire_recursive>
 800fb92:	89ab      	ldrh	r3, [r5, #12]
 800fb94:	071b      	lsls	r3, r3, #28
 800fb96:	d501      	bpl.n	800fb9c <_vfiprintf_r+0x3c>
 800fb98:	692b      	ldr	r3, [r5, #16]
 800fb9a:	b9eb      	cbnz	r3, 800fbd8 <_vfiprintf_r+0x78>
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f000 f96e 	bl	800fe80 <__swsetup_r>
 800fba4:	b1c0      	cbz	r0, 800fbd8 <_vfiprintf_r+0x78>
 800fba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fba8:	07dc      	lsls	r4, r3, #31
 800fbaa:	d50e      	bpl.n	800fbca <_vfiprintf_r+0x6a>
 800fbac:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb0:	b01d      	add	sp, #116	; 0x74
 800fbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb6:	4b7b      	ldr	r3, [pc, #492]	; (800fda4 <_vfiprintf_r+0x244>)
 800fbb8:	429d      	cmp	r5, r3
 800fbba:	d101      	bne.n	800fbc0 <_vfiprintf_r+0x60>
 800fbbc:	68b5      	ldr	r5, [r6, #8]
 800fbbe:	e7df      	b.n	800fb80 <_vfiprintf_r+0x20>
 800fbc0:	4b79      	ldr	r3, [pc, #484]	; (800fda8 <_vfiprintf_r+0x248>)
 800fbc2:	429d      	cmp	r5, r3
 800fbc4:	bf08      	it	eq
 800fbc6:	68f5      	ldreq	r5, [r6, #12]
 800fbc8:	e7da      	b.n	800fb80 <_vfiprintf_r+0x20>
 800fbca:	89ab      	ldrh	r3, [r5, #12]
 800fbcc:	0598      	lsls	r0, r3, #22
 800fbce:	d4ed      	bmi.n	800fbac <_vfiprintf_r+0x4c>
 800fbd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbd2:	f7ff ff3f 	bl	800fa54 <__retarget_lock_release_recursive>
 800fbd6:	e7e9      	b.n	800fbac <_vfiprintf_r+0x4c>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	9309      	str	r3, [sp, #36]	; 0x24
 800fbdc:	2320      	movs	r3, #32
 800fbde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbe6:	2330      	movs	r3, #48	; 0x30
 800fbe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fdac <_vfiprintf_r+0x24c>
 800fbec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbf0:	f04f 0901 	mov.w	r9, #1
 800fbf4:	4623      	mov	r3, r4
 800fbf6:	469a      	mov	sl, r3
 800fbf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbfc:	b10a      	cbz	r2, 800fc02 <_vfiprintf_r+0xa2>
 800fbfe:	2a25      	cmp	r2, #37	; 0x25
 800fc00:	d1f9      	bne.n	800fbf6 <_vfiprintf_r+0x96>
 800fc02:	ebba 0b04 	subs.w	fp, sl, r4
 800fc06:	d00b      	beq.n	800fc20 <_vfiprintf_r+0xc0>
 800fc08:	465b      	mov	r3, fp
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f7ff ff93 	bl	800fb3a <__sfputs_r>
 800fc14:	3001      	adds	r0, #1
 800fc16:	f000 80aa 	beq.w	800fd6e <_vfiprintf_r+0x20e>
 800fc1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc1c:	445a      	add	r2, fp
 800fc1e:	9209      	str	r2, [sp, #36]	; 0x24
 800fc20:	f89a 3000 	ldrb.w	r3, [sl]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 80a2 	beq.w	800fd6e <_vfiprintf_r+0x20e>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc34:	f10a 0a01 	add.w	sl, sl, #1
 800fc38:	9304      	str	r3, [sp, #16]
 800fc3a:	9307      	str	r3, [sp, #28]
 800fc3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc40:	931a      	str	r3, [sp, #104]	; 0x68
 800fc42:	4654      	mov	r4, sl
 800fc44:	2205      	movs	r2, #5
 800fc46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc4a:	4858      	ldr	r0, [pc, #352]	; (800fdac <_vfiprintf_r+0x24c>)
 800fc4c:	f7f0 fac8 	bl	80001e0 <memchr>
 800fc50:	9a04      	ldr	r2, [sp, #16]
 800fc52:	b9d8      	cbnz	r0, 800fc8c <_vfiprintf_r+0x12c>
 800fc54:	06d1      	lsls	r1, r2, #27
 800fc56:	bf44      	itt	mi
 800fc58:	2320      	movmi	r3, #32
 800fc5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc5e:	0713      	lsls	r3, r2, #28
 800fc60:	bf44      	itt	mi
 800fc62:	232b      	movmi	r3, #43	; 0x2b
 800fc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc68:	f89a 3000 	ldrb.w	r3, [sl]
 800fc6c:	2b2a      	cmp	r3, #42	; 0x2a
 800fc6e:	d015      	beq.n	800fc9c <_vfiprintf_r+0x13c>
 800fc70:	9a07      	ldr	r2, [sp, #28]
 800fc72:	4654      	mov	r4, sl
 800fc74:	2000      	movs	r0, #0
 800fc76:	f04f 0c0a 	mov.w	ip, #10
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc80:	3b30      	subs	r3, #48	; 0x30
 800fc82:	2b09      	cmp	r3, #9
 800fc84:	d94e      	bls.n	800fd24 <_vfiprintf_r+0x1c4>
 800fc86:	b1b0      	cbz	r0, 800fcb6 <_vfiprintf_r+0x156>
 800fc88:	9207      	str	r2, [sp, #28]
 800fc8a:	e014      	b.n	800fcb6 <_vfiprintf_r+0x156>
 800fc8c:	eba0 0308 	sub.w	r3, r0, r8
 800fc90:	fa09 f303 	lsl.w	r3, r9, r3
 800fc94:	4313      	orrs	r3, r2
 800fc96:	9304      	str	r3, [sp, #16]
 800fc98:	46a2      	mov	sl, r4
 800fc9a:	e7d2      	b.n	800fc42 <_vfiprintf_r+0xe2>
 800fc9c:	9b03      	ldr	r3, [sp, #12]
 800fc9e:	1d19      	adds	r1, r3, #4
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	9103      	str	r1, [sp, #12]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	bfbb      	ittet	lt
 800fca8:	425b      	neglt	r3, r3
 800fcaa:	f042 0202 	orrlt.w	r2, r2, #2
 800fcae:	9307      	strge	r3, [sp, #28]
 800fcb0:	9307      	strlt	r3, [sp, #28]
 800fcb2:	bfb8      	it	lt
 800fcb4:	9204      	strlt	r2, [sp, #16]
 800fcb6:	7823      	ldrb	r3, [r4, #0]
 800fcb8:	2b2e      	cmp	r3, #46	; 0x2e
 800fcba:	d10c      	bne.n	800fcd6 <_vfiprintf_r+0x176>
 800fcbc:	7863      	ldrb	r3, [r4, #1]
 800fcbe:	2b2a      	cmp	r3, #42	; 0x2a
 800fcc0:	d135      	bne.n	800fd2e <_vfiprintf_r+0x1ce>
 800fcc2:	9b03      	ldr	r3, [sp, #12]
 800fcc4:	1d1a      	adds	r2, r3, #4
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	9203      	str	r2, [sp, #12]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	bfb8      	it	lt
 800fcce:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcd2:	3402      	adds	r4, #2
 800fcd4:	9305      	str	r3, [sp, #20]
 800fcd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fdbc <_vfiprintf_r+0x25c>
 800fcda:	7821      	ldrb	r1, [r4, #0]
 800fcdc:	2203      	movs	r2, #3
 800fcde:	4650      	mov	r0, sl
 800fce0:	f7f0 fa7e 	bl	80001e0 <memchr>
 800fce4:	b140      	cbz	r0, 800fcf8 <_vfiprintf_r+0x198>
 800fce6:	2340      	movs	r3, #64	; 0x40
 800fce8:	eba0 000a 	sub.w	r0, r0, sl
 800fcec:	fa03 f000 	lsl.w	r0, r3, r0
 800fcf0:	9b04      	ldr	r3, [sp, #16]
 800fcf2:	4303      	orrs	r3, r0
 800fcf4:	3401      	adds	r4, #1
 800fcf6:	9304      	str	r3, [sp, #16]
 800fcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcfc:	482c      	ldr	r0, [pc, #176]	; (800fdb0 <_vfiprintf_r+0x250>)
 800fcfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd02:	2206      	movs	r2, #6
 800fd04:	f7f0 fa6c 	bl	80001e0 <memchr>
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d03f      	beq.n	800fd8c <_vfiprintf_r+0x22c>
 800fd0c:	4b29      	ldr	r3, [pc, #164]	; (800fdb4 <_vfiprintf_r+0x254>)
 800fd0e:	bb1b      	cbnz	r3, 800fd58 <_vfiprintf_r+0x1f8>
 800fd10:	9b03      	ldr	r3, [sp, #12]
 800fd12:	3307      	adds	r3, #7
 800fd14:	f023 0307 	bic.w	r3, r3, #7
 800fd18:	3308      	adds	r3, #8
 800fd1a:	9303      	str	r3, [sp, #12]
 800fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd1e:	443b      	add	r3, r7
 800fd20:	9309      	str	r3, [sp, #36]	; 0x24
 800fd22:	e767      	b.n	800fbf4 <_vfiprintf_r+0x94>
 800fd24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd28:	460c      	mov	r4, r1
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e7a5      	b.n	800fc7a <_vfiprintf_r+0x11a>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	3401      	adds	r4, #1
 800fd32:	9305      	str	r3, [sp, #20]
 800fd34:	4619      	mov	r1, r3
 800fd36:	f04f 0c0a 	mov.w	ip, #10
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd40:	3a30      	subs	r2, #48	; 0x30
 800fd42:	2a09      	cmp	r2, #9
 800fd44:	d903      	bls.n	800fd4e <_vfiprintf_r+0x1ee>
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d0c5      	beq.n	800fcd6 <_vfiprintf_r+0x176>
 800fd4a:	9105      	str	r1, [sp, #20]
 800fd4c:	e7c3      	b.n	800fcd6 <_vfiprintf_r+0x176>
 800fd4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd52:	4604      	mov	r4, r0
 800fd54:	2301      	movs	r3, #1
 800fd56:	e7f0      	b.n	800fd3a <_vfiprintf_r+0x1da>
 800fd58:	ab03      	add	r3, sp, #12
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	462a      	mov	r2, r5
 800fd5e:	4b16      	ldr	r3, [pc, #88]	; (800fdb8 <_vfiprintf_r+0x258>)
 800fd60:	a904      	add	r1, sp, #16
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7fd feca 	bl	800dafc <_printf_float>
 800fd68:	4607      	mov	r7, r0
 800fd6a:	1c78      	adds	r0, r7, #1
 800fd6c:	d1d6      	bne.n	800fd1c <_vfiprintf_r+0x1bc>
 800fd6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd70:	07d9      	lsls	r1, r3, #31
 800fd72:	d405      	bmi.n	800fd80 <_vfiprintf_r+0x220>
 800fd74:	89ab      	ldrh	r3, [r5, #12]
 800fd76:	059a      	lsls	r2, r3, #22
 800fd78:	d402      	bmi.n	800fd80 <_vfiprintf_r+0x220>
 800fd7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd7c:	f7ff fe6a 	bl	800fa54 <__retarget_lock_release_recursive>
 800fd80:	89ab      	ldrh	r3, [r5, #12]
 800fd82:	065b      	lsls	r3, r3, #25
 800fd84:	f53f af12 	bmi.w	800fbac <_vfiprintf_r+0x4c>
 800fd88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd8a:	e711      	b.n	800fbb0 <_vfiprintf_r+0x50>
 800fd8c:	ab03      	add	r3, sp, #12
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	462a      	mov	r2, r5
 800fd92:	4b09      	ldr	r3, [pc, #36]	; (800fdb8 <_vfiprintf_r+0x258>)
 800fd94:	a904      	add	r1, sp, #16
 800fd96:	4630      	mov	r0, r6
 800fd98:	f7fe f954 	bl	800e044 <_printf_i>
 800fd9c:	e7e4      	b.n	800fd68 <_vfiprintf_r+0x208>
 800fd9e:	bf00      	nop
 800fda0:	08010d34 	.word	0x08010d34
 800fda4:	08010d54 	.word	0x08010d54
 800fda8:	08010d14 	.word	0x08010d14
 800fdac:	08010bbc 	.word	0x08010bbc
 800fdb0:	08010bc6 	.word	0x08010bc6
 800fdb4:	0800dafd 	.word	0x0800dafd
 800fdb8:	0800fb3b 	.word	0x0800fb3b
 800fdbc:	08010bc2 	.word	0x08010bc2

0800fdc0 <__swbuf_r>:
 800fdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc2:	460e      	mov	r6, r1
 800fdc4:	4614      	mov	r4, r2
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	b118      	cbz	r0, 800fdd2 <__swbuf_r+0x12>
 800fdca:	6983      	ldr	r3, [r0, #24]
 800fdcc:	b90b      	cbnz	r3, 800fdd2 <__swbuf_r+0x12>
 800fdce:	f000 f9e7 	bl	80101a0 <__sinit>
 800fdd2:	4b21      	ldr	r3, [pc, #132]	; (800fe58 <__swbuf_r+0x98>)
 800fdd4:	429c      	cmp	r4, r3
 800fdd6:	d12b      	bne.n	800fe30 <__swbuf_r+0x70>
 800fdd8:	686c      	ldr	r4, [r5, #4]
 800fdda:	69a3      	ldr	r3, [r4, #24]
 800fddc:	60a3      	str	r3, [r4, #8]
 800fdde:	89a3      	ldrh	r3, [r4, #12]
 800fde0:	071a      	lsls	r2, r3, #28
 800fde2:	d52f      	bpl.n	800fe44 <__swbuf_r+0x84>
 800fde4:	6923      	ldr	r3, [r4, #16]
 800fde6:	b36b      	cbz	r3, 800fe44 <__swbuf_r+0x84>
 800fde8:	6923      	ldr	r3, [r4, #16]
 800fdea:	6820      	ldr	r0, [r4, #0]
 800fdec:	1ac0      	subs	r0, r0, r3
 800fdee:	6963      	ldr	r3, [r4, #20]
 800fdf0:	b2f6      	uxtb	r6, r6
 800fdf2:	4283      	cmp	r3, r0
 800fdf4:	4637      	mov	r7, r6
 800fdf6:	dc04      	bgt.n	800fe02 <__swbuf_r+0x42>
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f000 f93c 	bl	8010078 <_fflush_r>
 800fe00:	bb30      	cbnz	r0, 800fe50 <__swbuf_r+0x90>
 800fe02:	68a3      	ldr	r3, [r4, #8]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	60a3      	str	r3, [r4, #8]
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	1c5a      	adds	r2, r3, #1
 800fe0c:	6022      	str	r2, [r4, #0]
 800fe0e:	701e      	strb	r6, [r3, #0]
 800fe10:	6963      	ldr	r3, [r4, #20]
 800fe12:	3001      	adds	r0, #1
 800fe14:	4283      	cmp	r3, r0
 800fe16:	d004      	beq.n	800fe22 <__swbuf_r+0x62>
 800fe18:	89a3      	ldrh	r3, [r4, #12]
 800fe1a:	07db      	lsls	r3, r3, #31
 800fe1c:	d506      	bpl.n	800fe2c <__swbuf_r+0x6c>
 800fe1e:	2e0a      	cmp	r6, #10
 800fe20:	d104      	bne.n	800fe2c <__swbuf_r+0x6c>
 800fe22:	4621      	mov	r1, r4
 800fe24:	4628      	mov	r0, r5
 800fe26:	f000 f927 	bl	8010078 <_fflush_r>
 800fe2a:	b988      	cbnz	r0, 800fe50 <__swbuf_r+0x90>
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe30:	4b0a      	ldr	r3, [pc, #40]	; (800fe5c <__swbuf_r+0x9c>)
 800fe32:	429c      	cmp	r4, r3
 800fe34:	d101      	bne.n	800fe3a <__swbuf_r+0x7a>
 800fe36:	68ac      	ldr	r4, [r5, #8]
 800fe38:	e7cf      	b.n	800fdda <__swbuf_r+0x1a>
 800fe3a:	4b09      	ldr	r3, [pc, #36]	; (800fe60 <__swbuf_r+0xa0>)
 800fe3c:	429c      	cmp	r4, r3
 800fe3e:	bf08      	it	eq
 800fe40:	68ec      	ldreq	r4, [r5, #12]
 800fe42:	e7ca      	b.n	800fdda <__swbuf_r+0x1a>
 800fe44:	4621      	mov	r1, r4
 800fe46:	4628      	mov	r0, r5
 800fe48:	f000 f81a 	bl	800fe80 <__swsetup_r>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d0cb      	beq.n	800fde8 <__swbuf_r+0x28>
 800fe50:	f04f 37ff 	mov.w	r7, #4294967295
 800fe54:	e7ea      	b.n	800fe2c <__swbuf_r+0x6c>
 800fe56:	bf00      	nop
 800fe58:	08010d34 	.word	0x08010d34
 800fe5c:	08010d54 	.word	0x08010d54
 800fe60:	08010d14 	.word	0x08010d14

0800fe64 <__ascii_wctomb>:
 800fe64:	b149      	cbz	r1, 800fe7a <__ascii_wctomb+0x16>
 800fe66:	2aff      	cmp	r2, #255	; 0xff
 800fe68:	bf85      	ittet	hi
 800fe6a:	238a      	movhi	r3, #138	; 0x8a
 800fe6c:	6003      	strhi	r3, [r0, #0]
 800fe6e:	700a      	strbls	r2, [r1, #0]
 800fe70:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe74:	bf98      	it	ls
 800fe76:	2001      	movls	r0, #1
 800fe78:	4770      	bx	lr
 800fe7a:	4608      	mov	r0, r1
 800fe7c:	4770      	bx	lr
	...

0800fe80 <__swsetup_r>:
 800fe80:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <__swsetup_r+0xcc>)
 800fe82:	b570      	push	{r4, r5, r6, lr}
 800fe84:	681d      	ldr	r5, [r3, #0]
 800fe86:	4606      	mov	r6, r0
 800fe88:	460c      	mov	r4, r1
 800fe8a:	b125      	cbz	r5, 800fe96 <__swsetup_r+0x16>
 800fe8c:	69ab      	ldr	r3, [r5, #24]
 800fe8e:	b913      	cbnz	r3, 800fe96 <__swsetup_r+0x16>
 800fe90:	4628      	mov	r0, r5
 800fe92:	f000 f985 	bl	80101a0 <__sinit>
 800fe96:	4b2e      	ldr	r3, [pc, #184]	; (800ff50 <__swsetup_r+0xd0>)
 800fe98:	429c      	cmp	r4, r3
 800fe9a:	d10f      	bne.n	800febc <__swsetup_r+0x3c>
 800fe9c:	686c      	ldr	r4, [r5, #4]
 800fe9e:	89a3      	ldrh	r3, [r4, #12]
 800fea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fea4:	0719      	lsls	r1, r3, #28
 800fea6:	d42c      	bmi.n	800ff02 <__swsetup_r+0x82>
 800fea8:	06dd      	lsls	r5, r3, #27
 800feaa:	d411      	bmi.n	800fed0 <__swsetup_r+0x50>
 800feac:	2309      	movs	r3, #9
 800feae:	6033      	str	r3, [r6, #0]
 800feb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800feb4:	81a3      	strh	r3, [r4, #12]
 800feb6:	f04f 30ff 	mov.w	r0, #4294967295
 800feba:	e03e      	b.n	800ff3a <__swsetup_r+0xba>
 800febc:	4b25      	ldr	r3, [pc, #148]	; (800ff54 <__swsetup_r+0xd4>)
 800febe:	429c      	cmp	r4, r3
 800fec0:	d101      	bne.n	800fec6 <__swsetup_r+0x46>
 800fec2:	68ac      	ldr	r4, [r5, #8]
 800fec4:	e7eb      	b.n	800fe9e <__swsetup_r+0x1e>
 800fec6:	4b24      	ldr	r3, [pc, #144]	; (800ff58 <__swsetup_r+0xd8>)
 800fec8:	429c      	cmp	r4, r3
 800feca:	bf08      	it	eq
 800fecc:	68ec      	ldreq	r4, [r5, #12]
 800fece:	e7e6      	b.n	800fe9e <__swsetup_r+0x1e>
 800fed0:	0758      	lsls	r0, r3, #29
 800fed2:	d512      	bpl.n	800fefa <__swsetup_r+0x7a>
 800fed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fed6:	b141      	cbz	r1, 800feea <__swsetup_r+0x6a>
 800fed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fedc:	4299      	cmp	r1, r3
 800fede:	d002      	beq.n	800fee6 <__swsetup_r+0x66>
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7fd fc8b 	bl	800d7fc <_free_r>
 800fee6:	2300      	movs	r3, #0
 800fee8:	6363      	str	r3, [r4, #52]	; 0x34
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	2300      	movs	r3, #0
 800fef4:	6063      	str	r3, [r4, #4]
 800fef6:	6923      	ldr	r3, [r4, #16]
 800fef8:	6023      	str	r3, [r4, #0]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f043 0308 	orr.w	r3, r3, #8
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	6923      	ldr	r3, [r4, #16]
 800ff04:	b94b      	cbnz	r3, 800ff1a <__swsetup_r+0x9a>
 800ff06:	89a3      	ldrh	r3, [r4, #12]
 800ff08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff10:	d003      	beq.n	800ff1a <__swsetup_r+0x9a>
 800ff12:	4621      	mov	r1, r4
 800ff14:	4630      	mov	r0, r6
 800ff16:	f000 fa05 	bl	8010324 <__smakebuf_r>
 800ff1a:	89a0      	ldrh	r0, [r4, #12]
 800ff1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff20:	f010 0301 	ands.w	r3, r0, #1
 800ff24:	d00a      	beq.n	800ff3c <__swsetup_r+0xbc>
 800ff26:	2300      	movs	r3, #0
 800ff28:	60a3      	str	r3, [r4, #8]
 800ff2a:	6963      	ldr	r3, [r4, #20]
 800ff2c:	425b      	negs	r3, r3
 800ff2e:	61a3      	str	r3, [r4, #24]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	b943      	cbnz	r3, 800ff46 <__swsetup_r+0xc6>
 800ff34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff38:	d1ba      	bne.n	800feb0 <__swsetup_r+0x30>
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	0781      	lsls	r1, r0, #30
 800ff3e:	bf58      	it	pl
 800ff40:	6963      	ldrpl	r3, [r4, #20]
 800ff42:	60a3      	str	r3, [r4, #8]
 800ff44:	e7f4      	b.n	800ff30 <__swsetup_r+0xb0>
 800ff46:	2000      	movs	r0, #0
 800ff48:	e7f7      	b.n	800ff3a <__swsetup_r+0xba>
 800ff4a:	bf00      	nop
 800ff4c:	20000324 	.word	0x20000324
 800ff50:	08010d34 	.word	0x08010d34
 800ff54:	08010d54 	.word	0x08010d54
 800ff58:	08010d14 	.word	0x08010d14

0800ff5c <abort>:
 800ff5c:	b508      	push	{r3, lr}
 800ff5e:	2006      	movs	r0, #6
 800ff60:	f000 fa50 	bl	8010404 <raise>
 800ff64:	2001      	movs	r0, #1
 800ff66:	f7f4 ff76 	bl	8004e56 <_exit>
	...

0800ff6c <__sflush_r>:
 800ff6c:	898a      	ldrh	r2, [r1, #12]
 800ff6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff72:	4605      	mov	r5, r0
 800ff74:	0710      	lsls	r0, r2, #28
 800ff76:	460c      	mov	r4, r1
 800ff78:	d458      	bmi.n	801002c <__sflush_r+0xc0>
 800ff7a:	684b      	ldr	r3, [r1, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	dc05      	bgt.n	800ff8c <__sflush_r+0x20>
 800ff80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	dc02      	bgt.n	800ff8c <__sflush_r+0x20>
 800ff86:	2000      	movs	r0, #0
 800ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff8e:	2e00      	cmp	r6, #0
 800ff90:	d0f9      	beq.n	800ff86 <__sflush_r+0x1a>
 800ff92:	2300      	movs	r3, #0
 800ff94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff98:	682f      	ldr	r7, [r5, #0]
 800ff9a:	602b      	str	r3, [r5, #0]
 800ff9c:	d032      	beq.n	8010004 <__sflush_r+0x98>
 800ff9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffa0:	89a3      	ldrh	r3, [r4, #12]
 800ffa2:	075a      	lsls	r2, r3, #29
 800ffa4:	d505      	bpl.n	800ffb2 <__sflush_r+0x46>
 800ffa6:	6863      	ldr	r3, [r4, #4]
 800ffa8:	1ac0      	subs	r0, r0, r3
 800ffaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffac:	b10b      	cbz	r3, 800ffb2 <__sflush_r+0x46>
 800ffae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffb0:	1ac0      	subs	r0, r0, r3
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffb8:	6a21      	ldr	r1, [r4, #32]
 800ffba:	4628      	mov	r0, r5
 800ffbc:	47b0      	blx	r6
 800ffbe:	1c43      	adds	r3, r0, #1
 800ffc0:	89a3      	ldrh	r3, [r4, #12]
 800ffc2:	d106      	bne.n	800ffd2 <__sflush_r+0x66>
 800ffc4:	6829      	ldr	r1, [r5, #0]
 800ffc6:	291d      	cmp	r1, #29
 800ffc8:	d82c      	bhi.n	8010024 <__sflush_r+0xb8>
 800ffca:	4a2a      	ldr	r2, [pc, #168]	; (8010074 <__sflush_r+0x108>)
 800ffcc:	40ca      	lsrs	r2, r1
 800ffce:	07d6      	lsls	r6, r2, #31
 800ffd0:	d528      	bpl.n	8010024 <__sflush_r+0xb8>
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	6062      	str	r2, [r4, #4]
 800ffd6:	04d9      	lsls	r1, r3, #19
 800ffd8:	6922      	ldr	r2, [r4, #16]
 800ffda:	6022      	str	r2, [r4, #0]
 800ffdc:	d504      	bpl.n	800ffe8 <__sflush_r+0x7c>
 800ffde:	1c42      	adds	r2, r0, #1
 800ffe0:	d101      	bne.n	800ffe6 <__sflush_r+0x7a>
 800ffe2:	682b      	ldr	r3, [r5, #0]
 800ffe4:	b903      	cbnz	r3, 800ffe8 <__sflush_r+0x7c>
 800ffe6:	6560      	str	r0, [r4, #84]	; 0x54
 800ffe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffea:	602f      	str	r7, [r5, #0]
 800ffec:	2900      	cmp	r1, #0
 800ffee:	d0ca      	beq.n	800ff86 <__sflush_r+0x1a>
 800fff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fff4:	4299      	cmp	r1, r3
 800fff6:	d002      	beq.n	800fffe <__sflush_r+0x92>
 800fff8:	4628      	mov	r0, r5
 800fffa:	f7fd fbff 	bl	800d7fc <_free_r>
 800fffe:	2000      	movs	r0, #0
 8010000:	6360      	str	r0, [r4, #52]	; 0x34
 8010002:	e7c1      	b.n	800ff88 <__sflush_r+0x1c>
 8010004:	6a21      	ldr	r1, [r4, #32]
 8010006:	2301      	movs	r3, #1
 8010008:	4628      	mov	r0, r5
 801000a:	47b0      	blx	r6
 801000c:	1c41      	adds	r1, r0, #1
 801000e:	d1c7      	bne.n	800ffa0 <__sflush_r+0x34>
 8010010:	682b      	ldr	r3, [r5, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d0c4      	beq.n	800ffa0 <__sflush_r+0x34>
 8010016:	2b1d      	cmp	r3, #29
 8010018:	d001      	beq.n	801001e <__sflush_r+0xb2>
 801001a:	2b16      	cmp	r3, #22
 801001c:	d101      	bne.n	8010022 <__sflush_r+0xb6>
 801001e:	602f      	str	r7, [r5, #0]
 8010020:	e7b1      	b.n	800ff86 <__sflush_r+0x1a>
 8010022:	89a3      	ldrh	r3, [r4, #12]
 8010024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010028:	81a3      	strh	r3, [r4, #12]
 801002a:	e7ad      	b.n	800ff88 <__sflush_r+0x1c>
 801002c:	690f      	ldr	r7, [r1, #16]
 801002e:	2f00      	cmp	r7, #0
 8010030:	d0a9      	beq.n	800ff86 <__sflush_r+0x1a>
 8010032:	0793      	lsls	r3, r2, #30
 8010034:	680e      	ldr	r6, [r1, #0]
 8010036:	bf08      	it	eq
 8010038:	694b      	ldreq	r3, [r1, #20]
 801003a:	600f      	str	r7, [r1, #0]
 801003c:	bf18      	it	ne
 801003e:	2300      	movne	r3, #0
 8010040:	eba6 0807 	sub.w	r8, r6, r7
 8010044:	608b      	str	r3, [r1, #8]
 8010046:	f1b8 0f00 	cmp.w	r8, #0
 801004a:	dd9c      	ble.n	800ff86 <__sflush_r+0x1a>
 801004c:	6a21      	ldr	r1, [r4, #32]
 801004e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010050:	4643      	mov	r3, r8
 8010052:	463a      	mov	r2, r7
 8010054:	4628      	mov	r0, r5
 8010056:	47b0      	blx	r6
 8010058:	2800      	cmp	r0, #0
 801005a:	dc06      	bgt.n	801006a <__sflush_r+0xfe>
 801005c:	89a3      	ldrh	r3, [r4, #12]
 801005e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010062:	81a3      	strh	r3, [r4, #12]
 8010064:	f04f 30ff 	mov.w	r0, #4294967295
 8010068:	e78e      	b.n	800ff88 <__sflush_r+0x1c>
 801006a:	4407      	add	r7, r0
 801006c:	eba8 0800 	sub.w	r8, r8, r0
 8010070:	e7e9      	b.n	8010046 <__sflush_r+0xda>
 8010072:	bf00      	nop
 8010074:	20400001 	.word	0x20400001

08010078 <_fflush_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	690b      	ldr	r3, [r1, #16]
 801007c:	4605      	mov	r5, r0
 801007e:	460c      	mov	r4, r1
 8010080:	b913      	cbnz	r3, 8010088 <_fflush_r+0x10>
 8010082:	2500      	movs	r5, #0
 8010084:	4628      	mov	r0, r5
 8010086:	bd38      	pop	{r3, r4, r5, pc}
 8010088:	b118      	cbz	r0, 8010092 <_fflush_r+0x1a>
 801008a:	6983      	ldr	r3, [r0, #24]
 801008c:	b90b      	cbnz	r3, 8010092 <_fflush_r+0x1a>
 801008e:	f000 f887 	bl	80101a0 <__sinit>
 8010092:	4b14      	ldr	r3, [pc, #80]	; (80100e4 <_fflush_r+0x6c>)
 8010094:	429c      	cmp	r4, r3
 8010096:	d11b      	bne.n	80100d0 <_fflush_r+0x58>
 8010098:	686c      	ldr	r4, [r5, #4]
 801009a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d0ef      	beq.n	8010082 <_fflush_r+0xa>
 80100a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100a4:	07d0      	lsls	r0, r2, #31
 80100a6:	d404      	bmi.n	80100b2 <_fflush_r+0x3a>
 80100a8:	0599      	lsls	r1, r3, #22
 80100aa:	d402      	bmi.n	80100b2 <_fflush_r+0x3a>
 80100ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ae:	f7ff fcd0 	bl	800fa52 <__retarget_lock_acquire_recursive>
 80100b2:	4628      	mov	r0, r5
 80100b4:	4621      	mov	r1, r4
 80100b6:	f7ff ff59 	bl	800ff6c <__sflush_r>
 80100ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100bc:	07da      	lsls	r2, r3, #31
 80100be:	4605      	mov	r5, r0
 80100c0:	d4e0      	bmi.n	8010084 <_fflush_r+0xc>
 80100c2:	89a3      	ldrh	r3, [r4, #12]
 80100c4:	059b      	lsls	r3, r3, #22
 80100c6:	d4dd      	bmi.n	8010084 <_fflush_r+0xc>
 80100c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ca:	f7ff fcc3 	bl	800fa54 <__retarget_lock_release_recursive>
 80100ce:	e7d9      	b.n	8010084 <_fflush_r+0xc>
 80100d0:	4b05      	ldr	r3, [pc, #20]	; (80100e8 <_fflush_r+0x70>)
 80100d2:	429c      	cmp	r4, r3
 80100d4:	d101      	bne.n	80100da <_fflush_r+0x62>
 80100d6:	68ac      	ldr	r4, [r5, #8]
 80100d8:	e7df      	b.n	801009a <_fflush_r+0x22>
 80100da:	4b04      	ldr	r3, [pc, #16]	; (80100ec <_fflush_r+0x74>)
 80100dc:	429c      	cmp	r4, r3
 80100de:	bf08      	it	eq
 80100e0:	68ec      	ldreq	r4, [r5, #12]
 80100e2:	e7da      	b.n	801009a <_fflush_r+0x22>
 80100e4:	08010d34 	.word	0x08010d34
 80100e8:	08010d54 	.word	0x08010d54
 80100ec:	08010d14 	.word	0x08010d14

080100f0 <std>:
 80100f0:	2300      	movs	r3, #0
 80100f2:	b510      	push	{r4, lr}
 80100f4:	4604      	mov	r4, r0
 80100f6:	e9c0 3300 	strd	r3, r3, [r0]
 80100fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100fe:	6083      	str	r3, [r0, #8]
 8010100:	8181      	strh	r1, [r0, #12]
 8010102:	6643      	str	r3, [r0, #100]	; 0x64
 8010104:	81c2      	strh	r2, [r0, #14]
 8010106:	6183      	str	r3, [r0, #24]
 8010108:	4619      	mov	r1, r3
 801010a:	2208      	movs	r2, #8
 801010c:	305c      	adds	r0, #92	; 0x5c
 801010e:	f7fd fb6d 	bl	800d7ec <memset>
 8010112:	4b05      	ldr	r3, [pc, #20]	; (8010128 <std+0x38>)
 8010114:	6263      	str	r3, [r4, #36]	; 0x24
 8010116:	4b05      	ldr	r3, [pc, #20]	; (801012c <std+0x3c>)
 8010118:	62a3      	str	r3, [r4, #40]	; 0x28
 801011a:	4b05      	ldr	r3, [pc, #20]	; (8010130 <std+0x40>)
 801011c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801011e:	4b05      	ldr	r3, [pc, #20]	; (8010134 <std+0x44>)
 8010120:	6224      	str	r4, [r4, #32]
 8010122:	6323      	str	r3, [r4, #48]	; 0x30
 8010124:	bd10      	pop	{r4, pc}
 8010126:	bf00      	nop
 8010128:	0801043d 	.word	0x0801043d
 801012c:	0801045f 	.word	0x0801045f
 8010130:	08010497 	.word	0x08010497
 8010134:	080104bb 	.word	0x080104bb

08010138 <_cleanup_r>:
 8010138:	4901      	ldr	r1, [pc, #4]	; (8010140 <_cleanup_r+0x8>)
 801013a:	f000 b8af 	b.w	801029c <_fwalk_reent>
 801013e:	bf00      	nop
 8010140:	08010079 	.word	0x08010079

08010144 <__sfmoreglue>:
 8010144:	b570      	push	{r4, r5, r6, lr}
 8010146:	2268      	movs	r2, #104	; 0x68
 8010148:	1e4d      	subs	r5, r1, #1
 801014a:	4355      	muls	r5, r2
 801014c:	460e      	mov	r6, r1
 801014e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010152:	f7fd fbbf 	bl	800d8d4 <_malloc_r>
 8010156:	4604      	mov	r4, r0
 8010158:	b140      	cbz	r0, 801016c <__sfmoreglue+0x28>
 801015a:	2100      	movs	r1, #0
 801015c:	e9c0 1600 	strd	r1, r6, [r0]
 8010160:	300c      	adds	r0, #12
 8010162:	60a0      	str	r0, [r4, #8]
 8010164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010168:	f7fd fb40 	bl	800d7ec <memset>
 801016c:	4620      	mov	r0, r4
 801016e:	bd70      	pop	{r4, r5, r6, pc}

08010170 <__sfp_lock_acquire>:
 8010170:	4801      	ldr	r0, [pc, #4]	; (8010178 <__sfp_lock_acquire+0x8>)
 8010172:	f7ff bc6e 	b.w	800fa52 <__retarget_lock_acquire_recursive>
 8010176:	bf00      	nop
 8010178:	20001515 	.word	0x20001515

0801017c <__sfp_lock_release>:
 801017c:	4801      	ldr	r0, [pc, #4]	; (8010184 <__sfp_lock_release+0x8>)
 801017e:	f7ff bc69 	b.w	800fa54 <__retarget_lock_release_recursive>
 8010182:	bf00      	nop
 8010184:	20001515 	.word	0x20001515

08010188 <__sinit_lock_acquire>:
 8010188:	4801      	ldr	r0, [pc, #4]	; (8010190 <__sinit_lock_acquire+0x8>)
 801018a:	f7ff bc62 	b.w	800fa52 <__retarget_lock_acquire_recursive>
 801018e:	bf00      	nop
 8010190:	20001516 	.word	0x20001516

08010194 <__sinit_lock_release>:
 8010194:	4801      	ldr	r0, [pc, #4]	; (801019c <__sinit_lock_release+0x8>)
 8010196:	f7ff bc5d 	b.w	800fa54 <__retarget_lock_release_recursive>
 801019a:	bf00      	nop
 801019c:	20001516 	.word	0x20001516

080101a0 <__sinit>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4604      	mov	r4, r0
 80101a4:	f7ff fff0 	bl	8010188 <__sinit_lock_acquire>
 80101a8:	69a3      	ldr	r3, [r4, #24]
 80101aa:	b11b      	cbz	r3, 80101b4 <__sinit+0x14>
 80101ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101b0:	f7ff bff0 	b.w	8010194 <__sinit_lock_release>
 80101b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80101b8:	6523      	str	r3, [r4, #80]	; 0x50
 80101ba:	4b13      	ldr	r3, [pc, #76]	; (8010208 <__sinit+0x68>)
 80101bc:	4a13      	ldr	r2, [pc, #76]	; (801020c <__sinit+0x6c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80101c2:	42a3      	cmp	r3, r4
 80101c4:	bf04      	itt	eq
 80101c6:	2301      	moveq	r3, #1
 80101c8:	61a3      	streq	r3, [r4, #24]
 80101ca:	4620      	mov	r0, r4
 80101cc:	f000 f820 	bl	8010210 <__sfp>
 80101d0:	6060      	str	r0, [r4, #4]
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 f81c 	bl	8010210 <__sfp>
 80101d8:	60a0      	str	r0, [r4, #8]
 80101da:	4620      	mov	r0, r4
 80101dc:	f000 f818 	bl	8010210 <__sfp>
 80101e0:	2200      	movs	r2, #0
 80101e2:	60e0      	str	r0, [r4, #12]
 80101e4:	2104      	movs	r1, #4
 80101e6:	6860      	ldr	r0, [r4, #4]
 80101e8:	f7ff ff82 	bl	80100f0 <std>
 80101ec:	68a0      	ldr	r0, [r4, #8]
 80101ee:	2201      	movs	r2, #1
 80101f0:	2109      	movs	r1, #9
 80101f2:	f7ff ff7d 	bl	80100f0 <std>
 80101f6:	68e0      	ldr	r0, [r4, #12]
 80101f8:	2202      	movs	r2, #2
 80101fa:	2112      	movs	r1, #18
 80101fc:	f7ff ff78 	bl	80100f0 <std>
 8010200:	2301      	movs	r3, #1
 8010202:	61a3      	str	r3, [r4, #24]
 8010204:	e7d2      	b.n	80101ac <__sinit+0xc>
 8010206:	bf00      	nop
 8010208:	08010998 	.word	0x08010998
 801020c:	08010139 	.word	0x08010139

08010210 <__sfp>:
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010212:	4607      	mov	r7, r0
 8010214:	f7ff ffac 	bl	8010170 <__sfp_lock_acquire>
 8010218:	4b1e      	ldr	r3, [pc, #120]	; (8010294 <__sfp+0x84>)
 801021a:	681e      	ldr	r6, [r3, #0]
 801021c:	69b3      	ldr	r3, [r6, #24]
 801021e:	b913      	cbnz	r3, 8010226 <__sfp+0x16>
 8010220:	4630      	mov	r0, r6
 8010222:	f7ff ffbd 	bl	80101a0 <__sinit>
 8010226:	3648      	adds	r6, #72	; 0x48
 8010228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801022c:	3b01      	subs	r3, #1
 801022e:	d503      	bpl.n	8010238 <__sfp+0x28>
 8010230:	6833      	ldr	r3, [r6, #0]
 8010232:	b30b      	cbz	r3, 8010278 <__sfp+0x68>
 8010234:	6836      	ldr	r6, [r6, #0]
 8010236:	e7f7      	b.n	8010228 <__sfp+0x18>
 8010238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801023c:	b9d5      	cbnz	r5, 8010274 <__sfp+0x64>
 801023e:	4b16      	ldr	r3, [pc, #88]	; (8010298 <__sfp+0x88>)
 8010240:	60e3      	str	r3, [r4, #12]
 8010242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010246:	6665      	str	r5, [r4, #100]	; 0x64
 8010248:	f7ff fc02 	bl	800fa50 <__retarget_lock_init_recursive>
 801024c:	f7ff ff96 	bl	801017c <__sfp_lock_release>
 8010250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010258:	6025      	str	r5, [r4, #0]
 801025a:	61a5      	str	r5, [r4, #24]
 801025c:	2208      	movs	r2, #8
 801025e:	4629      	mov	r1, r5
 8010260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010264:	f7fd fac2 	bl	800d7ec <memset>
 8010268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801026c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010270:	4620      	mov	r0, r4
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010274:	3468      	adds	r4, #104	; 0x68
 8010276:	e7d9      	b.n	801022c <__sfp+0x1c>
 8010278:	2104      	movs	r1, #4
 801027a:	4638      	mov	r0, r7
 801027c:	f7ff ff62 	bl	8010144 <__sfmoreglue>
 8010280:	4604      	mov	r4, r0
 8010282:	6030      	str	r0, [r6, #0]
 8010284:	2800      	cmp	r0, #0
 8010286:	d1d5      	bne.n	8010234 <__sfp+0x24>
 8010288:	f7ff ff78 	bl	801017c <__sfp_lock_release>
 801028c:	230c      	movs	r3, #12
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	e7ee      	b.n	8010270 <__sfp+0x60>
 8010292:	bf00      	nop
 8010294:	08010998 	.word	0x08010998
 8010298:	ffff0001 	.word	0xffff0001

0801029c <_fwalk_reent>:
 801029c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102a0:	4606      	mov	r6, r0
 80102a2:	4688      	mov	r8, r1
 80102a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80102a8:	2700      	movs	r7, #0
 80102aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80102ae:	f1b9 0901 	subs.w	r9, r9, #1
 80102b2:	d505      	bpl.n	80102c0 <_fwalk_reent+0x24>
 80102b4:	6824      	ldr	r4, [r4, #0]
 80102b6:	2c00      	cmp	r4, #0
 80102b8:	d1f7      	bne.n	80102aa <_fwalk_reent+0xe>
 80102ba:	4638      	mov	r0, r7
 80102bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102c0:	89ab      	ldrh	r3, [r5, #12]
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d907      	bls.n	80102d6 <_fwalk_reent+0x3a>
 80102c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102ca:	3301      	adds	r3, #1
 80102cc:	d003      	beq.n	80102d6 <_fwalk_reent+0x3a>
 80102ce:	4629      	mov	r1, r5
 80102d0:	4630      	mov	r0, r6
 80102d2:	47c0      	blx	r8
 80102d4:	4307      	orrs	r7, r0
 80102d6:	3568      	adds	r5, #104	; 0x68
 80102d8:	e7e9      	b.n	80102ae <_fwalk_reent+0x12>

080102da <__swhatbuf_r>:
 80102da:	b570      	push	{r4, r5, r6, lr}
 80102dc:	460e      	mov	r6, r1
 80102de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e2:	2900      	cmp	r1, #0
 80102e4:	b096      	sub	sp, #88	; 0x58
 80102e6:	4614      	mov	r4, r2
 80102e8:	461d      	mov	r5, r3
 80102ea:	da08      	bge.n	80102fe <__swhatbuf_r+0x24>
 80102ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80102f0:	2200      	movs	r2, #0
 80102f2:	602a      	str	r2, [r5, #0]
 80102f4:	061a      	lsls	r2, r3, #24
 80102f6:	d410      	bmi.n	801031a <__swhatbuf_r+0x40>
 80102f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102fc:	e00e      	b.n	801031c <__swhatbuf_r+0x42>
 80102fe:	466a      	mov	r2, sp
 8010300:	f000 f902 	bl	8010508 <_fstat_r>
 8010304:	2800      	cmp	r0, #0
 8010306:	dbf1      	blt.n	80102ec <__swhatbuf_r+0x12>
 8010308:	9a01      	ldr	r2, [sp, #4]
 801030a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801030e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010312:	425a      	negs	r2, r3
 8010314:	415a      	adcs	r2, r3
 8010316:	602a      	str	r2, [r5, #0]
 8010318:	e7ee      	b.n	80102f8 <__swhatbuf_r+0x1e>
 801031a:	2340      	movs	r3, #64	; 0x40
 801031c:	2000      	movs	r0, #0
 801031e:	6023      	str	r3, [r4, #0]
 8010320:	b016      	add	sp, #88	; 0x58
 8010322:	bd70      	pop	{r4, r5, r6, pc}

08010324 <__smakebuf_r>:
 8010324:	898b      	ldrh	r3, [r1, #12]
 8010326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010328:	079d      	lsls	r5, r3, #30
 801032a:	4606      	mov	r6, r0
 801032c:	460c      	mov	r4, r1
 801032e:	d507      	bpl.n	8010340 <__smakebuf_r+0x1c>
 8010330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	6123      	str	r3, [r4, #16]
 8010338:	2301      	movs	r3, #1
 801033a:	6163      	str	r3, [r4, #20]
 801033c:	b002      	add	sp, #8
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	ab01      	add	r3, sp, #4
 8010342:	466a      	mov	r2, sp
 8010344:	f7ff ffc9 	bl	80102da <__swhatbuf_r>
 8010348:	9900      	ldr	r1, [sp, #0]
 801034a:	4605      	mov	r5, r0
 801034c:	4630      	mov	r0, r6
 801034e:	f7fd fac1 	bl	800d8d4 <_malloc_r>
 8010352:	b948      	cbnz	r0, 8010368 <__smakebuf_r+0x44>
 8010354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010358:	059a      	lsls	r2, r3, #22
 801035a:	d4ef      	bmi.n	801033c <__smakebuf_r+0x18>
 801035c:	f023 0303 	bic.w	r3, r3, #3
 8010360:	f043 0302 	orr.w	r3, r3, #2
 8010364:	81a3      	strh	r3, [r4, #12]
 8010366:	e7e3      	b.n	8010330 <__smakebuf_r+0xc>
 8010368:	4b0d      	ldr	r3, [pc, #52]	; (80103a0 <__smakebuf_r+0x7c>)
 801036a:	62b3      	str	r3, [r6, #40]	; 0x28
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	6020      	str	r0, [r4, #0]
 8010370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010374:	81a3      	strh	r3, [r4, #12]
 8010376:	9b00      	ldr	r3, [sp, #0]
 8010378:	6163      	str	r3, [r4, #20]
 801037a:	9b01      	ldr	r3, [sp, #4]
 801037c:	6120      	str	r0, [r4, #16]
 801037e:	b15b      	cbz	r3, 8010398 <__smakebuf_r+0x74>
 8010380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010384:	4630      	mov	r0, r6
 8010386:	f000 f8d1 	bl	801052c <_isatty_r>
 801038a:	b128      	cbz	r0, 8010398 <__smakebuf_r+0x74>
 801038c:	89a3      	ldrh	r3, [r4, #12]
 801038e:	f023 0303 	bic.w	r3, r3, #3
 8010392:	f043 0301 	orr.w	r3, r3, #1
 8010396:	81a3      	strh	r3, [r4, #12]
 8010398:	89a0      	ldrh	r0, [r4, #12]
 801039a:	4305      	orrs	r5, r0
 801039c:	81a5      	strh	r5, [r4, #12]
 801039e:	e7cd      	b.n	801033c <__smakebuf_r+0x18>
 80103a0:	08010139 	.word	0x08010139

080103a4 <_malloc_usable_size_r>:
 80103a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103a8:	1f18      	subs	r0, r3, #4
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	bfbc      	itt	lt
 80103ae:	580b      	ldrlt	r3, [r1, r0]
 80103b0:	18c0      	addlt	r0, r0, r3
 80103b2:	4770      	bx	lr

080103b4 <_raise_r>:
 80103b4:	291f      	cmp	r1, #31
 80103b6:	b538      	push	{r3, r4, r5, lr}
 80103b8:	4604      	mov	r4, r0
 80103ba:	460d      	mov	r5, r1
 80103bc:	d904      	bls.n	80103c8 <_raise_r+0x14>
 80103be:	2316      	movs	r3, #22
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	f04f 30ff 	mov.w	r0, #4294967295
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103ca:	b112      	cbz	r2, 80103d2 <_raise_r+0x1e>
 80103cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103d0:	b94b      	cbnz	r3, 80103e6 <_raise_r+0x32>
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 f830 	bl	8010438 <_getpid_r>
 80103d8:	462a      	mov	r2, r5
 80103da:	4601      	mov	r1, r0
 80103dc:	4620      	mov	r0, r4
 80103de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103e2:	f000 b817 	b.w	8010414 <_kill_r>
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d00a      	beq.n	8010400 <_raise_r+0x4c>
 80103ea:	1c59      	adds	r1, r3, #1
 80103ec:	d103      	bne.n	80103f6 <_raise_r+0x42>
 80103ee:	2316      	movs	r3, #22
 80103f0:	6003      	str	r3, [r0, #0]
 80103f2:	2001      	movs	r0, #1
 80103f4:	e7e7      	b.n	80103c6 <_raise_r+0x12>
 80103f6:	2400      	movs	r4, #0
 80103f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103fc:	4628      	mov	r0, r5
 80103fe:	4798      	blx	r3
 8010400:	2000      	movs	r0, #0
 8010402:	e7e0      	b.n	80103c6 <_raise_r+0x12>

08010404 <raise>:
 8010404:	4b02      	ldr	r3, [pc, #8]	; (8010410 <raise+0xc>)
 8010406:	4601      	mov	r1, r0
 8010408:	6818      	ldr	r0, [r3, #0]
 801040a:	f7ff bfd3 	b.w	80103b4 <_raise_r>
 801040e:	bf00      	nop
 8010410:	20000324 	.word	0x20000324

08010414 <_kill_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4d07      	ldr	r5, [pc, #28]	; (8010434 <_kill_r+0x20>)
 8010418:	2300      	movs	r3, #0
 801041a:	4604      	mov	r4, r0
 801041c:	4608      	mov	r0, r1
 801041e:	4611      	mov	r1, r2
 8010420:	602b      	str	r3, [r5, #0]
 8010422:	f7f4 fd08 	bl	8004e36 <_kill>
 8010426:	1c43      	adds	r3, r0, #1
 8010428:	d102      	bne.n	8010430 <_kill_r+0x1c>
 801042a:	682b      	ldr	r3, [r5, #0]
 801042c:	b103      	cbz	r3, 8010430 <_kill_r+0x1c>
 801042e:	6023      	str	r3, [r4, #0]
 8010430:	bd38      	pop	{r3, r4, r5, pc}
 8010432:	bf00      	nop
 8010434:	20001510 	.word	0x20001510

08010438 <_getpid_r>:
 8010438:	f7f4 bcf5 	b.w	8004e26 <_getpid>

0801043c <__sread>:
 801043c:	b510      	push	{r4, lr}
 801043e:	460c      	mov	r4, r1
 8010440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010444:	f000 f894 	bl	8010570 <_read_r>
 8010448:	2800      	cmp	r0, #0
 801044a:	bfab      	itete	ge
 801044c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801044e:	89a3      	ldrhlt	r3, [r4, #12]
 8010450:	181b      	addge	r3, r3, r0
 8010452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010456:	bfac      	ite	ge
 8010458:	6563      	strge	r3, [r4, #84]	; 0x54
 801045a:	81a3      	strhlt	r3, [r4, #12]
 801045c:	bd10      	pop	{r4, pc}

0801045e <__swrite>:
 801045e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010462:	461f      	mov	r7, r3
 8010464:	898b      	ldrh	r3, [r1, #12]
 8010466:	05db      	lsls	r3, r3, #23
 8010468:	4605      	mov	r5, r0
 801046a:	460c      	mov	r4, r1
 801046c:	4616      	mov	r6, r2
 801046e:	d505      	bpl.n	801047c <__swrite+0x1e>
 8010470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010474:	2302      	movs	r3, #2
 8010476:	2200      	movs	r2, #0
 8010478:	f000 f868 	bl	801054c <_lseek_r>
 801047c:	89a3      	ldrh	r3, [r4, #12]
 801047e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010486:	81a3      	strh	r3, [r4, #12]
 8010488:	4632      	mov	r2, r6
 801048a:	463b      	mov	r3, r7
 801048c:	4628      	mov	r0, r5
 801048e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010492:	f000 b817 	b.w	80104c4 <_write_r>

08010496 <__sseek>:
 8010496:	b510      	push	{r4, lr}
 8010498:	460c      	mov	r4, r1
 801049a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801049e:	f000 f855 	bl	801054c <_lseek_r>
 80104a2:	1c43      	adds	r3, r0, #1
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	bf15      	itete	ne
 80104a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80104aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104b2:	81a3      	strheq	r3, [r4, #12]
 80104b4:	bf18      	it	ne
 80104b6:	81a3      	strhne	r3, [r4, #12]
 80104b8:	bd10      	pop	{r4, pc}

080104ba <__sclose>:
 80104ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104be:	f000 b813 	b.w	80104e8 <_close_r>
	...

080104c4 <_write_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	4d07      	ldr	r5, [pc, #28]	; (80104e4 <_write_r+0x20>)
 80104c8:	4604      	mov	r4, r0
 80104ca:	4608      	mov	r0, r1
 80104cc:	4611      	mov	r1, r2
 80104ce:	2200      	movs	r2, #0
 80104d0:	602a      	str	r2, [r5, #0]
 80104d2:	461a      	mov	r2, r3
 80104d4:	f7f4 fce6 	bl	8004ea4 <_write>
 80104d8:	1c43      	adds	r3, r0, #1
 80104da:	d102      	bne.n	80104e2 <_write_r+0x1e>
 80104dc:	682b      	ldr	r3, [r5, #0]
 80104de:	b103      	cbz	r3, 80104e2 <_write_r+0x1e>
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	bd38      	pop	{r3, r4, r5, pc}
 80104e4:	20001510 	.word	0x20001510

080104e8 <_close_r>:
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4d06      	ldr	r5, [pc, #24]	; (8010504 <_close_r+0x1c>)
 80104ec:	2300      	movs	r3, #0
 80104ee:	4604      	mov	r4, r0
 80104f0:	4608      	mov	r0, r1
 80104f2:	602b      	str	r3, [r5, #0]
 80104f4:	f7f4 fcf2 	bl	8004edc <_close>
 80104f8:	1c43      	adds	r3, r0, #1
 80104fa:	d102      	bne.n	8010502 <_close_r+0x1a>
 80104fc:	682b      	ldr	r3, [r5, #0]
 80104fe:	b103      	cbz	r3, 8010502 <_close_r+0x1a>
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	bd38      	pop	{r3, r4, r5, pc}
 8010504:	20001510 	.word	0x20001510

08010508 <_fstat_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4d07      	ldr	r5, [pc, #28]	; (8010528 <_fstat_r+0x20>)
 801050c:	2300      	movs	r3, #0
 801050e:	4604      	mov	r4, r0
 8010510:	4608      	mov	r0, r1
 8010512:	4611      	mov	r1, r2
 8010514:	602b      	str	r3, [r5, #0]
 8010516:	f7f4 fced 	bl	8004ef4 <_fstat>
 801051a:	1c43      	adds	r3, r0, #1
 801051c:	d102      	bne.n	8010524 <_fstat_r+0x1c>
 801051e:	682b      	ldr	r3, [r5, #0]
 8010520:	b103      	cbz	r3, 8010524 <_fstat_r+0x1c>
 8010522:	6023      	str	r3, [r4, #0]
 8010524:	bd38      	pop	{r3, r4, r5, pc}
 8010526:	bf00      	nop
 8010528:	20001510 	.word	0x20001510

0801052c <_isatty_r>:
 801052c:	b538      	push	{r3, r4, r5, lr}
 801052e:	4d06      	ldr	r5, [pc, #24]	; (8010548 <_isatty_r+0x1c>)
 8010530:	2300      	movs	r3, #0
 8010532:	4604      	mov	r4, r0
 8010534:	4608      	mov	r0, r1
 8010536:	602b      	str	r3, [r5, #0]
 8010538:	f7f4 fcec 	bl	8004f14 <_isatty>
 801053c:	1c43      	adds	r3, r0, #1
 801053e:	d102      	bne.n	8010546 <_isatty_r+0x1a>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	b103      	cbz	r3, 8010546 <_isatty_r+0x1a>
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	20001510 	.word	0x20001510

0801054c <_lseek_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d07      	ldr	r5, [pc, #28]	; (801056c <_lseek_r+0x20>)
 8010550:	4604      	mov	r4, r0
 8010552:	4608      	mov	r0, r1
 8010554:	4611      	mov	r1, r2
 8010556:	2200      	movs	r2, #0
 8010558:	602a      	str	r2, [r5, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	f7f4 fce5 	bl	8004f2a <_lseek>
 8010560:	1c43      	adds	r3, r0, #1
 8010562:	d102      	bne.n	801056a <_lseek_r+0x1e>
 8010564:	682b      	ldr	r3, [r5, #0]
 8010566:	b103      	cbz	r3, 801056a <_lseek_r+0x1e>
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	bd38      	pop	{r3, r4, r5, pc}
 801056c:	20001510 	.word	0x20001510

08010570 <_read_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4d07      	ldr	r5, [pc, #28]	; (8010590 <_read_r+0x20>)
 8010574:	4604      	mov	r4, r0
 8010576:	4608      	mov	r0, r1
 8010578:	4611      	mov	r1, r2
 801057a:	2200      	movs	r2, #0
 801057c:	602a      	str	r2, [r5, #0]
 801057e:	461a      	mov	r2, r3
 8010580:	f7f4 fc73 	bl	8004e6a <_read>
 8010584:	1c43      	adds	r3, r0, #1
 8010586:	d102      	bne.n	801058e <_read_r+0x1e>
 8010588:	682b      	ldr	r3, [r5, #0]
 801058a:	b103      	cbz	r3, 801058e <_read_r+0x1e>
 801058c:	6023      	str	r3, [r4, #0]
 801058e:	bd38      	pop	{r3, r4, r5, pc}
 8010590:	20001510 	.word	0x20001510

08010594 <_init>:
 8010594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010596:	bf00      	nop
 8010598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801059a:	bc08      	pop	{r3}
 801059c:	469e      	mov	lr, r3
 801059e:	4770      	bx	lr

080105a0 <_fini>:
 80105a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105a2:	bf00      	nop
 80105a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105a6:	bc08      	pop	{r3}
 80105a8:	469e      	mov	lr, r3
 80105aa:	4770      	bx	lr
