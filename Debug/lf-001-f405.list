
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  08010d98  08010d98  00020d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011624  08011624  000304f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011624  08011624  00021624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801162c  0801162c  000304f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801162c  0801162c  0002162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011630  08011630  00021630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  08011634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304f8  2**0
                  CONTENTS
 10 .bss          00001030  200004f8  200004f8  000304f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001528  20001528  000304f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f78a  00000000  00000000  00030528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ac2  00000000  00000000  0004fcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  00054778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001820  00000000  00000000  00056188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000415a4  00000000  00000000  000579a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023985  00000000  00000000  00098f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130a91  00000000  00000000  000bc8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ed362  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ed0  00000000  00000000  001ed3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f8 	.word	0x200004f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010d7c 	.word	0x08010d7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004fc 	.word	0x200004fc
 80001cc:	08010d7c 	.word	0x08010d7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa0:	4a7e      	ldr	r2, [pc, #504]	; (800119c <MX_ADC1_Init+0x210>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fcc:	4a74      	ldr	r2, [pc, #464]	; (80011a0 <MX_ADC1_Init+0x214>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd8:	220e      	movs	r2, #14
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	486b      	ldr	r0, [pc, #428]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fec:	f007 ff26 	bl	8008e3c <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f001 f99a 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4863      	ldr	r0, [pc, #396]	; (8001198 <MX_ADC1_Init+0x20c>)
 800100c:	f008 f998 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f001 f98a 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	485c      	ldr	r0, [pc, #368]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001028:	f008 f98a 	bl	8009340 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001032:	f001 f97c 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001036:	230e      	movs	r3, #14
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001044:	f008 f97c 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104e:	f001 f96e 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001052:	230b      	movs	r3, #11
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001060:	f008 f96e 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800106a:	f001 f960 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106e:	2307      	movs	r3, #7
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001072:	2305      	movs	r3, #5
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <MX_ADC1_Init+0x20c>)
 800107c:	f008 f960 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001086:	f001 f952 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800108a:	230c      	movs	r3, #12
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001098:	f008 f952 	bl	8009340 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010a2:	f001 f944 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a6:	2306      	movs	r3, #6
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010b8:	f008 f942 	bl	8009340 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010c2:	f001 f934 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c6:	230d      	movs	r3, #13
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010d8:	f008 f932 	bl	8009340 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010e2:	f001 f924 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010f4:	f008 f924 	bl	8009340 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010fe:	f001 f916 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001106:	230a      	movs	r3, #10
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001110:	f008 f916 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 800111a:	f001 f908 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111e:	2304      	movs	r3, #4
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001122:	230b      	movs	r3, #11
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <MX_ADC1_Init+0x20c>)
 800112c:	f008 f908 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001136:	f001 f8fa 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113a:	2301      	movs	r3, #1
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001148:	f008 f8fa 	bl	8009340 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001152:	f001 f8ec 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001156:	2303      	movs	r3, #3
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800115a:	230d      	movs	r3, #13
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001164:	f008 f8ec 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800116e:	f001 f8de 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001176:	230e      	movs	r3, #14
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001180:	f008 f8de 	bl	8009340 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 800118a:	f001 f8d0 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000514 	.word	0x20000514
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_ADC_MspInit+0x11c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d178      	bne.n	80012b8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x124>)
 800122e:	f008 ffcd 	bl	800a1cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x128>)
 8001246:	f008 ffc1 	bl	800a1cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_ADC_MspInit+0x130>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800128e:	f008 fc2d 	bl	8009aec <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001298:	f001 f849 	bl	800232e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2012      	movs	r0, #18
 80012ae:	f008 fbe2 	bl	8009a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f008 fbfb 	bl	8009aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	2000055c 	.word	0x2000055c
 80012d4:	40026410 	.word	0x40026410

080012d8 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	2100      	movs	r1, #0
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <DISP_ClearBuff+0x14>)
 80012e4:	f00c fe76 	bl	800dfd4 <memset>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005bc 	.word	0x200005bc

080012f0 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d03a      	beq.n	800138c <DISP_DrawPixel+0x9c>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc39      	bgt.n	800138e <DISP_DrawPixel+0x9e>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <DISP_DrawPixel+0x34>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d019      	beq.n	8001356 <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 8001322:	e034      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	491c      	ldr	r1, [pc, #112]	; (800139c <DISP_DrawPixel+0xac>)
 800132a:	01d2      	lsls	r2, r2, #7
 800132c:	440a      	add	r2, r1
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b2c8      	uxtb	r0, r1
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <DISP_DrawPixel+0xac>)
 800134a:	01d2      	lsls	r2, r2, #7
 800134c:	440a      	add	r2, r1
 800134e:	4413      	add	r3, r2
 8001350:	4602      	mov	r2, r0
 8001352:	701a      	strb	r2, [r3, #0]
		break;
 8001354:	e01b      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4910      	ldr	r1, [pc, #64]	; (800139c <DISP_DrawPixel+0xac>)
 800135c:	01d2      	lsls	r2, r2, #7
 800135e:	440a      	add	r2, r1
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4013      	ands	r3, r2
 8001376:	b259      	sxtb	r1, r3
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	b2c8      	uxtb	r0, r1
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <DISP_DrawPixel+0xac>)
 8001380:	01d2      	lsls	r2, r2, #7
 8001382:	440a      	add	r2, r1
 8001384:	4413      	add	r3, r2
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <DISP_DrawPixel+0x9e>
		break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200005bc 	.word	0x200005bc

080013a0 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e08d      	b.n	80014f4 <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	dd01      	ble.n	80013e6 <DISP_DrawChar+0x46>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08b      	b.n	80014fe <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f1a3 0220 	sub.w	r2, r3, #32
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a44      	ldr	r2, [pc, #272]	; (8001508 <DISP_DrawChar+0x168>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f1a3 0220 	sub.w	r2, r3, #32
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <DISP_DrawChar+0x168>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	461a      	mov	r2, r3
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f1c3 0308 	rsb	r3, r3, #8
 8001422:	fa42 f303 	asr.w	r3, r2, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e050      	b.n	80014d2 <DISP_DrawChar+0x132>
			switch(color) {
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d049      	beq.n	80014ca <DISP_DrawChar+0x12a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc48      	bgt.n	80014cc <DISP_DrawChar+0x12c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <DISP_DrawChar+0xa4>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01f      	beq.n	8001482 <DISP_DrawChar+0xe2>
 8001442:	e043      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	441a      	add	r2, r3
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	440b      	add	r3, r1
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <DISP_DrawChar+0x16c>)
 8001452:	01d2      	lsls	r2, r2, #7
 8001454:	440a      	add	r2, r1
 8001456:	4413      	add	r3, r2
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	441a      	add	r2, r3
 800146a:	79bc      	ldrb	r4, [r7, #6]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4423      	add	r3, r4
 8001470:	4301      	orrs	r1, r0
 8001472:	b2c8      	uxtb	r0, r1
 8001474:	4925      	ldr	r1, [pc, #148]	; (800150c <DISP_DrawChar+0x16c>)
 8001476:	01d2      	lsls	r2, r2, #7
 8001478:	440a      	add	r2, r1
 800147a:	4413      	add	r3, r2
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
				break;
 8001480:	e024      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	441a      	add	r2, r3
 8001488:	79b9      	ldrb	r1, [r7, #6]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	440b      	add	r3, r1
 800148e:	491f      	ldr	r1, [pc, #124]	; (800150c <DISP_DrawChar+0x16c>)
 8001490:	01d2      	lsls	r2, r2, #7
 8001492:	440a      	add	r2, r1
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b258      	sxtb	r0, r3
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	441a      	add	r2, r3
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	440b      	add	r3, r1
 80014ba:	b2c0      	uxtb	r0, r0
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <DISP_DrawChar+0x16c>)
 80014be:	01d2      	lsls	r2, r2, #7
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	4602      	mov	r2, r0
 80014c6:	701a      	strb	r2, [r3, #0]
				break;
 80014c8:	e000      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014ca:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <DISP_DrawChar+0x13c>
 80014d8:	2202      	movs	r2, #2
 80014da:	e000      	b.n	80014de <DISP_DrawChar+0x13e>
 80014dc:	2201      	movs	r2, #1
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dd04      	ble.n	80014ee <DISP_DrawChar+0x14e>
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	dda0      	ble.n	8001430 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	f77f af6e 	ble.w	80013d8 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc90      	pop	{r4, r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	200005bc 	.word	0x200005bc

08001510 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	460b      	mov	r3, r1
 8001524:	70bb      	strb	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	while(*text)
 800152e:	e015      	b.n	800155c <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	73fa      	strb	r2, [r7, #15]
 800153e:	461a      	mov	r2, r3
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	4413      	add	r3, r2
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	787b      	ldrb	r3, [r7, #1]
 8001550:	78ba      	ldrb	r2, [r7, #2]
 8001552:	f7ff ff25 	bl	80013a0 <DISP_DrawChar>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <DISP_DrawText+0x56>
	while(*text)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <DISP_DrawText+0x20>
}
 8001564:	e000      	b.n	8001568 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001566:	bf00      	nop
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4603      	mov	r3, r0
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	717b      	strb	r3, [r7, #5]
 800158a:	4613      	mov	r3, r2
 800158c:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 800158e:	793a      	ldrb	r2, [r7, #4]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d104      	bne.n	80015a0 <DISP_DrawLineSimple+0x30>
 8001596:	797a      	ldrb	r2, [r7, #5]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	429a      	cmp	r2, r3
 800159c:	f000 8086 	beq.w	80016ac <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 80015a0:	797a      	ldrb	r2, [r7, #5]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	7939      	ldrb	r1, [r7, #4]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db3e      	blt.n	800162e <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015b0:	793a      	ldrb	r2, [r7, #4]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015be:	797a      	ldrb	r2, [r7, #5]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e022      	b.n	8001620 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	ee07 2a90 	vmov	s15, r2
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f6:	79ba      	ldrb	r2, [r7, #6]
 80015f8:	ee07 2a90 	vmov	s15, r2
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001608:	edc7 7a00 	vstr	s15, [r7]
 800160c:	783a      	ldrb	r2, [r7, #0]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe6b 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	ddd6      	ble.n	80015da <DISP_DrawLineSimple+0x6a>
 800162c:	e03f      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 800162e:	797a      	ldrb	r2, [r7, #5]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163c:	793a      	ldrb	r2, [r7, #4]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e022      	b.n	800169e <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	edc7 7a00 	vstr	s15, [r7]
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fe2c 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	793a      	ldrb	r2, [r7, #4]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	ddd6      	ble.n	8001658 <DISP_DrawLineSimple+0xe8>
 80016aa:	e000      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016ac:	bf00      	nop
		}
	}
}
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	4603      	mov	r3, r0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	717b      	strb	r3, [r7, #5]
 80016ce:	4613      	mov	r3, r2
 80016d0:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016d2:	79bc      	ldrb	r4, [r7, #6]
 80016d4:	797a      	ldrb	r2, [r7, #5]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	79f8      	ldrb	r0, [r7, #7]
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4623      	mov	r3, r4
 80016e0:	f7ff ff46 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016e4:	793c      	ldrb	r4, [r7, #4]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	79b9      	ldrb	r1, [r7, #6]
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	7e3b      	ldrb	r3, [r7, #24]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7ff ff3d 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016f6:	793c      	ldrb	r4, [r7, #4]
 80016f8:	797a      	ldrb	r2, [r7, #5]
 80016fa:	79b9      	ldrb	r1, [r7, #6]
 80016fc:	7978      	ldrb	r0, [r7, #5]
 80016fe:	7e3b      	ldrb	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff ff34 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001708:	793c      	ldrb	r4, [r7, #4]
 800170a:	797a      	ldrb	r2, [r7, #5]
 800170c:	7939      	ldrb	r1, [r7, #4]
 800170e:	79f8      	ldrb	r0, [r7, #7]
 8001710:	7e3b      	ldrb	r3, [r7, #24]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7ff ff2b 	bl	8001570 <DISP_DrawLineSimple>
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
	...

08001724 <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 8001724:	b490      	push	{r4, r7}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	4603      	mov	r3, r0
 8001738:	71bb      	strb	r3, [r7, #6]
 800173a:	460b      	mov	r3, r1
 800173c:	717b      	strb	r3, [r7, #5]
 800173e:	4613      	mov	r3, r2
 8001740:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 8001756:	793b      	ldrb	r3, [r7, #4]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e074      	b.n	800184e <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e06a      	b.n	8001840 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <DISP_FillRect+0x62>
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d005      	beq.n	8001786 <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e022      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 8001786:	7bba      	ldrb	r2, [r7, #14]
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d110      	bne.n	80017b0 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	f1c3 0308 	rsb	r3, r3, #8
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	fa41 f303 	asr.w	r3, r1, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00d      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	fa42 f303 	asr.w	r3, r2, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e001      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d031      	beq.n	8001838 <DISP_FillRect+0x114>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dc30      	bgt.n	800183a <DISP_FillRect+0x116>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DISP_FillRect+0xbe>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d013      	beq.n	8001808 <DISP_FillRect+0xe4>
 80017e0:	e02b      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <DISP_FillRect+0x140>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	441a      	add	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <DISP_FillRect+0x140>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	441a      	add	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4413      	add	r3, r2
 8001802:	460a      	mov	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
				break;
 8001806:	e018      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <DISP_FillRect+0x140>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	43db      	mvns	r3, r3
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4013      	ands	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <DISP_FillRect+0x140>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	441a      	add	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
				break;
 8001836:	e000      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001838:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	dd90      	ble.n	800176a <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dd86      	ble.n	8001764 <DISP_FillRect+0x40>
			}
		}
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bc90      	pop	{r4, r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200005bc 	.word	0x200005bc

08001868 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e002      	b.n	800187c <DISP_CountCharString+0x14>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f6      	bne.n	8001876 <DISP_CountCharString+0xe>
	return ct;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f7ff ffe0 	bl	8001868 <DISP_CountCharString>
 80018a8:	4603      	mov	r3, r0
 80018aa:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	461a      	mov	r2, r3
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	757b      	strb	r3, [r7, #21]
 80018d2:	e005      	b.n	80018e0 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	4413      	add	r3, r2
 80018de:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d804      	bhi.n	80018f2 <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	3308      	adds	r3, #8
 80018ee:	753b      	strb	r3, [r7, #20]
 80018f0:	e005      	b.n	80018fe <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7818      	ldrb	r0, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461c      	mov	r4, r3
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	7d7a      	ldrb	r2, [r7, #21]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	f7ff ff02 	bl	8001724 <DISP_FillRect>

	switch(s->align_x) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d010      	beq.n	800194a <DISP_DisplayText+0xb2>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc20      	bgt.n	800196e <DISP_DisplayText+0xd6>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <DISP_DisplayText+0x9e>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <DISP_DisplayText+0xa8>
 8001934:	e01b      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
		break;
 800193e:	e016      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001940:	7d7a      	ldrb	r2, [r7, #21]
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	75fb      	strb	r3, [r7, #23]
		break;
 8001948:	e011      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	7d7b      	ldrb	r3, [r7, #21]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	7809      	ldrb	r1, [r1, #0]
 8001954:	1a5b      	subs	r3, r3, r1
 8001956:	0fd9      	lsrs	r1, r3, #31
 8001958:	440b      	add	r3, r1
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	75fb      	strb	r3, [r7, #23]
		break;
 800196c:	bf00      	nop
	}

	switch(s->align_y) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	799b      	ldrb	r3, [r3, #6]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d00f      	beq.n	8001996 <DISP_DisplayText+0xfe>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc1c      	bgt.n	80019b4 <DISP_DisplayText+0x11c>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <DISP_DisplayText+0xec>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d005      	beq.n	800198e <DISP_DisplayText+0xf6>
 8001982:	e017      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	3301      	adds	r3, #1
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e012      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	3b07      	subs	r3, #7
 8001992:	75bb      	strb	r3, [r7, #22]
		break;
 8001994:	e00e      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	785a      	ldrb	r2, [r3, #1]
 800199a:	7d3b      	ldrb	r3, [r7, #20]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	7849      	ldrb	r1, [r1, #1]
 80019a0:	1a5b      	subs	r3, r3, r1
 80019a2:	0fd9      	lsrs	r1, r3, #31
 80019a4:	440b      	add	r3, r1
 80019a6:	105b      	asrs	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b03      	subs	r3, #3
 80019b0:	75bb      	strb	r3, [r7, #22]
		break;
 80019b2:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	7dba      	ldrb	r2, [r7, #22]
 80019ba:	7df9      	ldrb	r1, [r7, #23]
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f7ff fda7 	bl	8001510 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019ca:	7d3b      	ldrb	r3, [r7, #20]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e024      	b.n	8001a20 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 ff02 	bl	80027e4 <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 ff12 	bl	800280e <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e00c      	b.n	8001a0c <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <DISP_DisplayText+0x1a0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fed7 	bl	80027b4 <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dc02      	bgt.n	8001a1a <DISP_DisplayText+0x182>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	ddeb      	ble.n	80019f2 <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dc02      	bgt.n	8001a2e <DISP_DisplayText+0x196>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	ddd3      	ble.n	80019d6 <DISP_DisplayText+0x13e>
		}
	}

}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005bc 	.word	0x200005bc

08001a3c <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	460b      	mov	r3, r1
 8001a54:	717b      	strb	r3, [r7, #5]
 8001a56:	4613      	mov	r3, r2
 8001a58:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e022      	b.n	8001ab2 <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 feb7 	bl	80027e4 <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fec8 	bl	800280e <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00c      	b.n	8001a9e <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <DISP_OLEDUpdate+0x8c>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe8e 	bl	80027b4 <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dc02      	bgt.n	8001aac <DISP_OLEDUpdate+0x70>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aaa:	ddeb      	ble.n	8001a84 <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dc02      	bgt.n	8001ac0 <DISP_OLEDUpdate+0x84>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	ddd5      	ble.n	8001a6c <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	200005bc 	.word	0x200005bc

08001acc <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785a      	ldrb	r2, [r3, #1]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001af0:	4413      	add	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	4622      	mov	r2, r4
 8001afe:	f7ff fe11 	bl	8001724 <DISP_FillRect>
			s->color);
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
	...

08001b0c <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b12:	2300      	movs	r3, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <DISP_Test+0x108>)
 8001b1a:	f7ff fcf9 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2208      	movs	r2, #8
 8001b22:	2100      	movs	r1, #0
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <DISP_Test+0x10c>)
 8001b26:	f7ff fcf3 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	2100      	movs	r1, #0
 8001b30:	483a      	ldr	r0, [pc, #232]	; (8001c1c <DISP_Test+0x110>)
 8001b32:	f7ff fced 	bl	8001510 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	233e      	movs	r3, #62	; 0x3e
 8001b3c:	227a      	movs	r2, #122	; 0x7a
 8001b3e:	211e      	movs	r1, #30
 8001b40:	203e      	movs	r0, #62	; 0x3e
 8001b42:	f7ff fdb7 	bl	80016b4 <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	233c      	movs	r3, #60	; 0x3c
 8001b4c:	2278      	movs	r2, #120	; 0x78
 8001b4e:	2120      	movs	r1, #32
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	f7ff fde7 	bl	8001724 <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b56:	2301      	movs	r3, #1
 8001b58:	222a      	movs	r2, #42	; 0x2a
 8001b5a:	2151      	movs	r1, #81	; 0x51
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <DISP_Test+0x114>)
 8001b5e:	f7ff fcd7 	bl	8001510 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e01d      	b.n	8001ba4 <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fe39 	bl	80027e4 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fe4b 	bl	800280e <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	e00c      	b.n	8001b98 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <DISP_Test+0x118>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	441a      	add	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fe11 	bl	80027b4 <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddef      	ble.n	8001b7e <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	ddde      	ble.n	8001b68 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e022      	b.n	8001bf6 <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fe13 	bl	80027e4 <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f000 fe25 	bl	800280e <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00f      	b.n	8001bea <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <DISP_Test+0x11c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fde8 	bl	80027b4 <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b27      	cmp	r3, #39	; 0x27
 8001bee:	ddec      	ble.n	8001bca <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	ddd9      	ble.n	8001bb0 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c00:	f007 f8f8 	bl	8008df4 <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c04:	f000 fe1d 	bl	8002842 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c08:	f7ff fb66 	bl	80012d8 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	08010d98 	.word	0x08010d98
 8001c18:	08010dac 	.word	0x08010dac
 8001c1c:	08010dc0 	.word	0x08010dc0
 8001c20:	08010dc8 	.word	0x08010dc8
 8001c24:	200005bc 	.word	0x200005bc
 8001c28:	200001e8 	.word	0x200001e8

08001c2c <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c30:	f000 fe07 	bl	8002842 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c34:	f7ff fb50 	bl	80012d8 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c38:	20af      	movs	r0, #175	; 0xaf
 8001c3a:	f000 fd8f 	bl	800275c <OLED_Command>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2038      	movs	r0, #56	; 0x38
 8001c6c:	f007 ff03 	bl	8009a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c70:	2038      	movs	r0, #56	; 0x38
 8001c72:	f007 ff1c 	bl	8009aae <HAL_NVIC_EnableIRQ>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <EEP_Init+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200009bc 	.word	0x200009bc

08001ca4 <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <EEP_WritePage+0x40>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	89fa      	ldrh	r2, [r7, #14]
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21a0      	movs	r1, #160	; 0xa0
 8001ccc:	f008 fd90 	bl	800a7f0 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cd0:	f007 f884 	bl	8008ddc <HAL_GetTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <EEP_WritePage+0x44>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200009bc 	.word	0x200009bc
 8001ce8:	200009c0 	.word	0x200009c0

08001cec <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <EEP_WriteMem+0x40>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	9102      	str	r1, [sp, #8]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	21a0      	movs	r1, #160	; 0xa0
 8001d14:	f008 fd6c 	bl	800a7f0 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d18:	f007 f860 	bl	8008ddc <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <EEP_WriteMem+0x44>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009bc 	.word	0x200009bc
 8001d30:	200009c0 	.word	0x200009c0

08001d34 <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <EEP_ReadPage+0x40>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	89fa      	ldrh	r2, [r7, #14]
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	21a0      	movs	r1, #160	; 0xa0
 8001d5c:	f008 fe42 	bl	800a9e4 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <EEP_ReadPage+0x44>)
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200009bc 	.word	0x200009bc
 8001d78:	200009c4 	.word	0x200009c4

08001d7c <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <EEP_ReadMem+0x44>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	21a0      	movs	r1, #160	; 0xa0
 8001da4:	f008 fe1e 	bl	800a9e4 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <EEP_ReadMem+0x48>)
 8001db4:	801a      	strh	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200009bc 	.word	0x200009bc
 8001dc4:	200009c4 	.word	0x200009c4

08001dc8 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dcc:	f007 f806 	bl	8008ddc <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <EEP_ReadyToWrite+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d901      	bls.n	8001de0 <EEP_ReadyToWrite+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <EEP_ReadyToWrite+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200009c0 	.word	0x200009c0

08001dec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3e      	ldr	r2, [pc, #248]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001e7a:	f008 fb5b 	bl	800a534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001e86:	f008 fb55 	bl	800a534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ea0:	f008 f994 	bl	800a1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ebe:	f008 f985 	bl	800a1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001edc:	f008 f976 	bl	800a1cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ee0:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001ee4:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001ef6:	f008 f969 	bl	800a1cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001f14:	f008 f95a 	bl	800a1cc <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400

08001f2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x58>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <MX_I2C1_Init+0x5c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f6c:	f008 fafc 	bl	800a568 <HAL_I2C_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f76:	f000 f9da 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009c8 	.word	0x200009c8
 8001f84:	40005400 	.word	0x40005400
 8001f88:	00061a80 	.word	0x00061a80

08001f8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <MX_I2C2_Init+0x58>)
 8001f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <MX_I2C2_Init+0x5c>)
 8001f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fcc:	f008 facc 	bl	800a568 <HAL_I2C_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001fd6:	f000 f9aa 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000a1c 	.word	0x20000a1c
 8001fe4:	40005800 	.word	0x40005800
 8001fe8:	00061a80 	.word	0x00061a80

08001fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <HAL_I2C_MspInit+0xec>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12d      	bne.n	800206a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203c:	2304      	movs	r3, #4
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	4826      	ldr	r0, [pc, #152]	; (80020e0 <HAL_I2C_MspInit+0xf4>)
 8002048:	f008 f8c0 	bl	800a1cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002068:	e031      	b.n	80020ce <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_I2C_MspInit+0xf8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d12c      	bne.n	80020ce <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002090:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002096:	2312      	movs	r3, #18
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020a2:	2304      	movs	r3, #4
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <HAL_I2C_MspInit+0xf4>)
 80020ae:	f008 f88d 	bl	800a1cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 80020bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	; 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40005400 	.word	0x40005400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40005800 	.word	0x40005800

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ec:	f006 fe10 	bl	8008d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f0:	f000 f860 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f4:	f7ff fe7a 	bl	8001dec <MX_GPIO_Init>
  MX_DMA_Init();
 80020f8:	f7ff fda4 	bl	8001c44 <MX_DMA_Init>
  MX_ADC1_Init();
 80020fc:	f7fe ff46 	bl	8000f8c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002100:	f7ff ff14 	bl	8001f2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002104:	f7ff ff42 	bl	8001f8c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002108:	f003 f98c 	bl	8005424 <MX_TIM1_Init>
  MX_TIM2_Init();
 800210c:	f003 fa42 	bl	8005594 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002110:	f003 fa94 	bl	800563c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002114:	f003 fb0c 	bl	8005730 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002118:	f006 fd56 	bl	8008bc8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800211c:	f006 fce2 	bl	8008ae4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002120:	f003 fb5a 	bl	80057d8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002124:	481b      	ldr	r0, [pc, #108]	; (8002194 <main+0xac>)
 8002126:	f7ff fdad 	bl	8001c84 <EEP_Init>
  SEN_Init(&hadc1);
 800212a:	481b      	ldr	r0, [pc, #108]	; (8002198 <main+0xb0>)
 800212c:	f002 f81a 	bl	8004164 <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002130:	213c      	movs	r1, #60	; 0x3c
 8002132:	481a      	ldr	r0, [pc, #104]	; (800219c <main+0xb4>)
 8002134:	f00a fa08 	bl	800c548 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002138:	213c      	movs	r1, #60	; 0x3c
 800213a:	4819      	ldr	r0, [pc, #100]	; (80021a0 <main+0xb8>)
 800213c:	f00a fa04 	bl	800c548 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002140:	2100      	movs	r1, #0
 8002142:	4818      	ldr	r0, [pc, #96]	; (80021a4 <main+0xbc>)
 8002144:	f00a f892 	bl	800c26c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002148:	2104      	movs	r1, #4
 800214a:	4816      	ldr	r0, [pc, #88]	; (80021a4 <main+0xbc>)
 800214c:	f00a f88e 	bl	800c26c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002150:	2108      	movs	r1, #8
 8002152:	4814      	ldr	r0, [pc, #80]	; (80021a4 <main+0xbc>)
 8002154:	f00a f88a 	bl	800c26c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002158:	210c      	movs	r1, #12
 800215a:	4812      	ldr	r0, [pc, #72]	; (80021a4 <main+0xbc>)
 800215c:	f00a f886 	bl	800c26c <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8002160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002164:	f006 fe46 	bl	8008df4 <HAL_Delay>
  Run_Init();
 8002168:	f001 fb52 	bl	8003810 <Run_Init>
  OLED_Init(&hi2c1);
 800216c:	480e      	ldr	r0, [pc, #56]	; (80021a8 <main+0xc0>)
 800216e:	f000 fb8d 	bl	800288c <OLED_Init>
  DISP_Test();
 8002172:	f7ff fccb 	bl	8001b0c <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <main+0xc4>)
 800217e:	f008 f9d9 	bl	800a534 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <main+0xc8>)
 8002184:	f009 ffb2 	bl	800c0ec <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002188:	f006 fc20 	bl	80089cc <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 800218c:	f006 fc2c 	bl	80089e8 <UI_Main>
 8002190:	e7fc      	b.n	800218c <main+0xa4>
 8002192:	bf00      	nop
 8002194:	20000a1c 	.word	0x20000a1c
 8002198:	20000514 	.word	0x20000514
 800219c:	20000db0 	.word	0x20000db0
 80021a0:	20000e40 	.word	0x20000e40
 80021a4:	20000df8 	.word	0x20000df8
 80021a8:	200009c8 	.word	0x200009c8
 80021ac:	40020800 	.word	0x40020800
 80021b0:	20000e88 	.word	0x20000e88

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b094      	sub	sp, #80	; 0x50
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2230      	movs	r2, #48	; 0x30
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00b ff06 	bl	800dfd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <SystemClock_Config+0xcc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <SystemClock_Config+0xcc>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <SystemClock_Config+0xd0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <SystemClock_Config+0xd0>)
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221a:	2302      	movs	r3, #2
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002224:	2308      	movs	r3, #8
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002228:	23a8      	movs	r3, #168	; 0xa8
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222c:	2302      	movs	r3, #2
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002230:	2307      	movs	r3, #7
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	4618      	mov	r0, r3
 800223a:	f009 fa71 	bl	800b720 <HAL_RCC_OscConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002244:	f000 f873 	bl	800232e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	230f      	movs	r3, #15
 800224a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800225a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2105      	movs	r1, #5
 8002266:	4618      	mov	r0, r3
 8002268:	f009 fcd2 	bl	800bc10 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002272:	f000 f85c 	bl	800232e <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	; 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12d      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a2:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		Plan_Main(0.001);
 80022a4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002308 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022a8:	f001 f916 	bl	80034d8 <Plan_Main>
		if(counter >= 10) {
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	dd0d      	ble.n	80022d0 <HAL_TIM_PeriodElapsedCallback+0x48>
			Run_MotorRoutine(0.01);
 80022b4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x84>
 80022b8:	f001 fb16 	bl	80038e8 <Run_MotorRoutine>
			main_flag |= MAIN_FLAG_DISP;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022c8:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
		}
			Run_MotorRoutine2(0.001);
 80022d0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002308 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022d4:	f001 fb5c 	bl	8003990 <Run_MotorRoutine2>
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022e4:	f001 ffd0 	bl	8004288 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40001000 	.word	0x40001000
 8002304:	20000a74 	.word	0x20000a74
 8002308:	3a83126f 	.word	0x3a83126f
 800230c:	3c23d70a 	.word	0x3c23d70a
 8002310:	20000a70 	.word	0x20000a70
 8002314:	20000ca5 	.word	0x20000ca5

08002318 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f001 ffc1 	bl	80042a8 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002332:	b672      	cpsid	i
}
 8002334:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002336:	e7fe      	b.n	8002336 <Error_Handler+0x8>

08002338 <Motor_SetPWM>:

void Motor_Init(Motor_typedef* hmot) {

}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002344:	edd7 7a00 	vldr	s15, [r7]
 8002348:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002384 <Motor_SetPWM+0x4c>
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	dd02      	ble.n	800235c <Motor_SetPWM+0x24>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <Motor_SetPWM+0x50>)
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	e00a      	b.n	8002372 <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 800235c:	edd7 7a00 	vldr	s15, [r7]
 8002360:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800238c <Motor_SetPWM+0x54>
 8002364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d501      	bpl.n	8002372 <Motor_SetPWM+0x3a>
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <Motor_SetPWM+0x58>)
 8002370:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	619a      	str	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	42c60000 	.word	0x42c60000
 8002388:	42c60000 	.word	0x42c60000
 800238c:	c2c60000 	.word	0xc2c60000
 8002390:	c2c60000 	.word	0xc2c60000

08002394 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023a6:	ed97 7a00 	vldr	s14, [r7]
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023b2:	edd7 7a00 	vldr	s15, [r7]
 80023b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	841a      	strh	r2, [r3, #32]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <Motor_SetPoint+0x1a>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d006      	beq.n	80023f6 <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023e8:	e00b      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023ea:	ed97 0a00 	vldr	s0, [r7]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <Motor_SetPWM>
		break;
 80023f4:	e005      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 80023f6:	ed97 0a00 	vldr	s0, [r7]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffca 	bl	8002394 <Motor_SetVel>
		break;
 8002400:	bf00      	nop
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	int16_t tim_period = (hmot->pwm*hmot->pwm_factor)*hmot->pwm_htim->Init.Period;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	ed93 7a06 	vldr	s14, [r3, #24]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edd3 7a07 	vldr	s15, [r3, #28]
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	0bdb      	lsrs	r3, r3, #15
 8002442:	b2db      	uxtb	r3, r3
 8002444:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <Motor_ApplyPWM+0x4a>
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	425b      	negs	r3, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002454:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	429a      	cmp	r2, r3
 8002460:	d903      	bls.n	800246a <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 800246a:	7b7b      	ldrb	r3, [r7, #13]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04a      	beq.n	8002506 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	891b      	ldrh	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <Motor_ApplyPWM+0x7a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
 8002482:	e018      	b.n	80024b6 <Motor_ApplyPWM+0xac>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	891b      	ldrh	r3, [r3, #8]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d105      	bne.n	8002498 <Motor_ApplyPWM+0x8e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	6393      	str	r3, [r2, #56]	; 0x38
 8002496:	e00e      	b.n	80024b6 <Motor_ApplyPWM+0xac>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	891b      	ldrh	r3, [r3, #8]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d105      	bne.n	80024ac <Motor_ApplyPWM+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024aa:	e004      	b.n	80024b6 <Motor_ApplyPWM+0xac>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	895b      	ldrh	r3, [r3, #10]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <Motor_ApplyPWM+0xc2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 80024ca:	e067      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	895b      	ldrh	r3, [r3, #10]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d106      	bne.n	80024e2 <Motor_ApplyPWM+0xd8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024de:	6393      	str	r3, [r2, #56]	; 0x38
 80024e0:	e05c      	b.n	800259c <Motor_ApplyPWM+0x192>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	895b      	ldrh	r3, [r3, #10]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d106      	bne.n	80024f8 <Motor_ApplyPWM+0xee>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024f6:	e051      	b.n	800259c <Motor_ApplyPWM+0x192>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002502:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002504:	e04a      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	891b      	ldrh	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <Motor_ApplyPWM+0x112>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
 800251a:	e01b      	b.n	8002554 <Motor_ApplyPWM+0x14a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	891b      	ldrh	r3, [r3, #8]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d106      	bne.n	8002532 <Motor_ApplyPWM+0x128>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800252e:	6393      	str	r3, [r2, #56]	; 0x38
 8002530:	e010      	b.n	8002554 <Motor_ApplyPWM+0x14a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	891b      	ldrh	r3, [r3, #8]
 8002536:	2b08      	cmp	r3, #8
 8002538:	d106      	bne.n	8002548 <Motor_ApplyPWM+0x13e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002544:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002546:	e005      	b.n	8002554 <Motor_ApplyPWM+0x14a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	895b      	ldrh	r3, [r3, #10]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <Motor_ApplyPWM+0x15e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002566:	e019      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	895b      	ldrh	r3, [r3, #10]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d105      	bne.n	800257c <Motor_ApplyPWM+0x172>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	6393      	str	r3, [r2, #56]	; 0x38
}
 800257a:	e00f      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	895b      	ldrh	r3, [r3, #10]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d105      	bne.n	8002590 <Motor_ApplyPWM+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2300      	movs	r3, #0
 800258c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800258e:	e005      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
}
 800259a:	e7ff      	b.n	800259c <Motor_ApplyPWM+0x192>
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = __HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	fb12 f303 	smulbb	r3, r2, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  tim_cnt_now - hmot->enc_cnt;
 80025ce:	89fa      	ldrh	r2, [r7, #14]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b21a      	sxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	82da      	strh	r2, [r3, #22]
	hmot->enc_cnt = tim_cnt_now;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	89fa      	ldrh	r2, [r7, #14]
 80025e6:	829a      	strh	r2, [r3, #20]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	0000      	movs	r0, r0
	...

080025f8 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8099 	beq.w	8002740 <Motor_ControlRoutine+0x148>
 800260e:	2b01      	cmp	r3, #1
 8002610:	f040 8099 	bne.w	8002746 <Motor_ControlRoutine+0x14e>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	ee07 3a90 	vmov	s15, r3
 8002628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262c:	edc7 7a03 	vstr	s15, [r7, #12]
		if(hmot->vel_sp == 0) hmot->sum_error=0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <Motor_ControlRoutine+0x4a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	dd07      	ble.n	800265c <Motor_ControlRoutine+0x64>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	d40c      	bmi.n	8002676 <Motor_ControlRoutine+0x7e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da0b      	bge.n	800267e <Motor_ControlRoutine+0x86>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	edd3 7a06 	vldr	s15, [r3, #24]
 800266c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	dd03      	ble.n	800267e <Motor_ControlRoutine+0x86>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002684:	edd7 7a03 	vldr	s15, [r7, #12]
 8002688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800269c:	edd7 7a00 	vldr	s15, [r7]
 80026a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a8:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90) {
 80026ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002758 <Motor_ControlRoutine+0x160>
 80026b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd13      	ble.n	80026e6 <Motor_ControlRoutine+0xee>
			hmot->sum_error*=0.9;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff40 	bl	8000548 <__aeabi_f2d>
 80026c8:	a321      	add	r3, pc, #132	; (adr r3, 8002750 <Motor_ControlRoutine+0x158>)
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f7fd ff93 	bl	80005f8 <__aeabi_dmul>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa85 	bl	8000be8 <__aeabi_d2f>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34
 80026e4:	e009      	b.n	80026fa <Motor_ControlRoutine+0x102>
		}
		else {
			hmot->sum_error += error;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80026ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		}
		hmot->pwm = mv;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	619a      	str	r2, [r3, #24]
		hmot->last_error = error;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30

		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002716:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800271a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edd3 6a06 	vldr	s13, [r3, #24]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		hmot->pwm = hmot->filter;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fe62 	bl	800240a <Motor_ApplyPWM>
	}
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	cccccccd 	.word	0xcccccccd
 8002754:	3feccccc 	.word	0x3feccccc
 8002758:	42b40000 	.word	0x42b40000

0800275c <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af04      	add	r7, sp, #16
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <OLED_Command+0x2c>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	230a      	movs	r3, #10
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	2301      	movs	r3, #1
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2301      	movs	r3, #1
 8002778:	2200      	movs	r2, #0
 800277a:	2178      	movs	r1, #120	; 0x78
 800277c:	f008 f838 	bl	800a7f0 <HAL_I2C_Mem_Write>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000a78 	.word	0x20000a78

0800278c <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	460a      	mov	r2, r1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4613      	mov	r3, r2
 800279a:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ffdc 	bl	800275c <OLED_Command>
	OLED_Command(byte2);
 80027a4:	79bb      	ldrb	r3, [r7, #6]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ffd8 	bl	800275c <OLED_Command>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <OLED_Data+0x2c>)
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	230a      	movs	r3, #10
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2301      	movs	r3, #1
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	2178      	movs	r1, #120	; 0x78
 80027d4:	f008 f80c 	bl	800a7f0 <HAL_I2C_Mem_Write>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000a78 	.word	0x20000a78

080027e4 <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ffab 	bl	800275c <OLED_Command>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	3302      	adds	r3, #2
 800281c:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	b2da      	uxtb	r2, r3
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f7ff ffa9 	bl	800278c <OLED_DoubleCommand>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	e016      	b.n	800287c <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ffc6 	bl	80027e4 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff ffd8 	bl	800280e <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	e005      	b.n	8002870 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff ffa5 	bl	80027b4 <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b7f      	cmp	r3, #127	; 0x7f
 8002874:	ddf6      	ble.n	8002864 <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b07      	cmp	r3, #7
 8002880:	dde5      	ble.n	800284e <OLED_ClearRAM+0xc>
			}
		}
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 8002894:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <OLED_Init+0x6c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 800289a:	20ae      	movs	r0, #174	; 0xae
 800289c:	f7ff ff5e 	bl	800275c <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 80028a0:	213f      	movs	r1, #63	; 0x3f
 80028a2:	20a8      	movs	r0, #168	; 0xa8
 80028a4:	f7ff ff72 	bl	800278c <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 80028a8:	2100      	movs	r1, #0
 80028aa:	20d3      	movs	r0, #211	; 0xd3
 80028ac:	f7ff ff6e 	bl	800278c <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 80028b0:	2040      	movs	r0, #64	; 0x40
 80028b2:	f7ff ff53 	bl	800275c <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 80028b6:	20a1      	movs	r0, #161	; 0xa1
 80028b8:	f7ff ff50 	bl	800275c <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 80028bc:	20c8      	movs	r0, #200	; 0xc8
 80028be:	f7ff ff4d 	bl	800275c <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 80028c2:	2112      	movs	r1, #18
 80028c4:	20da      	movs	r0, #218	; 0xda
 80028c6:	f7ff ff61 	bl	800278c <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 80028ca:	2160      	movs	r1, #96	; 0x60
 80028cc:	2081      	movs	r0, #129	; 0x81
 80028ce:	f7ff ff5d 	bl	800278c <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 80028d2:	20a4      	movs	r0, #164	; 0xa4
 80028d4:	f7ff ff42 	bl	800275c <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 80028d8:	20a6      	movs	r0, #166	; 0xa6
 80028da:	f7ff ff3f 	bl	800275c <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 80028de:	21f0      	movs	r1, #240	; 0xf0
 80028e0:	20d5      	movs	r0, #213	; 0xd5
 80028e2:	f7ff ff53 	bl	800278c <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 80028e6:	f7ff ffac 	bl	8002842 <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 80028ea:	20af      	movs	r0, #175	; 0xaf
 80028ec:	f7ff ff36 	bl	800275c <OLED_Command>
//	OLED_Load();
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000a78 	.word	0x20000a78

080028fc <Plan_SetCounter>:

uint8_t counter_status = 0;
uint8_t action_status = 0;
uint8_t acc_status = 0;

void Plan_SetCounter() {
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <Plan_SetCounter+0x18>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <Plan_SetCounter+0x1c>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000a7c 	.word	0x20000a7c
 8002918:	20000a80 	.word	0x20000a80

0800291c <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <Plan_CheckCounterValue+0x34>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <Plan_CheckCounterValue+0x38>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1ad1      	subs	r1, r2, r3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4299      	cmp	r1, r3
 800293a:	bf2c      	ite	cs
 800293c:	2301      	movcs	r3, #1
 800293e:	2300      	movcc	r3, #0
 8002940:	b2db      	uxtb	r3, r3
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000a7c 	.word	0x20000a7c
 8002954:	20000a80 	.word	0x20000a80

08002958 <Plan_CounterValue>:

uint32_t Plan_CounterValue() {
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	return (plan_counter - plan_last_counter);
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <Plan_CounterValue+0x18>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <Plan_CounterValue+0x1c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	1ad3      	subs	r3, r2, r3
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20000a7c 	.word	0x20000a7c
 8002974:	20000a80 	.word	0x20000a80

08002978 <Plan_CheckSensor>:

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	460a      	mov	r2, r1
 8002982:	71fb      	strb	r3, [r7, #7]
 8002984:	4613      	mov	r3, r2
 8002986:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <Plan_CheckSensor+0x1a>
 800298e:	2301      	movs	r3, #1
 8002990:	e02c      	b.n	80029ec <Plan_CheckSensor+0x74>
	else {
		s-=1;
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	3b01      	subs	r3, #1
 8002996:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d002      	beq.n	80029a4 <Plan_CheckSensor+0x2c>
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d009      	beq.n	80029b6 <Plan_CheckSensor+0x3e>
 80029a2:	e019      	b.n	80029d8 <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <Plan_CheckSensor+0x80>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e01a      	b.n	80029ec <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <Plan_CheckSensor+0x80>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <Plan_CheckSensor+0x56>
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f1c3 030d 	rsb	r3, r3, #13
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <Plan_CheckSensor+0x80>)
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <Plan_CheckSensor+0x5a>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <Plan_CheckSensor+0x5c>
 80029d2:	2300      	movs	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e009      	b.n	80029ec <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	f1c3 030d 	rsb	r3, r3, #13
 80029de:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <Plan_CheckSensor+0x80>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
		}
	}
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	20000b78 	.word	0x20000b78
 80029fc:	00000000 	.word	0x00000000

08002a00 <Plan_Left>:

uint8_t Plan_Left(Action_typedef a) {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 8002a0c:	797b      	ldrb	r3, [r7, #5]
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ffb1 	bl	8002978 <Plan_CheckSensor>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <Plan_Left+0x38>
 8002a1c:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <Plan_Left+0x128>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <Plan_Left+0x38>
			Plan_SetCounter();
 8002a24:	f7ff ff6a 	bl	80028fc <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002a28:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <Plan_Left+0x12c>)
 8002a2a:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002a2e:	4b40      	ldr	r3, [pc, #256]	; (8002b30 <Plan_Left+0x130>)
 8002a30:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <Plan_Left+0x128>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <Plan_Left+0x128>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d168      	bne.n	8002b12 <Plan_Left+0x112>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002a40:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <Plan_Left+0x134>)
 8002a48:	7ddb      	ldrb	r3, [r3, #23]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd68 	bl	8000524 <__aeabi_i2d>
 8002a54:	a332      	add	r3, pc, #200	; (adr r3, 8002b20 <Plan_Left+0x120>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fdcd 	bl	80005f8 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7fe f8bf 	bl	8000be8 <__aeabi_d2f>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <Plan_Left+0x134>)
 8002a74:	7ddb      	ldrb	r3, [r3, #23]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd52 	bl	8000524 <__aeabi_i2d>
 8002a80:	a327      	add	r3, pc, #156	; (adr r3, 8002b20 <Plan_Left+0x120>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f7fd fdb7 	bl	80005f8 <__aeabi_dmul>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe f8a9 	bl	8000be8 <__aeabi_d2f>
 8002a96:	4603      	mov	r3, r0
 8002a98:	ee00 3a90 	vmov	s1, r3
 8002a9c:	ee00 4a10 	vmov	s0, r4
 8002aa0:	f001 fb46 	bl	8004130 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002aa4:	79bb      	ldrb	r3, [r7, #6]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d01f      	beq.n	8002aea <Plan_Left+0xea>
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	dc2f      	bgt.n	8002b0e <Plan_Left+0x10e>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <Plan_Left+0xb8>
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d009      	beq.n	8002aca <Plan_Left+0xca>
 8002ab6:	e02a      	b.n	8002b0e <Plan_Left+0x10e>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff2e 	bl	800291c <Plan_CheckCounterValue>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01e      	beq.n	8002b04 <Plan_Left+0x104>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e024      	b.n	8002b14 <Plan_Left+0x114>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff25 	bl	800291c <Plan_CheckCounterValue>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <Plan_Left+0x108>
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) return 2;
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2005      	movs	r0, #5
 8002adc:	f7ff ff4c 	bl	8002978 <Plan_CheckSensor>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d010      	beq.n	8002b08 <Plan_Left+0x108>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e014      	b.n	8002b14 <Plan_Left+0x114>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <Plan_Left+0x12c>)
 8002aec:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <Plan_Left+0x130>)
 8002af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	dd05      	ble.n	8002b0c <Plan_Left+0x10c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e007      	b.n	8002b14 <Plan_Left+0x114>
			break;
 8002b04:	bf00      	nop
 8002b06:	e002      	b.n	8002b0e <Plan_Left+0x10e>
			break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <Plan_Left+0x10e>
			break;
 8002b0c:	bf00      	nop
		}
		return 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <Plan_Left+0x114>
	}
	return 0;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}
 8002b1c:	f3af 8000 	nop.w
 8002b20:	9999999a 	.word	0x9999999a
 8002b24:	3fb99999 	.word	0x3fb99999
 8002b28:	20000a86 	.word	0x20000a86
 8002b2c:	20000a8c 	.word	0x20000a8c
 8002b30:	20000a84 	.word	0x20000a84
 8002b34:	20000d3c 	.word	0x20000d3c

08002b38 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002b44:	797b      	ldrb	r3, [r7, #5]
 8002b46:	2101      	movs	r1, #1
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff15 	bl	8002978 <Plan_CheckSensor>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <Plan_Right+0x38>
 8002b54:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <Plan_Right+0x128>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <Plan_Right+0x38>
			Plan_SetCounter();
 8002b5c:	f7ff fece 	bl	80028fc <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <Plan_Right+0x12c>)
 8002b62:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <Plan_Right+0x130>)
 8002b68:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <Plan_Right+0x128>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <Plan_Right+0x128>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d168      	bne.n	8002c4a <Plan_Right+0x112>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002b78:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <Plan_Right+0x134>)
 8002b80:	7ddb      	ldrb	r3, [r3, #23]
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fccc 	bl	8000524 <__aeabi_i2d>
 8002b8c:	a332      	add	r3, pc, #200	; (adr r3, 8002c58 <Plan_Right+0x120>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	f7fd fd31 	bl	80005f8 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fe f823 	bl	8000be8 <__aeabi_d2f>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <Plan_Right+0x134>)
 8002bac:	7ddb      	ldrb	r3, [r3, #23]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcb6 	bl	8000524 <__aeabi_i2d>
 8002bb8:	a327      	add	r3, pc, #156	; (adr r3, 8002c58 <Plan_Right+0x120>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	f7fd fd1b 	bl	80005f8 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f7fe f80d 	bl	8000be8 <__aeabi_d2f>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	ee00 3a90 	vmov	s1, r3
 8002bd4:	ee00 4a10 	vmov	s0, r4
 8002bd8:	f001 faaa 	bl	8004130 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d01f      	beq.n	8002c22 <Plan_Right+0xea>
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	dc2f      	bgt.n	8002c46 <Plan_Right+0x10e>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <Plan_Right+0xb8>
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d009      	beq.n	8002c02 <Plan_Right+0xca>
 8002bee:	e02a      	b.n	8002c46 <Plan_Right+0x10e>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fe92 	bl	800291c <Plan_CheckCounterValue>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01e      	beq.n	8002c3c <Plan_Right+0x104>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e024      	b.n	8002c4c <Plan_Right+0x114>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fe89 	bl	800291c <Plan_CheckCounterValue>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <Plan_Right+0x108>
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) return 2;
 8002c10:	2101      	movs	r1, #1
 8002c12:	2005      	movs	r0, #5
 8002c14:	f7ff feb0 	bl	8002978 <Plan_CheckSensor>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <Plan_Right+0x108>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e014      	b.n	8002c4c <Plan_Right+0x114>
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <Plan_Right+0x12c>)
 8002c24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <Plan_Right+0x130>)
 8002c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	79fa      	ldrb	r2, [r7, #7]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	dd05      	ble.n	8002c44 <Plan_Right+0x10c>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e007      	b.n	8002c4c <Plan_Right+0x114>
			break;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <Plan_Right+0x10e>
			break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <Plan_Right+0x10e>
			break;
 8002c44:	bf00      	nop
		}
		return 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <Plan_Right+0x114>
	}
	return 0;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	f3af 8000 	nop.w
 8002c58:	9999999a 	.word	0x9999999a
 8002c5c:	3fb99999 	.word	0x3fb99999
 8002c60:	20000a86 	.word	0x20000a86
 8002c64:	20000a8c 	.word	0x20000a8c
 8002c68:	20000a84 	.word	0x20000a84
 8002c6c:	20000d3c 	.word	0x20000d3c

08002c70 <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	1d3c      	adds	r4, r7, #4
 8002c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c7c:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002c7e:	797b      	ldrb	r3, [r7, #5]
 8002c80:	2102      	movs	r1, #2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe78 	bl	8002978 <Plan_CheckSensor>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <Plan_Forward+0x44>
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <Plan_Forward+0xf8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10e      	bne.n	8002cb4 <Plan_Forward+0x44>
			Plan_SetCounter();
 8002c96:	f7ff fe31 	bl	80028fc <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002c9a:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <Plan_Forward+0xfc>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <Plan_Forward+0x100>)
 8002cac:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002cae:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <Plan_Forward+0xf8>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <Plan_Forward+0xf8>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d150      	bne.n	8002d5e <Plan_Forward+0xee>
		Run_SetMotorSpeed(_speed, _speed);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	ee07 3a10 	vmov	s14, r3
 8002ccc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002cd0:	eef0 0a47 	vmov.f32	s1, s14
 8002cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd8:	f001 fa2a 	bl	8004130 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002cdc:	79bb      	ldrb	r3, [r7, #6]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d01f      	beq.n	8002d22 <Plan_Forward+0xb2>
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	dc39      	bgt.n	8002d5a <Plan_Forward+0xea>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <Plan_Forward+0x80>
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d009      	beq.n	8002d02 <Plan_Forward+0x92>
 8002cee:	e034      	b.n	8002d5a <Plan_Forward+0xea>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe12 	bl	800291c <Plan_CheckCounterValue>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d02a      	beq.n	8002d54 <Plan_Forward+0xe4>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e02e      	b.n	8002d60 <Plan_Forward+0xf0>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fe09 	bl	800291c <Plan_CheckCounterValue>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <Plan_Forward+0xe8>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002d10:	2102      	movs	r1, #2
 8002d12:	2007      	movs	r0, #7
 8002d14:	f7ff fe30 	bl	8002978 <Plan_CheckSensor>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01c      	beq.n	8002d58 <Plan_Forward+0xe8>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e01e      	b.n	8002d60 <Plan_Forward+0xf0>
			break;
		case 2:
			if(robot_enc_pos - plan_last_enc > a.act_value) return 2;
 8002d22:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <Plan_Forward+0xfc>)
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <Plan_Forward+0x100>)
 8002d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	dc00      	bgt.n	8002d50 <Plan_Forward+0xe0>
			break;
 8002d4e:	e004      	b.n	8002d5a <Plan_Forward+0xea>
			if(robot_enc_pos - plan_last_enc > a.act_value) return 2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	e005      	b.n	8002d60 <Plan_Forward+0xf0>
			break;
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <Plan_Forward+0xea>
			break;
 8002d58:	bf00      	nop
		}
		return 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <Plan_Forward+0xf0>
	}
	return 0;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	20000a86 	.word	0x20000a86
 8002d6c:	20000b0c 	.word	0x20000b0c
 8002d70:	20000a84 	.word	0x20000a84

08002d74 <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	1d3c      	adds	r4, r7, #4
 8002d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d80:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002d82:	797b      	ldrb	r3, [r7, #5]
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fdf6 	bl	8002978 <Plan_CheckSensor>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <Plan_Backward+0x44>
 8002d92:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <Plan_Backward+0xfc>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <Plan_Backward+0x44>
			Plan_SetCounter();
 8002d9a:	f7ff fdaf 	bl	80028fc <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002d9e:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <Plan_Backward+0x100>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da8:	ee17 3a90 	vmov	r3, s15
 8002dac:	b21a      	sxth	r2, r3
 8002dae:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <Plan_Backward+0x104>)
 8002db0:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002db2:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <Plan_Backward+0xfc>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <Plan_Backward+0xfc>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d152      	bne.n	8002e66 <Plan_Backward+0xf2>
		Run_SetMotorSpeed(-_speed, -_speed);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	425b      	negs	r3, r3
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	425b      	negs	r3, r3
 8002dd0:	ee07 3a10 	vmov	s14, r3
 8002dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dd8:	eef0 0a47 	vmov.f32	s1, s14
 8002ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8002de0:	f001 f9a6 	bl	8004130 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d01f      	beq.n	8002e2a <Plan_Backward+0xb6>
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	dc39      	bgt.n	8002e62 <Plan_Backward+0xee>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <Plan_Backward+0x84>
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d009      	beq.n	8002e0a <Plan_Backward+0x96>
 8002df6:	e034      	b.n	8002e62 <Plan_Backward+0xee>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fd8e 	bl	800291c <Plan_CheckCounterValue>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02a      	beq.n	8002e5c <Plan_Backward+0xe8>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e02e      	b.n	8002e68 <Plan_Backward+0xf4>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fd85 	bl	800291c <Plan_CheckCounterValue>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d023      	beq.n	8002e60 <Plan_Backward+0xec>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002e18:	2102      	movs	r1, #2
 8002e1a:	2007      	movs	r0, #7
 8002e1c:	f7ff fdac 	bl	8002978 <Plan_CheckSensor>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01c      	beq.n	8002e60 <Plan_Backward+0xec>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e01e      	b.n	8002e68 <Plan_Backward+0xf4>
			break;
		case 2:
			if(plan_last_enc - robot_enc_pos > a.act_value) return 2;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <Plan_Backward+0x104>)
 8002e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <Plan_Backward+0x100>)
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	dc00      	bgt.n	8002e58 <Plan_Backward+0xe4>
			break;
 8002e56:	e004      	b.n	8002e62 <Plan_Backward+0xee>
			if(plan_last_enc - robot_enc_pos > a.act_value) return 2;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e005      	b.n	8002e68 <Plan_Backward+0xf4>
			break;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <Plan_Backward+0xee>
			break;
 8002e60:	bf00      	nop
		}
		return 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <Plan_Backward+0xf4>
	}
	return 0;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	20000a86 	.word	0x20000a86
 8002e74:	20000b0c 	.word	0x20000b0c
 8002e78:	20000a84 	.word	0x20000a84

08002e7c <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <Plan_Follow+0x7c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <Plan_Follow+0x28>
		Plan_SetCounter();
 8002e90:	f7ff fd34 	bl	80028fc <Plan_SetCounter>
		plan_last_enc = MOTOR_L.enc_cnt;
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <Plan_Follow+0x80>)
 8002e96:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002e9a:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <Plan_Follow+0x84>)
 8002e9c:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <Plan_Follow+0x7c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <Plan_Follow+0x34>
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d00c      	beq.n	8002ec8 <Plan_Follow+0x4c>
 8002eae:	e018      	b.n	8002ee2 <Plan_Follow+0x66>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fd32 	bl	800291c <Plan_CheckCounterValue>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d013      	beq.n	8002ee6 <Plan_Follow+0x6a>
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <Plan_Follow+0x6a>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e012      	b.n	8002eee <Plan_Follow+0x72>
		break;
	case 2:
		if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <Plan_Follow+0x80>)
 8002eca:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <Plan_Follow+0x84>)
 8002ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	79fa      	ldrb	r2, [r7, #7]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	dd05      	ble.n	8002eea <Plan_Follow+0x6e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e005      	b.n	8002eee <Plan_Follow+0x72>
		break;
	default: return 2;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e003      	b.n	8002eee <Plan_Follow+0x72>
		break;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <Plan_Follow+0x70>
		break;
 8002eea:	bf00      	nop
	}
	return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000a86 	.word	0x20000a86
 8002efc:	20000a8c 	.word	0x20000a8c
 8002f00:	20000a84 	.word	0x20000a84
 8002f04:	00000000 	.word	0x00000000

08002f08 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <Plan_FollowLeft+0x128>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <Plan_FollowLeft+0x28>
		Plan_SetCounter();
 8002f1c:	f7ff fcee 	bl	80028fc <Plan_SetCounter>
		plan_last_enc = MOTOR_L.enc_cnt;
 8002f20:	4b44      	ldr	r3, [pc, #272]	; (8003034 <Plan_FollowLeft+0x12c>)
 8002f22:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <Plan_FollowLeft+0x130>)
 8002f28:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <Plan_FollowLeft+0x128>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 8002f30:	797b      	ldrb	r3, [r7, #5]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fd1f 	bl	8002978 <Plan_CheckSensor>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <Plan_FollowLeft+0x46>
 8002f40:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <Plan_FollowLeft+0x128>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <Plan_FollowLeft+0x46>
		counter_status = 2;
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <Plan_FollowLeft+0x128>)
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <Plan_FollowLeft+0x128>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d13d      	bne.n	8002fd2 <Plan_FollowLeft+0xca>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002f56:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <Plan_FollowLeft+0x134>)
 8002f5e:	7ddb      	ldrb	r3, [r3, #23]
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fadd 	bl	8000524 <__aeabi_i2d>
 8002f6a:	a32f      	add	r3, pc, #188	; (adr r3, 8003028 <Plan_FollowLeft+0x120>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd fb42 	bl	80005f8 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7fd fe34 	bl	8000be8 <__aeabi_d2f>
 8002f80:	4604      	mov	r4, r0
 8002f82:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <Plan_FollowLeft+0x134>)
 8002f8a:	7ddb      	ldrb	r3, [r3, #23]
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fac7 	bl	8000524 <__aeabi_i2d>
 8002f96:	a324      	add	r3, pc, #144	; (adr r3, 8003028 <Plan_FollowLeft+0x120>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f7fd fb2c 	bl	80005f8 <__aeabi_dmul>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7fd fe1e 	bl	8000be8 <__aeabi_d2f>
 8002fac:	4603      	mov	r3, r0
 8002fae:	ee00 3a90 	vmov	s1, r3
 8002fb2:	ee00 4a10 	vmov	s0, r4
 8002fb6:	f001 f8bb 	bl	8004130 <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2005      	movs	r0, #5
 8002fbe:	f7ff fcdb 	bl	8002978 <Plan_CheckSensor>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <Plan_FollowLeft+0xc6>
			counter_status = 1;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <Plan_FollowLeft+0x128>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e024      	b.n	800301c <Plan_FollowLeft+0x114>
	}
	switch(a.act_mode) {
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <Plan_FollowLeft+0xd6>
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d00c      	beq.n	8002ff6 <Plan_FollowLeft+0xee>
 8002fdc:	e018      	b.n	8003010 <Plan_FollowLeft+0x108>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fc9b 	bl	800291c <Plan_CheckCounterValue>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <Plan_FollowLeft+0x10c>
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <Plan_FollowLeft+0x10c>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e012      	b.n	800301c <Plan_FollowLeft+0x114>
		break;
	case 2:
		if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <Plan_FollowLeft+0x12c>)
 8002ff8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <Plan_FollowLeft+0x130>)
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	79fa      	ldrb	r2, [r7, #7]
 8003008:	4293      	cmp	r3, r2
 800300a:	dd05      	ble.n	8003018 <Plan_FollowLeft+0x110>
 800300c:	2302      	movs	r3, #2
 800300e:	e005      	b.n	800301c <Plan_FollowLeft+0x114>
		break;
	default: return 2;
 8003010:	2302      	movs	r3, #2
 8003012:	e003      	b.n	800301c <Plan_FollowLeft+0x114>
		break;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <Plan_FollowLeft+0x112>
		break;
 8003018:	bf00      	nop
	}
	return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	f3af 8000 	nop.w
 8003028:	9999999a 	.word	0x9999999a
 800302c:	3fb99999 	.word	0x3fb99999
 8003030:	20000a86 	.word	0x20000a86
 8003034:	20000a8c 	.word	0x20000a8c
 8003038:	20000a84 	.word	0x20000a84
 800303c:	20000d3c 	.word	0x20000d3c

08003040 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <Plan_FollowRight+0x128>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <Plan_FollowRight+0x28>
		Plan_SetCounter();
 8003054:	f7ff fc52 	bl	80028fc <Plan_SetCounter>
		plan_last_enc = MOTOR_R.enc_cnt;
 8003058:	4b44      	ldr	r3, [pc, #272]	; (800316c <Plan_FollowRight+0x12c>)
 800305a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800305e:	4b44      	ldr	r3, [pc, #272]	; (8003170 <Plan_FollowRight+0x130>)
 8003060:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <Plan_FollowRight+0x128>)
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 8003068:	797b      	ldrb	r3, [r7, #5]
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fc83 	bl	8002978 <Plan_CheckSensor>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <Plan_FollowRight+0x46>
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <Plan_FollowRight+0x128>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <Plan_FollowRight+0x46>
		counter_status = 2;
 8003080:	4b39      	ldr	r3, [pc, #228]	; (8003168 <Plan_FollowRight+0x128>)
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <Plan_FollowRight+0x128>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d13d      	bne.n	800310a <Plan_FollowRight+0xca>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 800308e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003092:	461a      	mov	r2, r3
 8003094:	4b37      	ldr	r3, [pc, #220]	; (8003174 <Plan_FollowRight+0x134>)
 8003096:	7ddb      	ldrb	r3, [r3, #23]
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fa41 	bl	8000524 <__aeabi_i2d>
 80030a2:	a32f      	add	r3, pc, #188	; (adr r3, 8003160 <Plan_FollowRight+0x120>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f7fd faa6 	bl	80005f8 <__aeabi_dmul>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd fd98 	bl	8000be8 <__aeabi_d2f>
 80030b8:	4604      	mov	r4, r0
 80030ba:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80030be:	461a      	mov	r2, r3
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <Plan_FollowRight+0x134>)
 80030c2:	7ddb      	ldrb	r3, [r3, #23]
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa2b 	bl	8000524 <__aeabi_i2d>
 80030ce:	a324      	add	r3, pc, #144	; (adr r3, 8003160 <Plan_FollowRight+0x120>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fa90 	bl	80005f8 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd82 	bl	8000be8 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	ee00 3a90 	vmov	s1, r3
 80030ea:	ee00 4a10 	vmov	s0, r4
 80030ee:	f001 f81f 	bl	8004130 <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 80030f2:	2101      	movs	r1, #1
 80030f4:	2005      	movs	r0, #5
 80030f6:	f7ff fc3f 	bl	8002978 <Plan_CheckSensor>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <Plan_FollowRight+0xc6>
			counter_status = 1;
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <Plan_FollowRight+0x128>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003106:	2301      	movs	r3, #1
 8003108:	e024      	b.n	8003154 <Plan_FollowRight+0x114>
	}
	switch(a.act_mode) {
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <Plan_FollowRight+0xd6>
 8003110:	2b02      	cmp	r3, #2
 8003112:	d00c      	beq.n	800312e <Plan_FollowRight+0xee>
 8003114:	e018      	b.n	8003148 <Plan_FollowRight+0x108>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fbff 	bl	800291c <Plan_CheckCounterValue>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <Plan_FollowRight+0x10c>
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <Plan_FollowRight+0x10c>
 800312a:	2302      	movs	r3, #2
 800312c:	e012      	b.n	8003154 <Plan_FollowRight+0x114>
		break;
	case 2:
		if(MOTOR_R.enc_cnt - plan_last_enc > a.act_value) return 2;
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <Plan_FollowRight+0x12c>)
 8003130:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003134:	461a      	mov	r2, r3
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <Plan_FollowRight+0x130>)
 8003138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	79fa      	ldrb	r2, [r7, #7]
 8003140:	4293      	cmp	r3, r2
 8003142:	dd05      	ble.n	8003150 <Plan_FollowRight+0x110>
 8003144:	2302      	movs	r3, #2
 8003146:	e005      	b.n	8003154 <Plan_FollowRight+0x114>
		break;
	default: return 2;
 8003148:	2302      	movs	r3, #2
 800314a:	e003      	b.n	8003154 <Plan_FollowRight+0x114>
		break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <Plan_FollowRight+0x112>
		break;
 8003150:	bf00      	nop
	}
	return 0;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bd90      	pop	{r4, r7, pc}
 800315c:	f3af 8000 	nop.w
 8003160:	9999999a 	.word	0x9999999a
 8003164:	3fb99999 	.word	0x3fb99999
 8003168:	20000a86 	.word	0x20000a86
 800316c:	20000a8c 	.word	0x20000a8c
 8003170:	20000a84 	.word	0x20000a84
 8003174:	20000d3c 	.word	0x20000d3c

08003178 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 8003184:	797b      	ldrb	r3, [r7, #5]
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fbf5 	bl	8002978 <Plan_CheckSensor>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <Plan_Invert+0x24>
		SEN_Invert();
 8003194:	f001 fa80 	bl	8004698 <SEN_Invert>
		return 2;
 8003198:	2302      	movs	r3, #2
 800319a:	e000      	b.n	800319e <Plan_Invert+0x26>
	}
	return 0;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 80031b2:	2302      	movs	r3, #2
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 80031cc:	2302      	movs	r3, #2
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <Plan_Skip>:

uint8_t Plan_Skip(Action_typedef a) {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	num_index = a.act_value;
 80031e8:	79fa      	ldrb	r2, [r7, #7]
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <Plan_Skip+0x20>)
 80031ec:	701a      	strb	r2, [r3, #0]
	return 2;
 80031ee:	2302      	movs	r3, #2
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20000cb5 	.word	0x20000cb5

08003200 <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	ed2d 8b02 	vpush	{d8}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	f107 040c 	add.w	r4, r7, #12
 800320e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003212:	ed87 0a02 	vstr	s0, [r7, #8]
 8003216:	71fb      	strb	r3, [r7, #7]
	static uint8_t stat = 0;
	uint8_t _speed = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
	if(counter_status == 0) {
 800321c:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <Plan_ActionInit+0x1a0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <Plan_ActionInit+0x2e>
		Plan_SetCounter();
 8003224:	f7ff fb6a 	bl	80028fc <Plan_SetCounter>
		counter_status = 1;
 8003228:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <Plan_ActionInit+0x1a0>)
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fb73 	bl	800291c <Plan_CheckCounterValue>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <Plan_ActionInit+0x54>
 800323c:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <Plan_ActionInit+0x1a4>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <Plan_ActionInit+0x54>
		counter_status = 0;
 8003244:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <Plan_ActionInit+0x1a0>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
		stat = 1;
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <Plan_ActionInit+0x1a4>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		return 0;
 8003250:	2300      	movs	r3, #0
 8003252:	e09f      	b.n	8003394 <Plan_ActionInit+0x194>
	}

	if(stat == 0) return 0;
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <Plan_ActionInit+0x1a4>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <Plan_ActionInit+0x60>
 800325c:	2300      	movs	r3, #0
 800325e:	e099      	b.n	8003394 <Plan_ActionInit+0x194>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 8003260:	7d3b      	ldrb	r3, [r7, #20]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fb5a 	bl	800291c <Plan_CheckCounterValue>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <Plan_ActionInit+0x8c>
 800326e:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <Plan_ActionInit+0x1a4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10a      	bne.n	800328c <Plan_ActionInit+0x8c>
		counter_status = 0;
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <Plan_ActionInit+0x1a0>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
		acc_status = 0;
 800327c:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <Plan_ActionInit+0x1a8>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
		stat = 0;
 8003282:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <Plan_ActionInit+0x1a4>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
		return 3;
 8003288:	2303      	movs	r3, #3
 800328a:	e083      	b.n	8003394 <Plan_ActionInit+0x194>
	}

	if(Plan_CheckCounterValue(plan.acc) && stat == 1 && acc_status == 1) {
 800328c:	4b47      	ldr	r3, [pc, #284]	; (80033ac <Plan_ActionInit+0x1ac>)
 800328e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fb42 	bl	800291c <Plan_CheckCounterValue>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <Plan_ActionInit+0xb4>
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <Plan_ActionInit+0x1a4>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d106      	bne.n	80032b4 <Plan_ActionInit+0xb4>
 80032a6:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <Plan_ActionInit+0x1a8>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <Plan_ActionInit+0xb4>
		acc_status = 2;
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <Plan_ActionInit+0x1a8>)
 80032b0:	2202      	movs	r2, #2
 80032b2:	701a      	strb	r2, [r3, #0]
	}

	if(acc_status == 0) {
 80032b4:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <Plan_ActionInit+0x1a8>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <Plan_ActionInit+0xc8>
		_speed = sp;
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	77fb      	strb	r3, [r7, #31]
		acc_status = 1;
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <Plan_ActionInit+0x1a8>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e058      	b.n	800337a <Plan_ActionInit+0x17a>
	}
	else if(acc_status == 1) {
 80032c8:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <Plan_ActionInit+0x1a8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d14e      	bne.n	800336e <Plan_ActionInit+0x16e>
		if(sp > a.boost_speed) {
 80032d0:	7d7b      	ldrb	r3, [r7, #21]
 80032d2:	79fa      	ldrb	r2, [r7, #7]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d922      	bls.n	800331e <Plan_ActionInit+0x11e>
			_speed = (sp-a.boost_speed)*(float)(Plan_CounterValue()/(float)plan.acc);
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	7d7a      	ldrb	r2, [r7, #21]
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80032e6:	f7ff fb37 	bl	8002958 <Plan_CounterValue>
 80032ea:	ee07 0a90 	vmov	s15, r0
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <Plan_ActionInit+0x1ac>)
 80032f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003304:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330c:	edc7 7a00 	vstr	s15, [r7]
 8003310:	783b      	ldrb	r3, [r7, #0]
 8003312:	77fb      	strb	r3, [r7, #31]
			_speed += a.boost_speed;
 8003314:	7d7a      	ldrb	r2, [r7, #21]
 8003316:	7ffb      	ldrb	r3, [r7, #31]
 8003318:	4413      	add	r3, r2
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e02d      	b.n	800337a <Plan_ActionInit+0x17a>
		}
		else if(sp < a.boost_speed){
 800331e:	7d7b      	ldrb	r3, [r7, #21]
 8003320:	79fa      	ldrb	r2, [r7, #7]
 8003322:	429a      	cmp	r2, r3
 8003324:	d229      	bcs.n	800337a <Plan_ActionInit+0x17a>
			_speed = (a.boost_speed-sp)*(float)(Plan_CounterValue()/(float)plan.acc);
 8003326:	7d7b      	ldrb	r3, [r7, #21]
 8003328:	461a      	mov	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003336:	f7ff fb0f 	bl	8002958 <Plan_CounterValue>
 800333a:	ee07 0a90 	vmov	s15, r0
 800333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <Plan_ActionInit+0x1ac>)
 8003344:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003354:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335c:	edc7 7a00 	vstr	s15, [r7]
 8003360:	783b      	ldrb	r3, [r7, #0]
 8003362:	77fb      	strb	r3, [r7, #31]
			_speed += sp;
 8003364:	7ffa      	ldrb	r2, [r7, #31]
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4413      	add	r3, r2
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e005      	b.n	800337a <Plan_ActionInit+0x17a>
		}
	}
	else if(acc_status == 2) {
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <Plan_ActionInit+0x1a8>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d101      	bne.n	800337a <Plan_ActionInit+0x17a>
		_speed = a.boost_speed;
 8003376:	7d7b      	ldrb	r3, [r7, #21]
 8003378:	77fb      	strb	r3, [r7, #31]
	}
	Run_LineTracing(_speed, period, 0);
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	ee07 3a90 	vmov	s15, r3
 8003380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003384:	2000      	movs	r0, #0
 8003386:	edd7 0a02 	vldr	s1, [r7, #8]
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	f000 fe9f 	bl	80040d0 <Run_LineTracing>
//	Run_LineTracing(a.boost_speed, period, 0);
	return 1;
 8003392:	2301      	movs	r3, #1
}
 8003394:	4618      	mov	r0, r3
 8003396:	3724      	adds	r7, #36	; 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	ecbd 8b02 	vpop	{d8}
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	20000a86 	.word	0x20000a86
 80033a4:	20000a89 	.word	0x20000a89
 80033a8:	20000a88 	.word	0x20000a88
 80033ac:	20000d3c 	.word	0x20000d3c

080033b0 <Plan_Stop>:


uint8_t Plan_Stop() {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 80033b4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80033f0 <Plan_Stop+0x40>
 80033b8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80033f0 <Plan_Stop+0x40>
 80033bc:	f000 feb8 	bl	8004130 <Run_SetMotorSpeed>
	SEN_BlackLine();
 80033c0:	f001 f952 	bl	8004668 <SEN_BlackLine>
	num_checkpoint = 0;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <Plan_Stop+0x44>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <Plan_Stop+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <Plan_Stop+0x48>)
 80033d2:	4413      	add	r3, r2
 80033d4:	789a      	ldrb	r2, [r3, #2]
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <Plan_Stop+0x4c>)
 80033d8:	701a      	strb	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <Plan_Stop+0x50>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <Plan_Stop+0x50>)
 80033e6:	701a      	strb	r2, [r3, #0]
	return 1;
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	00000000 	.word	0x00000000
 80033f4:	20000cb4 	.word	0x20000cb4
 80033f8:	20000d3c 	.word	0x20000d3c
 80033fc:	20000cb5 	.word	0x20000cb5
 8003400:	20000a70 	.word	0x20000a70

08003404 <Plan_Start>:

void Plan_Start() {
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <Plan_Start+0x5c>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <Plan_Start+0x60>)
 8003410:	4413      	add	r3, r2
 8003412:	789a      	ldrb	r2, [r3, #2]
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <Plan_Start+0x64>)
 8003416:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <Plan_Start+0x64>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fe3f 	bl	80050a0 <GetActionSequenceInit>
	action_status = 0;
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <Plan_Start+0x68>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <Plan_Start+0x6c>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <Plan_Start+0x70>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
	kp = plan.kpid[0];
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <Plan_Start+0x60>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <Plan_Start+0x74>)
 800343a:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <Plan_Start+0x60>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4a0e      	ldr	r2, [pc, #56]	; (800347c <Plan_Start+0x78>)
 8003442:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <Plan_Start+0x60>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <Plan_Start+0x7c>)
 800344a:	6013      	str	r3, [r2, #0]
	main_flag |= MAIN_FLAG_RUN;
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <Plan_Start+0x80>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <Plan_Start+0x80>)
 8003458:	701a      	strb	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000cb4 	.word	0x20000cb4
 8003464:	20000d3c 	.word	0x20000d3c
 8003468:	20000cb5 	.word	0x20000cb5
 800346c:	20000a87 	.word	0x20000a87
 8003470:	20000a7c 	.word	0x20000a7c
 8003474:	20000a80 	.word	0x20000a80
 8003478:	20000b10 	.word	0x20000b10
 800347c:	20000b14 	.word	0x20000b14
 8003480:	20000b18 	.word	0x20000b18
 8003484:	20000a70 	.word	0x20000a70

08003488 <Plan_UIRoutine>:

void Plan_UIRoutine() {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <Plan_UIRoutine+0x48>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <Plan_UIRoutine+0x48>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <Plan_UIRoutine+0x4c>)
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	463b      	mov	r3, r7
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 f976 	bl	80047a0 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <Plan_UIRoutine+0x48>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <Plan_UIRoutine+0x48>)
 80034c0:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 80034c2:	e001      	b.n	80034c8 <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 80034c4:	f001 fd5c 	bl	8004f80 <GetActionSequenceRoutine>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000a70 	.word	0x20000a70
 80034d4:	20000cb5 	.word	0x20000cb5

080034d8 <Plan_Main>:

void Plan_Main(float period) {
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 80034e2:	4bb8      	ldr	r3, [pc, #736]	; (80037c4 <Plan_Main+0x2ec>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8186 	beq.w	80037fc <Plan_Main+0x324>
		if(main_flag & MAIN_FLAG_NEXT) {
 80034f0:	4bb4      	ldr	r3, [pc, #720]	; (80037c4 <Plan_Main+0x2ec>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <Plan_Main+0x40>
			Run_LineTracing(plan.speed, period, 0);
 80034fc:	4bb2      	ldr	r3, [pc, #712]	; (80037c8 <Plan_Main+0x2f0>)
 80034fe:	7d9b      	ldrb	r3, [r3, #22]
 8003500:	ee07 3a90 	vmov	s15, r3
 8003504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003508:	2000      	movs	r0, #0
 800350a:	edd7 0a01 	vldr	s1, [r7, #4]
 800350e:	eeb0 0a67 	vmov.f32	s0, s15
 8003512:	f000 fddd 	bl	80040d0 <Run_LineTracing>
 8003516:	e16c      	b.n	80037f2 <Plan_Main+0x31a>
		}
		else {
			uint8_t retval;
			uint8_t speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
 8003518:	4bac      	ldr	r3, [pc, #688]	; (80037cc <Plan_Main+0x2f4>)
 800351a:	7a9b      	ldrb	r3, [r3, #10]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <Plan_Main+0x4e>
 8003520:	4ba9      	ldr	r3, [pc, #676]	; (80037c8 <Plan_Main+0x2f0>)
 8003522:	7d9b      	ldrb	r3, [r3, #22]
 8003524:	e001      	b.n	800352a <Plan_Main+0x52>
 8003526:	4ba9      	ldr	r3, [pc, #676]	; (80037cc <Plan_Main+0x2f4>)
 8003528:	7a9b      	ldrb	r3, [r3, #10]
 800352a:	73bb      	strb	r3, [r7, #14]
			if(action_status == 0) {
 800352c:	4ba8      	ldr	r3, [pc, #672]	; (80037d0 <Plan_Main+0x2f8>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d111      	bne.n	8003558 <Plan_Main+0x80>
				switch(GET_LINE_COLOR_STAT(plan_active.status)) {
 8003534:	4ba5      	ldr	r3, [pc, #660]	; (80037cc <Plan_Main+0x2f4>)
 8003536:	7adb      	ldrb	r3, [r3, #11]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d002      	beq.n	8003546 <Plan_Main+0x6e>
 8003540:	2b02      	cmp	r3, #2
 8003542:	d003      	beq.n	800354c <Plan_Main+0x74>
 8003544:	e005      	b.n	8003552 <Plan_Main+0x7a>
				case LINE_COLOR_STAT_BLACK: SEN_BlackLine(); break;
 8003546:	f001 f88f 	bl	8004668 <SEN_BlackLine>
 800354a:	e002      	b.n	8003552 <Plan_Main+0x7a>
				case LINE_COLOR_STAT_WHITE: SEN_WhiteLine(); break;
 800354c:	f001 f898 	bl	8004680 <SEN_WhiteLine>
 8003550:	bf00      	nop
				}
				action_status = 1;
 8003552:	4b9f      	ldr	r3, [pc, #636]	; (80037d0 <Plan_Main+0x2f8>)
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
			}

			if(action_status <= 1 && 				 \
 8003558:	4b9d      	ldr	r3, [pc, #628]	; (80037d0 <Plan_Main+0x2f8>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d81c      	bhi.n	800359a <Plan_Main+0xc2>
					(plan_active.act != PLAN_STOP && \
 8003560:	4b9a      	ldr	r3, [pc, #616]	; (80037cc <Plan_Main+0x2f4>)
 8003562:	781b      	ldrb	r3, [r3, #0]
			if(action_status <= 1 && 				 \
 8003564:	2b00      	cmp	r3, #0
 8003566:	d018      	beq.n	800359a <Plan_Main+0xc2>
					 plan_active.act != PLAN_NULL && \
 8003568:	4b98      	ldr	r3, [pc, #608]	; (80037cc <Plan_Main+0x2f4>)
 800356a:	781b      	ldrb	r3, [r3, #0]
					(plan_active.act != PLAN_STOP && \
 800356c:	2b09      	cmp	r3, #9
 800356e:	d014      	beq.n	800359a <Plan_Main+0xc2>
					 plan_active.act != PLAN_SKIP)) {
 8003570:	4b96      	ldr	r3, [pc, #600]	; (80037cc <Plan_Main+0x2f4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_NULL && \
 8003574:	2b0b      	cmp	r3, #11
 8003576:	d010      	beq.n	800359a <Plan_Main+0xc2>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 8003578:	7bba      	ldrb	r2, [r7, #14]
 800357a:	4b94      	ldr	r3, [pc, #592]	; (80037cc <Plan_Main+0x2f4>)
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	4608      	mov	r0, r1
 8003580:	685c      	ldr	r4, [r3, #4]
 8003582:	4621      	mov	r1, r4
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	461c      	mov	r4, r3
 8003588:	4613      	mov	r3, r2
 800358a:	ed97 0a01 	vldr	s0, [r7, #4]
 800358e:	4622      	mov	r2, r4
 8003590:	f7ff fe36 	bl	8003200 <Plan_ActionInit>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	e0cc      	b.n	8003734 <Plan_Main+0x25c>
			}
			else {
				switch(plan_active.act) {
 800359a:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <Plan_Main+0x2f4>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b0b      	cmp	r3, #11
 80035a0:	f200 80c6 	bhi.w	8003730 <Plan_Main+0x258>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <Plan_Main+0xd4>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035dd 	.word	0x080035dd
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003623 	.word	0x08003623
 80035bc:	08003641 	.word	0x08003641
 80035c0:	0800365f 	.word	0x0800365f
 80035c4:	0800367d 	.word	0x0800367d
 80035c8:	0800369b 	.word	0x0800369b
 80035cc:	080036b9 	.word	0x080036b9
 80035d0:	080036d7 	.word	0x080036d7
 80035d4:	080036f5 	.word	0x080036f5
 80035d8:	08003713 	.word	0x08003713
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 80035dc:	f7ff fee8 	bl	80033b0 <Plan_Stop>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e0a6      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 80035e6:	4b79      	ldr	r3, [pc, #484]	; (80037cc <Plan_Main+0x2f4>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4611      	mov	r1, r2
 80035ec:	6858      	ldr	r0, [r3, #4]
 80035ee:	4602      	mov	r2, r0
 80035f0:	6898      	ldr	r0, [r3, #8]
 80035f2:	4603      	mov	r3, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	f7ff fa01 	bl	8002a00 <Plan_Left>
 80035fe:	4603      	mov	r3, r0
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e097      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 8003604:	4b71      	ldr	r3, [pc, #452]	; (80037cc <Plan_Main+0x2f4>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4611      	mov	r1, r2
 800360a:	6858      	ldr	r0, [r3, #4]
 800360c:	4602      	mov	r2, r0
 800360e:	6898      	ldr	r0, [r3, #8]
 8003610:	4603      	mov	r3, r0
 8003612:	4608      	mov	r0, r1
 8003614:	4611      	mov	r1, r2
 8003616:	461a      	mov	r2, r3
 8003618:	f7ff fa8e 	bl	8002b38 <Plan_Right>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e088      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 8003622:	7bba      	ldrb	r2, [r7, #14]
 8003624:	4b69      	ldr	r3, [pc, #420]	; (80037cc <Plan_Main+0x2f4>)
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	4608      	mov	r0, r1
 800362a:	685c      	ldr	r4, [r3, #4]
 800362c:	4621      	mov	r1, r4
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	461c      	mov	r4, r3
 8003632:	4613      	mov	r3, r2
 8003634:	4622      	mov	r2, r4
 8003636:	f7ff fb1b 	bl	8002c70 <Plan_Forward>
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e079      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 8003640:	4b62      	ldr	r3, [pc, #392]	; (80037cc <Plan_Main+0x2f4>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4611      	mov	r1, r2
 8003646:	6858      	ldr	r0, [r3, #4]
 8003648:	4602      	mov	r2, r0
 800364a:	6898      	ldr	r0, [r3, #8]
 800364c:	4603      	mov	r3, r0
 800364e:	4608      	mov	r0, r1
 8003650:	4611      	mov	r1, r2
 8003652:	461a      	mov	r2, r3
 8003654:	f7ff fc12 	bl	8002e7c <Plan_Follow>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e06a      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <Plan_Main+0x2f4>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4611      	mov	r1, r2
 8003664:	6858      	ldr	r0, [r3, #4]
 8003666:	4602      	mov	r2, r0
 8003668:	6898      	ldr	r0, [r3, #8]
 800366a:	4603      	mov	r3, r0
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff fc49 	bl	8002f08 <Plan_FollowLeft>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e05b      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <Plan_Main+0x2f4>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4611      	mov	r1, r2
 8003682:	6858      	ldr	r0, [r3, #4]
 8003684:	4602      	mov	r2, r0
 8003686:	6898      	ldr	r0, [r3, #8]
 8003688:	4603      	mov	r3, r0
 800368a:	4608      	mov	r0, r1
 800368c:	4611      	mov	r1, r2
 800368e:	461a      	mov	r2, r3
 8003690:	f7ff fcd6 	bl	8003040 <Plan_FollowRight>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e04c      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 800369a:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <Plan_Main+0x2f4>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4611      	mov	r1, r2
 80036a0:	6858      	ldr	r0, [r3, #4]
 80036a2:	4602      	mov	r2, r0
 80036a4:	6898      	ldr	r0, [r3, #8]
 80036a6:	4603      	mov	r3, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	f7ff fd63 	bl	8003178 <Plan_Invert>
 80036b2:	4603      	mov	r3, r0
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	e03d      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 80036b8:	4b44      	ldr	r3, [pc, #272]	; (80037cc <Plan_Main+0x2f4>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4611      	mov	r1, r2
 80036be:	6858      	ldr	r0, [r3, #4]
 80036c0:	4602      	mov	r2, r0
 80036c2:	6898      	ldr	r0, [r3, #8]
 80036c4:	4603      	mov	r3, r0
 80036c6:	4608      	mov	r0, r1
 80036c8:	4611      	mov	r1, r2
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7ff fd6b 	bl	80031a6 <Plan_NextPlan>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e02e      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <Plan_Main+0x2f4>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4611      	mov	r1, r2
 80036dc:	6858      	ldr	r0, [r3, #4]
 80036de:	4602      	mov	r2, r0
 80036e0:	6898      	ldr	r0, [r3, #8]
 80036e2:	4603      	mov	r3, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	f7ff fd69 	bl	80031c0 <Plan_Null>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e01f      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 80036f4:	7bba      	ldrb	r2, [r7, #14]
 80036f6:	4b35      	ldr	r3, [pc, #212]	; (80037cc <Plan_Main+0x2f4>)
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	4608      	mov	r0, r1
 80036fc:	685c      	ldr	r4, [r3, #4]
 80036fe:	4621      	mov	r1, r4
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	461c      	mov	r4, r3
 8003704:	4613      	mov	r3, r2
 8003706:	4622      	mov	r2, r4
 8003708:	f7ff fb34 	bl	8002d74 <Plan_Backward>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e010      	b.n	8003734 <Plan_Main+0x25c>
				case PLAN_SKIP: 	retval = Plan_Skip(plan_active); 		break;
 8003712:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <Plan_Main+0x2f4>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4611      	mov	r1, r2
 8003718:	6858      	ldr	r0, [r3, #4]
 800371a:	4602      	mov	r2, r0
 800371c:	6898      	ldr	r0, [r3, #8]
 800371e:	4603      	mov	r3, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	f7ff fd59 	bl	80031dc <Plan_Skip>
 800372a:	4603      	mov	r3, r0
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	e001      	b.n	8003734 <Plan_Main+0x25c>
				default: retval = 2;
 8003730:	2302      	movs	r3, #2
 8003732:	73fb      	strb	r3, [r7, #15]
				}
			}
			if(retval == 0) {
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <Plan_Main+0x27c>
				Run_LineTracing(speed_now, period, 0);
 800373a:	7bbb      	ldrb	r3, [r7, #14]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003744:	2000      	movs	r0, #0
 8003746:	edd7 0a01 	vldr	s1, [r7, #4]
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	f000 fcbf 	bl	80040d0 <Run_LineTracing>
 8003752:	e04e      	b.n	80037f2 <Plan_Main+0x31a>
			}
			else if(retval == 2){
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d142      	bne.n	80037e0 <Plan_Main+0x308>
				counter_status = 0;
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <Plan_Main+0x2fc>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <Plan_Main+0x2f8>)
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
				speed_now = plan.speed;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <Plan_Main+0x2f0>)
 8003768:	7d9b      	ldrb	r3, [r3, #22]
 800376a:	73bb      	strb	r3, [r7, #14]
				num_index++;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <Plan_Main+0x300>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <Plan_Main+0x300>)
 8003776:	701a      	strb	r2, [r3, #0]
				if(num_index == plan.num_action) {
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <Plan_Main+0x2f0>)
 800377a:	785a      	ldrb	r2, [r3, #1]
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <Plan_Main+0x300>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d102      	bne.n	800378a <Plan_Main+0x2b2>
					Plan_Stop();
 8003784:	f7ff fe14 	bl	80033b0 <Plan_Stop>
					return;
 8003788:	e038      	b.n	80037fc <Plan_Main+0x324>
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <Plan_Main+0x304>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <Plan_Main+0x2f0>)
 8003792:	4413      	add	r3, r2
 8003794:	789a      	ldrb	r2, [r3, #2]
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <Plan_Main+0x300>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d805      	bhi.n	80037aa <Plan_Main+0x2d2>
					num_checkpoint++;
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <Plan_Main+0x304>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <Plan_Main+0x304>)
 80037a8:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 80037aa:	f001 fb99 	bl	8004ee0 <GetActionSequence>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11e      	bne.n	80037f2 <Plan_Main+0x31a>
					main_flag |= MAIN_FLAG_NEXT;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <Plan_Main+0x2ec>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b01      	ldr	r3, [pc, #4]	; (80037c4 <Plan_Main+0x2ec>)
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e016      	b.n	80037f2 <Plan_Main+0x31a>
 80037c4:	20000a70 	.word	0x20000a70
 80037c8:	20000d3c 	.word	0x20000d3c
 80037cc:	20000d2c 	.word	0x20000d2c
 80037d0:	20000a87 	.word	0x20000a87
 80037d4:	20000a86 	.word	0x20000a86
 80037d8:	20000cb5 	.word	0x20000cb5
 80037dc:	20000cb4 	.word	0x20000cb4
			}
			else if(retval == 3){
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d105      	bne.n	80037f2 <Plan_Main+0x31a>
				counter_status = 0;
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <Plan_Main+0x32c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
				action_status = 2;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <Plan_Main+0x330>)
 80037ee:	2202      	movs	r2, #2
 80037f0:	701a      	strb	r2, [r3, #0]
			}
		}
		plan_counter++;
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <Plan_Main+0x334>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <Plan_Main+0x334>)
 80037fa:	6013      	str	r3, [r2, #0]
	}
}
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	bf00      	nop
 8003804:	20000a86 	.word	0x20000a86
 8003808:	20000a87 	.word	0x20000a87
 800380c:	20000a7c 	.word	0x20000a7c

08003810 <Run_Init>:

Motor_typedef motor[2];

float robot_enc_pos = 0;

void Run_Init() {
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	2100      	movs	r1, #0
 8003818:	482a      	ldr	r0, [pc, #168]	; (80038c4 <Run_Init+0xb4>)
 800381a:	f00a fbdb 	bl	800dfd4 <memset>

	motor[0].mode = MOTOR_MODE_OPEN;
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <Run_Init+0xb4>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <Run_Init+0xb4>)
 8003826:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <Run_Init+0xb8>)
 8003828:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <Run_Init+0xb4>)
 800382c:	2200      	movs	r2, #0
 800382e:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <Run_Init+0xb4>)
 8003832:	2204      	movs	r2, #4
 8003834:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <Run_Init+0xb4>)
 8003838:	4a24      	ldr	r2, [pc, #144]	; (80038cc <Run_Init+0xbc>)
 800383a:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 800383c:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <Run_Init+0xb4>)
 800383e:	2201      	movs	r2, #1
 8003840:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.0095;
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <Run_Init+0xb4>)
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <Run_Init+0xc0>)
 8003846:	61da      	str	r2, [r3, #28]
	motor[0].vel_factor = 0.625;
 8003848:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <Run_Init+0xb4>)
 800384a:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <Run_Init+0xc4>)
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].kp = 2;
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <Run_Init+0xb4>)
 8003850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
	motor[0].ki = 15;
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <Run_Init+0xb4>)
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <Run_Init+0xc8>)
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].filter_alpha = 0.5;
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <Run_Init+0xb4>)
 800385e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c

	motor[1].mode = motor[0].mode;
 8003864:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <Run_Init+0xb4>)
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <Run_Init+0xb4>)
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	motor[1].pwm_htim = &htim3;
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <Run_Init+0xb4>)
 8003870:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <Run_Init+0xb8>)
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
	motor[1].ch1 = TIM_CHANNEL_4;
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <Run_Init+0xb4>)
 8003876:	220c      	movs	r2, #12
 8003878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	motor[1].ch2 = TIM_CHANNEL_3;
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <Run_Init+0xb4>)
 800387e:	2208      	movs	r2, #8
 8003880:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	motor[1].enc_htim = &htim4;
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <Run_Init+0xb4>)
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <Run_Init+0xcc>)
 8003888:	651a      	str	r2, [r3, #80]	; 0x50
	motor[1].dir = -1;
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <Run_Init+0xb4>)
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	motor[1].pwm_factor = 0.01;
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <Run_Init+0xb4>)
 8003894:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <Run_Init+0xd0>)
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
	motor[1].vel_factor = 0.625;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <Run_Init+0xb4>)
 800389a:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <Run_Init+0xc4>)
 800389c:	665a      	str	r2, [r3, #100]	; 0x64
	motor[1].kp = motor[0].kp;
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <Run_Init+0xb4>)
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <Run_Init+0xb4>)
 80038a4:	6693      	str	r3, [r2, #104]	; 0x68
	motor[1].ki = motor[0].ki;
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <Run_Init+0xb4>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <Run_Init+0xb4>)
 80038ac:	66d3      	str	r3, [r2, #108]	; 0x6c
	motor[1].filter_alpha = motor[0].filter_alpha;
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <Run_Init+0xb4>)
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <Run_Init+0xb4>)
 80038b4:	67d3      	str	r3, [r2, #124]	; 0x7c

	robot_enc_pos = 0;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <Run_Init+0xd4>)
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000a8c 	.word	0x20000a8c
 80038c8:	20000df8 	.word	0x20000df8
 80038cc:	20000db0 	.word	0x20000db0
 80038d0:	3c1ba5e3 	.word	0x3c1ba5e3
 80038d4:	3f200000 	.word	0x3f200000
 80038d8:	41700000 	.word	0x41700000
 80038dc:	20000e40 	.word	0x20000e40
 80038e0:	3c23d70a 	.word	0x3c23d70a
 80038e4:	20000b0c 	.word	0x20000b0c

080038e8 <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 80038e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 80038f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80038f8:	4821      	ldr	r0, [pc, #132]	; (8003980 <Run_MotorRoutine+0x98>)
 80038fa:	f7fe fe55 	bl	80025a8 <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 80038fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8003902:	4820      	ldr	r0, [pc, #128]	; (8003984 <Run_MotorRoutine+0x9c>)
 8003904:	f7fe fe50 	bl	80025a8 <Motor_EnocderRoutine>
	robot_enc_pos += (motor[0].enc_vel*0.5) + (motor[1].enc_vel*0.5);
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <Run_MotorRoutine+0xa0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fe1b 	bl	8000548 <__aeabi_f2d>
 8003912:	4604      	mov	r4, r0
 8003914:	460d      	mov	r5, r1
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <Run_MotorRoutine+0x98>)
 8003918:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fe01 	bl	8000524 <__aeabi_i2d>
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <Run_MotorRoutine+0xa4>)
 8003928:	f7fc fe66 	bl	80005f8 <__aeabi_dmul>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4690      	mov	r8, r2
 8003932:	4699      	mov	r9, r3
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <Run_MotorRoutine+0x98>)
 8003936:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fdf2 	bl	8000524 <__aeabi_i2d>
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <Run_MotorRoutine+0xa4>)
 8003946:	f7fc fe57 	bl	80005f8 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4640      	mov	r0, r8
 8003950:	4649      	mov	r1, r9
 8003952:	f7fc fc9b 	bl	800028c <__adddf3>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4620      	mov	r0, r4
 800395c:	4629      	mov	r1, r5
 800395e:	f7fc fc95 	bl	800028c <__adddf3>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f7fd f93d 	bl	8000be8 <__aeabi_d2f>
 800396e:	4603      	mov	r3, r0
 8003970:	4a05      	ldr	r2, [pc, #20]	; (8003988 <Run_MotorRoutine+0xa0>)
 8003972:	6013      	str	r3, [r2, #0]
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800397e:	bf00      	nop
 8003980:	20000a8c 	.word	0x20000a8c
 8003984:	20000acc 	.word	0x20000acc
 8003988:	20000b0c 	.word	0x20000b0c
 800398c:	3fe00000 	.word	0x3fe00000

08003990 <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 800399a:	ed97 0a01 	vldr	s0, [r7, #4]
 800399e:	4806      	ldr	r0, [pc, #24]	; (80039b8 <Run_MotorRoutine2+0x28>)
 80039a0:	f7fe fe2a 	bl	80025f8 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 80039a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <Run_MotorRoutine2+0x2c>)
 80039aa:	f7fe fe25 	bl	80025f8 <Motor_ControlRoutine>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000a8c 	.word	0x20000a8c
 80039bc:	20000acc 	.word	0x20000acc

080039c0 <Run_YawSpeed>:
float kp;
float ki;
float kd;
uint16_t sum_error;

float Run_YawSpeed(float period, uint8_t flag) {
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80039ca:	4603      	mov	r3, r0
 80039cc:	70fb      	strb	r3, [r7, #3]
	static int16_t last_error = 0;
	int16_t error = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	83fb      	strh	r3, [r7, #30]

	uint16_t pr_sensor_bin = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	83bb      	strh	r3, [r7, #28]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 80039d6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80039da:	837b      	strh	r3, [r7, #26]
	if((flag&0x01)==0x01) {
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <Run_YawSpeed+0x3c>
		pr_sensor_bin = (~sensor_binary) & mask;
 80039e6:	4bcb      	ldr	r3, [pc, #812]	; (8003d14 <Run_YawSpeed+0x354>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	b21a      	sxth	r2, r3
 80039f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039f4:	4013      	ands	r3, r2
 80039f6:	b21b      	sxth	r3, r3
 80039f8:	83bb      	strh	r3, [r7, #28]
 80039fa:	e004      	b.n	8003a06 <Run_YawSpeed+0x46>
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 80039fc:	4bc5      	ldr	r3, [pc, #788]	; (8003d14 <Run_YawSpeed+0x354>)
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	8b7b      	ldrh	r3, [r7, #26]
 8003a02:	4013      	ands	r3, r2
 8003a04:	83bb      	strh	r3, [r7, #28]
	}

	switch(sensor_binary) {
 8003a06:	4bc3      	ldr	r3, [pc, #780]	; (8003d14 <Run_YawSpeed+0x354>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f000 82c7 	beq.w	8003fa2 <Run_YawSpeed+0x5e2>
 8003a14:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	f300 82f4 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a1e:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003a22:	f000 8291 	beq.w	8003f48 <Run_YawSpeed+0x588>
 8003a26:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003a2a:	f300 82ec 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a2e:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f000 82bd 	beq.w	8003fb2 <Run_YawSpeed+0x5f2>
 8003a38:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	f300 82e2 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a42:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8003a46:	f000 8282 	beq.w	8003f4e <Run_YawSpeed+0x58e>
 8003a4a:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8003a4e:	f300 82da 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a52:	f643 0207 	movw	r2, #14343	; 0x3807
 8003a56:	4293      	cmp	r3, r2
 8003a58:	f000 82b5 	beq.w	8003fc6 <Run_YawSpeed+0x606>
 8003a5c:	f643 0207 	movw	r2, #14343	; 0x3807
 8003a60:	4293      	cmp	r3, r2
 8003a62:	f300 82d0 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a66:	f643 0201 	movw	r2, #14337	; 0x3801
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f000 829d 	beq.w	8003faa <Run_YawSpeed+0x5ea>
 8003a70:	f643 0201 	movw	r2, #14337	; 0x3801
 8003a74:	4293      	cmp	r3, r2
 8003a76:	f300 82c6 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a7a:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003a7e:	f000 8269 	beq.w	8003f54 <Run_YawSpeed+0x594>
 8003a82:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003a86:	f300 82be 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a8a:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f000 82a8 	beq.w	8003fe4 <Run_YawSpeed+0x624>
 8003a94:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	f300 82b4 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003a9e:	f243 020f 	movw	r2, #12303	; 0x300f
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f000 8296 	beq.w	8003fd4 <Run_YawSpeed+0x614>
 8003aa8:	f243 020f 	movw	r2, #12303	; 0x300f
 8003aac:	4293      	cmp	r3, r2
 8003aae:	f300 82aa 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003ab2:	f243 0203 	movw	r2, #12291	; 0x3003
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	f000 8282 	beq.w	8003fc0 <Run_YawSpeed+0x600>
 8003abc:	f243 0203 	movw	r2, #12291	; 0x3003
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	f300 82a0 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aca:	f000 8246 	beq.w	8003f5a <Run_YawSpeed+0x59a>
 8003ace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ad2:	f300 8298 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003ad6:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f000 8290 	beq.w	8004000 <Run_YawSpeed+0x640>
 8003ae0:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f300 828e 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003aea:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	f000 827c 	beq.w	8003fec <Run_YawSpeed+0x62c>
 8003af4:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	f300 8284 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003afe:	f242 12e1 	movw	r2, #8673	; 0x21e1
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f000 8276 	beq.w	8003ff4 <Run_YawSpeed+0x634>
 8003b08:	f242 12e1 	movw	r2, #8673	; 0x21e1
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f300 827a 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b12:	f242 021f 	movw	r2, #8223	; 0x201f
 8003b16:	4293      	cmp	r3, r2
 8003b18:	f300 8275 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b1c:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 8003b20:	4293      	cmp	r3, r2
 8003b22:	f280 809d 	bge.w	8003c60 <Run_YawSpeed+0x2a0>
 8003b26:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 8003b2a:	f000 8207 	beq.w	8003f3c <Run_YawSpeed+0x57c>
 8003b2e:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 8003b32:	f300 8268 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b36:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003b3a:	f000 8202 	beq.w	8003f42 <Run_YawSpeed+0x582>
 8003b3e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003b42:	f300 8260 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b46:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	f000 821d 	beq.w	8003f8a <Run_YawSpeed+0x5ca>
 8003b50:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f300 8256 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b5a:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003b5e:	f000 821a 	beq.w	8003f96 <Run_YawSpeed+0x5d6>
 8003b62:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003b66:	f300 824e 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b6a:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003b6e:	f000 81df 	beq.w	8003f30 <Run_YawSpeed+0x570>
 8003b72:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003b76:	f300 8246 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b7e:	f000 81da 	beq.w	8003f36 <Run_YawSpeed+0x576>
 8003b82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b86:	f300 823e 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b8a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f000 81f1 	beq.w	8003f76 <Run_YawSpeed+0x5b6>
 8003b94:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	f300 8234 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003b9e:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003ba2:	f000 81ef 	beq.w	8003f84 <Run_YawSpeed+0x5c4>
 8003ba6:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003baa:	f300 822c 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003bae:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003bb2:	f000 81ed 	beq.w	8003f90 <Run_YawSpeed+0x5d0>
 8003bb6:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003bba:	f300 8224 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003bbe:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003bc2:	f000 81af 	beq.w	8003f24 <Run_YawSpeed+0x564>
 8003bc6:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003bca:	f300 821c 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003bce:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003bd2:	f000 81aa 	beq.w	8003f2a <Run_YawSpeed+0x56a>
 8003bd6:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003bda:	f300 8214 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003bde:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003be2:	f300 8210 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003be6:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8003bea:	f280 8095 	bge.w	8003d18 <Run_YawSpeed+0x358>
 8003bee:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003bf2:	f000 8194 	beq.w	8003f1e <Run_YawSpeed+0x55e>
 8003bf6:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003bfa:	f300 8204 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003bfe:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003c02:	f000 81b0 	beq.w	8003f66 <Run_YawSpeed+0x5a6>
 8003c06:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003c0a:	f300 81fc 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003c0e:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003c12:	f000 817a 	beq.w	8003f0a <Run_YawSpeed+0x54a>
 8003c16:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003c1a:	f300 81f4 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003c1e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003c22:	f000 8176 	beq.w	8003f12 <Run_YawSpeed+0x552>
 8003c26:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003c2a:	f300 81ec 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003c2e:	2bf8      	cmp	r3, #248	; 0xf8
 8003c30:	f000 8163 	beq.w	8003efa <Run_YawSpeed+0x53a>
 8003c34:	2bf8      	cmp	r3, #248	; 0xf8
 8003c36:	f300 81e6 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003c3a:	2bf0      	cmp	r3, #240	; 0xf0
 8003c3c:	f000 8161 	beq.w	8003f02 <Run_YawSpeed+0x542>
 8003c40:	2bf0      	cmp	r3, #240	; 0xf0
 8003c42:	f300 81e0 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003c46:	2b7c      	cmp	r3, #124	; 0x7c
 8003c48:	f000 814f 	beq.w	8003eea <Run_YawSpeed+0x52a>
 8003c4c:	2b7c      	cmp	r3, #124	; 0x7c
 8003c4e:	f300 81da 	bgt.w	8004006 <Run_YawSpeed+0x646>
 8003c52:	2b3e      	cmp	r3, #62	; 0x3e
 8003c54:	f300 8126 	bgt.w	8003ea4 <Run_YawSpeed+0x4e4>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f300 809f 	bgt.w	8003d9c <Run_YawSpeed+0x3dc>
 8003c5e:	e1d2      	b.n	8004006 <Run_YawSpeed+0x646>
 8003c60:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8003c64:	3b18      	subs	r3, #24
 8003c66:	2b27      	cmp	r3, #39	; 0x27
 8003c68:	f200 81cd 	bhi.w	8004006 <Run_YawSpeed+0x646>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <Run_YawSpeed+0x2b4>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003f9d 	.word	0x08003f9d
 8003c78:	08004007 	.word	0x08004007
 8003c7c:	08004007 	.word	0x08004007
 8003c80:	08004007 	.word	0x08004007
 8003c84:	08004007 	.word	0x08004007
 8003c88:	08004007 	.word	0x08004007
 8003c8c:	08004007 	.word	0x08004007
 8003c90:	08004007 	.word	0x08004007
 8003c94:	08003f61 	.word	0x08003f61
 8003c98:	08003fbb 	.word	0x08003fbb
 8003c9c:	08004007 	.word	0x08004007
 8003ca0:	08004007 	.word	0x08004007
 8003ca4:	08004007 	.word	0x08004007
 8003ca8:	08004007 	.word	0x08004007
 8003cac:	08004007 	.word	0x08004007
 8003cb0:	08003fcd 	.word	0x08003fcd
 8003cb4:	08004007 	.word	0x08004007
 8003cb8:	08004007 	.word	0x08004007
 8003cbc:	08004007 	.word	0x08004007
 8003cc0:	08004007 	.word	0x08004007
 8003cc4:	08004007 	.word	0x08004007
 8003cc8:	08004007 	.word	0x08004007
 8003ccc:	08004007 	.word	0x08004007
 8003cd0:	08004007 	.word	0x08004007
 8003cd4:	08004007 	.word	0x08004007
 8003cd8:	08004007 	.word	0x08004007
 8003cdc:	08004007 	.word	0x08004007
 8003ce0:	08004007 	.word	0x08004007
 8003ce4:	08004007 	.word	0x08004007
 8003ce8:	08004007 	.word	0x08004007
 8003cec:	08004007 	.word	0x08004007
 8003cf0:	08004007 	.word	0x08004007
 8003cf4:	08004007 	.word	0x08004007
 8003cf8:	08004007 	.word	0x08004007
 8003cfc:	08004007 	.word	0x08004007
 8003d00:	08004007 	.word	0x08004007
 8003d04:	08004007 	.word	0x08004007
 8003d08:	08004007 	.word	0x08004007
 8003d0c:	08004007 	.word	0x08004007
 8003d10:	08003fdd 	.word	0x08003fdd
 8003d14:	20000b86 	.word	0x20000b86
 8003d18:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d1c:	2b1c      	cmp	r3, #28
 8003d1e:	f200 8172 	bhi.w	8004006 <Run_YawSpeed+0x646>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <Run_YawSpeed+0x368>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003f19 	.word	0x08003f19
 8003d2c:	08003ffb 	.word	0x08003ffb
 8003d30:	08004007 	.word	0x08004007
 8003d34:	08004007 	.word	0x08004007
 8003d38:	08004007 	.word	0x08004007
 8003d3c:	08004007 	.word	0x08004007
 8003d40:	08004007 	.word	0x08004007
 8003d44:	08004007 	.word	0x08004007
 8003d48:	08004007 	.word	0x08004007
 8003d4c:	08004007 	.word	0x08004007
 8003d50:	08004007 	.word	0x08004007
 8003d54:	08004007 	.word	0x08004007
 8003d58:	08004007 	.word	0x08004007
 8003d5c:	08004007 	.word	0x08004007
 8003d60:	08004007 	.word	0x08004007
 8003d64:	08004007 	.word	0x08004007
 8003d68:	08003f7f 	.word	0x08003f7f
 8003d6c:	08004007 	.word	0x08004007
 8003d70:	08004007 	.word	0x08004007
 8003d74:	08004007 	.word	0x08004007
 8003d78:	08004007 	.word	0x08004007
 8003d7c:	08004007 	.word	0x08004007
 8003d80:	08004007 	.word	0x08004007
 8003d84:	08004007 	.word	0x08004007
 8003d88:	08004007 	.word	0x08004007
 8003d8c:	08004007 	.word	0x08004007
 8003d90:	08004007 	.word	0x08004007
 8003d94:	08004007 	.word	0x08004007
 8003d98:	08003f6f 	.word	0x08003f6f
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	2b3d      	cmp	r3, #61	; 0x3d
 8003da0:	f200 8131 	bhi.w	8004006 <Run_YawSpeed+0x646>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <Run_YawSpeed+0x3ec>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003eab 	.word	0x08003eab
 8003db0:	08004007 	.word	0x08004007
 8003db4:	08003eb3 	.word	0x08003eb3
 8003db8:	08004007 	.word	0x08004007
 8003dbc:	08004007 	.word	0x08004007
 8003dc0:	08004007 	.word	0x08004007
 8003dc4:	08003ebb 	.word	0x08003ebb
 8003dc8:	08004007 	.word	0x08004007
 8003dcc:	08004007 	.word	0x08004007
 8003dd0:	08004007 	.word	0x08004007
 8003dd4:	08004007 	.word	0x08004007
 8003dd8:	08004007 	.word	0x08004007
 8003ddc:	08004007 	.word	0x08004007
 8003de0:	08004007 	.word	0x08004007
 8003de4:	08003ec3 	.word	0x08003ec3
 8003de8:	08004007 	.word	0x08004007
 8003dec:	08004007 	.word	0x08004007
 8003df0:	08004007 	.word	0x08004007
 8003df4:	08004007 	.word	0x08004007
 8003df8:	08004007 	.word	0x08004007
 8003dfc:	08004007 	.word	0x08004007
 8003e00:	08004007 	.word	0x08004007
 8003e04:	08004007 	.word	0x08004007
 8003e08:	08004007 	.word	0x08004007
 8003e0c:	08004007 	.word	0x08004007
 8003e10:	08004007 	.word	0x08004007
 8003e14:	08004007 	.word	0x08004007
 8003e18:	08004007 	.word	0x08004007
 8003e1c:	08004007 	.word	0x08004007
 8003e20:	08003ed3 	.word	0x08003ed3
 8003e24:	08003ecb 	.word	0x08003ecb
 8003e28:	08004007 	.word	0x08004007
 8003e2c:	08004007 	.word	0x08004007
 8003e30:	08004007 	.word	0x08004007
 8003e34:	08004007 	.word	0x08004007
 8003e38:	08004007 	.word	0x08004007
 8003e3c:	08004007 	.word	0x08004007
 8003e40:	08004007 	.word	0x08004007
 8003e44:	08004007 	.word	0x08004007
 8003e48:	08004007 	.word	0x08004007
 8003e4c:	08004007 	.word	0x08004007
 8003e50:	08004007 	.word	0x08004007
 8003e54:	08004007 	.word	0x08004007
 8003e58:	08004007 	.word	0x08004007
 8003e5c:	08004007 	.word	0x08004007
 8003e60:	08004007 	.word	0x08004007
 8003e64:	08004007 	.word	0x08004007
 8003e68:	08004007 	.word	0x08004007
 8003e6c:	08004007 	.word	0x08004007
 8003e70:	08004007 	.word	0x08004007
 8003e74:	08004007 	.word	0x08004007
 8003e78:	08004007 	.word	0x08004007
 8003e7c:	08004007 	.word	0x08004007
 8003e80:	08004007 	.word	0x08004007
 8003e84:	08004007 	.word	0x08004007
 8003e88:	08004007 	.word	0x08004007
 8003e8c:	08004007 	.word	0x08004007
 8003e90:	08004007 	.word	0x08004007
 8003e94:	08004007 	.word	0x08004007
 8003e98:	08003ee3 	.word	0x08003ee3
 8003e9c:	08004007 	.word	0x08004007
 8003ea0:	08003edb 	.word	0x08003edb
 8003ea4:	2b78      	cmp	r3, #120	; 0x78
 8003ea6:	d024      	beq.n	8003ef2 <Run_YawSpeed+0x532>
 8003ea8:	e0ad      	b.n	8004006 <Run_YawSpeed+0x646>
	case B00000000000001: error = -15; break;
 8003eaa:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8003eae:	83fb      	strh	r3, [r7, #30]
 8003eb0:	e0ac      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000000011: error = -13; break;
 8003eb2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003eb6:	83fb      	strh	r3, [r7, #30]
 8003eb8:	e0a8      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000000111: error = -11; break;
 8003eba:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003ebe:	83fb      	strh	r3, [r7, #30]
 8003ec0:	e0a4      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000001111: error = -10; break;
 8003ec2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8003ec6:	83fb      	strh	r3, [r7, #30]
 8003ec8:	e0a0      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000011111: error = -9; break;
 8003eca:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003ece:	83fb      	strh	r3, [r7, #30]
 8003ed0:	e09c      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000011110: error = -8; break;
 8003ed2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003ed6:	83fb      	strh	r3, [r7, #30]
 8003ed8:	e098      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000111110: error = -7; break;
 8003eda:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8003ede:	83fb      	strh	r3, [r7, #30]
 8003ee0:	e094      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000000111100: error = -6; break;
 8003ee2:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8003ee6:	83fb      	strh	r3, [r7, #30]
 8003ee8:	e090      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000001111100: error = -5; break;
 8003eea:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003eee:	83fb      	strh	r3, [r7, #30]
 8003ef0:	e08c      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000001111000: error = -4; break;
 8003ef2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003ef6:	83fb      	strh	r3, [r7, #30]
 8003ef8:	e088      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000011111000: error = -3; break;
 8003efa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003efe:	83fb      	strh	r3, [r7, #30]
 8003f00:	e084      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000011110000: error = -2; break;
 8003f02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003f06:	83fb      	strh	r3, [r7, #30]
 8003f08:	e080      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00000111110000: error = -1; break;
 8003f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f0e:	83fb      	strh	r3, [r7, #30]
 8003f10:	e07c      	b.n	800400c <Run_YawSpeed+0x64c>

	case B00000111100000: error = 0; break;
 8003f12:	2300      	movs	r3, #0
 8003f14:	83fb      	strh	r3, [r7, #30]
 8003f16:	e079      	b.n	800400c <Run_YawSpeed+0x64c>

	case B00001111100000: error = 1; break;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	83fb      	strh	r3, [r7, #30]
 8003f1c:	e076      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00001111000000: error = 2; break;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	83fb      	strh	r3, [r7, #30]
 8003f22:	e073      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00011111000000: error = 3; break;
 8003f24:	2303      	movs	r3, #3
 8003f26:	83fb      	strh	r3, [r7, #30]
 8003f28:	e070      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00011110000000: error = 4; break;
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	83fb      	strh	r3, [r7, #30]
 8003f2e:	e06d      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00111110000000: error = 5; break;
 8003f30:	2305      	movs	r3, #5
 8003f32:	83fb      	strh	r3, [r7, #30]
 8003f34:	e06a      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00111100000000: error = 6; break;
 8003f36:	2306      	movs	r3, #6
 8003f38:	83fb      	strh	r3, [r7, #30]
 8003f3a:	e067      	b.n	800400c <Run_YawSpeed+0x64c>
	case B01111100000000: error = 7; break;
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	83fb      	strh	r3, [r7, #30]
 8003f40:	e064      	b.n	800400c <Run_YawSpeed+0x64c>
	case B01111000000000: error = 8; break;
 8003f42:	2308      	movs	r3, #8
 8003f44:	83fb      	strh	r3, [r7, #30]
 8003f46:	e061      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11111000000000: error = 9; break;
 8003f48:	2309      	movs	r3, #9
 8003f4a:	83fb      	strh	r3, [r7, #30]
 8003f4c:	e05e      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11110000000000: error = 10; break;
 8003f4e:	230a      	movs	r3, #10
 8003f50:	83fb      	strh	r3, [r7, #30]
 8003f52:	e05b      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11100000000000: error = 11; break;
 8003f54:	230b      	movs	r3, #11
 8003f56:	83fb      	strh	r3, [r7, #30]
 8003f58:	e058      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11000000000000: error = 13; break;
 8003f5a:	230d      	movs	r3, #13
 8003f5c:	83fb      	strh	r3, [r7, #30]
 8003f5e:	e055      	b.n	800400c <Run_YawSpeed+0x64c>
	case B10000000000000: error = 15; break;
 8003f60:	230f      	movs	r3, #15
 8003f62:	83fb      	strh	r3, [r7, #30]
 8003f64:	e052      	b.n	800400c <Run_YawSpeed+0x64c>

	case B00000111111000: error = -1; break;
 8003f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f6a:	83fb      	strh	r3, [r7, #30]
 8003f6c:	e04e      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00001111111100: error = -1; break;
 8003f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f72:	83fb      	strh	r3, [r7, #30]
 8003f74:	e04a      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00011111111110: error = -1; break;
 8003f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f7a:	83fb      	strh	r3, [r7, #30]
 8003f7c:	e046      	b.n	800400c <Run_YawSpeed+0x64c>

	case B00001111110000: error = 0; break;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	83fb      	strh	r3, [r7, #30]
 8003f82:	e043      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00011111111000: error = 0; break;
 8003f84:	2300      	movs	r3, #0
 8003f86:	83fb      	strh	r3, [r7, #30]
 8003f88:	e040      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00111111111100: error = 0; break;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	83fb      	strh	r3, [r7, #30]
 8003f8e:	e03d      	b.n	800400c <Run_YawSpeed+0x64c>

	case B00011111100000: error = 1; break;
 8003f90:	2301      	movs	r3, #1
 8003f92:	83fb      	strh	r3, [r7, #30]
 8003f94:	e03a      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00111111110000: error = 1; break;
 8003f96:	2301      	movs	r3, #1
 8003f98:	83fb      	strh	r3, [r7, #30]
 8003f9a:	e037      	b.n	800400c <Run_YawSpeed+0x64c>
	case B01111111111000: error = 1; break;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	83fb      	strh	r3, [r7, #30]
 8003fa0:	e034      	b.n	800400c <Run_YawSpeed+0x64c>

	case B11111000000001: error = -2; break;
 8003fa2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003fa6:	83fb      	strh	r3, [r7, #30]
 8003fa8:	e030      	b.n	800400c <Run_YawSpeed+0x64c>

	case B11100000000001: error = -1; break;
 8003faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fae:	83fb      	strh	r3, [r7, #30]
 8003fb0:	e02c      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11110000000011: error = -1; break;
 8003fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb6:	83fb      	strh	r3, [r7, #30]
 8003fb8:	e028      	b.n	800400c <Run_YawSpeed+0x64c>

	case B10000000000001: error = 0; break;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	83fb      	strh	r3, [r7, #30]
 8003fbe:	e025      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11000000000011: error = 0; break;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	83fb      	strh	r3, [r7, #30]
 8003fc4:	e022      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11100000000111: error = 0; break;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	83fb      	strh	r3, [r7, #30]
 8003fca:	e01f      	b.n	800400c <Run_YawSpeed+0x64c>

	case B10000000000111: error = -1; break;
 8003fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fd0:	83fb      	strh	r3, [r7, #30]
 8003fd2:	e01b      	b.n	800400c <Run_YawSpeed+0x64c>
	case B11000000001111: error = -1; break;
 8003fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fd8:	83fb      	strh	r3, [r7, #30]
 8003fda:	e017      	b.n	800400c <Run_YawSpeed+0x64c>

	case B10000000011111: error = -2; break;
 8003fdc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003fe0:	83fb      	strh	r3, [r7, #30]
 8003fe2:	e013      	b.n	800400c <Run_YawSpeed+0x64c>

	case B11000011110000: error = -2; break;
 8003fe4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003fe8:	83fb      	strh	r3, [r7, #30]
 8003fea:	e00f      	b.n	800400c <Run_YawSpeed+0x64c>
	case B10000111110000: error = -1; break;
 8003fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ff0:	83fb      	strh	r3, [r7, #30]
 8003ff2:	e00b      	b.n	800400c <Run_YawSpeed+0x64c>
	case B10000111100001: error = 0; break;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	83fb      	strh	r3, [r7, #30]
 8003ff8:	e008      	b.n	800400c <Run_YawSpeed+0x64c>
	case B00001111100001: error = 1; break;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	83fb      	strh	r3, [r7, #30]
 8003ffe:	e005      	b.n	800400c <Run_YawSpeed+0x64c>
	case B10001111000011: error = 2; break;
 8004000:	2302      	movs	r3, #2
 8004002:	83fb      	strh	r3, [r7, #30]
 8004004:	e002      	b.n	800400c <Run_YawSpeed+0x64c>
	default: error = last_error;
 8004006:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <Run_YawSpeed+0x6fc>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	83fb      	strh	r3, [r7, #30]
	}

	int8_t div_error = error - last_error;
 800400c:	8bfb      	ldrh	r3, [r7, #30]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <Run_YawSpeed+0x6fc>)
 8004012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	767b      	strb	r3, [r7, #25]
	sum_error += error;
 800401e:	4b28      	ldr	r3, [pc, #160]	; (80040c0 <Run_YawSpeed+0x700>)
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	8bfb      	ldrh	r3, [r7, #30]
 8004024:	4413      	add	r3, r2
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <Run_YawSpeed+0x700>)
 800402a:	801a      	strh	r2, [r3, #0]
	float p = kp * (float)error;
 800402c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <Run_YawSpeed+0x704>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a05 	vstr	s15, [r7, #20]
	float i = ki * (float)sum_error * period;
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <Run_YawSpeed+0x700>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <Run_YawSpeed+0x708>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004064:	edc7 7a04 	vstr	s15, [r7, #16]
	float d = kd * (float)div_error / period;
 8004068:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <Run_YawSpeed+0x70c>)
 8004076:	edd3 7a00 	vldr	s15, [r3]
 800407a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800407e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004086:	edc7 7a03 	vstr	s15, [r7, #12]
	float mv = p + i + d;
 800408a:	ed97 7a05 	vldr	s14, [r7, #20]
 800408e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004096:	ed97 7a03 	vldr	s14, [r7, #12]
 800409a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409e:	edc7 7a02 	vstr	s15, [r7, #8]
	last_error = error;
 80040a2:	4a06      	ldr	r2, [pc, #24]	; (80040bc <Run_YawSpeed+0x6fc>)
 80040a4:	8bfb      	ldrh	r3, [r7, #30]
 80040a6:	8013      	strh	r3, [r2, #0]
	return mv;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	ee07 3a90 	vmov	s15, r3
}
 80040ae:	eeb0 0a67 	vmov.f32	s0, s15
 80040b2:	3724      	adds	r7, #36	; 0x24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000b1e 	.word	0x20000b1e
 80040c0:	20000b1c 	.word	0x20000b1c
 80040c4:	20000b10 	.word	0x20000b10
 80040c8:	20000b14 	.word	0x20000b14
 80040cc:	20000b18 	.word	0x20000b18

080040d0 <Run_LineTracing>:

void Run_LineTracing(float speed, float period, uint8_t flag) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80040da:	edc7 0a02 	vstr	s1, [r7, #8]
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, flag);
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80040ea:	f7ff fc69 	bl	80039c0 <Run_YawSpeed>
 80040ee:	ed87 0a05 	vstr	s0, [r7, #20]
	Motor_SetPoint(&MOTOR_R, speed-yaw_speed);
 80040f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80040f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80040fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004102:	4809      	ldr	r0, [pc, #36]	; (8004128 <Run_LineTracing+0x58>)
 8004104:	f7fe f964 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed+yaw_speed);
 8004108:	ed97 7a03 	vldr	s14, [r7, #12]
 800410c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004114:	eeb0 0a67 	vmov.f32	s0, s15
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <Run_LineTracing+0x5c>)
 800411a:	f7fe f959 	bl	80023d0 <Motor_SetPoint>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000a8c 	.word	0x20000a8c
 800412c:	20000acc 	.word	0x20000acc

08004130 <Run_SetMotorSpeed>:

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	ed87 0a01 	vstr	s0, [r7, #4]
 800413a:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 800413e:	ed97 0a00 	vldr	s0, [r7]
 8004142:	4806      	ldr	r0, [pc, #24]	; (800415c <Run_SetMotorSpeed+0x2c>)
 8004144:	f7fe f944 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8004148:	ed97 0a01 	vldr	s0, [r7, #4]
 800414c:	4804      	ldr	r0, [pc, #16]	; (8004160 <Run_SetMotorSpeed+0x30>)
 800414e:	f7fe f93f 	bl	80023d0 <Motor_SetPoint>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000a8c 	.word	0x20000a8c
 8004160:	20000acc 	.word	0x20000acc

08004164 <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <SEN_Init+0x3c>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e008      	b.n	800418a <SEN_Init+0x26>
 8004178:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <SEN_Init+0x40>)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b0d      	cmp	r3, #13
 800418e:	ddf3      	ble.n	8004178 <SEN_Init+0x14>
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000b20 	.word	0x20000b20
 80041a4:	20000b5c 	.word	0x20000b5c

080041a8 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b08d      	sub	sp, #52	; 0x34
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 80041b0:	2300      	movs	r3, #0
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b4:	e05a      	b.n	800426c <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	4a2f      	ldr	r2, [pc, #188]	; (800427c <SEN_Filter+0xd4>)
 80041c0:	7812      	ldrb	r2, [r2, #0]
 80041c2:	4614      	mov	r4, r2
 80041c4:	8818      	ldrh	r0, [r3, #0]
 80041c6:	492e      	ldr	r1, [pc, #184]	; (8004280 <SEN_Filter+0xd8>)
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4423      	add	r3, r4
 80041d4:	4602      	mov	r2, r0
 80041d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <SEN_Filter+0xd4>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d806      	bhi.n	80041f0 <SEN_Filter+0x48>
 80041e2:	4b26      	ldr	r3, [pc, #152]	; (800427c <SEN_Filter+0xd4>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	3301      	adds	r3, #1
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <SEN_Filter+0xd4>)
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <SEN_Filter+0x4e>
 80041f0:	4b22      	ldr	r3, [pc, #136]	; (800427c <SEN_Filter+0xd4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	221c      	movs	r2, #28
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f009 fee8 	bl	800dfd4 <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8004204:	2300      	movs	r3, #0
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
 8004208:	e01f      	b.n	800424a <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	3330      	adds	r3, #48	; 0x30
 8004210:	443b      	add	r3, r7
 8004212:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004216:	481a      	ldr	r0, [pc, #104]	; (8004280 <SEN_Filter+0xd8>)
 8004218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	4413      	add	r3, r2
 8004226:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <SEN_Filter+0xdc>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	08db      	lsrs	r3, r3, #3
 8004232:	b29b      	uxth	r3, r3
 8004234:	440b      	add	r3, r1
 8004236:	b29a      	uxth	r2, r3
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	3330      	adds	r3, #48	; 0x30
 800423e:	443b      	add	r3, r7
 8004240:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	3301      	adds	r3, #1
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	2b09      	cmp	r3, #9
 800424e:	dddc      	ble.n	800420a <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	441a      	add	r2, r3
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	3330      	adds	r3, #48	; 0x30
 800425e:	443b      	add	r3, r7
 8004260:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004264:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	3301      	adds	r3, #1
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	2b0d      	cmp	r3, #13
 8004270:	dda1      	ble.n	80041b6 <SEN_Filter+0xe>
	}
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	3734      	adds	r7, #52	; 0x34
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	20000ca4 	.word	0x20000ca4
 8004280:	20000b8c 	.word	0x20000b8c
 8004284:	cccccccd 	.word	0xcccccccd

08004288 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <SEN_StartReadSensor+0x18>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	220e      	movs	r2, #14
 8004292:	4904      	ldr	r1, [pc, #16]	; (80042a4 <SEN_StartReadSensor+0x1c>)
 8004294:	4618      	mov	r0, r3
 8004296:	f004 ff25 	bl	80090e4 <HAL_ADC_Start_DMA>
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000b20 	.word	0x20000b20
 80042a4:	20000b24 	.word	0x20000b24

080042a8 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <SEN_CallbackRoutine+0x17c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	f040 80ad 	bne.w	800441a <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 80042c0:	4859      	ldr	r0, [pc, #356]	; (8004428 <SEN_CallbackRoutine+0x180>)
 80042c2:	f7ff ff71 	bl	80041a8 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e017      	b.n	80042fc <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005a      	lsls	r2, r3, #1
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f1c3 030d 	rsb	r3, r3, #13
 80042d6:	4954      	ldr	r1, [pc, #336]	; (8004428 <SEN_CallbackRoutine+0x180>)
 80042d8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80042dc:	4a53      	ldr	r2, [pc, #332]	; (800442c <SEN_CallbackRoutine+0x184>)
 80042de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <SEN_CallbackRoutine+0x180>)
 80042ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80042ee:	4a4f      	ldr	r2, [pc, #316]	; (800442c <SEN_CallbackRoutine+0x184>)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3301      	adds	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	dde4      	ble.n	80042cc <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 8004302:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <SEN_CallbackRoutine+0x188>)
 8004304:	2200      	movs	r2, #0
 8004306:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	e06c      	b.n	80043e8 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 8004312:	4b48      	ldr	r3, [pc, #288]	; (8004434 <SEN_CallbackRoutine+0x18c>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d12a      	bne.n	8004370 <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 800431a:	4a44      	ldr	r2, [pc, #272]	; (800442c <SEN_CallbackRoutine+0x184>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004322:	4945      	ldr	r1, [pc, #276]	; (8004438 <SEN_CallbackRoutine+0x190>)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800432a:	429a      	cmp	r2, r3
 800432c:	d91a      	bls.n	8004364 <SEN_CallbackRoutine+0xbc>
				bit = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 8004332:	4a3e      	ldr	r2, [pc, #248]	; (800442c <SEN_CallbackRoutine+0x184>)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800433a:	4619      	mov	r1, r3
 800433c:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <SEN_CallbackRoutine+0x190>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004344:	1acb      	subs	r3, r1, r3
 8004346:	4a3d      	ldr	r2, [pc, #244]	; (800443c <SEN_CallbackRoutine+0x194>)
 8004348:	fb82 1203 	smull	r1, r2, r2, r3
 800434c:	1092      	asrs	r2, r2, #2
 800434e:	17db      	asrs	r3, r3, #31
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	b2d9      	uxtb	r1, r3
 8004358:	4a39      	ldr	r2, [pc, #228]	; (8004440 <SEN_CallbackRoutine+0x198>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	460a      	mov	r2, r1
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e02f      	b.n	80043c4 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8004364:	4a36      	ldr	r2, [pc, #216]	; (8004440 <SEN_CallbackRoutine+0x198>)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e029      	b.n	80043c4 <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 8004370:	4a2e      	ldr	r2, [pc, #184]	; (800442c <SEN_CallbackRoutine+0x184>)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004378:	492f      	ldr	r1, [pc, #188]	; (8004438 <SEN_CallbackRoutine+0x190>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004380:	429a      	cmp	r2, r3
 8004382:	d21a      	bcs.n	80043ba <SEN_CallbackRoutine+0x112>
				bit = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <SEN_CallbackRoutine+0x190>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004390:	4619      	mov	r1, r3
 8004392:	4a26      	ldr	r2, [pc, #152]	; (800442c <SEN_CallbackRoutine+0x184>)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439a:	1acb      	subs	r3, r1, r3
 800439c:	4a27      	ldr	r2, [pc, #156]	; (800443c <SEN_CallbackRoutine+0x194>)
 800439e:	fb82 1203 	smull	r1, r2, r2, r3
 80043a2:	1092      	asrs	r2, r2, #2
 80043a4:	17db      	asrs	r3, r3, #31
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	b2d9      	uxtb	r1, r3
 80043ae:	4a24      	ldr	r2, [pc, #144]	; (8004440 <SEN_CallbackRoutine+0x198>)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	460a      	mov	r2, r1
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e004      	b.n	80043c4 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 80043ba:	4a21      	ldr	r2, [pc, #132]	; (8004440 <SEN_CallbackRoutine+0x198>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f1c3 030d 	rsb	r3, r3, #13
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	b21a      	sxth	r2, r3
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <SEN_CallbackRoutine+0x188>)
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b21b      	sxth	r3, r3
 80043d8:	4313      	orrs	r3, r2
 80043da:	b21b      	sxth	r3, r3
 80043dc:	b29a      	uxth	r2, r3
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <SEN_CallbackRoutine+0x188>)
 80043e0:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0d      	cmp	r3, #13
 80043ec:	dd8f      	ble.n	800430e <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <SEN_CallbackRoutine+0x19c>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d102      	bne.n	80043fc <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f000 f870 	bl	80044dc <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <SEN_CallbackRoutine+0x1a0>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <SEN_CallbackRoutine+0x1a0>)
 8004408:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <SEN_CallbackRoutine+0x1a0>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	f023 0302 	bic.w	r3, r3, #2
 8004412:	b2da      	uxtb	r2, r3
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <SEN_CallbackRoutine+0x1a0>)
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e000      	b.n	800441c <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 800441a:	bf00      	nop
}
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000b20 	.word	0x20000b20
 8004428:	20000b24 	.word	0x20000b24
 800442c:	20000b40 	.word	0x20000b40
 8004430:	20000b86 	.word	0x20000b86
 8004434:	20000b88 	.word	0x20000b88
 8004438:	20000b5c 	.word	0x20000b5c
 800443c:	66666667 	.word	0x66666667
 8004440:	20000b78 	.word	0x20000b78
 8004444:	20000cb0 	.word	0x20000cb0
 8004448:	20000ca5 	.word	0x20000ca5

0800444c <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 8004452:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <SEN_StartAutoCalibration+0x84>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d035      	beq.n	80044c6 <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 800445a:	201c      	movs	r0, #28
 800445c:	f009 fd9c 	bl	800df98 <malloc>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <SEN_StartAutoCalibration+0x88>)
 8004466:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8004468:	201c      	movs	r0, #28
 800446a:	f009 fd95 	bl	800df98 <malloc>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <SEN_StartAutoCalibration+0x8c>)
 8004474:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <SEN_StartAutoCalibration+0x88>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <SEN_StartAutoCalibration+0x3a>
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <SEN_StartAutoCalibration+0x8c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01b      	beq.n	80044be <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	e011      	b.n	80044b0 <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 800448c:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <SEN_StartAutoCalibration+0x88>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <SEN_StartAutoCalibration+0x8c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80044a8:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3301      	adds	r3, #1
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b0d      	cmp	r3, #13
 80044b4:	ddea      	ble.n	800448c <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <SEN_StartAutoCalibration+0x84>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e004      	b.n	80044c8 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <SEN_StartAutoCalibration+0x84>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e000      	b.n	80044c8 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 80044c6:	bf00      	nop
}
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000cb0 	.word	0x20000cb0
 80044d4:	20000ca8 	.word	0x20000ca8
 80044d8:	20000cac 	.word	0x20000cac

080044dc <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e02f      	b.n	800454c <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <SEN_AutoCalibrationRoutine+0x84>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	491a      	ldr	r1, [pc, #104]	; (8004564 <SEN_AutoCalibrationRoutine+0x88>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004500:	429a      	cmp	r2, r3
 8004502:	d20a      	bcs.n	800451a <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <SEN_AutoCalibrationRoutine+0x84>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	4915      	ldr	r1, [pc, #84]	; (8004564 <SEN_AutoCalibrationRoutine+0x88>)
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e015      	b.n	8004546 <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <SEN_AutoCalibrationRoutine+0x8c>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	490f      	ldr	r1, [pc, #60]	; (8004564 <SEN_AutoCalibrationRoutine+0x88>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800452e:	429a      	cmp	r2, r3
 8004530:	d909      	bls.n	8004546 <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <SEN_AutoCalibrationRoutine+0x8c>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	4909      	ldr	r1, [pc, #36]	; (8004564 <SEN_AutoCalibrationRoutine+0x88>)
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004544:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b0d      	cmp	r3, #13
 8004550:	ddcc      	ble.n	80044ec <SEN_AutoCalibrationRoutine+0x10>
	}
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000ca8 	.word	0x20000ca8
 8004564:	20000b40 	.word	0x20000b40
 8004568:	20000cac 	.word	0x20000cac
 800456c:	00000000 	.word	0x00000000

08004570 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 8004570:	b5b0      	push	{r4, r5, r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 800457a:	4b37      	ldr	r3, [pc, #220]	; (8004658 <SEN_EndAutoCalibration+0xe8>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d060      	beq.n	8004644 <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d04d      	beq.n	8004628 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e047      	b.n	8004622 <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 8004592:	4b32      	ldr	r3, [pc, #200]	; (800465c <SEN_EndAutoCalibration+0xec>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	881a      	ldrh	r2, [r3, #0]
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <SEN_EndAutoCalibration+0xf0>)
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	440b      	add	r3, r1
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d335      	bcc.n	800461a <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 80045ae:	4b2b      	ldr	r3, [pc, #172]	; (800465c <SEN_EndAutoCalibration+0xec>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <SEN_EndAutoCalibration+0xf0>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	1acb      	subs	r3, r1, r3
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fb ffaa 	bl	8000524 <__aeabi_i2d>
 80045d0:	a31f      	add	r3, pc, #124	; (adr r3, 8004650 <SEN_EndAutoCalibration+0xe0>)
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f7fc f80f 	bl	80005f8 <__aeabi_dmul>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4614      	mov	r4, r2
 80045e0:	461d      	mov	r5, r3
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <SEN_EndAutoCalibration+0xf0>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb ff98 	bl	8000524 <__aeabi_i2d>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4620      	mov	r0, r4
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7fb fe46 	bl	800028c <__adddf3>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	f7fc face 	bl	8000ba8 <__aeabi_d2uiz>
 800460c:	4603      	mov	r3, r0
 800460e:	b299      	uxth	r1, r3
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <SEN_EndAutoCalibration+0xf4>)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004618:	e000      	b.n	800461c <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 800461a:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b0d      	cmp	r3, #13
 8004626:	ddb4      	ble.n	8004592 <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <SEN_EndAutoCalibration+0xec>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f009 fcbb 	bl	800dfa8 <free>
	free(calib_lower_adc);
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <SEN_EndAutoCalibration+0xf0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f009 fcb6 	bl	800dfa8 <free>
	autocalib_status = 0;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <SEN_EndAutoCalibration+0xe8>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e000      	b.n	8004646 <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 8004644:	bf00      	nop
}
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bdb0      	pop	{r4, r5, r7, pc}
 800464c:	f3af 8000 	nop.w
 8004650:	9999999a 	.word	0x9999999a
 8004654:	3fd99999 	.word	0x3fd99999
 8004658:	20000cb0 	.word	0x20000cb0
 800465c:	20000ca8 	.word	0x20000ca8
 8004660:	20000cac 	.word	0x20000cac
 8004664:	20000b5c 	.word	0x20000b5c

08004668 <SEN_BlackLine>:

void SEN_BlackLine() {
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <SEN_BlackLine+0x14>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000b88 	.word	0x20000b88

08004680 <SEN_WhiteLine>:

void SEN_WhiteLine() {
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
	sensor_invert = 1;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <SEN_WhiteLine+0x14>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	20000b88 	.word	0x20000b88

08004698 <SEN_Invert>:

void SEN_Invert() {
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <SEN_Invert+0x24>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <SEN_Invert+0x24>)
 80046ae:	701a      	strb	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000b88 	.word	0x20000b88

080046c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_MspInit+0x4c>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	4a0f      	ldr	r2, [pc, #60]	; (800470c <HAL_MspInit+0x4c>)
 80046d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046d4:	6453      	str	r3, [r2, #68]	; 0x44
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <HAL_MspInit+0x4c>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_MspInit+0x4c>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <HAL_MspInit+0x4c>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_MspInit+0x4c>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800

08004710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004714:	e7fe      	b.n	8004714 <NMI_Handler+0x4>

08004716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800471a:	e7fe      	b.n	800471a <HardFault_Handler+0x4>

0800471c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004720:	e7fe      	b.n	8004720 <MemManage_Handler+0x4>

08004722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004726:	e7fe      	b.n	8004726 <BusFault_Handler+0x4>

08004728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800472c:	e7fe      	b.n	800472c <UsageFault_Handler+0x4>

0800472e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800472e:	b480      	push	{r7}
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800474a:	b480      	push	{r7}
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800475c:	f004 fb2a 	bl	8008db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}

08004764 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <ADC_IRQHandler+0x10>)
 800476a:	f004 fbaa 	bl	8008ec2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000514 	.word	0x20000514

08004778 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <TIM6_DAC_IRQHandler+0x10>)
 800477e:	f007 ff71 	bl	800c664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000e88 	.word	0x20000e88

0800478c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DMA2_Stream0_IRQHandler+0x10>)
 8004792:	f005 fab1 	bl	8009cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000055c 	.word	0x2000055c

080047a0 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <GetAction+0x78>)
 80047b0:	fba2 1203 	umull	r1, r2, r2, r3
 80047b4:	0952      	lsrs	r2, r2, #5
 80047b6:	2164      	movs	r1, #100	; 0x64
 80047b8:	fb01 f202 	mul.w	r2, r1, r2
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <GetAction+0x7c>)
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3340      	adds	r3, #64	; 0x40
 80047d2:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 80047d4:	bf00      	nop
 80047d6:	f7fd faf7 	bl	8001dc8 <EEP_ReadyToWrite>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0fa      	beq.n	80047d6 <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 80047e0:	f107 010c 	add.w	r1, r7, #12
 80047e4:	8bfb      	ldrh	r3, [r7, #30]
 80047e6:	2210      	movs	r2, #16
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd fac7 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <GetAction+0x80>)
 80047f0:	461c      	mov	r4, r3
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return plan_active;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <GetAction+0x80>)
 8004802:	461c      	mov	r4, r3
 8004804:	4613      	mov	r3, r2
 8004806:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004808:	6020      	str	r0, [r4, #0]
 800480a:	6061      	str	r1, [r4, #4]
 800480c:	60a2      	str	r2, [r4, #8]
}
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	3724      	adds	r7, #36	; 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd90      	pop	{r4, r7, pc}
 8004816:	bf00      	nop
 8004818:	51eb851f 	.word	0x51eb851f
 800481c:	20000cb2 	.word	0x20000cb2
 8004820:	20000d2c 	.word	0x20000d2c

08004824 <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b08b      	sub	sp, #44	; 0x2c
 8004828:	af00      	add	r7, sp, #0
 800482a:	1d3c      	adds	r4, r7, #4
 800482c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004830:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <SetAction+0x74>)
 8004836:	fba2 1203 	umull	r1, r2, r2, r3
 800483a:	0952      	lsrs	r2, r2, #5
 800483c:	2164      	movs	r1, #100	; 0x64
 800483e:	fb01 f202 	mul.w	r2, r1, r2
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <SetAction+0x78>)
 8004848:	461c      	mov	r4, r3
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	b29b      	uxth	r3, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <SetAction+0x7c>)
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	4413      	add	r3, r2
 8004862:	b29b      	uxth	r3, r3
 8004864:	3340      	adds	r3, #64	; 0x40
 8004866:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 8004868:	4a0c      	ldr	r2, [pc, #48]	; (800489c <SetAction+0x78>)
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004870:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004874:	bf00      	nop
 8004876:	f7fd faa7 	bl	8001dc8 <EEP_ReadyToWrite>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0fa      	beq.n	8004876 <SetAction+0x52>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004880:	f107 0114 	add.w	r1, r7, #20
 8004884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004886:	2210      	movs	r2, #16
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fa2f 	bl	8001cec <EEP_WriteMem>
}
 800488e:	bf00      	nop
 8004890:	372c      	adds	r7, #44	; 0x2c
 8004892:	46bd      	mov	sp, r7
 8004894:	bd90      	pop	{r4, r7, pc}
 8004896:	bf00      	nop
 8004898:	51eb851f 	.word	0x51eb851f
 800489c:	20000d2c 	.word	0x20000d2c
 80048a0:	20000cb2 	.word	0x20000cb2

080048a4 <Storage_ResetPlan>:

void Storage_ResetPlan() {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b0b0      	sub	sp, #192	; 0xc0
 80048a8:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 80048aa:	4b35      	ldr	r3, [pc, #212]	; (8004980 <Storage_ResetPlan+0xdc>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 80048b8:	2328      	movs	r3, #40	; 0x28
 80048ba:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 80048be:	2364      	movs	r3, #100	; 0x64
 80048c0:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 10;
 80048c4:	230a      	movs	r3, #10
 80048c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 80048ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80048ce:	3302      	adds	r3, #2
 80048d0:	2214      	movs	r2, #20
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f009 fb7d 	bl	800dfd4 <memset>
	temp.kpid[0] = 4.71428;
 80048da:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <Storage_ResetPlan+0xe0>)
 80048dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 0;
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	temp.status_pid = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
	temp.acc = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 80048fc:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004900:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004904:	2228      	movs	r2, #40	; 0x28
 8004906:	4618      	mov	r0, r3
 8004908:	f009 fb56 	bl	800dfb8 <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <Storage_ResetPlan+0xe4>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 8004916:	bf00      	nop
 8004918:	f7fd fa56 	bl	8001dc8 <EEP_ReadyToWrite>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0fa      	beq.n	8004918 <Storage_ResetPlan+0x74>
	EEP_WritePage(page_plan, buff);
 8004922:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004926:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd f9b9 	bl	8001ca4 <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004938:	e018      	b.n	800496c <Storage_ResetPlan+0xc8>

		action_temp = plan_default;
 800493a:	4a14      	ldr	r2, [pc, #80]	; (800498c <Storage_ResetPlan+0xe8>)
 800493c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004940:	ca07      	ldmia	r2, {r0, r1, r2}
 8004942:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800494c:	ca07      	ldmia	r2, {r0, r1, r2}
 800494e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		SetAction(action_temp, i);
 8004952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800495c:	ca07      	ldmia	r2, {r0, r1, r2}
 800495e:	f7ff ff61 	bl	8004824 <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8004962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004966:	3301      	adds	r3, #1
 8004968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800496c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004970:	2b63      	cmp	r3, #99	; 0x63
 8004972:	dde2      	ble.n	800493a <Storage_ResetPlan+0x96>
	}
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	37c0      	adds	r7, #192	; 0xc0
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000cb1 	.word	0x20000cb1
 8004984:	4096db62 	.word	0x4096db62
 8004988:	20000cb2 	.word	0x20000cb2
 800498c:	0801121c 	.word	0x0801121c

08004990 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8004990:	b580      	push	{r7, lr}
 8004992:	b094      	sub	sp, #80	; 0x50
 8004994:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f009 fb19 	bl	800dfd4 <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 80049a2:	23ab      	movs	r3, #171	; 0xab
 80049a4:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 80049a6:	230f      	movs	r3, #15
 80049a8:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	3310      	adds	r3, #16
 80049b2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	e012      	b.n	80049e0 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	b29b      	uxth	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	0052      	lsls	r2, r2, #1
 80049c2:	441a      	add	r2, r3
 80049c4:	0092      	lsls	r2, r2, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	01db      	lsls	r3, r3, #7
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049d2:	440b      	add	r3, r1
 80049d4:	3240      	adds	r2, #64	; 0x40
 80049d6:	b292      	uxth	r2, r2
 80049d8:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	3301      	adds	r3, #1
 80049de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e2:	2b0e      	cmp	r3, #14
 80049e4:	dde9      	ble.n	80049ba <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 80049e6:	1d3b      	adds	r3, r7, #4
 80049e8:	3320      	adds	r3, #32
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 80049ec:	2300      	movs	r3, #0
 80049ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f0:	e009      	b.n	8004a06 <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 80049f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f8:	4413      	add	r3, r2
 80049fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80049fe:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a02:	3301      	adds	r3, #1
 8004a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a08:	2b0d      	cmp	r3, #13
 8004a0a:	ddf2      	ble.n	80049f2 <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 8004a0c:	bf00      	nop
 8004a0e:	f7fd f9db 	bl	8001dc8 <EEP_ReadyToWrite>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0fa      	beq.n	8004a0e <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 8004a18:	1d3b      	adds	r3, r7, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7fd f941 	bl	8001ca4 <EEP_WritePage>
}
 8004a22:	bf00      	nop
 8004a24:	3750      	adds	r7, #80	; 0x50
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <Storage_Init>:

uint8_t Storage_Init() {
 8004a2c:	b5b0      	push	{r4, r5, r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004a30:	bf00      	nop
 8004a32:	f7fd f9c9 	bl	8001dc8 <EEP_ReadyToWrite>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0fa      	beq.n	8004a32 <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 8004a3c:	4913      	ldr	r1, [pc, #76]	; (8004a8c <Storage_Init+0x60>)
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7fd f978 	bl	8001d34 <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <Storage_Init+0x60>)
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2bab      	cmp	r3, #171	; 0xab
 8004a4a:	d001      	beq.n	8004a50 <Storage_Init+0x24>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e01b      	b.n	8004a88 <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <Storage_Init+0x60>)
 8004a52:	791a      	ldrb	r2, [r3, #4]
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <Storage_Init+0x64>)
 8004a56:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <Storage_Init+0x64>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <Storage_Init+0x60>)
 8004a62:	4413      	add	r3, r2
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <Storage_Init+0x68>)
 8004a68:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <Storage_Init+0x6c>)
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <Storage_Init+0x60>)
 8004a6e:	4615      	mov	r5, r2
 8004a70:	f103 0420 	add.w	r4, r3, #32
 8004a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a76:	6028      	str	r0, [r5, #0]
 8004a78:	6069      	str	r1, [r5, #4]
 8004a7a:	60aa      	str	r2, [r5, #8]
 8004a7c:	60eb      	str	r3, [r5, #12]
 8004a7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004a80:	6128      	str	r0, [r5, #16]
 8004a82:	6169      	str	r1, [r5, #20]
 8004a84:	61aa      	str	r2, [r5, #24]
	return 1;
 8004a86:	2301      	movs	r3, #1
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8c:	20000cb8 	.word	0x20000cb8
 8004a90:	20000cb1 	.word	0x20000cb1
 8004a94:	20000cb2 	.word	0x20000cb2
 8004a98:	20000b5c 	.word	0x20000b5c

08004a9c <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b092      	sub	sp, #72	; 0x48
 8004aa0:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004aa2:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <Storage_PlanInit+0x54>)
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8004aae:	bf00      	nop
 8004ab0:	f7fd f98a 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0fa      	beq.n	8004ab0 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 8004aba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	1d3a      	adds	r2, r7, #4
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd f935 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	2228      	movs	r2, #40	; 0x28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4808      	ldr	r0, [pc, #32]	; (8004af4 <Storage_PlanInit+0x58>)
 8004ad2:	f009 fa71 	bl	800dfb8 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <Storage_PlanInit+0x58>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	09db      	lsrs	r3, r3, #7
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <Storage_PlanInit+0x4a>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <Storage_PlanInit+0x4c>
	return 1;
 8004ae6:	2301      	movs	r3, #1
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3748      	adds	r7, #72	; 0x48
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000cb2 	.word	0x20000cb2
 8004af4:	20000d3c 	.word	0x20000d3c

08004af8 <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004afc:	bf00      	nop
 8004afe:	f7fd f963 	bl	8001dc8 <EEP_ReadyToWrite>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0fa      	beq.n	8004afe <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004b08:	221c      	movs	r2, #28
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <Storage_GetADCThreshold+0x3c>)
 8004b0c:	2020      	movs	r0, #32
 8004b0e:	f7fd f935 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <Storage_GetADCThreshold+0x40>)
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <Storage_GetADCThreshold+0x44>)
 8004b16:	4615      	mov	r5, r2
 8004b18:	f103 0420 	add.w	r4, r3, #32
 8004b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b1e:	6028      	str	r0, [r5, #0]
 8004b20:	6069      	str	r1, [r5, #4]
 8004b22:	60aa      	str	r2, [r5, #8]
 8004b24:	60eb      	str	r3, [r5, #12]
 8004b26:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004b28:	6128      	str	r0, [r5, #16]
 8004b2a:	6169      	str	r1, [r5, #20]
 8004b2c:	61aa      	str	r2, [r5, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	bdb0      	pop	{r4, r5, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000cd8 	.word	0x20000cd8
 8004b38:	20000b5c 	.word	0x20000b5c
 8004b3c:	20000cb8 	.word	0x20000cb8

08004b40 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 8004b40:	b5b0      	push	{r4, r5, r7, lr}
 8004b42:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <Storage_SetADCThreshold+0x3c>)
 8004b46:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <Storage_SetADCThreshold+0x40>)
 8004b48:	f103 0420 	add.w	r4, r3, #32
 8004b4c:	4615      	mov	r5, r2
 8004b4e:	6828      	ldr	r0, [r5, #0]
 8004b50:	6869      	ldr	r1, [r5, #4]
 8004b52:	68aa      	ldr	r2, [r5, #8]
 8004b54:	68eb      	ldr	r3, [r5, #12]
 8004b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b58:	6928      	ldr	r0, [r5, #16]
 8004b5a:	6969      	ldr	r1, [r5, #20]
 8004b5c:	69aa      	ldr	r2, [r5, #24]
 8004b5e:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004b60:	bf00      	nop
 8004b62:	f7fd f931 	bl	8001dc8 <EEP_ReadyToWrite>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0fa      	beq.n	8004b62 <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004b6c:	221c      	movs	r2, #28
 8004b6e:	4905      	ldr	r1, [pc, #20]	; (8004b84 <Storage_SetADCThreshold+0x44>)
 8004b70:	2020      	movs	r0, #32
 8004b72:	f7fd f8bb 	bl	8001cec <EEP_WriteMem>
}
 8004b76:	bf00      	nop
 8004b78:	bdb0      	pop	{r4, r5, r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000cb8 	.word	0x20000cb8
 8004b80:	20000b5c 	.word	0x20000b5c
 8004b84:	20000cd8 	.word	0x20000cd8

08004b88 <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b094      	sub	sp, #80	; 0x50
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 8004b92:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <Storage_GetPlan+0x94>)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <Storage_GetPlan+0x94>)
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <Storage_GetPlan+0x98>)
 8004b9e:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <Storage_GetPlan+0x94>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <Storage_GetPlan+0x98>)
 8004baa:	4413      	add	r3, r2
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <Storage_GetPlan+0x9c>)
 8004bb0:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8004bb2:	bf00      	nop
 8004bb4:	f7fd f908 	bl	8001dc8 <EEP_ReadyToWrite>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0fa      	beq.n	8004bb4 <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4916      	ldr	r1, [pc, #88]	; (8004c1c <Storage_GetPlan+0x94>)
 8004bc2:	2004      	movs	r0, #4
 8004bc4:	f7fd f892 	bl	8001cec <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <Storage_GetPlan+0x9c>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8004bd4:	bf00      	nop
 8004bd6:	f7fd f8f7 	bl	8001dc8 <EEP_ReadyToWrite>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0fa      	beq.n	8004bd6 <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8004be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f107 020c 	add.w	r2, r7, #12
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd f8a1 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2228      	movs	r2, #40	; 0x28
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	480b      	ldr	r0, [pc, #44]	; (8004c28 <Storage_GetPlan+0xa0>)
 8004bfc:	f009 f9dc 	bl	800dfb8 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <Storage_GetPlan+0xa0>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	09db      	lsrs	r3, r3, #7
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d001      	beq.n	8004c10 <Storage_GetPlan+0x88>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <Storage_GetPlan+0x8a>
	return 1;
 8004c10:	2301      	movs	r3, #1
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3750      	adds	r7, #80	; 0x50
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000cb1 	.word	0x20000cb1
 8004c20:	20000cb8 	.word	0x20000cb8
 8004c24:	20000cb2 	.word	0x20000cb2
 8004c28:	20000d3c 	.word	0x20000d3c

08004c2c <Storage_SetPlanOther>:

void Storage_SetPlanOther(Plan_typedef* ptr_plan, uint8_t n_plan) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b094      	sub	sp, #80	; 0x50
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <Storage_SetPlanOther+0x5c>)
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t plan_page = (n_plan_addr)/PAGE_SIZE;
 8004c48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c4c:	099b      	lsrs	r3, r3, #6
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)ptr_plan, sizeof(Plan_typedef));
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	2228      	movs	r2, #40	; 0x28
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f009 f9ab 	bl	800dfb8 <memcpy>
	while(!EEP_ReadyToWrite());
 8004c62:	bf00      	nop
 8004c64:	f7fd f8b0 	bl	8001dc8 <EEP_ReadyToWrite>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0fa      	beq.n	8004c64 <Storage_SetPlanOther+0x38>
	EEP_WritePage(plan_page, buff);
 8004c6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f107 020c 	add.w	r2, r7, #12
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fd f812 	bl	8001ca4 <EEP_WritePage>
}
 8004c80:	bf00      	nop
 8004c82:	3750      	adds	r7, #80	; 0x50
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000cb8 	.word	0x20000cb8

08004c8c <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 8004c92:	2302      	movs	r3, #2
 8004c94:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004c96:	bf00      	nop
 8004c98:	f7fd f896 	bl	8001dc8 <EEP_ReadyToWrite>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0fa      	beq.n	8004c98 <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <Storage_SetCheckpoint+0x34>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4413      	add	r3, r2
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2214      	movs	r2, #20
 8004cb0:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <Storage_SetCheckpoint+0x38>)
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd f81a 	bl	8001cec <EEP_WriteMem>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000cb2 	.word	0x20000cb2
 8004cc4:	20000d3e 	.word	0x20000d3e

08004cc8 <Storage_SetPID>:

void Storage_SetPID() {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8004cce:	2318      	movs	r3, #24
 8004cd0:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004cd2:	bf00      	nop
 8004cd4:	f7fd f878 	bl	8001dc8 <EEP_ReadyToWrite>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0fa      	beq.n	8004cd4 <Storage_SetPID+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, 3*sizeof(float));
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <Storage_SetPID+0x60>)
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	220c      	movs	r2, #12
 8004cec:	490f      	ldr	r1, [pc, #60]	; (8004d2c <Storage_SetPID+0x64>)
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fc fffc 	bl	8001cec <EEP_WriteMem>

	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
 8004cf4:	2324      	movs	r3, #36	; 0x24
 8004cf6:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004cf8:	bf00      	nop
 8004cfa:	f7fd f865 	bl	8001dc8 <EEP_ReadyToWrite>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0fa      	beq.n	8004cfa <Storage_SetPID+0x32>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <Storage_SetPID+0x60>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4a07      	ldr	r2, [pc, #28]	; (8004d30 <Storage_SetPID+0x68>)
 8004d12:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004d16:	4611      	mov	r1, r2
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fc ffe6 	bl	8001cec <EEP_WriteMem>
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000cb2 	.word	0x20000cb2
 8004d2c:	20000d54 	.word	0x20000d54
 8004d30:	20000d3c 	.word	0x20000d3c

08004d34 <Storage_SetSpeed>:

void Storage_SetSpeed() {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8004d3a:	2316      	movs	r3, #22
 8004d3c:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004d3e:	bf00      	nop
 8004d40:	f7fd f842 	bl	8001dc8 <EEP_ReadyToWrite>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0fa      	beq.n	8004d40 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <Storage_SetSpeed+0x34>)
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2202      	movs	r2, #2
 8004d58:	4904      	ldr	r1, [pc, #16]	; (8004d6c <Storage_SetSpeed+0x38>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fc ffc6 	bl	8001cec <EEP_WriteMem>
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000cb2 	.word	0x20000cb2
 8004d6c:	20000d52 	.word	0x20000d52

08004d70 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, uint8_t index) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	70bb      	strb	r3, [r7, #2]
	index = index%DEF_ACTION_PER_PLAN;
 8004d80:	78bb      	ldrb	r3, [r7, #2]
 8004d82:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <GetActionOther+0x78>)
 8004d84:	fba2 1203 	umull	r1, r2, r2, r3
 8004d88:	0952      	lsrs	r2, r2, #5
 8004d8a:	2164      	movs	r1, #100	; 0x64
 8004d8c:	fb01 f202 	mul.w	r2, r1, r2
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	70bb      	strb	r3, [r7, #2]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	3308      	adds	r3, #8
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4a14      	ldr	r2, [pc, #80]	; (8004dec <GetActionOther+0x7c>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	83fb      	strh	r3, [r7, #30]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8004da2:	78bb      	ldrb	r3, [r7, #2]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	8bfb      	ldrh	r3, [r7, #30]
 8004dac:	4413      	add	r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3340      	adds	r3, #64	; 0x40
 8004db2:	83bb      	strh	r3, [r7, #28]
	while(!EEP_ReadyToWrite());
 8004db4:	bf00      	nop
 8004db6:	f7fd f807 	bl	8001dc8 <EEP_ReadyToWrite>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0fa      	beq.n	8004db6 <GetActionOther+0x46>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8004dc0:	f107 010c 	add.w	r1, r7, #12
 8004dc4:	8bbb      	ldrh	r3, [r7, #28]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fc ffd7 	bl	8001d7c <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 8004dce:	f107 020c 	add.w	r2, r7, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6810      	ldr	r0, [r2, #0]
 8004dd6:	6851      	ldr	r1, [r2, #4]
 8004dd8:	6892      	ldr	r2, [r2, #8]
 8004dda:	6018      	str	r0, [r3, #0]
 8004ddc:	6059      	str	r1, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	51eb851f 	.word	0x51eb851f
 8004dec:	20000cb8 	.word	0x20000cb8

08004df0 <SetActionOther>:

void SetActionOther(Action_typedef act, uint8_t index) {
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b08b      	sub	sp, #44	; 0x2c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	1d3c      	adds	r4, r7, #4
 8004df8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dfc:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	4a14      	ldr	r2, [pc, #80]	; (8004e54 <SetActionOther+0x64>)
 8004e02:	fba2 1203 	umull	r1, r2, r2, r3
 8004e06:	0952      	lsrs	r2, r2, #5
 8004e08:	2164      	movs	r1, #100	; 0x64
 8004e0a:	fb01 f202 	mul.w	r2, r1, r2
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <SetActionOther+0x68>)
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	4413      	add	r3, r2
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3340      	adds	r3, #64	; 0x40
 8004e24:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	1d3a      	adds	r2, r7, #4
 8004e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004e32:	bf00      	nop
 8004e34:	f7fc ffc8 	bl	8001dc8 <EEP_ReadyToWrite>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0fa      	beq.n	8004e34 <SetActionOther+0x44>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004e3e:	f107 0114 	add.w	r1, r7, #20
 8004e42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e44:	2210      	movs	r2, #16
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fc ff50 	bl	8001cec <EEP_WriteMem>
}
 8004e4c:	bf00      	nop
 8004e4e:	372c      	adds	r7, #44	; 0x2c
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}
 8004e54:	51eb851f 	.word	0x51eb851f
 8004e58:	20000cb2 	.word	0x20000cb2

08004e5c <SetActionOther2>:

void SetActionOther2(uint8_t n_plan, Action_typedef act, uint8_t index) {
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b08b      	sub	sp, #44	; 0x2c
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4638      	mov	r0, r7
 8004e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	73fb      	strb	r3, [r7, #15]
	index = index%DEF_ACTION_PER_PLAN;
 8004e6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004e72:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <SetActionOther2+0x7c>)
 8004e74:	fba2 1203 	umull	r1, r2, r2, r3
 8004e78:	0952      	lsrs	r2, r2, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f202 	mul.w	r2, r1, r2
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4a13      	ldr	r2, [pc, #76]	; (8004edc <SetActionOther2+0x80>)
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t act_addr = n_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8004e94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea0:	4413      	add	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3340      	adds	r3, #64	; 0x40
 8004ea6:	84bb      	strh	r3, [r7, #36]	; 0x24
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	463a      	mov	r2, r7
 8004eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8004eb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004eb4:	bf00      	nop
 8004eb6:	f7fc ff87 	bl	8001dc8 <EEP_ReadyToWrite>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0fa      	beq.n	8004eb6 <SetActionOther2+0x5a>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004ec0:	f107 0114 	add.w	r1, r7, #20
 8004ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fc ff0f 	bl	8001cec <EEP_WriteMem>
}
 8004ece:	bf00      	nop
 8004ed0:	372c      	adds	r7, #44	; 0x2c
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	51eb851f 	.word	0x51eb851f
 8004edc:	20000cb8 	.word	0x20000cb8

08004ee0 <GetActionSequence>:

uint8_t GetActionSequence() {
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 8004ee6:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <GetActionSequence+0x8c>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d132      	bne.n	8004f58 <GetActionSequence+0x78>

		if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <GetActionSequence+0x90>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d903      	bls.n	8004f02 <GetActionSequence+0x22>
 8004efa:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <GetActionSequence+0x90>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e005      	b.n	8004f0e <GetActionSequence+0x2e>
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <GetActionSequence+0x90>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	4b19      	ldr	r3, [pc, #100]	; (8004f70 <GetActionSequence+0x90>)
 8004f0c:	701a      	strb	r2, [r3, #0]

		plan_active = plan_buffer[plan_buffer_i];
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <GetActionSequence+0x90>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	4817      	ldr	r0, [pc, #92]	; (8004f74 <GetActionSequence+0x94>)
 8004f16:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <GetActionSequence+0x98>)
 8004f18:	460b      	mov	r3, r1
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	440b      	add	r3, r1
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if(plan_buffer_i == plan_buffer_f) {
 8004f2a:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <GetActionSequence+0x90>)
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <GetActionSequence+0x9c>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d106      	bne.n	8004f44 <GetActionSequence+0x64>
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <GetActionSequence+0x8c>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f043 0302 	orr.w	r3, r3, #2
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <GetActionSequence+0x8c>)
 8004f42:	701a      	strb	r2, [r3, #0]
		}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <GetActionSequence+0x8c>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <GetActionSequence+0x8c>)
 8004f50:	701a      	strb	r2, [r3, #0]
		retval = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	71fb      	strb	r3, [r7, #7]
 8004f56:	e001      	b.n	8004f5c <GetActionSequence+0x7c>
	} else {
		retval = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000d38 	.word	0x20000d38
 8004f70:	20000d2a 	.word	0x20000d2a
 8004f74:	20000d2c 	.word	0x20000d2c
 8004f78:	20000cf8 	.word	0x20000cf8
 8004f7c:	20000d29 	.word	0x20000d29

08004f80 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8004f86:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <GetActionSequenceRoutine+0x104>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <GetActionSequenceRoutine+0x1e>
 8004f8e:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <GetActionSequenceRoutine+0x104>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d107      	bne.n	8004fae <GetActionSequenceRoutine+0x2e>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8004f9e:	4b39      	ldr	r3, [pc, #228]	; (8005084 <GetActionSequenceRoutine+0x104>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d161      	bne.n	800506a <GetActionSequenceRoutine+0xea>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8004fa6:	4b38      	ldr	r3, [pc, #224]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d05d      	beq.n	800506a <GetActionSequenceRoutine+0xea>
		if(buff_index < plan.num_action-2) {
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <GetActionSequenceRoutine+0x10c>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b36      	ldr	r3, [pc, #216]	; (8005090 <GetActionSequenceRoutine+0x110>)
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	3b02      	subs	r3, #2
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	da4d      	bge.n	800505a <GetActionSequenceRoutine+0xda>
			buff_index++;
 8004fbe:	4b33      	ldr	r3, [pc, #204]	; (800508c <GetActionSequenceRoutine+0x10c>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4b31      	ldr	r3, [pc, #196]	; (800508c <GetActionSequenceRoutine+0x10c>)
 8004fc8:	701a      	strb	r2, [r3, #0]
			if(plan_buffer_f>=BUFFER_SIZE-1) plan_buffer_f=0; else plan_buffer_f++;
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d903      	bls.n	8004fda <GetActionSequenceRoutine+0x5a>
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	e005      	b.n	8004fe6 <GetActionSequenceRoutine+0x66>
 8004fda:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b29      	ldr	r3, [pc, #164]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004fe4:	701a      	strb	r2, [r3, #0]
			plan_buffer[plan_buffer_f] = GetActionOther(num_plan, buff_index);
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <GetActionSequenceRoutine+0x114>)
 8004fe8:	7819      	ldrb	r1, [r3, #0]
 8004fea:	4b28      	ldr	r3, [pc, #160]	; (800508c <GetActionSequenceRoutine+0x10c>)
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	461c      	mov	r4, r3
 8004ff4:	4828      	ldr	r0, [pc, #160]	; (8005098 <GetActionSequenceRoutine+0x118>)
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4423      	add	r3, r4
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	18c4      	adds	r4, r0, r3
 8005000:	463b      	mov	r3, r7
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff feb4 	bl	8004d70 <GetActionOther>
 8005008:	4623      	mov	r3, r4
 800500a:	463a      	mov	r2, r7
 800500c:	6810      	ldr	r0, [r2, #0]
 800500e:	6851      	ldr	r1, [r2, #4]
 8005010:	6892      	ldr	r2, [r2, #8]
 8005012:	c307      	stmia	r3!, {r0, r1, r2}
			if(plan_buffer[plan_buffer_f].act == 11) {
 8005014:	4b1c      	ldr	r3, [pc, #112]	; (8005088 <GetActionSequenceRoutine+0x108>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <GetActionSequenceRoutine+0x118>)
 800501c:	460b      	mov	r3, r1
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	440b      	add	r3, r1
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b0b      	cmp	r3, #11
 800502a:	d10e      	bne.n	800504a <GetActionSequenceRoutine+0xca>
				buff_index = plan_buffer[plan_buffer_f].act_value-1;
 800502c:	4b16      	ldr	r3, [pc, #88]	; (8005088 <GetActionSequenceRoutine+0x108>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	4a19      	ldr	r2, [pc, #100]	; (8005098 <GetActionSequenceRoutine+0x118>)
 8005034:	460b      	mov	r3, r1
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	440b      	add	r3, r1
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	3303      	adds	r3, #3
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	3b01      	subs	r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <GetActionSequenceRoutine+0x10c>)
 8005048:	701a      	strb	r2, [r3, #0]
			}
			storage_flag &=~STO_FLAG_BUFF_EMPTY;
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <GetActionSequenceRoutine+0x11c>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	f023 0302 	bic.w	r3, r3, #2
 8005052:	b2da      	uxtb	r2, r3
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <GetActionSequenceRoutine+0x11c>)
 8005056:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005058:	e00f      	b.n	800507a <GetActionSequenceRoutine+0xfa>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <GetActionSequenceRoutine+0x11c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	f043 0304 	orr.w	r3, r3, #4
 8005062:	b2da      	uxtb	r2, r3
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <GetActionSequenceRoutine+0x11c>)
 8005066:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005068:	e007      	b.n	800507a <GetActionSequenceRoutine+0xfa>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <GetActionSequenceRoutine+0x11c>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <GetActionSequenceRoutine+0x11c>)
 8005076:	701a      	strb	r2, [r3, #0]
	}
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	bf00      	nop
 8005084:	20000d2a 	.word	0x20000d2a
 8005088:	20000d29 	.word	0x20000d29
 800508c:	20000d28 	.word	0x20000d28
 8005090:	20000d3c 	.word	0x20000d3c
 8005094:	20000cb1 	.word	0x20000cb1
 8005098:	20000cf8 	.word	0x20000cf8
 800509c:	20000d38 	.word	0x20000d38

080050a0 <GetActionSequenceInit>:

void GetActionSequenceInit(uint8_t num) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 80050aa:	463b      	mov	r3, r7
 80050ac:	7dfa      	ldrb	r2, [r7, #23]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fb75 	bl	80047a0 <GetAction>
	buff_index = num;
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <GetActionSequenceInit+0x50>)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	7013      	strb	r3, [r2, #0]
	plan_buffer_i = 0;
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <GetActionSequenceInit+0x54>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
	plan_buffer_f = 0;
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <GetActionSequenceInit+0x58>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
	storage_flag = 0;
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <GetActionSequenceInit+0x5c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
	memset((uint8_t*)&plan_buffer, 0, sizeof(Action_typedef)*BUFFER_SIZE);
 80050ce:	2230      	movs	r2, #48	; 0x30
 80050d0:	2100      	movs	r1, #0
 80050d2:	480b      	ldr	r0, [pc, #44]	; (8005100 <GetActionSequenceInit+0x60>)
 80050d4:	f008 ff7e 	bl	800dfd4 <memset>
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <GetActionSequenceInit+0x5c>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <GetActionSequenceInit+0x5c>)
 80050e4:	701a      	strb	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000d28 	.word	0x20000d28
 80050f4:	20000d2a 	.word	0x20000d2a
 80050f8:	20000d29 	.word	0x20000d29
 80050fc:	20000d38 	.word	0x20000d38
 8005100:	20000cf8 	.word	0x20000cf8

08005104 <Storage_InsertAction>:

void Storage_InsertAction(uint8_t index) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=plan.num_action-1; i>index; i--) {
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <Storage_InsertAction+0x50>)
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	3b01      	subs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e014      	b.n	8005142 <Storage_InsertAction+0x3e>
		temp = GetActionOther(num_plan, i-1);
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <Storage_InsertAction+0x54>)
 800511a:	7819      	ldrb	r1, [r3, #0]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fe21 	bl	8004d70 <GetActionOther>
		SetActionOther(temp, i);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f107 0208 	add.w	r2, r7, #8
 8005136:	ca07      	ldmia	r2, {r0, r1, r2}
 8005138:	f7ff fe5a 	bl	8004df0 <SetActionOther>
	for(int i=plan.num_action-1; i>index; i--) {
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3b01      	subs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	429a      	cmp	r2, r3
 8005148:	dce6      	bgt.n	8005118 <Storage_InsertAction+0x14>
	}
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000d3c 	.word	0x20000d3c
 8005158:	20000cb1 	.word	0x20000cb1

0800515c <Storage_DeleteAction>:

void Storage_DeleteAction(uint8_t index) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=index; i<plan.num_action-1; i++) {
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e014      	b.n	8005196 <Storage_DeleteAction+0x3a>
		temp = GetActionOther(num_plan, i+1);
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <Storage_DeleteAction+0x60>)
 800516e:	7819      	ldrb	r1, [r3, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	f107 0308 	add.w	r3, r7, #8
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fdf7 	bl	8004d70 <GetActionOther>
		SetActionOther(temp, i);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f107 0208 	add.w	r2, r7, #8
 800518a:	ca07      	ldmia	r2, {r0, r1, r2}
 800518c:	f7ff fe30 	bl	8004df0 <SetActionOther>
	for(int i=index; i<plan.num_action-1; i++) {
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3301      	adds	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <Storage_DeleteAction+0x64>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	3b01      	subs	r3, #1
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	429a      	cmp	r2, r3
 80051a0:	dbe4      	blt.n	800516c <Storage_DeleteAction+0x10>
	}
	SetActionOther(plan_default, plan.num_action-1);
 80051a2:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <Storage_DeleteAction+0x64>)
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <Storage_DeleteAction+0x68>)
 80051ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80051ae:	f7ff fe1f 	bl	8004df0 <SetActionOther>
}
 80051b2:	bf00      	nop
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000cb1 	.word	0x20000cb1
 80051c0:	20000d3c 	.word	0x20000d3c
 80051c4:	0801121c 	.word	0x0801121c

080051c8 <Storage_CopyPlan>:

void Storage_CopyPlan(uint8_t plan_dest) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
	Storage_SetPlanOther(&plan, plan_dest);
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	4619      	mov	r1, r3
 80051d6:	4813      	ldr	r0, [pc, #76]	; (8005224 <Storage_CopyPlan+0x5c>)
 80051d8:	f7ff fd28 	bl	8004c2c <Storage_SetPlanOther>
	Action_typedef temp;
	for(int i=0; i<plan.num_action; i++) {
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e014      	b.n	800520c <Storage_CopyPlan+0x44>
		temp = GetActionOther(num_plan, i);
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <Storage_CopyPlan+0x60>)
 80051e4:	7819      	ldrb	r1, [r3, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fdbe 	bl	8004d70 <GetActionOther>
		SetActionOther2(plan_dest, temp, i);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	79f8      	ldrb	r0, [r7, #7]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	f107 0308 	add.w	r3, r7, #8
 8005200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005202:	f7ff fe2b 	bl	8004e5c <SetActionOther2>
	for(int i=0; i<plan.num_action; i++) {
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3301      	adds	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <Storage_CopyPlan+0x5c>)
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	461a      	mov	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4293      	cmp	r3, r2
 8005216:	dbe4      	blt.n	80051e2 <Storage_CopyPlan+0x1a>
	}
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000d3c 	.word	0x20000d3c
 8005228:	20000cb1 	.word	0x20000cb1

0800522c <Storage_CleanInit>:

void Storage_CleanInit() {
 800522c:	b580      	push	{r7, lr}
 800522e:	b092      	sub	sp, #72	; 0x48
 8005230:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f008 fecb 	bl	800dfd4 <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 800523e:	2300      	movs	r3, #0
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
 8005242:	e00f      	b.n	8005264 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8005244:	bf00      	nop
 8005246:	f7fc fdbf 	bl	8001dc8 <EEP_ReadyToWrite>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0fa      	beq.n	8005246 <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	b29b      	uxth	r3, r3
 8005254:	1d3a      	adds	r2, r7, #4
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7fc fd23 	bl	8001ca4 <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	3301      	adds	r3, #1
 8005262:	647b      	str	r3, [r7, #68]	; 0x44
 8005264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526a:	dbeb      	blt.n	8005244 <Storage_CleanInit+0x18>
	}
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	3748      	adds	r7, #72	; 0x48
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  return 1;
 800527a:	2301      	movs	r3, #1
}
 800527c:	4618      	mov	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <_kill>:

int _kill(int pid, int sig)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005290:	f008 fe58 	bl	800df44 <__errno>
 8005294:	4603      	mov	r3, r0
 8005296:	2216      	movs	r2, #22
 8005298:	601a      	str	r2, [r3, #0]
  return -1;
 800529a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_exit>:

void _exit (int status)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052ae:	f04f 31ff 	mov.w	r1, #4294967295
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff ffe7 	bl	8005286 <_kill>
  while (1) {}    /* Make sure we hang here */
 80052b8:	e7fe      	b.n	80052b8 <_exit+0x12>

080052ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e00a      	b.n	80052e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052cc:	f3af 8000 	nop.w
 80052d0:	4601      	mov	r1, r0
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	60ba      	str	r2, [r7, #8]
 80052d8:	b2ca      	uxtb	r2, r1
 80052da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3301      	adds	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	dbf0      	blt.n	80052cc <_read+0x12>
  }

  return len;
 80052ea:	687b      	ldr	r3, [r7, #4]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e009      	b.n	800531a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	60ba      	str	r2, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3301      	adds	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	dbf1      	blt.n	8005306 <_write+0x12>
  }
  return len;
 8005322:	687b      	ldr	r3, [r7, #4]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <_close>:

int _close(int file)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005354:	605a      	str	r2, [r3, #4]
  return 0;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <_isatty>:

int _isatty(int file)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800536c:	2301      	movs	r3, #1
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <_sbrk+0x5c>)
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <_sbrk+0x60>)
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <_sbrk+0x64>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <_sbrk+0x64>)
 80053b2:	4a12      	ldr	r2, [pc, #72]	; (80053fc <_sbrk+0x68>)
 80053b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <_sbrk+0x64>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d207      	bcs.n	80053d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053c4:	f008 fdbe 	bl	800df44 <__errno>
 80053c8:	4603      	mov	r3, r0
 80053ca:	220c      	movs	r2, #12
 80053cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	e009      	b.n	80053e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <_sbrk+0x64>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <_sbrk+0x64>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4413      	add	r3, r2
 80053e2:	4a05      	ldr	r2, [pc, #20]	; (80053f8 <_sbrk+0x64>)
 80053e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053e6:	68fb      	ldr	r3, [r7, #12]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20020000 	.word	0x20020000
 80053f4:	00000400 	.word	0x00000400
 80053f8:	20000d64 	.word	0x20000d64
 80053fc:	20001528 	.word	0x20001528

08005400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <SystemInit+0x20>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	4a05      	ldr	r2, [pc, #20]	; (8005420 <SystemInit+0x20>)
 800540c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b096      	sub	sp, #88	; 0x58
 8005428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800542a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	605a      	str	r2, [r3, #4]
 8005434:	609a      	str	r2, [r3, #8]
 8005436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	605a      	str	r2, [r3, #4]
 800544c:	609a      	str	r2, [r3, #8]
 800544e:	60da      	str	r2, [r3, #12]
 8005450:	611a      	str	r2, [r3, #16]
 8005452:	615a      	str	r2, [r3, #20]
 8005454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005456:	1d3b      	adds	r3, r7, #4
 8005458:	2220      	movs	r2, #32
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f008 fdb9 	bl	800dfd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005462:	4b4a      	ldr	r3, [pc, #296]	; (800558c <MX_TIM1_Init+0x168>)
 8005464:	4a4a      	ldr	r2, [pc, #296]	; (8005590 <MX_TIM1_Init+0x16c>)
 8005466:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005468:	4b48      	ldr	r3, [pc, #288]	; (800558c <MX_TIM1_Init+0x168>)
 800546a:	2253      	movs	r2, #83	; 0x53
 800546c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800546e:	4b47      	ldr	r3, [pc, #284]	; (800558c <MX_TIM1_Init+0x168>)
 8005470:	2200      	movs	r2, #0
 8005472:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005474:	4b45      	ldr	r3, [pc, #276]	; (800558c <MX_TIM1_Init+0x168>)
 8005476:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800547a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800547c:	4b43      	ldr	r3, [pc, #268]	; (800558c <MX_TIM1_Init+0x168>)
 800547e:	2200      	movs	r2, #0
 8005480:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005482:	4b42      	ldr	r3, [pc, #264]	; (800558c <MX_TIM1_Init+0x168>)
 8005484:	2200      	movs	r2, #0
 8005486:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005488:	4b40      	ldr	r3, [pc, #256]	; (800558c <MX_TIM1_Init+0x168>)
 800548a:	2200      	movs	r2, #0
 800548c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800548e:	483f      	ldr	r0, [pc, #252]	; (800558c <MX_TIM1_Init+0x168>)
 8005490:	f006 fddc 	bl	800c04c <HAL_TIM_Base_Init>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800549a:	f7fc ff48 	bl	800232e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800549e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80054a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054a8:	4619      	mov	r1, r3
 80054aa:	4838      	ldr	r0, [pc, #224]	; (800558c <MX_TIM1_Init+0x168>)
 80054ac:	f007 faa4 	bl	800c9f8 <HAL_TIM_ConfigClockSource>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80054b6:	f7fc ff3a 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054ba:	4834      	ldr	r0, [pc, #208]	; (800558c <MX_TIM1_Init+0x168>)
 80054bc:	f006 fe86 	bl	800c1cc <HAL_TIM_PWM_Init>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80054c6:	f7fc ff32 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ca:	2300      	movs	r3, #0
 80054cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054d6:	4619      	mov	r1, r3
 80054d8:	482c      	ldr	r0, [pc, #176]	; (800558c <MX_TIM1_Init+0x168>)
 80054da:	f007 fe8d 	bl	800d1f8 <HAL_TIMEx_MasterConfigSynchronization>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80054e4:	f7fc ff23 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054e8:	2360      	movs	r3, #96	; 0x60
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80054f4:	2300      	movs	r3, #0
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80054fc:	2300      	movs	r3, #0
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005508:	2200      	movs	r2, #0
 800550a:	4619      	mov	r1, r3
 800550c:	481f      	ldr	r0, [pc, #124]	; (800558c <MX_TIM1_Init+0x168>)
 800550e:	f007 f9b1 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005518:	f7fc ff09 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800551c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005520:	2204      	movs	r2, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4819      	ldr	r0, [pc, #100]	; (800558c <MX_TIM1_Init+0x168>)
 8005526:	f007 f9a5 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005530:	f7fc fefd 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005538:	2208      	movs	r2, #8
 800553a:	4619      	mov	r1, r3
 800553c:	4813      	ldr	r0, [pc, #76]	; (800558c <MX_TIM1_Init+0x168>)
 800553e:	f007 f999 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8005548:	f7fc fef1 	bl	800232e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800554c:	2300      	movs	r3, #0
 800554e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005564:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4807      	ldr	r0, [pc, #28]	; (800558c <MX_TIM1_Init+0x168>)
 8005570:	f007 febe 	bl	800d2f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800557a:	f7fc fed8 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800557e:	4803      	ldr	r0, [pc, #12]	; (800558c <MX_TIM1_Init+0x168>)
 8005580:	f000 fa5a 	bl	8005a38 <HAL_TIM_MspPostInit>

}
 8005584:	bf00      	nop
 8005586:	3758      	adds	r7, #88	; 0x58
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000d68 	.word	0x20000d68
 8005590:	40010000 	.word	0x40010000

08005594 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800559a:	f107 030c 	add.w	r3, r7, #12
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f008 fd16 	bl	800dfd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055b0:	4b21      	ldr	r3, [pc, #132]	; (8005638 <MX_TIM2_Init+0xa4>)
 80055b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <MX_TIM2_Init+0xa4>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055be:	4b1e      	ldr	r3, [pc, #120]	; (8005638 <MX_TIM2_Init+0xa4>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <MX_TIM2_Init+0xa4>)
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <MX_TIM2_Init+0xa4>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <MX_TIM2_Init+0xa4>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80055d8:	2303      	movs	r3, #3
 80055da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80055e0:	2301      	movs	r3, #1
 80055e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80055ec:	2300      	movs	r3, #0
 80055ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80055f0:	2301      	movs	r3, #1
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80055f4:	2300      	movs	r3, #0
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4619      	mov	r1, r3
 8005602:	480d      	ldr	r0, [pc, #52]	; (8005638 <MX_TIM2_Init+0xa4>)
 8005604:	f006 fefa 	bl	800c3fc <HAL_TIM_Encoder_Init>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800560e:	f7fc fe8e 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4806      	ldr	r0, [pc, #24]	; (8005638 <MX_TIM2_Init+0xa4>)
 8005620:	f007 fdea 	bl	800d1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800562a:	f7fc fe80 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800562e:	bf00      	nop
 8005630:	3730      	adds	r7, #48	; 0x30
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000db0 	.word	0x20000db0

0800563c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005642:	f107 0320 	add.w	r3, r7, #32
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	609a      	str	r2, [r3, #8]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	615a      	str	r2, [r3, #20]
 800565c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800565e:	4b32      	ldr	r3, [pc, #200]	; (8005728 <MX_TIM3_Init+0xec>)
 8005660:	4a32      	ldr	r2, [pc, #200]	; (800572c <MX_TIM3_Init+0xf0>)
 8005662:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8005664:	4b30      	ldr	r3, [pc, #192]	; (8005728 <MX_TIM3_Init+0xec>)
 8005666:	2207      	movs	r2, #7
 8005668:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800566a:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <MX_TIM3_Init+0xec>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <MX_TIM3_Init+0xec>)
 8005672:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <MX_TIM3_Init+0xec>)
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <MX_TIM3_Init+0xec>)
 8005680:	2200      	movs	r2, #0
 8005682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005684:	4828      	ldr	r0, [pc, #160]	; (8005728 <MX_TIM3_Init+0xec>)
 8005686:	f006 fda1 	bl	800c1cc <HAL_TIM_PWM_Init>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005690:	f7fc fe4d 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005694:	2300      	movs	r3, #0
 8005696:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800569c:	f107 0320 	add.w	r3, r7, #32
 80056a0:	4619      	mov	r1, r3
 80056a2:	4821      	ldr	r0, [pc, #132]	; (8005728 <MX_TIM3_Init+0xec>)
 80056a4:	f007 fda8 	bl	800d1f8 <HAL_TIMEx_MasterConfigSynchronization>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80056ae:	f7fc fe3e 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056b2:	2360      	movs	r3, #96	; 0x60
 80056b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	2200      	movs	r2, #0
 80056c6:	4619      	mov	r1, r3
 80056c8:	4817      	ldr	r0, [pc, #92]	; (8005728 <MX_TIM3_Init+0xec>)
 80056ca:	f007 f8d3 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80056d4:	f7fc fe2b 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	2204      	movs	r2, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4812      	ldr	r0, [pc, #72]	; (8005728 <MX_TIM3_Init+0xec>)
 80056e0:	f007 f8c8 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80056ea:	f7fc fe20 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	2208      	movs	r2, #8
 80056f2:	4619      	mov	r1, r3
 80056f4:	480c      	ldr	r0, [pc, #48]	; (8005728 <MX_TIM3_Init+0xec>)
 80056f6:	f007 f8bd 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8005700:	f7fc fe15 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005704:	1d3b      	adds	r3, r7, #4
 8005706:	220c      	movs	r2, #12
 8005708:	4619      	mov	r1, r3
 800570a:	4807      	ldr	r0, [pc, #28]	; (8005728 <MX_TIM3_Init+0xec>)
 800570c:	f007 f8b2 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8005716:	f7fc fe0a 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800571a:	4803      	ldr	r0, [pc, #12]	; (8005728 <MX_TIM3_Init+0xec>)
 800571c:	f000 f98c 	bl	8005a38 <HAL_TIM_MspPostInit>

}
 8005720:	bf00      	nop
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000df8 	.word	0x20000df8
 800572c:	40000400 	.word	0x40000400

08005730 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	2224      	movs	r2, #36	; 0x24
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f008 fc48 	bl	800dfd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800574c:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <MX_TIM4_Init+0xa0>)
 800574e:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <MX_TIM4_Init+0xa4>)
 8005750:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <MX_TIM4_Init+0xa0>)
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <MX_TIM4_Init+0xa0>)
 800575a:	2200      	movs	r2, #0
 800575c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <MX_TIM4_Init+0xa0>)
 8005760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005764:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005766:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <MX_TIM4_Init+0xa0>)
 8005768:	2200      	movs	r2, #0
 800576a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <MX_TIM4_Init+0xa0>)
 800576e:	2200      	movs	r2, #0
 8005770:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005772:	2303      	movs	r3, #3
 8005774:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800577a:	2301      	movs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005786:	2300      	movs	r3, #0
 8005788:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800578a:	2301      	movs	r3, #1
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800578e:	2300      	movs	r3, #0
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005796:	f107 030c 	add.w	r3, r7, #12
 800579a:	4619      	mov	r1, r3
 800579c:	480c      	ldr	r0, [pc, #48]	; (80057d0 <MX_TIM4_Init+0xa0>)
 800579e:	f006 fe2d 	bl	800c3fc <HAL_TIM_Encoder_Init>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80057a8:	f7fc fdc1 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ac:	2300      	movs	r3, #0
 80057ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4805      	ldr	r0, [pc, #20]	; (80057d0 <MX_TIM4_Init+0xa0>)
 80057ba:	f007 fd1d 	bl	800d1f8 <HAL_TIMEx_MasterConfigSynchronization>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80057c4:	f7fc fdb3 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80057c8:	bf00      	nop
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000e40 	.word	0x20000e40
 80057d4:	40000800 	.word	0x40000800

080057d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057de:	463b      	mov	r3, r7
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80057e6:	4b15      	ldr	r3, [pc, #84]	; (800583c <MX_TIM6_Init+0x64>)
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <MX_TIM6_Init+0x68>)
 80057ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80057ec:	4b13      	ldr	r3, [pc, #76]	; (800583c <MX_TIM6_Init+0x64>)
 80057ee:	2253      	movs	r2, #83	; 0x53
 80057f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <MX_TIM6_Init+0x64>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <MX_TIM6_Init+0x64>)
 80057fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005800:	4b0e      	ldr	r3, [pc, #56]	; (800583c <MX_TIM6_Init+0x64>)
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005806:	480d      	ldr	r0, [pc, #52]	; (800583c <MX_TIM6_Init+0x64>)
 8005808:	f006 fc20 	bl	800c04c <HAL_TIM_Base_Init>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005812:	f7fc fd8c 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005816:	2300      	movs	r3, #0
 8005818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800581e:	463b      	mov	r3, r7
 8005820:	4619      	mov	r1, r3
 8005822:	4806      	ldr	r0, [pc, #24]	; (800583c <MX_TIM6_Init+0x64>)
 8005824:	f007 fce8 	bl	800d1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800582e:	f7fc fd7e 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000e88 	.word	0x20000e88
 8005840:	40001000 	.word	0x40001000

08005844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <HAL_TIM_Base_MspInit+0x70>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10e      	bne.n	8005874 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <HAL_TIM_Base_MspInit+0x74>)
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_TIM_Base_MspInit+0x74>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6453      	str	r3, [r2, #68]	; 0x44
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_TIM_Base_MspInit+0x74>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005872:	e01a      	b.n	80058aa <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a10      	ldr	r2, [pc, #64]	; (80058bc <HAL_TIM_Base_MspInit+0x78>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d115      	bne.n	80058aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_TIM_Base_MspInit+0x74>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a0c      	ldr	r2, [pc, #48]	; (80058b8 <HAL_TIM_Base_MspInit+0x74>)
 8005888:	f043 0310 	orr.w	r3, r3, #16
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_TIM_Base_MspInit+0x74>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800589a:	2200      	movs	r2, #0
 800589c:	2100      	movs	r1, #0
 800589e:	2036      	movs	r0, #54	; 0x36
 80058a0:	f004 f8e9 	bl	8009a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80058a4:	2036      	movs	r0, #54	; 0x36
 80058a6:	f004 f902 	bl	8009aae <HAL_NVIC_EnableIRQ>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40001000 	.word	0x40001000

080058c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	; 0x30
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c8:	f107 031c 	add.w	r3, r7, #28
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e0:	d14b      	bne.n	800597a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a3e      	ldr	r2, [pc, #248]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	4a37      	ldr	r2, [pc, #220]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	6313      	str	r3, [r2, #48]	; 0x30
 800590e:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005924:	f043 0302 	orr.w	r3, r3, #2
 8005928:	6313      	str	r3, [r2, #48]	; 0x30
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593c:	2302      	movs	r3, #2
 800593e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005944:	2300      	movs	r3, #0
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005948:	2301      	movs	r3, #1
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4619      	mov	r1, r3
 8005952:	4825      	ldr	r0, [pc, #148]	; (80059e8 <HAL_TIM_Encoder_MspInit+0x128>)
 8005954:	f004 fc3a 	bl	800a1cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005958:	2308      	movs	r3, #8
 800595a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595c:	2302      	movs	r3, #2
 800595e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005964:	2300      	movs	r3, #0
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005968:	2301      	movs	r3, #1
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800596c:	f107 031c 	add.w	r3, r7, #28
 8005970:	4619      	mov	r1, r3
 8005972:	481e      	ldr	r0, [pc, #120]	; (80059ec <HAL_TIM_Encoder_MspInit+0x12c>)
 8005974:	f004 fc2a 	bl	800a1cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005978:	e030      	b.n	80059dc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIM_Encoder_MspInit+0x130>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d12b      	bne.n	80059dc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6413      	str	r3, [r2, #64]	; 0x40
 8005994:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a0:	2300      	movs	r3, #0
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	6313      	str	r3, [r2, #48]	; 0x30
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <HAL_TIM_Encoder_MspInit+0x124>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059bc:	23c0      	movs	r3, #192	; 0xc0
 80059be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c0:	2302      	movs	r3, #2
 80059c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c4:	2300      	movs	r3, #0
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80059cc:	2302      	movs	r3, #2
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d0:	f107 031c 	add.w	r3, r7, #28
 80059d4:	4619      	mov	r1, r3
 80059d6:	4805      	ldr	r0, [pc, #20]	; (80059ec <HAL_TIM_Encoder_MspInit+0x12c>)
 80059d8:	f004 fbf8 	bl	800a1cc <HAL_GPIO_Init>
}
 80059dc:	bf00      	nop
 80059de:	3730      	adds	r7, #48	; 0x30
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40020000 	.word	0x40020000
 80059ec:	40020400 	.word	0x40020400
 80059f0:	40000800 	.word	0x40000800

080059f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0b      	ldr	r2, [pc, #44]	; (8005a30 <HAL_TIM_PWM_MspInit+0x3c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10d      	bne.n	8005a22 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <HAL_TIM_PWM_MspInit+0x40>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <HAL_TIM_PWM_MspInit+0x40>)
 8005a10:	f043 0302 	orr.w	r3, r3, #2
 8005a14:	6413      	str	r3, [r2, #64]	; 0x40
 8005a16:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <HAL_TIM_PWM_MspInit+0x40>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40023800 	.word	0x40023800

08005a38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <HAL_TIM_MspPostInit+0xb4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d11f      	bne.n	8005a9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_TIM_MspPostInit+0xb8>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <HAL_TIM_MspPostInit+0xb8>)
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_TIM_MspPostInit+0xb8>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005a76:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a84:	2300      	movs	r3, #0
 8005a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	4619      	mov	r1, r3
 8005a92:	4818      	ldr	r0, [pc, #96]	; (8005af4 <HAL_TIM_MspPostInit+0xbc>)
 8005a94:	f004 fb9a 	bl	800a1cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005a98:	e023      	b.n	8005ae2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <HAL_TIM_MspPostInit+0xc0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d11e      	bne.n	8005ae2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <HAL_TIM_MspPostInit+0xb8>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	4a10      	ldr	r2, [pc, #64]	; (8005af0 <HAL_TIM_MspPostInit+0xb8>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <HAL_TIM_MspPostInit+0xb8>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005ac0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4619      	mov	r1, r3
 8005adc:	4807      	ldr	r0, [pc, #28]	; (8005afc <HAL_TIM_MspPostInit+0xc4>)
 8005ade:	f004 fb75 	bl	800a1cc <HAL_GPIO_Init>
}
 8005ae2:	bf00      	nop
 8005ae4:	3728      	adds	r7, #40	; 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40020000 	.word	0x40020000
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40020800 	.word	0x40020800

08005b00 <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b089      	sub	sp, #36	; 0x24
 8005b04:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 8005b06:	4b39      	ldr	r3, [pc, #228]	; (8005bec <UI_ShowSensor+0xec>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <UI_ShowSensor+0x16>
 8005b12:	2300      	movs	r3, #0
 8005b14:	e065      	b.n	8005be2 <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <UI_ShowSensor+0xf0>)
 8005b18:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 8005b1a:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005b1c:	7818      	ldrb	r0, [r3, #0]
 8005b1e:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005b20:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 8005b22:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 8005b26:	3362      	adds	r3, #98	; 0x62
 8005b28:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 8005b2a:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005b2c:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 8005b2e:	330f      	adds	r3, #15
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2401      	movs	r4, #1
 8005b34:	9400      	str	r4, [sp, #0]
 8005b36:	f7fb fdf5 	bl	8001724 <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 8005b3a:	4a2f      	ldr	r2, [pc, #188]	; (8005bf8 <UI_ShowSensor+0xf8>)
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b42:	6018      	str	r0, [r3, #0]
 8005b44:	3304      	adds	r3, #4
 8005b46:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e03e      	b.n	8005bcc <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f1c3 030d 	rsb	r3, r3, #13
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 8005b5c:	7cfb      	ldrb	r3, [r7, #19]
 8005b5e:	2b0e      	cmp	r3, #14
 8005b60:	d902      	bls.n	8005b68 <UI_ShowSensor+0x68>
 8005b62:	230e      	movs	r3, #14
 8005b64:	74fb      	strb	r3, [r7, #19]
 8005b66:	e007      	b.n	8005b78 <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d002      	beq.n	8005b74 <UI_ShowSensor+0x74>
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d101      	bne.n	8005b78 <UI_ShowSensor+0x78>
 8005b74:	2303      	movs	r3, #3
 8005b76:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8005b78:	7cfb      	ldrb	r3, [r7, #19]
 8005b7a:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	00d2      	lsls	r2, r2, #3
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 8005b92:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005b94:	785a      	ldrb	r2, [r3, #1]
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	330f      	adds	r3, #15
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fb ff8f 	bl	8001acc <DISP_FillRect2>
		DISP_OLEDUpdate(
 8005bae:	7938      	ldrb	r0, [r7, #4]
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005bb2:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8005bb4:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8005bb6:	3306      	adds	r3, #6
 8005bb8:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 8005bba:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <UI_ShowSensor+0xf4>)
 8005bbc:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 8005bbe:	330f      	adds	r3, #15
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f7fb ff3b 	bl	8001a3c <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b0d      	cmp	r3, #13
 8005bd0:	ddbd      	ble.n	8005b4e <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <UI_ShowSensor+0xec>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <UI_ShowSensor+0xec>)
 8005bde:	701a      	strb	r2, [r3, #0]
	return 1;
 8005be0:	2301      	movs	r3, #1
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd90      	pop	{r4, r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000ca5 	.word	0x20000ca5
 8005bf0:	20000b78 	.word	0x20000b78
 8005bf4:	20000290 	.word	0x20000290
 8005bf8:	08010dd0 	.word	0x08010dd0

08005bfc <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 8005c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c0a:	483c      	ldr	r0, [pc, #240]	; (8005cfc <UI_ReadButton+0x100>)
 8005c0c:	f004 fc7a 	bl	800a504 <HAL_GPIO_ReadPin>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	b25a      	sxtb	r2, r3
 8005c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 8005c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c2c:	4833      	ldr	r0, [pc, #204]	; (8005cfc <UI_ReadButton+0x100>)
 8005c2e:	f004 fc69 	bl	800a504 <HAL_GPIO_ReadPin>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <UI_ReadButton+0x40>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e000      	b.n	8005c3e <UI_ReadButton+0x42>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	b25a      	sxtb	r2, r3
 8005c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	482c      	ldr	r0, [pc, #176]	; (8005d00 <UI_ReadButton+0x104>)
 8005c4e:	f004 fc59 	bl	800a504 <HAL_GPIO_ReadPin>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <UI_ReadButton+0x60>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	e000      	b.n	8005c5e <UI_ReadButton+0x62>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	b25a      	sxtb	r2, r3
 8005c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 8005c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c6e:	4824      	ldr	r0, [pc, #144]	; (8005d00 <UI_ReadButton+0x104>)
 8005c70:	f004 fc48 	bl	800a504 <HAL_GPIO_ReadPin>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <UI_ReadButton+0x82>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	e000      	b.n	8005c80 <UI_ReadButton+0x84>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	b25a      	sxtb	r2, r3
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	b25b      	sxtb	r3, r3
 8005c8a:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 8005c8c:	2120      	movs	r1, #32
 8005c8e:	481c      	ldr	r0, [pc, #112]	; (8005d00 <UI_ReadButton+0x104>)
 8005c90:	f004 fc38 	bl	800a504 <HAL_GPIO_ReadPin>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <UI_ReadButton+0xa2>
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	e000      	b.n	8005ca0 <UI_ReadButton+0xa4>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	b25a      	sxtb	r2, r3
 8005ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 8005cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cb0:	4813      	ldr	r0, [pc, #76]	; (8005d00 <UI_ReadButton+0x104>)
 8005cb2:	f004 fc27 	bl	800a504 <HAL_GPIO_ReadPin>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <UI_ReadButton+0xc4>
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	e000      	b.n	8005cc2 <UI_ReadButton+0xc6>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	b25a      	sxtb	r2, r3
 8005cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b25b      	sxtb	r3, r3
 8005ccc:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 8005cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cd2:	480b      	ldr	r0, [pc, #44]	; (8005d00 <UI_ReadButton+0x104>)
 8005cd4:	f004 fc16 	bl	800a504 <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <UI_ReadButton+0xe6>
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	e000      	b.n	8005ce4 <UI_ReadButton+0xe8>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	b25a      	sxtb	r2, r3
 8005ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	b25b      	sxtb	r3, r3
 8005cee:	71fb      	strb	r3, [r7, #7]
	return temp;
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40020800 	.word	0x40020800
 8005d00:	40020400 	.word	0x40020400

08005d04 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 8005d08:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d10:	221b      	movs	r2, #27
 8005d12:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 8005d14:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 8005d1a:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d1c:	227f      	movs	r2, #127	; 0x7f
 8005d1e:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 8005d20:	4b35      	ldr	r3, [pc, #212]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d22:	220a      	movs	r2, #10
 8005d24:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 8005d26:	4b34      	ldr	r3, [pc, #208]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d28:	2202      	movs	r2, #2
 8005d2a:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 8005d2c:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d2e:	2202      	movs	r2, #2
 8005d30:	719a      	strb	r2, [r3, #6]

	short_message_white = short_message;
 8005d32:	4b32      	ldr	r3, [pc, #200]	; (8005dfc <UI_HomeScreenInit+0xf8>)
 8005d34:	4a30      	ldr	r2, [pc, #192]	; (8005df8 <UI_HomeScreenInit+0xf4>)
 8005d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d3a:	6018      	str	r0, [r3, #0]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	8019      	strh	r1, [r3, #0]
 8005d40:	3302      	adds	r3, #2
 8005d42:	0c0a      	lsrs	r2, r1, #16
 8005d44:	701a      	strb	r2, [r3, #0]
	short_message_white.color = DISP_COLOR_WHITE;
 8005d46:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <UI_HomeScreenInit+0xf8>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	709a      	strb	r2, [r3, #2]

	home_menu[0].origin_x = 14;
 8005d4c:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d4e:	220e      	movs	r2, #14
 8005d50:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8005d52:	4b2b      	ldr	r3, [pc, #172]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d54:	2226      	movs	r2, #38	; 0x26
 8005d56:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8005d58:	4b29      	ldr	r3, [pc, #164]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d60:	2228      	movs	r2, #40	; 0x28
 8005d62:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8005d64:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d66:	2202      	movs	r2, #2
 8005d68:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8005d6a:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d6c:	220e      	movs	r2, #14
 8005d6e:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8005d70:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d72:	2233      	movs	r2, #51	; 0x33
 8005d74:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8005d76:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8005d7c:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d7e:	2228      	movs	r2, #40	; 0x28
 8005d80:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8005d82:	4b1f      	ldr	r3, [pc, #124]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d84:	2202      	movs	r2, #2
 8005d86:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8005d88:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d8a:	2249      	movs	r2, #73	; 0x49
 8005d8c:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8005d8e:	4b1c      	ldr	r3, [pc, #112]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d90:	2226      	movs	r2, #38	; 0x26
 8005d92:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8005d94:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8005d9a:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005d9c:	2228      	movs	r2, #40	; 0x28
 8005d9e:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005da2:	2202      	movs	r2, #2
 8005da4:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8005da6:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005da8:	2249      	movs	r2, #73	; 0x49
 8005daa:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8005dac:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005dae:	2233      	movs	r2, #51	; 0x33
 8005db0:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8005db2:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005dba:	2228      	movs	r2, #40	; 0x28
 8005dbc:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <UI_HomeScreenInit+0xfc>)
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005dd2:	227f      	movs	r2, #127	; 0x7f
 8005dd4:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005dd8:	220a      	movs	r2, #10
 8005dda:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005de4:	2202      	movs	r2, #2
 8005de6:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <UI_HomeScreenInit+0x100>)
 8005dea:	2202      	movs	r2, #2
 8005dec:	719a      	strb	r2, [r3, #6]
}
 8005dee:	bf00      	nop
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000ed0 	.word	0x20000ed0
 8005dfc:	20000ed8 	.word	0x20000ed8
 8005e00:	20000ee0 	.word	0x20000ee0
 8005e04:	20000efc 	.word	0x20000efc

08005e08 <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460a      	mov	r2, r1
 8005e12:	71fb      	strb	r3, [r7, #7]
 8005e14:	4613      	mov	r3, r2
 8005e16:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 8005e18:	79bb      	ldrb	r3, [r7, #6]
 8005e1a:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <UI_HomeScreenDisplay+0xa0>)
 8005e1c:	4413      	add	r3, r2
 8005e1e:	789b      	ldrb	r3, [r3, #2]
 8005e20:	4619      	mov	r1, r3
 8005e22:	79bb      	ldrb	r3, [r7, #6]
 8005e24:	4a21      	ldr	r2, [pc, #132]	; (8005eac <UI_HomeScreenDisplay+0xa4>)
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	f107 000c 	add.w	r0, r7, #12
 8005e2c:	9200      	str	r2, [sp, #0]
 8005e2e:	460a      	mov	r2, r1
 8005e30:	491f      	ldr	r1, [pc, #124]	; (8005eb0 <UI_HomeScreenDisplay+0xa8>)
 8005e32:	f008 fe31 	bl	800ea98 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8005e36:	f107 030c 	add.w	r3, r7, #12
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	481d      	ldr	r0, [pc, #116]	; (8005eb4 <UI_HomeScreenDisplay+0xac>)
 8005e3e:	f7fb fd2b 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	e027      	b.n	8005e98 <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d109      	bne.n	8005e64 <UI_HomeScreenDisplay+0x5c>
 8005e50:	4919      	ldr	r1, [pc, #100]	; (8005eb8 <UI_HomeScreenDisplay+0xb0>)
 8005e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e54:	4613      	mov	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	1a9b      	subs	r3, r3, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e008      	b.n	8005e76 <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 8005e64:	4914      	ldr	r1, [pc, #80]	; (8005eb8 <UI_HomeScreenDisplay+0xb0>)
 8005e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	440b      	add	r3, r1
 8005e70:	3302      	adds	r3, #2
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8005e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	4a0e      	ldr	r2, [pc, #56]	; (8005eb8 <UI_HomeScreenDisplay+0xb0>)
 8005e80:	441a      	add	r2, r3
 8005e82:	490e      	ldr	r1, [pc, #56]	; (8005ebc <UI_HomeScreenDisplay+0xb4>)
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7fb fd03 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	3301      	adds	r3, #1
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	ddd4      	ble.n	8005e48 <UI_HomeScreenDisplay+0x40>
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000d3c 	.word	0x20000d3c
 8005eac:	20000cb1 	.word	0x20000cb1
 8005eb0:	08010df0 	.word	0x08010df0
 8005eb4:	20000efc 	.word	0x20000efc
 8005eb8:	20000ee0 	.word	0x20000ee0
 8005ebc:	20000294 	.word	0x20000294

08005ec0 <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8005ec6:	4b60      	ldr	r3, [pc, #384]	; (8006048 <UI_HomeScreen+0x188>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8005ecc:	4b5f      	ldr	r3, [pc, #380]	; (800604c <UI_HomeScreen+0x18c>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	79fa      	ldrb	r2, [r7, #7]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff ff97 	bl	8005e08 <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8005eda:	f002 ff7f 	bl	8008ddc <HAL_GetTick>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4a5b      	ldr	r2, [pc, #364]	; (8006050 <UI_HomeScreen+0x190>)
 8005ee2:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 8005ee4:	f7ff fe0c 	bl	8005b00 <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8005ee8:	f002 ff78 	bl	8008ddc <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	4b58      	ldr	r3, [pc, #352]	; (8006050 <UI_HomeScreen+0x190>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b45      	cmp	r3, #69	; 0x45
 8005ef6:	f240 8097 	bls.w	8006028 <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 8005efa:	f7ff fe7f 	bl	8005bfc <UI_ReadButton>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	4b54      	ldr	r3, [pc, #336]	; (8006054 <UI_HomeScreen+0x194>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	f000 8090 	beq.w	800602c <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 8005f0c:	f7ff fe76 	bl	8005bfc <UI_ReadButton>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b4f      	ldr	r3, [pc, #316]	; (8006054 <UI_HomeScreen+0x194>)
 8005f16:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 8005f18:	4b4e      	ldr	r3, [pc, #312]	; (8006054 <UI_HomeScreen+0x194>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 8005f24:	4b49      	ldr	r3, [pc, #292]	; (800604c <UI_HomeScreen+0x18c>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0cf      	beq.n	8005ecc <UI_HomeScreen+0xc>
 8005f2c:	4b47      	ldr	r3, [pc, #284]	; (800604c <UI_HomeScreen+0x18c>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	4b45      	ldr	r3, [pc, #276]	; (800604c <UI_HomeScreen+0x18c>)
 8005f36:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005f38:	e7c8      	b.n	8005ecc <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 8005f3a:	4b46      	ldr	r3, [pc, #280]	; (8006054 <UI_HomeScreen+0x194>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00c      	beq.n	8005f60 <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8005f46:	4b41      	ldr	r3, [pc, #260]	; (800604c <UI_HomeScreen+0x18c>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d806      	bhi.n	8005f5c <UI_HomeScreen+0x9c>
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	; (800604c <UI_HomeScreen+0x18c>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4b3d      	ldr	r3, [pc, #244]	; (800604c <UI_HomeScreen+0x18c>)
 8005f58:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005f5a:	e7b7      	b.n	8005ecc <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e06f      	b.n	8006040 <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8005f60:	4b3c      	ldr	r3, [pc, #240]	; (8006054 <UI_HomeScreen+0x194>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	2b12      	cmp	r3, #18
 8005f70:	d803      	bhi.n	8005f7a <UI_HomeScreen+0xba>
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	3301      	adds	r3, #1
 8005f76:	71fb      	strb	r3, [r7, #7]
 8005f78:	e7a8      	b.n	8005ecc <UI_HomeScreen+0xc>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8005f7e:	e7a5      	b.n	8005ecc <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 8005f80:	4b34      	ldr	r3, [pc, #208]	; (8006054 <UI_HomeScreen+0x194>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <UI_HomeScreen+0xda>
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	71fb      	strb	r3, [r7, #7]
 8005f98:	e798      	b.n	8005ecc <UI_HomeScreen+0xc>
 8005f9a:	2313      	movs	r3, #19
 8005f9c:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8005f9e:	e795      	b.n	8005ecc <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 8005fa0:	4b2c      	ldr	r3, [pc, #176]	; (8006054 <UI_HomeScreen+0x194>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <UI_HomeScreen+0xf4>
			num_menu = 0;
 8005fac:	4b27      	ldr	r3, [pc, #156]	; (800604c <UI_HomeScreen+0x18c>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005fb2:	e78b      	b.n	8005ecc <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <UI_HomeScreen+0x18c>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d831      	bhi.n	8006020 <UI_HomeScreen+0x160>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UI_HomeScreen+0x104>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005feb 	.word	0x08005feb
 8005fcc:	08006001 	.word	0x08006001
 8005fd0:	08006011 	.word	0x08006011
		case 0:
			if(bt & SW_OK_PRESS) {
 8005fd4:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <UI_HomeScreen+0x194>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d027      	beq.n	8006030 <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <UI_HomeScreen+0x188>)
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	e02a      	b.n	8006040 <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <UI_HomeScreen+0x194>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01e      	beq.n	8006034 <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 8005ff6:	4a14      	ldr	r2, [pc, #80]	; (8006048 <UI_HomeScreen+0x188>)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 8005ffc:	2305      	movs	r3, #5
 8005ffe:	e01f      	b.n	8006040 <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8006000:	4b14      	ldr	r3, [pc, #80]	; (8006054 <UI_HomeScreen+0x194>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 800600c:	2306      	movs	r3, #6
 800600e:	e017      	b.n	8006040 <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <UI_HomeScreen+0x194>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00f      	beq.n	800603c <UI_HomeScreen+0x17c>
				return UI_SET;
 800601c:	2307      	movs	r3, #7
 800601e:	e00f      	b.n	8006040 <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <UI_HomeScreen+0x18c>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e75d      	b.n	8005ee4 <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006028:	bf00      	nop
 800602a:	e75b      	b.n	8005ee4 <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 800602c:	bf00      	nop
 800602e:	e759      	b.n	8005ee4 <UI_HomeScreen+0x24>
			break;
 8006030:	bf00      	nop
 8006032:	e757      	b.n	8005ee4 <UI_HomeScreen+0x24>
			break;
 8006034:	bf00      	nop
 8006036:	e755      	b.n	8005ee4 <UI_HomeScreen+0x24>
			break;
 8006038:	bf00      	nop
 800603a:	e753      	b.n	8005ee4 <UI_HomeScreen+0x24>
			break;
 800603c:	bf00      	nop
	while(1) {
 800603e:	e751      	b.n	8005ee4 <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000cb4 	.word	0x20000cb4
 800604c:	20000fb3 	.word	0x20000fb3
 8006050:	20000fb4 	.word	0x20000fb4
 8006054:	20000fb8 	.word	0x20000fb8

08006058 <UI_MirroringPlan>:



void UI_MirroringPlan() {
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
	for(int i=0; i<plan.num_action; i++) {
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e032      	b.n	80060ca <UI_MirroringPlan+0x72>
		Action_typedef temp;
		temp = GetActionOther(num_plan, i);
 8006064:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <UI_MirroringPlan+0x88>)
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	463b      	mov	r3, r7
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fe7e 	bl	8004d70 <GetActionOther>
		switch(temp.act) {
 8006074:	783b      	ldrb	r3, [r7, #0]
 8006076:	3b01      	subs	r3, #1
 8006078:	2b05      	cmp	r3, #5
 800607a:	d822      	bhi.n	80060c2 <UI_MirroringPlan+0x6a>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UI_MirroringPlan+0x2c>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	0800609d 	.word	0x0800609d
 8006088:	080060a3 	.word	0x080060a3
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060a9 	.word	0x080060a9
 8006098:	080060af 	.word	0x080060af
		case 1: temp.act = 2; break;
 800609c:	2302      	movs	r3, #2
 800609e:	703b      	strb	r3, [r7, #0]
 80060a0:	e008      	b.n	80060b4 <UI_MirroringPlan+0x5c>
		case 2: temp.act = 1; break;
 80060a2:	2301      	movs	r3, #1
 80060a4:	703b      	strb	r3, [r7, #0]
 80060a6:	e005      	b.n	80060b4 <UI_MirroringPlan+0x5c>
		case 5: temp.act = 6; break;
 80060a8:	2306      	movs	r3, #6
 80060aa:	703b      	strb	r3, [r7, #0]
 80060ac:	e002      	b.n	80060b4 <UI_MirroringPlan+0x5c>
		case 6: temp.act = 5; break;
 80060ae:	2305      	movs	r3, #5
 80060b0:	703b      	strb	r3, [r7, #0]
 80060b2:	bf00      	nop
		default: continue;
		}
		SetActionOther(temp, i);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	463a      	mov	r2, r7
 80060ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80060bc:	f7fe fe98 	bl	8004df0 <SetActionOther>
 80060c0:	e000      	b.n	80060c4 <UI_MirroringPlan+0x6c>
		default: continue;
 80060c2:	bf00      	nop
	for(int i=0; i<plan.num_action; i++) {
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <UI_MirroringPlan+0x8c>)
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4293      	cmp	r3, r2
 80060d4:	dbc6      	blt.n	8006064 <UI_MirroringPlan+0xc>
	}
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000cb1 	.word	0x20000cb1
 80060e4:	20000d3c 	.word	0x20000d3c

080060e8 <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 80060ee:	4b42      	ldr	r3, [pc, #264]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 80060f0:	2203      	movs	r2, #3
 80060f2:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 80060f4:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 80060f6:	220d      	movs	r2, #13
 80060f8:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 80060fa:	4b3f      	ldr	r3, [pc, #252]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 80060fc:	2278      	movs	r2, #120	; 0x78
 80060fe:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 8006100:	4b3d      	ldr	r3, [pc, #244]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006102:	220b      	movs	r2, #11
 8006104:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 8006106:	4b3c      	ldr	r3, [pc, #240]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006108:	2200      	movs	r2, #0
 800610a:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 800610c:	4b3a      	ldr	r3, [pc, #232]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800610e:	2202      	movs	r2, #2
 8006110:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8006112:	2301      	movs	r3, #1
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e050      	b.n	80061ba <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 8006118:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800611a:	7818      	ldrb	r0, [r3, #0]
 800611c:	4936      	ldr	r1, [pc, #216]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	440b      	add	r3, r1
 8006128:	4602      	mov	r2, r0
 800612a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1e5a      	subs	r2, r3, #1
 8006130:	4931      	ldr	r1, [pc, #196]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	440b      	add	r3, r1
 800613a:	3301      	adds	r3, #1
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006140:	791b      	ldrb	r3, [r3, #4]
 8006142:	4413      	add	r3, r2
 8006144:	b2db      	uxtb	r3, r3
 8006146:	3302      	adds	r3, #2
 8006148:	b2d8      	uxtb	r0, r3
 800614a:	492b      	ldr	r1, [pc, #172]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	440b      	add	r3, r1
 8006156:	3301      	adds	r3, #1
 8006158:	4602      	mov	r2, r0
 800615a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 800615c:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800615e:	78d8      	ldrb	r0, [r3, #3]
 8006160:	4925      	ldr	r1, [pc, #148]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	440b      	add	r3, r1
 800616c:	3303      	adds	r3, #3
 800616e:	4602      	mov	r2, r0
 8006170:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8006172:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006174:	7918      	ldrb	r0, [r3, #4]
 8006176:	4920      	ldr	r1, [pc, #128]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	440b      	add	r3, r1
 8006182:	3304      	adds	r3, #4
 8006184:	4602      	mov	r2, r0
 8006186:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 8006188:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800618a:	7898      	ldrb	r0, [r3, #2]
 800618c:	491a      	ldr	r1, [pc, #104]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	440b      	add	r3, r1
 8006198:	3302      	adds	r3, #2
 800619a:	4602      	mov	r2, r0
 800619c:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 80061a0:	7998      	ldrb	r0, [r3, #6]
 80061a2:	4915      	ldr	r1, [pc, #84]	; (80061f8 <UI_SettingDisplayInit+0x110>)
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	440b      	add	r3, r1
 80061ae:	3306      	adds	r3, #6
 80061b0:	4602      	mov	r2, r0
 80061b2:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3301      	adds	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	ddab      	ble.n	8006118 <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061ce:	227f      	movs	r2, #127	; 0x7f
 80061d0:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061d4:	220a      	movs	r2, #10
 80061d6:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 80061d8:	4b08      	ldr	r3, [pc, #32]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061da:	2201      	movs	r2, #1
 80061dc:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061e0:	2202      	movs	r2, #2
 80061e2:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <UI_SettingDisplayInit+0x114>)
 80061e6:	2202      	movs	r2, #2
 80061e8:	719a      	strb	r2, [r3, #6]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	20000f04 	.word	0x20000f04
 80061fc:	20000f20 	.word	0x20000f20

08006200 <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	4a29      	ldr	r2, [pc, #164]	; (80062b4 <UI_SettingDisplay+0xb4>)
 800620e:	f992 2000 	ldrsb.w	r2, [r2]
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	2b03      	cmp	r3, #3
 8006216:	dd06      	ble.n	8006226 <UI_SettingDisplay+0x26>
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	3b03      	subs	r3, #3
 800621c:	b2db      	uxtb	r3, r3
 800621e:	b25a      	sxtb	r2, r3
 8006220:	4b24      	ldr	r3, [pc, #144]	; (80062b4 <UI_SettingDisplay+0xb4>)
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	e009      	b.n	800623a <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <UI_SettingDisplay+0xb4>)
 800622a:	f992 2000 	ldrsb.w	r2, [r2]
 800622e:	4293      	cmp	r3, r2
 8006230:	da03      	bge.n	800623a <UI_SettingDisplay+0x3a>
 8006232:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006236:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <UI_SettingDisplay+0xb4>)
 8006238:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	e031      	b.n	80062a4 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <UI_SettingDisplay+0xb4>)
 8006242:	f993 3000 	ldrsb.w	r3, [r3]
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	441a      	add	r2, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	429a      	cmp	r2, r3
 8006250:	d109      	bne.n	8006266 <UI_SettingDisplay+0x66>
 8006252:	4919      	ldr	r1, [pc, #100]	; (80062b8 <UI_SettingDisplay+0xb8>)
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	440b      	add	r3, r1
 800625e:	3302      	adds	r3, #2
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e008      	b.n	8006278 <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8006266:	4914      	ldr	r1, [pc, #80]	; (80062b8 <UI_SettingDisplay+0xb8>)
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	440b      	add	r3, r1
 8006272:	3302      	adds	r3, #2
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4613      	mov	r3, r2
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	4a0d      	ldr	r2, [pc, #52]	; (80062b8 <UI_SettingDisplay+0xb8>)
 8006282:	441a      	add	r2, r3
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <UI_SettingDisplay+0xb4>)
 8006286:	f993 3000 	ldrsb.w	r3, [r3]
 800628a:	4619      	mov	r1, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	440b      	add	r3, r1
 8006290:	490a      	ldr	r1, [pc, #40]	; (80062bc <UI_SettingDisplay+0xbc>)
 8006292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fb fafd 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	ddca      	ble.n	8006240 <UI_SettingDisplay+0x40>
	}
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000fb9 	.word	0x20000fb9
 80062b8:	20000f04 	.word	0x20000f04
 80062bc:	200002a4 	.word	0x200002a4

080062c0 <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 80062ca:	4964      	ldr	r1, [pc, #400]	; (800645c <UI_Setting+0x19c>)
 80062cc:	4864      	ldr	r0, [pc, #400]	; (8006460 <UI_Setting+0x1a0>)
 80062ce:	f7fb fae3 	bl	8001898 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 80062d2:	4b64      	ldr	r3, [pc, #400]	; (8006464 <UI_Setting+0x1a4>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff ff92 	bl	8006200 <UI_SettingDisplay>
	tick = HAL_GetTick();
 80062dc:	f002 fd7e 	bl	8008ddc <HAL_GetTick>
 80062e0:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80062e2:	f002 fd7b 	bl	8008ddc <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b45      	cmp	r3, #69	; 0x45
 80062ee:	f240 80a0 	bls.w	8006432 <UI_Setting+0x172>
		if(bt == UI_ReadButton()) continue;
 80062f2:	f7ff fc83 	bl	8005bfc <UI_ReadButton>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	4293      	cmp	r3, r2
 80062fe:	f000 809a 	beq.w	8006436 <UI_Setting+0x176>
		bt = UI_ReadButton();
 8006302:	f7ff fc7b 	bl	8005bfc <UI_ReadButton>
 8006306:	4603      	mov	r3, r0
 8006308:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00e      	beq.n	8006332 <UI_Setting+0x72>
			if(num_menu==7) num_menu = 0; else num_menu++;
 8006314:	4b53      	ldr	r3, [pc, #332]	; (8006464 <UI_Setting+0x1a4>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b07      	cmp	r3, #7
 800631a:	d103      	bne.n	8006324 <UI_Setting+0x64>
 800631c:	4b51      	ldr	r3, [pc, #324]	; (8006464 <UI_Setting+0x1a4>)
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e7d6      	b.n	80062d2 <UI_Setting+0x12>
 8006324:	4b4f      	ldr	r3, [pc, #316]	; (8006464 <UI_Setting+0x1a4>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	b2da      	uxtb	r2, r3
 800632c:	4b4d      	ldr	r3, [pc, #308]	; (8006464 <UI_Setting+0x1a4>)
 800632e:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8006330:	e7cf      	b.n	80062d2 <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00e      	beq.n	800635a <UI_Setting+0x9a>
			if(num_menu==0) num_menu = 7; else num_menu--;
 800633c:	4b49      	ldr	r3, [pc, #292]	; (8006464 <UI_Setting+0x1a4>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <UI_Setting+0x8c>
 8006344:	4b47      	ldr	r3, [pc, #284]	; (8006464 <UI_Setting+0x1a4>)
 8006346:	2207      	movs	r2, #7
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e7c2      	b.n	80062d2 <UI_Setting+0x12>
 800634c:	4b45      	ldr	r3, [pc, #276]	; (8006464 <UI_Setting+0x1a4>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	3b01      	subs	r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	4b43      	ldr	r3, [pc, #268]	; (8006464 <UI_Setting+0x1a4>)
 8006356:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8006358:	e7bb      	b.n	80062d2 <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <UI_Setting+0xae>
			num_menu = 0;
 8006364:	4b3f      	ldr	r3, [pc, #252]	; (8006464 <UI_Setting+0x1a4>)
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800636a:	2302      	movs	r3, #2
 800636c:	e071      	b.n	8006452 <UI_Setting+0x192>
		}
		switch(num_menu) {
 800636e:	4b3d      	ldr	r3, [pc, #244]	; (8006464 <UI_Setting+0x1a4>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b05      	cmp	r3, #5
 8006374:	d8b5      	bhi.n	80062e2 <UI_Setting+0x22>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UI_Setting+0xbc>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	08006395 	.word	0x08006395
 8006380:	080063a3 	.word	0x080063a3
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063bf 	.word	0x080063bf
 800638c:	080063cd 	.word	0x080063cd
 8006390:	08006425 	.word	0x08006425
		case 0:
			if(bt & SW_OK_PRESS) {
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d04d      	beq.n	800643a <UI_Setting+0x17a>
				return UI_SET_ADC;
 800639e:	2308      	movs	r3, #8
 80063a0:	e057      	b.n	8006452 <UI_Setting+0x192>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d048      	beq.n	800643e <UI_Setting+0x17e>
				return UI_SET_CALIB;
 80063ac:	2309      	movs	r3, #9
 80063ae:	e050      	b.n	8006452 <UI_Setting+0x192>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d043      	beq.n	8006442 <UI_Setting+0x182>
				return UI_SET_CP;
 80063ba:	230a      	movs	r3, #10
 80063bc:	e049      	b.n	8006452 <UI_Setting+0x192>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d03e      	beq.n	8006446 <UI_Setting+0x186>
				return UI_SET_PID;
 80063c8:	230b      	movs	r3, #11
 80063ca:	e042      	b.n	8006452 <UI_Setting+0x192>
			}
			break;
		case 4:
			if(bt & SW_OK_PRESS) {
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d039      	beq.n	800644a <UI_Setting+0x18a>
				DISP_DisplayText(&short_message, "Are You Sure?");
 80063d6:	4924      	ldr	r1, [pc, #144]	; (8006468 <UI_Setting+0x1a8>)
 80063d8:	4824      	ldr	r0, [pc, #144]	; (800646c <UI_Setting+0x1ac>)
 80063da:	f7fb fa5d 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80063de:	f7ff fc0d 	bl	8005bfc <UI_ReadButton>
 80063e2:	4603      	mov	r3, r0
 80063e4:	461a      	mov	r2, r3
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d019      	beq.n	8006420 <UI_Setting+0x160>
					bt = UI_ReadButton();
 80063ec:	f7ff fc06 	bl	8005bfc <UI_ReadButton>
 80063f0:	4603      	mov	r3, r0
 80063f2:	71fb      	strb	r3, [r7, #7]
					if(bt & SW_OK_PRESS) {
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UI_Setting+0x154>
						DISP_DisplayText(&short_message, "Mirroring...");
 80063fe:	491c      	ldr	r1, [pc, #112]	; (8006470 <UI_Setting+0x1b0>)
 8006400:	481a      	ldr	r0, [pc, #104]	; (800646c <UI_Setting+0x1ac>)
 8006402:	f7fb fa49 	bl	8001898 <DISP_DisplayText>
						UI_MirroringPlan();
 8006406:	f7ff fe27 	bl	8006058 <UI_MirroringPlan>
						DISP_DisplayText(&short_message, "Mirroring Done!");
 800640a:	491a      	ldr	r1, [pc, #104]	; (8006474 <UI_Setting+0x1b4>)
 800640c:	4817      	ldr	r0, [pc, #92]	; (800646c <UI_Setting+0x1ac>)
 800640e:	f7fb fa43 	bl	8001898 <DISP_DisplayText>
						goto ui_setting;
 8006412:	e75e      	b.n	80062d2 <UI_Setting+0x12>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0df      	beq.n	80063de <UI_Setting+0x11e>
						goto ui_setting;
 800641e:	e758      	b.n	80062d2 <UI_Setting+0x12>
					if(bt == UI_ReadButton()) continue;
 8006420:	bf00      	nop
 8006422:	e7dc      	b.n	80063de <UI_Setting+0x11e>
					}
				}
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00f      	beq.n	800644e <UI_Setting+0x18e>
				return UI_SET_MEM;
 800642e:	230d      	movs	r3, #13
 8006430:	e00f      	b.n	8006452 <UI_Setting+0x192>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006432:	bf00      	nop
 8006434:	e755      	b.n	80062e2 <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 8006436:	bf00      	nop
 8006438:	e753      	b.n	80062e2 <UI_Setting+0x22>
			break;
 800643a:	bf00      	nop
 800643c:	e751      	b.n	80062e2 <UI_Setting+0x22>
			break;
 800643e:	bf00      	nop
 8006440:	e74f      	b.n	80062e2 <UI_Setting+0x22>
			break;
 8006442:	bf00      	nop
 8006444:	e74d      	b.n	80062e2 <UI_Setting+0x22>
			break;
 8006446:	bf00      	nop
 8006448:	e74b      	b.n	80062e2 <UI_Setting+0x22>
			break;
 800644a:	bf00      	nop
 800644c:	e749      	b.n	80062e2 <UI_Setting+0x22>
			}
			break;
 800644e:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006450:	e747      	b.n	80062e2 <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	08010e70 	.word	0x08010e70
 8006460:	20000efc 	.word	0x20000efc
 8006464:	20000fba 	.word	0x20000fba
 8006468:	08010e78 	.word	0x08010e78
 800646c:	20000ed0 	.word	0x20000ed0
 8006470:	08010e88 	.word	0x08010e88
 8006474:	08010e98 	.word	0x08010e98

08006478 <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 800647e:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 8006480:	2206      	movs	r2, #6
 8006482:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 8006484:	4b47      	ldr	r3, [pc, #284]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 8006486:	2210      	movs	r2, #16
 8006488:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 800648a:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 800648c:	2236      	movs	r2, #54	; 0x36
 800648e:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 8006490:	4b44      	ldr	r3, [pc, #272]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 8006492:	220b      	movs	r2, #11
 8006494:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 8006498:	2200      	movs	r2, #0
 800649a:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 800649c:	4b41      	ldr	r3, [pc, #260]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 800649e:	2202      	movs	r2, #2
 80064a0:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 80064a2:	4b41      	ldr	r3, [pc, #260]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 80064a4:	4a3f      	ldr	r2, [pc, #252]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 80064a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064aa:	6018      	str	r0, [r3, #0]
 80064ac:	3304      	adds	r3, #4
 80064ae:	8019      	strh	r1, [r3, #0]
 80064b0:	3302      	adds	r3, #2
 80064b2:	0c0a      	lsrs	r2, r1, #16
 80064b4:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 80064b6:	4b3c      	ldr	r3, [pc, #240]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 80064b8:	223e      	movs	r2, #62	; 0x3e
 80064ba:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 80064bc:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 80064be:	223a      	movs	r2, #58	; 0x3a
 80064c0:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 80064c2:	4b39      	ldr	r3, [pc, #228]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 80064c4:	2202      	movs	r2, #2
 80064c6:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 80064c8:	2301      	movs	r3, #1
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	e04c      	b.n	8006568 <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 80064ce:	4935      	ldr	r1, [pc, #212]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	440b      	add	r3, r1
 80064da:	4a32      	ldr	r2, [pc, #200]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 80064dc:	6810      	ldr	r0, [r2, #0]
 80064de:	6018      	str	r0, [r3, #0]
 80064e0:	8891      	ldrh	r1, [r2, #4]
 80064e2:	7992      	ldrb	r2, [r2, #6]
 80064e4:	8099      	strh	r1, [r3, #4]
 80064e6:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	1e5a      	subs	r2, r3, #1
 80064ec:	492d      	ldr	r1, [pc, #180]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	440b      	add	r3, r1
 80064f6:	3301      	adds	r3, #1
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	4b2a      	ldr	r3, [pc, #168]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 80064fc:	791b      	ldrb	r3, [r3, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	b2db      	uxtb	r3, r3
 8006502:	3301      	adds	r3, #1
 8006504:	b2d8      	uxtb	r0, r3
 8006506:	4927      	ldr	r1, [pc, #156]	; (80065a4 <UI_PlanSetDisplayInit+0x12c>)
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	440b      	add	r3, r1
 8006512:	3301      	adds	r3, #1
 8006514:	4602      	mov	r2, r0
 8006516:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 8006518:	4923      	ldr	r1, [pc, #140]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	440b      	add	r3, r1
 8006524:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 8006526:	6810      	ldr	r0, [r2, #0]
 8006528:	6018      	str	r0, [r3, #0]
 800652a:	8891      	ldrh	r1, [r2, #4]
 800652c:	7992      	ldrb	r2, [r2, #6]
 800652e:	8099      	strh	r1, [r3, #4]
 8006530:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	491c      	ldr	r1, [pc, #112]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	440b      	add	r3, r1
 8006540:	3301      	adds	r3, #1
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	4413      	add	r3, r2
 800654a:	b2db      	uxtb	r3, r3
 800654c:	3301      	adds	r3, #1
 800654e:	b2d8      	uxtb	r0, r3
 8006550:	4915      	ldr	r1, [pc, #84]	; (80065a8 <UI_PlanSetDisplayInit+0x130>)
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	440b      	add	r3, r1
 800655c:	3301      	adds	r3, #1
 800655e:	4602      	mov	r2, r0
 8006560:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3301      	adds	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b03      	cmp	r3, #3
 800656c:	ddaf      	ble.n	80064ce <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 8006576:	2200      	movs	r2, #0
 8006578:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 800657c:	227f      	movs	r2, #127	; 0x7f
 800657e:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 8006582:	220d      	movs	r2, #13
 8006584:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 8006588:	2201      	movs	r2, #1
 800658a:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 800658e:	2200      	movs	r2, #0
 8006590:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 8006592:	4b06      	ldr	r3, [pc, #24]	; (80065ac <UI_PlanSetDisplayInit+0x134>)
 8006594:	2202      	movs	r2, #2
 8006596:	719a      	strb	r2, [r3, #6]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20000f28 	.word	0x20000f28
 80065a8:	20000f44 	.word	0x20000f44
 80065ac:	20000f60 	.word	0x20000f60

080065b0 <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
 80065bc:	4613      	mov	r3, r2
 80065be:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 80065c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 80065d4:	79ba      	ldrb	r2, [r7, #6]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	4619      	mov	r1, r3
 80065dc:	4bc3      	ldr	r3, [pc, #780]	; (80068ec <UI_PlanSetDisplay+0x33c>)
 80065de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065e2:	f107 000c 	add.w	r0, r7, #12
 80065e6:	49c2      	ldr	r1, [pc, #776]	; (80068f0 <UI_PlanSetDisplay+0x340>)
 80065e8:	f008 fa56 	bl	800ea98 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 80065ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <UI_PlanSetDisplay+0x4c>
 80065f4:	4bbf      	ldr	r3, [pc, #764]	; (80068f4 <UI_PlanSetDisplay+0x344>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	709a      	strb	r2, [r3, #2]
 80065fa:	e002      	b.n	8006602 <UI_PlanSetDisplay+0x52>
 80065fc:	4bbd      	ldr	r3, [pc, #756]	; (80068f4 <UI_PlanSetDisplay+0x344>)
 80065fe:	2200      	movs	r2, #0
 8006600:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 8006602:	f107 030c 	add.w	r3, r7, #12
 8006606:	4619      	mov	r1, r3
 8006608:	48ba      	ldr	r0, [pc, #744]	; (80068f4 <UI_PlanSetDisplay+0x344>)
 800660a:	f7fb f945 	bl	8001898 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 800660e:	2300      	movs	r3, #0
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	230e      	movs	r3, #14
 8006614:	227f      	movs	r2, #127	; 0x7f
 8006616:	210e      	movs	r1, #14
 8006618:	2000      	movs	r0, #0
 800661a:	f7fa ffa9 	bl	8001570 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 800661e:	230d      	movs	r3, #13
 8006620:	227f      	movs	r2, #127	; 0x7f
 8006622:	210d      	movs	r1, #13
 8006624:	2000      	movs	r0, #0
 8006626:	f7fb fa09 	bl	8001a3c <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 800662a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d101      	bne.n	8006638 <UI_PlanSetDisplay+0x88>
 8006634:	2300      	movs	r3, #0
 8006636:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 8006638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663c:	4aae      	ldr	r2, [pc, #696]	; (80068f8 <UI_PlanSetDisplay+0x348>)
 800663e:	f992 2000 	ldrsb.w	r2, [r2]
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	2b03      	cmp	r3, #3
 8006646:	dd06      	ble.n	8006656 <UI_PlanSetDisplay+0xa6>
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	3b03      	subs	r3, #3
 800664c:	b2db      	uxtb	r3, r3
 800664e:	b25a      	sxtb	r2, r3
 8006650:	4ba9      	ldr	r3, [pc, #676]	; (80068f8 <UI_PlanSetDisplay+0x348>)
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e009      	b.n	800666a <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 8006656:	4ba8      	ldr	r3, [pc, #672]	; (80068f8 <UI_PlanSetDisplay+0x348>)
 8006658:	f993 3000 	ldrsb.w	r3, [r3]
 800665c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006660:	429a      	cmp	r2, r3
 8006662:	da02      	bge.n	800666a <UI_PlanSetDisplay+0xba>
 8006664:	4aa4      	ldr	r2, [pc, #656]	; (80068f8 <UI_PlanSetDisplay+0x348>)
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 800666a:	2300      	movs	r3, #0
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	e22f      	b.n	8006ad0 <UI_PlanSetDisplay+0x520>
		if(i + first_list == num && !temp) {
 8006670:	4ba1      	ldr	r3, [pc, #644]	; (80068f8 <UI_PlanSetDisplay+0x348>)
 8006672:	f993 3000 	ldrsb.w	r3, [r3]
 8006676:	461a      	mov	r2, r3
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	441a      	add	r2, r3
 800667c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d116      	bne.n	80066b2 <UI_PlanSetDisplay+0x102>
 8006684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006688:	2b00      	cmp	r3, #0
 800668a:	d112      	bne.n	80066b2 <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 800668c:	499b      	ldr	r1, [pc, #620]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	4613      	mov	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	440b      	add	r3, r1
 8006698:	3302      	adds	r3, #2
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 800669e:	4998      	ldr	r1, [pc, #608]	; (8006900 <UI_PlanSetDisplay+0x350>)
 80066a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	1a9b      	subs	r3, r3, r2
 80066a8:	440b      	add	r3, r1
 80066aa:	3302      	adds	r3, #2
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	e011      	b.n	80066d6 <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 80066b2:	4992      	ldr	r1, [pc, #584]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	440b      	add	r3, r1
 80066be:	3302      	adds	r3, #2
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 80066c4:	498e      	ldr	r1, [pc, #568]	; (8006900 <UI_PlanSetDisplay+0x350>)
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	440b      	add	r3, r1
 80066d0:	3302      	adds	r3, #2
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 80066d6:	4b88      	ldr	r3, [pc, #544]	; (80068f8 <UI_PlanSetDisplay+0x348>)
 80066d8:	f993 3000 	ldrsb.w	r3, [r3]
 80066dc:	461a      	mov	r2, r3
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	4413      	add	r3, r2
 80066e2:	2b0c      	cmp	r3, #12
 80066e4:	f200 81f1 	bhi.w	8006aca <UI_PlanSetDisplay+0x51a>
 80066e8:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <UI_PlanSetDisplay+0x140>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006725 	.word	0x08006725
 80066f4:	08006765 	.word	0x08006765
 80066f8:	0800679b 	.word	0x0800679b
 80066fc:	080067e7 	.word	0x080067e7
 8006700:	08006827 	.word	0x08006827
 8006704:	08006869 	.word	0x08006869
 8006708:	080068ab 	.word	0x080068ab
 800670c:	08006929 	.word	0x08006929
 8006710:	08006969 	.word	0x08006969
 8006714:	080069a9 	.word	0x080069a9
 8006718:	08006a07 	.word	0x08006a07
 800671c:	08006a75 	.word	0x08006a75
 8006720:	08006a9f 	.word	0x08006a9f
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	4a73      	ldr	r2, [pc, #460]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 800672e:	4413      	add	r3, r2
 8006730:	4974      	ldr	r1, [pc, #464]	; (8006904 <UI_PlanSetDisplay+0x354>)
 8006732:	4618      	mov	r0, r3
 8006734:	f7fb f8b0 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	461a      	mov	r2, r3
 800673e:	f107 030c 	add.w	r3, r7, #12
 8006742:	4971      	ldr	r1, [pc, #452]	; (8006908 <UI_PlanSetDisplay+0x358>)
 8006744:	4618      	mov	r0, r3
 8006746:	f008 f9a7 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	4613      	mov	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	4a6b      	ldr	r2, [pc, #428]	; (8006900 <UI_PlanSetDisplay+0x350>)
 8006754:	4413      	add	r3, r2
 8006756:	f107 020c 	add.w	r2, r7, #12
 800675a:	4611      	mov	r1, r2
 800675c:	4618      	mov	r0, r3
 800675e:	f7fb f89b 	bl	8001898 <DISP_DisplayText>
			break;
 8006762:	e1b2      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 8006764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	4a63      	ldr	r2, [pc, #396]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 800676e:	4413      	add	r3, r2
 8006770:	4966      	ldr	r1, [pc, #408]	; (800690c <UI_PlanSetDisplay+0x35c>)
 8006772:	4618      	mov	r0, r3
 8006774:	f7fb f890 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	4a5f      	ldr	r2, [pc, #380]	; (8006900 <UI_PlanSetDisplay+0x350>)
 8006782:	441a      	add	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	789b      	ldrb	r3, [r3, #2]
 8006788:	4619      	mov	r1, r3
 800678a:	4b61      	ldr	r3, [pc, #388]	; (8006910 <UI_PlanSetDisplay+0x360>)
 800678c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f7fb f880 	bl	8001898 <DISP_DisplayText>
			break;
 8006798:	e197      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 2:
			DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 800679a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	4a56      	ldr	r2, [pc, #344]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 80067a4:	441a      	add	r2, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	789b      	ldrb	r3, [r3, #2]
 80067aa:	4619      	mov	r1, r3
 80067ac:	4b59      	ldr	r3, [pc, #356]	; (8006914 <UI_PlanSetDisplay+0x364>)
 80067ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fb f86f 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->act_value);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	78db      	ldrb	r3, [r3, #3]
 80067be:	461a      	mov	r2, r3
 80067c0:	f107 030c 	add.w	r3, r7, #12
 80067c4:	4950      	ldr	r1, [pc, #320]	; (8006908 <UI_PlanSetDisplay+0x358>)
 80067c6:	4618      	mov	r0, r3
 80067c8:	f008 f966 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80067cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	4a4a      	ldr	r2, [pc, #296]	; (8006900 <UI_PlanSetDisplay+0x350>)
 80067d6:	4413      	add	r3, r2
 80067d8:	f107 020c 	add.w	r2, r7, #12
 80067dc:	4611      	mov	r1, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fb f85a 	bl	8001898 <DISP_DisplayText>
			break;
 80067e4:	e171      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 80067e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	4a43      	ldr	r2, [pc, #268]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 80067f0:	4413      	add	r3, r2
 80067f2:	4949      	ldr	r1, [pc, #292]	; (8006918 <UI_PlanSetDisplay+0x368>)
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fb f84f 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	461a      	mov	r2, r3
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	4940      	ldr	r1, [pc, #256]	; (8006908 <UI_PlanSetDisplay+0x358>)
 8006806:	4618      	mov	r0, r3
 8006808:	f008 f946 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800680c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	4a3a      	ldr	r2, [pc, #232]	; (8006900 <UI_PlanSetDisplay+0x350>)
 8006816:	4413      	add	r3, r2
 8006818:	f107 020c 	add.w	r2, r7, #12
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fb f83a 	bl	8001898 <DISP_DisplayText>
			break;
 8006824:	e151      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	4613      	mov	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	4a33      	ldr	r2, [pc, #204]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 8006830:	4413      	add	r3, r2
 8006832:	493a      	ldr	r1, [pc, #232]	; (800691c <UI_PlanSetDisplay+0x36c>)
 8006834:	4618      	mov	r0, r3
 8006836:	f7fb f82f 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8006840:	461a      	mov	r2, r3
 8006842:	f107 030c 	add.w	r3, r7, #12
 8006846:	4930      	ldr	r1, [pc, #192]	; (8006908 <UI_PlanSetDisplay+0x358>)
 8006848:	4618      	mov	r0, r3
 800684a:	f008 f925 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	4a2a      	ldr	r2, [pc, #168]	; (8006900 <UI_PlanSetDisplay+0x350>)
 8006858:	4413      	add	r3, r2
 800685a:	f107 020c 	add.w	r2, r7, #12
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fb f819 	bl	8001898 <DISP_DisplayText>
			break;
 8006866:	e130      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	4613      	mov	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	4a22      	ldr	r2, [pc, #136]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 8006872:	4413      	add	r3, r2
 8006874:	492a      	ldr	r1, [pc, #168]	; (8006920 <UI_PlanSetDisplay+0x370>)
 8006876:	4618      	mov	r0, r3
 8006878:	f7fb f80e 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006882:	461a      	mov	r2, r3
 8006884:	f107 030c 	add.w	r3, r7, #12
 8006888:	491f      	ldr	r1, [pc, #124]	; (8006908 <UI_PlanSetDisplay+0x358>)
 800688a:	4618      	mov	r0, r3
 800688c:	f008 f904 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006892:	4613      	mov	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	4a19      	ldr	r2, [pc, #100]	; (8006900 <UI_PlanSetDisplay+0x350>)
 800689a:	4413      	add	r3, r2
 800689c:	f107 020c 	add.w	r2, r7, #12
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fa fff8 	bl	8001898 <DISP_DisplayText>
			break;
 80068a8:	e10f      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	4a12      	ldr	r2, [pc, #72]	; (80068fc <UI_PlanSetDisplay+0x34c>)
 80068b4:	4413      	add	r3, r2
 80068b6:	491b      	ldr	r1, [pc, #108]	; (8006924 <UI_PlanSetDisplay+0x374>)
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fa ffed 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	79db      	ldrb	r3, [r3, #7]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	490f      	ldr	r1, [pc, #60]	; (8006908 <UI_PlanSetDisplay+0x358>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	f008 f8e4 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	4a09      	ldr	r2, [pc, #36]	; (8006900 <UI_PlanSetDisplay+0x350>)
 80068da:	4413      	add	r3, r2
 80068dc:	f107 020c 	add.w	r2, r7, #12
 80068e0:	4611      	mov	r1, r2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fa ffd8 	bl	8001898 <DISP_DisplayText>
			break;
 80068e8:	e0ef      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
 80068ea:	bf00      	nop
 80068ec:	200002c4 	.word	0x200002c4
 80068f0:	08010f3c 	.word	0x08010f3c
 80068f4:	20000f60 	.word	0x20000f60
 80068f8:	20000fbb 	.word	0x20000fbb
 80068fc:	20000f28 	.word	0x20000f28
 8006900:	20000f44 	.word	0x20000f44
 8006904:	08010f48 	.word	0x08010f48
 8006908:	08010f50 	.word	0x08010f50
 800690c:	08010f54 	.word	0x08010f54
 8006910:	200002f4 	.word	0x200002f4
 8006914:	20000300 	.word	0x20000300
 8006918:	08010f5c 	.word	0x08010f5c
 800691c:	08010f64 	.word	0x08010f64
 8006920:	08010f6c 	.word	0x08010f6c
 8006924:	08010f74 	.word	0x08010f74
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	4a6c      	ldr	r2, [pc, #432]	; (8006ae4 <UI_PlanSetDisplay+0x534>)
 8006932:	4413      	add	r3, r2
 8006934:	496c      	ldr	r1, [pc, #432]	; (8006ae8 <UI_PlanSetDisplay+0x538>)
 8006936:	4618      	mov	r0, r3
 8006938:	f7fa ffae 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	7a1b      	ldrb	r3, [r3, #8]
 8006940:	461a      	mov	r2, r3
 8006942:	f107 030c 	add.w	r3, r7, #12
 8006946:	4969      	ldr	r1, [pc, #420]	; (8006aec <UI_PlanSetDisplay+0x53c>)
 8006948:	4618      	mov	r0, r3
 800694a:	f008 f8a5 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800694e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006950:	4613      	mov	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	4a66      	ldr	r2, [pc, #408]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006958:	4413      	add	r3, r2
 800695a:	f107 020c 	add.w	r2, r7, #12
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f7fa ff99 	bl	8001898 <DISP_DisplayText>
			break;
 8006966:	e0b0      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	4a5c      	ldr	r2, [pc, #368]	; (8006ae4 <UI_PlanSetDisplay+0x534>)
 8006972:	4413      	add	r3, r2
 8006974:	495f      	ldr	r1, [pc, #380]	; (8006af4 <UI_PlanSetDisplay+0x544>)
 8006976:	4618      	mov	r0, r3
 8006978:	f7fa ff8e 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	7a5b      	ldrb	r3, [r3, #9]
 8006980:	461a      	mov	r2, r3
 8006982:	f107 030c 	add.w	r3, r7, #12
 8006986:	4959      	ldr	r1, [pc, #356]	; (8006aec <UI_PlanSetDisplay+0x53c>)
 8006988:	4618      	mov	r0, r3
 800698a:	f008 f885 	bl	800ea98 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800698e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006990:	4613      	mov	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	4a56      	ldr	r2, [pc, #344]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006998:	4413      	add	r3, r2
 800699a:	f107 020c 	add.w	r2, r7, #12
 800699e:	4611      	mov	r1, r2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fa ff79 	bl	8001898 <DISP_DisplayText>
			break;
 80069a6:	e090      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	4613      	mov	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	4a4c      	ldr	r2, [pc, #304]	; (8006ae4 <UI_PlanSetDisplay+0x534>)
 80069b2:	4413      	add	r3, r2
 80069b4:	4950      	ldr	r1, [pc, #320]	; (8006af8 <UI_PlanSetDisplay+0x548>)
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fa ff6e 	bl	8001898 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	7a9b      	ldrb	r3, [r3, #10]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <UI_PlanSetDisplay+0x42a>
				DISP_DisplayText(&planset_list_value[i], "Default");
 80069c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c6:	4613      	mov	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	4a48      	ldr	r2, [pc, #288]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 80069ce:	4413      	add	r3, r2
 80069d0:	494a      	ldr	r1, [pc, #296]	; (8006afc <UI_PlanSetDisplay+0x54c>)
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fa ff60 	bl	8001898 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 80069d8:	e077      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
				sprintf(buff, "%i", plan->unit_speed);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	7a9b      	ldrb	r3, [r3, #10]
 80069de:	461a      	mov	r2, r3
 80069e0:	f107 030c 	add.w	r3, r7, #12
 80069e4:	4941      	ldr	r1, [pc, #260]	; (8006aec <UI_PlanSetDisplay+0x53c>)
 80069e6:	4618      	mov	r0, r3
 80069e8:	f008 f856 	bl	800ea98 <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	4a3e      	ldr	r2, [pc, #248]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 80069f6:	4413      	add	r3, r2
 80069f8:	f107 020c 	add.w	r2, r7, #12
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fa ff4a 	bl	8001898 <DISP_DisplayText>
			break;
 8006a04:	e061      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 8006a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a08:	4613      	mov	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	4a35      	ldr	r2, [pc, #212]	; (8006ae4 <UI_PlanSetDisplay+0x534>)
 8006a10:	4413      	add	r3, r2
 8006a12:	493b      	ldr	r1, [pc, #236]	; (8006b00 <UI_PlanSetDisplay+0x550>)
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fa ff3f 	bl	8001898 <DISP_DisplayText>
			switch(plan->status) {
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	7adb      	ldrb	r3, [r3, #11]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d01c      	beq.n	8006a5c <UI_PlanSetDisplay+0x4ac>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	dc50      	bgt.n	8006ac8 <UI_PlanSetDisplay+0x518>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <UI_PlanSetDisplay+0x480>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d00b      	beq.n	8006a46 <UI_PlanSetDisplay+0x496>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 8006a2e:	e04b      	b.n	8006ac8 <UI_PlanSetDisplay+0x518>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006a3a:	4413      	add	r3, r2
 8006a3c:	4931      	ldr	r1, [pc, #196]	; (8006b04 <UI_PlanSetDisplay+0x554>)
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fa ff2a 	bl	8001898 <DISP_DisplayText>
 8006a44:	e015      	b.n	8006a72 <UI_PlanSetDisplay+0x4c2>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	4a28      	ldr	r2, [pc, #160]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006a50:	4413      	add	r3, r2
 8006a52:	492d      	ldr	r1, [pc, #180]	; (8006b08 <UI_PlanSetDisplay+0x558>)
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fa ff1f 	bl	8001898 <DISP_DisplayText>
 8006a5a:	e00a      	b.n	8006a72 <UI_PlanSetDisplay+0x4c2>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006a66:	4413      	add	r3, r2
 8006a68:	4928      	ldr	r1, [pc, #160]	; (8006b0c <UI_PlanSetDisplay+0x55c>)
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fa ff14 	bl	8001898 <DISP_DisplayText>
 8006a70:	bf00      	nop
			break;
 8006a72:	e029      	b.n	8006ac8 <UI_PlanSetDisplay+0x518>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <UI_PlanSetDisplay+0x534>)
 8006a7e:	4413      	add	r3, r2
 8006a80:	4923      	ldr	r1, [pc, #140]	; (8006b10 <UI_PlanSetDisplay+0x560>)
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fa ff08 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006a92:	4413      	add	r3, r2
 8006a94:	491f      	ldr	r1, [pc, #124]	; (8006b14 <UI_PlanSetDisplay+0x564>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fa fefe 	bl	8001898 <DISP_DisplayText>
			break;
 8006a9c:	e015      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <UI_PlanSetDisplay+0x534>)
 8006aa8:	4413      	add	r3, r2
 8006aaa:	491b      	ldr	r1, [pc, #108]	; (8006b18 <UI_PlanSetDisplay+0x568>)
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fa fef3 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	4a0d      	ldr	r2, [pc, #52]	; (8006af0 <UI_PlanSetDisplay+0x540>)
 8006abc:	4413      	add	r3, r2
 8006abe:	4915      	ldr	r1, [pc, #84]	; (8006b14 <UI_PlanSetDisplay+0x564>)
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fa fee9 	bl	8001898 <DISP_DisplayText>
			break;
 8006ac6:	e000      	b.n	8006aca <UI_PlanSetDisplay+0x51a>
			break;
 8006ac8:	bf00      	nop
	for(int i=0; i<4; i++) {
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	3301      	adds	r3, #1
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	f77f adcc 	ble.w	8006670 <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	3728      	adds	r7, #40	; 0x28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000f28 	.word	0x20000f28
 8006ae8:	08010f7c 	.word	0x08010f7c
 8006aec:	08010f50 	.word	0x08010f50
 8006af0:	20000f44 	.word	0x20000f44
 8006af4:	08010f88 	.word	0x08010f88
 8006af8:	08010f90 	.word	0x08010f90
 8006afc:	08010f98 	.word	0x08010f98
 8006b00:	08010fa0 	.word	0x08010fa0
 8006b04:	08010fa8 	.word	0x08010fa8
 8006b08:	08010fb0 	.word	0x08010fb0
 8006b0c:	08010fb8 	.word	0x08010fb8
 8006b10:	08010fc0 	.word	0x08010fc0
 8006b14:	08010fc8 	.word	0x08010fc8
 8006b18:	08010fcc 	.word	0x08010fcc

08006b1c <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af00      	add	r7, sp, #0
	uint8_t num_index = plan.checkpoint[num_checkpoint];
 8006b22:	4bc6      	ldr	r3, [pc, #792]	; (8006e3c <UI_PlanSet+0x320>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	4bc5      	ldr	r3, [pc, #788]	; (8006e40 <UI_PlanSet+0x324>)
 8006b2a:	4413      	add	r3, r2
 8006b2c:	789b      	ldrb	r3, [r3, #2]
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Action_typedef plan_set = GetAction(num_index);
 8006b32:	f107 0314 	add.w	r3, r7, #20
 8006b36:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fd fe2f 	bl	80047a0 <GetAction>
	int8_t num = -1;
 8006b42:	23ff      	movs	r3, #255	; 0xff
 8006b44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t change_status = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 8006b54:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b58:	f107 0114 	add.w	r1, r7, #20
 8006b5c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fd25 	bl	80065b0 <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 8006b66:	f002 f939 	bl	8008ddc <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8006b6c:	f002 f936 	bl	8008ddc <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006b7a:	2a01      	cmp	r2, #1
 8006b7c:	d101      	bne.n	8006b82 <UI_PlanSet+0x66>
 8006b7e:	2219      	movs	r2, #25
 8006b80:	e000      	b.n	8006b84 <UI_PlanSet+0x68>
 8006b82:	2246      	movs	r2, #70	; 0x46
 8006b84:	429a      	cmp	r2, r3
 8006b86:	f200 8406 	bhi.w	8007396 <UI_PlanSet+0x87a>

		bt2 = UI_ReadButton();
 8006b8a:	f7ff f837 	bl	8005bfc <UI_ReadButton>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 8006b94:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d104      	bne.n	8006baa <UI_PlanSet+0x8e>
 8006ba0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 83f9 	beq.w	800739c <UI_PlanSet+0x880>
		bt = bt2;
 8006baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 8006bb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <UI_PlanSet+0xae>
			num = -1;
 8006bbe:	23ff      	movs	r3, #255	; 0xff
 8006bc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return UI_HOMESCREEN;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f000 bc16 	b.w	80073f6 <UI_PlanSet+0x8da>
		}
		if(num != -1) {
 8006bca:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d03e      	beq.n	8006c52 <UI_PlanSet+0x136>
			if(bt & SW_UP_PRESS) {
 8006bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d012      	beq.n	8006c06 <UI_PlanSet+0xea>
				if(num != 0) num--; else num=12;
 8006be0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <UI_PlanSet+0xdc>
 8006be8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006bf6:	e002      	b.n	8006bfe <UI_PlanSet+0xe2>
 8006bf8:	230c      	movs	r3, #12
 8006bfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006c04:	e7a6      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			else if(bt & SW_DW_PRESS) {
 8006c06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d012      	beq.n	8006c38 <UI_PlanSet+0x11c>
				if(num != 12) num++; else num=0;
 8006c12:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006c16:	2b0c      	cmp	r3, #12
 8006c18:	d007      	beq.n	8006c2a <UI_PlanSet+0x10e>
 8006c1a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006c28:	e002      	b.n	8006c30 <UI_PlanSet+0x114>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006c36:	e78d      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8006c38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d006      	beq.n	8006c52 <UI_PlanSet+0x136>
				bt_status = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				num = -1;
 8006c4a:	23ff      	movs	r3, #255	; 0xff
 8006c4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				goto plan_set;
 8006c50:	e780      	b.n	8006b54 <UI_PlanSet+0x38>
			}
		}
		switch(num) {
 8006c52:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006c56:	3301      	adds	r3, #1
 8006c58:	2b0d      	cmp	r3, #13
 8006c5a:	d887      	bhi.n	8006b6c <UI_PlanSet+0x50>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <UI_PlanSet+0x148>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006e0d 	.word	0x08006e0d
 8006c6c:	08006e79 	.word	0x08006e79
 8006c70:	08006ed7 	.word	0x08006ed7
 8006c74:	08006f35 	.word	0x08006f35
 8006c78:	08006f93 	.word	0x08006f93
 8006c7c:	08007003 	.word	0x08007003
 8006c80:	08007073 	.word	0x08007073
 8006c84:	080070d1 	.word	0x080070d1
 8006c88:	0800712f 	.word	0x0800712f
 8006c8c:	0800718d 	.word	0x0800718d
 8006c90:	080071eb 	.word	0x080071eb
 8006c94:	08007277 	.word	0x08007277
 8006c98:	080072f9 	.word	0x080072f9
		case -1:
			if(bt & SW_DW_PRESS) {
 8006c9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d010      	beq.n	8006cca <UI_PlanSet+0x1ae>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8006ca8:	7d3b      	ldrb	r3, [r7, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <UI_PlanSet+0x19c>
 8006cae:	7d3b      	ldrb	r3, [r7, #20]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	753b      	strb	r3, [r7, #20]
 8006cb6:	e001      	b.n	8006cbc <UI_PlanSet+0x1a0>
 8006cb8:	230b      	movs	r3, #11
 8006cba:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006cc8:	e744      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			else if(bt & SW_UP_PRESS) {
 8006cca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d010      	beq.n	8006cf8 <UI_PlanSet+0x1dc>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8006cd6:	7d3b      	ldrb	r3, [r7, #20]
 8006cd8:	2b0b      	cmp	r3, #11
 8006cda:	d004      	beq.n	8006ce6 <UI_PlanSet+0x1ca>
 8006cdc:	7d3b      	ldrb	r3, [r7, #20]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	753b      	strb	r3, [r7, #20]
 8006ce4:	e001      	b.n	8006cea <UI_PlanSet+0x1ce>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006cf6:	e72d      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			else if(bt & SW_OK_PRESS) {
 8006cf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <UI_PlanSet+0x1f6>
				num = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006d10:	e720      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8006d12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d012      	beq.n	8006d44 <UI_PlanSet+0x228>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d106      	bne.n	8006d34 <UI_PlanSet+0x218>
 8006d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d2a:	f107 0214 	add.w	r2, r7, #20
 8006d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d30:	f7fd fd78 	bl	8004824 <SetAction>
				num = -1;
 8006d34:	23ff      	movs	r3, #255	; 0xff
 8006d36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				return UI_HOMESCREEN;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e358      	b.n	80073f6 <UI_PlanSet+0x8da>
			}
			else if(bt2 & SW_RG_PRESS) {
 8006d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d02b      	beq.n	8006da8 <UI_PlanSet+0x28c>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d106      	bne.n	8006d66 <UI_PlanSet+0x24a>
 8006d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5c:	f107 0214 	add.w	r2, r7, #20
 8006d60:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d62:	f7fd fd5f 	bl	8004824 <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8006d66:	4b37      	ldr	r3, [pc, #220]	; (8006e44 <UI_PlanSet+0x328>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d005      	beq.n	8006d7e <UI_PlanSet+0x262>
 8006d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d76:	3301      	adds	r3, #1
 8006d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d7c:	e002      	b.n	8006d84 <UI_PlanSet+0x268>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8006d84:	463b      	mov	r3, r7
 8006d86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fd fd07 	bl	80047a0 <GetAction>
 8006d92:	f107 0314 	add.w	r3, r7, #20
 8006d96:	463a      	mov	r2, r7
 8006d98:	6810      	ldr	r0, [r2, #0]
 8006d9a:	6851      	ldr	r1, [r2, #4]
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006da6:	e6d5      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			else if(bt2 & SW_LF_PRESS) {
 8006da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 82f6 	beq.w	80073a2 <UI_PlanSet+0x886>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d106      	bne.n	8006dcc <UI_PlanSet+0x2b0>
 8006dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dc2:	f107 0214 	add.w	r2, r7, #20
 8006dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dc8:	f7fd fd2c 	bl	8004824 <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8006dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <UI_PlanSet+0x2c4>
 8006dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006dde:	e003      	b.n	8006de8 <UI_PlanSet+0x2cc>
 8006de0:	4b18      	ldr	r3, [pc, #96]	; (8006e44 <UI_PlanSet+0x328>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8006de8:	463b      	mov	r3, r7
 8006dea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fd fcd5 	bl	80047a0 <GetAction>
 8006df6:	f107 0314 	add.w	r3, r7, #20
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	6810      	ldr	r0, [r2, #0]
 8006dfe:	6851      	ldr	r1, [r2, #4]
 8006e00:	6892      	ldr	r2, [r2, #8]
 8006e02:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006e0a:	e6a3      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8006e0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d017      	beq.n	8006e48 <UI_PlanSet+0x32c>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8006e18:	7d7b      	ldrb	r3, [r7, #21]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <UI_PlanSet+0x30c>
 8006e1e:	7d7b      	ldrb	r3, [r7, #21]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	757b      	strb	r3, [r7, #21]
 8006e26:	e001      	b.n	8006e2c <UI_PlanSet+0x310>
 8006e28:	230e      	movs	r3, #14
 8006e2a:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006e38:	e68c      	b.n	8006b54 <UI_PlanSet+0x38>
 8006e3a:	bf00      	nop
 8006e3c:	20000cb4 	.word	0x20000cb4
 8006e40:	20000d3c 	.word	0x20000d3c
 8006e44:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8006e48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 82a9 	beq.w	80073a8 <UI_PlanSet+0x88c>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8006e56:	7d7b      	ldrb	r3, [r7, #21]
 8006e58:	2b0e      	cmp	r3, #14
 8006e5a:	d004      	beq.n	8006e66 <UI_PlanSet+0x34a>
 8006e5c:	7d7b      	ldrb	r3, [r7, #21]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	757b      	strb	r3, [r7, #21]
 8006e64:	e001      	b.n	8006e6a <UI_PlanSet+0x34e>
 8006e66:	2300      	movs	r3, #0
 8006e68:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006e76:	e66d      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8006e78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d010      	beq.n	8006ea6 <UI_PlanSet+0x38a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <UI_PlanSet+0x378>
 8006e8a:	7dbb      	ldrb	r3, [r7, #22]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	75bb      	strb	r3, [r7, #22]
 8006e92:	e001      	b.n	8006e98 <UI_PlanSet+0x37c>
 8006e94:	2302      	movs	r3, #2
 8006e96:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006ea4:	e656      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006ea6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 827d 	beq.w	80073ae <UI_PlanSet+0x892>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8006eb4:	7dbb      	ldrb	r3, [r7, #22]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d004      	beq.n	8006ec4 <UI_PlanSet+0x3a8>
 8006eba:	7dbb      	ldrb	r3, [r7, #22]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	75bb      	strb	r3, [r7, #22]
 8006ec2:	e001      	b.n	8006ec8 <UI_PlanSet+0x3ac>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006ed4:	e63e      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8006ed6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d010      	beq.n	8006f04 <UI_PlanSet+0x3e8>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <UI_PlanSet+0x3d6>
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	75fb      	strb	r3, [r7, #23]
 8006ef0:	e001      	b.n	8006ef6 <UI_PlanSet+0x3da>
 8006ef2:	23ff      	movs	r3, #255	; 0xff
 8006ef4:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006f02:	e627      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006f04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8251 	beq.w	80073b4 <UI_PlanSet+0x898>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2bff      	cmp	r3, #255	; 0xff
 8006f16:	d004      	beq.n	8006f22 <UI_PlanSet+0x406>
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	75fb      	strb	r3, [r7, #23]
 8006f20:	e001      	b.n	8006f26 <UI_PlanSet+0x40a>
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006f32:	e60f      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8006f34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d010      	beq.n	8006f62 <UI_PlanSet+0x446>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8006f40:	7e3b      	ldrb	r3, [r7, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <UI_PlanSet+0x434>
 8006f46:	7e3b      	ldrb	r3, [r7, #24]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	763b      	strb	r3, [r7, #24]
 8006f4e:	e001      	b.n	8006f54 <UI_PlanSet+0x438>
 8006f50:	23ff      	movs	r3, #255	; 0xff
 8006f52:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006f60:	e5f8      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006f62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8225 	beq.w	80073ba <UI_PlanSet+0x89e>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 8006f70:	7e3b      	ldrb	r3, [r7, #24]
 8006f72:	2bff      	cmp	r3, #255	; 0xff
 8006f74:	d004      	beq.n	8006f80 <UI_PlanSet+0x464>
 8006f76:	7e3b      	ldrb	r3, [r7, #24]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	763b      	strb	r3, [r7, #24]
 8006f7e:	e001      	b.n	8006f84 <UI_PlanSet+0x468>
 8006f80:	2300      	movs	r3, #0
 8006f82:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006f90:	e5e0      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8006f92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d015      	beq.n	8006fca <UI_PlanSet+0x4ae>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 8006f9e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006fa2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8006fa6:	d007      	beq.n	8006fb8 <UI_PlanSet+0x49c>
 8006fa8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	b25b      	sxtb	r3, r3
 8006fb4:	767b      	strb	r3, [r7, #25]
 8006fb6:	e001      	b.n	8006fbc <UI_PlanSet+0x4a0>
 8006fb8:	2363      	movs	r3, #99	; 0x63
 8006fba:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006fc8:	e5c4      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006fca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 81f4 	beq.w	80073c0 <UI_PlanSet+0x8a4>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8006fd8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006fdc:	2b63      	cmp	r3, #99	; 0x63
 8006fde:	d007      	beq.n	8006ff0 <UI_PlanSet+0x4d4>
 8006fe0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	767b      	strb	r3, [r7, #25]
 8006fee:	e001      	b.n	8006ff4 <UI_PlanSet+0x4d8>
 8006ff0:	239d      	movs	r3, #157	; 0x9d
 8006ff2:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007000:	e5a8      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 8007002:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <UI_PlanSet+0x51e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 800700e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007012:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007016:	d007      	beq.n	8007028 <UI_PlanSet+0x50c>
 8007018:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	b25b      	sxtb	r3, r3
 8007024:	76bb      	strb	r3, [r7, #26]
 8007026:	e001      	b.n	800702c <UI_PlanSet+0x510>
 8007028:	2363      	movs	r3, #99	; 0x63
 800702a:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007038:	e58c      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800703a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 81bf 	beq.w	80073c6 <UI_PlanSet+0x8aa>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8007048:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800704c:	2b63      	cmp	r3, #99	; 0x63
 800704e:	d007      	beq.n	8007060 <UI_PlanSet+0x544>
 8007050:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	3301      	adds	r3, #1
 8007058:	b2db      	uxtb	r3, r3
 800705a:	b25b      	sxtb	r3, r3
 800705c:	76bb      	strb	r3, [r7, #26]
 800705e:	e001      	b.n	8007064 <UI_PlanSet+0x548>
 8007060:	239d      	movs	r3, #157	; 0x9d
 8007062:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007070:	e570      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 8007072:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	d010      	beq.n	80070a0 <UI_PlanSet+0x584>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 800707e:	7efb      	ldrb	r3, [r7, #27]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <UI_PlanSet+0x572>
 8007084:	7efb      	ldrb	r3, [r7, #27]
 8007086:	3b01      	subs	r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	76fb      	strb	r3, [r7, #27]
 800708c:	e001      	b.n	8007092 <UI_PlanSet+0x576>
 800708e:	23ff      	movs	r3, #255	; 0xff
 8007090:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800709e:	e559      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80070a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 818f 	beq.w	80073cc <UI_PlanSet+0x8b0>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 80070ae:	7efb      	ldrb	r3, [r7, #27]
 80070b0:	2bff      	cmp	r3, #255	; 0xff
 80070b2:	d004      	beq.n	80070be <UI_PlanSet+0x5a2>
 80070b4:	7efb      	ldrb	r3, [r7, #27]
 80070b6:	3301      	adds	r3, #1
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	76fb      	strb	r3, [r7, #27]
 80070bc:	e001      	b.n	80070c2 <UI_PlanSet+0x5a6>
 80070be:	2300      	movs	r3, #0
 80070c0:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80070ce:	e541      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 80070d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <UI_PlanSet+0x5e2>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 80070dc:	7f3b      	ldrb	r3, [r7, #28]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <UI_PlanSet+0x5d0>
 80070e2:	7f3b      	ldrb	r3, [r7, #28]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	773b      	strb	r3, [r7, #28]
 80070ea:	e001      	b.n	80070f0 <UI_PlanSet+0x5d4>
 80070ec:	23ff      	movs	r3, #255	; 0xff
 80070ee:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80070fc:	e52a      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80070fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8163 	beq.w	80073d2 <UI_PlanSet+0x8b6>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 800710c:	7f3b      	ldrb	r3, [r7, #28]
 800710e:	2bff      	cmp	r3, #255	; 0xff
 8007110:	d004      	beq.n	800711c <UI_PlanSet+0x600>
 8007112:	7f3b      	ldrb	r3, [r7, #28]
 8007114:	3301      	adds	r3, #1
 8007116:	b2db      	uxtb	r3, r3
 8007118:	773b      	strb	r3, [r7, #28]
 800711a:	e001      	b.n	8007120 <UI_PlanSet+0x604>
 800711c:	2300      	movs	r3, #0
 800711e:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800712c:	e512      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 800712e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d010      	beq.n	800715c <UI_PlanSet+0x640>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 800713a:	7f7b      	ldrb	r3, [r7, #29]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <UI_PlanSet+0x62e>
 8007140:	7f7b      	ldrb	r3, [r7, #29]
 8007142:	3b01      	subs	r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	777b      	strb	r3, [r7, #29]
 8007148:	e001      	b.n	800714e <UI_PlanSet+0x632>
 800714a:	23ff      	movs	r3, #255	; 0xff
 800714c:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800715a:	e4fb      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800715c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8137 	beq.w	80073d8 <UI_PlanSet+0x8bc>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 800716a:	7f7b      	ldrb	r3, [r7, #29]
 800716c:	2bff      	cmp	r3, #255	; 0xff
 800716e:	d004      	beq.n	800717a <UI_PlanSet+0x65e>
 8007170:	7f7b      	ldrb	r3, [r7, #29]
 8007172:	3301      	adds	r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	777b      	strb	r3, [r7, #29]
 8007178:	e001      	b.n	800717e <UI_PlanSet+0x662>
 800717a:	2300      	movs	r3, #0
 800717c:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800718a:	e4e3      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 800718c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007190:	f003 0310 	and.w	r3, r3, #16
 8007194:	2b00      	cmp	r3, #0
 8007196:	d010      	beq.n	80071ba <UI_PlanSet+0x69e>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 8007198:	7fbb      	ldrb	r3, [r7, #30]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d004      	beq.n	80071a8 <UI_PlanSet+0x68c>
 800719e:	7fbb      	ldrb	r3, [r7, #30]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	77bb      	strb	r3, [r7, #30]
 80071a6:	e001      	b.n	80071ac <UI_PlanSet+0x690>
 80071a8:	23ff      	movs	r3, #255	; 0xff
 80071aa:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80071b8:	e4cc      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80071ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 810b 	beq.w	80073de <UI_PlanSet+0x8c2>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 80071c8:	7fbb      	ldrb	r3, [r7, #30]
 80071ca:	2bff      	cmp	r3, #255	; 0xff
 80071cc:	d004      	beq.n	80071d8 <UI_PlanSet+0x6bc>
 80071ce:	7fbb      	ldrb	r3, [r7, #30]
 80071d0:	3301      	adds	r3, #1
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	77bb      	strb	r3, [r7, #30]
 80071d6:	e001      	b.n	80071dc <UI_PlanSet+0x6c0>
 80071d8:	2300      	movs	r3, #0
 80071da:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80071e8:	e4b4      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 80071ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01d      	beq.n	8007232 <UI_PlanSet+0x716>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <UI_PlanSet+0x6f4>
 8007200:	7ffb      	ldrb	r3, [r7, #31]
 8007202:	3b01      	subs	r3, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	b2db      	uxtb	r3, r3
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e009      	b.n	8007224 <UI_PlanSet+0x708>
 8007210:	7ffb      	ldrb	r3, [r7, #31]
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	b2db      	uxtb	r3, r3
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	7ffb      	ldrb	r3, [r7, #31]
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	b2db      	uxtb	r3, r3
 8007222:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007230:	e490      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007232:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80d2 	beq.w	80073e4 <UI_PlanSet+0x8c8>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8007240:	7ffb      	ldrb	r3, [r7, #31]
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d007      	beq.n	800725a <UI_PlanSet+0x73e>
 800724a:	7ffb      	ldrb	r3, [r7, #31]
 800724c:	3301      	adds	r3, #1
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	b2db      	uxtb	r3, r3
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e006      	b.n	8007268 <UI_PlanSet+0x74c>
 800725a:	7ffb      	ldrb	r3, [r7, #31]
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	b2db      	uxtb	r3, r3
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	7ffb      	ldrb	r3, [r7, #31]
 8007266:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007268:	2301      	movs	r3, #1
 800726a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007274:	e46e      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 11:
			if(bt & SW_OK_PRESS) {
 8007276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80b3 	beq.w	80073ea <UI_PlanSet+0x8ce>
				DISP_DisplayText(&short_message, "Insert action?");
 8007284:	495e      	ldr	r1, [pc, #376]	; (8007400 <UI_PlanSet+0x8e4>)
 8007286:	485f      	ldr	r0, [pc, #380]	; (8007404 <UI_PlanSet+0x8e8>)
 8007288:	f7fa fb06 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 800728c:	f7fe fcb6 	bl	8005bfc <UI_ReadButton>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007298:	4293      	cmp	r3, r2
 800729a:	d01f      	beq.n	80072dc <UI_PlanSet+0x7c0>
					bt = UI_ReadButton();
 800729c:	f7fe fcae 	bl	8005bfc <UI_ReadButton>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 80072a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00d      	beq.n	80072ce <UI_PlanSet+0x7b2>
						DISP_DisplayText(&short_message, "Inserting");
 80072b2:	4955      	ldr	r1, [pc, #340]	; (8007408 <UI_PlanSet+0x8ec>)
 80072b4:	4853      	ldr	r0, [pc, #332]	; (8007404 <UI_PlanSet+0x8e8>)
 80072b6:	f7fa faef 	bl	8001898 <DISP_DisplayText>
						Storage_InsertAction(num_index);
 80072ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fd ff20 	bl	8005104 <Storage_InsertAction>
						DISP_DisplayText(&short_message, "Insert Done!");
 80072c4:	4951      	ldr	r1, [pc, #324]	; (800740c <UI_PlanSet+0x8f0>)
 80072c6:	484f      	ldr	r0, [pc, #316]	; (8007404 <UI_PlanSet+0x8e8>)
 80072c8:	f7fa fae6 	bl	8001898 <DISP_DisplayText>
						break;
 80072cc:	e009      	b.n	80072e2 <UI_PlanSet+0x7c6>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80072ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <UI_PlanSet+0x7c4>
 80072da:	e7d7      	b.n	800728c <UI_PlanSet+0x770>
					if(bt == UI_ReadButton()) continue;
 80072dc:	bf00      	nop
 80072de:	e7d5      	b.n	800728c <UI_PlanSet+0x770>
						break;
 80072e0:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 80072e2:	494b      	ldr	r1, [pc, #300]	; (8007410 <UI_PlanSet+0x8f4>)
 80072e4:	484b      	ldr	r0, [pc, #300]	; (8007414 <UI_PlanSet+0x8f8>)
 80072e6:	f7fa fad7 	bl	8001898 <DISP_DisplayText>
				bt_status = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80072f6:	e42d      	b.n	8006b54 <UI_PlanSet+0x38>
			}
			break;
		case 12:
			if(bt & SW_OK_PRESS) {
 80072f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d075      	beq.n	80073f0 <UI_PlanSet+0x8d4>
				DISP_DisplayText(&short_message, "Delete this action?");
 8007304:	4944      	ldr	r1, [pc, #272]	; (8007418 <UI_PlanSet+0x8fc>)
 8007306:	483f      	ldr	r0, [pc, #252]	; (8007404 <UI_PlanSet+0x8e8>)
 8007308:	f7fa fac6 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 800730c:	f7fe fc76 	bl	8005bfc <UI_ReadButton>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007318:	4293      	cmp	r3, r2
 800731a:	d02d      	beq.n	8007378 <UI_PlanSet+0x85c>
					bt = UI_ReadButton();
 800731c:	f7fe fc6e 	bl	8005bfc <UI_ReadButton>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8007326:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01b      	beq.n	800736a <UI_PlanSet+0x84e>
						DISP_DisplayText(&short_message, "Deleting");
 8007332:	493a      	ldr	r1, [pc, #232]	; (800741c <UI_PlanSet+0x900>)
 8007334:	4833      	ldr	r0, [pc, #204]	; (8007404 <UI_PlanSet+0x8e8>)
 8007336:	f7fa faaf 	bl	8001898 <DISP_DisplayText>
						Storage_DeleteAction(num_index);
 800733a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd ff0c 	bl	800515c <Storage_DeleteAction>
						DISP_DisplayText(&short_message, "Delete Done!");
 8007344:	4936      	ldr	r1, [pc, #216]	; (8007420 <UI_PlanSet+0x904>)
 8007346:	482f      	ldr	r0, [pc, #188]	; (8007404 <UI_PlanSet+0x8e8>)
 8007348:	f7fa faa6 	bl	8001898 <DISP_DisplayText>
						plan_set = GetAction(num_index);
 800734c:	463b      	mov	r3, r7
 800734e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f7fd fa23 	bl	80047a0 <GetAction>
 800735a:	f107 0314 	add.w	r3, r7, #20
 800735e:	463a      	mov	r2, r7
 8007360:	6810      	ldr	r0, [r2, #0]
 8007362:	6851      	ldr	r1, [r2, #4]
 8007364:	6892      	ldr	r2, [r2, #8]
 8007366:	c307      	stmia	r3!, {r0, r1, r2}
						break;
 8007368:	e009      	b.n	800737e <UI_PlanSet+0x862>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 800736a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <UI_PlanSet+0x860>
 8007376:	e7c9      	b.n	800730c <UI_PlanSet+0x7f0>
					if(bt == UI_ReadButton()) continue;
 8007378:	bf00      	nop
 800737a:	e7c7      	b.n	800730c <UI_PlanSet+0x7f0>
						break;
 800737c:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 800737e:	4924      	ldr	r1, [pc, #144]	; (8007410 <UI_PlanSet+0x8f4>)
 8007380:	4824      	ldr	r0, [pc, #144]	; (8007414 <UI_PlanSet+0x8f8>)
 8007382:	f7fa fa89 	bl	8001898 <DISP_DisplayText>
				bt_status = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007392:	f7ff bbdf 	b.w	8006b54 <UI_PlanSet+0x38>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8007396:	bf00      	nop
 8007398:	f7ff bbe8 	b.w	8006b6c <UI_PlanSet+0x50>
		if(bt == bt2 && bt_status == 0) continue;
 800739c:	bf00      	nop
 800739e:	f7ff bbe5 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073a2:	bf00      	nop
 80073a4:	f7ff bbe2 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073a8:	bf00      	nop
 80073aa:	f7ff bbdf 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073ae:	bf00      	nop
 80073b0:	f7ff bbdc 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073b4:	bf00      	nop
 80073b6:	f7ff bbd9 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073ba:	bf00      	nop
 80073bc:	f7ff bbd6 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073c0:	bf00      	nop
 80073c2:	f7ff bbd3 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073c6:	bf00      	nop
 80073c8:	f7ff bbd0 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073cc:	bf00      	nop
 80073ce:	f7ff bbcd 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073d2:	bf00      	nop
 80073d4:	f7ff bbca 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073d8:	bf00      	nop
 80073da:	f7ff bbc7 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073de:	bf00      	nop
 80073e0:	f7ff bbc4 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073e4:	bf00      	nop
 80073e6:	f7ff bbc1 	b.w	8006b6c <UI_PlanSet+0x50>
			break;
 80073ea:	bf00      	nop
 80073ec:	f7ff bbbe 	b.w	8006b6c <UI_PlanSet+0x50>
			}
			break;
 80073f0:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 80073f2:	f7ff bbbb 	b.w	8006b6c <UI_PlanSet+0x50>
		}
	}
	return UI_IDLE;
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3730      	adds	r7, #48	; 0x30
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	08010fd4 	.word	0x08010fd4
 8007404:	20000ed0 	.word	0x20000ed0
 8007408:	08010fe4 	.word	0x08010fe4
 800740c:	08010ff0 	.word	0x08010ff0
 8007410:	08010fc8 	.word	0x08010fc8
 8007414:	20000ed8 	.word	0x20000ed8
 8007418:	08011000 	.word	0x08011000
 800741c:	08011014 	.word	0x08011014
 8007420:	08011020 	.word	0x08011020

08007424 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 8007428:	4b24      	ldr	r3, [pc, #144]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 800742a:	2204      	movs	r2, #4
 800742c:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007430:	2232      	movs	r2, #50	; 0x32
 8007432:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 8007434:	4b21      	ldr	r3, [pc, #132]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007436:	223a      	movs	r2, #58	; 0x3a
 8007438:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 800743a:	4b20      	ldr	r3, [pc, #128]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 800743c:	220b      	movs	r2, #11
 800743e:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 8007440:	4b1e      	ldr	r3, [pc, #120]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007442:	2201      	movs	r2, #1
 8007444:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007448:	2202      	movs	r2, #2
 800744a:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 800744c:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 800744e:	2202      	movs	r2, #2
 8007450:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 8007452:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007454:	4a19      	ldr	r2, [pc, #100]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007456:	3307      	adds	r3, #7
 8007458:	6810      	ldr	r0, [r2, #0]
 800745a:	6018      	str	r0, [r3, #0]
 800745c:	8891      	ldrh	r1, [r2, #4]
 800745e:	7992      	ldrb	r2, [r2, #6]
 8007460:	8099      	strh	r1, [r3, #4]
 8007462:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007466:	223f      	movs	r2, #63	; 0x3f
 8007468:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 800746c:	223c      	movs	r2, #60	; 0x3c
 800746e:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 8007470:	4b12      	ldr	r3, [pc, #72]	; (80074bc <UI_ADCThresholdDisplayInit+0x98>)
 8007472:	2200      	movs	r2, #0
 8007474:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 8007476:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 800747e:	2200      	movs	r2, #0
 8007480:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007484:	227f      	movs	r2, #127	; 0x7f
 8007486:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 800748a:	220a      	movs	r2, #10
 800748c:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 800748e:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007490:	2201      	movs	r2, #1
 8007492:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 8007496:	2202      	movs	r2, #2
 8007498:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <UI_ADCThresholdDisplayInit+0x9c>)
 800749c:	2202      	movs	r2, #2
 800749e:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 80074a0:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <UI_ADCThresholdDisplayInit+0xa0>)
 80074a2:	2220      	movs	r2, #32
 80074a4:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <UI_ADCThresholdDisplayInit+0xa0>)
 80074a8:	2206      	movs	r2, #6
 80074aa:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <UI_ADCThresholdDisplayInit+0xa0>)
 80074ae:	2202      	movs	r2, #2
 80074b0:	715a      	strb	r2, [r3, #5]

}
 80074b2:	bf00      	nop
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	20000f68 	.word	0x20000f68
 80074c0:	20000f78 	.word	0x20000f78
 80074c4:	20000f80 	.word	0x20000f80

080074c8 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 80074d2:	4b2d      	ldr	r3, [pc, #180]	; (8007588 <UI_ADCThresholdDisplay+0xc0>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	79fa      	ldrb	r2, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d03e      	beq.n	800755a <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	f107 0310 	add.w	r3, r7, #16
 80074e4:	4929      	ldr	r1, [pc, #164]	; (800758c <UI_ADCThresholdDisplay+0xc4>)
 80074e6:	4618      	mov	r0, r3
 80074e8:	f007 fad6 	bl	800ea98 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 80074ec:	f107 0310 	add.w	r3, r7, #16
 80074f0:	4619      	mov	r1, r3
 80074f2:	4827      	ldr	r0, [pc, #156]	; (8007590 <UI_ADCThresholdDisplay+0xc8>)
 80074f4:	f7fa f9d0 	bl	8001898 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80074f8:	4b23      	ldr	r3, [pc, #140]	; (8007588 <UI_ADCThresholdDisplay+0xc0>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	00d2      	lsls	r2, r2, #3
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	b2da      	uxtb	r2, r3
 8007504:	4b23      	ldr	r3, [pc, #140]	; (8007594 <UI_ADCThresholdDisplay+0xcc>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	4413      	add	r3, r2
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 8007512:	2320      	movs	r3, #32
 8007514:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 8007516:	4a20      	ldr	r2, [pc, #128]	; (8007598 <UI_ADCThresholdDisplay+0xd0>)
 8007518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800751c:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	4619      	mov	r1, r3
 8007524:	481c      	ldr	r0, [pc, #112]	; (8007598 <UI_ADCThresholdDisplay+0xd0>)
 8007526:	f7fa f9b7 	bl	8001898 <DISP_DisplayText>

		point[0] = '~'+2;
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	461a      	mov	r2, r3
 8007532:	00d2      	lsls	r2, r2, #3
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	b2da      	uxtb	r2, r3
 8007538:	4b16      	ldr	r3, [pc, #88]	; (8007594 <UI_ADCThresholdDisplay+0xcc>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	4413      	add	r3, r2
 800753e:	b2db      	uxtb	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	4b14      	ldr	r3, [pc, #80]	; (8007598 <UI_ADCThresholdDisplay+0xd0>)
 8007546:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	4619      	mov	r1, r3
 800754e:	4812      	ldr	r0, [pc, #72]	; (8007598 <UI_ADCThresholdDisplay+0xd0>)
 8007550:	f7fa f9a2 	bl	8001898 <DISP_DisplayText>

		last_num = num;
 8007554:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <UI_ADCThresholdDisplay+0xc0>)
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	f1c3 030d 	rsb	r3, r3, #13
 8007560:	4a0e      	ldr	r2, [pc, #56]	; (800759c <UI_ADCThresholdDisplay+0xd4>)
 8007562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007566:	461a      	mov	r2, r3
 8007568:	f107 0310 	add.w	r3, r7, #16
 800756c:	490c      	ldr	r1, [pc, #48]	; (80075a0 <UI_ADCThresholdDisplay+0xd8>)
 800756e:	4618      	mov	r0, r3
 8007570:	f007 fa92 	bl	800ea98 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 8007574:	f107 0310 	add.w	r3, r7, #16
 8007578:	4619      	mov	r1, r3
 800757a:	480a      	ldr	r0, [pc, #40]	; (80075a4 <UI_ADCThresholdDisplay+0xdc>)
 800757c:	f7fa f98c 	bl	8001898 <DISP_DisplayText>

}
 8007580:	bf00      	nop
 8007582:	3728      	adds	r7, #40	; 0x28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	2000031c 	.word	0x2000031c
 800758c:	08011030 	.word	0x08011030
 8007590:	20000f78 	.word	0x20000f78
 8007594:	20000290 	.word	0x20000290
 8007598:	20000f80 	.word	0x20000f80
 800759c:	20000b5c 	.word	0x20000b5c
 80075a0:	0801103c 	.word	0x0801103c
 80075a4:	20000f68 	.word	0x20000f68

080075a8 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 80075ba:	f7fd fa9d 	bl	8004af8 <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 80075be:	7f7b      	ldrb	r3, [r7, #29]
 80075c0:	3301      	adds	r3, #1
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff ff7f 	bl	80074c8 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 80075ca:	7f7b      	ldrb	r3, [r7, #29]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff ff7b 	bl	80074c8 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 80075d2:	f001 fc03 	bl	8008ddc <HAL_GetTick>
 80075d6:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 80075d8:	7f7b      	ldrb	r3, [r7, #29]
 80075da:	f1c3 030d 	rsb	r3, r3, #13
 80075de:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 80075e0:	f7fe fa8e 	bl	8005b00 <UI_ShowSensor>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 80075ea:	7f3b      	ldrb	r3, [r7, #28]
 80075ec:	4a52      	ldr	r2, [pc, #328]	; (8007738 <UI_ADCThreshold+0x190>)
 80075ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f2:	461a      	mov	r2, r3
 80075f4:	463b      	mov	r3, r7
 80075f6:	4951      	ldr	r1, [pc, #324]	; (800773c <UI_ADCThreshold+0x194>)
 80075f8:	4618      	mov	r0, r3
 80075fa:	f007 fa4d 	bl	800ea98 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 80075fe:	463b      	mov	r3, r7
 8007600:	4619      	mov	r1, r3
 8007602:	484f      	ldr	r0, [pc, #316]	; (8007740 <UI_ADCThreshold+0x198>)
 8007604:	f7fa f948 	bl	8001898 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8007608:	f001 fbe8 	bl	8008ddc <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	7fba      	ldrb	r2, [r7, #30]
 8007614:	2a01      	cmp	r2, #1
 8007616:	d101      	bne.n	800761c <UI_ADCThreshold+0x74>
 8007618:	2214      	movs	r2, #20
 800761a:	e000      	b.n	800761e <UI_ADCThreshold+0x76>
 800761c:	2246      	movs	r2, #70	; 0x46
 800761e:	429a      	cmp	r2, r3
 8007620:	f200 8081 	bhi.w	8007726 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 8007624:	f7fe faea 	bl	8005bfc <UI_ReadButton>
 8007628:	4603      	mov	r3, r0
 800762a:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 800762c:	7ffa      	ldrb	r2, [r7, #31]
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	429a      	cmp	r2, r3
 8007632:	d102      	bne.n	800763a <UI_ADCThreshold+0x92>
 8007634:	7fbb      	ldrb	r3, [r7, #30]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d077      	beq.n	800772a <UI_ADCThreshold+0x182>
		bt = bt2;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 800763e:	7ffb      	ldrb	r3, [r7, #31]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <UI_ADCThreshold+0xa8>
			num_sen = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 800764c:	2302      	movs	r3, #2
 800764e:	e06e      	b.n	800772e <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8007650:	7ffb      	ldrb	r3, [r7, #31]
 8007652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 800765a:	f7fd fa71 	bl	8004b40 <Storage_SetADCThreshold>
			num_sen = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 8007662:	2307      	movs	r3, #7
 8007664:	e063      	b.n	800772e <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 8007670:	7f7b      	ldrb	r3, [r7, #29]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <UI_ADCThreshold+0xd6>
 8007676:	7f7b      	ldrb	r3, [r7, #29]
 8007678:	3b01      	subs	r3, #1
 800767a:	777b      	strb	r3, [r7, #29]
 800767c:	e001      	b.n	8007682 <UI_ADCThreshold+0xda>
 800767e:	230d      	movs	r3, #13
 8007680:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007686:	e7a0      	b.n	80075ca <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 8007688:	7ffb      	ldrb	r3, [r7, #31]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 8007692:	7f7b      	ldrb	r3, [r7, #29]
 8007694:	2b0d      	cmp	r3, #13
 8007696:	d003      	beq.n	80076a0 <UI_ADCThreshold+0xf8>
 8007698:	7f7b      	ldrb	r3, [r7, #29]
 800769a:	3301      	adds	r3, #1
 800769c:	777b      	strb	r3, [r7, #29]
 800769e:	e001      	b.n	80076a4 <UI_ADCThreshold+0xfc>
 80076a0:	2300      	movs	r3, #0
 80076a2:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80076a8:	e78f      	b.n	80075ca <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 80076aa:	7ffb      	ldrb	r3, [r7, #31]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d018      	beq.n	80076e6 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 80076b4:	7f3b      	ldrb	r3, [r7, #28]
 80076b6:	4a23      	ldr	r2, [pc, #140]	; (8007744 <UI_ADCThreshold+0x19c>)
 80076b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <UI_ADCThreshold+0x12c>
 80076c0:	7f3b      	ldrb	r3, [r7, #28]
 80076c2:	4a20      	ldr	r2, [pc, #128]	; (8007744 <UI_ADCThreshold+0x19c>)
 80076c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80076c8:	3a01      	subs	r2, #1
 80076ca:	b291      	uxth	r1, r2
 80076cc:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <UI_ADCThreshold+0x19c>)
 80076ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80076d2:	e005      	b.n	80076e0 <UI_ADCThreshold+0x138>
 80076d4:	7f3b      	ldrb	r3, [r7, #28]
 80076d6:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <UI_ADCThreshold+0x19c>)
 80076d8:	f640 71ff 	movw	r1, #4095	; 0xfff
 80076dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 80076e0:	2301      	movs	r3, #1
 80076e2:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80076e4:	e771      	b.n	80075ca <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 80076e6:	7ffb      	ldrb	r3, [r7, #31]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f43f af73 	beq.w	80075d8 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 80076f2:	7f3b      	ldrb	r3, [r7, #28]
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <UI_ADCThreshold+0x19c>)
 80076f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80076fe:	4293      	cmp	r3, r2
 8007700:	d009      	beq.n	8007716 <UI_ADCThreshold+0x16e>
 8007702:	7f3b      	ldrb	r3, [r7, #28]
 8007704:	4a0f      	ldr	r2, [pc, #60]	; (8007744 <UI_ADCThreshold+0x19c>)
 8007706:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800770a:	3201      	adds	r2, #1
 800770c:	b291      	uxth	r1, r2
 800770e:	4a0d      	ldr	r2, [pc, #52]	; (8007744 <UI_ADCThreshold+0x19c>)
 8007710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007714:	e004      	b.n	8007720 <UI_ADCThreshold+0x178>
 8007716:	7f3b      	ldrb	r3, [r7, #28]
 8007718:	4a0a      	ldr	r2, [pc, #40]	; (8007744 <UI_ADCThreshold+0x19c>)
 800771a:	2100      	movs	r1, #0
 800771c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8007720:	2301      	movs	r3, #1
 8007722:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007724:	e751      	b.n	80075ca <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8007726:	bf00      	nop
 8007728:	e756      	b.n	80075d8 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 800772a:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 800772c:	e754      	b.n	80075d8 <UI_ADCThreshold+0x30>
		}
	}
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000b40 	.word	0x20000b40
 800773c:	08011044 	.word	0x08011044
 8007740:	20000f6f 	.word	0x20000f6f
 8007744:	20000b5c 	.word	0x20000b5c

08007748 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 800774e:	f7fe fa55 	bl	8005bfc <UI_ReadButton>
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 8007756:	f7fc fe79 	bl	800444c <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 800775a:	f7fe f9d1 	bl	8005b00 <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 800775e:	f7fe fa4d 	bl	8005bfc <UI_ReadButton>
 8007762:	4603      	mov	r3, r0
 8007764:	461a      	mov	r2, r3
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	4293      	cmp	r3, r2
 800776a:	d02a      	beq.n	80077c2 <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 800776c:	f7fe fa46 	bl	8005bfc <UI_ReadButton>
 8007770:	4603      	mov	r3, r0
 8007772:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 800777e:	2000      	movs	r0, #0
 8007780:	f7fc fef6 	bl	8004570 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 8007784:	2302      	movs	r3, #2
 8007786:	e01e      	b.n	80077c6 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 8007792:	2000      	movs	r0, #0
 8007794:	f7fc feec 	bl	8004570 <SEN_EndAutoCalibration>
			return UI_SET;
 8007798:	2307      	movs	r3, #7
 800779a:	e014      	b.n	80077c6 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0d9      	beq.n	800775a <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 80077a6:	2001      	movs	r0, #1
 80077a8:	f7fc fee2 	bl	8004570 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 80077ac:	4908      	ldr	r1, [pc, #32]	; (80077d0 <UI_AutoCalib+0x88>)
 80077ae:	4809      	ldr	r0, [pc, #36]	; (80077d4 <UI_AutoCalib+0x8c>)
 80077b0:	f7fa f872 	bl	8001898 <DISP_DisplayText>
			Storage_SetADCThreshold();
 80077b4:	f7fd f9c4 	bl	8004b40 <Storage_SetADCThreshold>
			HAL_Delay(200);
 80077b8:	20c8      	movs	r0, #200	; 0xc8
 80077ba:	f001 fb1b 	bl	8008df4 <HAL_Delay>
			return UI_SET;
 80077be:	2307      	movs	r3, #7
 80077c0:	e001      	b.n	80077c6 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 80077c2:	bf00      	nop
		UI_ShowSensor();
 80077c4:	e7c9      	b.n	800775a <UI_AutoCalib+0x12>
		}
	}
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	0801104c 	.word	0x0801104c
 80077d4:	20000ed0 	.word	0x20000ed0

080077d8 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 80077de:	4b5e      	ldr	r3, [pc, #376]	; (8007958 <UI_Startup+0x180>)
 80077e0:	2209      	movs	r2, #9
 80077e2:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 80077e4:	f001 fafa 	bl	8008ddc <HAL_GetTick>
 80077e8:	4603      	mov	r3, r0
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	463b      	mov	r3, r7
 80077f0:	495a      	ldr	r1, [pc, #360]	; (800795c <UI_Startup+0x184>)
 80077f2:	4618      	mov	r0, r3
 80077f4:	f007 f950 	bl	800ea98 <siprintf>
	DISP_DisplayText(&startup, buff);
 80077f8:	463b      	mov	r3, r7
 80077fa:	4619      	mov	r1, r3
 80077fc:	4856      	ldr	r0, [pc, #344]	; (8007958 <UI_Startup+0x180>)
 80077fe:	f7fa f84b 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007802:	4b55      	ldr	r3, [pc, #340]	; (8007958 <UI_Startup+0x180>)
 8007804:	785a      	ldrb	r2, [r3, #1]
 8007806:	4b54      	ldr	r3, [pc, #336]	; (8007958 <UI_Startup+0x180>)
 8007808:	791b      	ldrb	r3, [r3, #4]
 800780a:	4413      	add	r3, r2
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4b52      	ldr	r3, [pc, #328]	; (8007958 <UI_Startup+0x180>)
 8007810:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8007812:	2001      	movs	r0, #1
 8007814:	f001 faee 	bl	8008df4 <HAL_Delay>
	if(!Storage_Init()) {
 8007818:	f7fd f908 	bl	8004a2c <Storage_Init>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d11d      	bne.n	800785e <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 8007822:	f001 fadb 	bl	8008ddc <HAL_GetTick>
 8007826:	4603      	mov	r3, r0
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	463b      	mov	r3, r7
 800782e:	494c      	ldr	r1, [pc, #304]	; (8007960 <UI_Startup+0x188>)
 8007830:	4618      	mov	r0, r3
 8007832:	f007 f931 	bl	800ea98 <siprintf>
		DISP_DisplayText(&startup, buff);
 8007836:	463b      	mov	r3, r7
 8007838:	4619      	mov	r1, r3
 800783a:	4847      	ldr	r0, [pc, #284]	; (8007958 <UI_Startup+0x180>)
 800783c:	f7fa f82c 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8007840:	4b45      	ldr	r3, [pc, #276]	; (8007958 <UI_Startup+0x180>)
 8007842:	785a      	ldrb	r2, [r3, #1]
 8007844:	4b44      	ldr	r3, [pc, #272]	; (8007958 <UI_Startup+0x180>)
 8007846:	791b      	ldrb	r3, [r3, #4]
 8007848:	4413      	add	r3, r2
 800784a:	b2da      	uxtb	r2, r3
 800784c:	4b42      	ldr	r3, [pc, #264]	; (8007958 <UI_Startup+0x180>)
 800784e:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 8007850:	f7fd f89e 	bl	8004990 <Storage_ResetMemory>
		} while(!Storage_Init());
 8007854:	f7fd f8ea 	bl	8004a2c <Storage_Init>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f8      	beq.n	8007850 <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 800785e:	f001 fabd 	bl	8008ddc <HAL_GetTick>
 8007862:	4603      	mov	r3, r0
 8007864:	b29b      	uxth	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	463b      	mov	r3, r7
 800786a:	493e      	ldr	r1, [pc, #248]	; (8007964 <UI_Startup+0x18c>)
 800786c:	4618      	mov	r0, r3
 800786e:	f007 f913 	bl	800ea98 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007872:	463b      	mov	r3, r7
 8007874:	4619      	mov	r1, r3
 8007876:	4838      	ldr	r0, [pc, #224]	; (8007958 <UI_Startup+0x180>)
 8007878:	f7fa f80e 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <UI_Startup+0x180>)
 800787e:	785a      	ldrb	r2, [r3, #1]
 8007880:	4b35      	ldr	r3, [pc, #212]	; (8007958 <UI_Startup+0x180>)
 8007882:	791b      	ldrb	r3, [r3, #4]
 8007884:	4413      	add	r3, r2
 8007886:	b2da      	uxtb	r2, r3
 8007888:	4b33      	ldr	r3, [pc, #204]	; (8007958 <UI_Startup+0x180>)
 800788a:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 800788c:	f001 faa6 	bl	8008ddc <HAL_GetTick>
 8007890:	4603      	mov	r3, r0
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	463b      	mov	r3, r7
 8007898:	4933      	ldr	r1, [pc, #204]	; (8007968 <UI_Startup+0x190>)
 800789a:	4618      	mov	r0, r3
 800789c:	f007 f8fc 	bl	800ea98 <siprintf>
	DISP_DisplayText(&startup, buff);
 80078a0:	463b      	mov	r3, r7
 80078a2:	4619      	mov	r1, r3
 80078a4:	482c      	ldr	r0, [pc, #176]	; (8007958 <UI_Startup+0x180>)
 80078a6:	f7f9 fff7 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80078aa:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <UI_Startup+0x180>)
 80078ac:	785a      	ldrb	r2, [r3, #1]
 80078ae:	4b2a      	ldr	r3, [pc, #168]	; (8007958 <UI_Startup+0x180>)
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	4b28      	ldr	r3, [pc, #160]	; (8007958 <UI_Startup+0x180>)
 80078b8:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 80078ba:	2001      	movs	r0, #1
 80078bc:	f001 fa9a 	bl	8008df4 <HAL_Delay>
	if(!Storage_PlanInit()) {
 80078c0:	f7fd f8ec 	bl	8004a9c <Storage_PlanInit>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d11d      	bne.n	8007906 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 80078ca:	f001 fa87 	bl	8008ddc <HAL_GetTick>
 80078ce:	4603      	mov	r3, r0
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	463b      	mov	r3, r7
 80078d6:	4925      	ldr	r1, [pc, #148]	; (800796c <UI_Startup+0x194>)
 80078d8:	4618      	mov	r0, r3
 80078da:	f007 f8dd 	bl	800ea98 <siprintf>
		DISP_DisplayText(&startup, buff);
 80078de:	463b      	mov	r3, r7
 80078e0:	4619      	mov	r1, r3
 80078e2:	481d      	ldr	r0, [pc, #116]	; (8007958 <UI_Startup+0x180>)
 80078e4:	f7f9 ffd8 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 80078e8:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <UI_Startup+0x180>)
 80078ea:	785a      	ldrb	r2, [r3, #1]
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <UI_Startup+0x180>)
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b18      	ldr	r3, [pc, #96]	; (8007958 <UI_Startup+0x180>)
 80078f6:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 80078f8:	f7fc ffd4 	bl	80048a4 <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 80078fc:	f7fd f8ce 	bl	8004a9c <Storage_PlanInit>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f8      	beq.n	80078f8 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <UI_Startup+0x198>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd f93c 	bl	8004b88 <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 8007910:	f001 fa64 	bl	8008ddc <HAL_GetTick>
 8007914:	4603      	mov	r3, r0
 8007916:	b29b      	uxth	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	463b      	mov	r3, r7
 800791c:	4915      	ldr	r1, [pc, #84]	; (8007974 <UI_Startup+0x19c>)
 800791e:	4618      	mov	r0, r3
 8007920:	f007 f8ba 	bl	800ea98 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007924:	463b      	mov	r3, r7
 8007926:	4619      	mov	r1, r3
 8007928:	480b      	ldr	r0, [pc, #44]	; (8007958 <UI_Startup+0x180>)
 800792a:	f7f9 ffb5 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <UI_Startup+0x180>)
 8007930:	785a      	ldrb	r2, [r3, #1]
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <UI_Startup+0x180>)
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	4413      	add	r3, r2
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <UI_Startup+0x180>)
 800793c:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 800793e:	bf00      	nop
 8007940:	f7fe f95c 	bl	8005bfc <UI_ReadButton>
 8007944:	4603      	mov	r3, r0
 8007946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f8      	bne.n	8007940 <UI_Startup+0x168>

	return UI_HOMESCREEN;
 800794e:	2302      	movs	r3, #2
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000f88 	.word	0x20000f88
 800795c:	08011058 	.word	0x08011058
 8007960:	0801106c 	.word	0x0801106c
 8007964:	08011080 	.word	0x08011080
 8007968:	08011090 	.word	0x08011090
 800796c:	080110a4 	.word	0x080110a4
 8007970:	20000cb1 	.word	0x20000cb1
 8007974:	080110b8 	.word	0x080110b8

08007978 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 800797e:	4b2f      	ldr	r3, [pc, #188]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 8007980:	2203      	movs	r2, #3
 8007982:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 8007984:	4b2d      	ldr	r3, [pc, #180]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 8007986:	220d      	movs	r2, #13
 8007988:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 800798a:	4b2c      	ldr	r3, [pc, #176]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 800798c:	2278      	movs	r2, #120	; 0x78
 800798e:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 8007990:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 8007992:	220b      	movs	r2, #11
 8007994:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 8007996:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 8007998:	2200      	movs	r2, #0
 800799a:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 800799c:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 800799e:	2202      	movs	r2, #2
 80079a0:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 80079a2:	4b26      	ldr	r3, [pc, #152]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 80079a4:	2202      	movs	r2, #2
 80079a6:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 80079a8:	2301      	movs	r3, #1
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	e027      	b.n	80079fe <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 80079ae:	4923      	ldr	r1, [pc, #140]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	440b      	add	r3, r1
 80079ba:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 80079bc:	6810      	ldr	r0, [r2, #0]
 80079be:	6018      	str	r0, [r3, #0]
 80079c0:	8891      	ldrh	r1, [r2, #4]
 80079c2:	7992      	ldrb	r2, [r2, #6]
 80079c4:	8099      	strh	r1, [r3, #4]
 80079c6:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	1e5a      	subs	r2, r3, #1
 80079cc:	491b      	ldr	r1, [pc, #108]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 80079ce:	4613      	mov	r3, r2
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	440b      	add	r3, r1
 80079d6:	3301      	adds	r3, #1
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	4b18      	ldr	r3, [pc, #96]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 80079dc:	791b      	ldrb	r3, [r3, #4]
 80079de:	4413      	add	r3, r2
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	3302      	adds	r3, #2
 80079e4:	b2d8      	uxtb	r0, r3
 80079e6:	4915      	ldr	r1, [pc, #84]	; (8007a3c <UI_CPDisplayInit+0xc4>)
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	440b      	add	r3, r1
 80079f2:	3301      	adds	r3, #1
 80079f4:	4602      	mov	r2, r0
 80079f6:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3301      	adds	r3, #1
 80079fc:	607b      	str	r3, [r7, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	ddd4      	ble.n	80079ae <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a12:	227f      	movs	r2, #127	; 0x7f
 8007a14:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 8007a16:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a18:	220a      	movs	r2, #10
 8007a1a:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 8007a1c:	4b08      	ldr	r3, [pc, #32]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a24:	2202      	movs	r2, #2
 8007a26:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <UI_CPDisplayInit+0xc8>)
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	719a      	strb	r2, [r3, #6]
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000f90 	.word	0x20000f90
 8007a40:	20000fac 	.word	0x20000fac

08007a44 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08a      	sub	sp, #40	; 0x28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	4a31      	ldr	r2, [pc, #196]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007a54:	f992 2000 	ldrsb.w	r2, [r2]
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	dd06      	ble.n	8007a6c <UI_CPDisplay+0x28>
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	3b03      	subs	r3, #3
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	b25a      	sxtb	r2, r3
 8007a66:	4b2c      	ldr	r3, [pc, #176]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e009      	b.n	8007a80 <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007a70:	f992 2000 	ldrsb.w	r2, [r2]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	da03      	bge.n	8007a80 <UI_CPDisplay+0x3c>
 8007a78:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007a7c:	4b26      	ldr	r3, [pc, #152]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007a7e:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007a80:	2300      	movs	r3, #0
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
 8007a84:	e03f      	b.n	8007b06 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8007a86:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007a88:	f993 3000 	ldrsb.w	r3, [r3]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	441a      	add	r2, r3
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d109      	bne.n	8007aac <UI_CPDisplay+0x68>
 8007a98:	4920      	ldr	r1, [pc, #128]	; (8007b1c <UI_CPDisplay+0xd8>)
 8007a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e008      	b.n	8007abe <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007aac:	491b      	ldr	r1, [pc, #108]	; (8007b1c <UI_CPDisplay+0xd8>)
 8007aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	3302      	adds	r3, #2
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 8007abe:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	441a      	add	r2, r3
 8007aca:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <UI_CPDisplay+0xd4>)
 8007acc:	f993 3000 	ldrsb.w	r3, [r3]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	440b      	add	r3, r1
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	440b      	add	r3, r1
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	f107 000c 	add.w	r0, r7, #12
 8007ae2:	490f      	ldr	r1, [pc, #60]	; (8007b20 <UI_CPDisplay+0xdc>)
 8007ae4:	f006 ffd8 	bl	800ea98 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8007ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <UI_CPDisplay+0xd8>)
 8007af2:	4413      	add	r3, r2
 8007af4:	f107 020c 	add.w	r2, r7, #12
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7f9 fecc 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	3301      	adds	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	ddbc      	ble.n	8007a86 <UI_CPDisplay+0x42>
	}
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3728      	adds	r7, #40	; 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000fbc 	.word	0x20000fbc
 8007b1c:	20000f90 	.word	0x20000f90
 8007b20:	080110c8 	.word	0x080110c8

08007b24 <UI_CP>:

UI_Menu_Lists UI_CP() {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 8007b32:	4949      	ldr	r1, [pc, #292]	; (8007c58 <UI_CP+0x134>)
 8007b34:	4849      	ldr	r0, [pc, #292]	; (8007c5c <UI_CP+0x138>)
 8007b36:	f7f9 feaf 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 8007b3a:	79bb      	ldrb	r3, [r7, #6]
 8007b3c:	4948      	ldr	r1, [pc, #288]	; (8007c60 <UI_CP+0x13c>)
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff ff80 	bl	8007a44 <UI_CPDisplay>
	tick = HAL_GetTick();
 8007b44:	f001 f94a 	bl	8008ddc <HAL_GetTick>
 8007b48:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007b4a:	f001 f947 	bl	8008ddc <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b45      	cmp	r3, #69	; 0x45
 8007b56:	d977      	bls.n	8007c48 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 8007b58:	f7fe f850 	bl	8005bfc <UI_ReadButton>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d072      	beq.n	8007c4c <UI_CP+0x128>
		bt = UI_ReadButton();
 8007b66:	f7fe f849 	bl	8005bfc <UI_ReadButton>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8007b78:	79bb      	ldrb	r3, [r7, #6]
 8007b7a:	2b13      	cmp	r3, #19
 8007b7c:	d102      	bne.n	8007b84 <UI_CP+0x60>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	71bb      	strb	r3, [r7, #6]
 8007b82:	e7da      	b.n	8007b3a <UI_CP+0x16>
 8007b84:	79bb      	ldrb	r3, [r7, #6]
 8007b86:	3301      	adds	r3, #1
 8007b88:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007b8a:	e7d6      	b.n	8007b3a <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 8007b96:	79bb      	ldrb	r3, [r7, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <UI_CP+0x7e>
 8007b9c:	2313      	movs	r3, #19
 8007b9e:	71bb      	strb	r3, [r7, #6]
 8007ba0:	e7cb      	b.n	8007b3a <UI_CP+0x16>
 8007ba2:	79bb      	ldrb	r3, [r7, #6]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007ba8:	e7c7      	b.n	8007b3a <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d016      	beq.n	8007be2 <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8007bb4:	79bb      	ldrb	r3, [r7, #6]
 8007bb6:	4a2b      	ldr	r2, [pc, #172]	; (8007c64 <UI_CP+0x140>)
 8007bb8:	4413      	add	r3, r2
 8007bba:	789b      	ldrb	r3, [r3, #2]
 8007bbc:	2b63      	cmp	r3, #99	; 0x63
 8007bbe:	d105      	bne.n	8007bcc <UI_CP+0xa8>
 8007bc0:	79bb      	ldrb	r3, [r7, #6]
 8007bc2:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <UI_CP+0x140>)
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	709a      	strb	r2, [r3, #2]
 8007bca:	e7b6      	b.n	8007b3a <UI_CP+0x16>
 8007bcc:	79bb      	ldrb	r3, [r7, #6]
 8007bce:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <UI_CP+0x140>)
 8007bd0:	441a      	add	r2, r3
 8007bd2:	7892      	ldrb	r2, [r2, #2]
 8007bd4:	3201      	adds	r2, #1
 8007bd6:	b2d1      	uxtb	r1, r2
 8007bd8:	4a22      	ldr	r2, [pc, #136]	; (8007c64 <UI_CP+0x140>)
 8007bda:	4413      	add	r3, r2
 8007bdc:	460a      	mov	r2, r1
 8007bde:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8007be0:	e7ab      	b.n	8007b3a <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d016      	beq.n	8007c1a <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 8007bec:	79bb      	ldrb	r3, [r7, #6]
 8007bee:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <UI_CP+0x140>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	789b      	ldrb	r3, [r3, #2]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <UI_CP+0xe0>
 8007bf8:	79bb      	ldrb	r3, [r7, #6]
 8007bfa:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <UI_CP+0x140>)
 8007bfc:	4413      	add	r3, r2
 8007bfe:	2263      	movs	r2, #99	; 0x63
 8007c00:	709a      	strb	r2, [r3, #2]
 8007c02:	e79a      	b.n	8007b3a <UI_CP+0x16>
 8007c04:	79bb      	ldrb	r3, [r7, #6]
 8007c06:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <UI_CP+0x140>)
 8007c08:	441a      	add	r2, r3
 8007c0a:	7892      	ldrb	r2, [r2, #2]
 8007c0c:	3a01      	subs	r2, #1
 8007c0e:	b2d1      	uxtb	r1, r2
 8007c10:	4a14      	ldr	r2, [pc, #80]	; (8007c64 <UI_CP+0x140>)
 8007c12:	4413      	add	r3, r2
 8007c14:	460a      	mov	r2, r1
 8007c16:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8007c18:	e78f      	b.n	8007b3a <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <UI_CP+0x104>
			return UI_HOMESCREEN;
 8007c24:	2302      	movs	r3, #2
 8007c26:	e013      	b.n	8007c50 <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d08b      	beq.n	8007b4a <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 8007c32:	490d      	ldr	r1, [pc, #52]	; (8007c68 <UI_CP+0x144>)
 8007c34:	480d      	ldr	r0, [pc, #52]	; (8007c6c <UI_CP+0x148>)
 8007c36:	f7f9 fe2f 	bl	8001898 <DISP_DisplayText>
			Storage_SetCheckpoint();
 8007c3a:	f7fd f827 	bl	8004c8c <Storage_SetCheckpoint>
			HAL_Delay(200);
 8007c3e:	20c8      	movs	r0, #200	; 0xc8
 8007c40:	f001 f8d8 	bl	8008df4 <HAL_Delay>
			return UI_SET;
 8007c44:	2307      	movs	r3, #7
 8007c46:	e003      	b.n	8007c50 <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007c48:	bf00      	nop
 8007c4a:	e77e      	b.n	8007b4a <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 8007c4c:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007c4e:	e77c      	b.n	8007b4a <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	080110d8 	.word	0x080110d8
 8007c5c:	20000fac 	.word	0x20000fac
 8007c60:	20000d3e 	.word	0x20000d3e
 8007c64:	20000d3c 	.word	0x20000d3c
 8007c68:	0801104c 	.word	0x0801104c
 8007c6c:	20000ed0 	.word	0x20000ed0

08007c70 <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	4a2c      	ldr	r2, [pc, #176]	; (8007d30 <UI_PlanSelectDisplay+0xc0>)
 8007c7e:	f992 2000 	ldrsb.w	r2, [r2]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	dd06      	ble.n	8007c96 <UI_PlanSelectDisplay+0x26>
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	3b03      	subs	r3, #3
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	b25a      	sxtb	r2, r3
 8007c90:	4b27      	ldr	r3, [pc, #156]	; (8007d30 <UI_PlanSelectDisplay+0xc0>)
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	e009      	b.n	8007caa <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	4a25      	ldr	r2, [pc, #148]	; (8007d30 <UI_PlanSelectDisplay+0xc0>)
 8007c9a:	f992 2000 	ldrsb.w	r2, [r2]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	da03      	bge.n	8007caa <UI_PlanSelectDisplay+0x3a>
 8007ca2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007ca6:	4b22      	ldr	r3, [pc, #136]	; (8007d30 <UI_PlanSelectDisplay+0xc0>)
 8007ca8:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007caa:	2300      	movs	r3, #0
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
 8007cae:	e036      	b.n	8007d1e <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	; (8007d30 <UI_PlanSelectDisplay+0xc0>)
 8007cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	441a      	add	r2, r3
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d109      	bne.n	8007cd6 <UI_PlanSelectDisplay+0x66>
 8007cc2:	491c      	ldr	r1, [pc, #112]	; (8007d34 <UI_PlanSelectDisplay+0xc4>)
 8007cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	440b      	add	r3, r1
 8007cce:	3302      	adds	r3, #2
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	e008      	b.n	8007ce8 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007cd6:	4917      	ldr	r1, [pc, #92]	; (8007d34 <UI_PlanSelectDisplay+0xc4>)
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <UI_PlanSelectDisplay+0xc0>)
 8007cea:	f993 3000 	ldrsb.w	r3, [r3]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	441a      	add	r2, r3
 8007cf4:	f107 030c 	add.w	r3, r7, #12
 8007cf8:	490f      	ldr	r1, [pc, #60]	; (8007d38 <UI_PlanSelectDisplay+0xc8>)
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f006 fecc 	bl	800ea98 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8007d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	4a0a      	ldr	r2, [pc, #40]	; (8007d34 <UI_PlanSelectDisplay+0xc4>)
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f107 020c 	add.w	r2, r7, #12
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7f9 fdc0 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	ddc5      	ble.n	8007cb0 <UI_PlanSelectDisplay+0x40>
	}
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	3728      	adds	r7, #40	; 0x28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000fbd 	.word	0x20000fbd
 8007d34:	20000f90 	.word	0x20000f90
 8007d38:	080110e4 	.word	0x080110e4

08007d3c <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 8007d4a:	494f      	ldr	r1, [pc, #316]	; (8007e88 <UI_PlanSelect+0x14c>)
 8007d4c:	484f      	ldr	r0, [pc, #316]	; (8007e8c <UI_PlanSelect+0x150>)
 8007d4e:	f7f9 fda3 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 8007d52:	79bb      	ldrb	r3, [r7, #6]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff ff8b 	bl	8007c70 <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 8007d5a:	f001 f83f 	bl	8008ddc <HAL_GetTick>
 8007d5e:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007d60:	f001 f83c 	bl	8008ddc <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b45      	cmp	r3, #69	; 0x45
 8007d6c:	f240 8083 	bls.w	8007e76 <UI_PlanSelect+0x13a>
		if(bt == UI_ReadButton()) continue;
 8007d70:	f7fd ff44 	bl	8005bfc <UI_ReadButton>
 8007d74:	4603      	mov	r3, r0
 8007d76:	461a      	mov	r2, r3
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d07d      	beq.n	8007e7a <UI_PlanSelect+0x13e>
		bt = UI_ReadButton();
 8007d7e:	f7fd ff3d 	bl	8005bfc <UI_ReadButton>
 8007d82:	4603      	mov	r3, r0
 8007d84:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d009      	beq.n	8007da4 <UI_PlanSelect+0x68>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8007d90:	79bb      	ldrb	r3, [r7, #6]
 8007d92:	2b0e      	cmp	r3, #14
 8007d94:	d102      	bne.n	8007d9c <UI_PlanSelect+0x60>
 8007d96:	2300      	movs	r3, #0
 8007d98:	71bb      	strb	r3, [r7, #6]
 8007d9a:	e7da      	b.n	8007d52 <UI_PlanSelect+0x16>
 8007d9c:	79bb      	ldrb	r3, [r7, #6]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007da2:	e7d6      	b.n	8007d52 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d009      	beq.n	8007dc2 <UI_PlanSelect+0x86>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 8007dae:	79bb      	ldrb	r3, [r7, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <UI_PlanSelect+0x7e>
 8007db4:	230e      	movs	r3, #14
 8007db6:	71bb      	strb	r3, [r7, #6]
 8007db8:	e7cb      	b.n	8007d52 <UI_PlanSelect+0x16>
 8007dba:	79bb      	ldrb	r3, [r7, #6]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007dc0:	e7c7      	b.n	8007d52 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d029      	beq.n	8007e20 <UI_PlanSelect+0xe4>
			DISP_DisplayText(&short_message, "Copy to this Plan?");
 8007dcc:	4930      	ldr	r1, [pc, #192]	; (8007e90 <UI_PlanSelect+0x154>)
 8007dce:	4831      	ldr	r0, [pc, #196]	; (8007e94 <UI_PlanSelect+0x158>)
 8007dd0:	f7f9 fd62 	bl	8001898 <DISP_DisplayText>
			while(1) {
				if(bt == UI_ReadButton()) continue;
 8007dd4:	f7fd ff12 	bl	8005bfc <UI_ReadButton>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01c      	beq.n	8007e1c <UI_PlanSelect+0xe0>
				bt = UI_ReadButton();
 8007de2:	f7fd ff0b 	bl	8005bfc <UI_ReadButton>
 8007de6:	4603      	mov	r3, r0
 8007de8:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_OK_PRESS) {
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00d      	beq.n	8007e10 <UI_PlanSelect+0xd4>
					DISP_DisplayText(&short_message, "Copying...");
 8007df4:	4928      	ldr	r1, [pc, #160]	; (8007e98 <UI_PlanSelect+0x15c>)
 8007df6:	4827      	ldr	r0, [pc, #156]	; (8007e94 <UI_PlanSelect+0x158>)
 8007df8:	f7f9 fd4e 	bl	8001898 <DISP_DisplayText>
					Storage_CopyPlan(num_menu);
 8007dfc:	79bb      	ldrb	r3, [r7, #6]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fd f9e2 	bl	80051c8 <Storage_CopyPlan>
					DISP_DisplayText(&short_message, "Copy done!");
 8007e04:	4925      	ldr	r1, [pc, #148]	; (8007e9c <UI_PlanSelect+0x160>)
 8007e06:	4823      	ldr	r0, [pc, #140]	; (8007e94 <UI_PlanSelect+0x158>)
 8007e08:	f7f9 fd46 	bl	8001898 <DISP_DisplayText>
					break;
 8007e0c:	bf00      	nop
				}
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
					goto ui_cp;
				}
			}
			goto ui_cp;
 8007e0e:	e7a0      	b.n	8007d52 <UI_PlanSelect+0x16>
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0dc      	beq.n	8007dd4 <UI_PlanSelect+0x98>
					goto ui_cp;
 8007e1a:	e79a      	b.n	8007d52 <UI_PlanSelect+0x16>
				if(bt == UI_ReadButton()) continue;
 8007e1c:	bf00      	nop
 8007e1e:	e7d9      	b.n	8007dd4 <UI_PlanSelect+0x98>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <UI_PlanSelect+0xf2>
			return UI_HOMESCREEN;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e027      	b.n	8007e7e <UI_PlanSelect+0x142>
		}
		else if(bt & SW_OK_PRESS) {
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d093      	beq.n	8007d60 <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8007e38:	4919      	ldr	r1, [pc, #100]	; (8007ea0 <UI_PlanSelect+0x164>)
 8007e3a:	4816      	ldr	r0, [pc, #88]	; (8007e94 <UI_PlanSelect+0x158>)
 8007e3c:	f7f9 fd2c 	bl	8001898 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8007e40:	79bb      	ldrb	r3, [r7, #6]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fc fea0 	bl	8004b88 <Storage_GetPlan>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <UI_PlanSelect+0x128>
				DISP_DisplayText(&short_message, "Reseting...");
 8007e4e:	4915      	ldr	r1, [pc, #84]	; (8007ea4 <UI_PlanSelect+0x168>)
 8007e50:	4810      	ldr	r0, [pc, #64]	; (8007e94 <UI_PlanSelect+0x158>)
 8007e52:	f7f9 fd21 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8007e56:	f7fc fd25 	bl	80048a4 <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8007e5a:	f7fc fe1f 	bl	8004a9c <Storage_PlanInit>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0f8      	beq.n	8007e56 <UI_PlanSelect+0x11a>
			}
			DISP_DisplayText(&short_message, "Done!");
 8007e64:	4910      	ldr	r1, [pc, #64]	; (8007ea8 <UI_PlanSelect+0x16c>)
 8007e66:	480b      	ldr	r0, [pc, #44]	; (8007e94 <UI_PlanSelect+0x158>)
 8007e68:	f7f9 fd16 	bl	8001898 <DISP_DisplayText>
			HAL_Delay(200);
 8007e6c:	20c8      	movs	r0, #200	; 0xc8
 8007e6e:	f000 ffc1 	bl	8008df4 <HAL_Delay>
			return UI_HOMESCREEN;
 8007e72:	2302      	movs	r3, #2
 8007e74:	e003      	b.n	8007e7e <UI_PlanSelect+0x142>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007e76:	bf00      	nop
 8007e78:	e772      	b.n	8007d60 <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8007e7a:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007e7c:	e770      	b.n	8007d60 <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	080110ec 	.word	0x080110ec
 8007e8c:	20000fac 	.word	0x20000fac
 8007e90:	080110f8 	.word	0x080110f8
 8007e94:	20000ed0 	.word	0x20000ed0
 8007e98:	0801110c 	.word	0x0801110c
 8007e9c:	08011118 	.word	0x08011118
 8007ea0:	08011124 	.word	0x08011124
 8007ea4:	08011130 	.word	0x08011130
 8007ea8:	0801113c 	.word	0x0801113c

08007eac <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	4a29      	ldr	r2, [pc, #164]	; (8007f60 <UI_MemSettingDisplay+0xb4>)
 8007eba:	f992 2000 	ldrsb.w	r2, [r2]
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	dd06      	ble.n	8007ed2 <UI_MemSettingDisplay+0x26>
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	3b03      	subs	r3, #3
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	b25a      	sxtb	r2, r3
 8007ecc:	4b24      	ldr	r3, [pc, #144]	; (8007f60 <UI_MemSettingDisplay+0xb4>)
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e009      	b.n	8007ee6 <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	4a22      	ldr	r2, [pc, #136]	; (8007f60 <UI_MemSettingDisplay+0xb4>)
 8007ed6:	f992 2000 	ldrsb.w	r2, [r2]
 8007eda:	4293      	cmp	r3, r2
 8007edc:	da03      	bge.n	8007ee6 <UI_MemSettingDisplay+0x3a>
 8007ede:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <UI_MemSettingDisplay+0xb4>)
 8007ee4:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	e031      	b.n	8007f50 <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8007eec:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <UI_MemSettingDisplay+0xb4>)
 8007eee:	f993 3000 	ldrsb.w	r3, [r3]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	441a      	add	r2, r3
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d109      	bne.n	8007f12 <UI_MemSettingDisplay+0x66>
 8007efe:	4919      	ldr	r1, [pc, #100]	; (8007f64 <UI_MemSettingDisplay+0xb8>)
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	440b      	add	r3, r1
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
 8007f10:	e008      	b.n	8007f24 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8007f12:	4914      	ldr	r1, [pc, #80]	; (8007f64 <UI_MemSettingDisplay+0xb8>)
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4613      	mov	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3302      	adds	r3, #2
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4613      	mov	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <UI_MemSettingDisplay+0xb8>)
 8007f2e:	441a      	add	r2, r3
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <UI_MemSettingDisplay+0xb4>)
 8007f32:	f993 3000 	ldrsb.w	r3, [r3]
 8007f36:	4619      	mov	r1, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	440b      	add	r3, r1
 8007f3c:	490a      	ldr	r1, [pc, #40]	; (8007f68 <UI_MemSettingDisplay+0xbc>)
 8007f3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7f9 fca7 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	ddca      	ble.n	8007eec <UI_MemSettingDisplay+0x40>
	}
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000fbe 	.word	0x20000fbe
 8007f64:	20000f04 	.word	0x20000f04
 8007f68:	2000030c 	.word	0x2000030c

08007f6c <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 8007f76:	495b      	ldr	r1, [pc, #364]	; (80080e4 <UI_MemSetting+0x178>)
 8007f78:	485b      	ldr	r0, [pc, #364]	; (80080e8 <UI_MemSetting+0x17c>)
 8007f7a:	f7f9 fc8d 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 8007f7e:	4b5b      	ldr	r3, [pc, #364]	; (80080ec <UI_MemSetting+0x180>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff ff92 	bl	8007eac <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8007f88:	f000 ff28 	bl	8008ddc <HAL_GetTick>
 8007f8c:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007f8e:	f000 ff25 	bl	8008ddc <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b45      	cmp	r3, #69	; 0x45
 8007f9a:	f240 8097 	bls.w	80080cc <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 8007f9e:	f7fd fe2d 	bl	8005bfc <UI_ReadButton>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	f000 8091 	beq.w	80080d0 <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 8007fae:	f7fd fe25 	bl	8005bfc <UI_ReadButton>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00e      	beq.n	8007fde <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8007fc0:	4b4a      	ldr	r3, [pc, #296]	; (80080ec <UI_MemSetting+0x180>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d103      	bne.n	8007fd0 <UI_MemSetting+0x64>
 8007fc8:	4b48      	ldr	r3, [pc, #288]	; (80080ec <UI_MemSetting+0x180>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e7d6      	b.n	8007f7e <UI_MemSetting+0x12>
 8007fd0:	4b46      	ldr	r3, [pc, #280]	; (80080ec <UI_MemSetting+0x180>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	4b44      	ldr	r3, [pc, #272]	; (80080ec <UI_MemSetting+0x180>)
 8007fda:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8007fdc:	e7cf      	b.n	8007f7e <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00e      	beq.n	8008006 <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 8007fe8:	4b40      	ldr	r3, [pc, #256]	; (80080ec <UI_MemSetting+0x180>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <UI_MemSetting+0x8c>
 8007ff0:	4b3e      	ldr	r3, [pc, #248]	; (80080ec <UI_MemSetting+0x180>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e7c2      	b.n	8007f7e <UI_MemSetting+0x12>
 8007ff8:	4b3c      	ldr	r3, [pc, #240]	; (80080ec <UI_MemSetting+0x180>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	4b3a      	ldr	r3, [pc, #232]	; (80080ec <UI_MemSetting+0x180>)
 8008002:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8008004:	e7bb      	b.n	8007f7e <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d004      	beq.n	800801a <UI_MemSetting+0xae>
			num_menu = 0;
 8008010:	4b36      	ldr	r3, [pc, #216]	; (80080ec <UI_MemSetting+0x180>)
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8008016:	2302      	movs	r3, #2
 8008018:	e060      	b.n	80080dc <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	f003 0308 	and.w	r3, r3, #8
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <UI_MemSetting+0xc2>
			num_menu = 0;
 8008024:	4b31      	ldr	r3, [pc, #196]	; (80080ec <UI_MemSetting+0x180>)
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 800802a:	2307      	movs	r3, #7
 800802c:	e056      	b.n	80080dc <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 800802e:	4b2f      	ldr	r3, [pc, #188]	; (80080ec <UI_MemSetting+0x180>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d027      	beq.n	8008086 <UI_MemSetting+0x11a>
 8008036:	2b03      	cmp	r3, #3
 8008038:	dca9      	bgt.n	8007f8e <UI_MemSetting+0x22>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <UI_MemSetting+0xd8>
 800803e:	2b01      	cmp	r3, #1
 8008040:	d018      	beq.n	8008074 <UI_MemSetting+0x108>
 8008042:	e04a      	b.n	80080da <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d042      	beq.n	80080d4 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 800804e:	4928      	ldr	r1, [pc, #160]	; (80080f0 <UI_MemSetting+0x184>)
 8008050:	4828      	ldr	r0, [pc, #160]	; (80080f4 <UI_MemSetting+0x188>)
 8008052:	f7f9 fc21 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008056:	f7fc fc25 	bl	80048a4 <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 800805a:	f7fc fd1f 	bl	8004a9c <Storage_PlanInit>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0f8      	beq.n	8008056 <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 8008064:	4924      	ldr	r1, [pc, #144]	; (80080f8 <UI_MemSetting+0x18c>)
 8008066:	4823      	ldr	r0, [pc, #140]	; (80080f4 <UI_MemSetting+0x188>)
 8008068:	f7f9 fc16 	bl	8001898 <DISP_DisplayText>
				HAL_Delay(200);
 800806c:	20c8      	movs	r0, #200	; 0xc8
 800806e:	f000 fec1 	bl	8008df4 <HAL_Delay>
				goto ui_mem;
 8008072:	e784      	b.n	8007f7e <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d02c      	beq.n	80080d8 <UI_MemSetting+0x16c>
				num_menu = 3;
 800807e:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <UI_MemSetting+0x180>)
 8008080:	2203      	movs	r2, #3
 8008082:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008084:	e028      	b.n	80080d8 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 8008086:	491d      	ldr	r1, [pc, #116]	; (80080fc <UI_MemSetting+0x190>)
 8008088:	481d      	ldr	r0, [pc, #116]	; (8008100 <UI_MemSetting+0x194>)
 800808a:	f7f9 fc05 	bl	8001898 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 800808e:	f7fd fdb5 	bl	8005bfc <UI_ReadButton>
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <UI_MemSetting+0x13c>
					num_menu = 1;
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <UI_MemSetting+0x180>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 80080a6:	e76a      	b.n	8007f7e <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0ed      	beq.n	800808e <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 80080b2:	4914      	ldr	r1, [pc, #80]	; (8008104 <UI_MemSetting+0x198>)
 80080b4:	4812      	ldr	r0, [pc, #72]	; (8008100 <UI_MemSetting+0x194>)
 80080b6:	f7f9 fbef 	bl	8001898 <DISP_DisplayText>
					Storage_CleanInit();
 80080ba:	f7fd f8b7 	bl	800522c <Storage_CleanInit>
					HAL_Delay(1000);
 80080be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080c2:	f000 fe97 	bl	8008df4 <HAL_Delay>
					HAL_NVIC_SystemReset();
 80080c6:	f001 fd00 	bl	8009aca <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 80080ca:	e7e0      	b.n	800808e <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80080cc:	bf00      	nop
 80080ce:	e75e      	b.n	8007f8e <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 80080d0:	bf00      	nop
 80080d2:	e75c      	b.n	8007f8e <UI_MemSetting+0x22>
			break;
 80080d4:	bf00      	nop
 80080d6:	e75a      	b.n	8007f8e <UI_MemSetting+0x22>
			break;
 80080d8:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80080da:	e758      	b.n	8007f8e <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	0801115c 	.word	0x0801115c
 80080e8:	20000efc 	.word	0x20000efc
 80080ec:	20000fbf 	.word	0x20000fbf
 80080f0:	08011130 	.word	0x08011130
 80080f4:	20000ed0 	.word	0x20000ed0
 80080f8:	0801113c 	.word	0x0801113c
 80080fc:	08011164 	.word	0x08011164
 8008100:	20000f19 	.word	0x20000f19
 8008104:	08011174 	.word	0x08011174

08008108 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b08a      	sub	sp, #40	; 0x28
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	4a4b      	ldr	r2, [pc, #300]	; (8008244 <UI_PIDSettingDisplay+0x13c>)
 8008116:	f992 2000 	ldrsb.w	r2, [r2]
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	2b03      	cmp	r3, #3
 800811e:	dd06      	ble.n	800812e <UI_PIDSettingDisplay+0x26>
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	3b03      	subs	r3, #3
 8008124:	b2db      	uxtb	r3, r3
 8008126:	b25a      	sxtb	r2, r3
 8008128:	4b46      	ldr	r3, [pc, #280]	; (8008244 <UI_PIDSettingDisplay+0x13c>)
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	e009      	b.n	8008142 <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	4a44      	ldr	r2, [pc, #272]	; (8008244 <UI_PIDSettingDisplay+0x13c>)
 8008132:	f992 2000 	ldrsb.w	r2, [r2]
 8008136:	4293      	cmp	r3, r2
 8008138:	da03      	bge.n	8008142 <UI_PIDSettingDisplay+0x3a>
 800813a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800813e:	4b41      	ldr	r3, [pc, #260]	; (8008244 <UI_PIDSettingDisplay+0x13c>)
 8008140:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008142:	2300      	movs	r3, #0
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
 8008146:	e074      	b.n	8008232 <UI_PIDSettingDisplay+0x12a>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008148:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <UI_PIDSettingDisplay+0x13c>)
 800814a:	f993 3000 	ldrsb.w	r3, [r3]
 800814e:	461a      	mov	r2, r3
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	441a      	add	r2, r3
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	429a      	cmp	r2, r3
 8008158:	d109      	bne.n	800816e <UI_PIDSettingDisplay+0x66>
 800815a:	493b      	ldr	r1, [pc, #236]	; (8008248 <UI_PIDSettingDisplay+0x140>)
 800815c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815e:	4613      	mov	r3, r2
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	440b      	add	r3, r1
 8008166:	3302      	adds	r3, #2
 8008168:	2201      	movs	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e008      	b.n	8008180 <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 800816e:	4936      	ldr	r1, [pc, #216]	; (8008248 <UI_PIDSettingDisplay+0x140>)
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	4613      	mov	r3, r2
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	440b      	add	r3, r1
 800817a:	3302      	adds	r3, #2
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8008180:	4b30      	ldr	r3, [pc, #192]	; (8008244 <UI_PIDSettingDisplay+0x13c>)
 8008182:	f993 3000 	ldrsb.w	r3, [r3]
 8008186:	461a      	mov	r2, r3
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	4413      	add	r3, r2
 800818c:	2b03      	cmp	r3, #3
 800818e:	d841      	bhi.n	8008214 <UI_PIDSettingDisplay+0x10c>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <UI_PIDSettingDisplay+0x90>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081c3 	.word	0x080081c3
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081f7 	.word	0x080081f7
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 80081a8:	4b28      	ldr	r3, [pc, #160]	; (800824c <UI_PIDSettingDisplay+0x144>)
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f8 f9cb 	bl	8000548 <__aeabi_f2d>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	f107 000c 	add.w	r0, r7, #12
 80081ba:	4925      	ldr	r1, [pc, #148]	; (8008250 <UI_PIDSettingDisplay+0x148>)
 80081bc:	f006 fc6c 	bl	800ea98 <siprintf>
			break;
 80081c0:	e028      	b.n	8008214 <UI_PIDSettingDisplay+0x10c>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 80081c2:	4b22      	ldr	r3, [pc, #136]	; (800824c <UI_PIDSettingDisplay+0x144>)
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f9be 	bl	8000548 <__aeabi_f2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	f107 000c 	add.w	r0, r7, #12
 80081d4:	491f      	ldr	r1, [pc, #124]	; (8008254 <UI_PIDSettingDisplay+0x14c>)
 80081d6:	f006 fc5f 	bl	800ea98 <siprintf>
			break;
 80081da:	e01b      	b.n	8008214 <UI_PIDSettingDisplay+0x10c>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <UI_PIDSettingDisplay+0x144>)
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7f8 f9b1 	bl	8000548 <__aeabi_f2d>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	f107 000c 	add.w	r0, r7, #12
 80081ee:	491a      	ldr	r1, [pc, #104]	; (8008258 <UI_PIDSettingDisplay+0x150>)
 80081f0:	f006 fc52 	bl	800ea98 <siprintf>
			break;
 80081f4:	e00e      	b.n	8008214 <UI_PIDSettingDisplay+0x10c>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <UI_PIDSettingDisplay+0x144>)
 80081f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <UI_PIDSettingDisplay+0xfc>
 8008200:	4a16      	ldr	r2, [pc, #88]	; (800825c <UI_PIDSettingDisplay+0x154>)
 8008202:	e000      	b.n	8008206 <UI_PIDSettingDisplay+0xfe>
 8008204:	4a16      	ldr	r2, [pc, #88]	; (8008260 <UI_PIDSettingDisplay+0x158>)
 8008206:	f107 030c 	add.w	r3, r7, #12
 800820a:	4916      	ldr	r1, [pc, #88]	; (8008264 <UI_PIDSettingDisplay+0x15c>)
 800820c:	4618      	mov	r0, r3
 800820e:	f006 fc43 	bl	800ea98 <siprintf>
			break;
 8008212:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8008214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	4a0a      	ldr	r2, [pc, #40]	; (8008248 <UI_PIDSettingDisplay+0x140>)
 800821e:	4413      	add	r3, r2
 8008220:	f107 020c 	add.w	r2, r7, #12
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f7f9 fb36 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	3301      	adds	r3, #1
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	2b03      	cmp	r3, #3
 8008236:	dd87      	ble.n	8008148 <UI_PIDSettingDisplay+0x40>
	}
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	3728      	adds	r7, #40	; 0x28
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000fc0 	.word	0x20000fc0
 8008248:	20000f90 	.word	0x20000f90
 800824c:	20000d3c 	.word	0x20000d3c
 8008250:	0801117c 	.word	0x0801117c
 8008254:	08011188 	.word	0x08011188
 8008258:	08011194 	.word	0x08011194
 800825c:	080111a0 	.word	0x080111a0
 8008260:	080111a8 	.word	0x080111a8
 8008264:	080111b0 	.word	0x080111b0

08008268 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8008276:	49a0      	ldr	r1, [pc, #640]	; (80084f8 <UI_PIDSetting+0x290>)
 8008278:	48a0      	ldr	r0, [pc, #640]	; (80084fc <UI_PIDSetting+0x294>)
 800827a:	f7f9 fb0d 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 800827e:	4ba0      	ldr	r3, [pc, #640]	; (8008500 <UI_PIDSetting+0x298>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff ff40 	bl	8008108 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8008288:	f000 fda8 	bl	8008ddc <HAL_GetTick>
 800828c:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800828e:	f000 fda5 	bl	8008ddc <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	7bba      	ldrb	r2, [r7, #14]
 800829a:	2a01      	cmp	r2, #1
 800829c:	d101      	bne.n	80082a2 <UI_PIDSetting+0x3a>
 800829e:	2219      	movs	r2, #25
 80082a0:	e000      	b.n	80082a4 <UI_PIDSetting+0x3c>
 80082a2:	2246      	movs	r2, #70	; 0x46
 80082a4:	429a      	cmp	r2, r3
 80082a6:	f200 816d 	bhi.w	8008584 <UI_PIDSetting+0x31c>
		bt2 = UI_ReadButton();
 80082aa:	f7fd fca7 	bl	8005bfc <UI_ReadButton>
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80082b2:	7bfa      	ldrb	r2, [r7, #15]
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d103      	bne.n	80082c2 <UI_PIDSetting+0x5a>
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8163 	beq.w	8008588 <UI_PIDSetting+0x320>
		bt = bt2;
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <UI_PIDSetting+0x8a>
			if(num_menu==3) num_menu = 0; else num_menu++;
 80082d0:	4b8b      	ldr	r3, [pc, #556]	; (8008500 <UI_PIDSetting+0x298>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d103      	bne.n	80082e0 <UI_PIDSetting+0x78>
 80082d8:	4b89      	ldr	r3, [pc, #548]	; (8008500 <UI_PIDSetting+0x298>)
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e005      	b.n	80082ec <UI_PIDSetting+0x84>
 80082e0:	4b87      	ldr	r3, [pc, #540]	; (8008500 <UI_PIDSetting+0x298>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	4b85      	ldr	r3, [pc, #532]	; (8008500 <UI_PIDSetting+0x298>)
 80082ea:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 80082f0:	e7c5      	b.n	800827e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d010      	beq.n	800831e <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 3; else num_menu--;
 80082fc:	4b80      	ldr	r3, [pc, #512]	; (8008500 <UI_PIDSetting+0x298>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <UI_PIDSetting+0xa4>
 8008304:	4b7e      	ldr	r3, [pc, #504]	; (8008500 <UI_PIDSetting+0x298>)
 8008306:	2203      	movs	r2, #3
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e005      	b.n	8008318 <UI_PIDSetting+0xb0>
 800830c:	4b7c      	ldr	r3, [pc, #496]	; (8008500 <UI_PIDSetting+0x298>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	3b01      	subs	r3, #1
 8008312:	b2da      	uxtb	r2, r3
 8008314:	4b7a      	ldr	r3, [pc, #488]	; (8008500 <UI_PIDSetting+0x298>)
 8008316:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 800831c:	e7af      	b.n	800827e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <UI_PIDSetting+0xca>
			num_menu = 0;
 8008328:	4b75      	ldr	r3, [pc, #468]	; (8008500 <UI_PIDSetting+0x298>)
 800832a:	2200      	movs	r2, #0
 800832c:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800832e:	2302      	movs	r3, #2
 8008330:	e12e      	b.n	8008590 <UI_PIDSetting+0x328>
		}
		else if(bt & SW_BK_PRESS) {
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <UI_PIDSetting+0xea>
			num_menu = 0;
 800833c:	4b70      	ldr	r3, [pc, #448]	; (8008500 <UI_PIDSetting+0x298>)
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8008342:	4970      	ldr	r1, [pc, #448]	; (8008504 <UI_PIDSetting+0x29c>)
 8008344:	4870      	ldr	r0, [pc, #448]	; (8008508 <UI_PIDSetting+0x2a0>)
 8008346:	f7f9 faa7 	bl	8001898 <DISP_DisplayText>
			Storage_SetPID();
 800834a:	f7fc fcbd 	bl	8004cc8 <Storage_SetPID>
			return UI_SET;
 800834e:	2307      	movs	r3, #7
 8008350:	e11e      	b.n	8008590 <UI_PIDSetting+0x328>
		}
		switch(num_menu) {
 8008352:	4b6b      	ldr	r3, [pc, #428]	; (8008500 <UI_PIDSetting+0x298>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b02      	cmp	r3, #2
 8008358:	dc02      	bgt.n	8008360 <UI_PIDSetting+0xf8>
 800835a:	2b00      	cmp	r3, #0
 800835c:	da04      	bge.n	8008368 <UI_PIDSetting+0x100>
 800835e:	e116      	b.n	800858e <UI_PIDSetting+0x326>
 8008360:	2b03      	cmp	r3, #3
 8008362:	f000 80fa 	beq.w	800855a <UI_PIDSetting+0x2f2>
 8008366:	e112      	b.n	800858e <UI_PIDSetting+0x326>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800836e:	2b10      	cmp	r3, #16
 8008370:	d12c      	bne.n	80083cc <UI_PIDSetting+0x164>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=1.0;
 8008372:	4b63      	ldr	r3, [pc, #396]	; (8008500 <UI_PIDSetting+0x298>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	4a65      	ldr	r2, [pc, #404]	; (800850c <UI_PIDSetting+0x2a4>)
 8008378:	3306      	adds	r3, #6
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	edd3 7a00 	vldr	s15, [r3]
 8008382:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838a:	d108      	bne.n	800839e <UI_PIDSetting+0x136>
 800838c:	4b5c      	ldr	r3, [pc, #368]	; (8008500 <UI_PIDSetting+0x298>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	4a5e      	ldr	r2, [pc, #376]	; (800850c <UI_PIDSetting+0x2a4>)
 8008392:	3306      	adds	r3, #6
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	4a5d      	ldr	r2, [pc, #372]	; (8008510 <UI_PIDSetting+0x2a8>)
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e013      	b.n	80083c6 <UI_PIDSetting+0x15e>
 800839e:	4b58      	ldr	r3, [pc, #352]	; (8008500 <UI_PIDSetting+0x298>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	4a5a      	ldr	r2, [pc, #360]	; (800850c <UI_PIDSetting+0x2a4>)
 80083a4:	3306      	adds	r3, #6
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	edd3 7a00 	vldr	s15, [r3]
 80083ae:	4b54      	ldr	r3, [pc, #336]	; (8008500 <UI_PIDSetting+0x298>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083ba:	4a54      	ldr	r2, [pc, #336]	; (800850c <UI_PIDSetting+0x2a4>)
 80083bc:	3306      	adds	r3, #6
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80083ca:	e758      	b.n	800827e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d12f      	bne.n	8008436 <UI_PIDSetting+0x1ce>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 80083d6:	4b4a      	ldr	r3, [pc, #296]	; (8008500 <UI_PIDSetting+0x298>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	4a4c      	ldr	r2, [pc, #304]	; (800850c <UI_PIDSetting+0x2a4>)
 80083dc:	3306      	adds	r3, #6
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	edd3 7a00 	vldr	s15, [r3]
 80083e6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008514 <UI_PIDSetting+0x2ac>
 80083ea:	eef4 7a47 	vcmp.f32	s15, s14
 80083ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f2:	d109      	bne.n	8008408 <UI_PIDSetting+0x1a0>
 80083f4:	4b42      	ldr	r3, [pc, #264]	; (8008500 <UI_PIDSetting+0x298>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	4a44      	ldr	r2, [pc, #272]	; (800850c <UI_PIDSetting+0x2a4>)
 80083fa:	3306      	adds	r3, #6
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e013      	b.n	8008430 <UI_PIDSetting+0x1c8>
 8008408:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <UI_PIDSetting+0x298>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4a3f      	ldr	r2, [pc, #252]	; (800850c <UI_PIDSetting+0x2a4>)
 800840e:	3306      	adds	r3, #6
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	edd3 7a00 	vldr	s15, [r3]
 8008418:	4b39      	ldr	r3, [pc, #228]	; (8008500 <UI_PIDSetting+0x298>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008424:	4a39      	ldr	r2, [pc, #228]	; (800850c <UI_PIDSetting+0x2a4>)
 8008426:	3306      	adds	r3, #6
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8008430:	2301      	movs	r3, #1
 8008432:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008434:	e723      	b.n	800827e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800843c:	2b30      	cmp	r3, #48	; 0x30
 800843e:	d136      	bne.n	80084ae <UI_PIDSetting+0x246>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=0.10;
 8008440:	4b2f      	ldr	r3, [pc, #188]	; (8008500 <UI_PIDSetting+0x298>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	4a31      	ldr	r2, [pc, #196]	; (800850c <UI_PIDSetting+0x2a4>)
 8008446:	3306      	adds	r3, #6
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	edd3 7a00 	vldr	s15, [r3]
 8008450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	d108      	bne.n	800846c <UI_PIDSetting+0x204>
 800845a:	4b29      	ldr	r3, [pc, #164]	; (8008500 <UI_PIDSetting+0x298>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	4a2b      	ldr	r2, [pc, #172]	; (800850c <UI_PIDSetting+0x2a4>)
 8008460:	3306      	adds	r3, #6
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	4a2a      	ldr	r2, [pc, #168]	; (8008510 <UI_PIDSetting+0x2a8>)
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e01d      	b.n	80084a8 <UI_PIDSetting+0x240>
 800846c:	4b24      	ldr	r3, [pc, #144]	; (8008500 <UI_PIDSetting+0x298>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	4a26      	ldr	r2, [pc, #152]	; (800850c <UI_PIDSetting+0x2a4>)
 8008472:	3306      	adds	r3, #6
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f7f8 f864 	bl	8000548 <__aeabi_f2d>
 8008480:	a31b      	add	r3, pc, #108	; (adr r3, 80084f0 <UI_PIDSetting+0x288>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f7f7 feff 	bl	8000288 <__aeabi_dsub>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	491c      	ldr	r1, [pc, #112]	; (8008500 <UI_PIDSetting+0x298>)
 8008490:	7809      	ldrb	r1, [r1, #0]
 8008492:	460c      	mov	r4, r1
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	f7f8 fba6 	bl	8000be8 <__aeabi_d2f>
 800849c:	4602      	mov	r2, r0
 800849e:	491b      	ldr	r1, [pc, #108]	; (800850c <UI_PIDSetting+0x2a4>)
 80084a0:	1da3      	adds	r3, r4, #6
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80084ac:	e6e7      	b.n	800827e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80084b4:	2b22      	cmp	r3, #34	; 0x22
 80084b6:	d169      	bne.n	800858c <UI_PIDSetting+0x324>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 80084b8:	4b11      	ldr	r3, [pc, #68]	; (8008500 <UI_PIDSetting+0x298>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4a13      	ldr	r2, [pc, #76]	; (800850c <UI_PIDSetting+0x2a4>)
 80084be:	3306      	adds	r3, #6
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	edd3 7a00 	vldr	s15, [r3]
 80084c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008514 <UI_PIDSetting+0x2ac>
 80084cc:	eef4 7a47 	vcmp.f32	s15, s14
 80084d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d4:	d120      	bne.n	8008518 <UI_PIDSetting+0x2b0>
 80084d6:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <UI_PIDSetting+0x298>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	4a0c      	ldr	r2, [pc, #48]	; (800850c <UI_PIDSetting+0x2a4>)
 80084dc:	3306      	adds	r3, #6
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	f04f 0200 	mov.w	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	e034      	b.n	8008554 <UI_PIDSetting+0x2ec>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	9999999a 	.word	0x9999999a
 80084f4:	3fb99999 	.word	0x3fb99999
 80084f8:	080111b4 	.word	0x080111b4
 80084fc:	20000efc 	.word	0x20000efc
 8008500:	20000fc1 	.word	0x20000fc1
 8008504:	080111b8 	.word	0x080111b8
 8008508:	20000ed0 	.word	0x20000ed0
 800850c:	20000d3c 	.word	0x20000d3c
 8008510:	42c60000 	.word	0x42c60000
 8008514:	42c60000 	.word	0x42c60000
 8008518:	4b21      	ldr	r3, [pc, #132]	; (80085a0 <UI_PIDSetting+0x338>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4a21      	ldr	r2, [pc, #132]	; (80085a4 <UI_PIDSetting+0x33c>)
 800851e:	3306      	adds	r3, #6
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 f80e 	bl	8000548 <__aeabi_f2d>
 800852c:	a31a      	add	r3, pc, #104	; (adr r3, 8008598 <UI_PIDSetting+0x330>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f7 feab 	bl	800028c <__adddf3>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4919      	ldr	r1, [pc, #100]	; (80085a0 <UI_PIDSetting+0x338>)
 800853c:	7809      	ldrb	r1, [r1, #0]
 800853e:	460c      	mov	r4, r1
 8008540:	4610      	mov	r0, r2
 8008542:	4619      	mov	r1, r3
 8008544:	f7f8 fb50 	bl	8000be8 <__aeabi_d2f>
 8008548:	4602      	mov	r2, r0
 800854a:	4916      	ldr	r1, [pc, #88]	; (80085a4 <UI_PIDSetting+0x33c>)
 800854c:	1da3      	adds	r3, r4, #6
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8008554:	2301      	movs	r3, #1
 8008556:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008558:	e691      	b.n	800827e <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	f003 0312 	and.w	r3, r3, #18
 8008560:	2b00      	cmp	r3, #0
 8008562:	f43f ae94 	beq.w	800828e <UI_PIDSetting+0x26>
				plan.status_pid = !plan.status_pid;
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <UI_PIDSetting+0x33c>)
 8008568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800856c:	2b00      	cmp	r3, #0
 800856e:	bf0c      	ite	eq
 8008570:	2301      	moveq	r3, #1
 8008572:	2300      	movne	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	461a      	mov	r2, r3
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <UI_PIDSetting+0x33c>)
 800857a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008582:	e67c      	b.n	800827e <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 8008584:	bf00      	nop
 8008586:	e682      	b.n	800828e <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 8008588:	bf00      	nop
 800858a:	e680      	b.n	800828e <UI_PIDSetting+0x26>
			break;
 800858c:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800858e:	e67e      	b.n	800828e <UI_PIDSetting+0x26>
			}
		}
	}
	return UI_IDLE;
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	bd90      	pop	{r4, r7, pc}
 8008598:	9999999a 	.word	0x9999999a
 800859c:	3fb99999 	.word	0x3fb99999
 80085a0:	20000fc1 	.word	0x20000fc1
 80085a4:	20000d3c 	.word	0x20000d3c

080085a8 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<4; i++) {
 80085b2:	2301      	movs	r3, #1
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
 80085b6:	e051      	b.n	800865c <UI_SpeedSetDisplay+0xb4>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	429a      	cmp	r2, r3
 80085be:	d109      	bne.n	80085d4 <UI_SpeedSetDisplay+0x2c>
 80085c0:	492a      	ldr	r1, [pc, #168]	; (800866c <UI_SpeedSetDisplay+0xc4>)
 80085c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c4:	4613      	mov	r3, r2
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	440b      	add	r3, r1
 80085cc:	3302      	adds	r3, #2
 80085ce:	2201      	movs	r2, #1
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e008      	b.n	80085e6 <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80085d4:	4925      	ldr	r1, [pc, #148]	; (800866c <UI_SpeedSetDisplay+0xc4>)
 80085d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	440b      	add	r3, r1
 80085e0:	3302      	adds	r3, #2
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d01d      	beq.n	8008628 <UI_SpeedSetDisplay+0x80>
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	dc25      	bgt.n	800863e <UI_SpeedSetDisplay+0x96>
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d003      	beq.n	8008600 <UI_SpeedSetDisplay+0x58>
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d00a      	beq.n	8008614 <UI_SpeedSetDisplay+0x6c>
 80085fe:	e01e      	b.n	800863e <UI_SpeedSetDisplay+0x96>
		case 1:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 8008600:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <UI_SpeedSetDisplay+0xc8>)
 8008602:	7d9b      	ldrb	r3, [r3, #22]
 8008604:	461a      	mov	r2, r3
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	491a      	ldr	r1, [pc, #104]	; (8008674 <UI_SpeedSetDisplay+0xcc>)
 800860c:	4618      	mov	r0, r3
 800860e:	f006 fa43 	bl	800ea98 <siprintf>
			break;
 8008612:	e014      	b.n	800863e <UI_SpeedSetDisplay+0x96>
		case 2:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 8008614:	4b16      	ldr	r3, [pc, #88]	; (8008670 <UI_SpeedSetDisplay+0xc8>)
 8008616:	7ddb      	ldrb	r3, [r3, #23]
 8008618:	461a      	mov	r2, r3
 800861a:	f107 030c 	add.w	r3, r7, #12
 800861e:	4916      	ldr	r1, [pc, #88]	; (8008678 <UI_SpeedSetDisplay+0xd0>)
 8008620:	4618      	mov	r0, r3
 8008622:	f006 fa39 	bl	800ea98 <siprintf>
			break;
 8008626:	e00a      	b.n	800863e <UI_SpeedSetDisplay+0x96>
		case 3:
			sprintf(buff, "Accel ~ %-3i", plan.acc);
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <UI_SpeedSetDisplay+0xc8>)
 800862a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800862e:	461a      	mov	r2, r3
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	4911      	ldr	r1, [pc, #68]	; (800867c <UI_SpeedSetDisplay+0xd4>)
 8008636:	4618      	mov	r0, r3
 8008638:	f006 fa2e 	bl	800ea98 <siprintf>
			break;
 800863c:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	4a09      	ldr	r2, [pc, #36]	; (800866c <UI_SpeedSetDisplay+0xc4>)
 8008648:	4413      	add	r3, r2
 800864a:	f107 020c 	add.w	r2, r7, #12
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f7f9 f921 	bl	8001898 <DISP_DisplayText>
	for(int i=1; i<4; i++) {
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	3301      	adds	r3, #1
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	2b03      	cmp	r3, #3
 8008660:	ddaa      	ble.n	80085b8 <UI_SpeedSetDisplay+0x10>
	}
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	3728      	adds	r7, #40	; 0x28
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000f90 	.word	0x20000f90
 8008670:	20000d3c 	.word	0x20000d3c
 8008674:	080111c4 	.word	0x080111c4
 8008678:	080111d4 	.word	0x080111d4
 800867c:	080111e4 	.word	0x080111e4

08008680 <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 1;
 8008686:	2301      	movs	r3, #1
 8008688:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 8008692:	497b      	ldr	r1, [pc, #492]	; (8008880 <UI_SpeedSetting+0x200>)
 8008694:	487b      	ldr	r0, [pc, #492]	; (8008884 <UI_SpeedSetting+0x204>)
 8008696:	f7f9 f8ff 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff ff83 	bl	80085a8 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 80086a2:	f000 fb9b 	bl	8008ddc <HAL_GetTick>
 80086a6:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 80086a8:	f000 fb98 	bl	8008ddc <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	7b7a      	ldrb	r2, [r7, #13]
 80086b4:	2a01      	cmp	r2, #1
 80086b6:	d101      	bne.n	80086bc <UI_SpeedSetting+0x3c>
 80086b8:	221e      	movs	r2, #30
 80086ba:	e000      	b.n	80086be <UI_SpeedSetting+0x3e>
 80086bc:	2246      	movs	r2, #70	; 0x46
 80086be:	429a      	cmp	r2, r3
 80086c0:	f200 80d6 	bhi.w	8008870 <UI_SpeedSetting+0x1f0>
		bt2 = UI_ReadButton();
 80086c4:	f7fd fa9a 	bl	8005bfc <UI_ReadButton>
 80086c8:	4603      	mov	r3, r0
 80086ca:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80086cc:	7bfa      	ldrb	r2, [r7, #15]
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d103      	bne.n	80086dc <UI_SpeedSetting+0x5c>
 80086d4:	7b7b      	ldrb	r3, [r7, #13]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80cc 	beq.w	8008874 <UI_SpeedSetting+0x1f4>
		bt = bt2;
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <UI_SpeedSetting+0x80>
			if(num_menu!=3) num_menu++;
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d002      	beq.n	80086f6 <UI_SpeedSetting+0x76>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	3301      	adds	r3, #1
 80086f4:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 80086fa:	f7fc fb1b 	bl	8004d34 <Storage_SetSpeed>
			goto ui_mem;
 80086fe:	e7cc      	b.n	800869a <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00e      	beq.n	8008728 <UI_SpeedSetting+0xa8>
			if(num_menu==1) {
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d103      	bne.n	8008718 <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 8008710:	f7fc fb10 	bl	8004d34 <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8008714:	2302      	movs	r3, #2
 8008716:	e0af      	b.n	8008878 <UI_SpeedSetting+0x1f8>
			}
			else num_menu--;
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	3b01      	subs	r3, #1
 800871c:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8008722:	f7fc fb07 	bl	8004d34 <Storage_SetSpeed>
			goto ui_mem;
 8008726:	e7b8      	b.n	800869a <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	f003 0348 	and.w	r3, r3, #72	; 0x48
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <UI_SpeedSetting+0xbe>
			num_menu = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 8008736:	f7fc fafd 	bl	8004d34 <Storage_SetSpeed>
			return UI_HOMESCREEN;
 800873a:	2302      	movs	r3, #2
 800873c:	e09c      	b.n	8008878 <UI_SpeedSetting+0x1f8>
		}
		switch(num_menu) {
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d060      	beq.n	8008806 <UI_SpeedSetting+0x186>
 8008744:	2b03      	cmp	r3, #3
 8008746:	dcaf      	bgt.n	80086a8 <UI_SpeedSetting+0x28>
 8008748:	2b01      	cmp	r3, #1
 800874a:	d002      	beq.n	8008752 <UI_SpeedSetting+0xd2>
 800874c:	2b02      	cmp	r3, #2
 800874e:	d02c      	beq.n	80087aa <UI_SpeedSetting+0x12a>
 8008750:	e091      	b.n	8008876 <UI_SpeedSetting+0x1f6>
		case 1 :
			if(bt & SW_LF_PRESS) {
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b00      	cmp	r3, #0
 800875a:	d010      	beq.n	800877e <UI_SpeedSetting+0xfe>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 800875c:	4b4a      	ldr	r3, [pc, #296]	; (8008888 <UI_SpeedSetting+0x208>)
 800875e:	7d9b      	ldrb	r3, [r3, #22]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d103      	bne.n	800876c <UI_SpeedSetting+0xec>
 8008764:	4b48      	ldr	r3, [pc, #288]	; (8008888 <UI_SpeedSetting+0x208>)
 8008766:	2263      	movs	r2, #99	; 0x63
 8008768:	759a      	strb	r2, [r3, #22]
 800876a:	e005      	b.n	8008778 <UI_SpeedSetting+0xf8>
 800876c:	4b46      	ldr	r3, [pc, #280]	; (8008888 <UI_SpeedSetting+0x208>)
 800876e:	7d9b      	ldrb	r3, [r3, #22]
 8008770:	3b01      	subs	r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	4b44      	ldr	r3, [pc, #272]	; (8008888 <UI_SpeedSetting+0x208>)
 8008776:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 800877c:	e78d      	b.n	800869a <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <UI_SpeedSetting+0x12a>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 8008788:	4b3f      	ldr	r3, [pc, #252]	; (8008888 <UI_SpeedSetting+0x208>)
 800878a:	7d9b      	ldrb	r3, [r3, #22]
 800878c:	2b63      	cmp	r3, #99	; 0x63
 800878e:	d103      	bne.n	8008798 <UI_SpeedSetting+0x118>
 8008790:	4b3d      	ldr	r3, [pc, #244]	; (8008888 <UI_SpeedSetting+0x208>)
 8008792:	2200      	movs	r2, #0
 8008794:	759a      	strb	r2, [r3, #22]
 8008796:	e005      	b.n	80087a4 <UI_SpeedSetting+0x124>
 8008798:	4b3b      	ldr	r3, [pc, #236]	; (8008888 <UI_SpeedSetting+0x208>)
 800879a:	7d9b      	ldrb	r3, [r3, #22]
 800879c:	3301      	adds	r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	4b39      	ldr	r3, [pc, #228]	; (8008888 <UI_SpeedSetting+0x208>)
 80087a2:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 80087a4:	2301      	movs	r3, #1
 80087a6:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80087a8:	e777      	b.n	800869a <UI_SpeedSetting+0x1a>
			}
		case 2 :
			if(bt & SW_LF_PRESS) {
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	f003 0310 	and.w	r3, r3, #16
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d011      	beq.n	80087d8 <UI_SpeedSetting+0x158>
				if(plan.acc==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 80087b4:	4b34      	ldr	r3, [pc, #208]	; (8008888 <UI_SpeedSetting+0x208>)
 80087b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <UI_SpeedSetting+0x146>
 80087be:	4b32      	ldr	r3, [pc, #200]	; (8008888 <UI_SpeedSetting+0x208>)
 80087c0:	2263      	movs	r2, #99	; 0x63
 80087c2:	75da      	strb	r2, [r3, #23]
 80087c4:	e005      	b.n	80087d2 <UI_SpeedSetting+0x152>
 80087c6:	4b30      	ldr	r3, [pc, #192]	; (8008888 <UI_SpeedSetting+0x208>)
 80087c8:	7ddb      	ldrb	r3, [r3, #23]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <UI_SpeedSetting+0x208>)
 80087d0:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 80087d2:	2301      	movs	r3, #1
 80087d4:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80087d6:	e760      	b.n	800869a <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d011      	beq.n	8008806 <UI_SpeedSetting+0x186>
				if(plan.acc==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 80087e2:	4b29      	ldr	r3, [pc, #164]	; (8008888 <UI_SpeedSetting+0x208>)
 80087e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80087e8:	2b63      	cmp	r3, #99	; 0x63
 80087ea:	d103      	bne.n	80087f4 <UI_SpeedSetting+0x174>
 80087ec:	4b26      	ldr	r3, [pc, #152]	; (8008888 <UI_SpeedSetting+0x208>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	75da      	strb	r2, [r3, #23]
 80087f2:	e005      	b.n	8008800 <UI_SpeedSetting+0x180>
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <UI_SpeedSetting+0x208>)
 80087f6:	7ddb      	ldrb	r3, [r3, #23]
 80087f8:	3301      	adds	r3, #1
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	4b22      	ldr	r3, [pc, #136]	; (8008888 <UI_SpeedSetting+0x208>)
 80087fe:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8008800:	2301      	movs	r3, #1
 8008802:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008804:	e749      	b.n	800869a <UI_SpeedSetting+0x1a>
			}
		case 3 :
			if(bt & SW_LF_PRESS) {
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d014      	beq.n	800883a <UI_SpeedSetting+0x1ba>
				if(plan.acc==0) plan.acc = 99; else plan.acc-=1;
 8008810:	4b1d      	ldr	r3, [pc, #116]	; (8008888 <UI_SpeedSetting+0x208>)
 8008812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008816:	2b00      	cmp	r3, #0
 8008818:	d104      	bne.n	8008824 <UI_SpeedSetting+0x1a4>
 800881a:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <UI_SpeedSetting+0x208>)
 800881c:	2263      	movs	r2, #99	; 0x63
 800881e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8008822:	e007      	b.n	8008834 <UI_SpeedSetting+0x1b4>
 8008824:	4b18      	ldr	r3, [pc, #96]	; (8008888 <UI_SpeedSetting+0x208>)
 8008826:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800882a:	3b01      	subs	r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	4b16      	ldr	r3, [pc, #88]	; (8008888 <UI_SpeedSetting+0x208>)
 8008830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				bt_status = 1;
 8008834:	2301      	movs	r3, #1
 8008836:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008838:	e72f      	b.n	800869a <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f43f af31 	beq.w	80086a8 <UI_SpeedSetting+0x28>
				if(plan.acc==99) plan.acc = 0; else plan.acc+=1;
 8008846:	4b10      	ldr	r3, [pc, #64]	; (8008888 <UI_SpeedSetting+0x208>)
 8008848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800884c:	2b63      	cmp	r3, #99	; 0x63
 800884e:	d104      	bne.n	800885a <UI_SpeedSetting+0x1da>
 8008850:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <UI_SpeedSetting+0x208>)
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8008858:	e007      	b.n	800886a <UI_SpeedSetting+0x1ea>
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <UI_SpeedSetting+0x208>)
 800885c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008860:	3301      	adds	r3, #1
 8008862:	b2da      	uxtb	r2, r3
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <UI_SpeedSetting+0x208>)
 8008866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				bt_status = 1;
 800886a:	2301      	movs	r3, #1
 800886c:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 800886e:	e714      	b.n	800869a <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008870:	bf00      	nop
 8008872:	e719      	b.n	80086a8 <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 8008874:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008876:	e717      	b.n	80086a8 <UI_SpeedSetting+0x28>
			}

		}
	}
	return UI_IDLE;
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	080111f4 	.word	0x080111f4
 8008884:	20000efc 	.word	0x20000efc
 8008888:	20000d3c 	.word	0x20000d3c

0800888c <UI_Run>:


UI_Menu_Lists UI_Run() {
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 8008892:	f7fa fdb7 	bl	8003404 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 8008896:	f7fa fdf7 	bl	8003488 <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 800889a:	4b3c      	ldr	r3, [pc, #240]	; (800898c <UI_Run+0x100>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	4b3b      	ldr	r3, [pc, #236]	; (8008990 <UI_Run+0x104>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4619      	mov	r1, r3
 80088a6:	4b3b      	ldr	r3, [pc, #236]	; (8008994 <UI_Run+0x108>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	4638      	mov	r0, r7
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	460b      	mov	r3, r1
 80088b0:	4939      	ldr	r1, [pc, #228]	; (8008998 <UI_Run+0x10c>)
 80088b2:	f006 f8f1 	bl	800ea98 <siprintf>
	DISP_DisplayText(&home_status, buff);
 80088b6:	463b      	mov	r3, r7
 80088b8:	4619      	mov	r1, r3
 80088ba:	4838      	ldr	r0, [pc, #224]	; (800899c <UI_Run+0x110>)
 80088bc:	f7f8 ffec 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 80088c0:	4b37      	ldr	r3, [pc, #220]	; (80089a0 <UI_Run+0x114>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	4b37      	ldr	r3, [pc, #220]	; (80089a4 <UI_Run+0x118>)
 80088c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088cc:	463b      	mov	r3, r7
 80088ce:	4936      	ldr	r1, [pc, #216]	; (80089a8 <UI_Run+0x11c>)
 80088d0:	4618      	mov	r0, r3
 80088d2:	f006 f8e1 	bl	800ea98 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 80088d6:	463b      	mov	r3, r7
 80088d8:	4619      	mov	r1, r3
 80088da:	4834      	ldr	r0, [pc, #208]	; (80089ac <UI_Run+0x120>)
 80088dc:	f7f8 ffdc 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 80088e0:	4b33      	ldr	r3, [pc, #204]	; (80089b0 <UI_Run+0x124>)
 80088e2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80088e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ea:	ee17 3a90 	vmov	r3, s15
 80088ee:	b21b      	sxth	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <UI_Run+0x124>)
 80088f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80088f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088fc:	ee17 3a90 	vmov	r3, s15
 8008900:	b21b      	sxth	r3, r3
 8008902:	4638      	mov	r0, r7
 8008904:	492b      	ldr	r1, [pc, #172]	; (80089b4 <UI_Run+0x128>)
 8008906:	f006 f8c7 	bl	800ea98 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 800890a:	463b      	mov	r3, r7
 800890c:	4619      	mov	r1, r3
 800890e:	482a      	ldr	r0, [pc, #168]	; (80089b8 <UI_Run+0x12c>)
 8008910:	f7f8 ffc2 	bl	8001898 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8008914:	4b29      	ldr	r3, [pc, #164]	; (80089bc <UI_Run+0x130>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d027      	beq.n	8008970 <UI_Run+0xe4>
		Plan_UIRoutine();
 8008920:	f7fa fdb2 	bl	8003488 <Plan_UIRoutine>
		UI_ShowSensor();
 8008924:	f7fd f8ec 	bl	8005b00 <UI_ShowSensor>
		bt = UI_ReadButton();
 8008928:	f7fd f968 	bl	8005bfc <UI_ReadButton>
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <UI_Run+0x134>)
 8008932:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 8008934:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <UI_Run+0x134>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00a      	beq.n	8008956 <UI_Run+0xca>
			main_flag &=~0x01;
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <UI_Run+0x130>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f023 0301 	bic.w	r3, r3, #1
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <UI_Run+0x130>)
 800894c:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 800894e:	f7fa fd2f 	bl	80033b0 <Plan_Stop>
			return UI_HOMESCREEN;
 8008952:	2302      	movs	r3, #2
 8008954:	e016      	b.n	8008984 <UI_Run+0xf8>
		}
		if(main_flag & 0x80) {
 8008956:	4b19      	ldr	r3, [pc, #100]	; (80089bc <UI_Run+0x130>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b25b      	sxtb	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	dad9      	bge.n	8008914 <UI_Run+0x88>
			main_flag &=~0x80;
 8008960:	4b16      	ldr	r3, [pc, #88]	; (80089bc <UI_Run+0x130>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008968:	b2da      	uxtb	r2, r3
 800896a:	4b14      	ldr	r3, [pc, #80]	; (80089bc <UI_Run+0x130>)
 800896c:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 800896e:	e792      	b.n	8008896 <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8008970:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 8008972:	4914      	ldr	r1, [pc, #80]	; (80089c4 <UI_Run+0x138>)
 8008974:	4814      	ldr	r0, [pc, #80]	; (80089c8 <UI_Run+0x13c>)
 8008976:	f7f8 ff8f 	bl	8001898 <DISP_DisplayText>
	HAL_Delay(500);
 800897a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800897e:	f000 fa39 	bl	8008df4 <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 8008982:	2302      	movs	r3, #2
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000cb5 	.word	0x20000cb5
 8008990:	20000cb4 	.word	0x20000cb4
 8008994:	20000cb1 	.word	0x20000cb1
 8008998:	08010df0 	.word	0x08010df0
 800899c:	20000efc 	.word	0x20000efc
 80089a0:	20000d2c 	.word	0x20000d2c
 80089a4:	200002c4 	.word	0x200002c4
 80089a8:	080111fc 	.word	0x080111fc
 80089ac:	20000f9e 	.word	0x20000f9e
 80089b0:	20000a8c 	.word	0x20000a8c
 80089b4:	08011208 	.word	0x08011208
 80089b8:	20000fa5 	.word	0x20000fa5
 80089bc:	20000a70 	.word	0x20000a70
 80089c0:	20000fc2 	.word	0x20000fc2
 80089c4:	08011214 	.word	0x08011214
 80089c8:	20000ed0 	.word	0x20000ed0

080089cc <UI_Init>:


void UI_Init() {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 80089d0:	f7fd f998 	bl	8005d04 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 80089d4:	f7fd fb88 	bl	80060e8 <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 80089d8:	f7fd fd4e 	bl	8006478 <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 80089dc:	f7fe fd22 	bl	8007424 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 80089e0:	f7fe ffca 	bl	8007978 <UI_CPDisplayInit>
}
 80089e4:	bf00      	nop
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UI_Main>:

void UI_Main() {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 80089ec:	f7f9 f91e 	bl	8001c2c <DISP_ClearAll>
	switch(retval) {
 80089f0:	4b3b      	ldr	r3, [pc, #236]	; (8008ae0 <UI_Main+0xf8>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	2b0c      	cmp	r3, #12
 80089f8:	d870      	bhi.n	8008adc <UI_Main+0xf4>
 80089fa:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UI_Main+0x18>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a35 	.word	0x08008a35
 8008a04:	08008a43 	.word	0x08008a43
 8008a08:	08008a51 	.word	0x08008a51
 8008a0c:	08008a5f 	.word	0x08008a5f
 8008a10:	08008a6d 	.word	0x08008a6d
 8008a14:	08008a7b 	.word	0x08008a7b
 8008a18:	08008a89 	.word	0x08008a89
 8008a1c:	08008a97 	.word	0x08008a97
 8008a20:	08008aa5 	.word	0x08008aa5
 8008a24:	08008ab3 	.word	0x08008ab3
 8008a28:	08008ac1 	.word	0x08008ac1
 8008a2c:	08008add 	.word	0x08008add
 8008a30:	08008acf 	.word	0x08008acf
	case UI_STARTUP:
		retval = UI_Startup();
 8008a34:	f7fe fed0 	bl	80077d8 <UI_Startup>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	4b28      	ldr	r3, [pc, #160]	; (8008ae0 <UI_Main+0xf8>)
 8008a3e:	701a      	strb	r2, [r3, #0]
		break;
 8008a40:	e04c      	b.n	8008adc <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 8008a42:	f7fd fa3d 	bl	8005ec0 <UI_HomeScreen>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4b25      	ldr	r3, [pc, #148]	; (8008ae0 <UI_Main+0xf8>)
 8008a4c:	701a      	strb	r2, [r3, #0]
		break;
 8008a4e:	e045      	b.n	8008adc <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 8008a50:	f7ff fe16 	bl	8008680 <UI_SpeedSetting>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461a      	mov	r2, r3
 8008a58:	4b21      	ldr	r3, [pc, #132]	; (8008ae0 <UI_Main+0xf8>)
 8008a5a:	701a      	strb	r2, [r3, #0]
		break;
 8008a5c:	e03e      	b.n	8008adc <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 8008a5e:	f7ff ff15 	bl	800888c <UI_Run>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b1e      	ldr	r3, [pc, #120]	; (8008ae0 <UI_Main+0xf8>)
 8008a68:	701a      	strb	r2, [r3, #0]
		break;
 8008a6a:	e037      	b.n	8008adc <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 8008a6c:	f7fe f856 	bl	8006b1c <UI_PlanSet>
 8008a70:	4603      	mov	r3, r0
 8008a72:	461a      	mov	r2, r3
 8008a74:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <UI_Main+0xf8>)
 8008a76:	701a      	strb	r2, [r3, #0]
		break;
 8008a78:	e030      	b.n	8008adc <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 8008a7a:	f7ff f95f 	bl	8007d3c <UI_PlanSelect>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <UI_Main+0xf8>)
 8008a84:	701a      	strb	r2, [r3, #0]
		break;
 8008a86:	e029      	b.n	8008adc <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 8008a88:	f7fd fc1a 	bl	80062c0 <UI_Setting>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <UI_Main+0xf8>)
 8008a92:	701a      	strb	r2, [r3, #0]
		break;
 8008a94:	e022      	b.n	8008adc <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 8008a96:	f7fe fd87 	bl	80075a8 <UI_ADCThreshold>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <UI_Main+0xf8>)
 8008aa0:	701a      	strb	r2, [r3, #0]
		break;
 8008aa2:	e01b      	b.n	8008adc <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 8008aa4:	f7fe fe50 	bl	8007748 <UI_AutoCalib>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <UI_Main+0xf8>)
 8008aae:	701a      	strb	r2, [r3, #0]
		break;
 8008ab0:	e014      	b.n	8008adc <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 8008ab2:	f7ff f837 	bl	8007b24 <UI_CP>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <UI_Main+0xf8>)
 8008abc:	701a      	strb	r2, [r3, #0]
		break;
 8008abe:	e00d      	b.n	8008adc <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 8008ac0:	f7ff fbd2 	bl	8008268 <UI_PIDSetting>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <UI_Main+0xf8>)
 8008aca:	701a      	strb	r2, [r3, #0]
		break;
 8008acc:	e006      	b.n	8008adc <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 8008ace:	f7ff fa4d 	bl	8007f6c <UI_MemSetting>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <UI_Main+0xf8>)
 8008ad8:	701a      	strb	r2, [r3, #0]
		break;
 8008ada:	bf00      	nop
	default:
		;
	}
}
 8008adc:	bf00      	nop
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	2000031d 	.word	0x2000031d

08008ae4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008ae8:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008aea:	4a12      	ldr	r2, [pc, #72]	; (8008b34 <MX_USART3_UART_Init+0x50>)
 8008aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008aee:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008b08:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008b0a:	220c      	movs	r2, #12
 8008b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008b1a:	4805      	ldr	r0, [pc, #20]	; (8008b30 <MX_USART3_UART_Init+0x4c>)
 8008b1c:	f004 fc4e 	bl	800d3bc <HAL_UART_Init>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008b26:	f7f9 fc02 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008b2a:	bf00      	nop
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000fc4 	.word	0x20000fc4
 8008b34:	40004800 	.word	0x40004800

08008b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a19      	ldr	r2, [pc, #100]	; (8008bbc <HAL_UART_MspInit+0x84>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d12c      	bne.n	8008bb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	4b18      	ldr	r3, [pc, #96]	; (8008bc0 <HAL_UART_MspInit+0x88>)
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	4a17      	ldr	r2, [pc, #92]	; (8008bc0 <HAL_UART_MspInit+0x88>)
 8008b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b68:	6413      	str	r3, [r2, #64]	; 0x40
 8008b6a:	4b15      	ldr	r3, [pc, #84]	; (8008bc0 <HAL_UART_MspInit+0x88>)
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <HAL_UART_MspInit+0x88>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	4a10      	ldr	r2, [pc, #64]	; (8008bc0 <HAL_UART_MspInit+0x88>)
 8008b80:	f043 0304 	orr.w	r3, r3, #4
 8008b84:	6313      	str	r3, [r2, #48]	; 0x30
 8008b86:	4b0e      	ldr	r3, [pc, #56]	; (8008bc0 <HAL_UART_MspInit+0x88>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008b92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008ba4:	2307      	movs	r3, #7
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ba8:	f107 0314 	add.w	r3, r7, #20
 8008bac:	4619      	mov	r1, r3
 8008bae:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <HAL_UART_MspInit+0x8c>)
 8008bb0:	f001 fb0c 	bl	800a1cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3728      	adds	r7, #40	; 0x28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40004800 	.word	0x40004800
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	40020800 	.word	0x40020800

08008bc8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bcc:	4b14      	ldr	r3, [pc, #80]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008bce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bd4:	4b12      	ldr	r3, [pc, #72]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bda:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008bdc:	2202      	movs	r2, #2
 8008bde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008be0:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008be8:	2202      	movs	r2, #2
 8008bea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bec:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bf2:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bfe:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c0a:	4805      	ldr	r0, [pc, #20]	; (8008c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c0c:	f002 fc6b 	bl	800b4e6 <HAL_PCD_Init>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008c16:	f7f9 fb8a 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008c1a:	bf00      	nop
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20001008 	.word	0x20001008

08008c24 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c2c:	f107 0314 	add.w	r3, r7, #20
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	609a      	str	r2, [r3, #8]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c44:	d132      	bne.n	8008cac <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	4b1a      	ldr	r3, [pc, #104]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	4a19      	ldr	r2, [pc, #100]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	6313      	str	r3, [r2, #48]	; 0x30
 8008c56:	4b17      	ldr	r3, [pc, #92]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c70:	2303      	movs	r3, #3
 8008c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c74:	230a      	movs	r3, #10
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	480e      	ldr	r0, [pc, #56]	; (8008cb8 <HAL_PCD_MspInit+0x94>)
 8008c80:	f001 faa4 	bl	800a1cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c84:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	4a0a      	ldr	r2, [pc, #40]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	6353      	str	r3, [r2, #52]	; 0x34
 8008c90:	2300      	movs	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	4a06      	ldr	r2, [pc, #24]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8008ca0:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <HAL_PCD_MspInit+0x90>)
 8008ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cac:	bf00      	nop
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40023800 	.word	0x40023800
 8008cb8:	40020000 	.word	0x40020000

08008cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008cc0:	480d      	ldr	r0, [pc, #52]	; (8008cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008cc2:	490e      	ldr	r1, [pc, #56]	; (8008cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008cc4:	4a0e      	ldr	r2, [pc, #56]	; (8008d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008cc8:	e002      	b.n	8008cd0 <LoopCopyDataInit>

08008cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cce:	3304      	adds	r3, #4

08008cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008cd4:	d3f9      	bcc.n	8008cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008cd6:	4a0b      	ldr	r2, [pc, #44]	; (8008d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008cd8:	4c0b      	ldr	r4, [pc, #44]	; (8008d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008cdc:	e001      	b.n	8008ce2 <LoopFillZerobss>

08008cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ce0:	3204      	adds	r2, #4

08008ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ce4:	d3fb      	bcc.n	8008cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008ce6:	f7fc fb8b 	bl	8005400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cea:	f005 f931 	bl	800df50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cee:	f7f9 f9fb 	bl	80020e8 <main>
  bx  lr    
 8008cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008cfc:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8008d00:	08011634 	.word	0x08011634
  ldr r2, =_sbss
 8008d04:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8008d08:	20001528 	.word	0x20001528

08008d0c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d0c:	e7fe      	b.n	8008d0c <CAN1_RX0_IRQHandler>
	...

08008d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d14:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <HAL_Init+0x40>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a0d      	ldr	r2, [pc, #52]	; (8008d50 <HAL_Init+0x40>)
 8008d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <HAL_Init+0x40>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <HAL_Init+0x40>)
 8008d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <HAL_Init+0x40>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <HAL_Init+0x40>)
 8008d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d38:	2003      	movs	r0, #3
 8008d3a:	f000 fe91 	bl	8009a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d3e:	200f      	movs	r0, #15
 8008d40:	f000 f808 	bl	8008d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d44:	f7fb fcbc 	bl	80046c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40023c00 	.word	0x40023c00

08008d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d5c:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <HAL_InitTick+0x54>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_InitTick+0x58>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fead 	bl	8009ad2 <HAL_SYSTICK_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e00e      	b.n	8008da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b0f      	cmp	r3, #15
 8008d86:	d80a      	bhi.n	8008d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	f000 fe71 	bl	8009a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d94:	4a06      	ldr	r2, [pc, #24]	; (8008db0 <HAL_InitTick+0x5c>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e000      	b.n	8008da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	2000028c 	.word	0x2000028c
 8008dac:	20000324 	.word	0x20000324
 8008db0:	20000320 	.word	0x20000320

08008db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <HAL_IncTick+0x20>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <HAL_IncTick+0x24>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	4a04      	ldr	r2, [pc, #16]	; (8008dd8 <HAL_IncTick+0x24>)
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000324 	.word	0x20000324
 8008dd8:	20001514 	.word	0x20001514

08008ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  return uwTick;
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <HAL_GetTick+0x14>)
 8008de2:	681b      	ldr	r3, [r3, #0]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20001514 	.word	0x20001514

08008df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008dfc:	f7ff ffee 	bl	8008ddc <HAL_GetTick>
 8008e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d005      	beq.n	8008e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e0e:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <HAL_Delay+0x44>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e1a:	bf00      	nop
 8008e1c:	f7ff ffde 	bl	8008ddc <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d8f7      	bhi.n	8008e1c <HAL_Delay+0x28>
  {
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000324 	.word	0x20000324

08008e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e033      	b.n	8008eba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7f8 f9a2 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d118      	bne.n	8008eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e82:	f023 0302 	bic.w	r3, r3, #2
 8008e86:	f043 0202 	orr.w	r2, r3, #2
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fb78 	bl	8009584 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0201 	orr.w	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8008eaa:	e001      	b.n	8008eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b086      	sub	sp, #24
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f003 0320 	and.w	r3, r3, #32
 8008ef0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d049      	beq.n	8008f8c <HAL_ADC_IRQHandler+0xca>
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d046      	beq.n	8008f8c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d105      	bne.n	8008f16 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d12b      	bne.n	8008f7c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d127      	bne.n	8008f7c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d006      	beq.n	8008f48 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d119      	bne.n	8008f7c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0220 	bic.w	r2, r2, #32
 8008f56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d105      	bne.n	8008f7c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	f043 0201 	orr.w	r2, r3, #1
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7f9 f9cb 	bl	8002318 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f06f 0212 	mvn.w	r2, #18
 8008f8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d057      	beq.n	8009052 <HAL_ADC_IRQHandler+0x190>
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d054      	beq.n	8009052 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d105      	bne.n	8008fc0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d139      	bne.n	8009042 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d12b      	bne.n	8009042 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d124      	bne.n	8009042 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009002:	2b00      	cmp	r3, #0
 8009004:	d11d      	bne.n	8009042 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800900a:	2b00      	cmp	r3, #0
 800900c:	d119      	bne.n	8009042 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800901c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009032:	2b00      	cmp	r3, #0
 8009034:	d105      	bne.n	8009042 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f043 0201 	orr.w	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fc1c 	bl	8009880 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f06f 020c 	mvn.w	r2, #12
 8009050:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009060:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d017      	beq.n	8009098 <HAL_ADC_IRQHandler+0x1d6>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d014      	beq.n	8009098 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b01      	cmp	r3, #1
 800907a:	d10d      	bne.n	8009098 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009080:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f945 	bl	8009318 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f06f 0201 	mvn.w	r2, #1
 8009096:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090a6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d015      	beq.n	80090da <HAL_ADC_IRQHandler+0x218>
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d012      	beq.n	80090da <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	f043 0202 	orr.w	r2, r3, #2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f06f 0220 	mvn.w	r2, #32
 80090c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f92e 	bl	800932c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0220 	mvn.w	r2, #32
 80090d8:	601a      	str	r2, [r3, #0]
  }
}
 80090da:	bf00      	nop
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_ADC_Start_DMA+0x1e>
 80090fe:	2302      	movs	r3, #2
 8009100:	e0e9      	b.n	80092d6 <HAL_ADC_Start_DMA+0x1f2>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b01      	cmp	r3, #1
 8009116:	d018      	beq.n	800914a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009128:	4b6d      	ldr	r3, [pc, #436]	; (80092e0 <HAL_ADC_Start_DMA+0x1fc>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a6d      	ldr	r2, [pc, #436]	; (80092e4 <HAL_ADC_Start_DMA+0x200>)
 800912e:	fba2 2303 	umull	r2, r3, r2, r3
 8009132:	0c9a      	lsrs	r2, r3, #18
 8009134:	4613      	mov	r3, r2
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	4413      	add	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800913c:	e002      	b.n	8009144 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3b01      	subs	r3, #1
 8009142:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f9      	bne.n	800913e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009158:	d107      	bne.n	800916a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009168:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b01      	cmp	r3, #1
 8009176:	f040 80a1 	bne.w	80092bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009182:	f023 0301 	bic.w	r3, r3, #1
 8009186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80091a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b8:	d106      	bne.n	80091c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	f023 0206 	bic.w	r2, r3, #6
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	645a      	str	r2, [r3, #68]	; 0x44
 80091c6:	e002      	b.n	80091ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80091d6:	4b44      	ldr	r3, [pc, #272]	; (80092e8 <HAL_ADC_Start_DMA+0x204>)
 80091d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	4a43      	ldr	r2, [pc, #268]	; (80092ec <HAL_ADC_Start_DMA+0x208>)
 80091e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e6:	4a42      	ldr	r2, [pc, #264]	; (80092f0 <HAL_ADC_Start_DMA+0x20c>)
 80091e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	4a41      	ldr	r2, [pc, #260]	; (80092f4 <HAL_ADC_Start_DMA+0x210>)
 80091f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80091fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800920a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800921a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	334c      	adds	r3, #76	; 0x4c
 8009226:	4619      	mov	r1, r3
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f000 fd0c 	bl	8009c48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f003 031f 	and.w	r3, r3, #31
 8009238:	2b00      	cmp	r3, #0
 800923a:	d12a      	bne.n	8009292 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a2d      	ldr	r2, [pc, #180]	; (80092f8 <HAL_ADC_Start_DMA+0x214>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d015      	beq.n	8009272 <HAL_ADC_Start_DMA+0x18e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a2c      	ldr	r2, [pc, #176]	; (80092fc <HAL_ADC_Start_DMA+0x218>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d105      	bne.n	800925c <HAL_ADC_Start_DMA+0x178>
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <HAL_ADC_Start_DMA+0x204>)
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a27      	ldr	r2, [pc, #156]	; (8009300 <HAL_ADC_Start_DMA+0x21c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d136      	bne.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
 8009266:	4b20      	ldr	r3, [pc, #128]	; (80092e8 <HAL_ADC_Start_DMA+0x204>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f003 0310 	and.w	r3, r3, #16
 800926e:	2b00      	cmp	r3, #0
 8009270:	d130      	bne.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d129      	bne.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800928e:	609a      	str	r2, [r3, #8]
 8009290:	e020      	b.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <HAL_ADC_Start_DMA+0x214>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d11b      	bne.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d114      	bne.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80092b8:	609a      	str	r2, [r3, #8]
 80092ba:	e00b      	b.n	80092d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	f043 0210 	orr.w	r2, r3, #16
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092cc:	f043 0201 	orr.w	r2, r3, #1
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	2000028c 	.word	0x2000028c
 80092e4:	431bde83 	.word	0x431bde83
 80092e8:	40012300 	.word	0x40012300
 80092ec:	0800977d 	.word	0x0800977d
 80092f0:	08009837 	.word	0x08009837
 80092f4:	08009853 	.word	0x08009853
 80092f8:	40012000 	.word	0x40012000
 80092fc:	40012100 	.word	0x40012100
 8009300:	40012200 	.word	0x40012200

08009304 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_ADC_ConfigChannel+0x1c>
 8009358:	2302      	movs	r3, #2
 800935a:	e105      	b.n	8009568 <HAL_ADC_ConfigChannel+0x228>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b09      	cmp	r3, #9
 800936a:	d925      	bls.n	80093b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68d9      	ldr	r1, [r3, #12]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	b29b      	uxth	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	4613      	mov	r3, r2
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	4413      	add	r3, r2
 8009380:	3b1e      	subs	r3, #30
 8009382:	2207      	movs	r2, #7
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	43da      	mvns	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	400a      	ands	r2, r1
 8009390:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68d9      	ldr	r1, [r3, #12]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	4618      	mov	r0, r3
 80093a4:	4603      	mov	r3, r0
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	4403      	add	r3, r0
 80093aa:	3b1e      	subs	r3, #30
 80093ac:	409a      	lsls	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	60da      	str	r2, [r3, #12]
 80093b6:	e022      	b.n	80093fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6919      	ldr	r1, [r3, #16]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	4613      	mov	r3, r2
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4413      	add	r3, r2
 80093cc:	2207      	movs	r2, #7
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	43da      	mvns	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	400a      	ands	r2, r1
 80093da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6919      	ldr	r1, [r3, #16]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	4618      	mov	r0, r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	4403      	add	r3, r0
 80093f4:	409a      	lsls	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	2b06      	cmp	r3, #6
 8009404:	d824      	bhi.n	8009450 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	3b05      	subs	r3, #5
 8009418:	221f      	movs	r2, #31
 800941a:	fa02 f303 	lsl.w	r3, r2, r3
 800941e:	43da      	mvns	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	400a      	ands	r2, r1
 8009426:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	b29b      	uxth	r3, r3
 8009434:	4618      	mov	r0, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	3b05      	subs	r3, #5
 8009442:	fa00 f203 	lsl.w	r2, r0, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	430a      	orrs	r2, r1
 800944c:	635a      	str	r2, [r3, #52]	; 0x34
 800944e:	e04c      	b.n	80094ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	2b0c      	cmp	r3, #12
 8009456:	d824      	bhi.n	80094a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	3b23      	subs	r3, #35	; 0x23
 800946a:	221f      	movs	r2, #31
 800946c:	fa02 f303 	lsl.w	r3, r2, r3
 8009470:	43da      	mvns	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	400a      	ands	r2, r1
 8009478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	4618      	mov	r0, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	3b23      	subs	r3, #35	; 0x23
 8009494:	fa00 f203 	lsl.w	r2, r0, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
 80094a0:	e023      	b.n	80094ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	3b41      	subs	r3, #65	; 0x41
 80094b4:	221f      	movs	r2, #31
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	43da      	mvns	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	400a      	ands	r2, r1
 80094c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4618      	mov	r0, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	3b41      	subs	r3, #65	; 0x41
 80094de:	fa00 f203 	lsl.w	r2, r0, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80094ea:	4b22      	ldr	r3, [pc, #136]	; (8009574 <HAL_ADC_ConfigChannel+0x234>)
 80094ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a21      	ldr	r2, [pc, #132]	; (8009578 <HAL_ADC_ConfigChannel+0x238>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d109      	bne.n	800950c <HAL_ADC_ConfigChannel+0x1cc>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b12      	cmp	r3, #18
 80094fe:	d105      	bne.n	800950c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a19      	ldr	r2, [pc, #100]	; (8009578 <HAL_ADC_ConfigChannel+0x238>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d123      	bne.n	800955e <HAL_ADC_ConfigChannel+0x21e>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b10      	cmp	r3, #16
 800951c:	d003      	beq.n	8009526 <HAL_ADC_ConfigChannel+0x1e6>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b11      	cmp	r3, #17
 8009524:	d11b      	bne.n	800955e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b10      	cmp	r3, #16
 8009538:	d111      	bne.n	800955e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800953a:	4b10      	ldr	r3, [pc, #64]	; (800957c <HAL_ADC_ConfigChannel+0x23c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a10      	ldr	r2, [pc, #64]	; (8009580 <HAL_ADC_ConfigChannel+0x240>)
 8009540:	fba2 2303 	umull	r2, r3, r2, r3
 8009544:	0c9a      	lsrs	r2, r3, #18
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009550:	e002      	b.n	8009558 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	3b01      	subs	r3, #1
 8009556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1f9      	bne.n	8009552 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	40012300 	.word	0x40012300
 8009578:	40012000 	.word	0x40012000
 800957c:	2000028c 	.word	0x2000028c
 8009580:	431bde83 	.word	0x431bde83

08009584 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800958c:	4b79      	ldr	r3, [pc, #484]	; (8009774 <ADC_Init+0x1f0>)
 800958e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	431a      	orrs	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6859      	ldr	r1, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	021a      	lsls	r2, r3, #8
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80095dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6859      	ldr	r1, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6899      	ldr	r1, [r3, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	4a58      	ldr	r2, [pc, #352]	; (8009778 <ADC_Init+0x1f4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d022      	beq.n	8009662 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689a      	ldr	r2, [r3, #8]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800962a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6899      	ldr	r1, [r3, #8]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800964c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6899      	ldr	r1, [r3, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	609a      	str	r2, [r3, #8]
 8009660:	e00f      	b.n	8009682 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009680:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0202 	bic.w	r2, r2, #2
 8009690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6899      	ldr	r1, [r3, #8]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7e1b      	ldrb	r3, [r3, #24]
 800969c:	005a      	lsls	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01b      	beq.n	80096e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80096ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6859      	ldr	r1, [r3, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	3b01      	subs	r3, #1
 80096dc:	035a      	lsls	r2, r3, #13
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	e007      	b.n	80096f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	3b01      	subs	r3, #1
 8009714:	051a      	lsls	r2, r3, #20
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800972c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6899      	ldr	r1, [r3, #8]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800973a:	025a      	lsls	r2, r3, #9
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6899      	ldr	r1, [r3, #8]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	029a      	lsls	r2, r3, #10
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	609a      	str	r2, [r3, #8]
}
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	40012300 	.word	0x40012300
 8009778:	0f000001 	.word	0x0f000001

0800977c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009788:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009792:	2b00      	cmp	r3, #0
 8009794:	d13c      	bne.n	8009810 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d12b      	bne.n	8009808 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d127      	bne.n	8009808 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d006      	beq.n	80097d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d119      	bne.n	8009808 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0220 	bic.w	r2, r2, #32
 80097e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009800:	f043 0201 	orr.w	r2, r3, #1
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7f8 fd85 	bl	8002318 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800980e:	e00e      	b.n	800982e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fd85 	bl	800932c <HAL_ADC_ErrorCallback>
}
 8009822:	e004      	b.n	800982e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff fd5d 	bl	8009304 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2240      	movs	r2, #64	; 0x40
 8009864:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986a:	f043 0204 	orr.w	r2, r3, #4
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff fd5a 	bl	800932c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <__NVIC_SetPriorityGrouping+0x44>)
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80098b0:	4013      	ands	r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80098bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80098c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098c6:	4a04      	ldr	r2, [pc, #16]	; (80098d8 <__NVIC_SetPriorityGrouping+0x44>)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	60d3      	str	r3, [r2, #12]
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	e000ed00 	.word	0xe000ed00

080098dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <__NVIC_GetPriorityGrouping+0x18>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	0a1b      	lsrs	r3, r3, #8
 80098e6:	f003 0307 	and.w	r3, r3, #7
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	e000ed00 	.word	0xe000ed00

080098f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009906:	2b00      	cmp	r3, #0
 8009908:	db0b      	blt.n	8009922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	f003 021f 	and.w	r2, r3, #31
 8009910:	4907      	ldr	r1, [pc, #28]	; (8009930 <__NVIC_EnableIRQ+0x38>)
 8009912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	2001      	movs	r0, #1
 800991a:	fa00 f202 	lsl.w	r2, r0, r2
 800991e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	e000e100 	.word	0xe000e100

08009934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009944:	2b00      	cmp	r3, #0
 8009946:	db0a      	blt.n	800995e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	b2da      	uxtb	r2, r3
 800994c:	490c      	ldr	r1, [pc, #48]	; (8009980 <__NVIC_SetPriority+0x4c>)
 800994e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009952:	0112      	lsls	r2, r2, #4
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	440b      	add	r3, r1
 8009958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800995c:	e00a      	b.n	8009974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	b2da      	uxtb	r2, r3
 8009962:	4908      	ldr	r1, [pc, #32]	; (8009984 <__NVIC_SetPriority+0x50>)
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	3b04      	subs	r3, #4
 800996c:	0112      	lsls	r2, r2, #4
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	440b      	add	r3, r1
 8009972:	761a      	strb	r2, [r3, #24]
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	e000e100 	.word	0xe000e100
 8009984:	e000ed00 	.word	0xe000ed00

08009988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009988:	b480      	push	{r7}
 800998a:	b089      	sub	sp, #36	; 0x24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f1c3 0307 	rsb	r3, r3, #7
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	bf28      	it	cs
 80099a6:	2304      	movcs	r3, #4
 80099a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	3304      	adds	r3, #4
 80099ae:	2b06      	cmp	r3, #6
 80099b0:	d902      	bls.n	80099b8 <NVIC_EncodePriority+0x30>
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	3b03      	subs	r3, #3
 80099b6:	e000      	b.n	80099ba <NVIC_EncodePriority+0x32>
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	fa02 f303 	lsl.w	r3, r2, r3
 80099c6:	43da      	mvns	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	401a      	ands	r2, r3
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099d0:	f04f 31ff 	mov.w	r1, #4294967295
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	fa01 f303 	lsl.w	r3, r1, r3
 80099da:	43d9      	mvns	r1, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099e0:	4313      	orrs	r3, r2
         );
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3724      	adds	r7, #36	; 0x24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80099f4:	f3bf 8f4f 	dsb	sy
}
 80099f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <__NVIC_SystemReset+0x24>)
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009a02:	4904      	ldr	r1, [pc, #16]	; (8009a14 <__NVIC_SystemReset+0x24>)
 8009a04:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <__NVIC_SystemReset+0x28>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009a0a:	f3bf 8f4f 	dsb	sy
}
 8009a0e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <__NVIC_SystemReset+0x20>
 8009a14:	e000ed00 	.word	0xe000ed00
 8009a18:	05fa0004 	.word	0x05fa0004

08009a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a2c:	d301      	bcc.n	8009a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e00f      	b.n	8009a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009a32:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <SysTick_Config+0x40>)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009a3a:	210f      	movs	r1, #15
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	f7ff ff78 	bl	8009934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <SysTick_Config+0x40>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009a4a:	4b04      	ldr	r3, [pc, #16]	; (8009a5c <SysTick_Config+0x40>)
 8009a4c:	2207      	movs	r2, #7
 8009a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	e000e010 	.word	0xe000e010

08009a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff ff13 	bl	8009894 <__NVIC_SetPriorityGrouping>
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b086      	sub	sp, #24
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	607a      	str	r2, [r7, #4]
 8009a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a88:	f7ff ff28 	bl	80098dc <__NVIC_GetPriorityGrouping>
 8009a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	6978      	ldr	r0, [r7, #20]
 8009a94:	f7ff ff78 	bl	8009988 <NVIC_EncodePriority>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff ff47 	bl	8009934 <__NVIC_SetPriority>
}
 8009aa6:	bf00      	nop
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff ff1b 	bl	80098f8 <__NVIC_EnableIRQ>
}
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009ace:	f7ff ff8f 	bl	80099f0 <__NVIC_SystemReset>

08009ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff ff9e 	bl	8009a1c <SysTick_Config>
 8009ae0:	4603      	mov	r3, r0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009af8:	f7ff f970 	bl	8008ddc <HAL_GetTick>
 8009afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e099      	b.n	8009c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 0201 	bic.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b28:	e00f      	b.n	8009b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b2a:	f7ff f957 	bl	8008ddc <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b05      	cmp	r3, #5
 8009b36:	d908      	bls.n	8009b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2203      	movs	r2, #3
 8009b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e078      	b.n	8009c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e8      	bne.n	8009b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4b38      	ldr	r3, [pc, #224]	; (8009c44 <HAL_DMA_Init+0x158>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d107      	bne.n	8009bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	4313      	orrs	r3, r2
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d117      	bne.n	8009c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00e      	beq.n	8009c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fa6f 	bl	800a0d4 <DMA_CheckFifoParam>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d008      	beq.n	8009c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2240      	movs	r2, #64	; 0x40
 8009c00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e016      	b.n	8009c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa26 	bl	800a068 <DMA_CalcBaseAndBitshift>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c24:	223f      	movs	r2, #63	; 0x3f
 8009c26:	409a      	lsls	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	f010803f 	.word	0xf010803f

08009c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <HAL_DMA_Start_IT+0x26>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	e040      	b.n	8009cf0 <HAL_DMA_Start_IT+0xa8>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d12f      	bne.n	8009ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2202      	movs	r2, #2
 8009c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	68b9      	ldr	r1, [r7, #8]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f9b8 	bl	800a00c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca0:	223f      	movs	r2, #63	; 0x3f
 8009ca2:	409a      	lsls	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f042 0216 	orr.w	r2, r2, #22
 8009cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f042 0208 	orr.w	r2, r2, #8
 8009cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0201 	orr.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e005      	b.n	8009cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
 8009cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009d04:	4b8e      	ldr	r3, [pc, #568]	; (8009f40 <HAL_DMA_IRQHandler+0x248>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a8e      	ldr	r2, [pc, #568]	; (8009f44 <HAL_DMA_IRQHandler+0x24c>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	0a9b      	lsrs	r3, r3, #10
 8009d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d22:	2208      	movs	r2, #8
 8009d24:	409a      	lsls	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d01a      	beq.n	8009d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d013      	beq.n	8009d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f022 0204 	bic.w	r2, r2, #4
 8009d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d50:	2208      	movs	r2, #8
 8009d52:	409a      	lsls	r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5c:	f043 0201 	orr.w	r2, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d68:	2201      	movs	r2, #1
 8009d6a:	409a      	lsls	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d012      	beq.n	8009d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00b      	beq.n	8009d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d86:	2201      	movs	r2, #1
 8009d88:	409a      	lsls	r2, r3
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d92:	f043 0202 	orr.w	r2, r3, #2
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9e:	2204      	movs	r2, #4
 8009da0:	409a      	lsls	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4013      	ands	r3, r2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d012      	beq.n	8009dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	409a      	lsls	r2, r3
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc8:	f043 0204 	orr.w	r2, r3, #4
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd4:	2210      	movs	r2, #16
 8009dd6:	409a      	lsls	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d043      	beq.n	8009e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d03c      	beq.n	8009e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df2:	2210      	movs	r2, #16
 8009df4:	409a      	lsls	r2, r3
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d018      	beq.n	8009e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d108      	bne.n	8009e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d024      	beq.n	8009e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
 8009e26:	e01f      	b.n	8009e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01b      	beq.n	8009e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	4798      	blx	r3
 8009e38:	e016      	b.n	8009e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d107      	bne.n	8009e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0208 	bic.w	r2, r2, #8
 8009e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	409a      	lsls	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4013      	ands	r3, r2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 808f 	beq.w	8009f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 0310 	and.w	r3, r3, #16
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 8087 	beq.w	8009f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e8e:	2220      	movs	r2, #32
 8009e90:	409a      	lsls	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d136      	bne.n	8009f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 0216 	bic.w	r2, r2, #22
 8009eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	695a      	ldr	r2, [r3, #20]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d103      	bne.n	8009ed2 <HAL_DMA_IRQHandler+0x1da>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0208 	bic.w	r2, r2, #8
 8009ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee6:	223f      	movs	r2, #63	; 0x3f
 8009ee8:	409a      	lsls	r2, r3
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d07e      	beq.n	800a004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	4798      	blx	r3
        }
        return;
 8009f0e:	e079      	b.n	800a004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d01d      	beq.n	8009f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10d      	bne.n	8009f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d031      	beq.n	8009f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
 8009f3c:	e02c      	b.n	8009f98 <HAL_DMA_IRQHandler+0x2a0>
 8009f3e:	bf00      	nop
 8009f40:	2000028c 	.word	0x2000028c
 8009f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d023      	beq.n	8009f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	4798      	blx	r3
 8009f58:	e01e      	b.n	8009f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10f      	bne.n	8009f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0210 	bic.w	r2, r2, #16
 8009f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d032      	beq.n	800a006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d022      	beq.n	8009ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2205      	movs	r2, #5
 8009fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0201 	bic.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d307      	bcc.n	8009fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1f2      	bne.n	8009fc4 <HAL_DMA_IRQHandler+0x2cc>
 8009fde:	e000      	b.n	8009fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
 800a002:	e000      	b.n	800a006 <HAL_DMA_IRQHandler+0x30e>
        return;
 800a004:	bf00      	nop
    }
  }
}
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2b40      	cmp	r3, #64	; 0x40
 800a038:	d108      	bne.n	800a04c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a04a:	e007      	b.n	800a05c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	60da      	str	r2, [r3, #12]
}
 800a05c:	bf00      	nop
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	3b10      	subs	r3, #16
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <DMA_CalcBaseAndBitshift+0x64>)
 800a07a:	fba2 2303 	umull	r2, r3, r2, r3
 800a07e:	091b      	lsrs	r3, r3, #4
 800a080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a082:	4a13      	ldr	r2, [pc, #76]	; (800a0d0 <DMA_CalcBaseAndBitshift+0x68>)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b03      	cmp	r3, #3
 800a094:	d909      	bls.n	800a0aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	659a      	str	r2, [r3, #88]	; 0x58
 800a0a8:	e007      	b.n	800a0ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	aaaaaaab 	.word	0xaaaaaaab
 800a0d0:	08011240 	.word	0x08011240

0800a0d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d11f      	bne.n	800a12e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d856      	bhi.n	800a1a2 <DMA_CheckFifoParam+0xce>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <DMA_CheckFifoParam+0x28>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a10d 	.word	0x0800a10d
 800a100:	0800a11f 	.word	0x0800a11f
 800a104:	0800a10d 	.word	0x0800a10d
 800a108:	0800a1a3 	.word	0x0800a1a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d046      	beq.n	800a1a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a11c:	e043      	b.n	800a1a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a126:	d140      	bne.n	800a1aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a12c:	e03d      	b.n	800a1aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a136:	d121      	bne.n	800a17c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d837      	bhi.n	800a1ae <DMA_CheckFifoParam+0xda>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <DMA_CheckFifoParam+0x70>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a155 	.word	0x0800a155
 800a148:	0800a15b 	.word	0x0800a15b
 800a14c:	0800a155 	.word	0x0800a155
 800a150:	0800a16d 	.word	0x0800a16d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	73fb      	strb	r3, [r7, #15]
      break;
 800a158:	e030      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d025      	beq.n	800a1b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a16a:	e022      	b.n	800a1b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a174:	d11f      	bne.n	800a1b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a17a:	e01c      	b.n	800a1b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d903      	bls.n	800a18a <DMA_CheckFifoParam+0xb6>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b03      	cmp	r3, #3
 800a186:	d003      	beq.n	800a190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a188:	e018      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	73fb      	strb	r3, [r7, #15]
      break;
 800a18e:	e015      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00e      	beq.n	800a1ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a0:	e00b      	b.n	800a1ba <DMA_CheckFifoParam+0xe6>
      break;
 800a1a2:	bf00      	nop
 800a1a4:	e00a      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      break;
 800a1a6:	bf00      	nop
 800a1a8:	e008      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      break;
 800a1aa:	bf00      	nop
 800a1ac:	e006      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      break;
 800a1ae:	bf00      	nop
 800a1b0:	e004      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      break;
 800a1b2:	bf00      	nop
 800a1b4:	e002      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      break;   
 800a1b6:	bf00      	nop
 800a1b8:	e000      	b.n	800a1bc <DMA_CheckFifoParam+0xe8>
      break;
 800a1ba:	bf00      	nop
    }
  } 
  
  return status; 
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop

0800a1cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b089      	sub	sp, #36	; 0x24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	61fb      	str	r3, [r7, #28]
 800a1e6:	e16b      	b.n	800a4c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	429a      	cmp	r2, r3
 800a202:	f040 815a 	bne.w	800a4ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	f003 0303 	and.w	r3, r3, #3
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d005      	beq.n	800a21e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d130      	bne.n	800a280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	2203      	movs	r2, #3
 800a22a:	fa02 f303 	lsl.w	r3, r2, r3
 800a22e:	43db      	mvns	r3, r3
 800a230:	69ba      	ldr	r2, [r7, #24]
 800a232:	4013      	ands	r3, r2
 800a234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	fa02 f303 	lsl.w	r3, r2, r3
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	4313      	orrs	r3, r2
 800a246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a254:	2201      	movs	r2, #1
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	fa02 f303 	lsl.w	r3, r2, r3
 800a25c:	43db      	mvns	r3, r3
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	4013      	ands	r3, r2
 800a262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	091b      	lsrs	r3, r3, #4
 800a26a:	f003 0201 	and.w	r2, r3, #1
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	4313      	orrs	r3, r2
 800a278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	69ba      	ldr	r2, [r7, #24]
 800a27e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f003 0303 	and.w	r3, r3, #3
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d017      	beq.n	800a2bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	2203      	movs	r2, #3
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	43db      	mvns	r3, r3
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d123      	bne.n	800a310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	08da      	lsrs	r2, r3, #3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3208      	adds	r2, #8
 800a2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f003 0307 	and.w	r3, r3, #7
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	220f      	movs	r2, #15
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	43db      	mvns	r3, r3
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	08da      	lsrs	r2, r3, #3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3208      	adds	r2, #8
 800a30a:	69b9      	ldr	r1, [r7, #24]
 800a30c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	2203      	movs	r2, #3
 800a31c:	fa02 f303 	lsl.w	r3, r2, r3
 800a320:	43db      	mvns	r3, r3
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	4013      	ands	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f003 0203 	and.w	r2, r3, #3
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 80b4 	beq.w	800a4ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	4b60      	ldr	r3, [pc, #384]	; (800a4d8 <HAL_GPIO_Init+0x30c>)
 800a358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a35a:	4a5f      	ldr	r2, [pc, #380]	; (800a4d8 <HAL_GPIO_Init+0x30c>)
 800a35c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a360:	6453      	str	r3, [r2, #68]	; 0x44
 800a362:	4b5d      	ldr	r3, [pc, #372]	; (800a4d8 <HAL_GPIO_Init+0x30c>)
 800a364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a36e:	4a5b      	ldr	r2, [pc, #364]	; (800a4dc <HAL_GPIO_Init+0x310>)
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	089b      	lsrs	r3, r3, #2
 800a374:	3302      	adds	r3, #2
 800a376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a37a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	220f      	movs	r2, #15
 800a386:	fa02 f303 	lsl.w	r3, r2, r3
 800a38a:	43db      	mvns	r3, r3
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	4013      	ands	r3, r2
 800a390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a52      	ldr	r2, [pc, #328]	; (800a4e0 <HAL_GPIO_Init+0x314>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d02b      	beq.n	800a3f2 <HAL_GPIO_Init+0x226>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a51      	ldr	r2, [pc, #324]	; (800a4e4 <HAL_GPIO_Init+0x318>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d025      	beq.n	800a3ee <HAL_GPIO_Init+0x222>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a50      	ldr	r2, [pc, #320]	; (800a4e8 <HAL_GPIO_Init+0x31c>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d01f      	beq.n	800a3ea <HAL_GPIO_Init+0x21e>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a4f      	ldr	r2, [pc, #316]	; (800a4ec <HAL_GPIO_Init+0x320>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d019      	beq.n	800a3e6 <HAL_GPIO_Init+0x21a>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a4e      	ldr	r2, [pc, #312]	; (800a4f0 <HAL_GPIO_Init+0x324>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d013      	beq.n	800a3e2 <HAL_GPIO_Init+0x216>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a4d      	ldr	r2, [pc, #308]	; (800a4f4 <HAL_GPIO_Init+0x328>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00d      	beq.n	800a3de <HAL_GPIO_Init+0x212>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a4c      	ldr	r2, [pc, #304]	; (800a4f8 <HAL_GPIO_Init+0x32c>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d007      	beq.n	800a3da <HAL_GPIO_Init+0x20e>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a4b      	ldr	r2, [pc, #300]	; (800a4fc <HAL_GPIO_Init+0x330>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d101      	bne.n	800a3d6 <HAL_GPIO_Init+0x20a>
 800a3d2:	2307      	movs	r3, #7
 800a3d4:	e00e      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3d6:	2308      	movs	r3, #8
 800a3d8:	e00c      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3da:	2306      	movs	r3, #6
 800a3dc:	e00a      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3de:	2305      	movs	r3, #5
 800a3e0:	e008      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3e2:	2304      	movs	r3, #4
 800a3e4:	e006      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e004      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e002      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <HAL_GPIO_Init+0x228>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	f002 0203 	and.w	r2, r2, #3
 800a3fa:	0092      	lsls	r2, r2, #2
 800a3fc:	4093      	lsls	r3, r2
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	4313      	orrs	r3, r2
 800a402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a404:	4935      	ldr	r1, [pc, #212]	; (800a4dc <HAL_GPIO_Init+0x310>)
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	089b      	lsrs	r3, r3, #2
 800a40a:	3302      	adds	r3, #2
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a412:	4b3b      	ldr	r3, [pc, #236]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	43db      	mvns	r3, r3
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	4013      	ands	r3, r2
 800a420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a436:	4a32      	ldr	r2, [pc, #200]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a43c:	4b30      	ldr	r3, [pc, #192]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	43db      	mvns	r3, r3
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	4013      	ands	r3, r2
 800a44a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a460:	4a27      	ldr	r2, [pc, #156]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a466:	4b26      	ldr	r3, [pc, #152]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	43db      	mvns	r3, r3
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	4013      	ands	r3, r2
 800a474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	4313      	orrs	r3, r2
 800a488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a48a:	4a1d      	ldr	r2, [pc, #116]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a490:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	43db      	mvns	r3, r3
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	4013      	ands	r3, r2
 800a49e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a4b4:	4a12      	ldr	r2, [pc, #72]	; (800a500 <HAL_GPIO_Init+0x334>)
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	61fb      	str	r3, [r7, #28]
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	2b0f      	cmp	r3, #15
 800a4c4:	f67f ae90 	bls.w	800a1e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	3724      	adds	r7, #36	; 0x24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40013800 	.word	0x40013800
 800a4e0:	40020000 	.word	0x40020000
 800a4e4:	40020400 	.word	0x40020400
 800a4e8:	40020800 	.word	0x40020800
 800a4ec:	40020c00 	.word	0x40020c00
 800a4f0:	40021000 	.word	0x40021000
 800a4f4:	40021400 	.word	0x40021400
 800a4f8:	40021800 	.word	0x40021800
 800a4fc:	40021c00 	.word	0x40021c00
 800a500:	40013c00 	.word	0x40013c00

0800a504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691a      	ldr	r2, [r3, #16]
 800a514:	887b      	ldrh	r3, [r7, #2]
 800a516:	4013      	ands	r3, r2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a51c:	2301      	movs	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
 800a520:	e001      	b.n	800a526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	807b      	strh	r3, [r7, #2]
 800a540:	4613      	mov	r3, r2
 800a542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a544:	787b      	ldrb	r3, [r7, #1]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a54a:	887a      	ldrh	r2, [r7, #2]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a550:	e003      	b.n	800a55a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a552:	887b      	ldrh	r3, [r7, #2]
 800a554:	041a      	lsls	r2, r3, #16
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	619a      	str	r2, [r3, #24]
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
	...

0800a568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e12b      	b.n	800a7d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f7 fd2c 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2224      	movs	r2, #36	; 0x24
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0201 	bic.w	r2, r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a5cc:	f001 fd16 	bl	800bffc <HAL_RCC_GetPCLK1Freq>
 800a5d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	4a81      	ldr	r2, [pc, #516]	; (800a7dc <HAL_I2C_Init+0x274>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d807      	bhi.n	800a5ec <HAL_I2C_Init+0x84>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4a80      	ldr	r2, [pc, #512]	; (800a7e0 <HAL_I2C_Init+0x278>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	bf94      	ite	ls
 800a5e4:	2301      	movls	r3, #1
 800a5e6:	2300      	movhi	r3, #0
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	e006      	b.n	800a5fa <HAL_I2C_Init+0x92>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4a7d      	ldr	r2, [pc, #500]	; (800a7e4 <HAL_I2C_Init+0x27c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	bf94      	ite	ls
 800a5f4:	2301      	movls	r3, #1
 800a5f6:	2300      	movhi	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e0e7      	b.n	800a7d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4a78      	ldr	r2, [pc, #480]	; (800a7e8 <HAL_I2C_Init+0x280>)
 800a606:	fba2 2303 	umull	r2, r3, r2, r3
 800a60a:	0c9b      	lsrs	r3, r3, #18
 800a60c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	430a      	orrs	r2, r1
 800a620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	4a6a      	ldr	r2, [pc, #424]	; (800a7dc <HAL_I2C_Init+0x274>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d802      	bhi.n	800a63c <HAL_I2C_Init+0xd4>
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	3301      	adds	r3, #1
 800a63a:	e009      	b.n	800a650 <HAL_I2C_Init+0xe8>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	4a69      	ldr	r2, [pc, #420]	; (800a7ec <HAL_I2C_Init+0x284>)
 800a648:	fba2 2303 	umull	r2, r3, r2, r3
 800a64c:	099b      	lsrs	r3, r3, #6
 800a64e:	3301      	adds	r3, #1
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	430b      	orrs	r3, r1
 800a656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a662:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	495c      	ldr	r1, [pc, #368]	; (800a7dc <HAL_I2C_Init+0x274>)
 800a66c:	428b      	cmp	r3, r1
 800a66e:	d819      	bhi.n	800a6a4 <HAL_I2C_Init+0x13c>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	1e59      	subs	r1, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a67e:	1c59      	adds	r1, r3, #1
 800a680:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a684:	400b      	ands	r3, r1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <HAL_I2C_Init+0x138>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	1e59      	subs	r1, r3, #1
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	fbb1 f3f3 	udiv	r3, r1, r3
 800a698:	3301      	adds	r3, #1
 800a69a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a69e:	e051      	b.n	800a744 <HAL_I2C_Init+0x1dc>
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	e04f      	b.n	800a744 <HAL_I2C_Init+0x1dc>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d111      	bne.n	800a6d0 <HAL_I2C_Init+0x168>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	1e58      	subs	r0, r3, #1
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6859      	ldr	r1, [r3, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	440b      	add	r3, r1
 800a6ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800a6be:	3301      	adds	r3, #1
 800a6c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bf0c      	ite	eq
 800a6c8:	2301      	moveq	r3, #1
 800a6ca:	2300      	movne	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	e012      	b.n	800a6f6 <HAL_I2C_Init+0x18e>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	1e58      	subs	r0, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6859      	ldr	r1, [r3, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	440b      	add	r3, r1
 800a6de:	0099      	lsls	r1, r3, #2
 800a6e0:	440b      	add	r3, r1
 800a6e2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bf0c      	ite	eq
 800a6f0:	2301      	moveq	r3, #1
 800a6f2:	2300      	movne	r3, #0
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <HAL_I2C_Init+0x196>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e022      	b.n	800a744 <HAL_I2C_Init+0x1dc>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10e      	bne.n	800a724 <HAL_I2C_Init+0x1bc>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	1e58      	subs	r0, r3, #1
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6859      	ldr	r1, [r3, #4]
 800a70e:	460b      	mov	r3, r1
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	440b      	add	r3, r1
 800a714:	fbb0 f3f3 	udiv	r3, r0, r3
 800a718:	3301      	adds	r3, #1
 800a71a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a71e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a722:	e00f      	b.n	800a744 <HAL_I2C_Init+0x1dc>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	1e58      	subs	r0, r3, #1
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6859      	ldr	r1, [r3, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	440b      	add	r3, r1
 800a732:	0099      	lsls	r1, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	fbb0 f3f3 	udiv	r3, r0, r3
 800a73a:	3301      	adds	r3, #1
 800a73c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	6809      	ldr	r1, [r1, #0]
 800a748:	4313      	orrs	r3, r2
 800a74a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69da      	ldr	r2, [r3, #28]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	430a      	orrs	r2, r1
 800a766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	6911      	ldr	r1, [r2, #16]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	68d2      	ldr	r2, [r2, #12]
 800a77e:	4311      	orrs	r1, r2
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	6812      	ldr	r2, [r2, #0]
 800a784:	430b      	orrs	r3, r1
 800a786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695a      	ldr	r2, [r3, #20]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f042 0201 	orr.w	r2, r2, #1
 800a7b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	000186a0 	.word	0x000186a0
 800a7e0:	001e847f 	.word	0x001e847f
 800a7e4:	003d08ff 	.word	0x003d08ff
 800a7e8:	431bde83 	.word	0x431bde83
 800a7ec:	10624dd3 	.word	0x10624dd3

0800a7f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af02      	add	r7, sp, #8
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	817b      	strh	r3, [r7, #10]
 800a802:	460b      	mov	r3, r1
 800a804:	813b      	strh	r3, [r7, #8]
 800a806:	4613      	mov	r3, r2
 800a808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a80a:	f7fe fae7 	bl	8008ddc <HAL_GetTick>
 800a80e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b20      	cmp	r3, #32
 800a81a:	f040 80d9 	bne.w	800a9d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	2319      	movs	r3, #25
 800a824:	2201      	movs	r2, #1
 800a826:	496d      	ldr	r1, [pc, #436]	; (800a9dc <HAL_I2C_Mem_Write+0x1ec>)
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 fc7f 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a834:	2302      	movs	r3, #2
 800a836:	e0cc      	b.n	800a9d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d101      	bne.n	800a846 <HAL_I2C_Mem_Write+0x56>
 800a842:	2302      	movs	r3, #2
 800a844:	e0c5      	b.n	800a9d2 <HAL_I2C_Mem_Write+0x1e2>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d007      	beq.n	800a86c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a87a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2221      	movs	r2, #33	; 0x21
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2240      	movs	r2, #64	; 0x40
 800a888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a3a      	ldr	r2, [r7, #32]
 800a896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a89c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4a4d      	ldr	r2, [pc, #308]	; (800a9e0 <HAL_I2C_Mem_Write+0x1f0>)
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8ae:	88f8      	ldrh	r0, [r7, #6]
 800a8b0:	893a      	ldrh	r2, [r7, #8]
 800a8b2:	8979      	ldrh	r1, [r7, #10]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	4603      	mov	r3, r0
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fab6 	bl	800ae30 <I2C_RequestMemoryWrite>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d052      	beq.n	800a970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e081      	b.n	800a9d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fd00 	bl	800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00d      	beq.n	800a8fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d107      	bne.n	800a8f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e06b      	b.n	800a9d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a914:	3b01      	subs	r3, #1
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a920:	b29b      	uxth	r3, r3
 800a922:	3b01      	subs	r3, #1
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b04      	cmp	r3, #4
 800a936:	d11b      	bne.n	800a970 <HAL_I2C_Mem_Write+0x180>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d017      	beq.n	800a970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	781a      	ldrb	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95a:	3b01      	subs	r3, #1
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a966:	b29b      	uxth	r3, r3
 800a968:	3b01      	subs	r3, #1
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1aa      	bne.n	800a8ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 fcec 	bl	800b35a <I2C_WaitOnBTFFlagUntilTimeout>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00d      	beq.n	800a9a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d107      	bne.n	800a9a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a99e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e016      	b.n	800a9d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e000      	b.n	800a9d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a9d0:	2302      	movs	r3, #2
  }
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	00100002 	.word	0x00100002
 800a9e0:	ffff0000 	.word	0xffff0000

0800a9e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08c      	sub	sp, #48	; 0x30
 800a9e8:	af02      	add	r7, sp, #8
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	817b      	strh	r3, [r7, #10]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	813b      	strh	r3, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a9fe:	f7fe f9ed 	bl	8008ddc <HAL_GetTick>
 800aa02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b20      	cmp	r3, #32
 800aa0e:	f040 8208 	bne.w	800ae22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	2319      	movs	r3, #25
 800aa18:	2201      	movs	r2, #1
 800aa1a:	497b      	ldr	r1, [pc, #492]	; (800ac08 <HAL_I2C_Mem_Read+0x224>)
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fb85 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e1fb      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <HAL_I2C_Mem_Read+0x56>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e1f4      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0301 	and.w	r3, r3, #1
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d007      	beq.n	800aa60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2222      	movs	r2, #34	; 0x22
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2240      	movs	r2, #64	; 0x40
 800aa7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800aa90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4a5b      	ldr	r2, [pc, #364]	; (800ac0c <HAL_I2C_Mem_Read+0x228>)
 800aaa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aaa2:	88f8      	ldrh	r0, [r7, #6]
 800aaa4:	893a      	ldrh	r2, [r7, #8]
 800aaa6:	8979      	ldrh	r1, [r7, #10]
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	4603      	mov	r3, r0
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 fa52 	bl	800af5c <I2C_RequestMemoryRead>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e1b0      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d113      	bne.n	800aaf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aaca:	2300      	movs	r3, #0
 800aacc:	623b      	str	r3, [r7, #32]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	623b      	str	r3, [r7, #32]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	623b      	str	r3, [r7, #32]
 800aade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e184      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d11b      	bne.n	800ab32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	61fb      	str	r3, [r7, #28]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	61fb      	str	r3, [r7, #28]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	61fb      	str	r3, [r7, #28]
 800ab1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	e164      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d11b      	bne.n	800ab72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	61bb      	str	r3, [r7, #24]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	e144      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab72:	2300      	movs	r3, #0
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	617b      	str	r3, [r7, #20]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	617b      	str	r3, [r7, #20]
 800ab86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ab88:	e138      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	f200 80f1 	bhi.w	800ad76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d123      	bne.n	800abe4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fc1b 	bl	800b3dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e139      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691a      	ldr	r2, [r3, #16]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b01      	subs	r3, #1
 800abdc:	b29a      	uxth	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800abe2:	e10b      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d14e      	bne.n	800ac8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	2200      	movs	r2, #0
 800abf4:	4906      	ldr	r1, [pc, #24]	; (800ac10 <HAL_I2C_Mem_Read+0x22c>)
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 fa98 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d008      	beq.n	800ac14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e10e      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
 800ac06:	bf00      	nop
 800ac08:	00100002 	.word	0x00100002
 800ac0c:	ffff0000 	.word	0xffff0000
 800ac10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	691a      	ldr	r2, [r3, #16]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	b2d2      	uxtb	r2, r2
 800ac30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac40:	3b01      	subs	r3, #1
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	b2d2      	uxtb	r2, r2
 800ac62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac72:	3b01      	subs	r3, #1
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac88:	e0b8      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	2200      	movs	r2, #0
 800ac92:	4966      	ldr	r1, [pc, #408]	; (800ae2c <HAL_I2C_Mem_Read+0x448>)
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 fa49 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e0bf      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691a      	ldr	r2, [r3, #16]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	b2d2      	uxtb	r2, r2
 800acc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd0:	3b01      	subs	r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	2200      	movs	r2, #0
 800acee:	494f      	ldr	r1, [pc, #316]	; (800ae2c <HAL_I2C_Mem_Read+0x448>)
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 fa1b 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e091      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	691a      	ldr	r2, [r3, #16]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	691a      	ldr	r2, [r3, #16]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4c:	b2d2      	uxtb	r2, r2
 800ad4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad74:	e042      	b.n	800adfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 fb2e 	bl	800b3dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e04c      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	b2d2      	uxtb	r2, r2
 800ad96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada6:	3b01      	subs	r3, #1
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	3b01      	subs	r3, #1
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f003 0304 	and.w	r3, r3, #4
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d118      	bne.n	800adfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ade6:	3b01      	subs	r3, #1
 800ade8:	b29a      	uxth	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f47f aec2 	bne.w	800ab8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e000      	b.n	800ae24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ae22:	2302      	movs	r3, #2
  }
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3728      	adds	r7, #40	; 0x28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	00010004 	.word	0x00010004

0800ae30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	4608      	mov	r0, r1
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4603      	mov	r3, r0
 800ae40:	817b      	strh	r3, [r7, #10]
 800ae42:	460b      	mov	r3, r1
 800ae44:	813b      	strh	r3, [r7, #8]
 800ae46:	4613      	mov	r3, r2
 800ae48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 f960 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae80:	d103      	bne.n	800ae8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e05f      	b.n	800af4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae8e:	897b      	ldrh	r3, [r7, #10]
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	461a      	mov	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	6a3a      	ldr	r2, [r7, #32]
 800aea2:	492d      	ldr	r1, [pc, #180]	; (800af58 <I2C_RequestMemoryWrite+0x128>)
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 f998 	bl	800b1da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e04c      	b.n	800af4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aecc:	6a39      	ldr	r1, [r7, #32]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 fa02 	bl	800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00d      	beq.n	800aef6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d107      	bne.n	800aef2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e02b      	b.n	800af4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d105      	bne.n	800af08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aefc:	893b      	ldrh	r3, [r7, #8]
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	611a      	str	r2, [r3, #16]
 800af06:	e021      	b.n	800af4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800af08:	893b      	ldrh	r3, [r7, #8]
 800af0a:	0a1b      	lsrs	r3, r3, #8
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af18:	6a39      	ldr	r1, [r7, #32]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f000 f9dc 	bl	800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00d      	beq.n	800af42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d107      	bne.n	800af3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e005      	b.n	800af4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af42:	893b      	ldrh	r3, [r7, #8]
 800af44:	b2da      	uxtb	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	00010002 	.word	0x00010002

0800af5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af02      	add	r7, sp, #8
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	4608      	mov	r0, r1
 800af66:	4611      	mov	r1, r2
 800af68:	461a      	mov	r2, r3
 800af6a:	4603      	mov	r3, r0
 800af6c:	817b      	strh	r3, [r7, #10]
 800af6e:	460b      	mov	r3, r1
 800af70:	813b      	strh	r3, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 f8c2 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00d      	beq.n	800afca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afbc:	d103      	bne.n	800afc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e0aa      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800afca:	897b      	ldrh	r3, [r7, #10]
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	461a      	mov	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800afd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	6a3a      	ldr	r2, [r7, #32]
 800afde:	4952      	ldr	r1, [pc, #328]	; (800b128 <I2C_RequestMemoryRead+0x1cc>)
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 f8fa 	bl	800b1da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e097      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aff0:	2300      	movs	r3, #0
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	617b      	str	r3, [r7, #20]
 800b004:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b008:	6a39      	ldr	r1, [r7, #32]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f964 	bl	800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00d      	beq.n	800b032 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d107      	bne.n	800b02e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b02c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e076      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b032:	88fb      	ldrh	r3, [r7, #6]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d105      	bne.n	800b044 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b038:	893b      	ldrh	r3, [r7, #8]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	611a      	str	r2, [r3, #16]
 800b042:	e021      	b.n	800b088 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b044:	893b      	ldrh	r3, [r7, #8]
 800b046:	0a1b      	lsrs	r3, r3, #8
 800b048:	b29b      	uxth	r3, r3
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b054:	6a39      	ldr	r1, [r7, #32]
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 f93e 	bl	800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00d      	beq.n	800b07e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	2b04      	cmp	r3, #4
 800b068:	d107      	bne.n	800b07a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b078:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e050      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b07e:	893b      	ldrh	r3, [r7, #8]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b08a:	6a39      	ldr	r1, [r7, #32]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 f923 	bl	800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00d      	beq.n	800b0b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	d107      	bne.n	800b0b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e035      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 f82b 	bl	800b12c <I2C_WaitOnFlagUntilTimeout>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00d      	beq.n	800b0f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ea:	d103      	bne.n	800b0f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	e013      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b0f8:	897b      	ldrh	r3, [r7, #10]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	f043 0301 	orr.w	r3, r3, #1
 800b100:	b2da      	uxtb	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	6a3a      	ldr	r2, [r7, #32]
 800b10c:	4906      	ldr	r1, [pc, #24]	; (800b128 <I2C_RequestMemoryRead+0x1cc>)
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f000 f863 	bl	800b1da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e000      	b.n	800b120 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	00010002 	.word	0x00010002

0800b12c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4613      	mov	r3, r2
 800b13a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b13c:	e025      	b.n	800b18a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d021      	beq.n	800b18a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b146:	f7fd fe49 	bl	8008ddc <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	429a      	cmp	r2, r3
 800b154:	d302      	bcc.n	800b15c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d116      	bne.n	800b18a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2220      	movs	r2, #32
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	f043 0220 	orr.w	r2, r3, #32
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e023      	b.n	800b1d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	0c1b      	lsrs	r3, r3, #16
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b01      	cmp	r3, #1
 800b192:	d10d      	bne.n	800b1b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	43da      	mvns	r2, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	4013      	ands	r3, r2
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bf0c      	ite	eq
 800b1a6:	2301      	moveq	r3, #1
 800b1a8:	2300      	movne	r3, #0
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	e00c      	b.n	800b1ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	43da      	mvns	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2301      	moveq	r3, #1
 800b1c4:	2300      	movne	r3, #0
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d0b6      	beq.n	800b13e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
 800b1e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b1e8:	e051      	b.n	800b28e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1f8:	d123      	bne.n	800b242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22e:	f043 0204 	orr.w	r2, r3, #4
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e046      	b.n	800b2d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b248:	d021      	beq.n	800b28e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b24a:	f7fd fdc7 	bl	8008ddc <HAL_GetTick>
 800b24e:	4602      	mov	r2, r0
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	429a      	cmp	r2, r3
 800b258:	d302      	bcc.n	800b260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d116      	bne.n	800b28e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2220      	movs	r2, #32
 800b26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	f043 0220 	orr.w	r2, r3, #32
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e020      	b.n	800b2d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	0c1b      	lsrs	r3, r3, #16
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b01      	cmp	r3, #1
 800b296:	d10c      	bne.n	800b2b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	43da      	mvns	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	bf14      	ite	ne
 800b2aa:	2301      	movne	r3, #1
 800b2ac:	2300      	moveq	r3, #0
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	e00b      	b.n	800b2ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	43da      	mvns	r2, r3
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bf14      	ite	ne
 800b2c4:	2301      	movne	r3, #1
 800b2c6:	2300      	moveq	r3, #0
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d18d      	bne.n	800b1ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2e4:	e02d      	b.n	800b342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 f8ce 	bl	800b488 <I2C_IsAcknowledgeFailed>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e02d      	b.n	800b352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d021      	beq.n	800b342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2fe:	f7fd fd6d 	bl	8008ddc <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d302      	bcc.n	800b314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d116      	bne.n	800b342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	f043 0220 	orr.w	r2, r3, #32
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e007      	b.n	800b352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b34c:	2b80      	cmp	r3, #128	; 0x80
 800b34e:	d1ca      	bne.n	800b2e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b366:	e02d      	b.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f000 f88d 	bl	800b488 <I2C_IsAcknowledgeFailed>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e02d      	b.n	800b3d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37e:	d021      	beq.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b380:	f7fd fd2c 	bl	8008ddc <HAL_GetTick>
 800b384:	4602      	mov	r2, r0
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d302      	bcc.n	800b396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d116      	bne.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	f043 0220 	orr.w	r2, r3, #32
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e007      	b.n	800b3d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	f003 0304 	and.w	r3, r3, #4
 800b3ce:	2b04      	cmp	r3, #4
 800b3d0:	d1ca      	bne.n	800b368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3e8:	e042      	b.n	800b470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b10      	cmp	r3, #16
 800b3f6:	d119      	bne.n	800b42c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f06f 0210 	mvn.w	r2, #16
 800b400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e029      	b.n	800b480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b42c:	f7fd fcd6 	bl	8008ddc <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d302      	bcc.n	800b442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d116      	bne.n	800b470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45c:	f043 0220 	orr.w	r2, r3, #32
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e007      	b.n	800b480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47a:	2b40      	cmp	r3, #64	; 0x40
 800b47c:	d1b5      	bne.n	800b3ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b49e:	d11b      	bne.n	800b4d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b4a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2220      	movs	r2, #32
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c4:	f043 0204 	orr.w	r2, r3, #4
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e000      	b.n	800b4da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e8:	b08f      	sub	sp, #60	; 0x3c
 800b4ea:	af0a      	add	r7, sp, #40	; 0x28
 800b4ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e10f      	b.n	800b718 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d106      	bne.n	800b518 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7fd fb86 	bl	8008c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2203      	movs	r2, #3
 800b51c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d102      	bne.n	800b532 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4618      	mov	r0, r3
 800b538:	f002 fa63 	bl	800da02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	603b      	str	r3, [r7, #0]
 800b542:	687e      	ldr	r6, [r7, #4]
 800b544:	466d      	mov	r5, sp
 800b546:	f106 0410 	add.w	r4, r6, #16
 800b54a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b54c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b54e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b552:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b556:	e885 0003 	stmia.w	r5, {r0, r1}
 800b55a:	1d33      	adds	r3, r6, #4
 800b55c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b55e:	6838      	ldr	r0, [r7, #0]
 800b560:	f002 f9ee 	bl	800d940 <USB_CoreInit>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2202      	movs	r2, #2
 800b56e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e0d0      	b.n	800b718 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fa51 	bl	800da24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b582:	2300      	movs	r3, #0
 800b584:	73fb      	strb	r3, [r7, #15]
 800b586:	e04a      	b.n	800b61e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b588:	7bfa      	ldrb	r2, [r7, #15]
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	4613      	mov	r3, r2
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	440b      	add	r3, r1
 800b596:	333d      	adds	r3, #61	; 0x3d
 800b598:	2201      	movs	r2, #1
 800b59a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b59c:	7bfa      	ldrb	r2, [r7, #15]
 800b59e:	6879      	ldr	r1, [r7, #4]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	440b      	add	r3, r1
 800b5aa:	333c      	adds	r3, #60	; 0x3c
 800b5ac:	7bfa      	ldrb	r2, [r7, #15]
 800b5ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b5b0:	7bfa      	ldrb	r2, [r7, #15]
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
 800b5b4:	b298      	uxth	r0, r3
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4413      	add	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	3344      	adds	r3, #68	; 0x44
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b5c8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	440b      	add	r3, r1
 800b5d6:	3340      	adds	r3, #64	; 0x40
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b5dc:	7bfa      	ldrb	r2, [r7, #15]
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	440b      	add	r3, r1
 800b5ea:	3348      	adds	r3, #72	; 0x48
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b5f0:	7bfa      	ldrb	r2, [r7, #15]
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	334c      	adds	r3, #76	; 0x4c
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b604:	7bfa      	ldrb	r2, [r7, #15]
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	4613      	mov	r3, r2
 800b60a:	00db      	lsls	r3, r3, #3
 800b60c:	4413      	add	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	440b      	add	r3, r1
 800b612:	3354      	adds	r3, #84	; 0x54
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b618:	7bfb      	ldrb	r3, [r7, #15]
 800b61a:	3301      	adds	r3, #1
 800b61c:	73fb      	strb	r3, [r7, #15]
 800b61e:	7bfa      	ldrb	r2, [r7, #15]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	429a      	cmp	r2, r3
 800b626:	d3af      	bcc.n	800b588 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
 800b62c:	e044      	b.n	800b6b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b62e:	7bfa      	ldrb	r2, [r7, #15]
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	4613      	mov	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	4413      	add	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	440b      	add	r3, r1
 800b63c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b640:	2200      	movs	r2, #0
 800b642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b644:	7bfa      	ldrb	r2, [r7, #15]
 800b646:	6879      	ldr	r1, [r7, #4]
 800b648:	4613      	mov	r3, r2
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	440b      	add	r3, r1
 800b652:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b656:	7bfa      	ldrb	r2, [r7, #15]
 800b658:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b65a:	7bfa      	ldrb	r2, [r7, #15]
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	4613      	mov	r3, r2
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	440b      	add	r3, r1
 800b668:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b66c:	2200      	movs	r2, #0
 800b66e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b670:	7bfa      	ldrb	r2, [r7, #15]
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4613      	mov	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b686:	7bfa      	ldrb	r2, [r7, #15]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	4613      	mov	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	440b      	add	r3, r1
 800b694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b69c:	7bfa      	ldrb	r2, [r7, #15]
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	4413      	add	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	73fb      	strb	r3, [r7, #15]
 800b6b8:	7bfa      	ldrb	r2, [r7, #15]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d3b5      	bcc.n	800b62e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	687e      	ldr	r6, [r7, #4]
 800b6ca:	466d      	mov	r5, sp
 800b6cc:	f106 0410 	add.w	r4, r6, #16
 800b6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b6d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b6d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b6dc:	e885 0003 	stmia.w	r5, {r0, r1}
 800b6e0:	1d33      	adds	r3, r6, #4
 800b6e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6e4:	6838      	ldr	r0, [r7, #0]
 800b6e6:	f002 f9e9 	bl	800dabc <USB_DevInit>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d005      	beq.n	800b6fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e00d      	b.n	800b718 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4618      	mov	r0, r3
 800b712:	f002 fbb4 	bl	800de7e <USB_DevDisconnect>

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e267      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d075      	beq.n	800b82a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b73e:	4b88      	ldr	r3, [pc, #544]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f003 030c 	and.w	r3, r3, #12
 800b746:	2b04      	cmp	r3, #4
 800b748:	d00c      	beq.n	800b764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b74a:	4b85      	ldr	r3, [pc, #532]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b752:	2b08      	cmp	r3, #8
 800b754:	d112      	bne.n	800b77c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b756:	4b82      	ldr	r3, [pc, #520]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b75e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b762:	d10b      	bne.n	800b77c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b764:	4b7e      	ldr	r3, [pc, #504]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05b      	beq.n	800b828 <HAL_RCC_OscConfig+0x108>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d157      	bne.n	800b828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e242      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b784:	d106      	bne.n	800b794 <HAL_RCC_OscConfig+0x74>
 800b786:	4b76      	ldr	r3, [pc, #472]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a75      	ldr	r2, [pc, #468]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b78c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	e01d      	b.n	800b7d0 <HAL_RCC_OscConfig+0xb0>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b79c:	d10c      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x98>
 800b79e:	4b70      	ldr	r3, [pc, #448]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a6f      	ldr	r2, [pc, #444]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	4b6d      	ldr	r3, [pc, #436]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a6c      	ldr	r2, [pc, #432]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	e00b      	b.n	800b7d0 <HAL_RCC_OscConfig+0xb0>
 800b7b8:	4b69      	ldr	r3, [pc, #420]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a68      	ldr	r2, [pc, #416]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	4b66      	ldr	r3, [pc, #408]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a65      	ldr	r2, [pc, #404]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d013      	beq.n	800b800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7d8:	f7fd fb00 	bl	8008ddc <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7e0:	f7fd fafc 	bl	8008ddc <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b64      	cmp	r3, #100	; 0x64
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e207      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7f2:	4b5b      	ldr	r3, [pc, #364]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f0      	beq.n	800b7e0 <HAL_RCC_OscConfig+0xc0>
 800b7fe:	e014      	b.n	800b82a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b800:	f7fd faec 	bl	8008ddc <HAL_GetTick>
 800b804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b806:	e008      	b.n	800b81a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b808:	f7fd fae8 	bl	8008ddc <HAL_GetTick>
 800b80c:	4602      	mov	r2, r0
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b64      	cmp	r3, #100	; 0x64
 800b814:	d901      	bls.n	800b81a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e1f3      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b81a:	4b51      	ldr	r3, [pc, #324]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f0      	bne.n	800b808 <HAL_RCC_OscConfig+0xe8>
 800b826:	e000      	b.n	800b82a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d063      	beq.n	800b8fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b836:	4b4a      	ldr	r3, [pc, #296]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 030c 	and.w	r3, r3, #12
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b842:	4b47      	ldr	r3, [pc, #284]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b84a:	2b08      	cmp	r3, #8
 800b84c:	d11c      	bne.n	800b888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b84e:	4b44      	ldr	r3, [pc, #272]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d116      	bne.n	800b888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b85a:	4b41      	ldr	r3, [pc, #260]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d005      	beq.n	800b872 <HAL_RCC_OscConfig+0x152>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d001      	beq.n	800b872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e1c7      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b872:	4b3b      	ldr	r3, [pc, #236]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	4937      	ldr	r1, [pc, #220]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b882:	4313      	orrs	r3, r2
 800b884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b886:	e03a      	b.n	800b8fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d020      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b890:	4b34      	ldr	r3, [pc, #208]	; (800b964 <HAL_RCC_OscConfig+0x244>)
 800b892:	2201      	movs	r2, #1
 800b894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b896:	f7fd faa1 	bl	8008ddc <HAL_GetTick>
 800b89a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b89c:	e008      	b.n	800b8b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b89e:	f7fd fa9d 	bl	8008ddc <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d901      	bls.n	800b8b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e1a8      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8b0:	4b2b      	ldr	r3, [pc, #172]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0302 	and.w	r3, r3, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d0f0      	beq.n	800b89e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8bc:	4b28      	ldr	r3, [pc, #160]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	4925      	ldr	r1, [pc, #148]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	600b      	str	r3, [r1, #0]
 800b8d0:	e015      	b.n	800b8fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8d2:	4b24      	ldr	r3, [pc, #144]	; (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d8:	f7fd fa80 	bl	8008ddc <HAL_GetTick>
 800b8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8de:	e008      	b.n	800b8f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8e0:	f7fd fa7c 	bl	8008ddc <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d901      	bls.n	800b8f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e187      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8f2:	4b1b      	ldr	r3, [pc, #108]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 0302 	and.w	r3, r3, #2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1f0      	bne.n	800b8e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0308 	and.w	r3, r3, #8
 800b906:	2b00      	cmp	r3, #0
 800b908:	d036      	beq.n	800b978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d016      	beq.n	800b940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b912:	4b15      	ldr	r3, [pc, #84]	; (800b968 <HAL_RCC_OscConfig+0x248>)
 800b914:	2201      	movs	r2, #1
 800b916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b918:	f7fd fa60 	bl	8008ddc <HAL_GetTick>
 800b91c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b91e:	e008      	b.n	800b932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b920:	f7fd fa5c 	bl	8008ddc <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d901      	bls.n	800b932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	e167      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b932:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <HAL_RCC_OscConfig+0x240>)
 800b934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0f0      	beq.n	800b920 <HAL_RCC_OscConfig+0x200>
 800b93e:	e01b      	b.n	800b978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b940:	4b09      	ldr	r3, [pc, #36]	; (800b968 <HAL_RCC_OscConfig+0x248>)
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b946:	f7fd fa49 	bl	8008ddc <HAL_GetTick>
 800b94a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b94c:	e00e      	b.n	800b96c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b94e:	f7fd fa45 	bl	8008ddc <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d907      	bls.n	800b96c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e150      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
 800b960:	40023800 	.word	0x40023800
 800b964:	42470000 	.word	0x42470000
 800b968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b96c:	4b88      	ldr	r3, [pc, #544]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800b96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1ea      	bne.n	800b94e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 8097 	beq.w	800bab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b986:	2300      	movs	r3, #0
 800b988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b98a:	4b81      	ldr	r3, [pc, #516]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10f      	bne.n	800b9b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]
 800b99a:	4b7d      	ldr	r3, [pc, #500]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800b99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99e:	4a7c      	ldr	r2, [pc, #496]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800b9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9a6:	4b7a      	ldr	r3, [pc, #488]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ae:	60bb      	str	r3, [r7, #8]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9b6:	4b77      	ldr	r3, [pc, #476]	; (800bb94 <HAL_RCC_OscConfig+0x474>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d118      	bne.n	800b9f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b9c2:	4b74      	ldr	r3, [pc, #464]	; (800bb94 <HAL_RCC_OscConfig+0x474>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a73      	ldr	r2, [pc, #460]	; (800bb94 <HAL_RCC_OscConfig+0x474>)
 800b9c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b9ce:	f7fd fa05 	bl	8008ddc <HAL_GetTick>
 800b9d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9d4:	e008      	b.n	800b9e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9d6:	f7fd fa01 	bl	8008ddc <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d901      	bls.n	800b9e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e10c      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9e8:	4b6a      	ldr	r3, [pc, #424]	; (800bb94 <HAL_RCC_OscConfig+0x474>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0f0      	beq.n	800b9d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d106      	bne.n	800ba0a <HAL_RCC_OscConfig+0x2ea>
 800b9fc:	4b64      	ldr	r3, [pc, #400]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800b9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba00:	4a63      	ldr	r2, [pc, #396]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba02:	f043 0301 	orr.w	r3, r3, #1
 800ba06:	6713      	str	r3, [r2, #112]	; 0x70
 800ba08:	e01c      	b.n	800ba44 <HAL_RCC_OscConfig+0x324>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	2b05      	cmp	r3, #5
 800ba10:	d10c      	bne.n	800ba2c <HAL_RCC_OscConfig+0x30c>
 800ba12:	4b5f      	ldr	r3, [pc, #380]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba16:	4a5e      	ldr	r2, [pc, #376]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba18:	f043 0304 	orr.w	r3, r3, #4
 800ba1c:	6713      	str	r3, [r2, #112]	; 0x70
 800ba1e:	4b5c      	ldr	r3, [pc, #368]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba22:	4a5b      	ldr	r2, [pc, #364]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba24:	f043 0301 	orr.w	r3, r3, #1
 800ba28:	6713      	str	r3, [r2, #112]	; 0x70
 800ba2a:	e00b      	b.n	800ba44 <HAL_RCC_OscConfig+0x324>
 800ba2c:	4b58      	ldr	r3, [pc, #352]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba30:	4a57      	ldr	r2, [pc, #348]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba32:	f023 0301 	bic.w	r3, r3, #1
 800ba36:	6713      	str	r3, [r2, #112]	; 0x70
 800ba38:	4b55      	ldr	r3, [pc, #340]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3c:	4a54      	ldr	r2, [pc, #336]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba3e:	f023 0304 	bic.w	r3, r3, #4
 800ba42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d015      	beq.n	800ba78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba4c:	f7fd f9c6 	bl	8008ddc <HAL_GetTick>
 800ba50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba52:	e00a      	b.n	800ba6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba54:	f7fd f9c2 	bl	8008ddc <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d901      	bls.n	800ba6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ba66:	2303      	movs	r3, #3
 800ba68:	e0cb      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba6a:	4b49      	ldr	r3, [pc, #292]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0ee      	beq.n	800ba54 <HAL_RCC_OscConfig+0x334>
 800ba76:	e014      	b.n	800baa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba78:	f7fd f9b0 	bl	8008ddc <HAL_GetTick>
 800ba7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba7e:	e00a      	b.n	800ba96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba80:	f7fd f9ac 	bl	8008ddc <HAL_GetTick>
 800ba84:	4602      	mov	r2, r0
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d901      	bls.n	800ba96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e0b5      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba96:	4b3e      	ldr	r3, [pc, #248]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800ba98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba9a:	f003 0302 	and.w	r3, r3, #2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1ee      	bne.n	800ba80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d105      	bne.n	800bab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800baa8:	4b39      	ldr	r3, [pc, #228]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baac:	4a38      	ldr	r2, [pc, #224]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800baae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 80a1 	beq.w	800bc00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800babe:	4b34      	ldr	r3, [pc, #208]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f003 030c 	and.w	r3, r3, #12
 800bac6:	2b08      	cmp	r3, #8
 800bac8:	d05c      	beq.n	800bb84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d141      	bne.n	800bb56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bad2:	4b31      	ldr	r3, [pc, #196]	; (800bb98 <HAL_RCC_OscConfig+0x478>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bad8:	f7fd f980 	bl	8008ddc <HAL_GetTick>
 800badc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bade:	e008      	b.n	800baf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bae0:	f7fd f97c 	bl	8008ddc <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b02      	cmp	r3, #2
 800baec:	d901      	bls.n	800baf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e087      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baf2:	4b27      	ldr	r3, [pc, #156]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1f0      	bne.n	800bae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69da      	ldr	r2, [r3, #28]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	019b      	lsls	r3, r3, #6
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	085b      	lsrs	r3, r3, #1
 800bb16:	3b01      	subs	r3, #1
 800bb18:	041b      	lsls	r3, r3, #16
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	061b      	lsls	r3, r3, #24
 800bb22:	491b      	ldr	r1, [pc, #108]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb28:	4b1b      	ldr	r3, [pc, #108]	; (800bb98 <HAL_RCC_OscConfig+0x478>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb2e:	f7fd f955 	bl	8008ddc <HAL_GetTick>
 800bb32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb34:	e008      	b.n	800bb48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb36:	f7fd f951 	bl	8008ddc <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d901      	bls.n	800bb48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e05c      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb48:	4b11      	ldr	r3, [pc, #68]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0f0      	beq.n	800bb36 <HAL_RCC_OscConfig+0x416>
 800bb54:	e054      	b.n	800bc00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb56:	4b10      	ldr	r3, [pc, #64]	; (800bb98 <HAL_RCC_OscConfig+0x478>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb5c:	f7fd f93e 	bl	8008ddc <HAL_GetTick>
 800bb60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb62:	e008      	b.n	800bb76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb64:	f7fd f93a 	bl	8008ddc <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d901      	bls.n	800bb76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e045      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb76:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <HAL_RCC_OscConfig+0x470>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1f0      	bne.n	800bb64 <HAL_RCC_OscConfig+0x444>
 800bb82:	e03d      	b.n	800bc00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d107      	bne.n	800bb9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e038      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
 800bb90:	40023800 	.word	0x40023800
 800bb94:	40007000 	.word	0x40007000
 800bb98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bb9c:	4b1b      	ldr	r3, [pc, #108]	; (800bc0c <HAL_RCC_OscConfig+0x4ec>)
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d028      	beq.n	800bbfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d121      	bne.n	800bbfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d11a      	bne.n	800bbfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bbcc:	4013      	ands	r3, r2
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bbd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d111      	bne.n	800bbfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe2:	085b      	lsrs	r3, r3, #1
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d107      	bne.n	800bbfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d001      	beq.n	800bc00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e000      	b.n	800bc02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	40023800 	.word	0x40023800

0800bc10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e0cc      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc24:	4b68      	ldr	r3, [pc, #416]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0307 	and.w	r3, r3, #7
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d90c      	bls.n	800bc4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc32:	4b65      	ldr	r3, [pc, #404]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc3a:	4b63      	ldr	r3, [pc, #396]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0307 	and.w	r3, r3, #7
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d001      	beq.n	800bc4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e0b8      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0302 	and.w	r3, r3, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d020      	beq.n	800bc9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bc64:	4b59      	ldr	r3, [pc, #356]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	4a58      	ldr	r2, [pc, #352]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bc6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0308 	and.w	r3, r3, #8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc7c:	4b53      	ldr	r3, [pc, #332]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	4a52      	ldr	r2, [pc, #328]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bc86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc88:	4b50      	ldr	r3, [pc, #320]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	494d      	ldr	r1, [pc, #308]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bc96:	4313      	orrs	r3, r2
 800bc98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d044      	beq.n	800bd30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d107      	bne.n	800bcbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcae:	4b47      	ldr	r3, [pc, #284]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d119      	bne.n	800bcee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e07f      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d003      	beq.n	800bcce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d107      	bne.n	800bcde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bcce:	4b3f      	ldr	r3, [pc, #252]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d109      	bne.n	800bcee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e06f      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcde:	4b3b      	ldr	r3, [pc, #236]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d101      	bne.n	800bcee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e067      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bcee:	4b37      	ldr	r3, [pc, #220]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	f023 0203 	bic.w	r2, r3, #3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	4934      	ldr	r1, [pc, #208]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd00:	f7fd f86c 	bl	8008ddc <HAL_GetTick>
 800bd04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd06:	e00a      	b.n	800bd1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd08:	f7fd f868 	bl	8008ddc <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d901      	bls.n	800bd1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e04f      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd1e:	4b2b      	ldr	r3, [pc, #172]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 020c 	and.w	r2, r3, #12
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d1eb      	bne.n	800bd08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd30:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0307 	and.w	r3, r3, #7
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d20c      	bcs.n	800bd58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd3e:	4b22      	ldr	r3, [pc, #136]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	b2d2      	uxtb	r2, r2
 800bd44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd46:	4b20      	ldr	r3, [pc, #128]	; (800bdc8 <HAL_RCC_ClockConfig+0x1b8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d001      	beq.n	800bd58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e032      	b.n	800bdbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d008      	beq.n	800bd76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bd64:	4b19      	ldr	r3, [pc, #100]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	4916      	ldr	r1, [pc, #88]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0308 	and.w	r3, r3, #8
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d009      	beq.n	800bd96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd82:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	490e      	ldr	r1, [pc, #56]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bd96:	f000 f821 	bl	800bddc <HAL_RCC_GetSysClockFreq>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <HAL_RCC_ClockConfig+0x1bc>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	091b      	lsrs	r3, r3, #4
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	490a      	ldr	r1, [pc, #40]	; (800bdd0 <HAL_RCC_ClockConfig+0x1c0>)
 800bda8:	5ccb      	ldrb	r3, [r1, r3]
 800bdaa:	fa22 f303 	lsr.w	r3, r2, r3
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <HAL_RCC_ClockConfig+0x1c4>)
 800bdb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bdb2:	4b09      	ldr	r3, [pc, #36]	; (800bdd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fc ffcc 	bl	8008d54 <HAL_InitTick>

  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	40023c00 	.word	0x40023c00
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	08011228 	.word	0x08011228
 800bdd4:	2000028c 	.word	0x2000028c
 800bdd8:	20000320 	.word	0x20000320

0800bddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bde0:	b094      	sub	sp, #80	; 0x50
 800bde2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	647b      	str	r3, [r7, #68]	; 0x44
 800bde8:	2300      	movs	r3, #0
 800bdea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdec:	2300      	movs	r3, #0
 800bdee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bdf4:	4b79      	ldr	r3, [pc, #484]	; (800bfdc <HAL_RCC_GetSysClockFreq+0x200>)
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	f003 030c 	and.w	r3, r3, #12
 800bdfc:	2b08      	cmp	r3, #8
 800bdfe:	d00d      	beq.n	800be1c <HAL_RCC_GetSysClockFreq+0x40>
 800be00:	2b08      	cmp	r3, #8
 800be02:	f200 80e1 	bhi.w	800bfc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <HAL_RCC_GetSysClockFreq+0x34>
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d003      	beq.n	800be16 <HAL_RCC_GetSysClockFreq+0x3a>
 800be0e:	e0db      	b.n	800bfc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800be10:	4b73      	ldr	r3, [pc, #460]	; (800bfe0 <HAL_RCC_GetSysClockFreq+0x204>)
 800be12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800be14:	e0db      	b.n	800bfce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800be16:	4b72      	ldr	r3, [pc, #456]	; (800bfe0 <HAL_RCC_GetSysClockFreq+0x204>)
 800be18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800be1a:	e0d8      	b.n	800bfce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be1c:	4b6f      	ldr	r3, [pc, #444]	; (800bfdc <HAL_RCC_GetSysClockFreq+0x200>)
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800be26:	4b6d      	ldr	r3, [pc, #436]	; (800bfdc <HAL_RCC_GetSysClockFreq+0x200>)
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d063      	beq.n	800befa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be32:	4b6a      	ldr	r3, [pc, #424]	; (800bfdc <HAL_RCC_GetSysClockFreq+0x200>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	099b      	lsrs	r3, r3, #6
 800be38:	2200      	movs	r2, #0
 800be3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800be3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be44:	633b      	str	r3, [r7, #48]	; 0x30
 800be46:	2300      	movs	r3, #0
 800be48:	637b      	str	r3, [r7, #52]	; 0x34
 800be4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800be4e:	4622      	mov	r2, r4
 800be50:	462b      	mov	r3, r5
 800be52:	f04f 0000 	mov.w	r0, #0
 800be56:	f04f 0100 	mov.w	r1, #0
 800be5a:	0159      	lsls	r1, r3, #5
 800be5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800be60:	0150      	lsls	r0, r2, #5
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4621      	mov	r1, r4
 800be68:	1a51      	subs	r1, r2, r1
 800be6a:	6139      	str	r1, [r7, #16]
 800be6c:	4629      	mov	r1, r5
 800be6e:	eb63 0301 	sbc.w	r3, r3, r1
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	f04f 0200 	mov.w	r2, #0
 800be78:	f04f 0300 	mov.w	r3, #0
 800be7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be80:	4659      	mov	r1, fp
 800be82:	018b      	lsls	r3, r1, #6
 800be84:	4651      	mov	r1, sl
 800be86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800be8a:	4651      	mov	r1, sl
 800be8c:	018a      	lsls	r2, r1, #6
 800be8e:	4651      	mov	r1, sl
 800be90:	ebb2 0801 	subs.w	r8, r2, r1
 800be94:	4659      	mov	r1, fp
 800be96:	eb63 0901 	sbc.w	r9, r3, r1
 800be9a:	f04f 0200 	mov.w	r2, #0
 800be9e:	f04f 0300 	mov.w	r3, #0
 800bea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800beaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800beae:	4690      	mov	r8, r2
 800beb0:	4699      	mov	r9, r3
 800beb2:	4623      	mov	r3, r4
 800beb4:	eb18 0303 	adds.w	r3, r8, r3
 800beb8:	60bb      	str	r3, [r7, #8]
 800beba:	462b      	mov	r3, r5
 800bebc:	eb49 0303 	adc.w	r3, r9, r3
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	f04f 0200 	mov.w	r2, #0
 800bec6:	f04f 0300 	mov.w	r3, #0
 800beca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bece:	4629      	mov	r1, r5
 800bed0:	028b      	lsls	r3, r1, #10
 800bed2:	4621      	mov	r1, r4
 800bed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bed8:	4621      	mov	r1, r4
 800beda:	028a      	lsls	r2, r1, #10
 800bedc:	4610      	mov	r0, r2
 800bede:	4619      	mov	r1, r3
 800bee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee2:	2200      	movs	r2, #0
 800bee4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800beec:	f7f4 fecc 	bl	8000c88 <__aeabi_uldivmod>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4613      	mov	r3, r2
 800bef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bef8:	e058      	b.n	800bfac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800befa:	4b38      	ldr	r3, [pc, #224]	; (800bfdc <HAL_RCC_GetSysClockFreq+0x200>)
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	099b      	lsrs	r3, r3, #6
 800bf00:	2200      	movs	r2, #0
 800bf02:	4618      	mov	r0, r3
 800bf04:	4611      	mov	r1, r2
 800bf06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800bf0a:	623b      	str	r3, [r7, #32]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	f04f 0000 	mov.w	r0, #0
 800bf1c:	f04f 0100 	mov.w	r1, #0
 800bf20:	0159      	lsls	r1, r3, #5
 800bf22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf26:	0150      	lsls	r0, r2, #5
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4641      	mov	r1, r8
 800bf2e:	ebb2 0a01 	subs.w	sl, r2, r1
 800bf32:	4649      	mov	r1, r9
 800bf34:	eb63 0b01 	sbc.w	fp, r3, r1
 800bf38:	f04f 0200 	mov.w	r2, #0
 800bf3c:	f04f 0300 	mov.w	r3, #0
 800bf40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800bf44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800bf48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800bf4c:	ebb2 040a 	subs.w	r4, r2, sl
 800bf50:	eb63 050b 	sbc.w	r5, r3, fp
 800bf54:	f04f 0200 	mov.w	r2, #0
 800bf58:	f04f 0300 	mov.w	r3, #0
 800bf5c:	00eb      	lsls	r3, r5, #3
 800bf5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf62:	00e2      	lsls	r2, r4, #3
 800bf64:	4614      	mov	r4, r2
 800bf66:	461d      	mov	r5, r3
 800bf68:	4643      	mov	r3, r8
 800bf6a:	18e3      	adds	r3, r4, r3
 800bf6c:	603b      	str	r3, [r7, #0]
 800bf6e:	464b      	mov	r3, r9
 800bf70:	eb45 0303 	adc.w	r3, r5, r3
 800bf74:	607b      	str	r3, [r7, #4]
 800bf76:	f04f 0200 	mov.w	r2, #0
 800bf7a:	f04f 0300 	mov.w	r3, #0
 800bf7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bf82:	4629      	mov	r1, r5
 800bf84:	028b      	lsls	r3, r1, #10
 800bf86:	4621      	mov	r1, r4
 800bf88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	028a      	lsls	r2, r1, #10
 800bf90:	4610      	mov	r0, r2
 800bf92:	4619      	mov	r1, r3
 800bf94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf96:	2200      	movs	r2, #0
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	61fa      	str	r2, [r7, #28]
 800bf9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bfa0:	f7f4 fe72 	bl	8000c88 <__aeabi_uldivmod>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bfac:	4b0b      	ldr	r3, [pc, #44]	; (800bfdc <HAL_RCC_GetSysClockFreq+0x200>)
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	0c1b      	lsrs	r3, r3, #16
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800bfbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bfc6:	e002      	b.n	800bfce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bfc8:	4b05      	ldr	r3, [pc, #20]	; (800bfe0 <HAL_RCC_GetSysClockFreq+0x204>)
 800bfca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bfcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bfce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3750      	adds	r7, #80	; 0x50
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfda:	bf00      	nop
 800bfdc:	40023800 	.word	0x40023800
 800bfe0:	00f42400 	.word	0x00f42400

0800bfe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bfe8:	4b03      	ldr	r3, [pc, #12]	; (800bff8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bfea:	681b      	ldr	r3, [r3, #0]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	2000028c 	.word	0x2000028c

0800bffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c000:	f7ff fff0 	bl	800bfe4 <HAL_RCC_GetHCLKFreq>
 800c004:	4602      	mov	r2, r0
 800c006:	4b05      	ldr	r3, [pc, #20]	; (800c01c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	0a9b      	lsrs	r3, r3, #10
 800c00c:	f003 0307 	and.w	r3, r3, #7
 800c010:	4903      	ldr	r1, [pc, #12]	; (800c020 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c012:	5ccb      	ldrb	r3, [r1, r3]
 800c014:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c018:	4618      	mov	r0, r3
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	40023800 	.word	0x40023800
 800c020:	08011238 	.word	0x08011238

0800c024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c028:	f7ff ffdc 	bl	800bfe4 <HAL_RCC_GetHCLKFreq>
 800c02c:	4602      	mov	r2, r0
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	0b5b      	lsrs	r3, r3, #13
 800c034:	f003 0307 	and.w	r3, r3, #7
 800c038:	4903      	ldr	r1, [pc, #12]	; (800c048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c03a:	5ccb      	ldrb	r3, [r1, r3]
 800c03c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c040:	4618      	mov	r0, r3
 800c042:	bd80      	pop	{r7, pc}
 800c044:	40023800 	.word	0x40023800
 800c048:	08011238 	.word	0x08011238

0800c04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e041      	b.n	800c0e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d106      	bne.n	800c078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7f9 fbe6 	bl	8005844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f000 fda4 	bl	800cbd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d001      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e04e      	b.n	800c1a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a23      	ldr	r2, [pc, #140]	; (800c1b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d022      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12e:	d01d      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a1f      	ldr	r2, [pc, #124]	; (800c1b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d018      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a1e      	ldr	r2, [pc, #120]	; (800c1b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d013      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a1c      	ldr	r2, [pc, #112]	; (800c1bc <HAL_TIM_Base_Start_IT+0xd0>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00e      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a1b      	ldr	r2, [pc, #108]	; (800c1c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d009      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a19      	ldr	r2, [pc, #100]	; (800c1c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d004      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a18      	ldr	r2, [pc, #96]	; (800c1c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d111      	bne.n	800c190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b06      	cmp	r3, #6
 800c17c:	d010      	beq.n	800c1a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f042 0201 	orr.w	r2, r2, #1
 800c18c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c18e:	e007      	b.n	800c1a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f042 0201 	orr.w	r2, r2, #1
 800c19e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	40010000 	.word	0x40010000
 800c1b4:	40000400 	.word	0x40000400
 800c1b8:	40000800 	.word	0x40000800
 800c1bc:	40000c00 	.word	0x40000c00
 800c1c0:	40010400 	.word	0x40010400
 800c1c4:	40014000 	.word	0x40014000
 800c1c8:	40001800 	.word	0x40001800

0800c1cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e041      	b.n	800c262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d106      	bne.n	800c1f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7f9 fbfe 	bl	80059f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	3304      	adds	r3, #4
 800c208:	4619      	mov	r1, r3
 800c20a:	4610      	mov	r0, r2
 800c20c:	f000 fce4 	bl	800cbd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <HAL_TIM_PWM_Start+0x24>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b01      	cmp	r3, #1
 800c286:	bf14      	ite	ne
 800c288:	2301      	movne	r3, #1
 800c28a:	2300      	moveq	r3, #0
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	e022      	b.n	800c2d6 <HAL_TIM_PWM_Start+0x6a>
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b04      	cmp	r3, #4
 800c294:	d109      	bne.n	800c2aa <HAL_TIM_PWM_Start+0x3e>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	bf14      	ite	ne
 800c2a2:	2301      	movne	r3, #1
 800c2a4:	2300      	moveq	r3, #0
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	e015      	b.n	800c2d6 <HAL_TIM_PWM_Start+0x6a>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d109      	bne.n	800c2c4 <HAL_TIM_PWM_Start+0x58>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	bf14      	ite	ne
 800c2bc:	2301      	movne	r3, #1
 800c2be:	2300      	moveq	r3, #0
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	e008      	b.n	800c2d6 <HAL_TIM_PWM_Start+0x6a>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	bf14      	ite	ne
 800c2d0:	2301      	movne	r3, #1
 800c2d2:	2300      	moveq	r3, #0
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e07c      	b.n	800c3d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d104      	bne.n	800c2ee <HAL_TIM_PWM_Start+0x82>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2ec:	e013      	b.n	800c316 <HAL_TIM_PWM_Start+0xaa>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d104      	bne.n	800c2fe <HAL_TIM_PWM_Start+0x92>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2fc:	e00b      	b.n	800c316 <HAL_TIM_PWM_Start+0xaa>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b08      	cmp	r3, #8
 800c302:	d104      	bne.n	800c30e <HAL_TIM_PWM_Start+0xa2>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2202      	movs	r2, #2
 800c308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c30c:	e003      	b.n	800c316 <HAL_TIM_PWM_Start+0xaa>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2202      	movs	r2, #2
 800c312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2201      	movs	r2, #1
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 ff44 	bl	800d1ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a2d      	ldr	r2, [pc, #180]	; (800c3e0 <HAL_TIM_PWM_Start+0x174>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d004      	beq.n	800c338 <HAL_TIM_PWM_Start+0xcc>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a2c      	ldr	r2, [pc, #176]	; (800c3e4 <HAL_TIM_PWM_Start+0x178>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d101      	bne.n	800c33c <HAL_TIM_PWM_Start+0xd0>
 800c338:	2301      	movs	r3, #1
 800c33a:	e000      	b.n	800c33e <HAL_TIM_PWM_Start+0xd2>
 800c33c:	2300      	movs	r3, #0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a22      	ldr	r2, [pc, #136]	; (800c3e0 <HAL_TIM_PWM_Start+0x174>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d022      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c364:	d01d      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a1f      	ldr	r2, [pc, #124]	; (800c3e8 <HAL_TIM_PWM_Start+0x17c>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d018      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a1d      	ldr	r2, [pc, #116]	; (800c3ec <HAL_TIM_PWM_Start+0x180>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d013      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a1c      	ldr	r2, [pc, #112]	; (800c3f0 <HAL_TIM_PWM_Start+0x184>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d00e      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a16      	ldr	r2, [pc, #88]	; (800c3e4 <HAL_TIM_PWM_Start+0x178>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d009      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a18      	ldr	r2, [pc, #96]	; (800c3f4 <HAL_TIM_PWM_Start+0x188>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d004      	beq.n	800c3a2 <HAL_TIM_PWM_Start+0x136>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a16      	ldr	r2, [pc, #88]	; (800c3f8 <HAL_TIM_PWM_Start+0x18c>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d111      	bne.n	800c3c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f003 0307 	and.w	r3, r3, #7
 800c3ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b06      	cmp	r3, #6
 800c3b2:	d010      	beq.n	800c3d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f042 0201 	orr.w	r2, r2, #1
 800c3c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c4:	e007      	b.n	800c3d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0201 	orr.w	r2, r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	40010000 	.word	0x40010000
 800c3e4:	40010400 	.word	0x40010400
 800c3e8:	40000400 	.word	0x40000400
 800c3ec:	40000800 	.word	0x40000800
 800c3f0:	40000c00 	.word	0x40000c00
 800c3f4:	40014000 	.word	0x40014000
 800c3f8:	40001800 	.word	0x40001800

0800c3fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e097      	b.n	800c540 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d106      	bne.n	800c42a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7f9 fa4b 	bl	80058c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2202      	movs	r2, #2
 800c42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	6812      	ldr	r2, [r2, #0]
 800c43c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c440:	f023 0307 	bic.w	r3, r3, #7
 800c444:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3304      	adds	r3, #4
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f000 fbc1 	bl	800cbd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6a1b      	ldr	r3, [r3, #32]
 800c46c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	4313      	orrs	r3, r2
 800c476:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c47e:	f023 0303 	bic.w	r3, r3, #3
 800c482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	689a      	ldr	r2, [r3, #8]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	021b      	lsls	r3, r3, #8
 800c48e:	4313      	orrs	r3, r2
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	4313      	orrs	r3, r2
 800c494:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c49c:	f023 030c 	bic.w	r3, r3, #12
 800c4a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	68da      	ldr	r2, [r3, #12]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	011a      	lsls	r2, r3, #4
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	031b      	lsls	r3, r3, #12
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c4da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c4e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	011b      	lsls	r3, r3, #4
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c558:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c560:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c568:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c570:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d110      	bne.n	800c59a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d102      	bne.n	800c584 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c57e:	7b7b      	ldrb	r3, [r7, #13]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d001      	beq.n	800c588 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e069      	b.n	800c65c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2202      	movs	r2, #2
 800c58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2202      	movs	r2, #2
 800c594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c598:	e031      	b.n	800c5fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b04      	cmp	r3, #4
 800c59e:	d110      	bne.n	800c5c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c5a0:	7bbb      	ldrb	r3, [r7, #14]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d102      	bne.n	800c5ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c5a6:	7b3b      	ldrb	r3, [r7, #12]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d001      	beq.n	800c5b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e055      	b.n	800c65c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5c0:	e01d      	b.n	800c5fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d108      	bne.n	800c5da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d105      	bne.n	800c5da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c5ce:	7b7b      	ldrb	r3, [r7, #13]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d102      	bne.n	800c5da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c5d4:	7b3b      	ldrb	r3, [r7, #12]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d001      	beq.n	800c5de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e03e      	b.n	800c65c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <HAL_TIM_Encoder_Start+0xc4>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b04      	cmp	r3, #4
 800c608:	d008      	beq.n	800c61c <HAL_TIM_Encoder_Start+0xd4>
 800c60a:	e00f      	b.n	800c62c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2201      	movs	r2, #1
 800c612:	2100      	movs	r1, #0
 800c614:	4618      	mov	r0, r3
 800c616:	f000 fdc9 	bl	800d1ac <TIM_CCxChannelCmd>
      break;
 800c61a:	e016      	b.n	800c64a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2201      	movs	r2, #1
 800c622:	2104      	movs	r1, #4
 800c624:	4618      	mov	r0, r3
 800c626:	f000 fdc1 	bl	800d1ac <TIM_CCxChannelCmd>
      break;
 800c62a:	e00e      	b.n	800c64a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2201      	movs	r2, #1
 800c632:	2100      	movs	r1, #0
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fdb9 	bl	800d1ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2201      	movs	r2, #1
 800c640:	2104      	movs	r1, #4
 800c642:	4618      	mov	r0, r3
 800c644:	f000 fdb2 	bl	800d1ac <TIM_CCxChannelCmd>
      break;
 800c648:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f042 0201 	orr.w	r2, r2, #1
 800c658:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	f003 0302 	and.w	r3, r3, #2
 800c676:	2b02      	cmp	r3, #2
 800c678:	d122      	bne.n	800c6c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b02      	cmp	r3, #2
 800c686:	d11b      	bne.n	800c6c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f06f 0202 	mvn.w	r2, #2
 800c690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	f003 0303 	and.w	r3, r3, #3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fa77 	bl	800cb9a <HAL_TIM_IC_CaptureCallback>
 800c6ac:	e005      	b.n	800c6ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa69 	bl	800cb86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fa7a 	bl	800cbae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d122      	bne.n	800c714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d11b      	bne.n	800c714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f06f 0204 	mvn.w	r2, #4
 800c6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fa4d 	bl	800cb9a <HAL_TIM_IC_CaptureCallback>
 800c700:	e005      	b.n	800c70e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fa3f 	bl	800cb86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fa50 	bl	800cbae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	f003 0308 	and.w	r3, r3, #8
 800c71e:	2b08      	cmp	r3, #8
 800c720:	d122      	bne.n	800c768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f003 0308 	and.w	r3, r3, #8
 800c72c:	2b08      	cmp	r3, #8
 800c72e:	d11b      	bne.n	800c768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f06f 0208 	mvn.w	r2, #8
 800c738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2204      	movs	r2, #4
 800c73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	69db      	ldr	r3, [r3, #28]
 800c746:	f003 0303 	and.w	r3, r3, #3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fa23 	bl	800cb9a <HAL_TIM_IC_CaptureCallback>
 800c754:	e005      	b.n	800c762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fa15 	bl	800cb86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fa26 	bl	800cbae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f003 0310 	and.w	r3, r3, #16
 800c772:	2b10      	cmp	r3, #16
 800c774:	d122      	bne.n	800c7bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	f003 0310 	and.w	r3, r3, #16
 800c780:	2b10      	cmp	r3, #16
 800c782:	d11b      	bne.n	800c7bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f06f 0210 	mvn.w	r2, #16
 800c78c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2208      	movs	r2, #8
 800c792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f9f9 	bl	800cb9a <HAL_TIM_IC_CaptureCallback>
 800c7a8:	e005      	b.n	800c7b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9eb 	bl	800cb86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f9fc 	bl	800cbae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d10e      	bne.n	800c7e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d107      	bne.n	800c7e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f06f 0201 	mvn.w	r2, #1
 800c7e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7f5 fd50 	bl	8002288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f2:	2b80      	cmp	r3, #128	; 0x80
 800c7f4:	d10e      	bne.n	800c814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c800:	2b80      	cmp	r3, #128	; 0x80
 800c802:	d107      	bne.n	800c814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c80c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fdca 	bl	800d3a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81e:	2b40      	cmp	r3, #64	; 0x40
 800c820:	d10e      	bne.n	800c840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82c:	2b40      	cmp	r3, #64	; 0x40
 800c82e:	d107      	bne.n	800c840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f9c1 	bl	800cbc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b20      	cmp	r3, #32
 800c84c:	d10e      	bne.n	800c86c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f003 0320 	and.w	r3, r3, #32
 800c858:	2b20      	cmp	r3, #32
 800c85a:	d107      	bne.n	800c86c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f06f 0220 	mvn.w	r2, #32
 800c864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fd94 	bl	800d394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c86c:	bf00      	nop
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d101      	bne.n	800c892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c88e:	2302      	movs	r3, #2
 800c890:	e0ae      	b.n	800c9f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b0c      	cmp	r3, #12
 800c89e:	f200 809f 	bhi.w	800c9e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c8a2:	a201      	add	r2, pc, #4	; (adr r2, 800c8a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a8:	0800c8dd 	.word	0x0800c8dd
 800c8ac:	0800c9e1 	.word	0x0800c9e1
 800c8b0:	0800c9e1 	.word	0x0800c9e1
 800c8b4:	0800c9e1 	.word	0x0800c9e1
 800c8b8:	0800c91d 	.word	0x0800c91d
 800c8bc:	0800c9e1 	.word	0x0800c9e1
 800c8c0:	0800c9e1 	.word	0x0800c9e1
 800c8c4:	0800c9e1 	.word	0x0800c9e1
 800c8c8:	0800c95f 	.word	0x0800c95f
 800c8cc:	0800c9e1 	.word	0x0800c9e1
 800c8d0:	0800c9e1 	.word	0x0800c9e1
 800c8d4:	0800c9e1 	.word	0x0800c9e1
 800c8d8:	0800c99f 	.word	0x0800c99f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68b9      	ldr	r1, [r7, #8]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fa18 	bl	800cd18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	699a      	ldr	r2, [r3, #24]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f042 0208 	orr.w	r2, r2, #8
 800c8f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	699a      	ldr	r2, [r3, #24]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f022 0204 	bic.w	r2, r2, #4
 800c906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6999      	ldr	r1, [r3, #24]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	691a      	ldr	r2, [r3, #16]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	619a      	str	r2, [r3, #24]
      break;
 800c91a:	e064      	b.n	800c9e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fa68 	bl	800cdf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	699a      	ldr	r2, [r3, #24]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	699a      	ldr	r2, [r3, #24]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6999      	ldr	r1, [r3, #24]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	021a      	lsls	r2, r3, #8
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	430a      	orrs	r2, r1
 800c95a:	619a      	str	r2, [r3, #24]
      break;
 800c95c:	e043      	b.n	800c9e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fabd 	bl	800cee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	69da      	ldr	r2, [r3, #28]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f042 0208 	orr.w	r2, r2, #8
 800c978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	69da      	ldr	r2, [r3, #28]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f022 0204 	bic.w	r2, r2, #4
 800c988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	69d9      	ldr	r1, [r3, #28]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	691a      	ldr	r2, [r3, #16]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	430a      	orrs	r2, r1
 800c99a:	61da      	str	r2, [r3, #28]
      break;
 800c99c:	e023      	b.n	800c9e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68b9      	ldr	r1, [r7, #8]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fb11 	bl	800cfcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69da      	ldr	r2, [r3, #28]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69da      	ldr	r2, [r3, #28]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69d9      	ldr	r1, [r3, #28]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	021a      	lsls	r2, r3, #8
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	430a      	orrs	r2, r1
 800c9dc:	61da      	str	r2, [r3, #28]
      break;
 800c9de:	e002      	b.n	800c9e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c9e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3718      	adds	r7, #24
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_TIM_ConfigClockSource+0x1c>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e0b4      	b.n	800cb7e <HAL_TIM_ConfigClockSource+0x186>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ca32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4c:	d03e      	beq.n	800cacc <HAL_TIM_ConfigClockSource+0xd4>
 800ca4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca52:	f200 8087 	bhi.w	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca5a:	f000 8086 	beq.w	800cb6a <HAL_TIM_ConfigClockSource+0x172>
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca62:	d87f      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca64:	2b70      	cmp	r3, #112	; 0x70
 800ca66:	d01a      	beq.n	800ca9e <HAL_TIM_ConfigClockSource+0xa6>
 800ca68:	2b70      	cmp	r3, #112	; 0x70
 800ca6a:	d87b      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca6c:	2b60      	cmp	r3, #96	; 0x60
 800ca6e:	d050      	beq.n	800cb12 <HAL_TIM_ConfigClockSource+0x11a>
 800ca70:	2b60      	cmp	r3, #96	; 0x60
 800ca72:	d877      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca74:	2b50      	cmp	r3, #80	; 0x50
 800ca76:	d03c      	beq.n	800caf2 <HAL_TIM_ConfigClockSource+0xfa>
 800ca78:	2b50      	cmp	r3, #80	; 0x50
 800ca7a:	d873      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca7c:	2b40      	cmp	r3, #64	; 0x40
 800ca7e:	d058      	beq.n	800cb32 <HAL_TIM_ConfigClockSource+0x13a>
 800ca80:	2b40      	cmp	r3, #64	; 0x40
 800ca82:	d86f      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca84:	2b30      	cmp	r3, #48	; 0x30
 800ca86:	d064      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x15a>
 800ca88:	2b30      	cmp	r3, #48	; 0x30
 800ca8a:	d86b      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d060      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x15a>
 800ca90:	2b20      	cmp	r3, #32
 800ca92:	d867      	bhi.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d05c      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x15a>
 800ca98:	2b10      	cmp	r3, #16
 800ca9a:	d05a      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0x15a>
 800ca9c:	e062      	b.n	800cb64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	6899      	ldr	r1, [r3, #8]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	f000 fb5d 	bl	800d16c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	609a      	str	r2, [r3, #8]
      break;
 800caca:	e04f      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6818      	ldr	r0, [r3, #0]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	6899      	ldr	r1, [r3, #8]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	f000 fb46 	bl	800d16c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	689a      	ldr	r2, [r3, #8]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caee:	609a      	str	r2, [r3, #8]
      break;
 800caf0:	e03c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6818      	ldr	r0, [r3, #0]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	6859      	ldr	r1, [r3, #4]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	461a      	mov	r2, r3
 800cb00:	f000 faba 	bl	800d078 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2150      	movs	r1, #80	; 0x50
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fb13 	bl	800d136 <TIM_ITRx_SetConfig>
      break;
 800cb10:	e02c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	6859      	ldr	r1, [r3, #4]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f000 fad9 	bl	800d0d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2160      	movs	r1, #96	; 0x60
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f000 fb03 	bl	800d136 <TIM_ITRx_SetConfig>
      break;
 800cb30:	e01c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6818      	ldr	r0, [r3, #0]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	6859      	ldr	r1, [r3, #4]
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f000 fa9a 	bl	800d078 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2140      	movs	r1, #64	; 0x40
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 faf3 	bl	800d136 <TIM_ITRx_SetConfig>
      break;
 800cb50:	e00c      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	f000 faea 	bl	800d136 <TIM_ITRx_SetConfig>
      break;
 800cb62:	e003      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
      break;
 800cb68:	e000      	b.n	800cb6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cb6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb86:	b480      	push	{r7}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb8e:	bf00      	nop
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cba2:	bf00      	nop
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b083      	sub	sp, #12
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cbb6:	bf00      	nop
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cbca:	bf00      	nop
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
	...

0800cbd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a40      	ldr	r2, [pc, #256]	; (800ccec <TIM_Base_SetConfig+0x114>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d013      	beq.n	800cc18 <TIM_Base_SetConfig+0x40>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbf6:	d00f      	beq.n	800cc18 <TIM_Base_SetConfig+0x40>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a3d      	ldr	r2, [pc, #244]	; (800ccf0 <TIM_Base_SetConfig+0x118>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d00b      	beq.n	800cc18 <TIM_Base_SetConfig+0x40>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a3c      	ldr	r2, [pc, #240]	; (800ccf4 <TIM_Base_SetConfig+0x11c>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d007      	beq.n	800cc18 <TIM_Base_SetConfig+0x40>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a3b      	ldr	r2, [pc, #236]	; (800ccf8 <TIM_Base_SetConfig+0x120>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d003      	beq.n	800cc18 <TIM_Base_SetConfig+0x40>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a3a      	ldr	r2, [pc, #232]	; (800ccfc <TIM_Base_SetConfig+0x124>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d108      	bne.n	800cc2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a2f      	ldr	r2, [pc, #188]	; (800ccec <TIM_Base_SetConfig+0x114>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d02b      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc38:	d027      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a2c      	ldr	r2, [pc, #176]	; (800ccf0 <TIM_Base_SetConfig+0x118>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d023      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a2b      	ldr	r2, [pc, #172]	; (800ccf4 <TIM_Base_SetConfig+0x11c>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d01f      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a2a      	ldr	r2, [pc, #168]	; (800ccf8 <TIM_Base_SetConfig+0x120>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d01b      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a29      	ldr	r2, [pc, #164]	; (800ccfc <TIM_Base_SetConfig+0x124>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d017      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a28      	ldr	r2, [pc, #160]	; (800cd00 <TIM_Base_SetConfig+0x128>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d013      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a27      	ldr	r2, [pc, #156]	; (800cd04 <TIM_Base_SetConfig+0x12c>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d00f      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a26      	ldr	r2, [pc, #152]	; (800cd08 <TIM_Base_SetConfig+0x130>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d00b      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	4a25      	ldr	r2, [pc, #148]	; (800cd0c <TIM_Base_SetConfig+0x134>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d007      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a24      	ldr	r2, [pc, #144]	; (800cd10 <TIM_Base_SetConfig+0x138>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d003      	beq.n	800cc8a <TIM_Base_SetConfig+0xb2>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a23      	ldr	r2, [pc, #140]	; (800cd14 <TIM_Base_SetConfig+0x13c>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d108      	bne.n	800cc9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	689a      	ldr	r2, [r3, #8]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a0a      	ldr	r2, [pc, #40]	; (800ccec <TIM_Base_SetConfig+0x114>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d003      	beq.n	800ccd0 <TIM_Base_SetConfig+0xf8>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a0c      	ldr	r2, [pc, #48]	; (800ccfc <TIM_Base_SetConfig+0x124>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d103      	bne.n	800ccd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	691a      	ldr	r2, [r3, #16]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	615a      	str	r2, [r3, #20]
}
 800ccde:	bf00      	nop
 800cce0:	3714      	adds	r7, #20
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	40010000 	.word	0x40010000
 800ccf0:	40000400 	.word	0x40000400
 800ccf4:	40000800 	.word	0x40000800
 800ccf8:	40000c00 	.word	0x40000c00
 800ccfc:	40010400 	.word	0x40010400
 800cd00:	40014000 	.word	0x40014000
 800cd04:	40014400 	.word	0x40014400
 800cd08:	40014800 	.word	0x40014800
 800cd0c:	40001800 	.word	0x40001800
 800cd10:	40001c00 	.word	0x40001c00
 800cd14:	40002000 	.word	0x40002000

0800cd18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a1b      	ldr	r3, [r3, #32]
 800cd26:	f023 0201 	bic.w	r2, r3, #1
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f023 0303 	bic.w	r3, r3, #3
 800cd4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f023 0302 	bic.w	r3, r3, #2
 800cd60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a20      	ldr	r2, [pc, #128]	; (800cdf0 <TIM_OC1_SetConfig+0xd8>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d003      	beq.n	800cd7c <TIM_OC1_SetConfig+0x64>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a1f      	ldr	r2, [pc, #124]	; (800cdf4 <TIM_OC1_SetConfig+0xdc>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d10c      	bne.n	800cd96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	f023 0308 	bic.w	r3, r3, #8
 800cd82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f023 0304 	bic.w	r3, r3, #4
 800cd94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <TIM_OC1_SetConfig+0xd8>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d003      	beq.n	800cda6 <TIM_OC1_SetConfig+0x8e>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a14      	ldr	r2, [pc, #80]	; (800cdf4 <TIM_OC1_SetConfig+0xdc>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d111      	bne.n	800cdca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	695b      	ldr	r3, [r3, #20]
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	693a      	ldr	r2, [r7, #16]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	621a      	str	r2, [r3, #32]
}
 800cde4:	bf00      	nop
 800cde6:	371c      	adds	r7, #28
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	40010000 	.word	0x40010000
 800cdf4:	40010400 	.word	0x40010400

0800cdf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b087      	sub	sp, #28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	f023 0210 	bic.w	r2, r3, #16
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	021b      	lsls	r3, r3, #8
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f023 0320 	bic.w	r3, r3, #32
 800ce42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	011b      	lsls	r3, r3, #4
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a22      	ldr	r2, [pc, #136]	; (800cedc <TIM_OC2_SetConfig+0xe4>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d003      	beq.n	800ce60 <TIM_OC2_SetConfig+0x68>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a21      	ldr	r2, [pc, #132]	; (800cee0 <TIM_OC2_SetConfig+0xe8>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10d      	bne.n	800ce7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	011b      	lsls	r3, r3, #4
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a17      	ldr	r2, [pc, #92]	; (800cedc <TIM_OC2_SetConfig+0xe4>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d003      	beq.n	800ce8c <TIM_OC2_SetConfig+0x94>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a16      	ldr	r2, [pc, #88]	; (800cee0 <TIM_OC2_SetConfig+0xe8>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d113      	bne.n	800ceb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	693a      	ldr	r2, [r7, #16]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	621a      	str	r2, [r3, #32]
}
 800cece:	bf00      	nop
 800ced0:	371c      	adds	r7, #28
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	40010000 	.word	0x40010000
 800cee0:	40010400 	.word	0x40010400

0800cee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
 800cefe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 0303 	bic.w	r3, r3, #3
 800cf1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	021b      	lsls	r3, r3, #8
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a21      	ldr	r2, [pc, #132]	; (800cfc4 <TIM_OC3_SetConfig+0xe0>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d003      	beq.n	800cf4a <TIM_OC3_SetConfig+0x66>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a20      	ldr	r2, [pc, #128]	; (800cfc8 <TIM_OC3_SetConfig+0xe4>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d10d      	bne.n	800cf66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	021b      	lsls	r3, r3, #8
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a16      	ldr	r2, [pc, #88]	; (800cfc4 <TIM_OC3_SetConfig+0xe0>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d003      	beq.n	800cf76 <TIM_OC3_SetConfig+0x92>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a15      	ldr	r2, [pc, #84]	; (800cfc8 <TIM_OC3_SetConfig+0xe4>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d113      	bne.n	800cf9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	011b      	lsls	r3, r3, #4
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	011b      	lsls	r3, r3, #4
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	621a      	str	r2, [r3, #32]
}
 800cfb8:	bf00      	nop
 800cfba:	371c      	adds	r7, #28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	40010000 	.word	0x40010000
 800cfc8:	40010400 	.word	0x40010400

0800cfcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6a1b      	ldr	r3, [r3, #32]
 800cfe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	69db      	ldr	r3, [r3, #28]
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	021b      	lsls	r3, r3, #8
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	031b      	lsls	r3, r3, #12
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	4313      	orrs	r3, r2
 800d022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a12      	ldr	r2, [pc, #72]	; (800d070 <TIM_OC4_SetConfig+0xa4>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d003      	beq.n	800d034 <TIM_OC4_SetConfig+0x68>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a11      	ldr	r2, [pc, #68]	; (800d074 <TIM_OC4_SetConfig+0xa8>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d109      	bne.n	800d048 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d03a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	019b      	lsls	r3, r3, #6
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	4313      	orrs	r3, r2
 800d046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	621a      	str	r2, [r3, #32]
}
 800d062:	bf00      	nop
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	40010000 	.word	0x40010000
 800d074:	40010400 	.word	0x40010400

0800d078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6a1b      	ldr	r3, [r3, #32]
 800d088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	f023 0201 	bic.w	r2, r3, #1
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	699b      	ldr	r3, [r3, #24]
 800d09a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	011b      	lsls	r3, r3, #4
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	f023 030a 	bic.w	r3, r3, #10
 800d0b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	621a      	str	r2, [r3, #32]
}
 800d0ca:	bf00      	nop
 800d0cc:	371c      	adds	r7, #28
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b087      	sub	sp, #28
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	60f8      	str	r0, [r7, #12]
 800d0de:	60b9      	str	r1, [r7, #8]
 800d0e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	f023 0210 	bic.w	r2, r3, #16
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	031b      	lsls	r3, r3, #12
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	4313      	orrs	r3, r2
 800d10a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d112:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	011b      	lsls	r3, r3, #4
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	621a      	str	r2, [r3, #32]
}
 800d12a:	bf00      	nop
 800d12c:	371c      	adds	r7, #28
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d136:	b480      	push	{r7}
 800d138:	b085      	sub	sp, #20
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d14c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4313      	orrs	r3, r2
 800d154:	f043 0307 	orr.w	r3, r3, #7
 800d158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	609a      	str	r2, [r3, #8]
}
 800d160:	bf00      	nop
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	021a      	lsls	r2, r3, #8
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	431a      	orrs	r2, r3
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	4313      	orrs	r3, r2
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	4313      	orrs	r3, r2
 800d198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	697a      	ldr	r2, [r7, #20]
 800d19e:	609a      	str	r2, [r3, #8]
}
 800d1a0:	bf00      	nop
 800d1a2:	371c      	adds	r7, #28
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b087      	sub	sp, #28
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f003 031f 	and.w	r3, r3, #31
 800d1be:	2201      	movs	r2, #1
 800d1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6a1a      	ldr	r2, [r3, #32]
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	43db      	mvns	r3, r3
 800d1ce:	401a      	ands	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6a1a      	ldr	r2, [r3, #32]
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	f003 031f 	and.w	r3, r3, #31
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	621a      	str	r2, [r3, #32]
}
 800d1ea:	bf00      	nop
 800d1ec:	371c      	adds	r7, #28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
	...

0800d1f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d101      	bne.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d20c:	2302      	movs	r3, #2
 800d20e:	e05a      	b.n	800d2c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2202      	movs	r2, #2
 800d21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4313      	orrs	r3, r2
 800d240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a21      	ldr	r2, [pc, #132]	; (800d2d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d022      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d25c:	d01d      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a1d      	ldr	r2, [pc, #116]	; (800d2d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d018      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a1b      	ldr	r2, [pc, #108]	; (800d2dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d013      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a1a      	ldr	r2, [pc, #104]	; (800d2e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d00e      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a18      	ldr	r2, [pc, #96]	; (800d2e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d009      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a17      	ldr	r2, [pc, #92]	; (800d2e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d004      	beq.n	800d29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a15      	ldr	r2, [pc, #84]	; (800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d10c      	bne.n	800d2b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	40010000 	.word	0x40010000
 800d2d8:	40000400 	.word	0x40000400
 800d2dc:	40000800 	.word	0x40000800
 800d2e0:	40000c00 	.word	0x40000c00
 800d2e4:	40010400 	.word	0x40010400
 800d2e8:	40014000 	.word	0x40014000
 800d2ec:	40001800 	.word	0x40001800

0800d2f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d304:	2b01      	cmp	r3, #1
 800d306:	d101      	bne.n	800d30c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d308:	2302      	movs	r3, #2
 800d30a:	e03d      	b.n	800d388 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	4313      	orrs	r3, r2
 800d320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4313      	orrs	r3, r2
 800d34a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	4313      	orrs	r3, r2
 800d358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	4313      	orrs	r3, r2
 800d374:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e03f      	b.n	800d44e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7fb fba8 	bl	8008b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2224      	movs	r2, #36	; 0x24
 800d3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f829 	bl	800d458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	691a      	ldr	r2, [r3, #16]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	695a      	ldr	r2, [r3, #20]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68da      	ldr	r2, [r3, #12]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2220      	movs	r2, #32
 800d440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2220      	movs	r2, #32
 800d448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d45c:	b0c0      	sub	sp, #256	; 0x100
 800d45e:	af00      	add	r7, sp, #0
 800d460:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d474:	68d9      	ldr	r1, [r3, #12]
 800d476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	ea40 0301 	orr.w	r3, r0, r1
 800d480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d486:	689a      	ldr	r2, [r3, #8]
 800d488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	431a      	orrs	r2, r3
 800d490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	431a      	orrs	r2, r3
 800d498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d49c:	69db      	ldr	r3, [r3, #28]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d4b0:	f021 010c 	bic.w	r1, r1, #12
 800d4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d4be:	430b      	orrs	r3, r1
 800d4c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	695b      	ldr	r3, [r3, #20]
 800d4ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4d2:	6999      	ldr	r1, [r3, #24]
 800d4d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	ea40 0301 	orr.w	r3, r0, r1
 800d4de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	4b8f      	ldr	r3, [pc, #572]	; (800d724 <UART_SetConfig+0x2cc>)
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d005      	beq.n	800d4f8 <UART_SetConfig+0xa0>
 800d4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4b8d      	ldr	r3, [pc, #564]	; (800d728 <UART_SetConfig+0x2d0>)
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d104      	bne.n	800d502 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d4f8:	f7fe fd94 	bl	800c024 <HAL_RCC_GetPCLK2Freq>
 800d4fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d500:	e003      	b.n	800d50a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d502:	f7fe fd7b 	bl	800bffc <HAL_RCC_GetPCLK1Freq>
 800d506:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d50a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d514:	f040 810c 	bne.w	800d730 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d51c:	2200      	movs	r2, #0
 800d51e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d522:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d526:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d52a:	4622      	mov	r2, r4
 800d52c:	462b      	mov	r3, r5
 800d52e:	1891      	adds	r1, r2, r2
 800d530:	65b9      	str	r1, [r7, #88]	; 0x58
 800d532:	415b      	adcs	r3, r3
 800d534:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d536:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d53a:	4621      	mov	r1, r4
 800d53c:	eb12 0801 	adds.w	r8, r2, r1
 800d540:	4629      	mov	r1, r5
 800d542:	eb43 0901 	adc.w	r9, r3, r1
 800d546:	f04f 0200 	mov.w	r2, #0
 800d54a:	f04f 0300 	mov.w	r3, #0
 800d54e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d55a:	4690      	mov	r8, r2
 800d55c:	4699      	mov	r9, r3
 800d55e:	4623      	mov	r3, r4
 800d560:	eb18 0303 	adds.w	r3, r8, r3
 800d564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d568:	462b      	mov	r3, r5
 800d56a:	eb49 0303 	adc.w	r3, r9, r3
 800d56e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d57e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d582:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d586:	460b      	mov	r3, r1
 800d588:	18db      	adds	r3, r3, r3
 800d58a:	653b      	str	r3, [r7, #80]	; 0x50
 800d58c:	4613      	mov	r3, r2
 800d58e:	eb42 0303 	adc.w	r3, r2, r3
 800d592:	657b      	str	r3, [r7, #84]	; 0x54
 800d594:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d59c:	f7f3 fb74 	bl	8000c88 <__aeabi_uldivmod>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4b61      	ldr	r3, [pc, #388]	; (800d72c <UART_SetConfig+0x2d4>)
 800d5a6:	fba3 2302 	umull	r2, r3, r3, r2
 800d5aa:	095b      	lsrs	r3, r3, #5
 800d5ac:	011c      	lsls	r4, r3, #4
 800d5ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d5b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d5bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d5c0:	4642      	mov	r2, r8
 800d5c2:	464b      	mov	r3, r9
 800d5c4:	1891      	adds	r1, r2, r2
 800d5c6:	64b9      	str	r1, [r7, #72]	; 0x48
 800d5c8:	415b      	adcs	r3, r3
 800d5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d5d0:	4641      	mov	r1, r8
 800d5d2:	eb12 0a01 	adds.w	sl, r2, r1
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	eb43 0b01 	adc.w	fp, r3, r1
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	f04f 0300 	mov.w	r3, #0
 800d5e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d5e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d5ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5f0:	4692      	mov	sl, r2
 800d5f2:	469b      	mov	fp, r3
 800d5f4:	4643      	mov	r3, r8
 800d5f6:	eb1a 0303 	adds.w	r3, sl, r3
 800d5fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d5fe:	464b      	mov	r3, r9
 800d600:	eb4b 0303 	adc.w	r3, fp, r3
 800d604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d614:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d618:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d61c:	460b      	mov	r3, r1
 800d61e:	18db      	adds	r3, r3, r3
 800d620:	643b      	str	r3, [r7, #64]	; 0x40
 800d622:	4613      	mov	r3, r2
 800d624:	eb42 0303 	adc.w	r3, r2, r3
 800d628:	647b      	str	r3, [r7, #68]	; 0x44
 800d62a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d62e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d632:	f7f3 fb29 	bl	8000c88 <__aeabi_uldivmod>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	4b3b      	ldr	r3, [pc, #236]	; (800d72c <UART_SetConfig+0x2d4>)
 800d63e:	fba3 2301 	umull	r2, r3, r3, r1
 800d642:	095b      	lsrs	r3, r3, #5
 800d644:	2264      	movs	r2, #100	; 0x64
 800d646:	fb02 f303 	mul.w	r3, r2, r3
 800d64a:	1acb      	subs	r3, r1, r3
 800d64c:	00db      	lsls	r3, r3, #3
 800d64e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d652:	4b36      	ldr	r3, [pc, #216]	; (800d72c <UART_SetConfig+0x2d4>)
 800d654:	fba3 2302 	umull	r2, r3, r3, r2
 800d658:	095b      	lsrs	r3, r3, #5
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d660:	441c      	add	r4, r3
 800d662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d666:	2200      	movs	r2, #0
 800d668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d66c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d670:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d674:	4642      	mov	r2, r8
 800d676:	464b      	mov	r3, r9
 800d678:	1891      	adds	r1, r2, r2
 800d67a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d67c:	415b      	adcs	r3, r3
 800d67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d684:	4641      	mov	r1, r8
 800d686:	1851      	adds	r1, r2, r1
 800d688:	6339      	str	r1, [r7, #48]	; 0x30
 800d68a:	4649      	mov	r1, r9
 800d68c:	414b      	adcs	r3, r1
 800d68e:	637b      	str	r3, [r7, #52]	; 0x34
 800d690:	f04f 0200 	mov.w	r2, #0
 800d694:	f04f 0300 	mov.w	r3, #0
 800d698:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d69c:	4659      	mov	r1, fp
 800d69e:	00cb      	lsls	r3, r1, #3
 800d6a0:	4651      	mov	r1, sl
 800d6a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6a6:	4651      	mov	r1, sl
 800d6a8:	00ca      	lsls	r2, r1, #3
 800d6aa:	4610      	mov	r0, r2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	4642      	mov	r2, r8
 800d6b2:	189b      	adds	r3, r3, r2
 800d6b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6b8:	464b      	mov	r3, r9
 800d6ba:	460a      	mov	r2, r1
 800d6bc:	eb42 0303 	adc.w	r3, r2, r3
 800d6c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d6d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d6d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d6d8:	460b      	mov	r3, r1
 800d6da:	18db      	adds	r3, r3, r3
 800d6dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6de:	4613      	mov	r3, r2
 800d6e0:	eb42 0303 	adc.w	r3, r2, r3
 800d6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d6ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d6ee:	f7f3 facb 	bl	8000c88 <__aeabi_uldivmod>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	; (800d72c <UART_SetConfig+0x2d4>)
 800d6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800d6fc:	095b      	lsrs	r3, r3, #5
 800d6fe:	2164      	movs	r1, #100	; 0x64
 800d700:	fb01 f303 	mul.w	r3, r1, r3
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	00db      	lsls	r3, r3, #3
 800d708:	3332      	adds	r3, #50	; 0x32
 800d70a:	4a08      	ldr	r2, [pc, #32]	; (800d72c <UART_SetConfig+0x2d4>)
 800d70c:	fba2 2303 	umull	r2, r3, r2, r3
 800d710:	095b      	lsrs	r3, r3, #5
 800d712:	f003 0207 	and.w	r2, r3, #7
 800d716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4422      	add	r2, r4
 800d71e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d720:	e105      	b.n	800d92e <UART_SetConfig+0x4d6>
 800d722:	bf00      	nop
 800d724:	40011000 	.word	0x40011000
 800d728:	40011400 	.word	0x40011400
 800d72c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d734:	2200      	movs	r2, #0
 800d736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d73a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d73e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d742:	4642      	mov	r2, r8
 800d744:	464b      	mov	r3, r9
 800d746:	1891      	adds	r1, r2, r2
 800d748:	6239      	str	r1, [r7, #32]
 800d74a:	415b      	adcs	r3, r3
 800d74c:	627b      	str	r3, [r7, #36]	; 0x24
 800d74e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d752:	4641      	mov	r1, r8
 800d754:	1854      	adds	r4, r2, r1
 800d756:	4649      	mov	r1, r9
 800d758:	eb43 0501 	adc.w	r5, r3, r1
 800d75c:	f04f 0200 	mov.w	r2, #0
 800d760:	f04f 0300 	mov.w	r3, #0
 800d764:	00eb      	lsls	r3, r5, #3
 800d766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d76a:	00e2      	lsls	r2, r4, #3
 800d76c:	4614      	mov	r4, r2
 800d76e:	461d      	mov	r5, r3
 800d770:	4643      	mov	r3, r8
 800d772:	18e3      	adds	r3, r4, r3
 800d774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d778:	464b      	mov	r3, r9
 800d77a:	eb45 0303 	adc.w	r3, r5, r3
 800d77e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d78e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d792:	f04f 0200 	mov.w	r2, #0
 800d796:	f04f 0300 	mov.w	r3, #0
 800d79a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d79e:	4629      	mov	r1, r5
 800d7a0:	008b      	lsls	r3, r1, #2
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	008a      	lsls	r2, r1, #2
 800d7ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d7b0:	f7f3 fa6a 	bl	8000c88 <__aeabi_uldivmod>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4b60      	ldr	r3, [pc, #384]	; (800d93c <UART_SetConfig+0x4e4>)
 800d7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800d7be:	095b      	lsrs	r3, r3, #5
 800d7c0:	011c      	lsls	r4, r3, #4
 800d7c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d7cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d7d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d7d4:	4642      	mov	r2, r8
 800d7d6:	464b      	mov	r3, r9
 800d7d8:	1891      	adds	r1, r2, r2
 800d7da:	61b9      	str	r1, [r7, #24]
 800d7dc:	415b      	adcs	r3, r3
 800d7de:	61fb      	str	r3, [r7, #28]
 800d7e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d7e4:	4641      	mov	r1, r8
 800d7e6:	1851      	adds	r1, r2, r1
 800d7e8:	6139      	str	r1, [r7, #16]
 800d7ea:	4649      	mov	r1, r9
 800d7ec:	414b      	adcs	r3, r1
 800d7ee:	617b      	str	r3, [r7, #20]
 800d7f0:	f04f 0200 	mov.w	r2, #0
 800d7f4:	f04f 0300 	mov.w	r3, #0
 800d7f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	00cb      	lsls	r3, r1, #3
 800d800:	4651      	mov	r1, sl
 800d802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d806:	4651      	mov	r1, sl
 800d808:	00ca      	lsls	r2, r1, #3
 800d80a:	4610      	mov	r0, r2
 800d80c:	4619      	mov	r1, r3
 800d80e:	4603      	mov	r3, r0
 800d810:	4642      	mov	r2, r8
 800d812:	189b      	adds	r3, r3, r2
 800d814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d818:	464b      	mov	r3, r9
 800d81a:	460a      	mov	r2, r1
 800d81c:	eb42 0303 	adc.w	r3, r2, r3
 800d820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d82e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d830:	f04f 0200 	mov.w	r2, #0
 800d834:	f04f 0300 	mov.w	r3, #0
 800d838:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d83c:	4649      	mov	r1, r9
 800d83e:	008b      	lsls	r3, r1, #2
 800d840:	4641      	mov	r1, r8
 800d842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d846:	4641      	mov	r1, r8
 800d848:	008a      	lsls	r2, r1, #2
 800d84a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d84e:	f7f3 fa1b 	bl	8000c88 <__aeabi_uldivmod>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4b39      	ldr	r3, [pc, #228]	; (800d93c <UART_SetConfig+0x4e4>)
 800d858:	fba3 1302 	umull	r1, r3, r3, r2
 800d85c:	095b      	lsrs	r3, r3, #5
 800d85e:	2164      	movs	r1, #100	; 0x64
 800d860:	fb01 f303 	mul.w	r3, r1, r3
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	011b      	lsls	r3, r3, #4
 800d868:	3332      	adds	r3, #50	; 0x32
 800d86a:	4a34      	ldr	r2, [pc, #208]	; (800d93c <UART_SetConfig+0x4e4>)
 800d86c:	fba2 2303 	umull	r2, r3, r2, r3
 800d870:	095b      	lsrs	r3, r3, #5
 800d872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d876:	441c      	add	r4, r3
 800d878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d87c:	2200      	movs	r2, #0
 800d87e:	673b      	str	r3, [r7, #112]	; 0x70
 800d880:	677a      	str	r2, [r7, #116]	; 0x74
 800d882:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d886:	4642      	mov	r2, r8
 800d888:	464b      	mov	r3, r9
 800d88a:	1891      	adds	r1, r2, r2
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	415b      	adcs	r3, r3
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d896:	4641      	mov	r1, r8
 800d898:	1851      	adds	r1, r2, r1
 800d89a:	6039      	str	r1, [r7, #0]
 800d89c:	4649      	mov	r1, r9
 800d89e:	414b      	adcs	r3, r1
 800d8a0:	607b      	str	r3, [r7, #4]
 800d8a2:	f04f 0200 	mov.w	r2, #0
 800d8a6:	f04f 0300 	mov.w	r3, #0
 800d8aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d8ae:	4659      	mov	r1, fp
 800d8b0:	00cb      	lsls	r3, r1, #3
 800d8b2:	4651      	mov	r1, sl
 800d8b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d8b8:	4651      	mov	r1, sl
 800d8ba:	00ca      	lsls	r2, r1, #3
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	4642      	mov	r2, r8
 800d8c4:	189b      	adds	r3, r3, r2
 800d8c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8c8:	464b      	mov	r3, r9
 800d8ca:	460a      	mov	r2, r1
 800d8cc:	eb42 0303 	adc.w	r3, r2, r3
 800d8d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	663b      	str	r3, [r7, #96]	; 0x60
 800d8dc:	667a      	str	r2, [r7, #100]	; 0x64
 800d8de:	f04f 0200 	mov.w	r2, #0
 800d8e2:	f04f 0300 	mov.w	r3, #0
 800d8e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d8ea:	4649      	mov	r1, r9
 800d8ec:	008b      	lsls	r3, r1, #2
 800d8ee:	4641      	mov	r1, r8
 800d8f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	008a      	lsls	r2, r1, #2
 800d8f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d8fc:	f7f3 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <UART_SetConfig+0x4e4>)
 800d906:	fba3 1302 	umull	r1, r3, r3, r2
 800d90a:	095b      	lsrs	r3, r3, #5
 800d90c:	2164      	movs	r1, #100	; 0x64
 800d90e:	fb01 f303 	mul.w	r3, r1, r3
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	011b      	lsls	r3, r3, #4
 800d916:	3332      	adds	r3, #50	; 0x32
 800d918:	4a08      	ldr	r2, [pc, #32]	; (800d93c <UART_SetConfig+0x4e4>)
 800d91a:	fba2 2303 	umull	r2, r3, r2, r3
 800d91e:	095b      	lsrs	r3, r3, #5
 800d920:	f003 020f 	and.w	r2, r3, #15
 800d924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4422      	add	r2, r4
 800d92c:	609a      	str	r2, [r3, #8]
}
 800d92e:	bf00      	nop
 800d930:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d934:	46bd      	mov	sp, r7
 800d936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d93a:	bf00      	nop
 800d93c:	51eb851f 	.word	0x51eb851f

0800d940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d940:	b084      	sub	sp, #16
 800d942:	b580      	push	{r7, lr}
 800d944:	b084      	sub	sp, #16
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	f107 001c 	add.w	r0, r7, #28
 800d94e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	2b01      	cmp	r3, #1
 800d956:	d122      	bne.n	800d99e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d96c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d982:	2b01      	cmp	r3, #1
 800d984:	d105      	bne.n	800d992 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 faa2 	bl	800dedc <USB_CoreReset>
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]
 800d99c:	e01a      	b.n	800d9d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa96 	bl	800dedc <USB_CoreReset>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	639a      	str	r2, [r3, #56]	; 0x38
 800d9c6:	e005      	b.n	800d9d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d10b      	bne.n	800d9f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f043 0206 	orr.w	r2, r3, #6
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	f043 0220 	orr.w	r2, r3, #32
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9fe:	b004      	add	sp, #16
 800da00:	4770      	bx	lr

0800da02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da02:	b480      	push	{r7}
 800da04:	b083      	sub	sp, #12
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	f023 0201 	bic.w	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d115      	bne.n	800da72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800da52:	2001      	movs	r0, #1
 800da54:	f7fb f9ce 	bl	8008df4 <HAL_Delay>
      ms++;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3301      	adds	r3, #1
 800da5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fa2e 	bl	800dec0 <USB_GetMode>
 800da64:	4603      	mov	r3, r0
 800da66:	2b01      	cmp	r3, #1
 800da68:	d01e      	beq.n	800daa8 <USB_SetCurrentMode+0x84>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b31      	cmp	r3, #49	; 0x31
 800da6e:	d9f0      	bls.n	800da52 <USB_SetCurrentMode+0x2e>
 800da70:	e01a      	b.n	800daa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800da72:	78fb      	ldrb	r3, [r7, #3]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d115      	bne.n	800daa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800da84:	2001      	movs	r0, #1
 800da86:	f7fb f9b5 	bl	8008df4 <HAL_Delay>
      ms++;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	3301      	adds	r3, #1
 800da8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fa15 	bl	800dec0 <USB_GetMode>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <USB_SetCurrentMode+0x84>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b31      	cmp	r3, #49	; 0x31
 800daa0:	d9f0      	bls.n	800da84 <USB_SetCurrentMode+0x60>
 800daa2:	e001      	b.n	800daa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800daa4:	2301      	movs	r3, #1
 800daa6:	e005      	b.n	800dab4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2b32      	cmp	r3, #50	; 0x32
 800daac:	d101      	bne.n	800dab2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800daae:	2301      	movs	r3, #1
 800dab0:	e000      	b.n	800dab4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dabc:	b084      	sub	sp, #16
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b086      	sub	sp, #24
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800daca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
 800dada:	e009      	b.n	800daf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	3340      	adds	r3, #64	; 0x40
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	2200      	movs	r2, #0
 800dae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	3301      	adds	r3, #1
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b0e      	cmp	r3, #14
 800daf4:	d9f2      	bls.n	800dadc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800daf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d11c      	bne.n	800db36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db0a:	f043 0302 	orr.w	r3, r3, #2
 800db0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	639a      	str	r2, [r3, #56]	; 0x38
 800db34:	e00b      	b.n	800db4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db54:	461a      	mov	r2, r3
 800db56:	2300      	movs	r3, #0
 800db58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db60:	4619      	mov	r1, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db68:	461a      	mov	r2, r3
 800db6a:	680b      	ldr	r3, [r1, #0]
 800db6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	2b01      	cmp	r3, #1
 800db72:	d10c      	bne.n	800db8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	2b00      	cmp	r3, #0
 800db78:	d104      	bne.n	800db84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800db7a:	2100      	movs	r1, #0
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f965 	bl	800de4c <USB_SetDevSpeed>
 800db82:	e008      	b.n	800db96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800db84:	2101      	movs	r1, #1
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 f960 	bl	800de4c <USB_SetDevSpeed>
 800db8c:	e003      	b.n	800db96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800db8e:	2103      	movs	r1, #3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f95b 	bl	800de4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db96:	2110      	movs	r1, #16
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f8f3 	bl	800dd84 <USB_FlushTxFifo>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d001      	beq.n	800dba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f91f 	bl	800ddec <USB_FlushRxFifo>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbca:	461a      	mov	r2, r3
 800dbcc:	2300      	movs	r3, #0
 800dbce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	613b      	str	r3, [r7, #16]
 800dbe0:	e043      	b.n	800dc6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	015a      	lsls	r2, r3, #5
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4413      	add	r3, r2
 800dbea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbf8:	d118      	bne.n	800dc2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10a      	bne.n	800dc16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	015a      	lsls	r2, r3, #5
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4413      	add	r3, r2
 800dc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc12:	6013      	str	r3, [r2, #0]
 800dc14:	e013      	b.n	800dc3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	015a      	lsls	r2, r3, #5
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc22:	461a      	mov	r2, r3
 800dc24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	e008      	b.n	800dc3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	015a      	lsls	r2, r3, #5
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	4413      	add	r3, r2
 800dc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc38:	461a      	mov	r2, r3
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	015a      	lsls	r2, r3, #5
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	4413      	add	r3, r2
 800dc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	015a      	lsls	r2, r3, #5
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4413      	add	r3, r2
 800dc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dc62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	3301      	adds	r3, #1
 800dc68:	613b      	str	r3, [r7, #16]
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	693a      	ldr	r2, [r7, #16]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d3b7      	bcc.n	800dbe2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc72:	2300      	movs	r3, #0
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	e043      	b.n	800dd00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc8e:	d118      	bne.n	800dcc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10a      	bne.n	800dcac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	015a      	lsls	r2, r3, #5
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca2:	461a      	mov	r2, r3
 800dca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dca8:	6013      	str	r3, [r2, #0]
 800dcaa:	e013      	b.n	800dcd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	015a      	lsls	r2, r3, #5
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb8:	461a      	mov	r2, r3
 800dcba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	e008      	b.n	800dcd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcce:	461a      	mov	r2, r3
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce0:	461a      	mov	r2, r3
 800dce2:	2300      	movs	r3, #0
 800dce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	015a      	lsls	r2, r3, #5
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	4413      	add	r3, r2
 800dcee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dcf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	613b      	str	r3, [r7, #16]
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d3b7      	bcc.n	800dc78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dd28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d105      	bne.n	800dd3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	699b      	ldr	r3, [r3, #24]
 800dd34:	f043 0210 	orr.w	r2, r3, #16
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	699a      	ldr	r2, [r3, #24]
 800dd40:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <USB_DevInit+0x2c4>)
 800dd42:	4313      	orrs	r3, r2
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d005      	beq.n	800dd5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	699b      	ldr	r3, [r3, #24]
 800dd52:	f043 0208 	orr.w	r2, r3, #8
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d107      	bne.n	800dd70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	699b      	ldr	r3, [r3, #24]
 800dd64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd68:	f043 0304 	orr.w	r3, r3, #4
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd7c:	b004      	add	sp, #16
 800dd7e:	4770      	bx	lr
 800dd80:	803c3800 	.word	0x803c3800

0800dd84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3301      	adds	r3, #1
 800dd96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4a13      	ldr	r2, [pc, #76]	; (800dde8 <USB_FlushTxFifo+0x64>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d901      	bls.n	800dda4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	e01b      	b.n	800dddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	daf2      	bge.n	800dd92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ddac:	2300      	movs	r3, #0
 800ddae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	019b      	lsls	r3, r3, #6
 800ddb4:	f043 0220 	orr.w	r2, r3, #32
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4a08      	ldr	r2, [pc, #32]	; (800dde8 <USB_FlushTxFifo+0x64>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d901      	bls.n	800ddce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e006      	b.n	800dddc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	f003 0320 	and.w	r3, r3, #32
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d0f0      	beq.n	800ddbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3714      	adds	r7, #20
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	00030d40 	.word	0x00030d40

0800ddec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	4a11      	ldr	r2, [pc, #68]	; (800de48 <USB_FlushRxFifo+0x5c>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d901      	bls.n	800de0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de06:	2303      	movs	r3, #3
 800de08:	e018      	b.n	800de3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	daf2      	bge.n	800ddf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2210      	movs	r2, #16
 800de1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3301      	adds	r3, #1
 800de20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	4a08      	ldr	r2, [pc, #32]	; (800de48 <USB_FlushRxFifo+0x5c>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d901      	bls.n	800de2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e006      	b.n	800de3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	f003 0310 	and.w	r3, r3, #16
 800de36:	2b10      	cmp	r3, #16
 800de38:	d0f0      	beq.n	800de1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	00030d40 	.word	0x00030d40

0800de4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	78fb      	ldrb	r3, [r7, #3]
 800de66:	68f9      	ldr	r1, [r7, #12]
 800de68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de6c:	4313      	orrs	r3, r2
 800de6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de7e:	b480      	push	{r7}
 800de80:	b085      	sub	sp, #20
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de98:	f023 0303 	bic.w	r3, r3, #3
 800de9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800deac:	f043 0302 	orr.w	r3, r3, #2
 800deb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	695b      	ldr	r3, [r3, #20]
 800decc:	f003 0301 	and.w	r3, r3, #1
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dee4:	2300      	movs	r3, #0
 800dee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3301      	adds	r3, #1
 800deec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4a13      	ldr	r2, [pc, #76]	; (800df40 <USB_CoreReset+0x64>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d901      	bls.n	800defa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800def6:	2303      	movs	r3, #3
 800def8:	e01b      	b.n	800df32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	2b00      	cmp	r3, #0
 800df00:	daf2      	bge.n	800dee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df02:	2300      	movs	r3, #0
 800df04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	f043 0201 	orr.w	r2, r3, #1
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	3301      	adds	r3, #1
 800df16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	4a09      	ldr	r2, [pc, #36]	; (800df40 <USB_CoreReset+0x64>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d901      	bls.n	800df24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df20:	2303      	movs	r3, #3
 800df22:	e006      	b.n	800df32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d0f0      	beq.n	800df12 <USB_CoreReset+0x36>

  return HAL_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3714      	adds	r7, #20
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	00030d40 	.word	0x00030d40

0800df44 <__errno>:
 800df44:	4b01      	ldr	r3, [pc, #4]	; (800df4c <__errno+0x8>)
 800df46:	6818      	ldr	r0, [r3, #0]
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	20000328 	.word	0x20000328

0800df50 <__libc_init_array>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	4d0d      	ldr	r5, [pc, #52]	; (800df88 <__libc_init_array+0x38>)
 800df54:	4c0d      	ldr	r4, [pc, #52]	; (800df8c <__libc_init_array+0x3c>)
 800df56:	1b64      	subs	r4, r4, r5
 800df58:	10a4      	asrs	r4, r4, #2
 800df5a:	2600      	movs	r6, #0
 800df5c:	42a6      	cmp	r6, r4
 800df5e:	d109      	bne.n	800df74 <__libc_init_array+0x24>
 800df60:	4d0b      	ldr	r5, [pc, #44]	; (800df90 <__libc_init_array+0x40>)
 800df62:	4c0c      	ldr	r4, [pc, #48]	; (800df94 <__libc_init_array+0x44>)
 800df64:	f002 ff0a 	bl	8010d7c <_init>
 800df68:	1b64      	subs	r4, r4, r5
 800df6a:	10a4      	asrs	r4, r4, #2
 800df6c:	2600      	movs	r6, #0
 800df6e:	42a6      	cmp	r6, r4
 800df70:	d105      	bne.n	800df7e <__libc_init_array+0x2e>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	f855 3b04 	ldr.w	r3, [r5], #4
 800df78:	4798      	blx	r3
 800df7a:	3601      	adds	r6, #1
 800df7c:	e7ee      	b.n	800df5c <__libc_init_array+0xc>
 800df7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df82:	4798      	blx	r3
 800df84:	3601      	adds	r6, #1
 800df86:	e7f2      	b.n	800df6e <__libc_init_array+0x1e>
 800df88:	0801162c 	.word	0x0801162c
 800df8c:	0801162c 	.word	0x0801162c
 800df90:	0801162c 	.word	0x0801162c
 800df94:	08011630 	.word	0x08011630

0800df98 <malloc>:
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <malloc+0xc>)
 800df9a:	4601      	mov	r1, r0
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	f000 b88d 	b.w	800e0bc <_malloc_r>
 800dfa2:	bf00      	nop
 800dfa4:	20000328 	.word	0x20000328

0800dfa8 <free>:
 800dfa8:	4b02      	ldr	r3, [pc, #8]	; (800dfb4 <free+0xc>)
 800dfaa:	4601      	mov	r1, r0
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f000 b819 	b.w	800dfe4 <_free_r>
 800dfb2:	bf00      	nop
 800dfb4:	20000328 	.word	0x20000328

0800dfb8 <memcpy>:
 800dfb8:	440a      	add	r2, r1
 800dfba:	4291      	cmp	r1, r2
 800dfbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfc0:	d100      	bne.n	800dfc4 <memcpy+0xc>
 800dfc2:	4770      	bx	lr
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfce:	4291      	cmp	r1, r2
 800dfd0:	d1f9      	bne.n	800dfc6 <memcpy+0xe>
 800dfd2:	bd10      	pop	{r4, pc}

0800dfd4 <memset>:
 800dfd4:	4402      	add	r2, r0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d100      	bne.n	800dfde <memset+0xa>
 800dfdc:	4770      	bx	lr
 800dfde:	f803 1b01 	strb.w	r1, [r3], #1
 800dfe2:	e7f9      	b.n	800dfd8 <memset+0x4>

0800dfe4 <_free_r>:
 800dfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe6:	2900      	cmp	r1, #0
 800dfe8:	d044      	beq.n	800e074 <_free_r+0x90>
 800dfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfee:	9001      	str	r0, [sp, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f1a1 0404 	sub.w	r4, r1, #4
 800dff6:	bfb8      	it	lt
 800dff8:	18e4      	addlt	r4, r4, r3
 800dffa:	f001 fbeb 	bl	800f7d4 <__malloc_lock>
 800dffe:	4a1e      	ldr	r2, [pc, #120]	; (800e078 <_free_r+0x94>)
 800e000:	9801      	ldr	r0, [sp, #4]
 800e002:	6813      	ldr	r3, [r2, #0]
 800e004:	b933      	cbnz	r3, 800e014 <_free_r+0x30>
 800e006:	6063      	str	r3, [r4, #4]
 800e008:	6014      	str	r4, [r2, #0]
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e010:	f001 bbe6 	b.w	800f7e0 <__malloc_unlock>
 800e014:	42a3      	cmp	r3, r4
 800e016:	d908      	bls.n	800e02a <_free_r+0x46>
 800e018:	6825      	ldr	r5, [r4, #0]
 800e01a:	1961      	adds	r1, r4, r5
 800e01c:	428b      	cmp	r3, r1
 800e01e:	bf01      	itttt	eq
 800e020:	6819      	ldreq	r1, [r3, #0]
 800e022:	685b      	ldreq	r3, [r3, #4]
 800e024:	1949      	addeq	r1, r1, r5
 800e026:	6021      	streq	r1, [r4, #0]
 800e028:	e7ed      	b.n	800e006 <_free_r+0x22>
 800e02a:	461a      	mov	r2, r3
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	b10b      	cbz	r3, 800e034 <_free_r+0x50>
 800e030:	42a3      	cmp	r3, r4
 800e032:	d9fa      	bls.n	800e02a <_free_r+0x46>
 800e034:	6811      	ldr	r1, [r2, #0]
 800e036:	1855      	adds	r5, r2, r1
 800e038:	42a5      	cmp	r5, r4
 800e03a:	d10b      	bne.n	800e054 <_free_r+0x70>
 800e03c:	6824      	ldr	r4, [r4, #0]
 800e03e:	4421      	add	r1, r4
 800e040:	1854      	adds	r4, r2, r1
 800e042:	42a3      	cmp	r3, r4
 800e044:	6011      	str	r1, [r2, #0]
 800e046:	d1e0      	bne.n	800e00a <_free_r+0x26>
 800e048:	681c      	ldr	r4, [r3, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	6053      	str	r3, [r2, #4]
 800e04e:	4421      	add	r1, r4
 800e050:	6011      	str	r1, [r2, #0]
 800e052:	e7da      	b.n	800e00a <_free_r+0x26>
 800e054:	d902      	bls.n	800e05c <_free_r+0x78>
 800e056:	230c      	movs	r3, #12
 800e058:	6003      	str	r3, [r0, #0]
 800e05a:	e7d6      	b.n	800e00a <_free_r+0x26>
 800e05c:	6825      	ldr	r5, [r4, #0]
 800e05e:	1961      	adds	r1, r4, r5
 800e060:	428b      	cmp	r3, r1
 800e062:	bf04      	itt	eq
 800e064:	6819      	ldreq	r1, [r3, #0]
 800e066:	685b      	ldreq	r3, [r3, #4]
 800e068:	6063      	str	r3, [r4, #4]
 800e06a:	bf04      	itt	eq
 800e06c:	1949      	addeq	r1, r1, r5
 800e06e:	6021      	streq	r1, [r4, #0]
 800e070:	6054      	str	r4, [r2, #4]
 800e072:	e7ca      	b.n	800e00a <_free_r+0x26>
 800e074:	b003      	add	sp, #12
 800e076:	bd30      	pop	{r4, r5, pc}
 800e078:	20001518 	.word	0x20001518

0800e07c <sbrk_aligned>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	4e0e      	ldr	r6, [pc, #56]	; (800e0b8 <sbrk_aligned+0x3c>)
 800e080:	460c      	mov	r4, r1
 800e082:	6831      	ldr	r1, [r6, #0]
 800e084:	4605      	mov	r5, r0
 800e086:	b911      	cbnz	r1, 800e08e <sbrk_aligned+0x12>
 800e088:	f000 fcf6 	bl	800ea78 <_sbrk_r>
 800e08c:	6030      	str	r0, [r6, #0]
 800e08e:	4621      	mov	r1, r4
 800e090:	4628      	mov	r0, r5
 800e092:	f000 fcf1 	bl	800ea78 <_sbrk_r>
 800e096:	1c43      	adds	r3, r0, #1
 800e098:	d00a      	beq.n	800e0b0 <sbrk_aligned+0x34>
 800e09a:	1cc4      	adds	r4, r0, #3
 800e09c:	f024 0403 	bic.w	r4, r4, #3
 800e0a0:	42a0      	cmp	r0, r4
 800e0a2:	d007      	beq.n	800e0b4 <sbrk_aligned+0x38>
 800e0a4:	1a21      	subs	r1, r4, r0
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 fce6 	bl	800ea78 <_sbrk_r>
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	d101      	bne.n	800e0b4 <sbrk_aligned+0x38>
 800e0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}
 800e0b8:	2000151c 	.word	0x2000151c

0800e0bc <_malloc_r>:
 800e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c0:	1ccd      	adds	r5, r1, #3
 800e0c2:	f025 0503 	bic.w	r5, r5, #3
 800e0c6:	3508      	adds	r5, #8
 800e0c8:	2d0c      	cmp	r5, #12
 800e0ca:	bf38      	it	cc
 800e0cc:	250c      	movcc	r5, #12
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	db01      	blt.n	800e0d8 <_malloc_r+0x1c>
 800e0d4:	42a9      	cmp	r1, r5
 800e0d6:	d905      	bls.n	800e0e4 <_malloc_r+0x28>
 800e0d8:	230c      	movs	r3, #12
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	2600      	movs	r6, #0
 800e0de:	4630      	mov	r0, r6
 800e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e4:	4e2e      	ldr	r6, [pc, #184]	; (800e1a0 <_malloc_r+0xe4>)
 800e0e6:	f001 fb75 	bl	800f7d4 <__malloc_lock>
 800e0ea:	6833      	ldr	r3, [r6, #0]
 800e0ec:	461c      	mov	r4, r3
 800e0ee:	bb34      	cbnz	r4, 800e13e <_malloc_r+0x82>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	f7ff ffc2 	bl	800e07c <sbrk_aligned>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	d14d      	bne.n	800e19a <_malloc_r+0xde>
 800e0fe:	6834      	ldr	r4, [r6, #0]
 800e100:	4626      	mov	r6, r4
 800e102:	2e00      	cmp	r6, #0
 800e104:	d140      	bne.n	800e188 <_malloc_r+0xcc>
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	4631      	mov	r1, r6
 800e10a:	4638      	mov	r0, r7
 800e10c:	eb04 0803 	add.w	r8, r4, r3
 800e110:	f000 fcb2 	bl	800ea78 <_sbrk_r>
 800e114:	4580      	cmp	r8, r0
 800e116:	d13a      	bne.n	800e18e <_malloc_r+0xd2>
 800e118:	6821      	ldr	r1, [r4, #0]
 800e11a:	3503      	adds	r5, #3
 800e11c:	1a6d      	subs	r5, r5, r1
 800e11e:	f025 0503 	bic.w	r5, r5, #3
 800e122:	3508      	adds	r5, #8
 800e124:	2d0c      	cmp	r5, #12
 800e126:	bf38      	it	cc
 800e128:	250c      	movcc	r5, #12
 800e12a:	4629      	mov	r1, r5
 800e12c:	4638      	mov	r0, r7
 800e12e:	f7ff ffa5 	bl	800e07c <sbrk_aligned>
 800e132:	3001      	adds	r0, #1
 800e134:	d02b      	beq.n	800e18e <_malloc_r+0xd2>
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	442b      	add	r3, r5
 800e13a:	6023      	str	r3, [r4, #0]
 800e13c:	e00e      	b.n	800e15c <_malloc_r+0xa0>
 800e13e:	6822      	ldr	r2, [r4, #0]
 800e140:	1b52      	subs	r2, r2, r5
 800e142:	d41e      	bmi.n	800e182 <_malloc_r+0xc6>
 800e144:	2a0b      	cmp	r2, #11
 800e146:	d916      	bls.n	800e176 <_malloc_r+0xba>
 800e148:	1961      	adds	r1, r4, r5
 800e14a:	42a3      	cmp	r3, r4
 800e14c:	6025      	str	r5, [r4, #0]
 800e14e:	bf18      	it	ne
 800e150:	6059      	strne	r1, [r3, #4]
 800e152:	6863      	ldr	r3, [r4, #4]
 800e154:	bf08      	it	eq
 800e156:	6031      	streq	r1, [r6, #0]
 800e158:	5162      	str	r2, [r4, r5]
 800e15a:	604b      	str	r3, [r1, #4]
 800e15c:	4638      	mov	r0, r7
 800e15e:	f104 060b 	add.w	r6, r4, #11
 800e162:	f001 fb3d 	bl	800f7e0 <__malloc_unlock>
 800e166:	f026 0607 	bic.w	r6, r6, #7
 800e16a:	1d23      	adds	r3, r4, #4
 800e16c:	1af2      	subs	r2, r6, r3
 800e16e:	d0b6      	beq.n	800e0de <_malloc_r+0x22>
 800e170:	1b9b      	subs	r3, r3, r6
 800e172:	50a3      	str	r3, [r4, r2]
 800e174:	e7b3      	b.n	800e0de <_malloc_r+0x22>
 800e176:	6862      	ldr	r2, [r4, #4]
 800e178:	42a3      	cmp	r3, r4
 800e17a:	bf0c      	ite	eq
 800e17c:	6032      	streq	r2, [r6, #0]
 800e17e:	605a      	strne	r2, [r3, #4]
 800e180:	e7ec      	b.n	800e15c <_malloc_r+0xa0>
 800e182:	4623      	mov	r3, r4
 800e184:	6864      	ldr	r4, [r4, #4]
 800e186:	e7b2      	b.n	800e0ee <_malloc_r+0x32>
 800e188:	4634      	mov	r4, r6
 800e18a:	6876      	ldr	r6, [r6, #4]
 800e18c:	e7b9      	b.n	800e102 <_malloc_r+0x46>
 800e18e:	230c      	movs	r3, #12
 800e190:	603b      	str	r3, [r7, #0]
 800e192:	4638      	mov	r0, r7
 800e194:	f001 fb24 	bl	800f7e0 <__malloc_unlock>
 800e198:	e7a1      	b.n	800e0de <_malloc_r+0x22>
 800e19a:	6025      	str	r5, [r4, #0]
 800e19c:	e7de      	b.n	800e15c <_malloc_r+0xa0>
 800e19e:	bf00      	nop
 800e1a0:	20001518 	.word	0x20001518

0800e1a4 <__cvt>:
 800e1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a8:	ec55 4b10 	vmov	r4, r5, d0
 800e1ac:	2d00      	cmp	r5, #0
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	bfbb      	ittet	lt
 800e1b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e1ba:	461d      	movlt	r5, r3
 800e1bc:	2300      	movge	r3, #0
 800e1be:	232d      	movlt	r3, #45	; 0x2d
 800e1c0:	700b      	strb	r3, [r1, #0]
 800e1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e1c8:	4691      	mov	r9, r2
 800e1ca:	f023 0820 	bic.w	r8, r3, #32
 800e1ce:	bfbc      	itt	lt
 800e1d0:	4622      	movlt	r2, r4
 800e1d2:	4614      	movlt	r4, r2
 800e1d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e1d8:	d005      	beq.n	800e1e6 <__cvt+0x42>
 800e1da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e1de:	d100      	bne.n	800e1e2 <__cvt+0x3e>
 800e1e0:	3601      	adds	r6, #1
 800e1e2:	2102      	movs	r1, #2
 800e1e4:	e000      	b.n	800e1e8 <__cvt+0x44>
 800e1e6:	2103      	movs	r1, #3
 800e1e8:	ab03      	add	r3, sp, #12
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	ab02      	add	r3, sp, #8
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	ec45 4b10 	vmov	d0, r4, r5
 800e1f4:	4653      	mov	r3, sl
 800e1f6:	4632      	mov	r2, r6
 800e1f8:	f000 fcfa 	bl	800ebf0 <_dtoa_r>
 800e1fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e200:	4607      	mov	r7, r0
 800e202:	d102      	bne.n	800e20a <__cvt+0x66>
 800e204:	f019 0f01 	tst.w	r9, #1
 800e208:	d022      	beq.n	800e250 <__cvt+0xac>
 800e20a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e20e:	eb07 0906 	add.w	r9, r7, r6
 800e212:	d110      	bne.n	800e236 <__cvt+0x92>
 800e214:	783b      	ldrb	r3, [r7, #0]
 800e216:	2b30      	cmp	r3, #48	; 0x30
 800e218:	d10a      	bne.n	800e230 <__cvt+0x8c>
 800e21a:	2200      	movs	r2, #0
 800e21c:	2300      	movs	r3, #0
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 800e226:	b918      	cbnz	r0, 800e230 <__cvt+0x8c>
 800e228:	f1c6 0601 	rsb	r6, r6, #1
 800e22c:	f8ca 6000 	str.w	r6, [sl]
 800e230:	f8da 3000 	ldr.w	r3, [sl]
 800e234:	4499      	add	r9, r3
 800e236:	2200      	movs	r2, #0
 800e238:	2300      	movs	r3, #0
 800e23a:	4620      	mov	r0, r4
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f2 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800e242:	b108      	cbz	r0, 800e248 <__cvt+0xa4>
 800e244:	f8cd 900c 	str.w	r9, [sp, #12]
 800e248:	2230      	movs	r2, #48	; 0x30
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	454b      	cmp	r3, r9
 800e24e:	d307      	bcc.n	800e260 <__cvt+0xbc>
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e254:	1bdb      	subs	r3, r3, r7
 800e256:	4638      	mov	r0, r7
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	b004      	add	sp, #16
 800e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e260:	1c59      	adds	r1, r3, #1
 800e262:	9103      	str	r1, [sp, #12]
 800e264:	701a      	strb	r2, [r3, #0]
 800e266:	e7f0      	b.n	800e24a <__cvt+0xa6>

0800e268 <__exponent>:
 800e268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e26a:	4603      	mov	r3, r0
 800e26c:	2900      	cmp	r1, #0
 800e26e:	bfb8      	it	lt
 800e270:	4249      	neglt	r1, r1
 800e272:	f803 2b02 	strb.w	r2, [r3], #2
 800e276:	bfb4      	ite	lt
 800e278:	222d      	movlt	r2, #45	; 0x2d
 800e27a:	222b      	movge	r2, #43	; 0x2b
 800e27c:	2909      	cmp	r1, #9
 800e27e:	7042      	strb	r2, [r0, #1]
 800e280:	dd2a      	ble.n	800e2d8 <__exponent+0x70>
 800e282:	f10d 0407 	add.w	r4, sp, #7
 800e286:	46a4      	mov	ip, r4
 800e288:	270a      	movs	r7, #10
 800e28a:	46a6      	mov	lr, r4
 800e28c:	460a      	mov	r2, r1
 800e28e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e292:	fb07 1516 	mls	r5, r7, r6, r1
 800e296:	3530      	adds	r5, #48	; 0x30
 800e298:	2a63      	cmp	r2, #99	; 0x63
 800e29a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e29e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	dcf1      	bgt.n	800e28a <__exponent+0x22>
 800e2a6:	3130      	adds	r1, #48	; 0x30
 800e2a8:	f1ae 0502 	sub.w	r5, lr, #2
 800e2ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e2b0:	1c44      	adds	r4, r0, #1
 800e2b2:	4629      	mov	r1, r5
 800e2b4:	4561      	cmp	r1, ip
 800e2b6:	d30a      	bcc.n	800e2ce <__exponent+0x66>
 800e2b8:	f10d 0209 	add.w	r2, sp, #9
 800e2bc:	eba2 020e 	sub.w	r2, r2, lr
 800e2c0:	4565      	cmp	r5, ip
 800e2c2:	bf88      	it	hi
 800e2c4:	2200      	movhi	r2, #0
 800e2c6:	4413      	add	r3, r2
 800e2c8:	1a18      	subs	r0, r3, r0
 800e2ca:	b003      	add	sp, #12
 800e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e2d6:	e7ed      	b.n	800e2b4 <__exponent+0x4c>
 800e2d8:	2330      	movs	r3, #48	; 0x30
 800e2da:	3130      	adds	r1, #48	; 0x30
 800e2dc:	7083      	strb	r3, [r0, #2]
 800e2de:	70c1      	strb	r1, [r0, #3]
 800e2e0:	1d03      	adds	r3, r0, #4
 800e2e2:	e7f1      	b.n	800e2c8 <__exponent+0x60>

0800e2e4 <_printf_float>:
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	ed2d 8b02 	vpush	{d8}
 800e2ec:	b08d      	sub	sp, #52	; 0x34
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e2f4:	4616      	mov	r6, r2
 800e2f6:	461f      	mov	r7, r3
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	f001 fa67 	bl	800f7cc <_localeconv_r>
 800e2fe:	f8d0 a000 	ldr.w	sl, [r0]
 800e302:	4650      	mov	r0, sl
 800e304:	f7f1 ff64 	bl	80001d0 <strlen>
 800e308:	2300      	movs	r3, #0
 800e30a:	930a      	str	r3, [sp, #40]	; 0x28
 800e30c:	6823      	ldr	r3, [r4, #0]
 800e30e:	9305      	str	r3, [sp, #20]
 800e310:	f8d8 3000 	ldr.w	r3, [r8]
 800e314:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e318:	3307      	adds	r3, #7
 800e31a:	f023 0307 	bic.w	r3, r3, #7
 800e31e:	f103 0208 	add.w	r2, r3, #8
 800e322:	f8c8 2000 	str.w	r2, [r8]
 800e326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e32e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	f8cd 8018 	str.w	r8, [sp, #24]
 800e33c:	ee08 0a10 	vmov	s16, r0
 800e340:	4b9f      	ldr	r3, [pc, #636]	; (800e5c0 <_printf_float+0x2dc>)
 800e342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	f7f2 fbef 	bl	8000b2c <__aeabi_dcmpun>
 800e34e:	bb88      	cbnz	r0, 800e3b4 <_printf_float+0xd0>
 800e350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e354:	4b9a      	ldr	r3, [pc, #616]	; (800e5c0 <_printf_float+0x2dc>)
 800e356:	f04f 32ff 	mov.w	r2, #4294967295
 800e35a:	f7f2 fbc9 	bl	8000af0 <__aeabi_dcmple>
 800e35e:	bb48      	cbnz	r0, 800e3b4 <_printf_float+0xd0>
 800e360:	2200      	movs	r2, #0
 800e362:	2300      	movs	r3, #0
 800e364:	4640      	mov	r0, r8
 800e366:	4649      	mov	r1, r9
 800e368:	f7f2 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800e36c:	b110      	cbz	r0, 800e374 <_printf_float+0x90>
 800e36e:	232d      	movs	r3, #45	; 0x2d
 800e370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e374:	4b93      	ldr	r3, [pc, #588]	; (800e5c4 <_printf_float+0x2e0>)
 800e376:	4894      	ldr	r0, [pc, #592]	; (800e5c8 <_printf_float+0x2e4>)
 800e378:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e37c:	bf94      	ite	ls
 800e37e:	4698      	movls	r8, r3
 800e380:	4680      	movhi	r8, r0
 800e382:	2303      	movs	r3, #3
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	9b05      	ldr	r3, [sp, #20]
 800e388:	f023 0204 	bic.w	r2, r3, #4
 800e38c:	6022      	str	r2, [r4, #0]
 800e38e:	f04f 0900 	mov.w	r9, #0
 800e392:	9700      	str	r7, [sp, #0]
 800e394:	4633      	mov	r3, r6
 800e396:	aa0b      	add	r2, sp, #44	; 0x2c
 800e398:	4621      	mov	r1, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 f9d8 	bl	800e750 <_printf_common>
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	f040 8090 	bne.w	800e4c6 <_printf_float+0x1e2>
 800e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3aa:	b00d      	add	sp, #52	; 0x34
 800e3ac:	ecbd 8b02 	vpop	{d8}
 800e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b4:	4642      	mov	r2, r8
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	4640      	mov	r0, r8
 800e3ba:	4649      	mov	r1, r9
 800e3bc:	f7f2 fbb6 	bl	8000b2c <__aeabi_dcmpun>
 800e3c0:	b140      	cbz	r0, 800e3d4 <_printf_float+0xf0>
 800e3c2:	464b      	mov	r3, r9
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfbc      	itt	lt
 800e3c8:	232d      	movlt	r3, #45	; 0x2d
 800e3ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e3ce:	487f      	ldr	r0, [pc, #508]	; (800e5cc <_printf_float+0x2e8>)
 800e3d0:	4b7f      	ldr	r3, [pc, #508]	; (800e5d0 <_printf_float+0x2ec>)
 800e3d2:	e7d1      	b.n	800e378 <_printf_float+0x94>
 800e3d4:	6863      	ldr	r3, [r4, #4]
 800e3d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e3da:	9206      	str	r2, [sp, #24]
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	d13f      	bne.n	800e460 <_printf_float+0x17c>
 800e3e0:	2306      	movs	r3, #6
 800e3e2:	6063      	str	r3, [r4, #4]
 800e3e4:	9b05      	ldr	r3, [sp, #20]
 800e3e6:	6861      	ldr	r1, [r4, #4]
 800e3e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9303      	str	r3, [sp, #12]
 800e3f0:	ab0a      	add	r3, sp, #40	; 0x28
 800e3f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e3f6:	ab09      	add	r3, sp, #36	; 0x24
 800e3f8:	ec49 8b10 	vmov	d0, r8, r9
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	6022      	str	r2, [r4, #0]
 800e400:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e404:	4628      	mov	r0, r5
 800e406:	f7ff fecd 	bl	800e1a4 <__cvt>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e40e:	2b47      	cmp	r3, #71	; 0x47
 800e410:	4680      	mov	r8, r0
 800e412:	d108      	bne.n	800e426 <_printf_float+0x142>
 800e414:	1cc8      	adds	r0, r1, #3
 800e416:	db02      	blt.n	800e41e <_printf_float+0x13a>
 800e418:	6863      	ldr	r3, [r4, #4]
 800e41a:	4299      	cmp	r1, r3
 800e41c:	dd41      	ble.n	800e4a2 <_printf_float+0x1be>
 800e41e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e422:	fa5f fb8b 	uxtb.w	fp, fp
 800e426:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e42a:	d820      	bhi.n	800e46e <_printf_float+0x18a>
 800e42c:	3901      	subs	r1, #1
 800e42e:	465a      	mov	r2, fp
 800e430:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e434:	9109      	str	r1, [sp, #36]	; 0x24
 800e436:	f7ff ff17 	bl	800e268 <__exponent>
 800e43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e43c:	1813      	adds	r3, r2, r0
 800e43e:	2a01      	cmp	r2, #1
 800e440:	4681      	mov	r9, r0
 800e442:	6123      	str	r3, [r4, #16]
 800e444:	dc02      	bgt.n	800e44c <_printf_float+0x168>
 800e446:	6822      	ldr	r2, [r4, #0]
 800e448:	07d2      	lsls	r2, r2, #31
 800e44a:	d501      	bpl.n	800e450 <_printf_float+0x16c>
 800e44c:	3301      	adds	r3, #1
 800e44e:	6123      	str	r3, [r4, #16]
 800e450:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e454:	2b00      	cmp	r3, #0
 800e456:	d09c      	beq.n	800e392 <_printf_float+0xae>
 800e458:	232d      	movs	r3, #45	; 0x2d
 800e45a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e45e:	e798      	b.n	800e392 <_printf_float+0xae>
 800e460:	9a06      	ldr	r2, [sp, #24]
 800e462:	2a47      	cmp	r2, #71	; 0x47
 800e464:	d1be      	bne.n	800e3e4 <_printf_float+0x100>
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1bc      	bne.n	800e3e4 <_printf_float+0x100>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e7b9      	b.n	800e3e2 <_printf_float+0xfe>
 800e46e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e472:	d118      	bne.n	800e4a6 <_printf_float+0x1c2>
 800e474:	2900      	cmp	r1, #0
 800e476:	6863      	ldr	r3, [r4, #4]
 800e478:	dd0b      	ble.n	800e492 <_printf_float+0x1ae>
 800e47a:	6121      	str	r1, [r4, #16]
 800e47c:	b913      	cbnz	r3, 800e484 <_printf_float+0x1a0>
 800e47e:	6822      	ldr	r2, [r4, #0]
 800e480:	07d0      	lsls	r0, r2, #31
 800e482:	d502      	bpl.n	800e48a <_printf_float+0x1a6>
 800e484:	3301      	adds	r3, #1
 800e486:	440b      	add	r3, r1
 800e488:	6123      	str	r3, [r4, #16]
 800e48a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e48c:	f04f 0900 	mov.w	r9, #0
 800e490:	e7de      	b.n	800e450 <_printf_float+0x16c>
 800e492:	b913      	cbnz	r3, 800e49a <_printf_float+0x1b6>
 800e494:	6822      	ldr	r2, [r4, #0]
 800e496:	07d2      	lsls	r2, r2, #31
 800e498:	d501      	bpl.n	800e49e <_printf_float+0x1ba>
 800e49a:	3302      	adds	r3, #2
 800e49c:	e7f4      	b.n	800e488 <_printf_float+0x1a4>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e7f2      	b.n	800e488 <_printf_float+0x1a4>
 800e4a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4a8:	4299      	cmp	r1, r3
 800e4aa:	db05      	blt.n	800e4b8 <_printf_float+0x1d4>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	6121      	str	r1, [r4, #16]
 800e4b0:	07d8      	lsls	r0, r3, #31
 800e4b2:	d5ea      	bpl.n	800e48a <_printf_float+0x1a6>
 800e4b4:	1c4b      	adds	r3, r1, #1
 800e4b6:	e7e7      	b.n	800e488 <_printf_float+0x1a4>
 800e4b8:	2900      	cmp	r1, #0
 800e4ba:	bfd4      	ite	le
 800e4bc:	f1c1 0202 	rsble	r2, r1, #2
 800e4c0:	2201      	movgt	r2, #1
 800e4c2:	4413      	add	r3, r2
 800e4c4:	e7e0      	b.n	800e488 <_printf_float+0x1a4>
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	055a      	lsls	r2, r3, #21
 800e4ca:	d407      	bmi.n	800e4dc <_printf_float+0x1f8>
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	4642      	mov	r2, r8
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	47b8      	blx	r7
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	d12c      	bne.n	800e534 <_printf_float+0x250>
 800e4da:	e764      	b.n	800e3a6 <_printf_float+0xc2>
 800e4dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4e0:	f240 80e0 	bls.w	800e6a4 <_printf_float+0x3c0>
 800e4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f7f2 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d034      	beq.n	800e55e <_printf_float+0x27a>
 800e4f4:	4a37      	ldr	r2, [pc, #220]	; (800e5d4 <_printf_float+0x2f0>)
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	47b8      	blx	r7
 800e4fe:	3001      	adds	r0, #1
 800e500:	f43f af51 	beq.w	800e3a6 <_printf_float+0xc2>
 800e504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e508:	429a      	cmp	r2, r3
 800e50a:	db02      	blt.n	800e512 <_printf_float+0x22e>
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	07d8      	lsls	r0, r3, #31
 800e510:	d510      	bpl.n	800e534 <_printf_float+0x250>
 800e512:	ee18 3a10 	vmov	r3, s16
 800e516:	4652      	mov	r2, sl
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	f43f af41 	beq.w	800e3a6 <_printf_float+0xc2>
 800e524:	f04f 0800 	mov.w	r8, #0
 800e528:	f104 091a 	add.w	r9, r4, #26
 800e52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e52e:	3b01      	subs	r3, #1
 800e530:	4543      	cmp	r3, r8
 800e532:	dc09      	bgt.n	800e548 <_printf_float+0x264>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	079b      	lsls	r3, r3, #30
 800e538:	f100 8105 	bmi.w	800e746 <_printf_float+0x462>
 800e53c:	68e0      	ldr	r0, [r4, #12]
 800e53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e540:	4298      	cmp	r0, r3
 800e542:	bfb8      	it	lt
 800e544:	4618      	movlt	r0, r3
 800e546:	e730      	b.n	800e3aa <_printf_float+0xc6>
 800e548:	2301      	movs	r3, #1
 800e54a:	464a      	mov	r2, r9
 800e54c:	4631      	mov	r1, r6
 800e54e:	4628      	mov	r0, r5
 800e550:	47b8      	blx	r7
 800e552:	3001      	adds	r0, #1
 800e554:	f43f af27 	beq.w	800e3a6 <_printf_float+0xc2>
 800e558:	f108 0801 	add.w	r8, r8, #1
 800e55c:	e7e6      	b.n	800e52c <_printf_float+0x248>
 800e55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e560:	2b00      	cmp	r3, #0
 800e562:	dc39      	bgt.n	800e5d8 <_printf_float+0x2f4>
 800e564:	4a1b      	ldr	r2, [pc, #108]	; (800e5d4 <_printf_float+0x2f0>)
 800e566:	2301      	movs	r3, #1
 800e568:	4631      	mov	r1, r6
 800e56a:	4628      	mov	r0, r5
 800e56c:	47b8      	blx	r7
 800e56e:	3001      	adds	r0, #1
 800e570:	f43f af19 	beq.w	800e3a6 <_printf_float+0xc2>
 800e574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e578:	4313      	orrs	r3, r2
 800e57a:	d102      	bne.n	800e582 <_printf_float+0x29e>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	07d9      	lsls	r1, r3, #31
 800e580:	d5d8      	bpl.n	800e534 <_printf_float+0x250>
 800e582:	ee18 3a10 	vmov	r3, s16
 800e586:	4652      	mov	r2, sl
 800e588:	4631      	mov	r1, r6
 800e58a:	4628      	mov	r0, r5
 800e58c:	47b8      	blx	r7
 800e58e:	3001      	adds	r0, #1
 800e590:	f43f af09 	beq.w	800e3a6 <_printf_float+0xc2>
 800e594:	f04f 0900 	mov.w	r9, #0
 800e598:	f104 0a1a 	add.w	sl, r4, #26
 800e59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e59e:	425b      	negs	r3, r3
 800e5a0:	454b      	cmp	r3, r9
 800e5a2:	dc01      	bgt.n	800e5a8 <_printf_float+0x2c4>
 800e5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5a6:	e792      	b.n	800e4ce <_printf_float+0x1ea>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	4652      	mov	r2, sl
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	47b8      	blx	r7
 800e5b2:	3001      	adds	r0, #1
 800e5b4:	f43f aef7 	beq.w	800e3a6 <_printf_float+0xc2>
 800e5b8:	f109 0901 	add.w	r9, r9, #1
 800e5bc:	e7ee      	b.n	800e59c <_printf_float+0x2b8>
 800e5be:	bf00      	nop
 800e5c0:	7fefffff 	.word	0x7fefffff
 800e5c4:	0801124c 	.word	0x0801124c
 800e5c8:	08011250 	.word	0x08011250
 800e5cc:	08011258 	.word	0x08011258
 800e5d0:	08011254 	.word	0x08011254
 800e5d4:	0801125c 	.word	0x0801125c
 800e5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	bfa8      	it	ge
 800e5e0:	461a      	movge	r2, r3
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	4691      	mov	r9, r2
 800e5e6:	dc37      	bgt.n	800e658 <_printf_float+0x374>
 800e5e8:	f04f 0b00 	mov.w	fp, #0
 800e5ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5f0:	f104 021a 	add.w	r2, r4, #26
 800e5f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5f6:	9305      	str	r3, [sp, #20]
 800e5f8:	eba3 0309 	sub.w	r3, r3, r9
 800e5fc:	455b      	cmp	r3, fp
 800e5fe:	dc33      	bgt.n	800e668 <_printf_float+0x384>
 800e600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e604:	429a      	cmp	r2, r3
 800e606:	db3b      	blt.n	800e680 <_printf_float+0x39c>
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d438      	bmi.n	800e680 <_printf_float+0x39c>
 800e60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e610:	9a05      	ldr	r2, [sp, #20]
 800e612:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e614:	1a9a      	subs	r2, r3, r2
 800e616:	eba3 0901 	sub.w	r9, r3, r1
 800e61a:	4591      	cmp	r9, r2
 800e61c:	bfa8      	it	ge
 800e61e:	4691      	movge	r9, r2
 800e620:	f1b9 0f00 	cmp.w	r9, #0
 800e624:	dc35      	bgt.n	800e692 <_printf_float+0x3ae>
 800e626:	f04f 0800 	mov.w	r8, #0
 800e62a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e62e:	f104 0a1a 	add.w	sl, r4, #26
 800e632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e636:	1a9b      	subs	r3, r3, r2
 800e638:	eba3 0309 	sub.w	r3, r3, r9
 800e63c:	4543      	cmp	r3, r8
 800e63e:	f77f af79 	ble.w	800e534 <_printf_float+0x250>
 800e642:	2301      	movs	r3, #1
 800e644:	4652      	mov	r2, sl
 800e646:	4631      	mov	r1, r6
 800e648:	4628      	mov	r0, r5
 800e64a:	47b8      	blx	r7
 800e64c:	3001      	adds	r0, #1
 800e64e:	f43f aeaa 	beq.w	800e3a6 <_printf_float+0xc2>
 800e652:	f108 0801 	add.w	r8, r8, #1
 800e656:	e7ec      	b.n	800e632 <_printf_float+0x34e>
 800e658:	4613      	mov	r3, r2
 800e65a:	4631      	mov	r1, r6
 800e65c:	4642      	mov	r2, r8
 800e65e:	4628      	mov	r0, r5
 800e660:	47b8      	blx	r7
 800e662:	3001      	adds	r0, #1
 800e664:	d1c0      	bne.n	800e5e8 <_printf_float+0x304>
 800e666:	e69e      	b.n	800e3a6 <_printf_float+0xc2>
 800e668:	2301      	movs	r3, #1
 800e66a:	4631      	mov	r1, r6
 800e66c:	4628      	mov	r0, r5
 800e66e:	9205      	str	r2, [sp, #20]
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	f43f ae97 	beq.w	800e3a6 <_printf_float+0xc2>
 800e678:	9a05      	ldr	r2, [sp, #20]
 800e67a:	f10b 0b01 	add.w	fp, fp, #1
 800e67e:	e7b9      	b.n	800e5f4 <_printf_float+0x310>
 800e680:	ee18 3a10 	vmov	r3, s16
 800e684:	4652      	mov	r2, sl
 800e686:	4631      	mov	r1, r6
 800e688:	4628      	mov	r0, r5
 800e68a:	47b8      	blx	r7
 800e68c:	3001      	adds	r0, #1
 800e68e:	d1be      	bne.n	800e60e <_printf_float+0x32a>
 800e690:	e689      	b.n	800e3a6 <_printf_float+0xc2>
 800e692:	9a05      	ldr	r2, [sp, #20]
 800e694:	464b      	mov	r3, r9
 800e696:	4442      	add	r2, r8
 800e698:	4631      	mov	r1, r6
 800e69a:	4628      	mov	r0, r5
 800e69c:	47b8      	blx	r7
 800e69e:	3001      	adds	r0, #1
 800e6a0:	d1c1      	bne.n	800e626 <_printf_float+0x342>
 800e6a2:	e680      	b.n	800e3a6 <_printf_float+0xc2>
 800e6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6a6:	2a01      	cmp	r2, #1
 800e6a8:	dc01      	bgt.n	800e6ae <_printf_float+0x3ca>
 800e6aa:	07db      	lsls	r3, r3, #31
 800e6ac:	d538      	bpl.n	800e720 <_printf_float+0x43c>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	4642      	mov	r2, r8
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	47b8      	blx	r7
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	f43f ae74 	beq.w	800e3a6 <_printf_float+0xc2>
 800e6be:	ee18 3a10 	vmov	r3, s16
 800e6c2:	4652      	mov	r2, sl
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	47b8      	blx	r7
 800e6ca:	3001      	adds	r0, #1
 800e6cc:	f43f ae6b 	beq.w	800e3a6 <_printf_float+0xc2>
 800e6d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f7f2 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6dc:	b9d8      	cbnz	r0, 800e716 <_printf_float+0x432>
 800e6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e0:	f108 0201 	add.w	r2, r8, #1
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	4631      	mov	r1, r6
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	47b8      	blx	r7
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d10e      	bne.n	800e70e <_printf_float+0x42a>
 800e6f0:	e659      	b.n	800e3a6 <_printf_float+0xc2>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	4652      	mov	r2, sl
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	47b8      	blx	r7
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	f43f ae52 	beq.w	800e3a6 <_printf_float+0xc2>
 800e702:	f108 0801 	add.w	r8, r8, #1
 800e706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e708:	3b01      	subs	r3, #1
 800e70a:	4543      	cmp	r3, r8
 800e70c:	dcf1      	bgt.n	800e6f2 <_printf_float+0x40e>
 800e70e:	464b      	mov	r3, r9
 800e710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e714:	e6dc      	b.n	800e4d0 <_printf_float+0x1ec>
 800e716:	f04f 0800 	mov.w	r8, #0
 800e71a:	f104 0a1a 	add.w	sl, r4, #26
 800e71e:	e7f2      	b.n	800e706 <_printf_float+0x422>
 800e720:	2301      	movs	r3, #1
 800e722:	4642      	mov	r2, r8
 800e724:	e7df      	b.n	800e6e6 <_printf_float+0x402>
 800e726:	2301      	movs	r3, #1
 800e728:	464a      	mov	r2, r9
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	f43f ae38 	beq.w	800e3a6 <_printf_float+0xc2>
 800e736:	f108 0801 	add.w	r8, r8, #1
 800e73a:	68e3      	ldr	r3, [r4, #12]
 800e73c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e73e:	1a5b      	subs	r3, r3, r1
 800e740:	4543      	cmp	r3, r8
 800e742:	dcf0      	bgt.n	800e726 <_printf_float+0x442>
 800e744:	e6fa      	b.n	800e53c <_printf_float+0x258>
 800e746:	f04f 0800 	mov.w	r8, #0
 800e74a:	f104 0919 	add.w	r9, r4, #25
 800e74e:	e7f4      	b.n	800e73a <_printf_float+0x456>

0800e750 <_printf_common>:
 800e750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e754:	4616      	mov	r6, r2
 800e756:	4699      	mov	r9, r3
 800e758:	688a      	ldr	r2, [r1, #8]
 800e75a:	690b      	ldr	r3, [r1, #16]
 800e75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e760:	4293      	cmp	r3, r2
 800e762:	bfb8      	it	lt
 800e764:	4613      	movlt	r3, r2
 800e766:	6033      	str	r3, [r6, #0]
 800e768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e76c:	4607      	mov	r7, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	b10a      	cbz	r2, 800e776 <_printf_common+0x26>
 800e772:	3301      	adds	r3, #1
 800e774:	6033      	str	r3, [r6, #0]
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	0699      	lsls	r1, r3, #26
 800e77a:	bf42      	ittt	mi
 800e77c:	6833      	ldrmi	r3, [r6, #0]
 800e77e:	3302      	addmi	r3, #2
 800e780:	6033      	strmi	r3, [r6, #0]
 800e782:	6825      	ldr	r5, [r4, #0]
 800e784:	f015 0506 	ands.w	r5, r5, #6
 800e788:	d106      	bne.n	800e798 <_printf_common+0x48>
 800e78a:	f104 0a19 	add.w	sl, r4, #25
 800e78e:	68e3      	ldr	r3, [r4, #12]
 800e790:	6832      	ldr	r2, [r6, #0]
 800e792:	1a9b      	subs	r3, r3, r2
 800e794:	42ab      	cmp	r3, r5
 800e796:	dc26      	bgt.n	800e7e6 <_printf_common+0x96>
 800e798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e79c:	1e13      	subs	r3, r2, #0
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	bf18      	it	ne
 800e7a2:	2301      	movne	r3, #1
 800e7a4:	0692      	lsls	r2, r2, #26
 800e7a6:	d42b      	bmi.n	800e800 <_printf_common+0xb0>
 800e7a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	47c0      	blx	r8
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	d01e      	beq.n	800e7f4 <_printf_common+0xa4>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	68e5      	ldr	r5, [r4, #12]
 800e7ba:	6832      	ldr	r2, [r6, #0]
 800e7bc:	f003 0306 	and.w	r3, r3, #6
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	bf08      	it	eq
 800e7c4:	1aad      	subeq	r5, r5, r2
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	6922      	ldr	r2, [r4, #16]
 800e7ca:	bf0c      	ite	eq
 800e7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d0:	2500      	movne	r5, #0
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	bfc4      	itt	gt
 800e7d6:	1a9b      	subgt	r3, r3, r2
 800e7d8:	18ed      	addgt	r5, r5, r3
 800e7da:	2600      	movs	r6, #0
 800e7dc:	341a      	adds	r4, #26
 800e7de:	42b5      	cmp	r5, r6
 800e7e0:	d11a      	bne.n	800e818 <_printf_common+0xc8>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e008      	b.n	800e7f8 <_printf_common+0xa8>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	47c0      	blx	r8
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d103      	bne.n	800e7fc <_printf_common+0xac>
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	e7c6      	b.n	800e78e <_printf_common+0x3e>
 800e800:	18e1      	adds	r1, r4, r3
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	2030      	movs	r0, #48	; 0x30
 800e806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e80a:	4422      	add	r2, r4
 800e80c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e814:	3302      	adds	r3, #2
 800e816:	e7c7      	b.n	800e7a8 <_printf_common+0x58>
 800e818:	2301      	movs	r3, #1
 800e81a:	4622      	mov	r2, r4
 800e81c:	4649      	mov	r1, r9
 800e81e:	4638      	mov	r0, r7
 800e820:	47c0      	blx	r8
 800e822:	3001      	adds	r0, #1
 800e824:	d0e6      	beq.n	800e7f4 <_printf_common+0xa4>
 800e826:	3601      	adds	r6, #1
 800e828:	e7d9      	b.n	800e7de <_printf_common+0x8e>
	...

0800e82c <_printf_i>:
 800e82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e830:	7e0f      	ldrb	r7, [r1, #24]
 800e832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e834:	2f78      	cmp	r7, #120	; 0x78
 800e836:	4691      	mov	r9, r2
 800e838:	4680      	mov	r8, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	469a      	mov	sl, r3
 800e83e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e842:	d807      	bhi.n	800e854 <_printf_i+0x28>
 800e844:	2f62      	cmp	r7, #98	; 0x62
 800e846:	d80a      	bhi.n	800e85e <_printf_i+0x32>
 800e848:	2f00      	cmp	r7, #0
 800e84a:	f000 80d8 	beq.w	800e9fe <_printf_i+0x1d2>
 800e84e:	2f58      	cmp	r7, #88	; 0x58
 800e850:	f000 80a3 	beq.w	800e99a <_printf_i+0x16e>
 800e854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e85c:	e03a      	b.n	800e8d4 <_printf_i+0xa8>
 800e85e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e862:	2b15      	cmp	r3, #21
 800e864:	d8f6      	bhi.n	800e854 <_printf_i+0x28>
 800e866:	a101      	add	r1, pc, #4	; (adr r1, 800e86c <_printf_i+0x40>)
 800e868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e86c:	0800e8c5 	.word	0x0800e8c5
 800e870:	0800e8d9 	.word	0x0800e8d9
 800e874:	0800e855 	.word	0x0800e855
 800e878:	0800e855 	.word	0x0800e855
 800e87c:	0800e855 	.word	0x0800e855
 800e880:	0800e855 	.word	0x0800e855
 800e884:	0800e8d9 	.word	0x0800e8d9
 800e888:	0800e855 	.word	0x0800e855
 800e88c:	0800e855 	.word	0x0800e855
 800e890:	0800e855 	.word	0x0800e855
 800e894:	0800e855 	.word	0x0800e855
 800e898:	0800e9e5 	.word	0x0800e9e5
 800e89c:	0800e909 	.word	0x0800e909
 800e8a0:	0800e9c7 	.word	0x0800e9c7
 800e8a4:	0800e855 	.word	0x0800e855
 800e8a8:	0800e855 	.word	0x0800e855
 800e8ac:	0800ea07 	.word	0x0800ea07
 800e8b0:	0800e855 	.word	0x0800e855
 800e8b4:	0800e909 	.word	0x0800e909
 800e8b8:	0800e855 	.word	0x0800e855
 800e8bc:	0800e855 	.word	0x0800e855
 800e8c0:	0800e9cf 	.word	0x0800e9cf
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	1d1a      	adds	r2, r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	602a      	str	r2, [r5, #0]
 800e8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e0a3      	b.n	800ea20 <_printf_i+0x1f4>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	6829      	ldr	r1, [r5, #0]
 800e8dc:	0606      	lsls	r6, r0, #24
 800e8de:	f101 0304 	add.w	r3, r1, #4
 800e8e2:	d50a      	bpl.n	800e8fa <_printf_i+0xce>
 800e8e4:	680e      	ldr	r6, [r1, #0]
 800e8e6:	602b      	str	r3, [r5, #0]
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	da03      	bge.n	800e8f4 <_printf_i+0xc8>
 800e8ec:	232d      	movs	r3, #45	; 0x2d
 800e8ee:	4276      	negs	r6, r6
 800e8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f4:	485e      	ldr	r0, [pc, #376]	; (800ea70 <_printf_i+0x244>)
 800e8f6:	230a      	movs	r3, #10
 800e8f8:	e019      	b.n	800e92e <_printf_i+0x102>
 800e8fa:	680e      	ldr	r6, [r1, #0]
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e902:	bf18      	it	ne
 800e904:	b236      	sxthne	r6, r6
 800e906:	e7ef      	b.n	800e8e8 <_printf_i+0xbc>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	1d19      	adds	r1, r3, #4
 800e90e:	6029      	str	r1, [r5, #0]
 800e910:	0601      	lsls	r1, r0, #24
 800e912:	d501      	bpl.n	800e918 <_printf_i+0xec>
 800e914:	681e      	ldr	r6, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0xf2>
 800e918:	0646      	lsls	r6, r0, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0xe8>
 800e91c:	881e      	ldrh	r6, [r3, #0]
 800e91e:	4854      	ldr	r0, [pc, #336]	; (800ea70 <_printf_i+0x244>)
 800e920:	2f6f      	cmp	r7, #111	; 0x6f
 800e922:	bf0c      	ite	eq
 800e924:	2308      	moveq	r3, #8
 800e926:	230a      	movne	r3, #10
 800e928:	2100      	movs	r1, #0
 800e92a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e92e:	6865      	ldr	r5, [r4, #4]
 800e930:	60a5      	str	r5, [r4, #8]
 800e932:	2d00      	cmp	r5, #0
 800e934:	bfa2      	ittt	ge
 800e936:	6821      	ldrge	r1, [r4, #0]
 800e938:	f021 0104 	bicge.w	r1, r1, #4
 800e93c:	6021      	strge	r1, [r4, #0]
 800e93e:	b90e      	cbnz	r6, 800e944 <_printf_i+0x118>
 800e940:	2d00      	cmp	r5, #0
 800e942:	d04d      	beq.n	800e9e0 <_printf_i+0x1b4>
 800e944:	4615      	mov	r5, r2
 800e946:	fbb6 f1f3 	udiv	r1, r6, r3
 800e94a:	fb03 6711 	mls	r7, r3, r1, r6
 800e94e:	5dc7      	ldrb	r7, [r0, r7]
 800e950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e954:	4637      	mov	r7, r6
 800e956:	42bb      	cmp	r3, r7
 800e958:	460e      	mov	r6, r1
 800e95a:	d9f4      	bls.n	800e946 <_printf_i+0x11a>
 800e95c:	2b08      	cmp	r3, #8
 800e95e:	d10b      	bne.n	800e978 <_printf_i+0x14c>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	07de      	lsls	r6, r3, #31
 800e964:	d508      	bpl.n	800e978 <_printf_i+0x14c>
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	6861      	ldr	r1, [r4, #4]
 800e96a:	4299      	cmp	r1, r3
 800e96c:	bfde      	ittt	le
 800e96e:	2330      	movle	r3, #48	; 0x30
 800e970:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e974:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e978:	1b52      	subs	r2, r2, r5
 800e97a:	6122      	str	r2, [r4, #16]
 800e97c:	f8cd a000 	str.w	sl, [sp]
 800e980:	464b      	mov	r3, r9
 800e982:	aa03      	add	r2, sp, #12
 800e984:	4621      	mov	r1, r4
 800e986:	4640      	mov	r0, r8
 800e988:	f7ff fee2 	bl	800e750 <_printf_common>
 800e98c:	3001      	adds	r0, #1
 800e98e:	d14c      	bne.n	800ea2a <_printf_i+0x1fe>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	b004      	add	sp, #16
 800e996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99a:	4835      	ldr	r0, [pc, #212]	; (800ea70 <_printf_i+0x244>)
 800e99c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9a0:	6829      	ldr	r1, [r5, #0]
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9a8:	6029      	str	r1, [r5, #0]
 800e9aa:	061d      	lsls	r5, r3, #24
 800e9ac:	d514      	bpl.n	800e9d8 <_printf_i+0x1ac>
 800e9ae:	07df      	lsls	r7, r3, #31
 800e9b0:	bf44      	itt	mi
 800e9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e9b6:	6023      	strmi	r3, [r4, #0]
 800e9b8:	b91e      	cbnz	r6, 800e9c2 <_printf_i+0x196>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	f023 0320 	bic.w	r3, r3, #32
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	2310      	movs	r3, #16
 800e9c4:	e7b0      	b.n	800e928 <_printf_i+0xfc>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f043 0320 	orr.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2378      	movs	r3, #120	; 0x78
 800e9d0:	4828      	ldr	r0, [pc, #160]	; (800ea74 <_printf_i+0x248>)
 800e9d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9d6:	e7e3      	b.n	800e9a0 <_printf_i+0x174>
 800e9d8:	0659      	lsls	r1, r3, #25
 800e9da:	bf48      	it	mi
 800e9dc:	b2b6      	uxthmi	r6, r6
 800e9de:	e7e6      	b.n	800e9ae <_printf_i+0x182>
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	e7bb      	b.n	800e95c <_printf_i+0x130>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	6826      	ldr	r6, [r4, #0]
 800e9e8:	6961      	ldr	r1, [r4, #20]
 800e9ea:	1d18      	adds	r0, r3, #4
 800e9ec:	6028      	str	r0, [r5, #0]
 800e9ee:	0635      	lsls	r5, r6, #24
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	d501      	bpl.n	800e9f8 <_printf_i+0x1cc>
 800e9f4:	6019      	str	r1, [r3, #0]
 800e9f6:	e002      	b.n	800e9fe <_printf_i+0x1d2>
 800e9f8:	0670      	lsls	r0, r6, #25
 800e9fa:	d5fb      	bpl.n	800e9f4 <_printf_i+0x1c8>
 800e9fc:	8019      	strh	r1, [r3, #0]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	6123      	str	r3, [r4, #16]
 800ea02:	4615      	mov	r5, r2
 800ea04:	e7ba      	b.n	800e97c <_printf_i+0x150>
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	602a      	str	r2, [r5, #0]
 800ea0c:	681d      	ldr	r5, [r3, #0]
 800ea0e:	6862      	ldr	r2, [r4, #4]
 800ea10:	2100      	movs	r1, #0
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7f1 fbe4 	bl	80001e0 <memchr>
 800ea18:	b108      	cbz	r0, 800ea1e <_printf_i+0x1f2>
 800ea1a:	1b40      	subs	r0, r0, r5
 800ea1c:	6060      	str	r0, [r4, #4]
 800ea1e:	6863      	ldr	r3, [r4, #4]
 800ea20:	6123      	str	r3, [r4, #16]
 800ea22:	2300      	movs	r3, #0
 800ea24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea28:	e7a8      	b.n	800e97c <_printf_i+0x150>
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	4649      	mov	r1, r9
 800ea30:	4640      	mov	r0, r8
 800ea32:	47d0      	blx	sl
 800ea34:	3001      	adds	r0, #1
 800ea36:	d0ab      	beq.n	800e990 <_printf_i+0x164>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	079b      	lsls	r3, r3, #30
 800ea3c:	d413      	bmi.n	800ea66 <_printf_i+0x23a>
 800ea3e:	68e0      	ldr	r0, [r4, #12]
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	4298      	cmp	r0, r3
 800ea44:	bfb8      	it	lt
 800ea46:	4618      	movlt	r0, r3
 800ea48:	e7a4      	b.n	800e994 <_printf_i+0x168>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4649      	mov	r1, r9
 800ea50:	4640      	mov	r0, r8
 800ea52:	47d0      	blx	sl
 800ea54:	3001      	adds	r0, #1
 800ea56:	d09b      	beq.n	800e990 <_printf_i+0x164>
 800ea58:	3501      	adds	r5, #1
 800ea5a:	68e3      	ldr	r3, [r4, #12]
 800ea5c:	9903      	ldr	r1, [sp, #12]
 800ea5e:	1a5b      	subs	r3, r3, r1
 800ea60:	42ab      	cmp	r3, r5
 800ea62:	dcf2      	bgt.n	800ea4a <_printf_i+0x21e>
 800ea64:	e7eb      	b.n	800ea3e <_printf_i+0x212>
 800ea66:	2500      	movs	r5, #0
 800ea68:	f104 0619 	add.w	r6, r4, #25
 800ea6c:	e7f5      	b.n	800ea5a <_printf_i+0x22e>
 800ea6e:	bf00      	nop
 800ea70:	0801125e 	.word	0x0801125e
 800ea74:	0801126f 	.word	0x0801126f

0800ea78 <_sbrk_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	4d06      	ldr	r5, [pc, #24]	; (800ea94 <_sbrk_r+0x1c>)
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4604      	mov	r4, r0
 800ea80:	4608      	mov	r0, r1
 800ea82:	602b      	str	r3, [r5, #0]
 800ea84:	f7f6 fc86 	bl	8005394 <_sbrk>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d102      	bne.n	800ea92 <_sbrk_r+0x1a>
 800ea8c:	682b      	ldr	r3, [r5, #0]
 800ea8e:	b103      	cbz	r3, 800ea92 <_sbrk_r+0x1a>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	20001520 	.word	0x20001520

0800ea98 <siprintf>:
 800ea98:	b40e      	push	{r1, r2, r3}
 800ea9a:	b500      	push	{lr}
 800ea9c:	b09c      	sub	sp, #112	; 0x70
 800ea9e:	ab1d      	add	r3, sp, #116	; 0x74
 800eaa0:	9002      	str	r0, [sp, #8]
 800eaa2:	9006      	str	r0, [sp, #24]
 800eaa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eaa8:	4809      	ldr	r0, [pc, #36]	; (800ead0 <siprintf+0x38>)
 800eaaa:	9107      	str	r1, [sp, #28]
 800eaac:	9104      	str	r1, [sp, #16]
 800eaae:	4909      	ldr	r1, [pc, #36]	; (800ead4 <siprintf+0x3c>)
 800eab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab4:	9105      	str	r1, [sp, #20]
 800eab6:	6800      	ldr	r0, [r0, #0]
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	a902      	add	r1, sp, #8
 800eabc:	f001 fa8c 	bl	800ffd8 <_svfiprintf_r>
 800eac0:	9b02      	ldr	r3, [sp, #8]
 800eac2:	2200      	movs	r2, #0
 800eac4:	701a      	strb	r2, [r3, #0]
 800eac6:	b01c      	add	sp, #112	; 0x70
 800eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eacc:	b003      	add	sp, #12
 800eace:	4770      	bx	lr
 800ead0:	20000328 	.word	0x20000328
 800ead4:	ffff0208 	.word	0xffff0208

0800ead8 <quorem>:
 800ead8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eadc:	6903      	ldr	r3, [r0, #16]
 800eade:	690c      	ldr	r4, [r1, #16]
 800eae0:	42a3      	cmp	r3, r4
 800eae2:	4607      	mov	r7, r0
 800eae4:	f2c0 8081 	blt.w	800ebea <quorem+0x112>
 800eae8:	3c01      	subs	r4, #1
 800eaea:	f101 0814 	add.w	r8, r1, #20
 800eaee:	f100 0514 	add.w	r5, r0, #20
 800eaf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eaf6:	9301      	str	r3, [sp, #4]
 800eaf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eafc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb00:	3301      	adds	r3, #1
 800eb02:	429a      	cmp	r2, r3
 800eb04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eb08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb10:	d331      	bcc.n	800eb76 <quorem+0x9e>
 800eb12:	f04f 0e00 	mov.w	lr, #0
 800eb16:	4640      	mov	r0, r8
 800eb18:	46ac      	mov	ip, r5
 800eb1a:	46f2      	mov	sl, lr
 800eb1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800eb20:	b293      	uxth	r3, r2
 800eb22:	fb06 e303 	mla	r3, r6, r3, lr
 800eb26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	ebaa 0303 	sub.w	r3, sl, r3
 800eb30:	f8dc a000 	ldr.w	sl, [ip]
 800eb34:	0c12      	lsrs	r2, r2, #16
 800eb36:	fa13 f38a 	uxtah	r3, r3, sl
 800eb3a:	fb06 e202 	mla	r2, r6, r2, lr
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	9b00      	ldr	r3, [sp, #0]
 800eb42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb46:	b292      	uxth	r2, r2
 800eb48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eb4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb50:	f8bd 3000 	ldrh.w	r3, [sp]
 800eb54:	4581      	cmp	r9, r0
 800eb56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb5a:	f84c 3b04 	str.w	r3, [ip], #4
 800eb5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eb62:	d2db      	bcs.n	800eb1c <quorem+0x44>
 800eb64:	f855 300b 	ldr.w	r3, [r5, fp]
 800eb68:	b92b      	cbnz	r3, 800eb76 <quorem+0x9e>
 800eb6a:	9b01      	ldr	r3, [sp, #4]
 800eb6c:	3b04      	subs	r3, #4
 800eb6e:	429d      	cmp	r5, r3
 800eb70:	461a      	mov	r2, r3
 800eb72:	d32e      	bcc.n	800ebd2 <quorem+0xfa>
 800eb74:	613c      	str	r4, [r7, #16]
 800eb76:	4638      	mov	r0, r7
 800eb78:	f001 f8ba 	bl	800fcf0 <__mcmp>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	db24      	blt.n	800ebca <quorem+0xf2>
 800eb80:	3601      	adds	r6, #1
 800eb82:	4628      	mov	r0, r5
 800eb84:	f04f 0c00 	mov.w	ip, #0
 800eb88:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb8c:	f8d0 e000 	ldr.w	lr, [r0]
 800eb90:	b293      	uxth	r3, r2
 800eb92:	ebac 0303 	sub.w	r3, ip, r3
 800eb96:	0c12      	lsrs	r2, r2, #16
 800eb98:	fa13 f38e 	uxtah	r3, r3, lr
 800eb9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebaa:	45c1      	cmp	r9, r8
 800ebac:	f840 3b04 	str.w	r3, [r0], #4
 800ebb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ebb4:	d2e8      	bcs.n	800eb88 <quorem+0xb0>
 800ebb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebbe:	b922      	cbnz	r2, 800ebca <quorem+0xf2>
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	429d      	cmp	r5, r3
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	d30a      	bcc.n	800ebde <quorem+0x106>
 800ebc8:	613c      	str	r4, [r7, #16]
 800ebca:	4630      	mov	r0, r6
 800ebcc:	b003      	add	sp, #12
 800ebce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd2:	6812      	ldr	r2, [r2, #0]
 800ebd4:	3b04      	subs	r3, #4
 800ebd6:	2a00      	cmp	r2, #0
 800ebd8:	d1cc      	bne.n	800eb74 <quorem+0x9c>
 800ebda:	3c01      	subs	r4, #1
 800ebdc:	e7c7      	b.n	800eb6e <quorem+0x96>
 800ebde:	6812      	ldr	r2, [r2, #0]
 800ebe0:	3b04      	subs	r3, #4
 800ebe2:	2a00      	cmp	r2, #0
 800ebe4:	d1f0      	bne.n	800ebc8 <quorem+0xf0>
 800ebe6:	3c01      	subs	r4, #1
 800ebe8:	e7eb      	b.n	800ebc2 <quorem+0xea>
 800ebea:	2000      	movs	r0, #0
 800ebec:	e7ee      	b.n	800ebcc <quorem+0xf4>
	...

0800ebf0 <_dtoa_r>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	ed2d 8b04 	vpush	{d8-d9}
 800ebf8:	ec57 6b10 	vmov	r6, r7, d0
 800ebfc:	b093      	sub	sp, #76	; 0x4c
 800ebfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ec00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ec04:	9106      	str	r1, [sp, #24]
 800ec06:	ee10 aa10 	vmov	sl, s0
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ec10:	46bb      	mov	fp, r7
 800ec12:	b975      	cbnz	r5, 800ec32 <_dtoa_r+0x42>
 800ec14:	2010      	movs	r0, #16
 800ec16:	f7ff f9bf 	bl	800df98 <malloc>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	6260      	str	r0, [r4, #36]	; 0x24
 800ec1e:	b920      	cbnz	r0, 800ec2a <_dtoa_r+0x3a>
 800ec20:	4ba7      	ldr	r3, [pc, #668]	; (800eec0 <_dtoa_r+0x2d0>)
 800ec22:	21ea      	movs	r1, #234	; 0xea
 800ec24:	48a7      	ldr	r0, [pc, #668]	; (800eec4 <_dtoa_r+0x2d4>)
 800ec26:	f001 fad7 	bl	80101d8 <__assert_func>
 800ec2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec2e:	6005      	str	r5, [r0, #0]
 800ec30:	60c5      	str	r5, [r0, #12]
 800ec32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec34:	6819      	ldr	r1, [r3, #0]
 800ec36:	b151      	cbz	r1, 800ec4e <_dtoa_r+0x5e>
 800ec38:	685a      	ldr	r2, [r3, #4]
 800ec3a:	604a      	str	r2, [r1, #4]
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	4093      	lsls	r3, r2
 800ec40:	608b      	str	r3, [r1, #8]
 800ec42:	4620      	mov	r0, r4
 800ec44:	f000 fe12 	bl	800f86c <_Bfree>
 800ec48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	1e3b      	subs	r3, r7, #0
 800ec50:	bfaa      	itet	ge
 800ec52:	2300      	movge	r3, #0
 800ec54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ec58:	f8c8 3000 	strge.w	r3, [r8]
 800ec5c:	4b9a      	ldr	r3, [pc, #616]	; (800eec8 <_dtoa_r+0x2d8>)
 800ec5e:	bfbc      	itt	lt
 800ec60:	2201      	movlt	r2, #1
 800ec62:	f8c8 2000 	strlt.w	r2, [r8]
 800ec66:	ea33 030b 	bics.w	r3, r3, fp
 800ec6a:	d11b      	bne.n	800eca4 <_dtoa_r+0xb4>
 800ec6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec6e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ec72:	6013      	str	r3, [r2, #0]
 800ec74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec78:	4333      	orrs	r3, r6
 800ec7a:	f000 8592 	beq.w	800f7a2 <_dtoa_r+0xbb2>
 800ec7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec80:	b963      	cbnz	r3, 800ec9c <_dtoa_r+0xac>
 800ec82:	4b92      	ldr	r3, [pc, #584]	; (800eecc <_dtoa_r+0x2dc>)
 800ec84:	e022      	b.n	800eccc <_dtoa_r+0xdc>
 800ec86:	4b92      	ldr	r3, [pc, #584]	; (800eed0 <_dtoa_r+0x2e0>)
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	3308      	adds	r3, #8
 800ec8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec8e:	6013      	str	r3, [r2, #0]
 800ec90:	9801      	ldr	r0, [sp, #4]
 800ec92:	b013      	add	sp, #76	; 0x4c
 800ec94:	ecbd 8b04 	vpop	{d8-d9}
 800ec98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9c:	4b8b      	ldr	r3, [pc, #556]	; (800eecc <_dtoa_r+0x2dc>)
 800ec9e:	9301      	str	r3, [sp, #4]
 800eca0:	3303      	adds	r3, #3
 800eca2:	e7f3      	b.n	800ec8c <_dtoa_r+0x9c>
 800eca4:	2200      	movs	r2, #0
 800eca6:	2300      	movs	r3, #0
 800eca8:	4650      	mov	r0, sl
 800ecaa:	4659      	mov	r1, fp
 800ecac:	f7f1 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecb0:	ec4b ab19 	vmov	d9, sl, fp
 800ecb4:	4680      	mov	r8, r0
 800ecb6:	b158      	cbz	r0, 800ecd0 <_dtoa_r+0xe0>
 800ecb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ecba:	2301      	movs	r3, #1
 800ecbc:	6013      	str	r3, [r2, #0]
 800ecbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 856b 	beq.w	800f79c <_dtoa_r+0xbac>
 800ecc6:	4883      	ldr	r0, [pc, #524]	; (800eed4 <_dtoa_r+0x2e4>)
 800ecc8:	6018      	str	r0, [r3, #0]
 800ecca:	1e43      	subs	r3, r0, #1
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	e7df      	b.n	800ec90 <_dtoa_r+0xa0>
 800ecd0:	ec4b ab10 	vmov	d0, sl, fp
 800ecd4:	aa10      	add	r2, sp, #64	; 0x40
 800ecd6:	a911      	add	r1, sp, #68	; 0x44
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f001 f8af 	bl	800fe3c <__d2b>
 800ecde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ece2:	ee08 0a10 	vmov	s16, r0
 800ece6:	2d00      	cmp	r5, #0
 800ece8:	f000 8084 	beq.w	800edf4 <_dtoa_r+0x204>
 800ecec:	ee19 3a90 	vmov	r3, s19
 800ecf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ecf8:	4656      	mov	r6, sl
 800ecfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ecfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ed02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ed06:	4b74      	ldr	r3, [pc, #464]	; (800eed8 <_dtoa_r+0x2e8>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	f7f1 fabb 	bl	8000288 <__aeabi_dsub>
 800ed12:	a365      	add	r3, pc, #404	; (adr r3, 800eea8 <_dtoa_r+0x2b8>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ed1c:	a364      	add	r3, pc, #400	; (adr r3, 800eeb0 <_dtoa_r+0x2c0>)
 800ed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed22:	f7f1 fab3 	bl	800028c <__adddf3>
 800ed26:	4606      	mov	r6, r0
 800ed28:	4628      	mov	r0, r5
 800ed2a:	460f      	mov	r7, r1
 800ed2c:	f7f1 fbfa 	bl	8000524 <__aeabi_i2d>
 800ed30:	a361      	add	r3, pc, #388	; (adr r3, 800eeb8 <_dtoa_r+0x2c8>)
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	f7f1 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	4630      	mov	r0, r6
 800ed40:	4639      	mov	r1, r7
 800ed42:	f7f1 faa3 	bl	800028c <__adddf3>
 800ed46:	4606      	mov	r6, r0
 800ed48:	460f      	mov	r7, r1
 800ed4a:	f7f1 ff05 	bl	8000b58 <__aeabi_d2iz>
 800ed4e:	2200      	movs	r2, #0
 800ed50:	9000      	str	r0, [sp, #0]
 800ed52:	2300      	movs	r3, #0
 800ed54:	4630      	mov	r0, r6
 800ed56:	4639      	mov	r1, r7
 800ed58:	f7f1 fec0 	bl	8000adc <__aeabi_dcmplt>
 800ed5c:	b150      	cbz	r0, 800ed74 <_dtoa_r+0x184>
 800ed5e:	9800      	ldr	r0, [sp, #0]
 800ed60:	f7f1 fbe0 	bl	8000524 <__aeabi_i2d>
 800ed64:	4632      	mov	r2, r6
 800ed66:	463b      	mov	r3, r7
 800ed68:	f7f1 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed6c:	b910      	cbnz	r0, 800ed74 <_dtoa_r+0x184>
 800ed6e:	9b00      	ldr	r3, [sp, #0]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	9b00      	ldr	r3, [sp, #0]
 800ed76:	2b16      	cmp	r3, #22
 800ed78:	d85a      	bhi.n	800ee30 <_dtoa_r+0x240>
 800ed7a:	9a00      	ldr	r2, [sp, #0]
 800ed7c:	4b57      	ldr	r3, [pc, #348]	; (800eedc <_dtoa_r+0x2ec>)
 800ed7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	ec51 0b19 	vmov	r0, r1, d9
 800ed8a:	f7f1 fea7 	bl	8000adc <__aeabi_dcmplt>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d050      	beq.n	800ee34 <_dtoa_r+0x244>
 800ed92:	9b00      	ldr	r3, [sp, #0]
 800ed94:	3b01      	subs	r3, #1
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	2300      	movs	r3, #0
 800ed9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed9e:	1b5d      	subs	r5, r3, r5
 800eda0:	1e6b      	subs	r3, r5, #1
 800eda2:	9305      	str	r3, [sp, #20]
 800eda4:	bf45      	ittet	mi
 800eda6:	f1c5 0301 	rsbmi	r3, r5, #1
 800edaa:	9304      	strmi	r3, [sp, #16]
 800edac:	2300      	movpl	r3, #0
 800edae:	2300      	movmi	r3, #0
 800edb0:	bf4c      	ite	mi
 800edb2:	9305      	strmi	r3, [sp, #20]
 800edb4:	9304      	strpl	r3, [sp, #16]
 800edb6:	9b00      	ldr	r3, [sp, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	db3d      	blt.n	800ee38 <_dtoa_r+0x248>
 800edbc:	9b05      	ldr	r3, [sp, #20]
 800edbe:	9a00      	ldr	r2, [sp, #0]
 800edc0:	920a      	str	r2, [sp, #40]	; 0x28
 800edc2:	4413      	add	r3, r2
 800edc4:	9305      	str	r3, [sp, #20]
 800edc6:	2300      	movs	r3, #0
 800edc8:	9307      	str	r3, [sp, #28]
 800edca:	9b06      	ldr	r3, [sp, #24]
 800edcc:	2b09      	cmp	r3, #9
 800edce:	f200 8089 	bhi.w	800eee4 <_dtoa_r+0x2f4>
 800edd2:	2b05      	cmp	r3, #5
 800edd4:	bfc4      	itt	gt
 800edd6:	3b04      	subgt	r3, #4
 800edd8:	9306      	strgt	r3, [sp, #24]
 800edda:	9b06      	ldr	r3, [sp, #24]
 800eddc:	f1a3 0302 	sub.w	r3, r3, #2
 800ede0:	bfcc      	ite	gt
 800ede2:	2500      	movgt	r5, #0
 800ede4:	2501      	movle	r5, #1
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	f200 8087 	bhi.w	800eefa <_dtoa_r+0x30a>
 800edec:	e8df f003 	tbb	[pc, r3]
 800edf0:	59383a2d 	.word	0x59383a2d
 800edf4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800edf8:	441d      	add	r5, r3
 800edfa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800edfe:	2b20      	cmp	r3, #32
 800ee00:	bfc1      	itttt	gt
 800ee02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ee06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ee0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ee0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ee12:	bfda      	itte	le
 800ee14:	f1c3 0320 	rsble	r3, r3, #32
 800ee18:	fa06 f003 	lslle.w	r0, r6, r3
 800ee1c:	4318      	orrgt	r0, r3
 800ee1e:	f7f1 fb71 	bl	8000504 <__aeabi_ui2d>
 800ee22:	2301      	movs	r3, #1
 800ee24:	4606      	mov	r6, r0
 800ee26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ee2a:	3d01      	subs	r5, #1
 800ee2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ee2e:	e76a      	b.n	800ed06 <_dtoa_r+0x116>
 800ee30:	2301      	movs	r3, #1
 800ee32:	e7b2      	b.n	800ed9a <_dtoa_r+0x1aa>
 800ee34:	900b      	str	r0, [sp, #44]	; 0x2c
 800ee36:	e7b1      	b.n	800ed9c <_dtoa_r+0x1ac>
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	9a00      	ldr	r2, [sp, #0]
 800ee3c:	1a9b      	subs	r3, r3, r2
 800ee3e:	9304      	str	r3, [sp, #16]
 800ee40:	4253      	negs	r3, r2
 800ee42:	9307      	str	r3, [sp, #28]
 800ee44:	2300      	movs	r3, #0
 800ee46:	930a      	str	r3, [sp, #40]	; 0x28
 800ee48:	e7bf      	b.n	800edca <_dtoa_r+0x1da>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9308      	str	r3, [sp, #32]
 800ee4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	dc55      	bgt.n	800ef00 <_dtoa_r+0x310>
 800ee54:	2301      	movs	r3, #1
 800ee56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ee5e:	e00c      	b.n	800ee7a <_dtoa_r+0x28a>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e7f3      	b.n	800ee4c <_dtoa_r+0x25c>
 800ee64:	2300      	movs	r3, #0
 800ee66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee68:	9308      	str	r3, [sp, #32]
 800ee6a:	9b00      	ldr	r3, [sp, #0]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	9302      	str	r3, [sp, #8]
 800ee70:	3301      	adds	r3, #1
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	9303      	str	r3, [sp, #12]
 800ee76:	bfb8      	it	lt
 800ee78:	2301      	movlt	r3, #1
 800ee7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	6042      	str	r2, [r0, #4]
 800ee80:	2204      	movs	r2, #4
 800ee82:	f102 0614 	add.w	r6, r2, #20
 800ee86:	429e      	cmp	r6, r3
 800ee88:	6841      	ldr	r1, [r0, #4]
 800ee8a:	d93d      	bls.n	800ef08 <_dtoa_r+0x318>
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fcad 	bl	800f7ec <_Balloc>
 800ee92:	9001      	str	r0, [sp, #4]
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d13b      	bne.n	800ef10 <_dtoa_r+0x320>
 800ee98:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <_dtoa_r+0x2f0>)
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eea0:	e6c0      	b.n	800ec24 <_dtoa_r+0x34>
 800eea2:	2301      	movs	r3, #1
 800eea4:	e7df      	b.n	800ee66 <_dtoa_r+0x276>
 800eea6:	bf00      	nop
 800eea8:	636f4361 	.word	0x636f4361
 800eeac:	3fd287a7 	.word	0x3fd287a7
 800eeb0:	8b60c8b3 	.word	0x8b60c8b3
 800eeb4:	3fc68a28 	.word	0x3fc68a28
 800eeb8:	509f79fb 	.word	0x509f79fb
 800eebc:	3fd34413 	.word	0x3fd34413
 800eec0:	0801128d 	.word	0x0801128d
 800eec4:	080112a4 	.word	0x080112a4
 800eec8:	7ff00000 	.word	0x7ff00000
 800eecc:	08011289 	.word	0x08011289
 800eed0:	08011280 	.word	0x08011280
 800eed4:	0801125d 	.word	0x0801125d
 800eed8:	3ff80000 	.word	0x3ff80000
 800eedc:	08011398 	.word	0x08011398
 800eee0:	080112ff 	.word	0x080112ff
 800eee4:	2501      	movs	r5, #1
 800eee6:	2300      	movs	r3, #0
 800eee8:	9306      	str	r3, [sp, #24]
 800eeea:	9508      	str	r5, [sp, #32]
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295
 800eef0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eef4:	2200      	movs	r2, #0
 800eef6:	2312      	movs	r3, #18
 800eef8:	e7b0      	b.n	800ee5c <_dtoa_r+0x26c>
 800eefa:	2301      	movs	r3, #1
 800eefc:	9308      	str	r3, [sp, #32]
 800eefe:	e7f5      	b.n	800eeec <_dtoa_r+0x2fc>
 800ef00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef06:	e7b8      	b.n	800ee7a <_dtoa_r+0x28a>
 800ef08:	3101      	adds	r1, #1
 800ef0a:	6041      	str	r1, [r0, #4]
 800ef0c:	0052      	lsls	r2, r2, #1
 800ef0e:	e7b8      	b.n	800ee82 <_dtoa_r+0x292>
 800ef10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef12:	9a01      	ldr	r2, [sp, #4]
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	2b0e      	cmp	r3, #14
 800ef1a:	f200 809d 	bhi.w	800f058 <_dtoa_r+0x468>
 800ef1e:	2d00      	cmp	r5, #0
 800ef20:	f000 809a 	beq.w	800f058 <_dtoa_r+0x468>
 800ef24:	9b00      	ldr	r3, [sp, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	dd32      	ble.n	800ef90 <_dtoa_r+0x3a0>
 800ef2a:	4ab7      	ldr	r2, [pc, #732]	; (800f208 <_dtoa_r+0x618>)
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ef34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef38:	9b00      	ldr	r3, [sp, #0]
 800ef3a:	05d8      	lsls	r0, r3, #23
 800ef3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ef40:	d516      	bpl.n	800ef70 <_dtoa_r+0x380>
 800ef42:	4bb2      	ldr	r3, [pc, #712]	; (800f20c <_dtoa_r+0x61c>)
 800ef44:	ec51 0b19 	vmov	r0, r1, d9
 800ef48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef4c:	f7f1 fc7e 	bl	800084c <__aeabi_ddiv>
 800ef50:	f007 070f 	and.w	r7, r7, #15
 800ef54:	4682      	mov	sl, r0
 800ef56:	468b      	mov	fp, r1
 800ef58:	2503      	movs	r5, #3
 800ef5a:	4eac      	ldr	r6, [pc, #688]	; (800f20c <_dtoa_r+0x61c>)
 800ef5c:	b957      	cbnz	r7, 800ef74 <_dtoa_r+0x384>
 800ef5e:	4642      	mov	r2, r8
 800ef60:	464b      	mov	r3, r9
 800ef62:	4650      	mov	r0, sl
 800ef64:	4659      	mov	r1, fp
 800ef66:	f7f1 fc71 	bl	800084c <__aeabi_ddiv>
 800ef6a:	4682      	mov	sl, r0
 800ef6c:	468b      	mov	fp, r1
 800ef6e:	e028      	b.n	800efc2 <_dtoa_r+0x3d2>
 800ef70:	2502      	movs	r5, #2
 800ef72:	e7f2      	b.n	800ef5a <_dtoa_r+0x36a>
 800ef74:	07f9      	lsls	r1, r7, #31
 800ef76:	d508      	bpl.n	800ef8a <_dtoa_r+0x39a>
 800ef78:	4640      	mov	r0, r8
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef80:	f7f1 fb3a 	bl	80005f8 <__aeabi_dmul>
 800ef84:	3501      	adds	r5, #1
 800ef86:	4680      	mov	r8, r0
 800ef88:	4689      	mov	r9, r1
 800ef8a:	107f      	asrs	r7, r7, #1
 800ef8c:	3608      	adds	r6, #8
 800ef8e:	e7e5      	b.n	800ef5c <_dtoa_r+0x36c>
 800ef90:	f000 809b 	beq.w	800f0ca <_dtoa_r+0x4da>
 800ef94:	9b00      	ldr	r3, [sp, #0]
 800ef96:	4f9d      	ldr	r7, [pc, #628]	; (800f20c <_dtoa_r+0x61c>)
 800ef98:	425e      	negs	r6, r3
 800ef9a:	4b9b      	ldr	r3, [pc, #620]	; (800f208 <_dtoa_r+0x618>)
 800ef9c:	f006 020f 	and.w	r2, r6, #15
 800efa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	ec51 0b19 	vmov	r0, r1, d9
 800efac:	f7f1 fb24 	bl	80005f8 <__aeabi_dmul>
 800efb0:	1136      	asrs	r6, r6, #4
 800efb2:	4682      	mov	sl, r0
 800efb4:	468b      	mov	fp, r1
 800efb6:	2300      	movs	r3, #0
 800efb8:	2502      	movs	r5, #2
 800efba:	2e00      	cmp	r6, #0
 800efbc:	d17a      	bne.n	800f0b4 <_dtoa_r+0x4c4>
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1d3      	bne.n	800ef6a <_dtoa_r+0x37a>
 800efc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 8082 	beq.w	800f0ce <_dtoa_r+0x4de>
 800efca:	4b91      	ldr	r3, [pc, #580]	; (800f210 <_dtoa_r+0x620>)
 800efcc:	2200      	movs	r2, #0
 800efce:	4650      	mov	r0, sl
 800efd0:	4659      	mov	r1, fp
 800efd2:	f7f1 fd83 	bl	8000adc <__aeabi_dcmplt>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d079      	beq.n	800f0ce <_dtoa_r+0x4de>
 800efda:	9b03      	ldr	r3, [sp, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d076      	beq.n	800f0ce <_dtoa_r+0x4de>
 800efe0:	9b02      	ldr	r3, [sp, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dd36      	ble.n	800f054 <_dtoa_r+0x464>
 800efe6:	9b00      	ldr	r3, [sp, #0]
 800efe8:	4650      	mov	r0, sl
 800efea:	4659      	mov	r1, fp
 800efec:	1e5f      	subs	r7, r3, #1
 800efee:	2200      	movs	r2, #0
 800eff0:	4b88      	ldr	r3, [pc, #544]	; (800f214 <_dtoa_r+0x624>)
 800eff2:	f7f1 fb01 	bl	80005f8 <__aeabi_dmul>
 800eff6:	9e02      	ldr	r6, [sp, #8]
 800eff8:	4682      	mov	sl, r0
 800effa:	468b      	mov	fp, r1
 800effc:	3501      	adds	r5, #1
 800effe:	4628      	mov	r0, r5
 800f000:	f7f1 fa90 	bl	8000524 <__aeabi_i2d>
 800f004:	4652      	mov	r2, sl
 800f006:	465b      	mov	r3, fp
 800f008:	f7f1 faf6 	bl	80005f8 <__aeabi_dmul>
 800f00c:	4b82      	ldr	r3, [pc, #520]	; (800f218 <_dtoa_r+0x628>)
 800f00e:	2200      	movs	r2, #0
 800f010:	f7f1 f93c 	bl	800028c <__adddf3>
 800f014:	46d0      	mov	r8, sl
 800f016:	46d9      	mov	r9, fp
 800f018:	4682      	mov	sl, r0
 800f01a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f01e:	2e00      	cmp	r6, #0
 800f020:	d158      	bne.n	800f0d4 <_dtoa_r+0x4e4>
 800f022:	4b7e      	ldr	r3, [pc, #504]	; (800f21c <_dtoa_r+0x62c>)
 800f024:	2200      	movs	r2, #0
 800f026:	4640      	mov	r0, r8
 800f028:	4649      	mov	r1, r9
 800f02a:	f7f1 f92d 	bl	8000288 <__aeabi_dsub>
 800f02e:	4652      	mov	r2, sl
 800f030:	465b      	mov	r3, fp
 800f032:	4680      	mov	r8, r0
 800f034:	4689      	mov	r9, r1
 800f036:	f7f1 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	f040 8295 	bne.w	800f56a <_dtoa_r+0x97a>
 800f040:	4652      	mov	r2, sl
 800f042:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	f7f1 fd47 	bl	8000adc <__aeabi_dcmplt>
 800f04e:	2800      	cmp	r0, #0
 800f050:	f040 8289 	bne.w	800f566 <_dtoa_r+0x976>
 800f054:	ec5b ab19 	vmov	sl, fp, d9
 800f058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f2c0 8148 	blt.w	800f2f0 <_dtoa_r+0x700>
 800f060:	9a00      	ldr	r2, [sp, #0]
 800f062:	2a0e      	cmp	r2, #14
 800f064:	f300 8144 	bgt.w	800f2f0 <_dtoa_r+0x700>
 800f068:	4b67      	ldr	r3, [pc, #412]	; (800f208 <_dtoa_r+0x618>)
 800f06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f06e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	f280 80d5 	bge.w	800f224 <_dtoa_r+0x634>
 800f07a:	9b03      	ldr	r3, [sp, #12]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f300 80d1 	bgt.w	800f224 <_dtoa_r+0x634>
 800f082:	f040 826f 	bne.w	800f564 <_dtoa_r+0x974>
 800f086:	4b65      	ldr	r3, [pc, #404]	; (800f21c <_dtoa_r+0x62c>)
 800f088:	2200      	movs	r2, #0
 800f08a:	4640      	mov	r0, r8
 800f08c:	4649      	mov	r1, r9
 800f08e:	f7f1 fab3 	bl	80005f8 <__aeabi_dmul>
 800f092:	4652      	mov	r2, sl
 800f094:	465b      	mov	r3, fp
 800f096:	f7f1 fd35 	bl	8000b04 <__aeabi_dcmpge>
 800f09a:	9e03      	ldr	r6, [sp, #12]
 800f09c:	4637      	mov	r7, r6
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	f040 8245 	bne.w	800f52e <_dtoa_r+0x93e>
 800f0a4:	9d01      	ldr	r5, [sp, #4]
 800f0a6:	2331      	movs	r3, #49	; 0x31
 800f0a8:	f805 3b01 	strb.w	r3, [r5], #1
 800f0ac:	9b00      	ldr	r3, [sp, #0]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	e240      	b.n	800f536 <_dtoa_r+0x946>
 800f0b4:	07f2      	lsls	r2, r6, #31
 800f0b6:	d505      	bpl.n	800f0c4 <_dtoa_r+0x4d4>
 800f0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0bc:	f7f1 fa9c 	bl	80005f8 <__aeabi_dmul>
 800f0c0:	3501      	adds	r5, #1
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	1076      	asrs	r6, r6, #1
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	e777      	b.n	800efba <_dtoa_r+0x3ca>
 800f0ca:	2502      	movs	r5, #2
 800f0cc:	e779      	b.n	800efc2 <_dtoa_r+0x3d2>
 800f0ce:	9f00      	ldr	r7, [sp, #0]
 800f0d0:	9e03      	ldr	r6, [sp, #12]
 800f0d2:	e794      	b.n	800effe <_dtoa_r+0x40e>
 800f0d4:	9901      	ldr	r1, [sp, #4]
 800f0d6:	4b4c      	ldr	r3, [pc, #304]	; (800f208 <_dtoa_r+0x618>)
 800f0d8:	4431      	add	r1, r6
 800f0da:	910d      	str	r1, [sp, #52]	; 0x34
 800f0dc:	9908      	ldr	r1, [sp, #32]
 800f0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f0e6:	2900      	cmp	r1, #0
 800f0e8:	d043      	beq.n	800f172 <_dtoa_r+0x582>
 800f0ea:	494d      	ldr	r1, [pc, #308]	; (800f220 <_dtoa_r+0x630>)
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	f7f1 fbad 	bl	800084c <__aeabi_ddiv>
 800f0f2:	4652      	mov	r2, sl
 800f0f4:	465b      	mov	r3, fp
 800f0f6:	f7f1 f8c7 	bl	8000288 <__aeabi_dsub>
 800f0fa:	9d01      	ldr	r5, [sp, #4]
 800f0fc:	4682      	mov	sl, r0
 800f0fe:	468b      	mov	fp, r1
 800f100:	4649      	mov	r1, r9
 800f102:	4640      	mov	r0, r8
 800f104:	f7f1 fd28 	bl	8000b58 <__aeabi_d2iz>
 800f108:	4606      	mov	r6, r0
 800f10a:	f7f1 fa0b 	bl	8000524 <__aeabi_i2d>
 800f10e:	4602      	mov	r2, r0
 800f110:	460b      	mov	r3, r1
 800f112:	4640      	mov	r0, r8
 800f114:	4649      	mov	r1, r9
 800f116:	f7f1 f8b7 	bl	8000288 <__aeabi_dsub>
 800f11a:	3630      	adds	r6, #48	; 0x30
 800f11c:	f805 6b01 	strb.w	r6, [r5], #1
 800f120:	4652      	mov	r2, sl
 800f122:	465b      	mov	r3, fp
 800f124:	4680      	mov	r8, r0
 800f126:	4689      	mov	r9, r1
 800f128:	f7f1 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d163      	bne.n	800f1f8 <_dtoa_r+0x608>
 800f130:	4642      	mov	r2, r8
 800f132:	464b      	mov	r3, r9
 800f134:	4936      	ldr	r1, [pc, #216]	; (800f210 <_dtoa_r+0x620>)
 800f136:	2000      	movs	r0, #0
 800f138:	f7f1 f8a6 	bl	8000288 <__aeabi_dsub>
 800f13c:	4652      	mov	r2, sl
 800f13e:	465b      	mov	r3, fp
 800f140:	f7f1 fccc 	bl	8000adc <__aeabi_dcmplt>
 800f144:	2800      	cmp	r0, #0
 800f146:	f040 80b5 	bne.w	800f2b4 <_dtoa_r+0x6c4>
 800f14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f14c:	429d      	cmp	r5, r3
 800f14e:	d081      	beq.n	800f054 <_dtoa_r+0x464>
 800f150:	4b30      	ldr	r3, [pc, #192]	; (800f214 <_dtoa_r+0x624>)
 800f152:	2200      	movs	r2, #0
 800f154:	4650      	mov	r0, sl
 800f156:	4659      	mov	r1, fp
 800f158:	f7f1 fa4e 	bl	80005f8 <__aeabi_dmul>
 800f15c:	4b2d      	ldr	r3, [pc, #180]	; (800f214 <_dtoa_r+0x624>)
 800f15e:	4682      	mov	sl, r0
 800f160:	468b      	mov	fp, r1
 800f162:	4640      	mov	r0, r8
 800f164:	4649      	mov	r1, r9
 800f166:	2200      	movs	r2, #0
 800f168:	f7f1 fa46 	bl	80005f8 <__aeabi_dmul>
 800f16c:	4680      	mov	r8, r0
 800f16e:	4689      	mov	r9, r1
 800f170:	e7c6      	b.n	800f100 <_dtoa_r+0x510>
 800f172:	4650      	mov	r0, sl
 800f174:	4659      	mov	r1, fp
 800f176:	f7f1 fa3f 	bl	80005f8 <__aeabi_dmul>
 800f17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f17c:	9d01      	ldr	r5, [sp, #4]
 800f17e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f180:	4682      	mov	sl, r0
 800f182:	468b      	mov	fp, r1
 800f184:	4649      	mov	r1, r9
 800f186:	4640      	mov	r0, r8
 800f188:	f7f1 fce6 	bl	8000b58 <__aeabi_d2iz>
 800f18c:	4606      	mov	r6, r0
 800f18e:	f7f1 f9c9 	bl	8000524 <__aeabi_i2d>
 800f192:	3630      	adds	r6, #48	; 0x30
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	4640      	mov	r0, r8
 800f19a:	4649      	mov	r1, r9
 800f19c:	f7f1 f874 	bl	8000288 <__aeabi_dsub>
 800f1a0:	f805 6b01 	strb.w	r6, [r5], #1
 800f1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1a6:	429d      	cmp	r5, r3
 800f1a8:	4680      	mov	r8, r0
 800f1aa:	4689      	mov	r9, r1
 800f1ac:	f04f 0200 	mov.w	r2, #0
 800f1b0:	d124      	bne.n	800f1fc <_dtoa_r+0x60c>
 800f1b2:	4b1b      	ldr	r3, [pc, #108]	; (800f220 <_dtoa_r+0x630>)
 800f1b4:	4650      	mov	r0, sl
 800f1b6:	4659      	mov	r1, fp
 800f1b8:	f7f1 f868 	bl	800028c <__adddf3>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	f7f1 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d173      	bne.n	800f2b4 <_dtoa_r+0x6c4>
 800f1cc:	4652      	mov	r2, sl
 800f1ce:	465b      	mov	r3, fp
 800f1d0:	4913      	ldr	r1, [pc, #76]	; (800f220 <_dtoa_r+0x630>)
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	f7f1 f858 	bl	8000288 <__aeabi_dsub>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4640      	mov	r0, r8
 800f1de:	4649      	mov	r1, r9
 800f1e0:	f7f1 fc7c 	bl	8000adc <__aeabi_dcmplt>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	f43f af35 	beq.w	800f054 <_dtoa_r+0x464>
 800f1ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f1ec:	1e6b      	subs	r3, r5, #1
 800f1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f1f4:	2b30      	cmp	r3, #48	; 0x30
 800f1f6:	d0f8      	beq.n	800f1ea <_dtoa_r+0x5fa>
 800f1f8:	9700      	str	r7, [sp, #0]
 800f1fa:	e049      	b.n	800f290 <_dtoa_r+0x6a0>
 800f1fc:	4b05      	ldr	r3, [pc, #20]	; (800f214 <_dtoa_r+0x624>)
 800f1fe:	f7f1 f9fb 	bl	80005f8 <__aeabi_dmul>
 800f202:	4680      	mov	r8, r0
 800f204:	4689      	mov	r9, r1
 800f206:	e7bd      	b.n	800f184 <_dtoa_r+0x594>
 800f208:	08011398 	.word	0x08011398
 800f20c:	08011370 	.word	0x08011370
 800f210:	3ff00000 	.word	0x3ff00000
 800f214:	40240000 	.word	0x40240000
 800f218:	401c0000 	.word	0x401c0000
 800f21c:	40140000 	.word	0x40140000
 800f220:	3fe00000 	.word	0x3fe00000
 800f224:	9d01      	ldr	r5, [sp, #4]
 800f226:	4656      	mov	r6, sl
 800f228:	465f      	mov	r7, fp
 800f22a:	4642      	mov	r2, r8
 800f22c:	464b      	mov	r3, r9
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 fb0b 	bl	800084c <__aeabi_ddiv>
 800f236:	f7f1 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800f23a:	4682      	mov	sl, r0
 800f23c:	f7f1 f972 	bl	8000524 <__aeabi_i2d>
 800f240:	4642      	mov	r2, r8
 800f242:	464b      	mov	r3, r9
 800f244:	f7f1 f9d8 	bl	80005f8 <__aeabi_dmul>
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	4630      	mov	r0, r6
 800f24e:	4639      	mov	r1, r7
 800f250:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f254:	f7f1 f818 	bl	8000288 <__aeabi_dsub>
 800f258:	f805 6b01 	strb.w	r6, [r5], #1
 800f25c:	9e01      	ldr	r6, [sp, #4]
 800f25e:	9f03      	ldr	r7, [sp, #12]
 800f260:	1bae      	subs	r6, r5, r6
 800f262:	42b7      	cmp	r7, r6
 800f264:	4602      	mov	r2, r0
 800f266:	460b      	mov	r3, r1
 800f268:	d135      	bne.n	800f2d6 <_dtoa_r+0x6e6>
 800f26a:	f7f1 f80f 	bl	800028c <__adddf3>
 800f26e:	4642      	mov	r2, r8
 800f270:	464b      	mov	r3, r9
 800f272:	4606      	mov	r6, r0
 800f274:	460f      	mov	r7, r1
 800f276:	f7f1 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800f27a:	b9d0      	cbnz	r0, 800f2b2 <_dtoa_r+0x6c2>
 800f27c:	4642      	mov	r2, r8
 800f27e:	464b      	mov	r3, r9
 800f280:	4630      	mov	r0, r6
 800f282:	4639      	mov	r1, r7
 800f284:	f7f1 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 800f288:	b110      	cbz	r0, 800f290 <_dtoa_r+0x6a0>
 800f28a:	f01a 0f01 	tst.w	sl, #1
 800f28e:	d110      	bne.n	800f2b2 <_dtoa_r+0x6c2>
 800f290:	4620      	mov	r0, r4
 800f292:	ee18 1a10 	vmov	r1, s16
 800f296:	f000 fae9 	bl	800f86c <_Bfree>
 800f29a:	2300      	movs	r3, #0
 800f29c:	9800      	ldr	r0, [sp, #0]
 800f29e:	702b      	strb	r3, [r5, #0]
 800f2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2a2:	3001      	adds	r0, #1
 800f2a4:	6018      	str	r0, [r3, #0]
 800f2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f43f acf1 	beq.w	800ec90 <_dtoa_r+0xa0>
 800f2ae:	601d      	str	r5, [r3, #0]
 800f2b0:	e4ee      	b.n	800ec90 <_dtoa_r+0xa0>
 800f2b2:	9f00      	ldr	r7, [sp, #0]
 800f2b4:	462b      	mov	r3, r5
 800f2b6:	461d      	mov	r5, r3
 800f2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2bc:	2a39      	cmp	r2, #57	; 0x39
 800f2be:	d106      	bne.n	800f2ce <_dtoa_r+0x6de>
 800f2c0:	9a01      	ldr	r2, [sp, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d1f7      	bne.n	800f2b6 <_dtoa_r+0x6c6>
 800f2c6:	9901      	ldr	r1, [sp, #4]
 800f2c8:	2230      	movs	r2, #48	; 0x30
 800f2ca:	3701      	adds	r7, #1
 800f2cc:	700a      	strb	r2, [r1, #0]
 800f2ce:	781a      	ldrb	r2, [r3, #0]
 800f2d0:	3201      	adds	r2, #1
 800f2d2:	701a      	strb	r2, [r3, #0]
 800f2d4:	e790      	b.n	800f1f8 <_dtoa_r+0x608>
 800f2d6:	4ba6      	ldr	r3, [pc, #664]	; (800f570 <_dtoa_r+0x980>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f7f1 f98d 	bl	80005f8 <__aeabi_dmul>
 800f2de:	2200      	movs	r2, #0
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	460f      	mov	r7, r1
 800f2e6:	f7f1 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d09d      	beq.n	800f22a <_dtoa_r+0x63a>
 800f2ee:	e7cf      	b.n	800f290 <_dtoa_r+0x6a0>
 800f2f0:	9a08      	ldr	r2, [sp, #32]
 800f2f2:	2a00      	cmp	r2, #0
 800f2f4:	f000 80d7 	beq.w	800f4a6 <_dtoa_r+0x8b6>
 800f2f8:	9a06      	ldr	r2, [sp, #24]
 800f2fa:	2a01      	cmp	r2, #1
 800f2fc:	f300 80ba 	bgt.w	800f474 <_dtoa_r+0x884>
 800f300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f302:	2a00      	cmp	r2, #0
 800f304:	f000 80b2 	beq.w	800f46c <_dtoa_r+0x87c>
 800f308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f30c:	9e07      	ldr	r6, [sp, #28]
 800f30e:	9d04      	ldr	r5, [sp, #16]
 800f310:	9a04      	ldr	r2, [sp, #16]
 800f312:	441a      	add	r2, r3
 800f314:	9204      	str	r2, [sp, #16]
 800f316:	9a05      	ldr	r2, [sp, #20]
 800f318:	2101      	movs	r1, #1
 800f31a:	441a      	add	r2, r3
 800f31c:	4620      	mov	r0, r4
 800f31e:	9205      	str	r2, [sp, #20]
 800f320:	f000 fb5c 	bl	800f9dc <__i2b>
 800f324:	4607      	mov	r7, r0
 800f326:	2d00      	cmp	r5, #0
 800f328:	dd0c      	ble.n	800f344 <_dtoa_r+0x754>
 800f32a:	9b05      	ldr	r3, [sp, #20]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dd09      	ble.n	800f344 <_dtoa_r+0x754>
 800f330:	42ab      	cmp	r3, r5
 800f332:	9a04      	ldr	r2, [sp, #16]
 800f334:	bfa8      	it	ge
 800f336:	462b      	movge	r3, r5
 800f338:	1ad2      	subs	r2, r2, r3
 800f33a:	9204      	str	r2, [sp, #16]
 800f33c:	9a05      	ldr	r2, [sp, #20]
 800f33e:	1aed      	subs	r5, r5, r3
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	9305      	str	r3, [sp, #20]
 800f344:	9b07      	ldr	r3, [sp, #28]
 800f346:	b31b      	cbz	r3, 800f390 <_dtoa_r+0x7a0>
 800f348:	9b08      	ldr	r3, [sp, #32]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f000 80af 	beq.w	800f4ae <_dtoa_r+0x8be>
 800f350:	2e00      	cmp	r6, #0
 800f352:	dd13      	ble.n	800f37c <_dtoa_r+0x78c>
 800f354:	4639      	mov	r1, r7
 800f356:	4632      	mov	r2, r6
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 fbff 	bl	800fb5c <__pow5mult>
 800f35e:	ee18 2a10 	vmov	r2, s16
 800f362:	4601      	mov	r1, r0
 800f364:	4607      	mov	r7, r0
 800f366:	4620      	mov	r0, r4
 800f368:	f000 fb4e 	bl	800fa08 <__multiply>
 800f36c:	ee18 1a10 	vmov	r1, s16
 800f370:	4680      	mov	r8, r0
 800f372:	4620      	mov	r0, r4
 800f374:	f000 fa7a 	bl	800f86c <_Bfree>
 800f378:	ee08 8a10 	vmov	s16, r8
 800f37c:	9b07      	ldr	r3, [sp, #28]
 800f37e:	1b9a      	subs	r2, r3, r6
 800f380:	d006      	beq.n	800f390 <_dtoa_r+0x7a0>
 800f382:	ee18 1a10 	vmov	r1, s16
 800f386:	4620      	mov	r0, r4
 800f388:	f000 fbe8 	bl	800fb5c <__pow5mult>
 800f38c:	ee08 0a10 	vmov	s16, r0
 800f390:	2101      	movs	r1, #1
 800f392:	4620      	mov	r0, r4
 800f394:	f000 fb22 	bl	800f9dc <__i2b>
 800f398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	4606      	mov	r6, r0
 800f39e:	f340 8088 	ble.w	800f4b2 <_dtoa_r+0x8c2>
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	4601      	mov	r1, r0
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f000 fbd8 	bl	800fb5c <__pow5mult>
 800f3ac:	9b06      	ldr	r3, [sp, #24]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	f340 8081 	ble.w	800f4b8 <_dtoa_r+0x8c8>
 800f3b6:	f04f 0800 	mov.w	r8, #0
 800f3ba:	6933      	ldr	r3, [r6, #16]
 800f3bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f3c0:	6918      	ldr	r0, [r3, #16]
 800f3c2:	f000 fabb 	bl	800f93c <__hi0bits>
 800f3c6:	f1c0 0020 	rsb	r0, r0, #32
 800f3ca:	9b05      	ldr	r3, [sp, #20]
 800f3cc:	4418      	add	r0, r3
 800f3ce:	f010 001f 	ands.w	r0, r0, #31
 800f3d2:	f000 8092 	beq.w	800f4fa <_dtoa_r+0x90a>
 800f3d6:	f1c0 0320 	rsb	r3, r0, #32
 800f3da:	2b04      	cmp	r3, #4
 800f3dc:	f340 808a 	ble.w	800f4f4 <_dtoa_r+0x904>
 800f3e0:	f1c0 001c 	rsb	r0, r0, #28
 800f3e4:	9b04      	ldr	r3, [sp, #16]
 800f3e6:	4403      	add	r3, r0
 800f3e8:	9304      	str	r3, [sp, #16]
 800f3ea:	9b05      	ldr	r3, [sp, #20]
 800f3ec:	4403      	add	r3, r0
 800f3ee:	4405      	add	r5, r0
 800f3f0:	9305      	str	r3, [sp, #20]
 800f3f2:	9b04      	ldr	r3, [sp, #16]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dd07      	ble.n	800f408 <_dtoa_r+0x818>
 800f3f8:	ee18 1a10 	vmov	r1, s16
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 fc06 	bl	800fc10 <__lshift>
 800f404:	ee08 0a10 	vmov	s16, r0
 800f408:	9b05      	ldr	r3, [sp, #20]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	dd05      	ble.n	800f41a <_dtoa_r+0x82a>
 800f40e:	4631      	mov	r1, r6
 800f410:	461a      	mov	r2, r3
 800f412:	4620      	mov	r0, r4
 800f414:	f000 fbfc 	bl	800fc10 <__lshift>
 800f418:	4606      	mov	r6, r0
 800f41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d06e      	beq.n	800f4fe <_dtoa_r+0x90e>
 800f420:	ee18 0a10 	vmov	r0, s16
 800f424:	4631      	mov	r1, r6
 800f426:	f000 fc63 	bl	800fcf0 <__mcmp>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	da67      	bge.n	800f4fe <_dtoa_r+0x90e>
 800f42e:	9b00      	ldr	r3, [sp, #0]
 800f430:	3b01      	subs	r3, #1
 800f432:	ee18 1a10 	vmov	r1, s16
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	220a      	movs	r2, #10
 800f43a:	2300      	movs	r3, #0
 800f43c:	4620      	mov	r0, r4
 800f43e:	f000 fa37 	bl	800f8b0 <__multadd>
 800f442:	9b08      	ldr	r3, [sp, #32]
 800f444:	ee08 0a10 	vmov	s16, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 81b1 	beq.w	800f7b0 <_dtoa_r+0xbc0>
 800f44e:	2300      	movs	r3, #0
 800f450:	4639      	mov	r1, r7
 800f452:	220a      	movs	r2, #10
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fa2b 	bl	800f8b0 <__multadd>
 800f45a:	9b02      	ldr	r3, [sp, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	4607      	mov	r7, r0
 800f460:	f300 808e 	bgt.w	800f580 <_dtoa_r+0x990>
 800f464:	9b06      	ldr	r3, [sp, #24]
 800f466:	2b02      	cmp	r3, #2
 800f468:	dc51      	bgt.n	800f50e <_dtoa_r+0x91e>
 800f46a:	e089      	b.n	800f580 <_dtoa_r+0x990>
 800f46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f46e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f472:	e74b      	b.n	800f30c <_dtoa_r+0x71c>
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	1e5e      	subs	r6, r3, #1
 800f478:	9b07      	ldr	r3, [sp, #28]
 800f47a:	42b3      	cmp	r3, r6
 800f47c:	bfbf      	itttt	lt
 800f47e:	9b07      	ldrlt	r3, [sp, #28]
 800f480:	9607      	strlt	r6, [sp, #28]
 800f482:	1af2      	sublt	r2, r6, r3
 800f484:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f486:	bfb6      	itet	lt
 800f488:	189b      	addlt	r3, r3, r2
 800f48a:	1b9e      	subge	r6, r3, r6
 800f48c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	bfb8      	it	lt
 800f492:	2600      	movlt	r6, #0
 800f494:	2b00      	cmp	r3, #0
 800f496:	bfb7      	itett	lt
 800f498:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f49c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f4a0:	1a9d      	sublt	r5, r3, r2
 800f4a2:	2300      	movlt	r3, #0
 800f4a4:	e734      	b.n	800f310 <_dtoa_r+0x720>
 800f4a6:	9e07      	ldr	r6, [sp, #28]
 800f4a8:	9d04      	ldr	r5, [sp, #16]
 800f4aa:	9f08      	ldr	r7, [sp, #32]
 800f4ac:	e73b      	b.n	800f326 <_dtoa_r+0x736>
 800f4ae:	9a07      	ldr	r2, [sp, #28]
 800f4b0:	e767      	b.n	800f382 <_dtoa_r+0x792>
 800f4b2:	9b06      	ldr	r3, [sp, #24]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	dc18      	bgt.n	800f4ea <_dtoa_r+0x8fa>
 800f4b8:	f1ba 0f00 	cmp.w	sl, #0
 800f4bc:	d115      	bne.n	800f4ea <_dtoa_r+0x8fa>
 800f4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4c2:	b993      	cbnz	r3, 800f4ea <_dtoa_r+0x8fa>
 800f4c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f4c8:	0d1b      	lsrs	r3, r3, #20
 800f4ca:	051b      	lsls	r3, r3, #20
 800f4cc:	b183      	cbz	r3, 800f4f0 <_dtoa_r+0x900>
 800f4ce:	9b04      	ldr	r3, [sp, #16]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	9304      	str	r3, [sp, #16]
 800f4d4:	9b05      	ldr	r3, [sp, #20]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	9305      	str	r3, [sp, #20]
 800f4da:	f04f 0801 	mov.w	r8, #1
 800f4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f47f af6a 	bne.w	800f3ba <_dtoa_r+0x7ca>
 800f4e6:	2001      	movs	r0, #1
 800f4e8:	e76f      	b.n	800f3ca <_dtoa_r+0x7da>
 800f4ea:	f04f 0800 	mov.w	r8, #0
 800f4ee:	e7f6      	b.n	800f4de <_dtoa_r+0x8ee>
 800f4f0:	4698      	mov	r8, r3
 800f4f2:	e7f4      	b.n	800f4de <_dtoa_r+0x8ee>
 800f4f4:	f43f af7d 	beq.w	800f3f2 <_dtoa_r+0x802>
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	301c      	adds	r0, #28
 800f4fc:	e772      	b.n	800f3e4 <_dtoa_r+0x7f4>
 800f4fe:	9b03      	ldr	r3, [sp, #12]
 800f500:	2b00      	cmp	r3, #0
 800f502:	dc37      	bgt.n	800f574 <_dtoa_r+0x984>
 800f504:	9b06      	ldr	r3, [sp, #24]
 800f506:	2b02      	cmp	r3, #2
 800f508:	dd34      	ble.n	800f574 <_dtoa_r+0x984>
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	9302      	str	r3, [sp, #8]
 800f50e:	9b02      	ldr	r3, [sp, #8]
 800f510:	b96b      	cbnz	r3, 800f52e <_dtoa_r+0x93e>
 800f512:	4631      	mov	r1, r6
 800f514:	2205      	movs	r2, #5
 800f516:	4620      	mov	r0, r4
 800f518:	f000 f9ca 	bl	800f8b0 <__multadd>
 800f51c:	4601      	mov	r1, r0
 800f51e:	4606      	mov	r6, r0
 800f520:	ee18 0a10 	vmov	r0, s16
 800f524:	f000 fbe4 	bl	800fcf0 <__mcmp>
 800f528:	2800      	cmp	r0, #0
 800f52a:	f73f adbb 	bgt.w	800f0a4 <_dtoa_r+0x4b4>
 800f52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f530:	9d01      	ldr	r5, [sp, #4]
 800f532:	43db      	mvns	r3, r3
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	f04f 0800 	mov.w	r8, #0
 800f53a:	4631      	mov	r1, r6
 800f53c:	4620      	mov	r0, r4
 800f53e:	f000 f995 	bl	800f86c <_Bfree>
 800f542:	2f00      	cmp	r7, #0
 800f544:	f43f aea4 	beq.w	800f290 <_dtoa_r+0x6a0>
 800f548:	f1b8 0f00 	cmp.w	r8, #0
 800f54c:	d005      	beq.n	800f55a <_dtoa_r+0x96a>
 800f54e:	45b8      	cmp	r8, r7
 800f550:	d003      	beq.n	800f55a <_dtoa_r+0x96a>
 800f552:	4641      	mov	r1, r8
 800f554:	4620      	mov	r0, r4
 800f556:	f000 f989 	bl	800f86c <_Bfree>
 800f55a:	4639      	mov	r1, r7
 800f55c:	4620      	mov	r0, r4
 800f55e:	f000 f985 	bl	800f86c <_Bfree>
 800f562:	e695      	b.n	800f290 <_dtoa_r+0x6a0>
 800f564:	2600      	movs	r6, #0
 800f566:	4637      	mov	r7, r6
 800f568:	e7e1      	b.n	800f52e <_dtoa_r+0x93e>
 800f56a:	9700      	str	r7, [sp, #0]
 800f56c:	4637      	mov	r7, r6
 800f56e:	e599      	b.n	800f0a4 <_dtoa_r+0x4b4>
 800f570:	40240000 	.word	0x40240000
 800f574:	9b08      	ldr	r3, [sp, #32]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f000 80ca 	beq.w	800f710 <_dtoa_r+0xb20>
 800f57c:	9b03      	ldr	r3, [sp, #12]
 800f57e:	9302      	str	r3, [sp, #8]
 800f580:	2d00      	cmp	r5, #0
 800f582:	dd05      	ble.n	800f590 <_dtoa_r+0x9a0>
 800f584:	4639      	mov	r1, r7
 800f586:	462a      	mov	r2, r5
 800f588:	4620      	mov	r0, r4
 800f58a:	f000 fb41 	bl	800fc10 <__lshift>
 800f58e:	4607      	mov	r7, r0
 800f590:	f1b8 0f00 	cmp.w	r8, #0
 800f594:	d05b      	beq.n	800f64e <_dtoa_r+0xa5e>
 800f596:	6879      	ldr	r1, [r7, #4]
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 f927 	bl	800f7ec <_Balloc>
 800f59e:	4605      	mov	r5, r0
 800f5a0:	b928      	cbnz	r0, 800f5ae <_dtoa_r+0x9be>
 800f5a2:	4b87      	ldr	r3, [pc, #540]	; (800f7c0 <_dtoa_r+0xbd0>)
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f5aa:	f7ff bb3b 	b.w	800ec24 <_dtoa_r+0x34>
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	3202      	adds	r2, #2
 800f5b2:	0092      	lsls	r2, r2, #2
 800f5b4:	f107 010c 	add.w	r1, r7, #12
 800f5b8:	300c      	adds	r0, #12
 800f5ba:	f7fe fcfd 	bl	800dfb8 <memcpy>
 800f5be:	2201      	movs	r2, #1
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fb24 	bl	800fc10 <__lshift>
 800f5c8:	9b01      	ldr	r3, [sp, #4]
 800f5ca:	f103 0901 	add.w	r9, r3, #1
 800f5ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	9305      	str	r3, [sp, #20]
 800f5d6:	f00a 0301 	and.w	r3, sl, #1
 800f5da:	46b8      	mov	r8, r7
 800f5dc:	9304      	str	r3, [sp, #16]
 800f5de:	4607      	mov	r7, r0
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	ee18 0a10 	vmov	r0, s16
 800f5e6:	f7ff fa77 	bl	800ead8 <quorem>
 800f5ea:	4641      	mov	r1, r8
 800f5ec:	9002      	str	r0, [sp, #8]
 800f5ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f5f2:	ee18 0a10 	vmov	r0, s16
 800f5f6:	f000 fb7b 	bl	800fcf0 <__mcmp>
 800f5fa:	463a      	mov	r2, r7
 800f5fc:	9003      	str	r0, [sp, #12]
 800f5fe:	4631      	mov	r1, r6
 800f600:	4620      	mov	r0, r4
 800f602:	f000 fb91 	bl	800fd28 <__mdiff>
 800f606:	68c2      	ldr	r2, [r0, #12]
 800f608:	f109 3bff 	add.w	fp, r9, #4294967295
 800f60c:	4605      	mov	r5, r0
 800f60e:	bb02      	cbnz	r2, 800f652 <_dtoa_r+0xa62>
 800f610:	4601      	mov	r1, r0
 800f612:	ee18 0a10 	vmov	r0, s16
 800f616:	f000 fb6b 	bl	800fcf0 <__mcmp>
 800f61a:	4602      	mov	r2, r0
 800f61c:	4629      	mov	r1, r5
 800f61e:	4620      	mov	r0, r4
 800f620:	9207      	str	r2, [sp, #28]
 800f622:	f000 f923 	bl	800f86c <_Bfree>
 800f626:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f62a:	ea43 0102 	orr.w	r1, r3, r2
 800f62e:	9b04      	ldr	r3, [sp, #16]
 800f630:	430b      	orrs	r3, r1
 800f632:	464d      	mov	r5, r9
 800f634:	d10f      	bne.n	800f656 <_dtoa_r+0xa66>
 800f636:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f63a:	d02a      	beq.n	800f692 <_dtoa_r+0xaa2>
 800f63c:	9b03      	ldr	r3, [sp, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	dd02      	ble.n	800f648 <_dtoa_r+0xa58>
 800f642:	9b02      	ldr	r3, [sp, #8]
 800f644:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f648:	f88b a000 	strb.w	sl, [fp]
 800f64c:	e775      	b.n	800f53a <_dtoa_r+0x94a>
 800f64e:	4638      	mov	r0, r7
 800f650:	e7ba      	b.n	800f5c8 <_dtoa_r+0x9d8>
 800f652:	2201      	movs	r2, #1
 800f654:	e7e2      	b.n	800f61c <_dtoa_r+0xa2c>
 800f656:	9b03      	ldr	r3, [sp, #12]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	db04      	blt.n	800f666 <_dtoa_r+0xa76>
 800f65c:	9906      	ldr	r1, [sp, #24]
 800f65e:	430b      	orrs	r3, r1
 800f660:	9904      	ldr	r1, [sp, #16]
 800f662:	430b      	orrs	r3, r1
 800f664:	d122      	bne.n	800f6ac <_dtoa_r+0xabc>
 800f666:	2a00      	cmp	r2, #0
 800f668:	ddee      	ble.n	800f648 <_dtoa_r+0xa58>
 800f66a:	ee18 1a10 	vmov	r1, s16
 800f66e:	2201      	movs	r2, #1
 800f670:	4620      	mov	r0, r4
 800f672:	f000 facd 	bl	800fc10 <__lshift>
 800f676:	4631      	mov	r1, r6
 800f678:	ee08 0a10 	vmov	s16, r0
 800f67c:	f000 fb38 	bl	800fcf0 <__mcmp>
 800f680:	2800      	cmp	r0, #0
 800f682:	dc03      	bgt.n	800f68c <_dtoa_r+0xa9c>
 800f684:	d1e0      	bne.n	800f648 <_dtoa_r+0xa58>
 800f686:	f01a 0f01 	tst.w	sl, #1
 800f68a:	d0dd      	beq.n	800f648 <_dtoa_r+0xa58>
 800f68c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f690:	d1d7      	bne.n	800f642 <_dtoa_r+0xa52>
 800f692:	2339      	movs	r3, #57	; 0x39
 800f694:	f88b 3000 	strb.w	r3, [fp]
 800f698:	462b      	mov	r3, r5
 800f69a:	461d      	mov	r5, r3
 800f69c:	3b01      	subs	r3, #1
 800f69e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f6a2:	2a39      	cmp	r2, #57	; 0x39
 800f6a4:	d071      	beq.n	800f78a <_dtoa_r+0xb9a>
 800f6a6:	3201      	adds	r2, #1
 800f6a8:	701a      	strb	r2, [r3, #0]
 800f6aa:	e746      	b.n	800f53a <_dtoa_r+0x94a>
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	dd07      	ble.n	800f6c0 <_dtoa_r+0xad0>
 800f6b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f6b4:	d0ed      	beq.n	800f692 <_dtoa_r+0xaa2>
 800f6b6:	f10a 0301 	add.w	r3, sl, #1
 800f6ba:	f88b 3000 	strb.w	r3, [fp]
 800f6be:	e73c      	b.n	800f53a <_dtoa_r+0x94a>
 800f6c0:	9b05      	ldr	r3, [sp, #20]
 800f6c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f6c6:	4599      	cmp	r9, r3
 800f6c8:	d047      	beq.n	800f75a <_dtoa_r+0xb6a>
 800f6ca:	ee18 1a10 	vmov	r1, s16
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	220a      	movs	r2, #10
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 f8ec 	bl	800f8b0 <__multadd>
 800f6d8:	45b8      	cmp	r8, r7
 800f6da:	ee08 0a10 	vmov	s16, r0
 800f6de:	f04f 0300 	mov.w	r3, #0
 800f6e2:	f04f 020a 	mov.w	r2, #10
 800f6e6:	4641      	mov	r1, r8
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	d106      	bne.n	800f6fa <_dtoa_r+0xb0a>
 800f6ec:	f000 f8e0 	bl	800f8b0 <__multadd>
 800f6f0:	4680      	mov	r8, r0
 800f6f2:	4607      	mov	r7, r0
 800f6f4:	f109 0901 	add.w	r9, r9, #1
 800f6f8:	e772      	b.n	800f5e0 <_dtoa_r+0x9f0>
 800f6fa:	f000 f8d9 	bl	800f8b0 <__multadd>
 800f6fe:	4639      	mov	r1, r7
 800f700:	4680      	mov	r8, r0
 800f702:	2300      	movs	r3, #0
 800f704:	220a      	movs	r2, #10
 800f706:	4620      	mov	r0, r4
 800f708:	f000 f8d2 	bl	800f8b0 <__multadd>
 800f70c:	4607      	mov	r7, r0
 800f70e:	e7f1      	b.n	800f6f4 <_dtoa_r+0xb04>
 800f710:	9b03      	ldr	r3, [sp, #12]
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	9d01      	ldr	r5, [sp, #4]
 800f716:	ee18 0a10 	vmov	r0, s16
 800f71a:	4631      	mov	r1, r6
 800f71c:	f7ff f9dc 	bl	800ead8 <quorem>
 800f720:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f724:	9b01      	ldr	r3, [sp, #4]
 800f726:	f805 ab01 	strb.w	sl, [r5], #1
 800f72a:	1aea      	subs	r2, r5, r3
 800f72c:	9b02      	ldr	r3, [sp, #8]
 800f72e:	4293      	cmp	r3, r2
 800f730:	dd09      	ble.n	800f746 <_dtoa_r+0xb56>
 800f732:	ee18 1a10 	vmov	r1, s16
 800f736:	2300      	movs	r3, #0
 800f738:	220a      	movs	r2, #10
 800f73a:	4620      	mov	r0, r4
 800f73c:	f000 f8b8 	bl	800f8b0 <__multadd>
 800f740:	ee08 0a10 	vmov	s16, r0
 800f744:	e7e7      	b.n	800f716 <_dtoa_r+0xb26>
 800f746:	9b02      	ldr	r3, [sp, #8]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bfc8      	it	gt
 800f74c:	461d      	movgt	r5, r3
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	bfd8      	it	le
 800f752:	2501      	movle	r5, #1
 800f754:	441d      	add	r5, r3
 800f756:	f04f 0800 	mov.w	r8, #0
 800f75a:	ee18 1a10 	vmov	r1, s16
 800f75e:	2201      	movs	r2, #1
 800f760:	4620      	mov	r0, r4
 800f762:	f000 fa55 	bl	800fc10 <__lshift>
 800f766:	4631      	mov	r1, r6
 800f768:	ee08 0a10 	vmov	s16, r0
 800f76c:	f000 fac0 	bl	800fcf0 <__mcmp>
 800f770:	2800      	cmp	r0, #0
 800f772:	dc91      	bgt.n	800f698 <_dtoa_r+0xaa8>
 800f774:	d102      	bne.n	800f77c <_dtoa_r+0xb8c>
 800f776:	f01a 0f01 	tst.w	sl, #1
 800f77a:	d18d      	bne.n	800f698 <_dtoa_r+0xaa8>
 800f77c:	462b      	mov	r3, r5
 800f77e:	461d      	mov	r5, r3
 800f780:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f784:	2a30      	cmp	r2, #48	; 0x30
 800f786:	d0fa      	beq.n	800f77e <_dtoa_r+0xb8e>
 800f788:	e6d7      	b.n	800f53a <_dtoa_r+0x94a>
 800f78a:	9a01      	ldr	r2, [sp, #4]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d184      	bne.n	800f69a <_dtoa_r+0xaaa>
 800f790:	9b00      	ldr	r3, [sp, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	2331      	movs	r3, #49	; 0x31
 800f798:	7013      	strb	r3, [r2, #0]
 800f79a:	e6ce      	b.n	800f53a <_dtoa_r+0x94a>
 800f79c:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <_dtoa_r+0xbd4>)
 800f79e:	f7ff ba95 	b.w	800eccc <_dtoa_r+0xdc>
 800f7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	f47f aa6e 	bne.w	800ec86 <_dtoa_r+0x96>
 800f7aa:	4b07      	ldr	r3, [pc, #28]	; (800f7c8 <_dtoa_r+0xbd8>)
 800f7ac:	f7ff ba8e 	b.w	800eccc <_dtoa_r+0xdc>
 800f7b0:	9b02      	ldr	r3, [sp, #8]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	dcae      	bgt.n	800f714 <_dtoa_r+0xb24>
 800f7b6:	9b06      	ldr	r3, [sp, #24]
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	f73f aea8 	bgt.w	800f50e <_dtoa_r+0x91e>
 800f7be:	e7a9      	b.n	800f714 <_dtoa_r+0xb24>
 800f7c0:	080112ff 	.word	0x080112ff
 800f7c4:	0801125c 	.word	0x0801125c
 800f7c8:	08011280 	.word	0x08011280

0800f7cc <_localeconv_r>:
 800f7cc:	4800      	ldr	r0, [pc, #0]	; (800f7d0 <_localeconv_r+0x4>)
 800f7ce:	4770      	bx	lr
 800f7d0:	2000047c 	.word	0x2000047c

0800f7d4 <__malloc_lock>:
 800f7d4:	4801      	ldr	r0, [pc, #4]	; (800f7dc <__malloc_lock+0x8>)
 800f7d6:	f000 bd30 	b.w	801023a <__retarget_lock_acquire_recursive>
 800f7da:	bf00      	nop
 800f7dc:	20001524 	.word	0x20001524

0800f7e0 <__malloc_unlock>:
 800f7e0:	4801      	ldr	r0, [pc, #4]	; (800f7e8 <__malloc_unlock+0x8>)
 800f7e2:	f000 bd2b 	b.w	801023c <__retarget_lock_release_recursive>
 800f7e6:	bf00      	nop
 800f7e8:	20001524 	.word	0x20001524

0800f7ec <_Balloc>:
 800f7ec:	b570      	push	{r4, r5, r6, lr}
 800f7ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	b976      	cbnz	r6, 800f814 <_Balloc+0x28>
 800f7f6:	2010      	movs	r0, #16
 800f7f8:	f7fe fbce 	bl	800df98 <malloc>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	6260      	str	r0, [r4, #36]	; 0x24
 800f800:	b920      	cbnz	r0, 800f80c <_Balloc+0x20>
 800f802:	4b18      	ldr	r3, [pc, #96]	; (800f864 <_Balloc+0x78>)
 800f804:	4818      	ldr	r0, [pc, #96]	; (800f868 <_Balloc+0x7c>)
 800f806:	2166      	movs	r1, #102	; 0x66
 800f808:	f000 fce6 	bl	80101d8 <__assert_func>
 800f80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f810:	6006      	str	r6, [r0, #0]
 800f812:	60c6      	str	r6, [r0, #12]
 800f814:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f816:	68f3      	ldr	r3, [r6, #12]
 800f818:	b183      	cbz	r3, 800f83c <_Balloc+0x50>
 800f81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f822:	b9b8      	cbnz	r0, 800f854 <_Balloc+0x68>
 800f824:	2101      	movs	r1, #1
 800f826:	fa01 f605 	lsl.w	r6, r1, r5
 800f82a:	1d72      	adds	r2, r6, #5
 800f82c:	0092      	lsls	r2, r2, #2
 800f82e:	4620      	mov	r0, r4
 800f830:	f000 fb60 	bl	800fef4 <_calloc_r>
 800f834:	b160      	cbz	r0, 800f850 <_Balloc+0x64>
 800f836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f83a:	e00e      	b.n	800f85a <_Balloc+0x6e>
 800f83c:	2221      	movs	r2, #33	; 0x21
 800f83e:	2104      	movs	r1, #4
 800f840:	4620      	mov	r0, r4
 800f842:	f000 fb57 	bl	800fef4 <_calloc_r>
 800f846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f848:	60f0      	str	r0, [r6, #12]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1e4      	bne.n	800f81a <_Balloc+0x2e>
 800f850:	2000      	movs	r0, #0
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	6802      	ldr	r2, [r0, #0]
 800f856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f85a:	2300      	movs	r3, #0
 800f85c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f860:	e7f7      	b.n	800f852 <_Balloc+0x66>
 800f862:	bf00      	nop
 800f864:	0801128d 	.word	0x0801128d
 800f868:	08011310 	.word	0x08011310

0800f86c <_Bfree>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f870:	4605      	mov	r5, r0
 800f872:	460c      	mov	r4, r1
 800f874:	b976      	cbnz	r6, 800f894 <_Bfree+0x28>
 800f876:	2010      	movs	r0, #16
 800f878:	f7fe fb8e 	bl	800df98 <malloc>
 800f87c:	4602      	mov	r2, r0
 800f87e:	6268      	str	r0, [r5, #36]	; 0x24
 800f880:	b920      	cbnz	r0, 800f88c <_Bfree+0x20>
 800f882:	4b09      	ldr	r3, [pc, #36]	; (800f8a8 <_Bfree+0x3c>)
 800f884:	4809      	ldr	r0, [pc, #36]	; (800f8ac <_Bfree+0x40>)
 800f886:	218a      	movs	r1, #138	; 0x8a
 800f888:	f000 fca6 	bl	80101d8 <__assert_func>
 800f88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f890:	6006      	str	r6, [r0, #0]
 800f892:	60c6      	str	r6, [r0, #12]
 800f894:	b13c      	cbz	r4, 800f8a6 <_Bfree+0x3a>
 800f896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f898:	6862      	ldr	r2, [r4, #4]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8a0:	6021      	str	r1, [r4, #0]
 800f8a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
 800f8a8:	0801128d 	.word	0x0801128d
 800f8ac:	08011310 	.word	0x08011310

0800f8b0 <__multadd>:
 800f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b4:	690d      	ldr	r5, [r1, #16]
 800f8b6:	4607      	mov	r7, r0
 800f8b8:	460c      	mov	r4, r1
 800f8ba:	461e      	mov	r6, r3
 800f8bc:	f101 0c14 	add.w	ip, r1, #20
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	f8dc 3000 	ldr.w	r3, [ip]
 800f8c6:	b299      	uxth	r1, r3
 800f8c8:	fb02 6101 	mla	r1, r2, r1, r6
 800f8cc:	0c1e      	lsrs	r6, r3, #16
 800f8ce:	0c0b      	lsrs	r3, r1, #16
 800f8d0:	fb02 3306 	mla	r3, r2, r6, r3
 800f8d4:	b289      	uxth	r1, r1
 800f8d6:	3001      	adds	r0, #1
 800f8d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8dc:	4285      	cmp	r5, r0
 800f8de:	f84c 1b04 	str.w	r1, [ip], #4
 800f8e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8e6:	dcec      	bgt.n	800f8c2 <__multadd+0x12>
 800f8e8:	b30e      	cbz	r6, 800f92e <__multadd+0x7e>
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	42ab      	cmp	r3, r5
 800f8ee:	dc19      	bgt.n	800f924 <__multadd+0x74>
 800f8f0:	6861      	ldr	r1, [r4, #4]
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	3101      	adds	r1, #1
 800f8f6:	f7ff ff79 	bl	800f7ec <_Balloc>
 800f8fa:	4680      	mov	r8, r0
 800f8fc:	b928      	cbnz	r0, 800f90a <__multadd+0x5a>
 800f8fe:	4602      	mov	r2, r0
 800f900:	4b0c      	ldr	r3, [pc, #48]	; (800f934 <__multadd+0x84>)
 800f902:	480d      	ldr	r0, [pc, #52]	; (800f938 <__multadd+0x88>)
 800f904:	21b5      	movs	r1, #181	; 0xb5
 800f906:	f000 fc67 	bl	80101d8 <__assert_func>
 800f90a:	6922      	ldr	r2, [r4, #16]
 800f90c:	3202      	adds	r2, #2
 800f90e:	f104 010c 	add.w	r1, r4, #12
 800f912:	0092      	lsls	r2, r2, #2
 800f914:	300c      	adds	r0, #12
 800f916:	f7fe fb4f 	bl	800dfb8 <memcpy>
 800f91a:	4621      	mov	r1, r4
 800f91c:	4638      	mov	r0, r7
 800f91e:	f7ff ffa5 	bl	800f86c <_Bfree>
 800f922:	4644      	mov	r4, r8
 800f924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f928:	3501      	adds	r5, #1
 800f92a:	615e      	str	r6, [r3, #20]
 800f92c:	6125      	str	r5, [r4, #16]
 800f92e:	4620      	mov	r0, r4
 800f930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f934:	080112ff 	.word	0x080112ff
 800f938:	08011310 	.word	0x08011310

0800f93c <__hi0bits>:
 800f93c:	0c03      	lsrs	r3, r0, #16
 800f93e:	041b      	lsls	r3, r3, #16
 800f940:	b9d3      	cbnz	r3, 800f978 <__hi0bits+0x3c>
 800f942:	0400      	lsls	r0, r0, #16
 800f944:	2310      	movs	r3, #16
 800f946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f94a:	bf04      	itt	eq
 800f94c:	0200      	lsleq	r0, r0, #8
 800f94e:	3308      	addeq	r3, #8
 800f950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f954:	bf04      	itt	eq
 800f956:	0100      	lsleq	r0, r0, #4
 800f958:	3304      	addeq	r3, #4
 800f95a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f95e:	bf04      	itt	eq
 800f960:	0080      	lsleq	r0, r0, #2
 800f962:	3302      	addeq	r3, #2
 800f964:	2800      	cmp	r0, #0
 800f966:	db05      	blt.n	800f974 <__hi0bits+0x38>
 800f968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f96c:	f103 0301 	add.w	r3, r3, #1
 800f970:	bf08      	it	eq
 800f972:	2320      	moveq	r3, #32
 800f974:	4618      	mov	r0, r3
 800f976:	4770      	bx	lr
 800f978:	2300      	movs	r3, #0
 800f97a:	e7e4      	b.n	800f946 <__hi0bits+0xa>

0800f97c <__lo0bits>:
 800f97c:	6803      	ldr	r3, [r0, #0]
 800f97e:	f013 0207 	ands.w	r2, r3, #7
 800f982:	4601      	mov	r1, r0
 800f984:	d00b      	beq.n	800f99e <__lo0bits+0x22>
 800f986:	07da      	lsls	r2, r3, #31
 800f988:	d423      	bmi.n	800f9d2 <__lo0bits+0x56>
 800f98a:	0798      	lsls	r0, r3, #30
 800f98c:	bf49      	itett	mi
 800f98e:	085b      	lsrmi	r3, r3, #1
 800f990:	089b      	lsrpl	r3, r3, #2
 800f992:	2001      	movmi	r0, #1
 800f994:	600b      	strmi	r3, [r1, #0]
 800f996:	bf5c      	itt	pl
 800f998:	600b      	strpl	r3, [r1, #0]
 800f99a:	2002      	movpl	r0, #2
 800f99c:	4770      	bx	lr
 800f99e:	b298      	uxth	r0, r3
 800f9a0:	b9a8      	cbnz	r0, 800f9ce <__lo0bits+0x52>
 800f9a2:	0c1b      	lsrs	r3, r3, #16
 800f9a4:	2010      	movs	r0, #16
 800f9a6:	b2da      	uxtb	r2, r3
 800f9a8:	b90a      	cbnz	r2, 800f9ae <__lo0bits+0x32>
 800f9aa:	3008      	adds	r0, #8
 800f9ac:	0a1b      	lsrs	r3, r3, #8
 800f9ae:	071a      	lsls	r2, r3, #28
 800f9b0:	bf04      	itt	eq
 800f9b2:	091b      	lsreq	r3, r3, #4
 800f9b4:	3004      	addeq	r0, #4
 800f9b6:	079a      	lsls	r2, r3, #30
 800f9b8:	bf04      	itt	eq
 800f9ba:	089b      	lsreq	r3, r3, #2
 800f9bc:	3002      	addeq	r0, #2
 800f9be:	07da      	lsls	r2, r3, #31
 800f9c0:	d403      	bmi.n	800f9ca <__lo0bits+0x4e>
 800f9c2:	085b      	lsrs	r3, r3, #1
 800f9c4:	f100 0001 	add.w	r0, r0, #1
 800f9c8:	d005      	beq.n	800f9d6 <__lo0bits+0x5a>
 800f9ca:	600b      	str	r3, [r1, #0]
 800f9cc:	4770      	bx	lr
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	e7e9      	b.n	800f9a6 <__lo0bits+0x2a>
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	4770      	bx	lr
 800f9d6:	2020      	movs	r0, #32
 800f9d8:	4770      	bx	lr
	...

0800f9dc <__i2b>:
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	460c      	mov	r4, r1
 800f9e0:	2101      	movs	r1, #1
 800f9e2:	f7ff ff03 	bl	800f7ec <_Balloc>
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	b928      	cbnz	r0, 800f9f6 <__i2b+0x1a>
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <__i2b+0x24>)
 800f9ec:	4805      	ldr	r0, [pc, #20]	; (800fa04 <__i2b+0x28>)
 800f9ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9f2:	f000 fbf1 	bl	80101d8 <__assert_func>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	6144      	str	r4, [r0, #20]
 800f9fa:	6103      	str	r3, [r0, #16]
 800f9fc:	bd10      	pop	{r4, pc}
 800f9fe:	bf00      	nop
 800fa00:	080112ff 	.word	0x080112ff
 800fa04:	08011310 	.word	0x08011310

0800fa08 <__multiply>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	4691      	mov	r9, r2
 800fa0e:	690a      	ldr	r2, [r1, #16]
 800fa10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	bfb8      	it	lt
 800fa18:	460b      	movlt	r3, r1
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	bfbc      	itt	lt
 800fa1e:	464c      	movlt	r4, r9
 800fa20:	4699      	movlt	r9, r3
 800fa22:	6927      	ldr	r7, [r4, #16]
 800fa24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	6861      	ldr	r1, [r4, #4]
 800fa2c:	eb07 060a 	add.w	r6, r7, sl
 800fa30:	42b3      	cmp	r3, r6
 800fa32:	b085      	sub	sp, #20
 800fa34:	bfb8      	it	lt
 800fa36:	3101      	addlt	r1, #1
 800fa38:	f7ff fed8 	bl	800f7ec <_Balloc>
 800fa3c:	b930      	cbnz	r0, 800fa4c <__multiply+0x44>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	4b44      	ldr	r3, [pc, #272]	; (800fb54 <__multiply+0x14c>)
 800fa42:	4845      	ldr	r0, [pc, #276]	; (800fb58 <__multiply+0x150>)
 800fa44:	f240 115d 	movw	r1, #349	; 0x15d
 800fa48:	f000 fbc6 	bl	80101d8 <__assert_func>
 800fa4c:	f100 0514 	add.w	r5, r0, #20
 800fa50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa54:	462b      	mov	r3, r5
 800fa56:	2200      	movs	r2, #0
 800fa58:	4543      	cmp	r3, r8
 800fa5a:	d321      	bcc.n	800faa0 <__multiply+0x98>
 800fa5c:	f104 0314 	add.w	r3, r4, #20
 800fa60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa64:	f109 0314 	add.w	r3, r9, #20
 800fa68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa6c:	9202      	str	r2, [sp, #8]
 800fa6e:	1b3a      	subs	r2, r7, r4
 800fa70:	3a15      	subs	r2, #21
 800fa72:	f022 0203 	bic.w	r2, r2, #3
 800fa76:	3204      	adds	r2, #4
 800fa78:	f104 0115 	add.w	r1, r4, #21
 800fa7c:	428f      	cmp	r7, r1
 800fa7e:	bf38      	it	cc
 800fa80:	2204      	movcc	r2, #4
 800fa82:	9201      	str	r2, [sp, #4]
 800fa84:	9a02      	ldr	r2, [sp, #8]
 800fa86:	9303      	str	r3, [sp, #12]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d80c      	bhi.n	800faa6 <__multiply+0x9e>
 800fa8c:	2e00      	cmp	r6, #0
 800fa8e:	dd03      	ble.n	800fa98 <__multiply+0x90>
 800fa90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d05a      	beq.n	800fb4e <__multiply+0x146>
 800fa98:	6106      	str	r6, [r0, #16]
 800fa9a:	b005      	add	sp, #20
 800fa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa0:	f843 2b04 	str.w	r2, [r3], #4
 800faa4:	e7d8      	b.n	800fa58 <__multiply+0x50>
 800faa6:	f8b3 a000 	ldrh.w	sl, [r3]
 800faaa:	f1ba 0f00 	cmp.w	sl, #0
 800faae:	d024      	beq.n	800fafa <__multiply+0xf2>
 800fab0:	f104 0e14 	add.w	lr, r4, #20
 800fab4:	46a9      	mov	r9, r5
 800fab6:	f04f 0c00 	mov.w	ip, #0
 800faba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fabe:	f8d9 1000 	ldr.w	r1, [r9]
 800fac2:	fa1f fb82 	uxth.w	fp, r2
 800fac6:	b289      	uxth	r1, r1
 800fac8:	fb0a 110b 	mla	r1, sl, fp, r1
 800facc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fad0:	f8d9 2000 	ldr.w	r2, [r9]
 800fad4:	4461      	add	r1, ip
 800fad6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fada:	fb0a c20b 	mla	r2, sl, fp, ip
 800fade:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fae2:	b289      	uxth	r1, r1
 800fae4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fae8:	4577      	cmp	r7, lr
 800faea:	f849 1b04 	str.w	r1, [r9], #4
 800faee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800faf2:	d8e2      	bhi.n	800faba <__multiply+0xb2>
 800faf4:	9a01      	ldr	r2, [sp, #4]
 800faf6:	f845 c002 	str.w	ip, [r5, r2]
 800fafa:	9a03      	ldr	r2, [sp, #12]
 800fafc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb00:	3304      	adds	r3, #4
 800fb02:	f1b9 0f00 	cmp.w	r9, #0
 800fb06:	d020      	beq.n	800fb4a <__multiply+0x142>
 800fb08:	6829      	ldr	r1, [r5, #0]
 800fb0a:	f104 0c14 	add.w	ip, r4, #20
 800fb0e:	46ae      	mov	lr, r5
 800fb10:	f04f 0a00 	mov.w	sl, #0
 800fb14:	f8bc b000 	ldrh.w	fp, [ip]
 800fb18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb1c:	fb09 220b 	mla	r2, r9, fp, r2
 800fb20:	4492      	add	sl, r2
 800fb22:	b289      	uxth	r1, r1
 800fb24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fb28:	f84e 1b04 	str.w	r1, [lr], #4
 800fb2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb30:	f8be 1000 	ldrh.w	r1, [lr]
 800fb34:	0c12      	lsrs	r2, r2, #16
 800fb36:	fb09 1102 	mla	r1, r9, r2, r1
 800fb3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fb3e:	4567      	cmp	r7, ip
 800fb40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb44:	d8e6      	bhi.n	800fb14 <__multiply+0x10c>
 800fb46:	9a01      	ldr	r2, [sp, #4]
 800fb48:	50a9      	str	r1, [r5, r2]
 800fb4a:	3504      	adds	r5, #4
 800fb4c:	e79a      	b.n	800fa84 <__multiply+0x7c>
 800fb4e:	3e01      	subs	r6, #1
 800fb50:	e79c      	b.n	800fa8c <__multiply+0x84>
 800fb52:	bf00      	nop
 800fb54:	080112ff 	.word	0x080112ff
 800fb58:	08011310 	.word	0x08011310

0800fb5c <__pow5mult>:
 800fb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb60:	4615      	mov	r5, r2
 800fb62:	f012 0203 	ands.w	r2, r2, #3
 800fb66:	4606      	mov	r6, r0
 800fb68:	460f      	mov	r7, r1
 800fb6a:	d007      	beq.n	800fb7c <__pow5mult+0x20>
 800fb6c:	4c25      	ldr	r4, [pc, #148]	; (800fc04 <__pow5mult+0xa8>)
 800fb6e:	3a01      	subs	r2, #1
 800fb70:	2300      	movs	r3, #0
 800fb72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb76:	f7ff fe9b 	bl	800f8b0 <__multadd>
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	10ad      	asrs	r5, r5, #2
 800fb7e:	d03d      	beq.n	800fbfc <__pow5mult+0xa0>
 800fb80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb82:	b97c      	cbnz	r4, 800fba4 <__pow5mult+0x48>
 800fb84:	2010      	movs	r0, #16
 800fb86:	f7fe fa07 	bl	800df98 <malloc>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	6270      	str	r0, [r6, #36]	; 0x24
 800fb8e:	b928      	cbnz	r0, 800fb9c <__pow5mult+0x40>
 800fb90:	4b1d      	ldr	r3, [pc, #116]	; (800fc08 <__pow5mult+0xac>)
 800fb92:	481e      	ldr	r0, [pc, #120]	; (800fc0c <__pow5mult+0xb0>)
 800fb94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb98:	f000 fb1e 	bl	80101d8 <__assert_func>
 800fb9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fba0:	6004      	str	r4, [r0, #0]
 800fba2:	60c4      	str	r4, [r0, #12]
 800fba4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbac:	b94c      	cbnz	r4, 800fbc2 <__pow5mult+0x66>
 800fbae:	f240 2171 	movw	r1, #625	; 0x271
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	f7ff ff12 	bl	800f9dc <__i2b>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	6003      	str	r3, [r0, #0]
 800fbc2:	f04f 0900 	mov.w	r9, #0
 800fbc6:	07eb      	lsls	r3, r5, #31
 800fbc8:	d50a      	bpl.n	800fbe0 <__pow5mult+0x84>
 800fbca:	4639      	mov	r1, r7
 800fbcc:	4622      	mov	r2, r4
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f7ff ff1a 	bl	800fa08 <__multiply>
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	4680      	mov	r8, r0
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f7ff fe47 	bl	800f86c <_Bfree>
 800fbde:	4647      	mov	r7, r8
 800fbe0:	106d      	asrs	r5, r5, #1
 800fbe2:	d00b      	beq.n	800fbfc <__pow5mult+0xa0>
 800fbe4:	6820      	ldr	r0, [r4, #0]
 800fbe6:	b938      	cbnz	r0, 800fbf8 <__pow5mult+0x9c>
 800fbe8:	4622      	mov	r2, r4
 800fbea:	4621      	mov	r1, r4
 800fbec:	4630      	mov	r0, r6
 800fbee:	f7ff ff0b 	bl	800fa08 <__multiply>
 800fbf2:	6020      	str	r0, [r4, #0]
 800fbf4:	f8c0 9000 	str.w	r9, [r0]
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	e7e4      	b.n	800fbc6 <__pow5mult+0x6a>
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc02:	bf00      	nop
 800fc04:	08011460 	.word	0x08011460
 800fc08:	0801128d 	.word	0x0801128d
 800fc0c:	08011310 	.word	0x08011310

0800fc10 <__lshift>:
 800fc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc14:	460c      	mov	r4, r1
 800fc16:	6849      	ldr	r1, [r1, #4]
 800fc18:	6923      	ldr	r3, [r4, #16]
 800fc1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc1e:	68a3      	ldr	r3, [r4, #8]
 800fc20:	4607      	mov	r7, r0
 800fc22:	4691      	mov	r9, r2
 800fc24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc28:	f108 0601 	add.w	r6, r8, #1
 800fc2c:	42b3      	cmp	r3, r6
 800fc2e:	db0b      	blt.n	800fc48 <__lshift+0x38>
 800fc30:	4638      	mov	r0, r7
 800fc32:	f7ff fddb 	bl	800f7ec <_Balloc>
 800fc36:	4605      	mov	r5, r0
 800fc38:	b948      	cbnz	r0, 800fc4e <__lshift+0x3e>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	4b2a      	ldr	r3, [pc, #168]	; (800fce8 <__lshift+0xd8>)
 800fc3e:	482b      	ldr	r0, [pc, #172]	; (800fcec <__lshift+0xdc>)
 800fc40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc44:	f000 fac8 	bl	80101d8 <__assert_func>
 800fc48:	3101      	adds	r1, #1
 800fc4a:	005b      	lsls	r3, r3, #1
 800fc4c:	e7ee      	b.n	800fc2c <__lshift+0x1c>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	f100 0114 	add.w	r1, r0, #20
 800fc54:	f100 0210 	add.w	r2, r0, #16
 800fc58:	4618      	mov	r0, r3
 800fc5a:	4553      	cmp	r3, sl
 800fc5c:	db37      	blt.n	800fcce <__lshift+0xbe>
 800fc5e:	6920      	ldr	r0, [r4, #16]
 800fc60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc64:	f104 0314 	add.w	r3, r4, #20
 800fc68:	f019 091f 	ands.w	r9, r9, #31
 800fc6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc74:	d02f      	beq.n	800fcd6 <__lshift+0xc6>
 800fc76:	f1c9 0e20 	rsb	lr, r9, #32
 800fc7a:	468a      	mov	sl, r1
 800fc7c:	f04f 0c00 	mov.w	ip, #0
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	fa02 f209 	lsl.w	r2, r2, r9
 800fc86:	ea42 020c 	orr.w	r2, r2, ip
 800fc8a:	f84a 2b04 	str.w	r2, [sl], #4
 800fc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc92:	4298      	cmp	r0, r3
 800fc94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc98:	d8f2      	bhi.n	800fc80 <__lshift+0x70>
 800fc9a:	1b03      	subs	r3, r0, r4
 800fc9c:	3b15      	subs	r3, #21
 800fc9e:	f023 0303 	bic.w	r3, r3, #3
 800fca2:	3304      	adds	r3, #4
 800fca4:	f104 0215 	add.w	r2, r4, #21
 800fca8:	4290      	cmp	r0, r2
 800fcaa:	bf38      	it	cc
 800fcac:	2304      	movcc	r3, #4
 800fcae:	f841 c003 	str.w	ip, [r1, r3]
 800fcb2:	f1bc 0f00 	cmp.w	ip, #0
 800fcb6:	d001      	beq.n	800fcbc <__lshift+0xac>
 800fcb8:	f108 0602 	add.w	r6, r8, #2
 800fcbc:	3e01      	subs	r6, #1
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	612e      	str	r6, [r5, #16]
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	f7ff fdd2 	bl	800f86c <_Bfree>
 800fcc8:	4628      	mov	r0, r5
 800fcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcce:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	e7c1      	b.n	800fc5a <__lshift+0x4a>
 800fcd6:	3904      	subs	r1, #4
 800fcd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fce0:	4298      	cmp	r0, r3
 800fce2:	d8f9      	bhi.n	800fcd8 <__lshift+0xc8>
 800fce4:	e7ea      	b.n	800fcbc <__lshift+0xac>
 800fce6:	bf00      	nop
 800fce8:	080112ff 	.word	0x080112ff
 800fcec:	08011310 	.word	0x08011310

0800fcf0 <__mcmp>:
 800fcf0:	b530      	push	{r4, r5, lr}
 800fcf2:	6902      	ldr	r2, [r0, #16]
 800fcf4:	690c      	ldr	r4, [r1, #16]
 800fcf6:	1b12      	subs	r2, r2, r4
 800fcf8:	d10e      	bne.n	800fd18 <__mcmp+0x28>
 800fcfa:	f100 0314 	add.w	r3, r0, #20
 800fcfe:	3114      	adds	r1, #20
 800fd00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd10:	42a5      	cmp	r5, r4
 800fd12:	d003      	beq.n	800fd1c <__mcmp+0x2c>
 800fd14:	d305      	bcc.n	800fd22 <__mcmp+0x32>
 800fd16:	2201      	movs	r2, #1
 800fd18:	4610      	mov	r0, r2
 800fd1a:	bd30      	pop	{r4, r5, pc}
 800fd1c:	4283      	cmp	r3, r0
 800fd1e:	d3f3      	bcc.n	800fd08 <__mcmp+0x18>
 800fd20:	e7fa      	b.n	800fd18 <__mcmp+0x28>
 800fd22:	f04f 32ff 	mov.w	r2, #4294967295
 800fd26:	e7f7      	b.n	800fd18 <__mcmp+0x28>

0800fd28 <__mdiff>:
 800fd28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	4606      	mov	r6, r0
 800fd30:	4611      	mov	r1, r2
 800fd32:	4620      	mov	r0, r4
 800fd34:	4690      	mov	r8, r2
 800fd36:	f7ff ffdb 	bl	800fcf0 <__mcmp>
 800fd3a:	1e05      	subs	r5, r0, #0
 800fd3c:	d110      	bne.n	800fd60 <__mdiff+0x38>
 800fd3e:	4629      	mov	r1, r5
 800fd40:	4630      	mov	r0, r6
 800fd42:	f7ff fd53 	bl	800f7ec <_Balloc>
 800fd46:	b930      	cbnz	r0, 800fd56 <__mdiff+0x2e>
 800fd48:	4b3a      	ldr	r3, [pc, #232]	; (800fe34 <__mdiff+0x10c>)
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	f240 2132 	movw	r1, #562	; 0x232
 800fd50:	4839      	ldr	r0, [pc, #228]	; (800fe38 <__mdiff+0x110>)
 800fd52:	f000 fa41 	bl	80101d8 <__assert_func>
 800fd56:	2301      	movs	r3, #1
 800fd58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd60:	bfa4      	itt	ge
 800fd62:	4643      	movge	r3, r8
 800fd64:	46a0      	movge	r8, r4
 800fd66:	4630      	mov	r0, r6
 800fd68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd6c:	bfa6      	itte	ge
 800fd6e:	461c      	movge	r4, r3
 800fd70:	2500      	movge	r5, #0
 800fd72:	2501      	movlt	r5, #1
 800fd74:	f7ff fd3a 	bl	800f7ec <_Balloc>
 800fd78:	b920      	cbnz	r0, 800fd84 <__mdiff+0x5c>
 800fd7a:	4b2e      	ldr	r3, [pc, #184]	; (800fe34 <__mdiff+0x10c>)
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd82:	e7e5      	b.n	800fd50 <__mdiff+0x28>
 800fd84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd88:	6926      	ldr	r6, [r4, #16]
 800fd8a:	60c5      	str	r5, [r0, #12]
 800fd8c:	f104 0914 	add.w	r9, r4, #20
 800fd90:	f108 0514 	add.w	r5, r8, #20
 800fd94:	f100 0e14 	add.w	lr, r0, #20
 800fd98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fda0:	f108 0210 	add.w	r2, r8, #16
 800fda4:	46f2      	mov	sl, lr
 800fda6:	2100      	movs	r1, #0
 800fda8:	f859 3b04 	ldr.w	r3, [r9], #4
 800fdac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fdb0:	fa1f f883 	uxth.w	r8, r3
 800fdb4:	fa11 f18b 	uxtah	r1, r1, fp
 800fdb8:	0c1b      	lsrs	r3, r3, #16
 800fdba:	eba1 0808 	sub.w	r8, r1, r8
 800fdbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdc6:	fa1f f888 	uxth.w	r8, r8
 800fdca:	1419      	asrs	r1, r3, #16
 800fdcc:	454e      	cmp	r6, r9
 800fdce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdd2:	f84a 3b04 	str.w	r3, [sl], #4
 800fdd6:	d8e7      	bhi.n	800fda8 <__mdiff+0x80>
 800fdd8:	1b33      	subs	r3, r6, r4
 800fdda:	3b15      	subs	r3, #21
 800fddc:	f023 0303 	bic.w	r3, r3, #3
 800fde0:	3304      	adds	r3, #4
 800fde2:	3415      	adds	r4, #21
 800fde4:	42a6      	cmp	r6, r4
 800fde6:	bf38      	it	cc
 800fde8:	2304      	movcc	r3, #4
 800fdea:	441d      	add	r5, r3
 800fdec:	4473      	add	r3, lr
 800fdee:	469e      	mov	lr, r3
 800fdf0:	462e      	mov	r6, r5
 800fdf2:	4566      	cmp	r6, ip
 800fdf4:	d30e      	bcc.n	800fe14 <__mdiff+0xec>
 800fdf6:	f10c 0203 	add.w	r2, ip, #3
 800fdfa:	1b52      	subs	r2, r2, r5
 800fdfc:	f022 0203 	bic.w	r2, r2, #3
 800fe00:	3d03      	subs	r5, #3
 800fe02:	45ac      	cmp	ip, r5
 800fe04:	bf38      	it	cc
 800fe06:	2200      	movcc	r2, #0
 800fe08:	441a      	add	r2, r3
 800fe0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fe0e:	b17b      	cbz	r3, 800fe30 <__mdiff+0x108>
 800fe10:	6107      	str	r7, [r0, #16]
 800fe12:	e7a3      	b.n	800fd5c <__mdiff+0x34>
 800fe14:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe18:	fa11 f288 	uxtah	r2, r1, r8
 800fe1c:	1414      	asrs	r4, r2, #16
 800fe1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe22:	b292      	uxth	r2, r2
 800fe24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe28:	f84e 2b04 	str.w	r2, [lr], #4
 800fe2c:	1421      	asrs	r1, r4, #16
 800fe2e:	e7e0      	b.n	800fdf2 <__mdiff+0xca>
 800fe30:	3f01      	subs	r7, #1
 800fe32:	e7ea      	b.n	800fe0a <__mdiff+0xe2>
 800fe34:	080112ff 	.word	0x080112ff
 800fe38:	08011310 	.word	0x08011310

0800fe3c <__d2b>:
 800fe3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe40:	4689      	mov	r9, r1
 800fe42:	2101      	movs	r1, #1
 800fe44:	ec57 6b10 	vmov	r6, r7, d0
 800fe48:	4690      	mov	r8, r2
 800fe4a:	f7ff fccf 	bl	800f7ec <_Balloc>
 800fe4e:	4604      	mov	r4, r0
 800fe50:	b930      	cbnz	r0, 800fe60 <__d2b+0x24>
 800fe52:	4602      	mov	r2, r0
 800fe54:	4b25      	ldr	r3, [pc, #148]	; (800feec <__d2b+0xb0>)
 800fe56:	4826      	ldr	r0, [pc, #152]	; (800fef0 <__d2b+0xb4>)
 800fe58:	f240 310a 	movw	r1, #778	; 0x30a
 800fe5c:	f000 f9bc 	bl	80101d8 <__assert_func>
 800fe60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe68:	bb35      	cbnz	r5, 800feb8 <__d2b+0x7c>
 800fe6a:	2e00      	cmp	r6, #0
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	d028      	beq.n	800fec2 <__d2b+0x86>
 800fe70:	4668      	mov	r0, sp
 800fe72:	9600      	str	r6, [sp, #0]
 800fe74:	f7ff fd82 	bl	800f97c <__lo0bits>
 800fe78:	9900      	ldr	r1, [sp, #0]
 800fe7a:	b300      	cbz	r0, 800febe <__d2b+0x82>
 800fe7c:	9a01      	ldr	r2, [sp, #4]
 800fe7e:	f1c0 0320 	rsb	r3, r0, #32
 800fe82:	fa02 f303 	lsl.w	r3, r2, r3
 800fe86:	430b      	orrs	r3, r1
 800fe88:	40c2      	lsrs	r2, r0
 800fe8a:	6163      	str	r3, [r4, #20]
 800fe8c:	9201      	str	r2, [sp, #4]
 800fe8e:	9b01      	ldr	r3, [sp, #4]
 800fe90:	61a3      	str	r3, [r4, #24]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	bf14      	ite	ne
 800fe96:	2202      	movne	r2, #2
 800fe98:	2201      	moveq	r2, #1
 800fe9a:	6122      	str	r2, [r4, #16]
 800fe9c:	b1d5      	cbz	r5, 800fed4 <__d2b+0x98>
 800fe9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fea2:	4405      	add	r5, r0
 800fea4:	f8c9 5000 	str.w	r5, [r9]
 800fea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800feac:	f8c8 0000 	str.w	r0, [r8]
 800feb0:	4620      	mov	r0, r4
 800feb2:	b003      	add	sp, #12
 800feb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800febc:	e7d5      	b.n	800fe6a <__d2b+0x2e>
 800febe:	6161      	str	r1, [r4, #20]
 800fec0:	e7e5      	b.n	800fe8e <__d2b+0x52>
 800fec2:	a801      	add	r0, sp, #4
 800fec4:	f7ff fd5a 	bl	800f97c <__lo0bits>
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	6163      	str	r3, [r4, #20]
 800fecc:	2201      	movs	r2, #1
 800fece:	6122      	str	r2, [r4, #16]
 800fed0:	3020      	adds	r0, #32
 800fed2:	e7e3      	b.n	800fe9c <__d2b+0x60>
 800fed4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fedc:	f8c9 0000 	str.w	r0, [r9]
 800fee0:	6918      	ldr	r0, [r3, #16]
 800fee2:	f7ff fd2b 	bl	800f93c <__hi0bits>
 800fee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800feea:	e7df      	b.n	800feac <__d2b+0x70>
 800feec:	080112ff 	.word	0x080112ff
 800fef0:	08011310 	.word	0x08011310

0800fef4 <_calloc_r>:
 800fef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fef6:	fba1 2402 	umull	r2, r4, r1, r2
 800fefa:	b94c      	cbnz	r4, 800ff10 <_calloc_r+0x1c>
 800fefc:	4611      	mov	r1, r2
 800fefe:	9201      	str	r2, [sp, #4]
 800ff00:	f7fe f8dc 	bl	800e0bc <_malloc_r>
 800ff04:	9a01      	ldr	r2, [sp, #4]
 800ff06:	4605      	mov	r5, r0
 800ff08:	b930      	cbnz	r0, 800ff18 <_calloc_r+0x24>
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	b003      	add	sp, #12
 800ff0e:	bd30      	pop	{r4, r5, pc}
 800ff10:	220c      	movs	r2, #12
 800ff12:	6002      	str	r2, [r0, #0]
 800ff14:	2500      	movs	r5, #0
 800ff16:	e7f8      	b.n	800ff0a <_calloc_r+0x16>
 800ff18:	4621      	mov	r1, r4
 800ff1a:	f7fe f85b 	bl	800dfd4 <memset>
 800ff1e:	e7f4      	b.n	800ff0a <_calloc_r+0x16>

0800ff20 <__ssputs_r>:
 800ff20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff24:	688e      	ldr	r6, [r1, #8]
 800ff26:	429e      	cmp	r6, r3
 800ff28:	4682      	mov	sl, r0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	4690      	mov	r8, r2
 800ff2e:	461f      	mov	r7, r3
 800ff30:	d838      	bhi.n	800ffa4 <__ssputs_r+0x84>
 800ff32:	898a      	ldrh	r2, [r1, #12]
 800ff34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff38:	d032      	beq.n	800ffa0 <__ssputs_r+0x80>
 800ff3a:	6825      	ldr	r5, [r4, #0]
 800ff3c:	6909      	ldr	r1, [r1, #16]
 800ff3e:	eba5 0901 	sub.w	r9, r5, r1
 800ff42:	6965      	ldr	r5, [r4, #20]
 800ff44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	444b      	add	r3, r9
 800ff50:	106d      	asrs	r5, r5, #1
 800ff52:	429d      	cmp	r5, r3
 800ff54:	bf38      	it	cc
 800ff56:	461d      	movcc	r5, r3
 800ff58:	0553      	lsls	r3, r2, #21
 800ff5a:	d531      	bpl.n	800ffc0 <__ssputs_r+0xa0>
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	f7fe f8ad 	bl	800e0bc <_malloc_r>
 800ff62:	4606      	mov	r6, r0
 800ff64:	b950      	cbnz	r0, 800ff7c <__ssputs_r+0x5c>
 800ff66:	230c      	movs	r3, #12
 800ff68:	f8ca 3000 	str.w	r3, [sl]
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7c:	6921      	ldr	r1, [r4, #16]
 800ff7e:	464a      	mov	r2, r9
 800ff80:	f7fe f81a 	bl	800dfb8 <memcpy>
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff8e:	81a3      	strh	r3, [r4, #12]
 800ff90:	6126      	str	r6, [r4, #16]
 800ff92:	6165      	str	r5, [r4, #20]
 800ff94:	444e      	add	r6, r9
 800ff96:	eba5 0509 	sub.w	r5, r5, r9
 800ff9a:	6026      	str	r6, [r4, #0]
 800ff9c:	60a5      	str	r5, [r4, #8]
 800ff9e:	463e      	mov	r6, r7
 800ffa0:	42be      	cmp	r6, r7
 800ffa2:	d900      	bls.n	800ffa6 <__ssputs_r+0x86>
 800ffa4:	463e      	mov	r6, r7
 800ffa6:	6820      	ldr	r0, [r4, #0]
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	4641      	mov	r1, r8
 800ffac:	f000 f959 	bl	8010262 <memmove>
 800ffb0:	68a3      	ldr	r3, [r4, #8]
 800ffb2:	1b9b      	subs	r3, r3, r6
 800ffb4:	60a3      	str	r3, [r4, #8]
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	4433      	add	r3, r6
 800ffba:	6023      	str	r3, [r4, #0]
 800ffbc:	2000      	movs	r0, #0
 800ffbe:	e7db      	b.n	800ff78 <__ssputs_r+0x58>
 800ffc0:	462a      	mov	r2, r5
 800ffc2:	f000 f968 	bl	8010296 <_realloc_r>
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d1e1      	bne.n	800ff90 <__ssputs_r+0x70>
 800ffcc:	6921      	ldr	r1, [r4, #16]
 800ffce:	4650      	mov	r0, sl
 800ffd0:	f7fe f808 	bl	800dfe4 <_free_r>
 800ffd4:	e7c7      	b.n	800ff66 <__ssputs_r+0x46>
	...

0800ffd8 <_svfiprintf_r>:
 800ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	4698      	mov	r8, r3
 800ffde:	898b      	ldrh	r3, [r1, #12]
 800ffe0:	061b      	lsls	r3, r3, #24
 800ffe2:	b09d      	sub	sp, #116	; 0x74
 800ffe4:	4607      	mov	r7, r0
 800ffe6:	460d      	mov	r5, r1
 800ffe8:	4614      	mov	r4, r2
 800ffea:	d50e      	bpl.n	801000a <_svfiprintf_r+0x32>
 800ffec:	690b      	ldr	r3, [r1, #16]
 800ffee:	b963      	cbnz	r3, 801000a <_svfiprintf_r+0x32>
 800fff0:	2140      	movs	r1, #64	; 0x40
 800fff2:	f7fe f863 	bl	800e0bc <_malloc_r>
 800fff6:	6028      	str	r0, [r5, #0]
 800fff8:	6128      	str	r0, [r5, #16]
 800fffa:	b920      	cbnz	r0, 8010006 <_svfiprintf_r+0x2e>
 800fffc:	230c      	movs	r3, #12
 800fffe:	603b      	str	r3, [r7, #0]
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	e0d1      	b.n	80101aa <_svfiprintf_r+0x1d2>
 8010006:	2340      	movs	r3, #64	; 0x40
 8010008:	616b      	str	r3, [r5, #20]
 801000a:	2300      	movs	r3, #0
 801000c:	9309      	str	r3, [sp, #36]	; 0x24
 801000e:	2320      	movs	r3, #32
 8010010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010014:	f8cd 800c 	str.w	r8, [sp, #12]
 8010018:	2330      	movs	r3, #48	; 0x30
 801001a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80101c4 <_svfiprintf_r+0x1ec>
 801001e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010022:	f04f 0901 	mov.w	r9, #1
 8010026:	4623      	mov	r3, r4
 8010028:	469a      	mov	sl, r3
 801002a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801002e:	b10a      	cbz	r2, 8010034 <_svfiprintf_r+0x5c>
 8010030:	2a25      	cmp	r2, #37	; 0x25
 8010032:	d1f9      	bne.n	8010028 <_svfiprintf_r+0x50>
 8010034:	ebba 0b04 	subs.w	fp, sl, r4
 8010038:	d00b      	beq.n	8010052 <_svfiprintf_r+0x7a>
 801003a:	465b      	mov	r3, fp
 801003c:	4622      	mov	r2, r4
 801003e:	4629      	mov	r1, r5
 8010040:	4638      	mov	r0, r7
 8010042:	f7ff ff6d 	bl	800ff20 <__ssputs_r>
 8010046:	3001      	adds	r0, #1
 8010048:	f000 80aa 	beq.w	80101a0 <_svfiprintf_r+0x1c8>
 801004c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801004e:	445a      	add	r2, fp
 8010050:	9209      	str	r2, [sp, #36]	; 0x24
 8010052:	f89a 3000 	ldrb.w	r3, [sl]
 8010056:	2b00      	cmp	r3, #0
 8010058:	f000 80a2 	beq.w	80101a0 <_svfiprintf_r+0x1c8>
 801005c:	2300      	movs	r3, #0
 801005e:	f04f 32ff 	mov.w	r2, #4294967295
 8010062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010066:	f10a 0a01 	add.w	sl, sl, #1
 801006a:	9304      	str	r3, [sp, #16]
 801006c:	9307      	str	r3, [sp, #28]
 801006e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010072:	931a      	str	r3, [sp, #104]	; 0x68
 8010074:	4654      	mov	r4, sl
 8010076:	2205      	movs	r2, #5
 8010078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801007c:	4851      	ldr	r0, [pc, #324]	; (80101c4 <_svfiprintf_r+0x1ec>)
 801007e:	f7f0 f8af 	bl	80001e0 <memchr>
 8010082:	9a04      	ldr	r2, [sp, #16]
 8010084:	b9d8      	cbnz	r0, 80100be <_svfiprintf_r+0xe6>
 8010086:	06d0      	lsls	r0, r2, #27
 8010088:	bf44      	itt	mi
 801008a:	2320      	movmi	r3, #32
 801008c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010090:	0711      	lsls	r1, r2, #28
 8010092:	bf44      	itt	mi
 8010094:	232b      	movmi	r3, #43	; 0x2b
 8010096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801009a:	f89a 3000 	ldrb.w	r3, [sl]
 801009e:	2b2a      	cmp	r3, #42	; 0x2a
 80100a0:	d015      	beq.n	80100ce <_svfiprintf_r+0xf6>
 80100a2:	9a07      	ldr	r2, [sp, #28]
 80100a4:	4654      	mov	r4, sl
 80100a6:	2000      	movs	r0, #0
 80100a8:	f04f 0c0a 	mov.w	ip, #10
 80100ac:	4621      	mov	r1, r4
 80100ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100b2:	3b30      	subs	r3, #48	; 0x30
 80100b4:	2b09      	cmp	r3, #9
 80100b6:	d94e      	bls.n	8010156 <_svfiprintf_r+0x17e>
 80100b8:	b1b0      	cbz	r0, 80100e8 <_svfiprintf_r+0x110>
 80100ba:	9207      	str	r2, [sp, #28]
 80100bc:	e014      	b.n	80100e8 <_svfiprintf_r+0x110>
 80100be:	eba0 0308 	sub.w	r3, r0, r8
 80100c2:	fa09 f303 	lsl.w	r3, r9, r3
 80100c6:	4313      	orrs	r3, r2
 80100c8:	9304      	str	r3, [sp, #16]
 80100ca:	46a2      	mov	sl, r4
 80100cc:	e7d2      	b.n	8010074 <_svfiprintf_r+0x9c>
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	1d19      	adds	r1, r3, #4
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	9103      	str	r1, [sp, #12]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	bfbb      	ittet	lt
 80100da:	425b      	neglt	r3, r3
 80100dc:	f042 0202 	orrlt.w	r2, r2, #2
 80100e0:	9307      	strge	r3, [sp, #28]
 80100e2:	9307      	strlt	r3, [sp, #28]
 80100e4:	bfb8      	it	lt
 80100e6:	9204      	strlt	r2, [sp, #16]
 80100e8:	7823      	ldrb	r3, [r4, #0]
 80100ea:	2b2e      	cmp	r3, #46	; 0x2e
 80100ec:	d10c      	bne.n	8010108 <_svfiprintf_r+0x130>
 80100ee:	7863      	ldrb	r3, [r4, #1]
 80100f0:	2b2a      	cmp	r3, #42	; 0x2a
 80100f2:	d135      	bne.n	8010160 <_svfiprintf_r+0x188>
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	1d1a      	adds	r2, r3, #4
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	9203      	str	r2, [sp, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfb8      	it	lt
 8010100:	f04f 33ff 	movlt.w	r3, #4294967295
 8010104:	3402      	adds	r4, #2
 8010106:	9305      	str	r3, [sp, #20]
 8010108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80101d4 <_svfiprintf_r+0x1fc>
 801010c:	7821      	ldrb	r1, [r4, #0]
 801010e:	2203      	movs	r2, #3
 8010110:	4650      	mov	r0, sl
 8010112:	f7f0 f865 	bl	80001e0 <memchr>
 8010116:	b140      	cbz	r0, 801012a <_svfiprintf_r+0x152>
 8010118:	2340      	movs	r3, #64	; 0x40
 801011a:	eba0 000a 	sub.w	r0, r0, sl
 801011e:	fa03 f000 	lsl.w	r0, r3, r0
 8010122:	9b04      	ldr	r3, [sp, #16]
 8010124:	4303      	orrs	r3, r0
 8010126:	3401      	adds	r4, #1
 8010128:	9304      	str	r3, [sp, #16]
 801012a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801012e:	4826      	ldr	r0, [pc, #152]	; (80101c8 <_svfiprintf_r+0x1f0>)
 8010130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010134:	2206      	movs	r2, #6
 8010136:	f7f0 f853 	bl	80001e0 <memchr>
 801013a:	2800      	cmp	r0, #0
 801013c:	d038      	beq.n	80101b0 <_svfiprintf_r+0x1d8>
 801013e:	4b23      	ldr	r3, [pc, #140]	; (80101cc <_svfiprintf_r+0x1f4>)
 8010140:	bb1b      	cbnz	r3, 801018a <_svfiprintf_r+0x1b2>
 8010142:	9b03      	ldr	r3, [sp, #12]
 8010144:	3307      	adds	r3, #7
 8010146:	f023 0307 	bic.w	r3, r3, #7
 801014a:	3308      	adds	r3, #8
 801014c:	9303      	str	r3, [sp, #12]
 801014e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010150:	4433      	add	r3, r6
 8010152:	9309      	str	r3, [sp, #36]	; 0x24
 8010154:	e767      	b.n	8010026 <_svfiprintf_r+0x4e>
 8010156:	fb0c 3202 	mla	r2, ip, r2, r3
 801015a:	460c      	mov	r4, r1
 801015c:	2001      	movs	r0, #1
 801015e:	e7a5      	b.n	80100ac <_svfiprintf_r+0xd4>
 8010160:	2300      	movs	r3, #0
 8010162:	3401      	adds	r4, #1
 8010164:	9305      	str	r3, [sp, #20]
 8010166:	4619      	mov	r1, r3
 8010168:	f04f 0c0a 	mov.w	ip, #10
 801016c:	4620      	mov	r0, r4
 801016e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010172:	3a30      	subs	r2, #48	; 0x30
 8010174:	2a09      	cmp	r2, #9
 8010176:	d903      	bls.n	8010180 <_svfiprintf_r+0x1a8>
 8010178:	2b00      	cmp	r3, #0
 801017a:	d0c5      	beq.n	8010108 <_svfiprintf_r+0x130>
 801017c:	9105      	str	r1, [sp, #20]
 801017e:	e7c3      	b.n	8010108 <_svfiprintf_r+0x130>
 8010180:	fb0c 2101 	mla	r1, ip, r1, r2
 8010184:	4604      	mov	r4, r0
 8010186:	2301      	movs	r3, #1
 8010188:	e7f0      	b.n	801016c <_svfiprintf_r+0x194>
 801018a:	ab03      	add	r3, sp, #12
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	462a      	mov	r2, r5
 8010190:	4b0f      	ldr	r3, [pc, #60]	; (80101d0 <_svfiprintf_r+0x1f8>)
 8010192:	a904      	add	r1, sp, #16
 8010194:	4638      	mov	r0, r7
 8010196:	f7fe f8a5 	bl	800e2e4 <_printf_float>
 801019a:	1c42      	adds	r2, r0, #1
 801019c:	4606      	mov	r6, r0
 801019e:	d1d6      	bne.n	801014e <_svfiprintf_r+0x176>
 80101a0:	89ab      	ldrh	r3, [r5, #12]
 80101a2:	065b      	lsls	r3, r3, #25
 80101a4:	f53f af2c 	bmi.w	8010000 <_svfiprintf_r+0x28>
 80101a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101aa:	b01d      	add	sp, #116	; 0x74
 80101ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b0:	ab03      	add	r3, sp, #12
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	462a      	mov	r2, r5
 80101b6:	4b06      	ldr	r3, [pc, #24]	; (80101d0 <_svfiprintf_r+0x1f8>)
 80101b8:	a904      	add	r1, sp, #16
 80101ba:	4638      	mov	r0, r7
 80101bc:	f7fe fb36 	bl	800e82c <_printf_i>
 80101c0:	e7eb      	b.n	801019a <_svfiprintf_r+0x1c2>
 80101c2:	bf00      	nop
 80101c4:	0801146c 	.word	0x0801146c
 80101c8:	08011476 	.word	0x08011476
 80101cc:	0800e2e5 	.word	0x0800e2e5
 80101d0:	0800ff21 	.word	0x0800ff21
 80101d4:	08011472 	.word	0x08011472

080101d8 <__assert_func>:
 80101d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101da:	4614      	mov	r4, r2
 80101dc:	461a      	mov	r2, r3
 80101de:	4b09      	ldr	r3, [pc, #36]	; (8010204 <__assert_func+0x2c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4605      	mov	r5, r0
 80101e4:	68d8      	ldr	r0, [r3, #12]
 80101e6:	b14c      	cbz	r4, 80101fc <__assert_func+0x24>
 80101e8:	4b07      	ldr	r3, [pc, #28]	; (8010208 <__assert_func+0x30>)
 80101ea:	9100      	str	r1, [sp, #0]
 80101ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101f0:	4906      	ldr	r1, [pc, #24]	; (801020c <__assert_func+0x34>)
 80101f2:	462b      	mov	r3, r5
 80101f4:	f000 f80e 	bl	8010214 <fiprintf>
 80101f8:	f000 faa4 	bl	8010744 <abort>
 80101fc:	4b04      	ldr	r3, [pc, #16]	; (8010210 <__assert_func+0x38>)
 80101fe:	461c      	mov	r4, r3
 8010200:	e7f3      	b.n	80101ea <__assert_func+0x12>
 8010202:	bf00      	nop
 8010204:	20000328 	.word	0x20000328
 8010208:	0801147d 	.word	0x0801147d
 801020c:	0801148a 	.word	0x0801148a
 8010210:	080114b8 	.word	0x080114b8

08010214 <fiprintf>:
 8010214:	b40e      	push	{r1, r2, r3}
 8010216:	b503      	push	{r0, r1, lr}
 8010218:	4601      	mov	r1, r0
 801021a:	ab03      	add	r3, sp, #12
 801021c:	4805      	ldr	r0, [pc, #20]	; (8010234 <fiprintf+0x20>)
 801021e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010222:	6800      	ldr	r0, [r0, #0]
 8010224:	9301      	str	r3, [sp, #4]
 8010226:	f000 f88f 	bl	8010348 <_vfiprintf_r>
 801022a:	b002      	add	sp, #8
 801022c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010230:	b003      	add	sp, #12
 8010232:	4770      	bx	lr
 8010234:	20000328 	.word	0x20000328

08010238 <__retarget_lock_init_recursive>:
 8010238:	4770      	bx	lr

0801023a <__retarget_lock_acquire_recursive>:
 801023a:	4770      	bx	lr

0801023c <__retarget_lock_release_recursive>:
 801023c:	4770      	bx	lr

0801023e <__ascii_mbtowc>:
 801023e:	b082      	sub	sp, #8
 8010240:	b901      	cbnz	r1, 8010244 <__ascii_mbtowc+0x6>
 8010242:	a901      	add	r1, sp, #4
 8010244:	b142      	cbz	r2, 8010258 <__ascii_mbtowc+0x1a>
 8010246:	b14b      	cbz	r3, 801025c <__ascii_mbtowc+0x1e>
 8010248:	7813      	ldrb	r3, [r2, #0]
 801024a:	600b      	str	r3, [r1, #0]
 801024c:	7812      	ldrb	r2, [r2, #0]
 801024e:	1e10      	subs	r0, r2, #0
 8010250:	bf18      	it	ne
 8010252:	2001      	movne	r0, #1
 8010254:	b002      	add	sp, #8
 8010256:	4770      	bx	lr
 8010258:	4610      	mov	r0, r2
 801025a:	e7fb      	b.n	8010254 <__ascii_mbtowc+0x16>
 801025c:	f06f 0001 	mvn.w	r0, #1
 8010260:	e7f8      	b.n	8010254 <__ascii_mbtowc+0x16>

08010262 <memmove>:
 8010262:	4288      	cmp	r0, r1
 8010264:	b510      	push	{r4, lr}
 8010266:	eb01 0402 	add.w	r4, r1, r2
 801026a:	d902      	bls.n	8010272 <memmove+0x10>
 801026c:	4284      	cmp	r4, r0
 801026e:	4623      	mov	r3, r4
 8010270:	d807      	bhi.n	8010282 <memmove+0x20>
 8010272:	1e43      	subs	r3, r0, #1
 8010274:	42a1      	cmp	r1, r4
 8010276:	d008      	beq.n	801028a <memmove+0x28>
 8010278:	f811 2b01 	ldrb.w	r2, [r1], #1
 801027c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010280:	e7f8      	b.n	8010274 <memmove+0x12>
 8010282:	4402      	add	r2, r0
 8010284:	4601      	mov	r1, r0
 8010286:	428a      	cmp	r2, r1
 8010288:	d100      	bne.n	801028c <memmove+0x2a>
 801028a:	bd10      	pop	{r4, pc}
 801028c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010290:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010294:	e7f7      	b.n	8010286 <memmove+0x24>

08010296 <_realloc_r>:
 8010296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	4680      	mov	r8, r0
 801029c:	4614      	mov	r4, r2
 801029e:	460e      	mov	r6, r1
 80102a0:	b921      	cbnz	r1, 80102ac <_realloc_r+0x16>
 80102a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102a6:	4611      	mov	r1, r2
 80102a8:	f7fd bf08 	b.w	800e0bc <_malloc_r>
 80102ac:	b92a      	cbnz	r2, 80102ba <_realloc_r+0x24>
 80102ae:	f7fd fe99 	bl	800dfe4 <_free_r>
 80102b2:	4625      	mov	r5, r4
 80102b4:	4628      	mov	r0, r5
 80102b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ba:	f000 fc67 	bl	8010b8c <_malloc_usable_size_r>
 80102be:	4284      	cmp	r4, r0
 80102c0:	4607      	mov	r7, r0
 80102c2:	d802      	bhi.n	80102ca <_realloc_r+0x34>
 80102c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102c8:	d812      	bhi.n	80102f0 <_realloc_r+0x5a>
 80102ca:	4621      	mov	r1, r4
 80102cc:	4640      	mov	r0, r8
 80102ce:	f7fd fef5 	bl	800e0bc <_malloc_r>
 80102d2:	4605      	mov	r5, r0
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d0ed      	beq.n	80102b4 <_realloc_r+0x1e>
 80102d8:	42bc      	cmp	r4, r7
 80102da:	4622      	mov	r2, r4
 80102dc:	4631      	mov	r1, r6
 80102de:	bf28      	it	cs
 80102e0:	463a      	movcs	r2, r7
 80102e2:	f7fd fe69 	bl	800dfb8 <memcpy>
 80102e6:	4631      	mov	r1, r6
 80102e8:	4640      	mov	r0, r8
 80102ea:	f7fd fe7b 	bl	800dfe4 <_free_r>
 80102ee:	e7e1      	b.n	80102b4 <_realloc_r+0x1e>
 80102f0:	4635      	mov	r5, r6
 80102f2:	e7df      	b.n	80102b4 <_realloc_r+0x1e>

080102f4 <__sfputc_r>:
 80102f4:	6893      	ldr	r3, [r2, #8]
 80102f6:	3b01      	subs	r3, #1
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	b410      	push	{r4}
 80102fc:	6093      	str	r3, [r2, #8]
 80102fe:	da08      	bge.n	8010312 <__sfputc_r+0x1e>
 8010300:	6994      	ldr	r4, [r2, #24]
 8010302:	42a3      	cmp	r3, r4
 8010304:	db01      	blt.n	801030a <__sfputc_r+0x16>
 8010306:	290a      	cmp	r1, #10
 8010308:	d103      	bne.n	8010312 <__sfputc_r+0x1e>
 801030a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801030e:	f000 b94b 	b.w	80105a8 <__swbuf_r>
 8010312:	6813      	ldr	r3, [r2, #0]
 8010314:	1c58      	adds	r0, r3, #1
 8010316:	6010      	str	r0, [r2, #0]
 8010318:	7019      	strb	r1, [r3, #0]
 801031a:	4608      	mov	r0, r1
 801031c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010320:	4770      	bx	lr

08010322 <__sfputs_r>:
 8010322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010324:	4606      	mov	r6, r0
 8010326:	460f      	mov	r7, r1
 8010328:	4614      	mov	r4, r2
 801032a:	18d5      	adds	r5, r2, r3
 801032c:	42ac      	cmp	r4, r5
 801032e:	d101      	bne.n	8010334 <__sfputs_r+0x12>
 8010330:	2000      	movs	r0, #0
 8010332:	e007      	b.n	8010344 <__sfputs_r+0x22>
 8010334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010338:	463a      	mov	r2, r7
 801033a:	4630      	mov	r0, r6
 801033c:	f7ff ffda 	bl	80102f4 <__sfputc_r>
 8010340:	1c43      	adds	r3, r0, #1
 8010342:	d1f3      	bne.n	801032c <__sfputs_r+0xa>
 8010344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010348 <_vfiprintf_r>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	460d      	mov	r5, r1
 801034e:	b09d      	sub	sp, #116	; 0x74
 8010350:	4614      	mov	r4, r2
 8010352:	4698      	mov	r8, r3
 8010354:	4606      	mov	r6, r0
 8010356:	b118      	cbz	r0, 8010360 <_vfiprintf_r+0x18>
 8010358:	6983      	ldr	r3, [r0, #24]
 801035a:	b90b      	cbnz	r3, 8010360 <_vfiprintf_r+0x18>
 801035c:	f000 fb14 	bl	8010988 <__sinit>
 8010360:	4b89      	ldr	r3, [pc, #548]	; (8010588 <_vfiprintf_r+0x240>)
 8010362:	429d      	cmp	r5, r3
 8010364:	d11b      	bne.n	801039e <_vfiprintf_r+0x56>
 8010366:	6875      	ldr	r5, [r6, #4]
 8010368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801036a:	07d9      	lsls	r1, r3, #31
 801036c:	d405      	bmi.n	801037a <_vfiprintf_r+0x32>
 801036e:	89ab      	ldrh	r3, [r5, #12]
 8010370:	059a      	lsls	r2, r3, #22
 8010372:	d402      	bmi.n	801037a <_vfiprintf_r+0x32>
 8010374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010376:	f7ff ff60 	bl	801023a <__retarget_lock_acquire_recursive>
 801037a:	89ab      	ldrh	r3, [r5, #12]
 801037c:	071b      	lsls	r3, r3, #28
 801037e:	d501      	bpl.n	8010384 <_vfiprintf_r+0x3c>
 8010380:	692b      	ldr	r3, [r5, #16]
 8010382:	b9eb      	cbnz	r3, 80103c0 <_vfiprintf_r+0x78>
 8010384:	4629      	mov	r1, r5
 8010386:	4630      	mov	r0, r6
 8010388:	f000 f96e 	bl	8010668 <__swsetup_r>
 801038c:	b1c0      	cbz	r0, 80103c0 <_vfiprintf_r+0x78>
 801038e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010390:	07dc      	lsls	r4, r3, #31
 8010392:	d50e      	bpl.n	80103b2 <_vfiprintf_r+0x6a>
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	b01d      	add	sp, #116	; 0x74
 801039a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039e:	4b7b      	ldr	r3, [pc, #492]	; (801058c <_vfiprintf_r+0x244>)
 80103a0:	429d      	cmp	r5, r3
 80103a2:	d101      	bne.n	80103a8 <_vfiprintf_r+0x60>
 80103a4:	68b5      	ldr	r5, [r6, #8]
 80103a6:	e7df      	b.n	8010368 <_vfiprintf_r+0x20>
 80103a8:	4b79      	ldr	r3, [pc, #484]	; (8010590 <_vfiprintf_r+0x248>)
 80103aa:	429d      	cmp	r5, r3
 80103ac:	bf08      	it	eq
 80103ae:	68f5      	ldreq	r5, [r6, #12]
 80103b0:	e7da      	b.n	8010368 <_vfiprintf_r+0x20>
 80103b2:	89ab      	ldrh	r3, [r5, #12]
 80103b4:	0598      	lsls	r0, r3, #22
 80103b6:	d4ed      	bmi.n	8010394 <_vfiprintf_r+0x4c>
 80103b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ba:	f7ff ff3f 	bl	801023c <__retarget_lock_release_recursive>
 80103be:	e7e9      	b.n	8010394 <_vfiprintf_r+0x4c>
 80103c0:	2300      	movs	r3, #0
 80103c2:	9309      	str	r3, [sp, #36]	; 0x24
 80103c4:	2320      	movs	r3, #32
 80103c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80103ce:	2330      	movs	r3, #48	; 0x30
 80103d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010594 <_vfiprintf_r+0x24c>
 80103d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103d8:	f04f 0901 	mov.w	r9, #1
 80103dc:	4623      	mov	r3, r4
 80103de:	469a      	mov	sl, r3
 80103e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e4:	b10a      	cbz	r2, 80103ea <_vfiprintf_r+0xa2>
 80103e6:	2a25      	cmp	r2, #37	; 0x25
 80103e8:	d1f9      	bne.n	80103de <_vfiprintf_r+0x96>
 80103ea:	ebba 0b04 	subs.w	fp, sl, r4
 80103ee:	d00b      	beq.n	8010408 <_vfiprintf_r+0xc0>
 80103f0:	465b      	mov	r3, fp
 80103f2:	4622      	mov	r2, r4
 80103f4:	4629      	mov	r1, r5
 80103f6:	4630      	mov	r0, r6
 80103f8:	f7ff ff93 	bl	8010322 <__sfputs_r>
 80103fc:	3001      	adds	r0, #1
 80103fe:	f000 80aa 	beq.w	8010556 <_vfiprintf_r+0x20e>
 8010402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010404:	445a      	add	r2, fp
 8010406:	9209      	str	r2, [sp, #36]	; 0x24
 8010408:	f89a 3000 	ldrb.w	r3, [sl]
 801040c:	2b00      	cmp	r3, #0
 801040e:	f000 80a2 	beq.w	8010556 <_vfiprintf_r+0x20e>
 8010412:	2300      	movs	r3, #0
 8010414:	f04f 32ff 	mov.w	r2, #4294967295
 8010418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801041c:	f10a 0a01 	add.w	sl, sl, #1
 8010420:	9304      	str	r3, [sp, #16]
 8010422:	9307      	str	r3, [sp, #28]
 8010424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010428:	931a      	str	r3, [sp, #104]	; 0x68
 801042a:	4654      	mov	r4, sl
 801042c:	2205      	movs	r2, #5
 801042e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010432:	4858      	ldr	r0, [pc, #352]	; (8010594 <_vfiprintf_r+0x24c>)
 8010434:	f7ef fed4 	bl	80001e0 <memchr>
 8010438:	9a04      	ldr	r2, [sp, #16]
 801043a:	b9d8      	cbnz	r0, 8010474 <_vfiprintf_r+0x12c>
 801043c:	06d1      	lsls	r1, r2, #27
 801043e:	bf44      	itt	mi
 8010440:	2320      	movmi	r3, #32
 8010442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010446:	0713      	lsls	r3, r2, #28
 8010448:	bf44      	itt	mi
 801044a:	232b      	movmi	r3, #43	; 0x2b
 801044c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010450:	f89a 3000 	ldrb.w	r3, [sl]
 8010454:	2b2a      	cmp	r3, #42	; 0x2a
 8010456:	d015      	beq.n	8010484 <_vfiprintf_r+0x13c>
 8010458:	9a07      	ldr	r2, [sp, #28]
 801045a:	4654      	mov	r4, sl
 801045c:	2000      	movs	r0, #0
 801045e:	f04f 0c0a 	mov.w	ip, #10
 8010462:	4621      	mov	r1, r4
 8010464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010468:	3b30      	subs	r3, #48	; 0x30
 801046a:	2b09      	cmp	r3, #9
 801046c:	d94e      	bls.n	801050c <_vfiprintf_r+0x1c4>
 801046e:	b1b0      	cbz	r0, 801049e <_vfiprintf_r+0x156>
 8010470:	9207      	str	r2, [sp, #28]
 8010472:	e014      	b.n	801049e <_vfiprintf_r+0x156>
 8010474:	eba0 0308 	sub.w	r3, r0, r8
 8010478:	fa09 f303 	lsl.w	r3, r9, r3
 801047c:	4313      	orrs	r3, r2
 801047e:	9304      	str	r3, [sp, #16]
 8010480:	46a2      	mov	sl, r4
 8010482:	e7d2      	b.n	801042a <_vfiprintf_r+0xe2>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	1d19      	adds	r1, r3, #4
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	9103      	str	r1, [sp, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	bfbb      	ittet	lt
 8010490:	425b      	neglt	r3, r3
 8010492:	f042 0202 	orrlt.w	r2, r2, #2
 8010496:	9307      	strge	r3, [sp, #28]
 8010498:	9307      	strlt	r3, [sp, #28]
 801049a:	bfb8      	it	lt
 801049c:	9204      	strlt	r2, [sp, #16]
 801049e:	7823      	ldrb	r3, [r4, #0]
 80104a0:	2b2e      	cmp	r3, #46	; 0x2e
 80104a2:	d10c      	bne.n	80104be <_vfiprintf_r+0x176>
 80104a4:	7863      	ldrb	r3, [r4, #1]
 80104a6:	2b2a      	cmp	r3, #42	; 0x2a
 80104a8:	d135      	bne.n	8010516 <_vfiprintf_r+0x1ce>
 80104aa:	9b03      	ldr	r3, [sp, #12]
 80104ac:	1d1a      	adds	r2, r3, #4
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	9203      	str	r2, [sp, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	bfb8      	it	lt
 80104b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80104ba:	3402      	adds	r4, #2
 80104bc:	9305      	str	r3, [sp, #20]
 80104be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105a4 <_vfiprintf_r+0x25c>
 80104c2:	7821      	ldrb	r1, [r4, #0]
 80104c4:	2203      	movs	r2, #3
 80104c6:	4650      	mov	r0, sl
 80104c8:	f7ef fe8a 	bl	80001e0 <memchr>
 80104cc:	b140      	cbz	r0, 80104e0 <_vfiprintf_r+0x198>
 80104ce:	2340      	movs	r3, #64	; 0x40
 80104d0:	eba0 000a 	sub.w	r0, r0, sl
 80104d4:	fa03 f000 	lsl.w	r0, r3, r0
 80104d8:	9b04      	ldr	r3, [sp, #16]
 80104da:	4303      	orrs	r3, r0
 80104dc:	3401      	adds	r4, #1
 80104de:	9304      	str	r3, [sp, #16]
 80104e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e4:	482c      	ldr	r0, [pc, #176]	; (8010598 <_vfiprintf_r+0x250>)
 80104e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104ea:	2206      	movs	r2, #6
 80104ec:	f7ef fe78 	bl	80001e0 <memchr>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d03f      	beq.n	8010574 <_vfiprintf_r+0x22c>
 80104f4:	4b29      	ldr	r3, [pc, #164]	; (801059c <_vfiprintf_r+0x254>)
 80104f6:	bb1b      	cbnz	r3, 8010540 <_vfiprintf_r+0x1f8>
 80104f8:	9b03      	ldr	r3, [sp, #12]
 80104fa:	3307      	adds	r3, #7
 80104fc:	f023 0307 	bic.w	r3, r3, #7
 8010500:	3308      	adds	r3, #8
 8010502:	9303      	str	r3, [sp, #12]
 8010504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010506:	443b      	add	r3, r7
 8010508:	9309      	str	r3, [sp, #36]	; 0x24
 801050a:	e767      	b.n	80103dc <_vfiprintf_r+0x94>
 801050c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010510:	460c      	mov	r4, r1
 8010512:	2001      	movs	r0, #1
 8010514:	e7a5      	b.n	8010462 <_vfiprintf_r+0x11a>
 8010516:	2300      	movs	r3, #0
 8010518:	3401      	adds	r4, #1
 801051a:	9305      	str	r3, [sp, #20]
 801051c:	4619      	mov	r1, r3
 801051e:	f04f 0c0a 	mov.w	ip, #10
 8010522:	4620      	mov	r0, r4
 8010524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010528:	3a30      	subs	r2, #48	; 0x30
 801052a:	2a09      	cmp	r2, #9
 801052c:	d903      	bls.n	8010536 <_vfiprintf_r+0x1ee>
 801052e:	2b00      	cmp	r3, #0
 8010530:	d0c5      	beq.n	80104be <_vfiprintf_r+0x176>
 8010532:	9105      	str	r1, [sp, #20]
 8010534:	e7c3      	b.n	80104be <_vfiprintf_r+0x176>
 8010536:	fb0c 2101 	mla	r1, ip, r1, r2
 801053a:	4604      	mov	r4, r0
 801053c:	2301      	movs	r3, #1
 801053e:	e7f0      	b.n	8010522 <_vfiprintf_r+0x1da>
 8010540:	ab03      	add	r3, sp, #12
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	462a      	mov	r2, r5
 8010546:	4b16      	ldr	r3, [pc, #88]	; (80105a0 <_vfiprintf_r+0x258>)
 8010548:	a904      	add	r1, sp, #16
 801054a:	4630      	mov	r0, r6
 801054c:	f7fd feca 	bl	800e2e4 <_printf_float>
 8010550:	4607      	mov	r7, r0
 8010552:	1c78      	adds	r0, r7, #1
 8010554:	d1d6      	bne.n	8010504 <_vfiprintf_r+0x1bc>
 8010556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010558:	07d9      	lsls	r1, r3, #31
 801055a:	d405      	bmi.n	8010568 <_vfiprintf_r+0x220>
 801055c:	89ab      	ldrh	r3, [r5, #12]
 801055e:	059a      	lsls	r2, r3, #22
 8010560:	d402      	bmi.n	8010568 <_vfiprintf_r+0x220>
 8010562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010564:	f7ff fe6a 	bl	801023c <__retarget_lock_release_recursive>
 8010568:	89ab      	ldrh	r3, [r5, #12]
 801056a:	065b      	lsls	r3, r3, #25
 801056c:	f53f af12 	bmi.w	8010394 <_vfiprintf_r+0x4c>
 8010570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010572:	e711      	b.n	8010398 <_vfiprintf_r+0x50>
 8010574:	ab03      	add	r3, sp, #12
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	462a      	mov	r2, r5
 801057a:	4b09      	ldr	r3, [pc, #36]	; (80105a0 <_vfiprintf_r+0x258>)
 801057c:	a904      	add	r1, sp, #16
 801057e:	4630      	mov	r0, r6
 8010580:	f7fe f954 	bl	800e82c <_printf_i>
 8010584:	e7e4      	b.n	8010550 <_vfiprintf_r+0x208>
 8010586:	bf00      	nop
 8010588:	080115e4 	.word	0x080115e4
 801058c:	08011604 	.word	0x08011604
 8010590:	080115c4 	.word	0x080115c4
 8010594:	0801146c 	.word	0x0801146c
 8010598:	08011476 	.word	0x08011476
 801059c:	0800e2e5 	.word	0x0800e2e5
 80105a0:	08010323 	.word	0x08010323
 80105a4:	08011472 	.word	0x08011472

080105a8 <__swbuf_r>:
 80105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105aa:	460e      	mov	r6, r1
 80105ac:	4614      	mov	r4, r2
 80105ae:	4605      	mov	r5, r0
 80105b0:	b118      	cbz	r0, 80105ba <__swbuf_r+0x12>
 80105b2:	6983      	ldr	r3, [r0, #24]
 80105b4:	b90b      	cbnz	r3, 80105ba <__swbuf_r+0x12>
 80105b6:	f000 f9e7 	bl	8010988 <__sinit>
 80105ba:	4b21      	ldr	r3, [pc, #132]	; (8010640 <__swbuf_r+0x98>)
 80105bc:	429c      	cmp	r4, r3
 80105be:	d12b      	bne.n	8010618 <__swbuf_r+0x70>
 80105c0:	686c      	ldr	r4, [r5, #4]
 80105c2:	69a3      	ldr	r3, [r4, #24]
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	071a      	lsls	r2, r3, #28
 80105ca:	d52f      	bpl.n	801062c <__swbuf_r+0x84>
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	b36b      	cbz	r3, 801062c <__swbuf_r+0x84>
 80105d0:	6923      	ldr	r3, [r4, #16]
 80105d2:	6820      	ldr	r0, [r4, #0]
 80105d4:	1ac0      	subs	r0, r0, r3
 80105d6:	6963      	ldr	r3, [r4, #20]
 80105d8:	b2f6      	uxtb	r6, r6
 80105da:	4283      	cmp	r3, r0
 80105dc:	4637      	mov	r7, r6
 80105de:	dc04      	bgt.n	80105ea <__swbuf_r+0x42>
 80105e0:	4621      	mov	r1, r4
 80105e2:	4628      	mov	r0, r5
 80105e4:	f000 f93c 	bl	8010860 <_fflush_r>
 80105e8:	bb30      	cbnz	r0, 8010638 <__swbuf_r+0x90>
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	3b01      	subs	r3, #1
 80105ee:	60a3      	str	r3, [r4, #8]
 80105f0:	6823      	ldr	r3, [r4, #0]
 80105f2:	1c5a      	adds	r2, r3, #1
 80105f4:	6022      	str	r2, [r4, #0]
 80105f6:	701e      	strb	r6, [r3, #0]
 80105f8:	6963      	ldr	r3, [r4, #20]
 80105fa:	3001      	adds	r0, #1
 80105fc:	4283      	cmp	r3, r0
 80105fe:	d004      	beq.n	801060a <__swbuf_r+0x62>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	07db      	lsls	r3, r3, #31
 8010604:	d506      	bpl.n	8010614 <__swbuf_r+0x6c>
 8010606:	2e0a      	cmp	r6, #10
 8010608:	d104      	bne.n	8010614 <__swbuf_r+0x6c>
 801060a:	4621      	mov	r1, r4
 801060c:	4628      	mov	r0, r5
 801060e:	f000 f927 	bl	8010860 <_fflush_r>
 8010612:	b988      	cbnz	r0, 8010638 <__swbuf_r+0x90>
 8010614:	4638      	mov	r0, r7
 8010616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010618:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <__swbuf_r+0x9c>)
 801061a:	429c      	cmp	r4, r3
 801061c:	d101      	bne.n	8010622 <__swbuf_r+0x7a>
 801061e:	68ac      	ldr	r4, [r5, #8]
 8010620:	e7cf      	b.n	80105c2 <__swbuf_r+0x1a>
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <__swbuf_r+0xa0>)
 8010624:	429c      	cmp	r4, r3
 8010626:	bf08      	it	eq
 8010628:	68ec      	ldreq	r4, [r5, #12]
 801062a:	e7ca      	b.n	80105c2 <__swbuf_r+0x1a>
 801062c:	4621      	mov	r1, r4
 801062e:	4628      	mov	r0, r5
 8010630:	f000 f81a 	bl	8010668 <__swsetup_r>
 8010634:	2800      	cmp	r0, #0
 8010636:	d0cb      	beq.n	80105d0 <__swbuf_r+0x28>
 8010638:	f04f 37ff 	mov.w	r7, #4294967295
 801063c:	e7ea      	b.n	8010614 <__swbuf_r+0x6c>
 801063e:	bf00      	nop
 8010640:	080115e4 	.word	0x080115e4
 8010644:	08011604 	.word	0x08011604
 8010648:	080115c4 	.word	0x080115c4

0801064c <__ascii_wctomb>:
 801064c:	b149      	cbz	r1, 8010662 <__ascii_wctomb+0x16>
 801064e:	2aff      	cmp	r2, #255	; 0xff
 8010650:	bf85      	ittet	hi
 8010652:	238a      	movhi	r3, #138	; 0x8a
 8010654:	6003      	strhi	r3, [r0, #0]
 8010656:	700a      	strbls	r2, [r1, #0]
 8010658:	f04f 30ff 	movhi.w	r0, #4294967295
 801065c:	bf98      	it	ls
 801065e:	2001      	movls	r0, #1
 8010660:	4770      	bx	lr
 8010662:	4608      	mov	r0, r1
 8010664:	4770      	bx	lr
	...

08010668 <__swsetup_r>:
 8010668:	4b32      	ldr	r3, [pc, #200]	; (8010734 <__swsetup_r+0xcc>)
 801066a:	b570      	push	{r4, r5, r6, lr}
 801066c:	681d      	ldr	r5, [r3, #0]
 801066e:	4606      	mov	r6, r0
 8010670:	460c      	mov	r4, r1
 8010672:	b125      	cbz	r5, 801067e <__swsetup_r+0x16>
 8010674:	69ab      	ldr	r3, [r5, #24]
 8010676:	b913      	cbnz	r3, 801067e <__swsetup_r+0x16>
 8010678:	4628      	mov	r0, r5
 801067a:	f000 f985 	bl	8010988 <__sinit>
 801067e:	4b2e      	ldr	r3, [pc, #184]	; (8010738 <__swsetup_r+0xd0>)
 8010680:	429c      	cmp	r4, r3
 8010682:	d10f      	bne.n	80106a4 <__swsetup_r+0x3c>
 8010684:	686c      	ldr	r4, [r5, #4]
 8010686:	89a3      	ldrh	r3, [r4, #12]
 8010688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801068c:	0719      	lsls	r1, r3, #28
 801068e:	d42c      	bmi.n	80106ea <__swsetup_r+0x82>
 8010690:	06dd      	lsls	r5, r3, #27
 8010692:	d411      	bmi.n	80106b8 <__swsetup_r+0x50>
 8010694:	2309      	movs	r3, #9
 8010696:	6033      	str	r3, [r6, #0]
 8010698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801069c:	81a3      	strh	r3, [r4, #12]
 801069e:	f04f 30ff 	mov.w	r0, #4294967295
 80106a2:	e03e      	b.n	8010722 <__swsetup_r+0xba>
 80106a4:	4b25      	ldr	r3, [pc, #148]	; (801073c <__swsetup_r+0xd4>)
 80106a6:	429c      	cmp	r4, r3
 80106a8:	d101      	bne.n	80106ae <__swsetup_r+0x46>
 80106aa:	68ac      	ldr	r4, [r5, #8]
 80106ac:	e7eb      	b.n	8010686 <__swsetup_r+0x1e>
 80106ae:	4b24      	ldr	r3, [pc, #144]	; (8010740 <__swsetup_r+0xd8>)
 80106b0:	429c      	cmp	r4, r3
 80106b2:	bf08      	it	eq
 80106b4:	68ec      	ldreq	r4, [r5, #12]
 80106b6:	e7e6      	b.n	8010686 <__swsetup_r+0x1e>
 80106b8:	0758      	lsls	r0, r3, #29
 80106ba:	d512      	bpl.n	80106e2 <__swsetup_r+0x7a>
 80106bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106be:	b141      	cbz	r1, 80106d2 <__swsetup_r+0x6a>
 80106c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106c4:	4299      	cmp	r1, r3
 80106c6:	d002      	beq.n	80106ce <__swsetup_r+0x66>
 80106c8:	4630      	mov	r0, r6
 80106ca:	f7fd fc8b 	bl	800dfe4 <_free_r>
 80106ce:	2300      	movs	r3, #0
 80106d0:	6363      	str	r3, [r4, #52]	; 0x34
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106d8:	81a3      	strh	r3, [r4, #12]
 80106da:	2300      	movs	r3, #0
 80106dc:	6063      	str	r3, [r4, #4]
 80106de:	6923      	ldr	r3, [r4, #16]
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	f043 0308 	orr.w	r3, r3, #8
 80106e8:	81a3      	strh	r3, [r4, #12]
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	b94b      	cbnz	r3, 8010702 <__swsetup_r+0x9a>
 80106ee:	89a3      	ldrh	r3, [r4, #12]
 80106f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106f8:	d003      	beq.n	8010702 <__swsetup_r+0x9a>
 80106fa:	4621      	mov	r1, r4
 80106fc:	4630      	mov	r0, r6
 80106fe:	f000 fa05 	bl	8010b0c <__smakebuf_r>
 8010702:	89a0      	ldrh	r0, [r4, #12]
 8010704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010708:	f010 0301 	ands.w	r3, r0, #1
 801070c:	d00a      	beq.n	8010724 <__swsetup_r+0xbc>
 801070e:	2300      	movs	r3, #0
 8010710:	60a3      	str	r3, [r4, #8]
 8010712:	6963      	ldr	r3, [r4, #20]
 8010714:	425b      	negs	r3, r3
 8010716:	61a3      	str	r3, [r4, #24]
 8010718:	6923      	ldr	r3, [r4, #16]
 801071a:	b943      	cbnz	r3, 801072e <__swsetup_r+0xc6>
 801071c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010720:	d1ba      	bne.n	8010698 <__swsetup_r+0x30>
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	0781      	lsls	r1, r0, #30
 8010726:	bf58      	it	pl
 8010728:	6963      	ldrpl	r3, [r4, #20]
 801072a:	60a3      	str	r3, [r4, #8]
 801072c:	e7f4      	b.n	8010718 <__swsetup_r+0xb0>
 801072e:	2000      	movs	r0, #0
 8010730:	e7f7      	b.n	8010722 <__swsetup_r+0xba>
 8010732:	bf00      	nop
 8010734:	20000328 	.word	0x20000328
 8010738:	080115e4 	.word	0x080115e4
 801073c:	08011604 	.word	0x08011604
 8010740:	080115c4 	.word	0x080115c4

08010744 <abort>:
 8010744:	b508      	push	{r3, lr}
 8010746:	2006      	movs	r0, #6
 8010748:	f000 fa50 	bl	8010bec <raise>
 801074c:	2001      	movs	r0, #1
 801074e:	f7f4 fdaa 	bl	80052a6 <_exit>
	...

08010754 <__sflush_r>:
 8010754:	898a      	ldrh	r2, [r1, #12]
 8010756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075a:	4605      	mov	r5, r0
 801075c:	0710      	lsls	r0, r2, #28
 801075e:	460c      	mov	r4, r1
 8010760:	d458      	bmi.n	8010814 <__sflush_r+0xc0>
 8010762:	684b      	ldr	r3, [r1, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	dc05      	bgt.n	8010774 <__sflush_r+0x20>
 8010768:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801076a:	2b00      	cmp	r3, #0
 801076c:	dc02      	bgt.n	8010774 <__sflush_r+0x20>
 801076e:	2000      	movs	r0, #0
 8010770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010776:	2e00      	cmp	r6, #0
 8010778:	d0f9      	beq.n	801076e <__sflush_r+0x1a>
 801077a:	2300      	movs	r3, #0
 801077c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010780:	682f      	ldr	r7, [r5, #0]
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	d032      	beq.n	80107ec <__sflush_r+0x98>
 8010786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	075a      	lsls	r2, r3, #29
 801078c:	d505      	bpl.n	801079a <__sflush_r+0x46>
 801078e:	6863      	ldr	r3, [r4, #4]
 8010790:	1ac0      	subs	r0, r0, r3
 8010792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010794:	b10b      	cbz	r3, 801079a <__sflush_r+0x46>
 8010796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010798:	1ac0      	subs	r0, r0, r3
 801079a:	2300      	movs	r3, #0
 801079c:	4602      	mov	r2, r0
 801079e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107a0:	6a21      	ldr	r1, [r4, #32]
 80107a2:	4628      	mov	r0, r5
 80107a4:	47b0      	blx	r6
 80107a6:	1c43      	adds	r3, r0, #1
 80107a8:	89a3      	ldrh	r3, [r4, #12]
 80107aa:	d106      	bne.n	80107ba <__sflush_r+0x66>
 80107ac:	6829      	ldr	r1, [r5, #0]
 80107ae:	291d      	cmp	r1, #29
 80107b0:	d82c      	bhi.n	801080c <__sflush_r+0xb8>
 80107b2:	4a2a      	ldr	r2, [pc, #168]	; (801085c <__sflush_r+0x108>)
 80107b4:	40ca      	lsrs	r2, r1
 80107b6:	07d6      	lsls	r6, r2, #31
 80107b8:	d528      	bpl.n	801080c <__sflush_r+0xb8>
 80107ba:	2200      	movs	r2, #0
 80107bc:	6062      	str	r2, [r4, #4]
 80107be:	04d9      	lsls	r1, r3, #19
 80107c0:	6922      	ldr	r2, [r4, #16]
 80107c2:	6022      	str	r2, [r4, #0]
 80107c4:	d504      	bpl.n	80107d0 <__sflush_r+0x7c>
 80107c6:	1c42      	adds	r2, r0, #1
 80107c8:	d101      	bne.n	80107ce <__sflush_r+0x7a>
 80107ca:	682b      	ldr	r3, [r5, #0]
 80107cc:	b903      	cbnz	r3, 80107d0 <__sflush_r+0x7c>
 80107ce:	6560      	str	r0, [r4, #84]	; 0x54
 80107d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107d2:	602f      	str	r7, [r5, #0]
 80107d4:	2900      	cmp	r1, #0
 80107d6:	d0ca      	beq.n	801076e <__sflush_r+0x1a>
 80107d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107dc:	4299      	cmp	r1, r3
 80107de:	d002      	beq.n	80107e6 <__sflush_r+0x92>
 80107e0:	4628      	mov	r0, r5
 80107e2:	f7fd fbff 	bl	800dfe4 <_free_r>
 80107e6:	2000      	movs	r0, #0
 80107e8:	6360      	str	r0, [r4, #52]	; 0x34
 80107ea:	e7c1      	b.n	8010770 <__sflush_r+0x1c>
 80107ec:	6a21      	ldr	r1, [r4, #32]
 80107ee:	2301      	movs	r3, #1
 80107f0:	4628      	mov	r0, r5
 80107f2:	47b0      	blx	r6
 80107f4:	1c41      	adds	r1, r0, #1
 80107f6:	d1c7      	bne.n	8010788 <__sflush_r+0x34>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d0c4      	beq.n	8010788 <__sflush_r+0x34>
 80107fe:	2b1d      	cmp	r3, #29
 8010800:	d001      	beq.n	8010806 <__sflush_r+0xb2>
 8010802:	2b16      	cmp	r3, #22
 8010804:	d101      	bne.n	801080a <__sflush_r+0xb6>
 8010806:	602f      	str	r7, [r5, #0]
 8010808:	e7b1      	b.n	801076e <__sflush_r+0x1a>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010810:	81a3      	strh	r3, [r4, #12]
 8010812:	e7ad      	b.n	8010770 <__sflush_r+0x1c>
 8010814:	690f      	ldr	r7, [r1, #16]
 8010816:	2f00      	cmp	r7, #0
 8010818:	d0a9      	beq.n	801076e <__sflush_r+0x1a>
 801081a:	0793      	lsls	r3, r2, #30
 801081c:	680e      	ldr	r6, [r1, #0]
 801081e:	bf08      	it	eq
 8010820:	694b      	ldreq	r3, [r1, #20]
 8010822:	600f      	str	r7, [r1, #0]
 8010824:	bf18      	it	ne
 8010826:	2300      	movne	r3, #0
 8010828:	eba6 0807 	sub.w	r8, r6, r7
 801082c:	608b      	str	r3, [r1, #8]
 801082e:	f1b8 0f00 	cmp.w	r8, #0
 8010832:	dd9c      	ble.n	801076e <__sflush_r+0x1a>
 8010834:	6a21      	ldr	r1, [r4, #32]
 8010836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010838:	4643      	mov	r3, r8
 801083a:	463a      	mov	r2, r7
 801083c:	4628      	mov	r0, r5
 801083e:	47b0      	blx	r6
 8010840:	2800      	cmp	r0, #0
 8010842:	dc06      	bgt.n	8010852 <__sflush_r+0xfe>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801084a:	81a3      	strh	r3, [r4, #12]
 801084c:	f04f 30ff 	mov.w	r0, #4294967295
 8010850:	e78e      	b.n	8010770 <__sflush_r+0x1c>
 8010852:	4407      	add	r7, r0
 8010854:	eba8 0800 	sub.w	r8, r8, r0
 8010858:	e7e9      	b.n	801082e <__sflush_r+0xda>
 801085a:	bf00      	nop
 801085c:	20400001 	.word	0x20400001

08010860 <_fflush_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	690b      	ldr	r3, [r1, #16]
 8010864:	4605      	mov	r5, r0
 8010866:	460c      	mov	r4, r1
 8010868:	b913      	cbnz	r3, 8010870 <_fflush_r+0x10>
 801086a:	2500      	movs	r5, #0
 801086c:	4628      	mov	r0, r5
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	b118      	cbz	r0, 801087a <_fflush_r+0x1a>
 8010872:	6983      	ldr	r3, [r0, #24]
 8010874:	b90b      	cbnz	r3, 801087a <_fflush_r+0x1a>
 8010876:	f000 f887 	bl	8010988 <__sinit>
 801087a:	4b14      	ldr	r3, [pc, #80]	; (80108cc <_fflush_r+0x6c>)
 801087c:	429c      	cmp	r4, r3
 801087e:	d11b      	bne.n	80108b8 <_fflush_r+0x58>
 8010880:	686c      	ldr	r4, [r5, #4]
 8010882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0ef      	beq.n	801086a <_fflush_r+0xa>
 801088a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801088c:	07d0      	lsls	r0, r2, #31
 801088e:	d404      	bmi.n	801089a <_fflush_r+0x3a>
 8010890:	0599      	lsls	r1, r3, #22
 8010892:	d402      	bmi.n	801089a <_fflush_r+0x3a>
 8010894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010896:	f7ff fcd0 	bl	801023a <__retarget_lock_acquire_recursive>
 801089a:	4628      	mov	r0, r5
 801089c:	4621      	mov	r1, r4
 801089e:	f7ff ff59 	bl	8010754 <__sflush_r>
 80108a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108a4:	07da      	lsls	r2, r3, #31
 80108a6:	4605      	mov	r5, r0
 80108a8:	d4e0      	bmi.n	801086c <_fflush_r+0xc>
 80108aa:	89a3      	ldrh	r3, [r4, #12]
 80108ac:	059b      	lsls	r3, r3, #22
 80108ae:	d4dd      	bmi.n	801086c <_fflush_r+0xc>
 80108b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108b2:	f7ff fcc3 	bl	801023c <__retarget_lock_release_recursive>
 80108b6:	e7d9      	b.n	801086c <_fflush_r+0xc>
 80108b8:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <_fflush_r+0x70>)
 80108ba:	429c      	cmp	r4, r3
 80108bc:	d101      	bne.n	80108c2 <_fflush_r+0x62>
 80108be:	68ac      	ldr	r4, [r5, #8]
 80108c0:	e7df      	b.n	8010882 <_fflush_r+0x22>
 80108c2:	4b04      	ldr	r3, [pc, #16]	; (80108d4 <_fflush_r+0x74>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	bf08      	it	eq
 80108c8:	68ec      	ldreq	r4, [r5, #12]
 80108ca:	e7da      	b.n	8010882 <_fflush_r+0x22>
 80108cc:	080115e4 	.word	0x080115e4
 80108d0:	08011604 	.word	0x08011604
 80108d4:	080115c4 	.word	0x080115c4

080108d8 <std>:
 80108d8:	2300      	movs	r3, #0
 80108da:	b510      	push	{r4, lr}
 80108dc:	4604      	mov	r4, r0
 80108de:	e9c0 3300 	strd	r3, r3, [r0]
 80108e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108e6:	6083      	str	r3, [r0, #8]
 80108e8:	8181      	strh	r1, [r0, #12]
 80108ea:	6643      	str	r3, [r0, #100]	; 0x64
 80108ec:	81c2      	strh	r2, [r0, #14]
 80108ee:	6183      	str	r3, [r0, #24]
 80108f0:	4619      	mov	r1, r3
 80108f2:	2208      	movs	r2, #8
 80108f4:	305c      	adds	r0, #92	; 0x5c
 80108f6:	f7fd fb6d 	bl	800dfd4 <memset>
 80108fa:	4b05      	ldr	r3, [pc, #20]	; (8010910 <std+0x38>)
 80108fc:	6263      	str	r3, [r4, #36]	; 0x24
 80108fe:	4b05      	ldr	r3, [pc, #20]	; (8010914 <std+0x3c>)
 8010900:	62a3      	str	r3, [r4, #40]	; 0x28
 8010902:	4b05      	ldr	r3, [pc, #20]	; (8010918 <std+0x40>)
 8010904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <std+0x44>)
 8010908:	6224      	str	r4, [r4, #32]
 801090a:	6323      	str	r3, [r4, #48]	; 0x30
 801090c:	bd10      	pop	{r4, pc}
 801090e:	bf00      	nop
 8010910:	08010c25 	.word	0x08010c25
 8010914:	08010c47 	.word	0x08010c47
 8010918:	08010c7f 	.word	0x08010c7f
 801091c:	08010ca3 	.word	0x08010ca3

08010920 <_cleanup_r>:
 8010920:	4901      	ldr	r1, [pc, #4]	; (8010928 <_cleanup_r+0x8>)
 8010922:	f000 b8af 	b.w	8010a84 <_fwalk_reent>
 8010926:	bf00      	nop
 8010928:	08010861 	.word	0x08010861

0801092c <__sfmoreglue>:
 801092c:	b570      	push	{r4, r5, r6, lr}
 801092e:	2268      	movs	r2, #104	; 0x68
 8010930:	1e4d      	subs	r5, r1, #1
 8010932:	4355      	muls	r5, r2
 8010934:	460e      	mov	r6, r1
 8010936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801093a:	f7fd fbbf 	bl	800e0bc <_malloc_r>
 801093e:	4604      	mov	r4, r0
 8010940:	b140      	cbz	r0, 8010954 <__sfmoreglue+0x28>
 8010942:	2100      	movs	r1, #0
 8010944:	e9c0 1600 	strd	r1, r6, [r0]
 8010948:	300c      	adds	r0, #12
 801094a:	60a0      	str	r0, [r4, #8]
 801094c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010950:	f7fd fb40 	bl	800dfd4 <memset>
 8010954:	4620      	mov	r0, r4
 8010956:	bd70      	pop	{r4, r5, r6, pc}

08010958 <__sfp_lock_acquire>:
 8010958:	4801      	ldr	r0, [pc, #4]	; (8010960 <__sfp_lock_acquire+0x8>)
 801095a:	f7ff bc6e 	b.w	801023a <__retarget_lock_acquire_recursive>
 801095e:	bf00      	nop
 8010960:	20001525 	.word	0x20001525

08010964 <__sfp_lock_release>:
 8010964:	4801      	ldr	r0, [pc, #4]	; (801096c <__sfp_lock_release+0x8>)
 8010966:	f7ff bc69 	b.w	801023c <__retarget_lock_release_recursive>
 801096a:	bf00      	nop
 801096c:	20001525 	.word	0x20001525

08010970 <__sinit_lock_acquire>:
 8010970:	4801      	ldr	r0, [pc, #4]	; (8010978 <__sinit_lock_acquire+0x8>)
 8010972:	f7ff bc62 	b.w	801023a <__retarget_lock_acquire_recursive>
 8010976:	bf00      	nop
 8010978:	20001526 	.word	0x20001526

0801097c <__sinit_lock_release>:
 801097c:	4801      	ldr	r0, [pc, #4]	; (8010984 <__sinit_lock_release+0x8>)
 801097e:	f7ff bc5d 	b.w	801023c <__retarget_lock_release_recursive>
 8010982:	bf00      	nop
 8010984:	20001526 	.word	0x20001526

08010988 <__sinit>:
 8010988:	b510      	push	{r4, lr}
 801098a:	4604      	mov	r4, r0
 801098c:	f7ff fff0 	bl	8010970 <__sinit_lock_acquire>
 8010990:	69a3      	ldr	r3, [r4, #24]
 8010992:	b11b      	cbz	r3, 801099c <__sinit+0x14>
 8010994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010998:	f7ff bff0 	b.w	801097c <__sinit_lock_release>
 801099c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109a0:	6523      	str	r3, [r4, #80]	; 0x50
 80109a2:	4b13      	ldr	r3, [pc, #76]	; (80109f0 <__sinit+0x68>)
 80109a4:	4a13      	ldr	r2, [pc, #76]	; (80109f4 <__sinit+0x6c>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80109aa:	42a3      	cmp	r3, r4
 80109ac:	bf04      	itt	eq
 80109ae:	2301      	moveq	r3, #1
 80109b0:	61a3      	streq	r3, [r4, #24]
 80109b2:	4620      	mov	r0, r4
 80109b4:	f000 f820 	bl	80109f8 <__sfp>
 80109b8:	6060      	str	r0, [r4, #4]
 80109ba:	4620      	mov	r0, r4
 80109bc:	f000 f81c 	bl	80109f8 <__sfp>
 80109c0:	60a0      	str	r0, [r4, #8]
 80109c2:	4620      	mov	r0, r4
 80109c4:	f000 f818 	bl	80109f8 <__sfp>
 80109c8:	2200      	movs	r2, #0
 80109ca:	60e0      	str	r0, [r4, #12]
 80109cc:	2104      	movs	r1, #4
 80109ce:	6860      	ldr	r0, [r4, #4]
 80109d0:	f7ff ff82 	bl	80108d8 <std>
 80109d4:	68a0      	ldr	r0, [r4, #8]
 80109d6:	2201      	movs	r2, #1
 80109d8:	2109      	movs	r1, #9
 80109da:	f7ff ff7d 	bl	80108d8 <std>
 80109de:	68e0      	ldr	r0, [r4, #12]
 80109e0:	2202      	movs	r2, #2
 80109e2:	2112      	movs	r1, #18
 80109e4:	f7ff ff78 	bl	80108d8 <std>
 80109e8:	2301      	movs	r3, #1
 80109ea:	61a3      	str	r3, [r4, #24]
 80109ec:	e7d2      	b.n	8010994 <__sinit+0xc>
 80109ee:	bf00      	nop
 80109f0:	08011248 	.word	0x08011248
 80109f4:	08010921 	.word	0x08010921

080109f8 <__sfp>:
 80109f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fa:	4607      	mov	r7, r0
 80109fc:	f7ff ffac 	bl	8010958 <__sfp_lock_acquire>
 8010a00:	4b1e      	ldr	r3, [pc, #120]	; (8010a7c <__sfp+0x84>)
 8010a02:	681e      	ldr	r6, [r3, #0]
 8010a04:	69b3      	ldr	r3, [r6, #24]
 8010a06:	b913      	cbnz	r3, 8010a0e <__sfp+0x16>
 8010a08:	4630      	mov	r0, r6
 8010a0a:	f7ff ffbd 	bl	8010988 <__sinit>
 8010a0e:	3648      	adds	r6, #72	; 0x48
 8010a10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	d503      	bpl.n	8010a20 <__sfp+0x28>
 8010a18:	6833      	ldr	r3, [r6, #0]
 8010a1a:	b30b      	cbz	r3, 8010a60 <__sfp+0x68>
 8010a1c:	6836      	ldr	r6, [r6, #0]
 8010a1e:	e7f7      	b.n	8010a10 <__sfp+0x18>
 8010a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a24:	b9d5      	cbnz	r5, 8010a5c <__sfp+0x64>
 8010a26:	4b16      	ldr	r3, [pc, #88]	; (8010a80 <__sfp+0x88>)
 8010a28:	60e3      	str	r3, [r4, #12]
 8010a2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a2e:	6665      	str	r5, [r4, #100]	; 0x64
 8010a30:	f7ff fc02 	bl	8010238 <__retarget_lock_init_recursive>
 8010a34:	f7ff ff96 	bl	8010964 <__sfp_lock_release>
 8010a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a40:	6025      	str	r5, [r4, #0]
 8010a42:	61a5      	str	r5, [r4, #24]
 8010a44:	2208      	movs	r2, #8
 8010a46:	4629      	mov	r1, r5
 8010a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a4c:	f7fd fac2 	bl	800dfd4 <memset>
 8010a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a58:	4620      	mov	r0, r4
 8010a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a5c:	3468      	adds	r4, #104	; 0x68
 8010a5e:	e7d9      	b.n	8010a14 <__sfp+0x1c>
 8010a60:	2104      	movs	r1, #4
 8010a62:	4638      	mov	r0, r7
 8010a64:	f7ff ff62 	bl	801092c <__sfmoreglue>
 8010a68:	4604      	mov	r4, r0
 8010a6a:	6030      	str	r0, [r6, #0]
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d1d5      	bne.n	8010a1c <__sfp+0x24>
 8010a70:	f7ff ff78 	bl	8010964 <__sfp_lock_release>
 8010a74:	230c      	movs	r3, #12
 8010a76:	603b      	str	r3, [r7, #0]
 8010a78:	e7ee      	b.n	8010a58 <__sfp+0x60>
 8010a7a:	bf00      	nop
 8010a7c:	08011248 	.word	0x08011248
 8010a80:	ffff0001 	.word	0xffff0001

08010a84 <_fwalk_reent>:
 8010a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a88:	4606      	mov	r6, r0
 8010a8a:	4688      	mov	r8, r1
 8010a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a90:	2700      	movs	r7, #0
 8010a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a96:	f1b9 0901 	subs.w	r9, r9, #1
 8010a9a:	d505      	bpl.n	8010aa8 <_fwalk_reent+0x24>
 8010a9c:	6824      	ldr	r4, [r4, #0]
 8010a9e:	2c00      	cmp	r4, #0
 8010aa0:	d1f7      	bne.n	8010a92 <_fwalk_reent+0xe>
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa8:	89ab      	ldrh	r3, [r5, #12]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d907      	bls.n	8010abe <_fwalk_reent+0x3a>
 8010aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	d003      	beq.n	8010abe <_fwalk_reent+0x3a>
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4630      	mov	r0, r6
 8010aba:	47c0      	blx	r8
 8010abc:	4307      	orrs	r7, r0
 8010abe:	3568      	adds	r5, #104	; 0x68
 8010ac0:	e7e9      	b.n	8010a96 <_fwalk_reent+0x12>

08010ac2 <__swhatbuf_r>:
 8010ac2:	b570      	push	{r4, r5, r6, lr}
 8010ac4:	460e      	mov	r6, r1
 8010ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aca:	2900      	cmp	r1, #0
 8010acc:	b096      	sub	sp, #88	; 0x58
 8010ace:	4614      	mov	r4, r2
 8010ad0:	461d      	mov	r5, r3
 8010ad2:	da08      	bge.n	8010ae6 <__swhatbuf_r+0x24>
 8010ad4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	602a      	str	r2, [r5, #0]
 8010adc:	061a      	lsls	r2, r3, #24
 8010ade:	d410      	bmi.n	8010b02 <__swhatbuf_r+0x40>
 8010ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ae4:	e00e      	b.n	8010b04 <__swhatbuf_r+0x42>
 8010ae6:	466a      	mov	r2, sp
 8010ae8:	f000 f902 	bl	8010cf0 <_fstat_r>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	dbf1      	blt.n	8010ad4 <__swhatbuf_r+0x12>
 8010af0:	9a01      	ldr	r2, [sp, #4]
 8010af2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010af6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010afa:	425a      	negs	r2, r3
 8010afc:	415a      	adcs	r2, r3
 8010afe:	602a      	str	r2, [r5, #0]
 8010b00:	e7ee      	b.n	8010ae0 <__swhatbuf_r+0x1e>
 8010b02:	2340      	movs	r3, #64	; 0x40
 8010b04:	2000      	movs	r0, #0
 8010b06:	6023      	str	r3, [r4, #0]
 8010b08:	b016      	add	sp, #88	; 0x58
 8010b0a:	bd70      	pop	{r4, r5, r6, pc}

08010b0c <__smakebuf_r>:
 8010b0c:	898b      	ldrh	r3, [r1, #12]
 8010b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b10:	079d      	lsls	r5, r3, #30
 8010b12:	4606      	mov	r6, r0
 8010b14:	460c      	mov	r4, r1
 8010b16:	d507      	bpl.n	8010b28 <__smakebuf_r+0x1c>
 8010b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b1c:	6023      	str	r3, [r4, #0]
 8010b1e:	6123      	str	r3, [r4, #16]
 8010b20:	2301      	movs	r3, #1
 8010b22:	6163      	str	r3, [r4, #20]
 8010b24:	b002      	add	sp, #8
 8010b26:	bd70      	pop	{r4, r5, r6, pc}
 8010b28:	ab01      	add	r3, sp, #4
 8010b2a:	466a      	mov	r2, sp
 8010b2c:	f7ff ffc9 	bl	8010ac2 <__swhatbuf_r>
 8010b30:	9900      	ldr	r1, [sp, #0]
 8010b32:	4605      	mov	r5, r0
 8010b34:	4630      	mov	r0, r6
 8010b36:	f7fd fac1 	bl	800e0bc <_malloc_r>
 8010b3a:	b948      	cbnz	r0, 8010b50 <__smakebuf_r+0x44>
 8010b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b40:	059a      	lsls	r2, r3, #22
 8010b42:	d4ef      	bmi.n	8010b24 <__smakebuf_r+0x18>
 8010b44:	f023 0303 	bic.w	r3, r3, #3
 8010b48:	f043 0302 	orr.w	r3, r3, #2
 8010b4c:	81a3      	strh	r3, [r4, #12]
 8010b4e:	e7e3      	b.n	8010b18 <__smakebuf_r+0xc>
 8010b50:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <__smakebuf_r+0x7c>)
 8010b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	6020      	str	r0, [r4, #0]
 8010b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b5c:	81a3      	strh	r3, [r4, #12]
 8010b5e:	9b00      	ldr	r3, [sp, #0]
 8010b60:	6163      	str	r3, [r4, #20]
 8010b62:	9b01      	ldr	r3, [sp, #4]
 8010b64:	6120      	str	r0, [r4, #16]
 8010b66:	b15b      	cbz	r3, 8010b80 <__smakebuf_r+0x74>
 8010b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f000 f8d1 	bl	8010d14 <_isatty_r>
 8010b72:	b128      	cbz	r0, 8010b80 <__smakebuf_r+0x74>
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	f023 0303 	bic.w	r3, r3, #3
 8010b7a:	f043 0301 	orr.w	r3, r3, #1
 8010b7e:	81a3      	strh	r3, [r4, #12]
 8010b80:	89a0      	ldrh	r0, [r4, #12]
 8010b82:	4305      	orrs	r5, r0
 8010b84:	81a5      	strh	r5, [r4, #12]
 8010b86:	e7cd      	b.n	8010b24 <__smakebuf_r+0x18>
 8010b88:	08010921 	.word	0x08010921

08010b8c <_malloc_usable_size_r>:
 8010b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b90:	1f18      	subs	r0, r3, #4
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	bfbc      	itt	lt
 8010b96:	580b      	ldrlt	r3, [r1, r0]
 8010b98:	18c0      	addlt	r0, r0, r3
 8010b9a:	4770      	bx	lr

08010b9c <_raise_r>:
 8010b9c:	291f      	cmp	r1, #31
 8010b9e:	b538      	push	{r3, r4, r5, lr}
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	460d      	mov	r5, r1
 8010ba4:	d904      	bls.n	8010bb0 <_raise_r+0x14>
 8010ba6:	2316      	movs	r3, #22
 8010ba8:	6003      	str	r3, [r0, #0]
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010bb2:	b112      	cbz	r2, 8010bba <_raise_r+0x1e>
 8010bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bb8:	b94b      	cbnz	r3, 8010bce <_raise_r+0x32>
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 f830 	bl	8010c20 <_getpid_r>
 8010bc0:	462a      	mov	r2, r5
 8010bc2:	4601      	mov	r1, r0
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bca:	f000 b817 	b.w	8010bfc <_kill_r>
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d00a      	beq.n	8010be8 <_raise_r+0x4c>
 8010bd2:	1c59      	adds	r1, r3, #1
 8010bd4:	d103      	bne.n	8010bde <_raise_r+0x42>
 8010bd6:	2316      	movs	r3, #22
 8010bd8:	6003      	str	r3, [r0, #0]
 8010bda:	2001      	movs	r0, #1
 8010bdc:	e7e7      	b.n	8010bae <_raise_r+0x12>
 8010bde:	2400      	movs	r4, #0
 8010be0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010be4:	4628      	mov	r0, r5
 8010be6:	4798      	blx	r3
 8010be8:	2000      	movs	r0, #0
 8010bea:	e7e0      	b.n	8010bae <_raise_r+0x12>

08010bec <raise>:
 8010bec:	4b02      	ldr	r3, [pc, #8]	; (8010bf8 <raise+0xc>)
 8010bee:	4601      	mov	r1, r0
 8010bf0:	6818      	ldr	r0, [r3, #0]
 8010bf2:	f7ff bfd3 	b.w	8010b9c <_raise_r>
 8010bf6:	bf00      	nop
 8010bf8:	20000328 	.word	0x20000328

08010bfc <_kill_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	4d07      	ldr	r5, [pc, #28]	; (8010c1c <_kill_r+0x20>)
 8010c00:	2300      	movs	r3, #0
 8010c02:	4604      	mov	r4, r0
 8010c04:	4608      	mov	r0, r1
 8010c06:	4611      	mov	r1, r2
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	f7f4 fb3c 	bl	8005286 <_kill>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	d102      	bne.n	8010c18 <_kill_r+0x1c>
 8010c12:	682b      	ldr	r3, [r5, #0]
 8010c14:	b103      	cbz	r3, 8010c18 <_kill_r+0x1c>
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	bd38      	pop	{r3, r4, r5, pc}
 8010c1a:	bf00      	nop
 8010c1c:	20001520 	.word	0x20001520

08010c20 <_getpid_r>:
 8010c20:	f7f4 bb29 	b.w	8005276 <_getpid>

08010c24 <__sread>:
 8010c24:	b510      	push	{r4, lr}
 8010c26:	460c      	mov	r4, r1
 8010c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c2c:	f000 f894 	bl	8010d58 <_read_r>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	bfab      	itete	ge
 8010c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c36:	89a3      	ldrhlt	r3, [r4, #12]
 8010c38:	181b      	addge	r3, r3, r0
 8010c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c3e:	bfac      	ite	ge
 8010c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c42:	81a3      	strhlt	r3, [r4, #12]
 8010c44:	bd10      	pop	{r4, pc}

08010c46 <__swrite>:
 8010c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4a:	461f      	mov	r7, r3
 8010c4c:	898b      	ldrh	r3, [r1, #12]
 8010c4e:	05db      	lsls	r3, r3, #23
 8010c50:	4605      	mov	r5, r0
 8010c52:	460c      	mov	r4, r1
 8010c54:	4616      	mov	r6, r2
 8010c56:	d505      	bpl.n	8010c64 <__swrite+0x1e>
 8010c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c5c:	2302      	movs	r3, #2
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f000 f868 	bl	8010d34 <_lseek_r>
 8010c64:	89a3      	ldrh	r3, [r4, #12]
 8010c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	4632      	mov	r2, r6
 8010c72:	463b      	mov	r3, r7
 8010c74:	4628      	mov	r0, r5
 8010c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7a:	f000 b817 	b.w	8010cac <_write_r>

08010c7e <__sseek>:
 8010c7e:	b510      	push	{r4, lr}
 8010c80:	460c      	mov	r4, r1
 8010c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c86:	f000 f855 	bl	8010d34 <_lseek_r>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	89a3      	ldrh	r3, [r4, #12]
 8010c8e:	bf15      	itete	ne
 8010c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c9a:	81a3      	strheq	r3, [r4, #12]
 8010c9c:	bf18      	it	ne
 8010c9e:	81a3      	strhne	r3, [r4, #12]
 8010ca0:	bd10      	pop	{r4, pc}

08010ca2 <__sclose>:
 8010ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ca6:	f000 b813 	b.w	8010cd0 <_close_r>
	...

08010cac <_write_r>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	4d07      	ldr	r5, [pc, #28]	; (8010ccc <_write_r+0x20>)
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	4608      	mov	r0, r1
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	602a      	str	r2, [r5, #0]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	f7f4 fb1a 	bl	80052f4 <_write>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d102      	bne.n	8010cca <_write_r+0x1e>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	b103      	cbz	r3, 8010cca <_write_r+0x1e>
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	20001520 	.word	0x20001520

08010cd0 <_close_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4d06      	ldr	r5, [pc, #24]	; (8010cec <_close_r+0x1c>)
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
 8010cda:	602b      	str	r3, [r5, #0]
 8010cdc:	f7f4 fb26 	bl	800532c <_close>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_close_r+0x1a>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_close_r+0x1a>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	20001520 	.word	0x20001520

08010cf0 <_fstat_r>:
 8010cf0:	b538      	push	{r3, r4, r5, lr}
 8010cf2:	4d07      	ldr	r5, [pc, #28]	; (8010d10 <_fstat_r+0x20>)
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	f7f4 fb21 	bl	8005344 <_fstat>
 8010d02:	1c43      	adds	r3, r0, #1
 8010d04:	d102      	bne.n	8010d0c <_fstat_r+0x1c>
 8010d06:	682b      	ldr	r3, [r5, #0]
 8010d08:	b103      	cbz	r3, 8010d0c <_fstat_r+0x1c>
 8010d0a:	6023      	str	r3, [r4, #0]
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop
 8010d10:	20001520 	.word	0x20001520

08010d14 <_isatty_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	4d06      	ldr	r5, [pc, #24]	; (8010d30 <_isatty_r+0x1c>)
 8010d18:	2300      	movs	r3, #0
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	4608      	mov	r0, r1
 8010d1e:	602b      	str	r3, [r5, #0]
 8010d20:	f7f4 fb20 	bl	8005364 <_isatty>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d102      	bne.n	8010d2e <_isatty_r+0x1a>
 8010d28:	682b      	ldr	r3, [r5, #0]
 8010d2a:	b103      	cbz	r3, 8010d2e <_isatty_r+0x1a>
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	bd38      	pop	{r3, r4, r5, pc}
 8010d30:	20001520 	.word	0x20001520

08010d34 <_lseek_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4d07      	ldr	r5, [pc, #28]	; (8010d54 <_lseek_r+0x20>)
 8010d38:	4604      	mov	r4, r0
 8010d3a:	4608      	mov	r0, r1
 8010d3c:	4611      	mov	r1, r2
 8010d3e:	2200      	movs	r2, #0
 8010d40:	602a      	str	r2, [r5, #0]
 8010d42:	461a      	mov	r2, r3
 8010d44:	f7f4 fb19 	bl	800537a <_lseek>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	d102      	bne.n	8010d52 <_lseek_r+0x1e>
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	b103      	cbz	r3, 8010d52 <_lseek_r+0x1e>
 8010d50:	6023      	str	r3, [r4, #0]
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	20001520 	.word	0x20001520

08010d58 <_read_r>:
 8010d58:	b538      	push	{r3, r4, r5, lr}
 8010d5a:	4d07      	ldr	r5, [pc, #28]	; (8010d78 <_read_r+0x20>)
 8010d5c:	4604      	mov	r4, r0
 8010d5e:	4608      	mov	r0, r1
 8010d60:	4611      	mov	r1, r2
 8010d62:	2200      	movs	r2, #0
 8010d64:	602a      	str	r2, [r5, #0]
 8010d66:	461a      	mov	r2, r3
 8010d68:	f7f4 faa7 	bl	80052ba <_read>
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	d102      	bne.n	8010d76 <_read_r+0x1e>
 8010d70:	682b      	ldr	r3, [r5, #0]
 8010d72:	b103      	cbz	r3, 8010d76 <_read_r+0x1e>
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	20001520 	.word	0x20001520

08010d7c <_init>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	bf00      	nop
 8010d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d82:	bc08      	pop	{r3}
 8010d84:	469e      	mov	lr, r3
 8010d86:	4770      	bx	lr

08010d88 <_fini>:
 8010d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8a:	bf00      	nop
 8010d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d8e:	bc08      	pop	{r3}
 8010d90:	469e      	mov	lr, r3
 8010d92:	4770      	bx	lr
