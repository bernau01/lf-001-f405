
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08011fc0  08011fc0  00021fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012830  08012830  000304f4  2**0
                  CONTENTS
  4 .ARM          00000008  08012830  08012830  00022830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012838  08012838  000304f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012838  08012838  00022838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801283c  0801283c  0002283c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f4  20000000  08012840  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304f4  2**0
                  CONTENTS
 10 .bss          0000119c  200004f4  200004f4  000304f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001690  20001690  000304f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030524  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e1af  00000000  00000000  00030567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004dfd  00000000  00000000  0004e716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00053518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001476  00000000  00000000  00054f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00041831  00000000  00000000  000563ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025189  00000000  00000000  00097bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001317b9  00000000  00000000  000bcd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008144  00000000  00000000  001ee544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001f6688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f4 	.word	0x200004f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011fa4 	.word	0x08011fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	08011fa4 	.word	0x08011fa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000f98:	4a7e      	ldr	r2, [pc, #504]	; (8001194 <MX_ADC1_Init+0x210>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f9c:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa8:	4b79      	ldr	r3, [pc, #484]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbc:	4b74      	ldr	r3, [pc, #464]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fc4:	4a74      	ldr	r2, [pc, #464]	; (8001198 <MX_ADC1_Init+0x214>)
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b71      	ldr	r3, [pc, #452]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fce:	4b70      	ldr	r3, [pc, #448]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe2:	486b      	ldr	r0, [pc, #428]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fe4:	f008 feda 	bl	8009d9c <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f001 f9a0 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4863      	ldr	r0, [pc, #396]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001004:	f009 f94c 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100e:	f001 f990 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001012:	230a      	movs	r3, #10
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	485c      	ldr	r0, [pc, #368]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001020:	f009 f93e 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102a:	f001 f982 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800102e:	230e      	movs	r3, #14
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001032:	2303      	movs	r3, #3
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4855      	ldr	r0, [pc, #340]	; (8001190 <MX_ADC1_Init+0x20c>)
 800103c:	f009 f930 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001046:	f001 f974 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800104a:	230b      	movs	r3, #11
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	484e      	ldr	r0, [pc, #312]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001058:	f009 f922 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001062:	f001 f966 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001066:	2307      	movs	r3, #7
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800106a:	2305      	movs	r3, #5
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4847      	ldr	r0, [pc, #284]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001074:	f009 f914 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107e:	f001 f958 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001082:	230c      	movs	r3, #12
 8001084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001086:	2306      	movs	r3, #6
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001090:	f009 f906 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800109a:	f001 f94a 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800109e:	2306      	movs	r3, #6
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4838      	ldr	r0, [pc, #224]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010b0:	f009 f8f6 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010ba:	f001 f93a 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010be:	230d      	movs	r3, #13
 80010c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010c2:	2308      	movs	r3, #8
 80010c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4830      	ldr	r0, [pc, #192]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010d0:	f009 f8e6 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010da:	f001 f92a 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010de:	2305      	movs	r3, #5
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010e2:	2309      	movs	r3, #9
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4829      	ldr	r0, [pc, #164]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010ec:	f009 f8d8 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010f6:	f001 f91c 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001108:	f009 f8ca 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8001112:	f001 f90e 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001116:	2304      	movs	r3, #4
 8001118:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800111a:	230b      	movs	r3, #11
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001124:	f009 f8bc 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800112e:	f001 f900 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001132:	2301      	movs	r3, #1
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001136:	230c      	movs	r3, #12
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001140:	f009 f8ae 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800114a:	f001 f8f2 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800114e:	2303      	movs	r3, #3
 8001150:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001152:	230d      	movs	r3, #13
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_ADC1_Init+0x20c>)
 800115c:	f009 f8a0 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8001166:	f001 f8e4 	bl	8002332 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800116a:	2302      	movs	r3, #2
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800116e:	230e      	movs	r3, #14
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001178:	f009 f892 	bl	800a2a0 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 8001182:	f001 f8d6 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000510 	.word	0x20000510
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_ADC_MspInit+0x11c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d178      	bne.n	80012b0 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a36      	ldr	r2, [pc, #216]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <HAL_ADC_MspInit+0x120>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_ADC_MspInit+0x120>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001212:	233f      	movs	r3, #63	; 0x3f
 8001214:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <HAL_ADC_MspInit+0x124>)
 8001226:	f009 ff81 	bl	800b12c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <HAL_ADC_MspInit+0x128>)
 800123e:	f009 ff75 	bl	800b12c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x130>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800125c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001268:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001286:	f009 fbe1 	bl	800aa4c <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001290:	f001 f84f 	bl	8002332 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2012      	movs	r0, #18
 80012a6:	f009 fb96 	bl	800a9d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f009 fbaf 	bl	800aa0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	20000558 	.word	0x20000558
 80012cc:	40026410 	.word	0x40026410

080012d0 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	2100      	movs	r1, #0
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DISP_ClearBuff+0x14>)
 80012dc:	f00e fc17 	bl	800fb0e <memset>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200005b8 	.word	0x200005b8

080012e8 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	460b      	mov	r3, r1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d03a      	beq.n	8001384 <DISP_DrawPixel+0x9c>
 800130e:	2b02      	cmp	r3, #2
 8001310:	dc39      	bgt.n	8001386 <DISP_DrawPixel+0x9e>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <DISP_DrawPixel+0x34>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d019      	beq.n	800134e <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 800131a:	e034      	b.n	8001386 <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	491c      	ldr	r1, [pc, #112]	; (8001394 <DISP_DrawPixel+0xac>)
 8001322:	01d2      	lsls	r2, r2, #7
 8001324:	440a      	add	r2, r1
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25a      	sxtb	r2, r3
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b259      	sxtb	r1, r3
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	b2c8      	uxtb	r0, r1
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <DISP_DrawPixel+0xac>)
 8001342:	01d2      	lsls	r2, r2, #7
 8001344:	440a      	add	r2, r1
 8001346:	4413      	add	r3, r2
 8001348:	4602      	mov	r2, r0
 800134a:	701a      	strb	r2, [r3, #0]
		break;
 800134c:	e01b      	b.n	8001386 <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4910      	ldr	r1, [pc, #64]	; (8001394 <DISP_DrawPixel+0xac>)
 8001354:	01d2      	lsls	r2, r2, #7
 8001356:	440a      	add	r2, r1
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	b25b      	sxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b259      	sxtb	r1, r3
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	b2c8      	uxtb	r0, r1
 8001376:	4907      	ldr	r1, [pc, #28]	; (8001394 <DISP_DrawPixel+0xac>)
 8001378:	01d2      	lsls	r2, r2, #7
 800137a:	440a      	add	r2, r1
 800137c:	4413      	add	r3, r2
 800137e:	4602      	mov	r2, r0
 8001380:	701a      	strb	r2, [r3, #0]
		break;
 8001382:	e000      	b.n	8001386 <DISP_DrawPixel+0x9e>
		break;
 8001384:	bf00      	nop
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200005b8 	.word	0x200005b8

08001398 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001398:	b490      	push	{r4, r7}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	4603      	mov	r3, r0
 80013ac:	71bb      	strb	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	717b      	strb	r3, [r7, #5]
 80013b2:	4613      	mov	r3, r2
 80013b4:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e08d      	b.n	80014ec <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	dd01      	ble.n	80013de <DISP_DrawChar+0x46>
 80013da:	2301      	movs	r3, #1
 80013dc:	e08b      	b.n	80014f6 <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f1a3 0220 	sub.w	r2, r3, #32
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	441a      	add	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a44      	ldr	r2, [pc, #272]	; (8001500 <DISP_DrawChar+0x168>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	461a      	mov	r2, r3
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f1a3 0220 	sub.w	r2, r3, #32
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4413      	add	r3, r2
 800140e:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <DISP_DrawChar+0x168>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	461a      	mov	r2, r3
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	f1c3 0308 	rsb	r3, r3, #8
 800141a:	fa42 f303 	asr.w	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	e050      	b.n	80014ca <DISP_DrawChar+0x132>
			switch(color) {
 8001428:	793b      	ldrb	r3, [r7, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d049      	beq.n	80014c2 <DISP_DrawChar+0x12a>
 800142e:	2b02      	cmp	r3, #2
 8001430:	dc48      	bgt.n	80014c4 <DISP_DrawChar+0x12c>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <DISP_DrawChar+0xa4>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d01f      	beq.n	800147a <DISP_DrawChar+0xe2>
 800143a:	e043      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	441a      	add	r2, r3
 8001442:	79b9      	ldrb	r1, [r7, #6]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	440b      	add	r3, r1
 8001448:	492e      	ldr	r1, [pc, #184]	; (8001504 <DISP_DrawChar+0x16c>)
 800144a:	01d2      	lsls	r2, r2, #7
 800144c:	440a      	add	r2, r1
 800144e:	4413      	add	r3, r2
 8001450:	7818      	ldrb	r0, [r3, #0]
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	441a      	add	r2, r3
 8001462:	79bc      	ldrb	r4, [r7, #6]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4423      	add	r3, r4
 8001468:	4301      	orrs	r1, r0
 800146a:	b2c8      	uxtb	r0, r1
 800146c:	4925      	ldr	r1, [pc, #148]	; (8001504 <DISP_DrawChar+0x16c>)
 800146e:	01d2      	lsls	r2, r2, #7
 8001470:	440a      	add	r2, r1
 8001472:	4413      	add	r3, r2
 8001474:	4602      	mov	r2, r0
 8001476:	701a      	strb	r2, [r3, #0]
				break;
 8001478:	e024      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	441a      	add	r2, r3
 8001480:	79b9      	ldrb	r1, [r7, #6]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	440b      	add	r3, r1
 8001486:	491f      	ldr	r1, [pc, #124]	; (8001504 <DISP_DrawChar+0x16c>)
 8001488:	01d2      	lsls	r2, r2, #7
 800148a:	440a      	add	r2, r1
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25a      	sxtb	r2, r3
 8001492:	f107 010c 	add.w	r1, r7, #12
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b258      	sxtb	r0, r3
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	441a      	add	r2, r3
 80014ac:	79b9      	ldrb	r1, [r7, #6]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	440b      	add	r3, r1
 80014b2:	b2c0      	uxtb	r0, r0
 80014b4:	4913      	ldr	r1, [pc, #76]	; (8001504 <DISP_DrawChar+0x16c>)
 80014b6:	01d2      	lsls	r2, r2, #7
 80014b8:	440a      	add	r2, r1
 80014ba:	4413      	add	r3, r2
 80014bc:	4602      	mov	r2, r0
 80014be:	701a      	strb	r2, [r3, #0]
				break;
 80014c0:	e000      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014c2:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <DISP_DrawChar+0x13c>
 80014d0:	2202      	movs	r2, #2
 80014d2:	e000      	b.n	80014d6 <DISP_DrawChar+0x13e>
 80014d4:	2201      	movs	r2, #1
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dd04      	ble.n	80014e6 <DISP_DrawChar+0x14e>
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	dda0      	ble.n	8001428 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	f77f af6e 	ble.w	80013d0 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc90      	pop	{r4, r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000
 8001504:	200005b8 	.word	0x200005b8

08001508 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4603      	mov	r3, r0
 8001518:	70fb      	strb	r3, [r7, #3]
 800151a:	460b      	mov	r3, r1
 800151c:	70bb      	strb	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
	while(*text)
 8001526:	e015      	b.n	8001554 <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	7818      	ldrb	r0, [r3, #0]
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	73fa      	strb	r2, [r7, #15]
 8001536:	461a      	mov	r2, r3
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	4413      	add	r3, r2
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	787b      	ldrb	r3, [r7, #1]
 8001548:	78ba      	ldrb	r2, [r7, #2]
 800154a:	f7ff ff25 	bl	8001398 <DISP_DrawChar>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <DISP_DrawText+0x56>
	while(*text)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <DISP_DrawText+0x20>
}
 800155c:	e000      	b.n	8001560 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 800155e:	bf00      	nop
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4603      	mov	r3, r0
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	717b      	strb	r3, [r7, #5]
 8001582:	4613      	mov	r3, r2
 8001584:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 8001586:	793a      	ldrb	r2, [r7, #4]
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	429a      	cmp	r2, r3
 800158c:	d104      	bne.n	8001598 <DISP_DrawLineSimple+0x30>
 800158e:	797a      	ldrb	r2, [r7, #5]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	429a      	cmp	r2, r3
 8001594:	f000 8086 	beq.w	80016a4 <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 8001598:	797a      	ldrb	r2, [r7, #5]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	1ad2      	subs	r2, r2, r3
 800159e:	7939      	ldrb	r1, [r7, #4]
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	1acb      	subs	r3, r1, r3
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db3e      	blt.n	8001626 <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015a8:	793a      	ldrb	r2, [r7, #4]
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015b6:	797a      	ldrb	r2, [r7, #5]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e022      	b.n	8001618 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4413      	add	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	ee07 2a90 	vmov	s15, r2
 80015e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	ee07 2a90 	vmov	s15, r2
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001600:	edc7 7a00 	vstr	s15, [r7]
 8001604:	783a      	ldrb	r2, [r7, #0]
 8001606:	b2d1      	uxtb	r1, r2
 8001608:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe6b 	bl	80012e8 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	797a      	ldrb	r2, [r7, #5]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	ddd6      	ble.n	80015d2 <DISP_DrawLineSimple+0x6a>
 8001624:	e03f      	b.n	80016a6 <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 8001626:	797a      	ldrb	r2, [r7, #5]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001634:	793a      	ldrb	r2, [r7, #4]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e022      	b.n	8001696 <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	edd7 7a03 	vldr	s15, [r7, #12]
 800165e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	edc7 7a00 	vstr	s15, [r7]
 8001678:	783b      	ldrb	r3, [r7, #0]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fe2c 	bl	80012e8 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3301      	adds	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	793a      	ldrb	r2, [r7, #4]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	ddd6      	ble.n	8001650 <DISP_DrawLineSimple+0xe8>
 80016a2:	e000      	b.n	80016a6 <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016a4:	bf00      	nop
		}
	}
}
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}

080016ac <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	4603      	mov	r3, r0
 80016c0:	71bb      	strb	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	717b      	strb	r3, [r7, #5]
 80016c6:	4613      	mov	r3, r2
 80016c8:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016ca:	79bc      	ldrb	r4, [r7, #6]
 80016cc:	797a      	ldrb	r2, [r7, #5]
 80016ce:	79b9      	ldrb	r1, [r7, #6]
 80016d0:	79f8      	ldrb	r0, [r7, #7]
 80016d2:	7e3b      	ldrb	r3, [r7, #24]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff ff46 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016dc:	793c      	ldrb	r4, [r7, #4]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	79b9      	ldrb	r1, [r7, #6]
 80016e2:	79f8      	ldrb	r0, [r7, #7]
 80016e4:	7e3b      	ldrb	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	f7ff ff3d 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016ee:	793c      	ldrb	r4, [r7, #4]
 80016f0:	797a      	ldrb	r2, [r7, #5]
 80016f2:	79b9      	ldrb	r1, [r7, #6]
 80016f4:	7978      	ldrb	r0, [r7, #5]
 80016f6:	7e3b      	ldrb	r3, [r7, #24]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4623      	mov	r3, r4
 80016fc:	f7ff ff34 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001700:	793c      	ldrb	r4, [r7, #4]
 8001702:	797a      	ldrb	r2, [r7, #5]
 8001704:	7939      	ldrb	r1, [r7, #4]
 8001706:	79f8      	ldrb	r0, [r7, #7]
 8001708:	7e3b      	ldrb	r3, [r7, #24]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4623      	mov	r3, r4
 800170e:	f7ff ff2b 	bl	8001568 <DISP_DrawLineSimple>
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
	...

0800171c <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 800171c:	b490      	push	{r4, r7}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4603      	mov	r3, r0
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	460b      	mov	r3, r1
 8001734:	717b      	strb	r3, [r7, #5]
 8001736:	4613      	mov	r3, r2
 8001738:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001748:	793b      	ldrb	r3, [r7, #4]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e074      	b.n	8001846 <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e06a      	b.n	8001838 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	429a      	cmp	r2, r3
 8001768:	d109      	bne.n	800177e <DISP_FillRect+0x62>
 800176a:	7b3b      	ldrb	r3, [r7, #12]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d005      	beq.n	800177e <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e022      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 800177e:	7bba      	ldrb	r2, [r7, #14]
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	429a      	cmp	r2, r3
 8001784:	d110      	bne.n	80017a8 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	f1c3 0307 	rsb	r3, r3, #7
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	fa42 f303 	asr.w	r3, r2, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7b7b      	ldrb	r3, [r7, #13]
 8001796:	f1c3 0308 	rsb	r3, r3, #8
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	fa41 f303 	asr.w	r3, r1, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e00d      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	fa42 f303 	asr.w	r3, r2, r3
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e001      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d031      	beq.n	8001830 <DISP_FillRect+0x114>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	dc30      	bgt.n	8001832 <DISP_FillRect+0x116>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <DISP_FillRect+0xbe>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d013      	beq.n	8001800 <DISP_FillRect+0xe4>
 80017d8:	e02b      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <DISP_FillRect+0x140>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	01db      	lsls	r3, r3, #7
 80017e0:	441a      	add	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4413      	add	r3, r2
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b2d9      	uxtb	r1, r3
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <DISP_FillRect+0x140>)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	441a      	add	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	460a      	mov	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
				break;
 80017fe:	e018      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <DISP_FillRect+0x140>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	01db      	lsls	r3, r3, #7
 8001806:	441a      	add	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25a      	sxtb	r2, r3
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	43db      	mvns	r3, r3
 8001816:	b25b      	sxtb	r3, r3
 8001818:	4013      	ands	r3, r2
 800181a:	b25b      	sxtb	r3, r3
 800181c:	b2d9      	uxtb	r1, r3
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <DISP_FillRect+0x140>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	441a      	add	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4413      	add	r3, r2
 800182a:	460a      	mov	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
				break;
 800182e:	e000      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001830:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	dd90      	ble.n	8001762 <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	429a      	cmp	r2, r3
 800184c:	dd86      	ble.n	800175c <DISP_FillRect+0x40>
			}
		}
	}
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bc90      	pop	{r4, r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200005b8 	.word	0x200005b8

08001860 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e002      	b.n	8001874 <DISP_CountCharString+0x14>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f6      	bne.n	800186e <DISP_CountCharString+0xe>
	return ct;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f7ff ffe0 	bl	8001860 <DISP_CountCharString>
 80018a0:	4603      	mov	r3, r0
 80018a2:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	461a      	mov	r2, r3
 80018a8:	0052      	lsls	r2, r2, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	78db      	ldrb	r3, [r3, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	757b      	strb	r3, [r7, #21]
 80018ca:	e005      	b.n	80018d8 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	4413      	add	r3, r2
 80018d6:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d804      	bhi.n	80018ea <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	3308      	adds	r3, #8
 80018e6:	753b      	strb	r3, [r7, #20]
 80018e8:	e005      	b.n	80018f6 <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	785a      	ldrb	r2, [r3, #1]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7818      	ldrb	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 8001902:	2b01      	cmp	r3, #1
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461c      	mov	r4, r3
 800190e:	7d3b      	ldrb	r3, [r7, #20]
 8001910:	7d7a      	ldrb	r2, [r7, #21]
 8001912:	9400      	str	r4, [sp, #0]
 8001914:	f7ff ff02 	bl	800171c <DISP_FillRect>

	switch(s->align_x) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	795b      	ldrb	r3, [r3, #5]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d010      	beq.n	8001942 <DISP_DisplayText+0xb2>
 8001920:	2b02      	cmp	r3, #2
 8001922:	dc20      	bgt.n	8001966 <DISP_DisplayText+0xd6>
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <DISP_DisplayText+0x9e>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <DISP_DisplayText+0xa8>
 800192c:	e01b      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
		break;
 8001936:	e016      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001938:	7d7a      	ldrb	r2, [r7, #21]
 800193a:	7abb      	ldrb	r3, [r7, #10]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	75fb      	strb	r3, [r7, #23]
		break;
 8001940:	e011      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	7809      	ldrb	r1, [r1, #0]
 800194c:	1a5b      	subs	r3, r3, r1
 800194e:	0fd9      	lsrs	r1, r3, #31
 8001950:	440b      	add	r3, r1
 8001952:	105b      	asrs	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b2da      	uxtb	r2, r3
 800195a:	7abb      	ldrb	r3, [r7, #10]
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	75fb      	strb	r3, [r7, #23]
		break;
 8001964:	bf00      	nop
	}

	switch(s->align_y) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	799b      	ldrb	r3, [r3, #6]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d00f      	beq.n	800198e <DISP_DisplayText+0xfe>
 800196e:	2b02      	cmp	r3, #2
 8001970:	dc1c      	bgt.n	80019ac <DISP_DisplayText+0x11c>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <DISP_DisplayText+0xec>
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <DISP_DisplayText+0xf6>
 800197a:	e017      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	3301      	adds	r3, #1
 8001982:	75bb      	strb	r3, [r7, #22]
		break;
 8001984:	e012      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 8001986:	7d3b      	ldrb	r3, [r7, #20]
 8001988:	3b07      	subs	r3, #7
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e00e      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	7d3b      	ldrb	r3, [r7, #20]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	7849      	ldrb	r1, [r1, #1]
 8001998:	1a5b      	subs	r3, r3, r1
 800199a:	0fd9      	lsrs	r1, r3, #31
 800199c:	440b      	add	r3, r1
 800199e:	105b      	asrs	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b03      	subs	r3, #3
 80019a8:	75bb      	strb	r3, [r7, #22]
		break;
 80019aa:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	7dba      	ldrb	r2, [r7, #22]
 80019b2:	7df9      	ldrb	r1, [r7, #23]
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff fda7 	bl	8001508 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	08db      	lsrs	r3, r3, #3
 80019c0:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019c2:	7d3b      	ldrb	r3, [r7, #20]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019c8:	7a7b      	ldrb	r3, [r7, #9]
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e024      	b.n	8001a18 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 ff0e 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 ff1e 	bl	800281e <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e00c      	b.n	8001a04 <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <DISP_DisplayText+0x1a0>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	441a      	add	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fee3 	bl	80027c4 <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dc02      	bgt.n	8001a12 <DISP_DisplayText+0x182>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	ddeb      	ble.n	80019ea <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	7a3b      	ldrb	r3, [r7, #8]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dc02      	bgt.n	8001a26 <DISP_DisplayText+0x196>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	ddd3      	ble.n	80019ce <DISP_DisplayText+0x13e>
		}
	}

}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005b8 	.word	0x200005b8

08001a34 <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	4603      	mov	r3, r0
 8001a48:	71bb      	strb	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	717b      	strb	r3, [r7, #5]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a58:	793b      	ldrb	r3, [r7, #4]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e022      	b.n	8001aaa <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fec3 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fed4 	bl	800281e <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00c      	b.n	8001a96 <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a7c:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <DISP_OLEDUpdate+0x8c>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	441a      	add	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fe9a 	bl	80027c4 <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	3301      	adds	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dc02      	bgt.n	8001aa4 <DISP_OLEDUpdate+0x70>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa2:	ddeb      	ble.n	8001a7c <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dc02      	bgt.n	8001ab8 <DISP_OLEDUpdate+0x84>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b07      	cmp	r3, #7
 8001ab6:	ddd5      	ble.n	8001a64 <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	200005b8 	.word	0x200005b8

08001ac4 <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001adc:	4413      	add	r3, r2
 8001ade:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	785a      	ldrb	r2, [r3, #1]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	4622      	mov	r2, r4
 8001af6:	f7ff fe11 	bl	800171c <DISP_FillRect>
			s->color);
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
	...

08001b04 <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	483e      	ldr	r0, [pc, #248]	; (8001c0c <DISP_Test+0x108>)
 8001b12:	f7ff fcf9 	bl	8001508 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b16:	2300      	movs	r3, #0
 8001b18:	2208      	movs	r2, #8
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	483c      	ldr	r0, [pc, #240]	; (8001c10 <DISP_Test+0x10c>)
 8001b1e:	f7ff fcf3 	bl	8001508 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b22:	2300      	movs	r3, #0
 8001b24:	2210      	movs	r2, #16
 8001b26:	2100      	movs	r1, #0
 8001b28:	483a      	ldr	r0, [pc, #232]	; (8001c14 <DISP_Test+0x110>)
 8001b2a:	f7ff fced 	bl	8001508 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	233e      	movs	r3, #62	; 0x3e
 8001b34:	227a      	movs	r2, #122	; 0x7a
 8001b36:	211e      	movs	r1, #30
 8001b38:	203e      	movs	r0, #62	; 0x3e
 8001b3a:	f7ff fdb7 	bl	80016ac <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	233c      	movs	r3, #60	; 0x3c
 8001b44:	2278      	movs	r2, #120	; 0x78
 8001b46:	2120      	movs	r1, #32
 8001b48:	2040      	movs	r0, #64	; 0x40
 8001b4a:	f7ff fde7 	bl	800171c <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b4e:	2301      	movs	r3, #1
 8001b50:	222a      	movs	r2, #42	; 0x2a
 8001b52:	2151      	movs	r1, #81	; 0x51
 8001b54:	4830      	ldr	r0, [pc, #192]	; (8001c18 <DISP_Test+0x114>)
 8001b56:	f7ff fcd7 	bl	8001508 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e01d      	b.n	8001b9c <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fe45 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 fe57 	bl	800281e <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	e00c      	b.n	8001b90 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <DISP_Test+0x118>)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	441a      	add	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fe1d 	bl	80027c4 <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b7f      	cmp	r3, #127	; 0x7f
 8001b94:	ddef      	ble.n	8001b76 <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	ddde      	ble.n	8001b60 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e022      	b.n	8001bee <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3304      	adds	r3, #4
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fe1f 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f000 fe31 	bl	800281e <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	e00f      	b.n	8001be2 <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <DISP_Test+0x11c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fdf4 	bl	80027c4 <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b27      	cmp	r3, #39	; 0x27
 8001be6:	ddec      	ble.n	8001bc2 <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	ddd9      	ble.n	8001ba8 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf8:	f008 f8ac 	bl	8009d54 <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001bfc:	f000 fe29 	bl	8002852 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c00:	f7ff fb66 	bl	80012d0 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	08011fc0 	.word	0x08011fc0
 8001c10:	08011fd4 	.word	0x08011fd4
 8001c14:	08011fe8 	.word	0x08011fe8
 8001c18:	08011ff0 	.word	0x08011ff0
 8001c1c:	200005b8 	.word	0x200005b8
 8001c20:	200001e8 	.word	0x200001e8

08001c24 <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c28:	f000 fe13 	bl	8002852 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c2c:	f7ff fb50 	bl	80012d0 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c30:	20af      	movs	r0, #175	; 0xaf
 8001c32:	f000 fd9b 	bl	800276c <OLED_Command>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2038      	movs	r0, #56	; 0x38
 8001c64:	f008 feb7 	bl	800a9d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f008 fed0 	bl	800aa0e <HAL_NVIC_EnableIRQ>

}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <EEP_Init+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200009b8 	.word	0x200009b8

08001c9c <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <EEP_WritePage+0x40>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	21a0      	movs	r1, #160	; 0xa0
 8001cc4:	f009 fd44 	bl	800b750 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cc8:	f008 f838 	bl	8009d3c <HAL_GetTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <EEP_WritePage+0x44>)
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200009b8 	.word	0x200009b8
 8001ce0:	200009bc 	.word	0x200009bc

08001ce4 <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	80fb      	strh	r3, [r7, #6]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <EEP_WriteMem+0x40>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	2164      	movs	r1, #100	; 0x64
 8001d00:	9102      	str	r1, [sp, #8]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	21a0      	movs	r1, #160	; 0xa0
 8001d0c:	f009 fd20 	bl	800b750 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d10:	f008 f814 	bl	8009d3c <HAL_GetTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <EEP_WriteMem+0x44>)
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200009b8 	.word	0x200009b8
 8001d28:	200009bc 	.word	0x200009bc

08001d2c <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af04      	add	r7, sp, #16
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <EEP_ReadPage+0x40>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	89fa      	ldrh	r2, [r7, #14]
 8001d44:	2364      	movs	r3, #100	; 0x64
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2340      	movs	r3, #64	; 0x40
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	21a0      	movs	r1, #160	; 0xa0
 8001d54:	f009 fdf6 	bl	800b944 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <EEP_ReadPage+0x44>)
 8001d60:	801a      	strh	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200009b8 	.word	0x200009b8
 8001d70:	200009c0 	.word	0x200009c0

08001d74 <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <EEP_ReadMem+0x44>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	797b      	ldrb	r3, [r7, #5]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	9102      	str	r1, [sp, #8]
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	21a0      	movs	r1, #160	; 0xa0
 8001d9c:	f009 fdd2 	bl	800b944 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4413      	add	r3, r2
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <EEP_ReadMem+0x48>)
 8001dac:	801a      	strh	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200009b8 	.word	0x200009b8
 8001dbc:	200009c0 	.word	0x200009c0

08001dc0 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dc4:	f007 ffba 	bl	8009d3c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <EEP_ReadyToWrite+0x20>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d901      	bls.n	8001dd8 <EEP_ReadyToWrite+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <EEP_ReadyToWrite+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009bc 	.word	0x200009bc

08001de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e70:	482a      	ldr	r0, [pc, #168]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e72:	f009 fb0f 	bl	800b494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001e7e:	f009 fb09 	bl	800b494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4821      	ldr	r0, [pc, #132]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e98:	f009 f948 	bl	800b12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4819      	ldr	r0, [pc, #100]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001eb6:	f009 f939 	bl	800b12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ec0:	2311      	movs	r3, #17
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001ed4:	f009 f92a 	bl	800b12c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ed8:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001edc:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001eee:	f009 f91d 	bl	800b12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001f0c:	f009 f90e 	bl	800b12c <HAL_GPIO_Init>

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400

08001f24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <MX_I2C1_Init+0x58>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x5c>)
 8001f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f64:	f009 fab0 	bl	800b4c8 <HAL_I2C_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f6e:	f000 f9e0 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200009c4 	.word	0x200009c4
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	00061a80 	.word	0x00061a80

08001f84 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <MX_I2C2_Init+0x54>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x58>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fc2:	f009 fa81 	bl	800b4c8 <HAL_I2C_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fcc:	f000 f9b1 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000a18 	.word	0x20000a18
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	000186a0 	.word	0x000186a0

08001fe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_I2C_MspInit+0xec>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12d      	bne.n	800205e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002024:	2312      	movs	r3, #18
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002030:	2304      	movs	r3, #4
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4826      	ldr	r0, [pc, #152]	; (80020d4 <HAL_I2C_MspInit+0xf4>)
 800203c:	f009 f876 	bl	800b12c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800205c:	e031      	b.n	80020c2 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_I2C_MspInit+0xf8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12c      	bne.n	80020c2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002084:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002096:	2304      	movs	r3, #4
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <HAL_I2C_MspInit+0xf4>)
 80020a2:	f009 f843 	bl	800b12c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
}
 80020c2:	bf00      	nop
 80020c4:	3730      	adds	r7, #48	; 0x30
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40005800 	.word	0x40005800

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f007 fdc6 	bl	8009c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f868 	bl	80021b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f7ff fe7c 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ec:	f7ff fda6 	bl	8001c3c <MX_DMA_Init>
  MX_ADC1_Init();
 80020f0:	f7fe ff48 	bl	8000f84 <MX_ADC1_Init>
  MX_I2C1_Init();
 80020f4:	f7ff ff16 	bl	8001f24 <MX_I2C1_Init>
  MX_I2C2_Init();
 80020f8:	f7ff ff44 	bl	8001f84 <MX_I2C2_Init>
  MX_TIM1_Init();
 80020fc:	f004 f860 	bl	80061c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002100:	f004 f916 	bl	8006330 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002104:	f004 f968 	bl	80063d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002108:	f004 f9e0 	bl	80064cc <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800210c:	f007 fd0c 	bl	8009b28 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002110:	f007 fc98 	bl	8009a44 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002114:	f004 fa2e 	bl	8006574 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <main+0xb8>)
 800211a:	f7ff fdaf 	bl	8001c7c <EEP_Init>
  SEN_Init(&hadc1);
 800211e:	481e      	ldr	r0, [pc, #120]	; (8002198 <main+0xbc>)
 8002120:	f002 feec 	bl	8004efc <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002124:	213c      	movs	r1, #60	; 0x3c
 8002126:	481d      	ldr	r0, [pc, #116]	; (800219c <main+0xc0>)
 8002128:	f00b f9be 	bl	800d4a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	481c      	ldr	r0, [pc, #112]	; (80021a0 <main+0xc4>)
 8002130:	f00b f9ba 	bl	800d4a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002134:	2100      	movs	r1, #0
 8002136:	481b      	ldr	r0, [pc, #108]	; (80021a4 <main+0xc8>)
 8002138:	f00b f848 	bl	800d1cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800213c:	2104      	movs	r1, #4
 800213e:	4819      	ldr	r0, [pc, #100]	; (80021a4 <main+0xc8>)
 8002140:	f00b f844 	bl	800d1cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002144:	2108      	movs	r1, #8
 8002146:	4817      	ldr	r0, [pc, #92]	; (80021a4 <main+0xc8>)
 8002148:	f00b f840 	bl	800d1cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800214c:	210c      	movs	r1, #12
 800214e:	4815      	ldr	r0, [pc, #84]	; (80021a4 <main+0xc8>)
 8002150:	f00b f83c 	bl	800d1cc <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8002154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002158:	f007 fdfc 	bl	8009d54 <HAL_Delay>
  Run_Init();
 800215c:	f001 fe3e 	bl	8003ddc <Run_Init>
  OLED_Init(&hi2c1);
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <main+0xcc>)
 8002162:	f000 fb9b 	bl	800289c <OLED_Init>
  DISP_Test();
 8002166:	f7ff fccd 	bl	8001b04 <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <main+0xd0>)
 8002172:	f009 f98f 	bl	800b494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <main+0xd4>)
 800217e:	f009 f989 	bl	800b494 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <main+0xd8>)
 8002184:	f00a ff62 	bl	800d04c <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002188:	f007 fbd0 	bl	800992c <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 800218c:	f007 fbdc 	bl	8009948 <UI_Main>
 8002190:	e7fc      	b.n	800218c <main+0xb0>
 8002192:	bf00      	nop
 8002194:	20000a18 	.word	0x20000a18
 8002198:	20000510 	.word	0x20000510
 800219c:	20000ddc 	.word	0x20000ddc
 80021a0:	20000e6c 	.word	0x20000e6c
 80021a4:	20000e24 	.word	0x20000e24
 80021a8:	200009c4 	.word	0x200009c4
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020400 	.word	0x40020400
 80021b4:	20000eb4 	.word	0x20000eb4

080021b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	; 0x50
 80021bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	2230      	movs	r2, #48	; 0x30
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00d fca1 	bl	800fb0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <SystemClock_Config+0xcc>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <SystemClock_Config+0xcc>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <SystemClock_Config+0xcc>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <SystemClock_Config+0xd0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <SystemClock_Config+0xd0>)
 8002202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <SystemClock_Config+0xd0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221e:	2302      	movs	r3, #2
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002228:	2308      	movs	r3, #8
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800222c:	23a8      	movs	r3, #168	; 0xa8
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002230:	2302      	movs	r3, #2
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002234:	2307      	movs	r3, #7
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f00a fa1f 	bl	800c680 <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002248:	f000 f873 	bl	8002332 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224c:	230f      	movs	r3, #15
 800224e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800225e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2105      	movs	r1, #5
 800226a:	4618      	mov	r0, r3
 800226c:	f00a fc80 	bl	800cb70 <HAL_RCC_ClockConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002276:	f000 f85c 	bl	8002332 <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3750      	adds	r7, #80	; 0x50
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12d      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a6:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		if(counter >= 10) {
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	dd0d      	ble.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x40>
			Run_MotorRoutine(0.01);
 80022b0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022b4:	f001 fdfe 	bl	8003eb4 <Run_MotorRoutine>
			main_flag |= MAIN_FLAG_DISP;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022c4:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
		}
		Plan_Main(0.001);
 80022cc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002314 <HAL_TIM_PeriodElapsedCallback+0x88>
 80022d0:	f001 fbac 	bl	8003a2c <Plan_Main>
		Run_MotorRoutine2(0.001);
 80022d4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002314 <HAL_TIM_PeriodElapsedCallback+0x88>
 80022d8:	f001 fe50 	bl	8003f7c <Run_MotorRoutine2>
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022e8:	f002 fe9a 	bl	8005020 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40001000 	.word	0x40001000
 8002308:	20000a70 	.word	0x20000a70
 800230c:	3c23d70a 	.word	0x3c23d70a
 8002310:	20000a6c 	.word	0x20000a6c
 8002314:	3a83126f 	.word	0x3a83126f
 8002318:	20000cc9 	.word	0x20000cc9

0800231c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f002 fe8b 	bl	8005040 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002336:	b672      	cpsid	i
}
 8002338:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800233a:	e7fe      	b.n	800233a <Error_Handler+0x8>

0800233c <Motor_SetPWM>:

//void Motor_SetAccl(Motor_typedef* hmot, float value) {
//	hmot->acc = value;
//}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002348:	edd7 7a00 	vldr	s15, [r7]
 800234c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002388 <Motor_SetPWM+0x4c>
 8002350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	dd02      	ble.n	8002360 <Motor_SetPWM+0x24>
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <Motor_SetPWM+0x50>)
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	e00a      	b.n	8002376 <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 8002360:	edd7 7a00 	vldr	s15, [r7]
 8002364:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002390 <Motor_SetPWM+0x54>
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d501      	bpl.n	8002376 <Motor_SetPWM+0x3a>
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <Motor_SetPWM+0x58>)
 8002374:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	621a      	str	r2, [r3, #32]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	42c60000 	.word	0x42c60000
 800238c:	42c60000 	.word	0x42c60000
 8002390:	c2c60000 	.word	0xc2c60000
 8002394:	c2c60000 	.word	0xc2c60000

08002398 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023aa:	ed97 7a00 	vldr	s14, [r7]
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023b6:	edd7 7a00 	vldr	s15, [r7]
 80023ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023be:	ee17 3a90 	vmov	r3, s15
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <Motor_SetPoint+0x1a>
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d006      	beq.n	80023fa <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023ec:	e00b      	b.n	8002406 <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023ee:	ed97 0a00 	vldr	s0, [r7]
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <Motor_SetPWM>
		break;
 80023f8:	e005      	b.n	8002406 <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 80023fa:	ed97 0a00 	vldr	s0, [r7]
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffca 	bl	8002398 <Motor_SetVel>
		break;
 8002404:	bf00      	nop
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <Motor_GetPoint>:

float Motor_GetPoint(Motor_typedef* hmot) {
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	switch(hmot->mode) {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10c      	bne.n	8002438 <Motor_GetPoint+0x2a>
	case MOTOR_MODE_CLOSE:
		return (hmot->vel_sp/hmot->vel_factor);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002436:	e002      	b.n	800243e <Motor_GetPoint+0x30>
		break;
	case MOTOR_MODE_OPEN:
	default:
		return hmot->pwm;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	edd3 7a08 	vldr	s15, [r3, #32]
		break;
	}
}
 800243e:	eeb0 0a67 	vmov.f32	s0, s15
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
//	range /= hmot->acc;
//
//	if(hmot->acc_last_val < hmot->pwm) hmot->acc_last_val = hmot->pwm + range;
//	else if(hmot->acc_last_val > hmot->pwm) hmot->acc_last_val = hmot->pwm - range;

	int16_t tim_period = (hmot->pwm * hmot->pwm_factor) * hmot->pwm_htim->Init.Period;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	ed93 7a08 	vldr	s14, [r3, #32]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	ee17 3a90 	vmov	r3, s15
 800247e:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	0bdb      	lsrs	r3, r3, #15
 8002484:	b2db      	uxtb	r3, r3
 8002486:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002488:	7b7b      	ldrb	r3, [r7, #13]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <Motor_ApplyPWM+0x4a>
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	425b      	negs	r3, r3
 8002492:	b29b      	uxth	r3, r3
 8002494:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002496:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d903      	bls.n	80024ac <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 80024ac:	7b7b      	ldrb	r3, [r7, #13]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04a      	beq.n	8002548 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	891b      	ldrh	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <Motor_ApplyPWM+0x7a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34
 80024c4:	e018      	b.n	80024f8 <Motor_ApplyPWM+0xac>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	891b      	ldrh	r3, [r3, #8]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d105      	bne.n	80024da <Motor_ApplyPWM+0x8e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	6393      	str	r3, [r2, #56]	; 0x38
 80024d8:	e00e      	b.n	80024f8 <Motor_ApplyPWM+0xac>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	891b      	ldrh	r3, [r3, #8]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d105      	bne.n	80024ee <Motor_ApplyPWM+0xa2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2300      	movs	r3, #0
 80024ea:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024ec:	e004      	b.n	80024f8 <Motor_ApplyPWM+0xac>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2300      	movs	r3, #0
 80024f6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	895b      	ldrh	r3, [r3, #10]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <Motor_ApplyPWM+0xc2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800250a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 800250c:	e067      	b.n	80025de <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	895b      	ldrh	r3, [r3, #10]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d106      	bne.n	8002524 <Motor_ApplyPWM+0xd8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002520:	6393      	str	r3, [r2, #56]	; 0x38
 8002522:	e05c      	b.n	80025de <Motor_ApplyPWM+0x192>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	895b      	ldrh	r3, [r3, #10]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d106      	bne.n	800253a <Motor_ApplyPWM+0xee>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002536:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002538:	e051      	b.n	80025de <Motor_ApplyPWM+0x192>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002546:	e04a      	b.n	80025de <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	891b      	ldrh	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d106      	bne.n	800255e <Motor_ApplyPWM+0x112>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800255a:	635a      	str	r2, [r3, #52]	; 0x34
 800255c:	e01b      	b.n	8002596 <Motor_ApplyPWM+0x14a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	891b      	ldrh	r3, [r3, #8]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d106      	bne.n	8002574 <Motor_ApplyPWM+0x128>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002570:	6393      	str	r3, [r2, #56]	; 0x38
 8002572:	e010      	b.n	8002596 <Motor_ApplyPWM+0x14a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	891b      	ldrh	r3, [r3, #8]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d106      	bne.n	800258a <Motor_ApplyPWM+0x13e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002586:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002588:	e005      	b.n	8002596 <Motor_ApplyPWM+0x14a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	895b      	ldrh	r3, [r3, #10]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <Motor_ApplyPWM+0x15e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025a8:	e019      	b.n	80025de <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	895b      	ldrh	r3, [r3, #10]
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d105      	bne.n	80025be <Motor_ApplyPWM+0x172>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025bc:	e00f      	b.n	80025de <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	895b      	ldrh	r3, [r3, #10]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d105      	bne.n	80025d2 <Motor_ApplyPWM+0x186>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2300      	movs	r3, #0
 80025ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80025d0:	e005      	b.n	80025de <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80025dc:	e7ff      	b.n	80025de <Motor_ApplyPWM+0x192>
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = (int16_t)__HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002606:	b29b      	uxth	r3, r3
 8002608:	fb12 f303 	smulbb	r3, r2, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  (int16_t)(tim_cnt_now - hmot->enc_last_cnt);
 8002610:	89fa      	ldrh	r2, [r7, #14]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002618:	b29b      	uxth	r3, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b29b      	uxth	r3, r3
 800261e:	b21b      	sxth	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	61da      	str	r2, [r3, #28]
	hmot->enc_last_cnt = tim_cnt_now;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	89fa      	ldrh	r2, [r7, #14]
 800262a:	829a      	strh	r2, [r3, #20]
	hmot->enc_cnt += hmot->enc_vel;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d079      	beq.n	8002750 <Motor_ControlRoutine+0x108>
 800265c:	2b01      	cmp	r3, #1
 800265e:	d17a      	bne.n	8002756 <Motor_ControlRoutine+0x10e>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002676:	edc7 7a03 	vstr	s15, [r7, #12]
		if(hmot->vel_sp == 0) hmot->sum_error=0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <Motor_ControlRoutine+0x44>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	dd07      	ble.n	80026a6 <Motor_ControlRoutine+0x5e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	edd3 7a08 	vldr	s15, [r3, #32]
 800269c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d40c      	bmi.n	80026c0 <Motor_ControlRoutine+0x78>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da0b      	bge.n	80026c8 <Motor_ControlRoutine+0x80>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80026b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	dd03      	ble.n	80026c8 <Motor_ControlRoutine+0x80>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80026ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e6:	edd7 7a00 	vldr	s15, [r7]
 80026ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90) {
 80026f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002768 <Motor_ControlRoutine+0x120>
 80026fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	dd13      	ble.n	8002730 <Motor_ControlRoutine+0xe8>
			hmot->sum_error*=0.9;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff1b 	bl	8000548 <__aeabi_f2d>
 8002712:	a313      	add	r3, pc, #76	; (adr r3, 8002760 <Motor_ControlRoutine+0x118>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa60 	bl	8000be8 <__aeabi_d2f>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	63da      	str	r2, [r3, #60]	; 0x3c
 800272e:	e009      	b.n	8002744 <Motor_ControlRoutine+0xfc>
		}
		else {
			hmot->sum_error += error;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002736:	edd7 7a03 	vldr	s15, [r7, #12]
 800273a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
		hmot->pwm = mv;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	621a      	str	r2, [r3, #32]
		hmot->last_error = error;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	639a      	str	r2, [r3, #56]	; 0x38

//		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
//		hmot->pwm = hmot->filter;

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fe7b 	bl	800244c <Motor_ApplyPWM>
	}
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	3feccccc 	.word	0x3feccccc
 8002768:	42b40000 	.word	0x42b40000

0800276c <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af04      	add	r7, sp, #16
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <OLED_Command+0x2c>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	230a      	movs	r3, #10
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	2301      	movs	r3, #1
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	2200      	movs	r2, #0
 800278a:	2178      	movs	r1, #120	; 0x78
 800278c:	f008 ffe0 	bl	800b750 <HAL_I2C_Mem_Write>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000a74 	.word	0x20000a74

0800279c <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	460a      	mov	r2, r1
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ffdc 	bl	800276c <OLED_Command>
	OLED_Command(byte2);
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffd8 	bl	800276c <OLED_Command>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <OLED_Data+0x2c>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	230a      	movs	r3, #10
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2301      	movs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	2178      	movs	r1, #120	; 0x78
 80027e4:	f008 ffb4 	bl	800b750 <HAL_I2C_Mem_Write>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000a74 	.word	0x20000a74

080027f4 <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	b25b      	sxtb	r3, r3
 8002808:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800280c:	b25b      	sxtb	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ffab 	bl	800276c <OLED_Command>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	3302      	adds	r3, #2
 800282c:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0310 	orr.w	r3, r3, #16
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff ffa9 	bl	800279c <OLED_DoubleCommand>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	e016      	b.n	800288c <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ffc6 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff ffd8 	bl	800281e <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	e005      	b.n	8002880 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff ffa5 	bl	80027c4 <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b7f      	cmp	r3, #127	; 0x7f
 8002884:	ddf6      	ble.n	8002874 <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3301      	adds	r3, #1
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b07      	cmp	r3, #7
 8002890:	dde5      	ble.n	800285e <OLED_ClearRAM+0xc>
			}
		}
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <OLED_Init+0x6c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 80028aa:	20ae      	movs	r0, #174	; 0xae
 80028ac:	f7ff ff5e 	bl	800276c <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 80028b0:	213f      	movs	r1, #63	; 0x3f
 80028b2:	20a8      	movs	r0, #168	; 0xa8
 80028b4:	f7ff ff72 	bl	800279c <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 80028b8:	2100      	movs	r1, #0
 80028ba:	20d3      	movs	r0, #211	; 0xd3
 80028bc:	f7ff ff6e 	bl	800279c <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 80028c0:	2040      	movs	r0, #64	; 0x40
 80028c2:	f7ff ff53 	bl	800276c <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 80028c6:	20a1      	movs	r0, #161	; 0xa1
 80028c8:	f7ff ff50 	bl	800276c <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 80028cc:	20c8      	movs	r0, #200	; 0xc8
 80028ce:	f7ff ff4d 	bl	800276c <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 80028d2:	2112      	movs	r1, #18
 80028d4:	20da      	movs	r0, #218	; 0xda
 80028d6:	f7ff ff61 	bl	800279c <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 80028da:	2160      	movs	r1, #96	; 0x60
 80028dc:	2081      	movs	r0, #129	; 0x81
 80028de:	f7ff ff5d 	bl	800279c <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 80028e2:	20a4      	movs	r0, #164	; 0xa4
 80028e4:	f7ff ff42 	bl	800276c <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 80028e8:	20a6      	movs	r0, #166	; 0xa6
 80028ea:	f7ff ff3f 	bl	800276c <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 80028ee:	21f0      	movs	r1, #240	; 0xf0
 80028f0:	20d5      	movs	r0, #213	; 0xd5
 80028f2:	f7ff ff53 	bl	800279c <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 80028f6:	f7ff ffac 	bl	8002852 <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 80028fa:	20af      	movs	r0, #175	; 0xaf
 80028fc:	f7ff ff36 	bl	800276c <OLED_Command>
//	OLED_Load();
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000a74 	.word	0x20000a74

0800290c <Plan_SetCounter>:
uint8_t action_status = 0;
//uint8_t acc_status = 0;
uint8_t autoturn_stat = 0;
uint8_t speed_now;

void Plan_SetCounter() {
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <Plan_SetCounter+0x18>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <Plan_SetCounter+0x1c>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000a78 	.word	0x20000a78
 8002928:	20000a7c 	.word	0x20000a7c

0800292c <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <Plan_CheckCounterValue+0x34>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <Plan_CheckCounterValue+0x38>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1ad1      	subs	r1, r2, r3
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4299      	cmp	r1, r3
 800294a:	bf2c      	ite	cs
 800294c:	2301      	movcs	r3, #1
 800294e:	2300      	movcc	r3, #0
 8002950:	b2db      	uxtb	r3, r3
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000a78 	.word	0x20000a78
 8002964:	20000a7c 	.word	0x20000a7c

08002968 <Plan_CheckSensor>:

uint32_t Plan_CounterValue() {
	return (plan_counter - plan_last_counter);
}

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	460a      	mov	r2, r1
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	4613      	mov	r3, r2
 8002976:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <Plan_CheckSensor+0x1a>
 800297e:	2301      	movs	r3, #1
 8002980:	e02c      	b.n	80029dc <Plan_CheckSensor+0x74>
	else {
		s-=1;
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	3b01      	subs	r3, #1
 8002986:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d002      	beq.n	8002994 <Plan_CheckSensor+0x2c>
 800298e:	2b02      	cmp	r3, #2
 8002990:	d009      	beq.n	80029a6 <Plan_CheckSensor+0x3e>
 8002992:	e019      	b.n	80029c8 <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <Plan_CheckSensor+0x80>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e01a      	b.n	80029dc <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <Plan_CheckSensor+0x80>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <Plan_CheckSensor+0x56>
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f1c3 030d 	rsb	r3, r3, #13
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <Plan_CheckSensor+0x80>)
 80029b8:	5cd3      	ldrb	r3, [r2, r3]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <Plan_CheckSensor+0x5a>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <Plan_CheckSensor+0x5c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e009      	b.n	80029dc <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f1c3 030d 	rsb	r3, r3, #13
 80029ce:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <Plan_CheckSensor+0x80>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
		}
	}
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000b9c 	.word	0x20000b9c
 80029ec:	00000000 	.word	0x00000000

080029f0 <Plan_Left>:

uint8_t Plan_Left(Action_typedef a) {
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 80029fc:	797b      	ldrb	r3, [r7, #5]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ffb1 	bl	8002968 <Plan_CheckSensor>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <Plan_Left+0x3e>
 8002a0c:	4b7c      	ldr	r3, [pc, #496]	; (8002c00 <Plan_Left+0x210>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10c      	bne.n	8002a2e <Plan_Left+0x3e>
			Plan_SetCounter();
 8002a14:	f7ff ff7a 	bl	800290c <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 8002a18:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <Plan_Left+0x214>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	; (8002c08 <Plan_Left+0x218>)
 8002a1e:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002a20:	4b77      	ldr	r3, [pc, #476]	; (8002c00 <Plan_Left+0x210>)
 8002a22:	2208      	movs	r2, #8
 8002a24:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002a26:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a2a:	f002 fa39 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002a2e:	4b74      	ldr	r3, [pc, #464]	; (8002c00 <Plan_Left+0x210>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d111      	bne.n	8002a5a <Plan_Left+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002a36:	7a3b      	ldrb	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	bf28      	it	cs
 8002a3c:	2303      	movcs	r3, #3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff73 	bl	800292c <Plan_CheckCounterValue>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <Plan_Left+0x66>
			Plan_SetCounter();
 8002a4c:	f7ff ff5e 	bl	800290c <Plan_SetCounter>
			counter_status = 1;
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <Plan_Left+0x210>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0c6      	b.n	8002be8 <Plan_Left+0x1f8>
	}
	else if(counter_status == 1) {
 8002a5a:	4b69      	ldr	r3, [pc, #420]	; (8002c00 <Plan_Left+0x210>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <Plan_Left+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002a62:	7a3b      	ldrb	r3, [r7, #8]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff61 	bl	800292c <Plan_CheckCounterValue>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <Plan_Left+0x8a>
			Plan_SetCounter();
 8002a70:	f7ff ff4c 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8002a74:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <Plan_Left+0x210>)
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0b4      	b.n	8002be8 <Plan_Left+0x1f8>
	}
	else if(counter_status == 2) {
 8002a7e:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <Plan_Left+0x210>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 80af 	bne.w	8002be6 <Plan_Left+0x1f6>
		if(autoturn_stat == 0) {
 8002a88:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <Plan_Left+0x21c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d132      	bne.n	8002af6 <Plan_Left+0x106>
			Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002a90:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <Plan_Left+0x220>)
 8002a98:	7ddb      	ldrb	r3, [r3, #23]
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fd40 	bl	8000524 <__aeabi_i2d>
 8002aa4:	a352      	add	r3, pc, #328	; (adr r3, 8002bf0 <Plan_Left+0x200>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fda5 	bl	80005f8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f897 	bl	8000be8 <__aeabi_d2f>
 8002aba:	4604      	mov	r4, r0
 8002abc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <Plan_Left+0x220>)
 8002ac4:	7ddb      	ldrb	r3, [r3, #23]
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd2a 	bl	8000524 <__aeabi_i2d>
 8002ad0:	a347      	add	r3, pc, #284	; (adr r3, 8002bf0 <Plan_Left+0x200>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd fd8f 	bl	80005f8 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fe f881 	bl	8000be8 <__aeabi_d2f>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	ee00 3a90 	vmov	s1, r3
 8002aec:	ee00 4a10 	vmov	s0, r4
 8002af0:	f002 f9bc 	bl	8004e6c <Run_SetMotorSpeed>
 8002af4:	e031      	b.n	8002b5a <Plan_Left+0x16a>
		}
		else {
			Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, a.forward_speed*plan.turn_speed*0.05);
 8002af6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <Plan_Left+0x220>)
 8002afe:	7ddb      	ldrb	r3, [r3, #23]
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd0d 	bl	8000524 <__aeabi_i2d>
 8002b0a:	a33b      	add	r3, pc, #236	; (adr r3, 8002bf8 <Plan_Left+0x208>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd72 	bl	80005f8 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fe f864 	bl	8000be8 <__aeabi_d2f>
 8002b20:	4604      	mov	r4, r0
 8002b22:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <Plan_Left+0x220>)
 8002b2a:	7ddb      	ldrb	r3, [r3, #23]
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fcf7 	bl	8000524 <__aeabi_i2d>
 8002b36:	a330      	add	r3, pc, #192	; (adr r3, 8002bf8 <Plan_Left+0x208>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fd5c 	bl	80005f8 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe f84e 	bl	8000be8 <__aeabi_d2f>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	ee00 3a90 	vmov	s1, r3
 8002b52:	ee00 4a10 	vmov	s0, r4
 8002b56:	f002 f989 	bl	8004e6c <Run_SetMotorSpeed>
		}
		switch(a.act_mode) {
 8002b5a:	79bb      	ldrb	r3, [r7, #6]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d02c      	beq.n	8002bba <Plan_Left+0x1ca>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	dc3e      	bgt.n	8002be2 <Plan_Left+0x1f2>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <Plan_Left+0x17e>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d009      	beq.n	8002b80 <Plan_Left+0x190>
 8002b6c:	e039      	b.n	8002be2 <Plan_Left+0x1f2>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fedb 	bl	800292c <Plan_CheckCounterValue>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02d      	beq.n	8002bd8 <Plan_Left+0x1e8>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e033      	b.n	8002be8 <Plan_Left+0x1f8>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value)) {
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fed2 	bl	800292c <Plan_CheckCounterValue>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d026      	beq.n	8002bdc <Plan_Left+0x1ec>
				if(Plan_CheckSensor(3, LEFT_ALIGN_SEN)) {autoturn_stat = 1;}
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2003      	movs	r0, #3
 8002b92:	f7ff fee9 	bl	8002968 <Plan_CheckSensor>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <Plan_Left+0x1b2>
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <Plan_Left+0x21c>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) {autoturn_stat = 0; return 2;}
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2005      	movs	r0, #5
 8002ba6:	f7ff fedf 	bl	8002968 <Plan_CheckSensor>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <Plan_Left+0x1ec>
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <Plan_Left+0x21c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e016      	b.n	8002be8 <Plan_Left+0x1f8>
			}
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <Plan_Left+0x214>)
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <Plan_Left+0x218>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dd05      	ble.n	8002be0 <Plan_Left+0x1f0>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e007      	b.n	8002be8 <Plan_Left+0x1f8>
			break;
 8002bd8:	bf00      	nop
 8002bda:	e002      	b.n	8002be2 <Plan_Left+0x1f2>
			break;
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <Plan_Left+0x1f2>
			break;
 8002be0:	bf00      	nop
		}
		return 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <Plan_Left+0x1f8>
	}
	return 0;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	9999999a 	.word	0x9999999a
 8002bf4:	3fb99999 	.word	0x3fb99999
 8002bf8:	9999999a 	.word	0x9999999a
 8002bfc:	3fa99999 	.word	0x3fa99999
 8002c00:	20000a84 	.word	0x20000a84
 8002c04:	20000a8c 	.word	0x20000a8c
 8002c08:	20000a80 	.word	0x20000a80
 8002c0c:	20000a86 	.word	0x20000a86
 8002c10:	20000d60 	.word	0x20000d60
 8002c14:	00000000 	.word	0x00000000

08002c18 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002c24:	797b      	ldrb	r3, [r7, #5]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fe9d 	bl	8002968 <Plan_CheckSensor>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <Plan_Right+0x3e>
 8002c34:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <Plan_Right+0x210>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10c      	bne.n	8002c56 <Plan_Right+0x3e>
			Plan_SetCounter();
 8002c3c:	f7ff fe66 	bl	800290c <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002c40:	4b7a      	ldr	r3, [pc, #488]	; (8002e2c <Plan_Right+0x214>)
 8002c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c44:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <Plan_Right+0x218>)
 8002c46:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002c48:	4b77      	ldr	r3, [pc, #476]	; (8002e28 <Plan_Right+0x210>)
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002c4e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002c52:	f002 f925 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002c56:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <Plan_Right+0x210>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d111      	bne.n	8002c82 <Plan_Right+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002c5e:	7a3b      	ldrb	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	bf28      	it	cs
 8002c64:	2303      	movcs	r3, #3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe5f 	bl	800292c <Plan_CheckCounterValue>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <Plan_Right+0x66>
			Plan_SetCounter();
 8002c74:	f7ff fe4a 	bl	800290c <Plan_SetCounter>
			counter_status = 1;
 8002c78:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <Plan_Right+0x210>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0c6      	b.n	8002e10 <Plan_Right+0x1f8>
	}
	else if(counter_status == 1) {
 8002c82:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <Plan_Right+0x210>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10d      	bne.n	8002ca6 <Plan_Right+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002c8a:	7a3b      	ldrb	r3, [r7, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fe4d 	bl	800292c <Plan_CheckCounterValue>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <Plan_Right+0x8a>
			Plan_SetCounter();
 8002c98:	f7ff fe38 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8002c9c:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <Plan_Right+0x210>)
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0b4      	b.n	8002e10 <Plan_Right+0x1f8>
	}
	if(counter_status == 2) {
 8002ca6:	4b60      	ldr	r3, [pc, #384]	; (8002e28 <Plan_Right+0x210>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	f040 80af 	bne.w	8002e0e <Plan_Right+0x1f6>
		if(autoturn_stat == 0) {
 8002cb0:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <Plan_Right+0x21c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d132      	bne.n	8002d1e <Plan_Right+0x106>
			Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002cb8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <Plan_Right+0x220>)
 8002cc0:	7ddb      	ldrb	r3, [r3, #23]
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc2c 	bl	8000524 <__aeabi_i2d>
 8002ccc:	a352      	add	r3, pc, #328	; (adr r3, 8002e18 <Plan_Right+0x200>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fc91 	bl	80005f8 <__aeabi_dmul>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd ff83 	bl	8000be8 <__aeabi_d2f>
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <Plan_Right+0x220>)
 8002cec:	7ddb      	ldrb	r3, [r3, #23]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc16 	bl	8000524 <__aeabi_i2d>
 8002cf8:	a347      	add	r3, pc, #284	; (adr r3, 8002e18 <Plan_Right+0x200>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f7fd fc7b 	bl	80005f8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7fd ff6d 	bl	8000be8 <__aeabi_d2f>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	ee00 3a90 	vmov	s1, r3
 8002d14:	ee00 4a10 	vmov	s0, r4
 8002d18:	f002 f8a8 	bl	8004e6c <Run_SetMotorSpeed>
 8002d1c:	e031      	b.n	8002d82 <Plan_Right+0x16a>
		}
		else {
			Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.05, a.reverse_speed*plan.turn_speed*0.05);
 8002d1e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <Plan_Right+0x220>)
 8002d26:	7ddb      	ldrb	r3, [r3, #23]
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fbf9 	bl	8000524 <__aeabi_i2d>
 8002d32:	a33b      	add	r3, pc, #236	; (adr r3, 8002e20 <Plan_Right+0x208>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fc5e 	bl	80005f8 <__aeabi_dmul>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7fd ff50 	bl	8000be8 <__aeabi_d2f>
 8002d48:	4604      	mov	r4, r0
 8002d4a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <Plan_Right+0x220>)
 8002d52:	7ddb      	ldrb	r3, [r3, #23]
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fbe3 	bl	8000524 <__aeabi_i2d>
 8002d5e:	a330      	add	r3, pc, #192	; (adr r3, 8002e20 <Plan_Right+0x208>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fc48 	bl	80005f8 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd ff3a 	bl	8000be8 <__aeabi_d2f>
 8002d74:	4603      	mov	r3, r0
 8002d76:	ee00 3a90 	vmov	s1, r3
 8002d7a:	ee00 4a10 	vmov	s0, r4
 8002d7e:	f002 f875 	bl	8004e6c <Run_SetMotorSpeed>
		}
		switch(a.act_mode) {
 8002d82:	79bb      	ldrb	r3, [r7, #6]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d02c      	beq.n	8002de2 <Plan_Right+0x1ca>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	dc3e      	bgt.n	8002e0a <Plan_Right+0x1f2>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <Plan_Right+0x17e>
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d009      	beq.n	8002da8 <Plan_Right+0x190>
 8002d94:	e039      	b.n	8002e0a <Plan_Right+0x1f2>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fdc7 	bl	800292c <Plan_CheckCounterValue>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02d      	beq.n	8002e00 <Plan_Right+0x1e8>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e033      	b.n	8002e10 <Plan_Right+0x1f8>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value)) {
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fdbe 	bl	800292c <Plan_CheckCounterValue>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d026      	beq.n	8002e04 <Plan_Right+0x1ec>
				if(Plan_CheckSensor(3, RIGHT_ALIGN_SEN)) {autoturn_stat = 1;}
 8002db6:	2101      	movs	r1, #1
 8002db8:	2003      	movs	r0, #3
 8002dba:	f7ff fdd5 	bl	8002968 <Plan_CheckSensor>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <Plan_Right+0x1b2>
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <Plan_Right+0x21c>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) {autoturn_stat = 0; return 2;}
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2005      	movs	r0, #5
 8002dce:	f7ff fdcb 	bl	8002968 <Plan_CheckSensor>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <Plan_Right+0x1ec>
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <Plan_Right+0x21c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	2302      	movs	r3, #2
 8002de0:	e016      	b.n	8002e10 <Plan_Right+0x1f8>
			}
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <Plan_Right+0x214>)
 8002de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <Plan_Right+0x218>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4619      	mov	r1, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dd05      	ble.n	8002e08 <Plan_Right+0x1f0>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e007      	b.n	8002e10 <Plan_Right+0x1f8>
			break;
 8002e00:	bf00      	nop
 8002e02:	e002      	b.n	8002e0a <Plan_Right+0x1f2>
			break;
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <Plan_Right+0x1f2>
			break;
 8002e08:	bf00      	nop
		}
		return 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <Plan_Right+0x1f8>
	}
	return 0;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	9999999a 	.word	0x9999999a
 8002e1c:	3fb99999 	.word	0x3fb99999
 8002e20:	9999999a 	.word	0x9999999a
 8002e24:	3fa99999 	.word	0x3fa99999
 8002e28:	20000a84 	.word	0x20000a84
 8002e2c:	20000a8c 	.word	0x20000a8c
 8002e30:	20000a80 	.word	0x20000a80
 8002e34:	20000a86 	.word	0x20000a86
 8002e38:	20000d60 	.word	0x20000d60

08002e3c <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	1d3c      	adds	r4, r7, #4
 8002e44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e48:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002e4a:	797b      	ldrb	r3, [r7, #5]
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fd8a 	bl	8002968 <Plan_CheckSensor>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d015      	beq.n	8002e86 <Plan_Forward+0x4a>
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <Plan_Forward+0x158>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d111      	bne.n	8002e86 <Plan_Forward+0x4a>
			Plan_SetCounter();
 8002e62:	f7ff fd53 	bl	800290c <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002e66:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <Plan_Forward+0x15c>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e70:	ee17 2a90 	vmov	r2, s15
 8002e74:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <Plan_Forward+0x160>)
 8002e76:	601a      	str	r2, [r3, #0]
			counter_status = 8;
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <Plan_Forward+0x158>)
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002e7e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e82:	f002 f80d 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <Plan_Forward+0x158>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d111      	bne.n	8002eb2 <Plan_Forward+0x76>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002e8e:	7a3b      	ldrb	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	bf28      	it	cs
 8002e94:	2303      	movcs	r3, #3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fd47 	bl	800292c <Plan_CheckCounterValue>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <Plan_Forward+0x72>
			Plan_SetCounter();
 8002ea4:	f7ff fd32 	bl	800290c <Plan_SetCounter>
			counter_status = 1;
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <Plan_Forward+0x158>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06b      	b.n	8002f8a <Plan_Forward+0x14e>
	}
	else if(counter_status == 1) {
 8002eb2:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <Plan_Forward+0x158>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10d      	bne.n	8002ed6 <Plan_Forward+0x9a>
		if(Plan_CheckCounterValue(a.brake)) {
 8002eba:	7a3b      	ldrb	r3, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fd35 	bl	800292c <Plan_CheckCounterValue>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <Plan_Forward+0x96>
			Plan_SetCounter();
 8002ec8:	f7ff fd20 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <Plan_Forward+0x158>)
 8002ece:	2202      	movs	r2, #2
 8002ed0:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e059      	b.n	8002f8a <Plan_Forward+0x14e>
	}
	if(counter_status == 2) {
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <Plan_Forward+0x158>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d154      	bne.n	8002f88 <Plan_Forward+0x14c>
		Run_SetMotorSpeed(_speed, _speed);
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	ee07 3a10 	vmov	s14, r3
 8002eee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ef2:	eef0 0a47 	vmov.f32	s1, s14
 8002ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8002efa:	f001 ffb7 	bl	8004e6c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002efe:	79bb      	ldrb	r3, [r7, #6]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d01f      	beq.n	8002f44 <Plan_Forward+0x108>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	dc3d      	bgt.n	8002f84 <Plan_Forward+0x148>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <Plan_Forward+0xd6>
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d009      	beq.n	8002f24 <Plan_Forward+0xe8>
 8002f10:	e038      	b.n	8002f84 <Plan_Forward+0x148>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fd09 	bl	800292c <Plan_CheckCounterValue>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02e      	beq.n	8002f7e <Plan_Forward+0x142>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e032      	b.n	8002f8a <Plan_Forward+0x14e>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd00 	bl	800292c <Plan_CheckCounterValue>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d027      	beq.n	8002f82 <Plan_Forward+0x146>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002f32:	2102      	movs	r1, #2
 8002f34:	2007      	movs	r0, #7
 8002f36:	f7ff fd17 	bl	8002968 <Plan_CheckSensor>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <Plan_Forward+0x146>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e022      	b.n	8002f8a <Plan_Forward+0x14e>
			break;
		case 2:
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <Plan_Forward+0x15c>)
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <Plan_Forward+0x160>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	dc00      	bgt.n	8002f7a <Plan_Forward+0x13e>
			break;
 8002f78:	e004      	b.n	8002f84 <Plan_Forward+0x148>
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e005      	b.n	8002f8a <Plan_Forward+0x14e>
			break;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <Plan_Forward+0x148>
			break;
 8002f82:	bf00      	nop
		}
		return 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <Plan_Forward+0x14e>
	}
	return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000a84 	.word	0x20000a84
 8002f98:	20000b1c 	.word	0x20000b1c
 8002f9c:	20000a80 	.word	0x20000a80

08002fa0 <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	1d3c      	adds	r4, r7, #4
 8002fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fac:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002fae:	797b      	ldrb	r3, [r7, #5]
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fcd8 	bl	8002968 <Plan_CheckSensor>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <Plan_Backward+0x4a>
 8002fbe:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <Plan_Backward+0x15c>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d111      	bne.n	8002fea <Plan_Backward+0x4a>
			Plan_SetCounter();
 8002fc6:	f7ff fca1 	bl	800290c <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002fca:	4b4d      	ldr	r3, [pc, #308]	; (8003100 <Plan_Backward+0x160>)
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd4:	ee17 2a90 	vmov	r2, s15
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <Plan_Backward+0x164>)
 8002fda:	601a      	str	r2, [r3, #0]
			counter_status = 8;
 8002fdc:	4b47      	ldr	r3, [pc, #284]	; (80030fc <Plan_Backward+0x15c>)
 8002fde:	2208      	movs	r2, #8
 8002fe0:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002fe2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fe6:	f001 ff5b 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002fea:	4b44      	ldr	r3, [pc, #272]	; (80030fc <Plan_Backward+0x15c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d111      	bne.n	8003016 <Plan_Backward+0x76>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002ff2:	7a3b      	ldrb	r3, [r7, #8]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	bf28      	it	cs
 8002ff8:	2303      	movcs	r3, #3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fc95 	bl	800292c <Plan_CheckCounterValue>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <Plan_Backward+0x72>
			Plan_SetCounter();
 8003008:	f7ff fc80 	bl	800290c <Plan_SetCounter>
			counter_status = 1;
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <Plan_Backward+0x15c>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003012:	2301      	movs	r3, #1
 8003014:	e06d      	b.n	80030f2 <Plan_Backward+0x152>
	}
	else if(counter_status == 1) {
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <Plan_Backward+0x15c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10d      	bne.n	800303a <Plan_Backward+0x9a>
		if(Plan_CheckCounterValue(a.brake)) {
 800301e:	7a3b      	ldrb	r3, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fc83 	bl	800292c <Plan_CheckCounterValue>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <Plan_Backward+0x96>
			Plan_SetCounter();
 800302c:	f7ff fc6e 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <Plan_Backward+0x15c>)
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003036:	2301      	movs	r3, #1
 8003038:	e05b      	b.n	80030f2 <Plan_Backward+0x152>
	}
	if(counter_status == 2) {
 800303a:	4b30      	ldr	r3, [pc, #192]	; (80030fc <Plan_Backward+0x15c>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d156      	bne.n	80030f0 <Plan_Backward+0x150>
		Run_SetMotorSpeed(-_speed, -_speed);
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	425b      	negs	r3, r3
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	425b      	negs	r3, r3
 8003052:	ee07 3a10 	vmov	s14, r3
 8003056:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800305a:	eef0 0a47 	vmov.f32	s1, s14
 800305e:	eeb0 0a67 	vmov.f32	s0, s15
 8003062:	f001 ff03 	bl	8004e6c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8003066:	79bb      	ldrb	r3, [r7, #6]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d01f      	beq.n	80030ac <Plan_Backward+0x10c>
 800306c:	2b02      	cmp	r3, #2
 800306e:	dc3d      	bgt.n	80030ec <Plan_Backward+0x14c>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <Plan_Backward+0xda>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d009      	beq.n	800308c <Plan_Backward+0xec>
 8003078:	e038      	b.n	80030ec <Plan_Backward+0x14c>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fc55 	bl	800292c <Plan_CheckCounterValue>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d02e      	beq.n	80030e6 <Plan_Backward+0x146>
 8003088:	2302      	movs	r3, #2
 800308a:	e032      	b.n	80030f2 <Plan_Backward+0x152>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fc4c 	bl	800292c <Plan_CheckCounterValue>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d027      	beq.n	80030ea <Plan_Backward+0x14a>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 800309a:	2102      	movs	r1, #2
 800309c:	2007      	movs	r0, #7
 800309e:	f7ff fc63 	bl	8002968 <Plan_CheckSensor>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <Plan_Backward+0x14a>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e022      	b.n	80030f2 <Plan_Backward+0x152>
			break;
		case 2:
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <Plan_Backward+0x164>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <Plan_Backward+0x160>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	dc00      	bgt.n	80030e2 <Plan_Backward+0x142>
			break;
 80030e0:	e004      	b.n	80030ec <Plan_Backward+0x14c>
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80030e2:	2302      	movs	r3, #2
 80030e4:	e005      	b.n	80030f2 <Plan_Backward+0x152>
			break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <Plan_Backward+0x14c>
			break;
 80030ea:	bf00      	nop
		}
		return 1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <Plan_Backward+0x152>
	}
	return 0;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd90      	pop	{r4, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000a84 	.word	0x20000a84
 8003100:	20000b1c 	.word	0x20000b1c
 8003104:	20000a80 	.word	0x20000a80

08003108 <Plan_Idle>:

uint8_t Plan_Idle(Action_typedef a) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8003114:	797b      	ldrb	r3, [r7, #5]
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fc25 	bl	8002968 <Plan_CheckSensor>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <Plan_Idle+0x48>
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <Plan_Idle+0xd4>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <Plan_Idle+0x48>
			Plan_SetCounter();
 800312c:	f7ff fbee 	bl	800290c <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <Plan_Idle+0xd8>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313a:	ee17 2a90 	vmov	r2, s15
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <Plan_Idle+0xdc>)
 8003140:	601a      	str	r2, [r3, #0]
			counter_status = 8;
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <Plan_Idle+0xd4>)
 8003144:	2208      	movs	r2, #8
 8003146:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8003148:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800314c:	f001 fea8 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <Plan_Idle+0xd4>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d111      	bne.n	800317c <Plan_Idle+0x74>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8003158:	7a3b      	ldrb	r3, [r7, #8]
 800315a:	2b03      	cmp	r3, #3
 800315c:	bf28      	it	cs
 800315e:	2303      	movcs	r3, #3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fbe2 	bl	800292c <Plan_CheckCounterValue>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <Plan_Idle+0x70>
			Plan_SetCounter();
 800316e:	f7ff fbcd 	bl	800290c <Plan_SetCounter>
			counter_status = 1;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <Plan_Idle+0xd4>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003178:	2301      	movs	r3, #1
 800317a:	e02b      	b.n	80031d4 <Plan_Idle+0xcc>
	}
	else if(counter_status == 1) {
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <Plan_Idle+0xd4>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <Plan_Idle+0x98>
		if(Plan_CheckCounterValue(a.brake)) {
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fbd0 	bl	800292c <Plan_CheckCounterValue>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <Plan_Idle+0x94>
			Plan_SetCounter();
 8003192:	f7ff fbbb 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <Plan_Idle+0xd4>)
 8003198:	2202      	movs	r2, #2
 800319a:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800319c:	2301      	movs	r3, #1
 800319e:	e019      	b.n	80031d4 <Plan_Idle+0xcc>
	}
	if(counter_status == 2) {
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <Plan_Idle+0xd4>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d114      	bne.n	80031d2 <Plan_Idle+0xca>
		Run_SetMotorSpeed(0, 0);
 80031a8:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80031e8 <Plan_Idle+0xe0>
 80031ac:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80031e8 <Plan_Idle+0xe0>
 80031b0:	f001 fe5c 	bl	8004e6c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 80031b4:	79bb      	ldrb	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <Plan_Idle+0xc6>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fbb5 	bl	800292c <Plan_CheckCounterValue>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <Plan_Idle+0xc4>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e003      	b.n	80031d4 <Plan_Idle+0xcc>
			break;
 80031cc:	bf00      	nop
//			break;
//		case 2:
//			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
//			break;
		}
		return 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <Plan_Idle+0xcc>
	}
	return 0;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000a84 	.word	0x20000a84
 80031e0:	20000b1c 	.word	0x20000b1c
 80031e4:	20000a80 	.word	0x20000a80
 80031e8:	00000000 	.word	0x00000000

080031ec <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 80031f8:	4b24      	ldr	r3, [pc, #144]	; (800328c <Plan_Follow+0xa0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <Plan_Follow+0x30>
		Plan_SetCounter();
 8003200:	f7ff fb84 	bl	800290c <Plan_SetCounter>
		robot_enc_pos = MOTOR_L.enc_cnt;
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <Plan_Follow+0xa4>)
 8003206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <Plan_Follow+0xa8>)
 8003212:	edc3 7a00 	vstr	s15, [r3]
		counter_status = 1;
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <Plan_Follow+0xa0>)
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 800321c:	79bb      	ldrb	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <Plan_Follow+0x3c>
 8003222:	2b02      	cmp	r3, #2
 8003224:	d00c      	beq.n	8003240 <Plan_Follow+0x54>
 8003226:	e028      	b.n	800327a <Plan_Follow+0x8e>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fb7e 	bl	800292c <Plan_CheckCounterValue>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d023      	beq.n	800327e <Plan_Follow+0x92>
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <Plan_Follow+0x92>
 800323c:	2302      	movs	r3, #2
 800323e:	e020      	b.n	8003282 <Plan_Follow+0x96>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <Plan_Follow+0xa8>)
 8003242:	ed93 7a00 	vldr	s14, [r3]
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <Plan_Follow+0xac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003252:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	461a      	mov	r2, r3
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800326a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	dc00      	bgt.n	8003276 <Plan_Follow+0x8a>
		break;
 8003274:	e004      	b.n	8003280 <Plan_Follow+0x94>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003276:	2302      	movs	r3, #2
 8003278:	e003      	b.n	8003282 <Plan_Follow+0x96>
	default: return 2;
 800327a:	2302      	movs	r3, #2
 800327c:	e001      	b.n	8003282 <Plan_Follow+0x96>
		break;
 800327e:	bf00      	nop
	}
	return 0;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000a84 	.word	0x20000a84
 8003290:	20000a8c 	.word	0x20000a8c
 8003294:	20000b1c 	.word	0x20000b1c
 8003298:	20000a80 	.word	0x20000a80
 800329c:	00000000 	.word	0x00000000

080032a0 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 80032ac:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <Plan_FollowLeft+0x208>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <Plan_FollowLeft+0x30>
		Plan_SetCounter();
 80032b4:	f7ff fb2a 	bl	800290c <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 80032b8:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <Plan_FollowLeft+0x20c>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c2:	ee17 2a90 	vmov	r2, s15
 80032c6:	4b7a      	ldr	r3, [pc, #488]	; (80034b0 <Plan_FollowLeft+0x210>)
 80032c8:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 80032ca:	4b77      	ldr	r3, [pc, #476]	; (80034a8 <Plan_FollowLeft+0x208>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 80032d0:	797b      	ldrb	r3, [r7, #5]
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fb47 	bl	8002968 <Plan_CheckSensor>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <Plan_FollowLeft+0x56>
 80032e0:	4b71      	ldr	r3, [pc, #452]	; (80034a8 <Plan_FollowLeft+0x208>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <Plan_FollowLeft+0x56>
		counter_status = 3;
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <Plan_FollowLeft+0x208>)
 80032ea:	2203      	movs	r2, #3
 80032ec:	701a      	strb	r2, [r3, #0]
		Run_SetReverseSpeed(0.5);
 80032ee:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80032f2:	f001 fdd5 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 3) {
 80032f6:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <Plan_FollowLeft+0x208>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d111      	bne.n	8003322 <Plan_FollowLeft+0x82>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 80032fe:	7a3b      	ldrb	r3, [r7, #8]
 8003300:	2b03      	cmp	r3, #3
 8003302:	bf28      	it	cs
 8003304:	2303      	movcs	r3, #3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fb0f 	bl	800292c <Plan_CheckCounterValue>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <Plan_FollowLeft+0x7e>
			Plan_SetCounter();
 8003314:	f7ff fafa 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8003318:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <Plan_FollowLeft+0x208>)
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800331e:	2301      	movs	r3, #1
 8003320:	e0b6      	b.n	8003490 <Plan_FollowLeft+0x1f0>
	}
	else if(counter_status == 2) {
 8003322:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <Plan_FollowLeft+0x208>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d13d      	bne.n	80033a6 <Plan_FollowLeft+0x106>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 800332a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800332e:	461a      	mov	r2, r3
 8003330:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <Plan_FollowLeft+0x214>)
 8003332:	7ddb      	ldrb	r3, [r3, #23]
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8f3 	bl	8000524 <__aeabi_i2d>
 800333e:	a356      	add	r3, pc, #344	; (adr r3, 8003498 <Plan_FollowLeft+0x1f8>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd f958 	bl	80005f8 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	f7fd fc4a 	bl	8000be8 <__aeabi_d2f>
 8003354:	4604      	mov	r4, r0
 8003356:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800335a:	461a      	mov	r2, r3
 800335c:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <Plan_FollowLeft+0x214>)
 800335e:	7ddb      	ldrb	r3, [r3, #23]
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8dd 	bl	8000524 <__aeabi_i2d>
 800336a:	a34b      	add	r3, pc, #300	; (adr r3, 8003498 <Plan_FollowLeft+0x1f8>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fd f942 	bl	80005f8 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2f>
 8003380:	4603      	mov	r3, r0
 8003382:	ee00 3a90 	vmov	s1, r3
 8003386:	ee00 4a10 	vmov	s0, r4
 800338a:	f001 fd6f 	bl	8004e6c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(3, LEFT_ALIGN_SEN) > 0) {
 800338e:	2100      	movs	r1, #0
 8003390:	2003      	movs	r0, #3
 8003392:	f7ff fae9 	bl	8002968 <Plan_CheckSensor>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <Plan_FollowLeft+0x102>
			counter_status = 4;
 800339c:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <Plan_FollowLeft+0x208>)
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e074      	b.n	8003490 <Plan_FollowLeft+0x1f0>
	}
	else if(counter_status == 4) {
 80033a6:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <Plan_FollowLeft+0x208>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d13d      	bne.n	800342a <Plan_FollowLeft+0x18a>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, a.forward_speed*plan.turn_speed*0.05);
 80033ae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <Plan_FollowLeft+0x214>)
 80033b6:	7ddb      	ldrb	r3, [r3, #23]
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f8b1 	bl	8000524 <__aeabi_i2d>
 80033c2:	a337      	add	r3, pc, #220	; (adr r3, 80034a0 <Plan_FollowLeft+0x200>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f7fd f916 	bl	80005f8 <__aeabi_dmul>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fd fc08 	bl	8000be8 <__aeabi_d2f>
 80033d8:	4604      	mov	r4, r0
 80033da:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <Plan_FollowLeft+0x214>)
 80033e2:	7ddb      	ldrb	r3, [r3, #23]
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f89b 	bl	8000524 <__aeabi_i2d>
 80033ee:	a32c      	add	r3, pc, #176	; (adr r3, 80034a0 <Plan_FollowLeft+0x200>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fd f900 	bl	80005f8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fbf2 	bl	8000be8 <__aeabi_d2f>
 8003404:	4603      	mov	r3, r0
 8003406:	ee00 3a90 	vmov	s1, r3
 800340a:	ee00 4a10 	vmov	s0, r4
 800340e:	f001 fd2d 	bl	8004e6c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 8003412:	2100      	movs	r1, #0
 8003414:	2005      	movs	r0, #5
 8003416:	f7ff faa7 	bl	8002968 <Plan_CheckSensor>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <Plan_FollowLeft+0x186>
			counter_status = 1;
 8003420:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <Plan_FollowLeft+0x208>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003426:	2301      	movs	r3, #1
 8003428:	e032      	b.n	8003490 <Plan_FollowLeft+0x1f0>
	}
	switch(a.act_mode) {
 800342a:	79bb      	ldrb	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <Plan_FollowLeft+0x196>
 8003430:	2b02      	cmp	r3, #2
 8003432:	d00c      	beq.n	800344e <Plan_FollowLeft+0x1ae>
 8003434:	e028      	b.n	8003488 <Plan_FollowLeft+0x1e8>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fa77 	bl	800292c <Plan_CheckCounterValue>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d023      	beq.n	800348c <Plan_FollowLeft+0x1ec>
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d020      	beq.n	800348c <Plan_FollowLeft+0x1ec>
 800344a:	2302      	movs	r3, #2
 800344c:	e020      	b.n	8003490 <Plan_FollowLeft+0x1f0>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 800344e:	4b17      	ldr	r3, [pc, #92]	; (80034ac <Plan_FollowLeft+0x20c>)
 8003450:	ed93 7a00 	vldr	s14, [r3]
 8003454:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <Plan_FollowLeft+0x210>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	461a      	mov	r2, r3
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	dc00      	bgt.n	8003484 <Plan_FollowLeft+0x1e4>
		break;
 8003482:	e004      	b.n	800348e <Plan_FollowLeft+0x1ee>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003484:	2302      	movs	r3, #2
 8003486:	e003      	b.n	8003490 <Plan_FollowLeft+0x1f0>
	default: return 2;
 8003488:	2302      	movs	r3, #2
 800348a:	e001      	b.n	8003490 <Plan_FollowLeft+0x1f0>
		break;
 800348c:	bf00      	nop
	}
	return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	9999999a 	.word	0x9999999a
 800349c:	3fb99999 	.word	0x3fb99999
 80034a0:	9999999a 	.word	0x9999999a
 80034a4:	3fa99999 	.word	0x3fa99999
 80034a8:	20000a84 	.word	0x20000a84
 80034ac:	20000b1c 	.word	0x20000b1c
 80034b0:	20000a80 	.word	0x20000a80
 80034b4:	20000d60 	.word	0x20000d60

080034b8 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 80034c4:	4b7e      	ldr	r3, [pc, #504]	; (80036c0 <Plan_FollowRight+0x208>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <Plan_FollowRight+0x30>
		Plan_SetCounter();
 80034cc:	f7ff fa1e 	bl	800290c <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 80034d0:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <Plan_FollowRight+0x20c>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034da:	ee17 2a90 	vmov	r2, s15
 80034de:	4b7a      	ldr	r3, [pc, #488]	; (80036c8 <Plan_FollowRight+0x210>)
 80034e0:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 80034e2:	4b77      	ldr	r3, [pc, #476]	; (80036c0 <Plan_FollowRight+0x208>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 80034e8:	797b      	ldrb	r3, [r7, #5]
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fa3b 	bl	8002968 <Plan_CheckSensor>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <Plan_FollowRight+0x56>
 80034f8:	4b71      	ldr	r3, [pc, #452]	; (80036c0 <Plan_FollowRight+0x208>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <Plan_FollowRight+0x56>
		counter_status = 3;
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <Plan_FollowRight+0x208>)
 8003502:	2203      	movs	r2, #3
 8003504:	701a      	strb	r2, [r3, #0]
		Run_SetReverseSpeed(0.5);
 8003506:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800350a:	f001 fcc9 	bl	8004ea0 <Run_SetReverseSpeed>
	}
	if(counter_status == 3) {
 800350e:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <Plan_FollowRight+0x208>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d111      	bne.n	800353a <Plan_FollowRight+0x82>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8003516:	7a3b      	ldrb	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	bf28      	it	cs
 800351c:	2303      	movcs	r3, #3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fa03 	bl	800292c <Plan_CheckCounterValue>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <Plan_FollowRight+0x7e>
			Plan_SetCounter();
 800352c:	f7ff f9ee 	bl	800290c <Plan_SetCounter>
			counter_status = 2;
 8003530:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <Plan_FollowRight+0x208>)
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003536:	2301      	movs	r3, #1
 8003538:	e0b6      	b.n	80036a8 <Plan_FollowRight+0x1f0>
	}
	else if(counter_status == 2) {
 800353a:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <Plan_FollowRight+0x208>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d13d      	bne.n	80035be <Plan_FollowRight+0x106>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8003542:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003546:	461a      	mov	r2, r3
 8003548:	4b60      	ldr	r3, [pc, #384]	; (80036cc <Plan_FollowRight+0x214>)
 800354a:	7ddb      	ldrb	r3, [r3, #23]
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc ffe7 	bl	8000524 <__aeabi_i2d>
 8003556:	a356      	add	r3, pc, #344	; (adr r3, 80036b0 <Plan_FollowRight+0x1f8>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fd f84c 	bl	80005f8 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb3e 	bl	8000be8 <__aeabi_d2f>
 800356c:	4604      	mov	r4, r0
 800356e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003572:	461a      	mov	r2, r3
 8003574:	4b55      	ldr	r3, [pc, #340]	; (80036cc <Plan_FollowRight+0x214>)
 8003576:	7ddb      	ldrb	r3, [r3, #23]
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ffd1 	bl	8000524 <__aeabi_i2d>
 8003582:	a34b      	add	r3, pc, #300	; (adr r3, 80036b0 <Plan_FollowRight+0x1f8>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fd f836 	bl	80005f8 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	f7fd fb28 	bl	8000be8 <__aeabi_d2f>
 8003598:	4603      	mov	r3, r0
 800359a:	ee00 3a90 	vmov	s1, r3
 800359e:	ee00 4a10 	vmov	s0, r4
 80035a2:	f001 fc63 	bl	8004e6c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(3, RIGHT_ALIGN_SEN) > 0) {
 80035a6:	2101      	movs	r1, #1
 80035a8:	2003      	movs	r0, #3
 80035aa:	f7ff f9dd 	bl	8002968 <Plan_CheckSensor>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <Plan_FollowRight+0x102>
			counter_status = 4;
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <Plan_FollowRight+0x208>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e074      	b.n	80036a8 <Plan_FollowRight+0x1f0>
	}
	else if(counter_status == 4) {
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <Plan_FollowRight+0x208>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d13d      	bne.n	8003642 <Plan_FollowRight+0x18a>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.05, a.reverse_speed*plan.turn_speed*0.05);
 80035c6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <Plan_FollowRight+0x214>)
 80035ce:	7ddb      	ldrb	r3, [r3, #23]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffa5 	bl	8000524 <__aeabi_i2d>
 80035da:	a337      	add	r3, pc, #220	; (adr r3, 80036b8 <Plan_FollowRight+0x200>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f80a 	bl	80005f8 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fd fafc 	bl	8000be8 <__aeabi_d2f>
 80035f0:	4604      	mov	r4, r0
 80035f2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b34      	ldr	r3, [pc, #208]	; (80036cc <Plan_FollowRight+0x214>)
 80035fa:	7ddb      	ldrb	r3, [r3, #23]
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc ff8f 	bl	8000524 <__aeabi_i2d>
 8003606:	a32c      	add	r3, pc, #176	; (adr r3, 80036b8 <Plan_FollowRight+0x200>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fc fff4 	bl	80005f8 <__aeabi_dmul>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	f7fd fae6 	bl	8000be8 <__aeabi_d2f>
 800361c:	4603      	mov	r3, r0
 800361e:	ee00 3a90 	vmov	s1, r3
 8003622:	ee00 4a10 	vmov	s0, r4
 8003626:	f001 fc21 	bl	8004e6c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 800362a:	2101      	movs	r1, #1
 800362c:	2005      	movs	r0, #5
 800362e:	f7ff f99b 	bl	8002968 <Plan_CheckSensor>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <Plan_FollowRight+0x186>
			counter_status = 1;
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <Plan_FollowRight+0x208>)
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800363e:	2301      	movs	r3, #1
 8003640:	e032      	b.n	80036a8 <Plan_FollowRight+0x1f0>
	}
	switch(a.act_mode) {
 8003642:	79bb      	ldrb	r3, [r7, #6]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <Plan_FollowRight+0x196>
 8003648:	2b02      	cmp	r3, #2
 800364a:	d00c      	beq.n	8003666 <Plan_FollowRight+0x1ae>
 800364c:	e028      	b.n	80036a0 <Plan_FollowRight+0x1e8>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f96b 	bl	800292c <Plan_CheckCounterValue>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d023      	beq.n	80036a4 <Plan_FollowRight+0x1ec>
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d020      	beq.n	80036a4 <Plan_FollowRight+0x1ec>
 8003662:	2302      	movs	r3, #2
 8003664:	e020      	b.n	80036a8 <Plan_FollowRight+0x1f0>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <Plan_FollowRight+0x20c>)
 8003668:	ed93 7a00 	vldr	s14, [r3]
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <Plan_FollowRight+0x210>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	461a      	mov	r2, r3
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	dc00      	bgt.n	800369c <Plan_FollowRight+0x1e4>
		break;
 800369a:	e004      	b.n	80036a6 <Plan_FollowRight+0x1ee>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 800369c:	2302      	movs	r3, #2
 800369e:	e003      	b.n	80036a8 <Plan_FollowRight+0x1f0>
	default: return 2;
 80036a0:	2302      	movs	r3, #2
 80036a2:	e001      	b.n	80036a8 <Plan_FollowRight+0x1f0>
		break;
 80036a4:	bf00      	nop
	}
	return 0;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}
 80036b0:	9999999a 	.word	0x9999999a
 80036b4:	3fb99999 	.word	0x3fb99999
 80036b8:	9999999a 	.word	0x9999999a
 80036bc:	3fa99999 	.word	0x3fa99999
 80036c0:	20000a84 	.word	0x20000a84
 80036c4:	20000b1c 	.word	0x20000b1c
 80036c8:	20000a80 	.word	0x20000a80
 80036cc:	20000d60 	.word	0x20000d60

080036d0 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 80036dc:	797b      	ldrb	r3, [r7, #5]
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f941 	bl	8002968 <Plan_CheckSensor>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <Plan_Invert+0x24>
		SEN_Invert();
 80036ec:	f001 fea0 	bl	8005430 <SEN_Invert>
		return 2;
 80036f0:	2302      	movs	r3, #2
 80036f2:	e000      	b.n	80036f6 <Plan_Invert+0x26>
	}
	return 0;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 800370a:	2302      	movs	r3, #2
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 8003724:	2302      	movs	r3, #2
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <Plan_Jump>:

uint8_t Plan_Jump(Action_typedef a) {
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(a.act_value > 0) num_index = a.act_value-1;
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <Plan_Jump+0x1c>
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	3b01      	subs	r3, #1
 800374a:	b2da      	uxtb	r2, r3
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <Plan_Jump+0x2c>)
 800374e:	701a      	strb	r2, [r3, #0]
	return 2;
 8003750:	2302      	movs	r3, #2
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000cd9 	.word	0x20000cd9

08003764 <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	f107 040c 	add.w	r4, r7, #12
 800376e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003772:	ed87 0a02 	vstr	s0, [r7, #8]
 8003776:	71fb      	strb	r3, [r7, #7]
	static uint8_t stat = 0;
	static uint8_t _speed = 0;
	if(counter_status == 0) {
 8003778:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <Plan_ActionInit+0x154>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d104      	bne.n	800378a <Plan_ActionInit+0x26>
		Plan_SetCounter();
 8003780:	f7ff f8c4 	bl	800290c <Plan_SetCounter>
		counter_status = 1;
 8003784:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <Plan_ActionInit+0x154>)
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f8cd 	bl	800292c <Plan_CheckCounterValue>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <Plan_ActionInit+0x4c>
 8003798:	4b48      	ldr	r3, [pc, #288]	; (80038bc <Plan_ActionInit+0x158>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <Plan_ActionInit+0x4c>
		counter_status = 0;
 80037a0:	4b45      	ldr	r3, [pc, #276]	; (80038b8 <Plan_ActionInit+0x154>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
		stat = 1;
 80037a6:	4b45      	ldr	r3, [pc, #276]	; (80038bc <Plan_ActionInit+0x158>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
		return 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e07f      	b.n	80038b0 <Plan_ActionInit+0x14c>
	}

	_speed = sp;
 80037b0:	4a43      	ldr	r2, [pc, #268]	; (80038c0 <Plan_ActionInit+0x15c>)
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	7013      	strb	r3, [r2, #0]

	if(stat == 0) return 0;
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <Plan_ActionInit+0x158>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <Plan_ActionInit+0x5e>
 80037be:	2300      	movs	r3, #0
 80037c0:	e076      	b.n	80038b0 <Plan_ActionInit+0x14c>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 80037c2:	7d3b      	ldrb	r3, [r7, #20]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f8b1 	bl	800292c <Plan_CheckCounterValue>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <Plan_ActionInit+0x84>
 80037d0:	4b3a      	ldr	r3, [pc, #232]	; (80038bc <Plan_ActionInit+0x158>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <Plan_ActionInit+0x84>
		counter_status = 0;
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <Plan_ActionInit+0x154>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
//		acc_status = 0;
		stat = 0;
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <Plan_ActionInit+0x158>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
		return 3;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e063      	b.n	80038b0 <Plan_ActionInit+0x14c>
//		}
//	}
//	else if(acc_status == 2) {

		float range;
		if(fabsf(a.boost_speed - _speed) < plan.acc) range = fabsf(a.boost_speed - _speed);
 80037e8:	7d7b      	ldrb	r3, [r7, #21]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <Plan_ActionInit+0x15c>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fa:	eeb0 7ae7 	vabs.f32	s14, s15
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <Plan_ActionInit+0x160>)
 8003800:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	d50d      	bpl.n	800382a <Plan_ActionInit+0xc6>
 800380e:	7d7b      	ldrb	r3, [r7, #21]
 8003810:	461a      	mov	r2, r3
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <Plan_ActionInit+0x15c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003820:	eef0 7ae7 	vabs.f32	s15, s15
 8003824:	edc7 7a07 	vstr	s15, [r7, #28]
 8003828:	e002      	b.n	8003830 <Plan_ActionInit+0xcc>
		else range = plan.acc;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <Plan_ActionInit+0x160>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	61fb      	str	r3, [r7, #28]

		if(a.boost_speed > _speed) _speed += range;
 8003830:	7d7a      	ldrb	r2, [r7, #21]
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <Plan_ActionInit+0x15c>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d912      	bls.n	8003860 <Plan_ActionInit+0xfc>
 800383a:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <Plan_ActionInit+0x15c>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003846:	edd7 7a07 	vldr	s15, [r7, #28]
 800384a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003852:	edc7 7a00 	vstr	s15, [r7]
 8003856:	783b      	ldrb	r3, [r7, #0]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <Plan_ActionInit+0x15c>)
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e016      	b.n	800388e <Plan_ActionInit+0x12a>
		else if(a.boost_speed < _speed) _speed -= range;
 8003860:	7d7a      	ldrb	r2, [r7, #21]
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <Plan_ActionInit+0x15c>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d211      	bcs.n	800388e <Plan_ActionInit+0x12a>
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <Plan_ActionInit+0x15c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003876:	edd7 7a07 	vldr	s15, [r7, #28]
 800387a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003882:	edc7 7a00 	vstr	s15, [r7]
 8003886:	783b      	ldrb	r3, [r7, #0]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <Plan_ActionInit+0x15c>)
 800388c:	701a      	strb	r2, [r3, #0]

//		_speed = a.boost_speed;
//	}
	Run_LineTracing(_speed, period, plan.status_pid);
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <Plan_ActionInit+0x15c>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <Plan_ActionInit+0x160>)
 800389c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038a0:	4618      	mov	r0, r3
 80038a2:	edd7 0a02 	vldr	s1, [r7, #8]
 80038a6:	eeb0 0a67 	vmov.f32	s0, s15
 80038aa:	f001 fa51 	bl	8004d50 <Run_LineTracing>
//	Run_LineTracing(a.boost_speed, period, 0);
	return 1;
 80038ae:	2301      	movs	r3, #1
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3724      	adds	r7, #36	; 0x24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}
 80038b8:	20000a84 	.word	0x20000a84
 80038bc:	20000a89 	.word	0x20000a89
 80038c0:	20000a8a 	.word	0x20000a8a
 80038c4:	20000d60 	.word	0x20000d60

080038c8 <Plan_Stop>:
	}
	return 0;
}


uint8_t Plan_Stop() {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 80038cc:	eddf 0a14 	vldr	s1, [pc, #80]	; 8003920 <Plan_Stop+0x58>
 80038d0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003920 <Plan_Stop+0x58>
 80038d4:	f001 faca 	bl	8004e6c <Run_SetMotorSpeed>
	SEN_BlackLine();
 80038d8:	f001 fd92 	bl	8005400 <SEN_BlackLine>
	num_checkpoint = 0;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <Plan_Stop+0x5c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <Plan_Stop+0x5c>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <Plan_Stop+0x60>)
 80038ea:	4413      	add	r3, r2
 80038ec:	789a      	ldrb	r2, [r3, #2]
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <Plan_Stop+0x64>)
 80038f0:	701a      	strb	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <Plan_Stop+0x68>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <Plan_Stop+0x68>)
 80038fe:	701a      	strb	r2, [r3, #0]
	run_counter++;
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <Plan_Stop+0x6c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <Plan_Stop+0x6c>)
 800390a:	701a      	strb	r2, [r3, #0]
	if(run_counter > 30) {
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <Plan_Stop+0x6c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b1e      	cmp	r3, #30
 8003912:	d901      	bls.n	8003918 <Plan_Stop+0x50>
		HAL_NVIC_SystemReset();
 8003914:	f007 f889 	bl	800aa2a <HAL_NVIC_SystemReset>
	}
	return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	00000000 	.word	0x00000000
 8003924:	20000cd8 	.word	0x20000cd8
 8003928:	20000d60 	.word	0x20000d60
 800392c:	20000cd9 	.word	0x20000cd9
 8003930:	20000a6c 	.word	0x20000a6c
 8003934:	20000a6d 	.word	0x20000a6d

08003938 <Plan_Start>:

void Plan_Start() {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <Plan_Start+0x70>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <Plan_Start+0x74>)
 8003944:	4413      	add	r3, r2
 8003946:	789a      	ldrb	r2, [r3, #2]
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <Plan_Start+0x78>)
 800394a:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 800394c:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <Plan_Start+0x78>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f002 fa73 	bl	8005e3c <GetActionSequenceInit>
	action_status = 0;
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <Plan_Start+0x7c>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <Plan_Start+0x80>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <Plan_Start+0x84>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
	sum_error = 0;
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <Plan_Start+0x88>)
 800396a:	2200      	movs	r2, #0
 800396c:	801a      	strh	r2, [r3, #0]
	kp = plan.kpid[0];
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <Plan_Start+0x74>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <Plan_Start+0x8c>)
 8003974:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <Plan_Start+0x74>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <Plan_Start+0x90>)
 800397c:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <Plan_Start+0x74>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <Plan_Start+0x94>)
 8003984:	6013      	str	r3, [r2, #0]
	alpha = plan.alpha;
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <Plan_Start+0x74>)
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <Plan_Start+0x98>)
 800398c:	6013      	str	r3, [r2, #0]
//	Run_SetMotorAccl(100);
	speed_now = plan.speed;
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <Plan_Start+0x74>)
 8003990:	7d9a      	ldrb	r2, [r3, #22]
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <Plan_Start+0x9c>)
 8003994:	701a      	strb	r2, [r3, #0]
	main_flag |= MAIN_FLAG_RUN;
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <Plan_Start+0xa0>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <Plan_Start+0xa0>)
 80039a2:	701a      	strb	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000cd8 	.word	0x20000cd8
 80039ac:	20000d60 	.word	0x20000d60
 80039b0:	20000cd9 	.word	0x20000cd9
 80039b4:	20000a85 	.word	0x20000a85
 80039b8:	20000a78 	.word	0x20000a78
 80039bc:	20000a7c 	.word	0x20000a7c
 80039c0:	20000b3c 	.word	0x20000b3c
 80039c4:	20000b2c 	.word	0x20000b2c
 80039c8:	20000b30 	.word	0x20000b30
 80039cc:	20000b34 	.word	0x20000b34
 80039d0:	20000b38 	.word	0x20000b38
 80039d4:	20000a87 	.word	0x20000a87
 80039d8:	20000a6c 	.word	0x20000a6c

080039dc <Plan_UIRoutine>:

void Plan_UIRoutine() {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <Plan_UIRoutine+0x48>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <Plan_UIRoutine+0x48>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <Plan_UIRoutine+0x4c>)
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	463b      	mov	r3, r7
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fd98 	bl	8005538 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <Plan_UIRoutine+0x48>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <Plan_UIRoutine+0x48>)
 8003a14:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 8003a16:	e001      	b.n	8003a1c <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 8003a18:	f002 f984 	bl	8005d24 <GetActionSequenceRoutine>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000a6c 	.word	0x20000a6c
 8003a28:	20000cd9 	.word	0x20000cd9

08003a2c <Plan_Main>:

uint8_t retval;
void Plan_Main(float period) {
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 8003a36:	4bb2      	ldr	r3, [pc, #712]	; (8003d00 <Plan_Main+0x2d4>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 81c1 	beq.w	8003dc6 <Plan_Main+0x39a>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003a44:	4bae      	ldr	r3, [pc, #696]	; (8003d00 <Plan_Main+0x2d4>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 81b5 	bne.w	8003dbc <Plan_Main+0x390>
//			Run_LineTracing(speed_now, period, plan.status_pid);
		}
		else {

			if(retval == 0) {
 8003a52:	4bac      	ldr	r3, [pc, #688]	; (8003d04 <Plan_Main+0x2d8>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d110      	bne.n	8003a7c <Plan_Main+0x50>
				Run_LineTracing(speed_now, period, plan.status_pid);
 8003a5a:	4bab      	ldr	r3, [pc, #684]	; (8003d08 <Plan_Main+0x2dc>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	4ba9      	ldr	r3, [pc, #676]	; (8003d0c <Plan_Main+0x2e0>)
 8003a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	f001 f96b 	bl	8004d50 <Run_LineTracing>
 8003a7a:	e049      	b.n	8003b10 <Plan_Main+0xe4>
			}
			else if(retval == 2){
 8003a7c:	4ba1      	ldr	r3, [pc, #644]	; (8003d04 <Plan_Main+0x2d8>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d13b      	bne.n	8003afc <Plan_Main+0xd0>
				sum_error = 0;
 8003a84:	4ba2      	ldr	r3, [pc, #648]	; (8003d10 <Plan_Main+0x2e4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	801a      	strh	r2, [r3, #0]
				counter_status = 0;
 8003a8a:	4ba2      	ldr	r3, [pc, #648]	; (8003d14 <Plan_Main+0x2e8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 8003a90:	4ba1      	ldr	r3, [pc, #644]	; (8003d18 <Plan_Main+0x2ec>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
				autoturn_stat = 0;
 8003a96:	4ba1      	ldr	r3, [pc, #644]	; (8003d1c <Plan_Main+0x2f0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
				speed_now = plan.speed;
 8003a9c:	4b9b      	ldr	r3, [pc, #620]	; (8003d0c <Plan_Main+0x2e0>)
 8003a9e:	7d9a      	ldrb	r2, [r3, #22]
 8003aa0:	4b99      	ldr	r3, [pc, #612]	; (8003d08 <Plan_Main+0x2dc>)
 8003aa2:	701a      	strb	r2, [r3, #0]
				num_index++;
 8003aa4:	4b9e      	ldr	r3, [pc, #632]	; (8003d20 <Plan_Main+0x2f4>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	4b9c      	ldr	r3, [pc, #624]	; (8003d20 <Plan_Main+0x2f4>)
 8003aae:	701a      	strb	r2, [r3, #0]
				if(num_index == plan.num_action) {
 8003ab0:	4b96      	ldr	r3, [pc, #600]	; (8003d0c <Plan_Main+0x2e0>)
 8003ab2:	785a      	ldrb	r2, [r3, #1]
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	; (8003d20 <Plan_Main+0x2f4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d102      	bne.n	8003ac2 <Plan_Main+0x96>
					Plan_Stop();
 8003abc:	f7ff ff04 	bl	80038c8 <Plan_Stop>
					return;
 8003ac0:	e181      	b.n	8003dc6 <Plan_Main+0x39a>
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 8003ac2:	4b98      	ldr	r3, [pc, #608]	; (8003d24 <Plan_Main+0x2f8>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4a90      	ldr	r2, [pc, #576]	; (8003d0c <Plan_Main+0x2e0>)
 8003aca:	4413      	add	r3, r2
 8003acc:	789a      	ldrb	r2, [r3, #2]
 8003ace:	4b94      	ldr	r3, [pc, #592]	; (8003d20 <Plan_Main+0x2f4>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d805      	bhi.n	8003ae2 <Plan_Main+0xb6>
					num_checkpoint++;
 8003ad6:	4b93      	ldr	r3, [pc, #588]	; (8003d24 <Plan_Main+0x2f8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b91      	ldr	r3, [pc, #580]	; (8003d24 <Plan_Main+0x2f8>)
 8003ae0:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 8003ae2:	f002 f8cf 	bl	8005c84 <GetActionSequence>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d111      	bne.n	8003b10 <Plan_Main+0xe4>
					main_flag |= MAIN_FLAG_NEXT;
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <Plan_Main+0x2d4>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4b82      	ldr	r3, [pc, #520]	; (8003d00 <Plan_Main+0x2d4>)
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e009      	b.n	8003b10 <Plan_Main+0xe4>
			}
			else if(retval == 3){
 8003afc:	4b81      	ldr	r3, [pc, #516]	; (8003d04 <Plan_Main+0x2d8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d105      	bne.n	8003b10 <Plan_Main+0xe4>
				counter_status = 0;
 8003b04:	4b83      	ldr	r3, [pc, #524]	; (8003d14 <Plan_Main+0x2e8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
				action_status = 2;
 8003b0a:	4b83      	ldr	r3, [pc, #524]	; (8003d18 <Plan_Main+0x2ec>)
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
			}

			speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
 8003b10:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <Plan_Main+0x2fc>)
 8003b12:	7a9b      	ldrb	r3, [r3, #10]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <Plan_Main+0xf2>
 8003b18:	4b7c      	ldr	r3, [pc, #496]	; (8003d0c <Plan_Main+0x2e0>)
 8003b1a:	7d9b      	ldrb	r3, [r3, #22]
 8003b1c:	e001      	b.n	8003b22 <Plan_Main+0xf6>
 8003b1e:	4b82      	ldr	r3, [pc, #520]	; (8003d28 <Plan_Main+0x2fc>)
 8003b20:	7a9b      	ldrb	r3, [r3, #10]
 8003b22:	4a79      	ldr	r2, [pc, #484]	; (8003d08 <Plan_Main+0x2dc>)
 8003b24:	7013      	strb	r3, [r2, #0]
			if(action_status == 0) {
 8003b26:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <Plan_Main+0x2ec>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d111      	bne.n	8003b52 <Plan_Main+0x126>
				switch(GET_LINE_COLOR_STAT(plan_active.status)) {
 8003b2e:	4b7e      	ldr	r3, [pc, #504]	; (8003d28 <Plan_Main+0x2fc>)
 8003b30:	7adb      	ldrb	r3, [r3, #11]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d002      	beq.n	8003b40 <Plan_Main+0x114>
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d003      	beq.n	8003b46 <Plan_Main+0x11a>
 8003b3e:	e005      	b.n	8003b4c <Plan_Main+0x120>
				case LINE_COLOR_STAT_BLACK: SEN_BlackLine(); break;
 8003b40:	f001 fc5e 	bl	8005400 <SEN_BlackLine>
 8003b44:	e002      	b.n	8003b4c <Plan_Main+0x120>
				case LINE_COLOR_STAT_WHITE: SEN_WhiteLine(); break;
 8003b46:	f001 fc67 	bl	8005418 <SEN_WhiteLine>
 8003b4a:	bf00      	nop
				}
				action_status = 1;
 8003b4c:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <Plan_Main+0x2ec>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
			}

			if(action_status <= 1 && 				 \
 8003b52:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <Plan_Main+0x2ec>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d81f      	bhi.n	8003b9a <Plan_Main+0x16e>
					(plan_active.act != PLAN_STOP && \
 8003b5a:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <Plan_Main+0x2fc>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
			if(action_status <= 1 && 				 \
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01b      	beq.n	8003b9a <Plan_Main+0x16e>
					 plan_active.act != PLAN_NULL && \
 8003b62:	4b71      	ldr	r3, [pc, #452]	; (8003d28 <Plan_Main+0x2fc>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
					(plan_active.act != PLAN_STOP && \
 8003b66:	2b09      	cmp	r3, #9
 8003b68:	d017      	beq.n	8003b9a <Plan_Main+0x16e>
					 plan_active.act != PLAN_JUMP)) {
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <Plan_Main+0x2fc>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_NULL && \
 8003b6e:	2b0b      	cmp	r3, #11
 8003b70:	d013      	beq.n	8003b9a <Plan_Main+0x16e>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <Plan_Main+0x2dc>)
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	4b6c      	ldr	r3, [pc, #432]	; (8003d28 <Plan_Main+0x2fc>)
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	685c      	ldr	r4, [r3, #4]
 8003b7e:	4621      	mov	r1, r4
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	461c      	mov	r4, r3
 8003b84:	4613      	mov	r3, r2
 8003b86:	ed97 0a01 	vldr	s0, [r7, #4]
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	f7ff fdea 	bl	8003764 <Plan_ActionInit>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <Plan_Main+0x2d8>)
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e110      	b.n	8003dbc <Plan_Main+0x390>
			}
			else {
				switch(plan_active.act) {
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <Plan_Main+0x2fc>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	f200 8109 	bhi.w	8003db6 <Plan_Main+0x38a>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <Plan_Main+0x180>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003c11 	.word	0x08003c11
 8003bb8:	08003c33 	.word	0x08003c33
 8003bbc:	08003c57 	.word	0x08003c57
 8003bc0:	08003c79 	.word	0x08003c79
 8003bc4:	08003c9b 	.word	0x08003c9b
 8003bc8:	08003cbd 	.word	0x08003cbd
 8003bcc:	08003cdf 	.word	0x08003cdf
 8003bd0:	08003d2d 	.word	0x08003d2d
 8003bd4:	08003d4f 	.word	0x08003d4f
 8003bd8:	08003d73 	.word	0x08003d73
 8003bdc:	08003d95 	.word	0x08003d95
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 8003be0:	f7ff fe72 	bl	80038c8 <Plan_Stop>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <Plan_Main+0x2d8>)
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e0e6      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 8003bee:	4b4e      	ldr	r3, [pc, #312]	; (8003d28 <Plan_Main+0x2fc>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	6858      	ldr	r0, [r3, #4]
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6898      	ldr	r0, [r3, #8]
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	f7fe fef5 	bl	80029f0 <Plan_Left>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <Plan_Main+0x2d8>)
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e0d5      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 8003c10:	4b45      	ldr	r3, [pc, #276]	; (8003d28 <Plan_Main+0x2fc>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4611      	mov	r1, r2
 8003c16:	6858      	ldr	r0, [r3, #4]
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6898      	ldr	r0, [r3, #8]
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4611      	mov	r1, r2
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fe fff8 	bl	8002c18 <Plan_Right>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <Plan_Main+0x2d8>)
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e0c4      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <Plan_Main+0x2dc>)
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	4b3c      	ldr	r3, [pc, #240]	; (8003d28 <Plan_Main+0x2fc>)
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	685c      	ldr	r4, [r3, #4]
 8003c3e:	4621      	mov	r1, r4
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	461c      	mov	r4, r3
 8003c44:	4613      	mov	r3, r2
 8003c46:	4622      	mov	r2, r4
 8003c48:	f7ff f8f8 	bl	8002e3c <Plan_Forward>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <Plan_Main+0x2d8>)
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e0b2      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 8003c56:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <Plan_Main+0x2fc>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	6858      	ldr	r0, [r3, #4]
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6898      	ldr	r0, [r3, #8]
 8003c62:	4603      	mov	r3, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f7ff fabf 	bl	80031ec <Plan_Follow>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <Plan_Main+0x2d8>)
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e0a1      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 8003c78:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <Plan_Main+0x2fc>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	6858      	ldr	r0, [r3, #4]
 8003c80:	4602      	mov	r2, r0
 8003c82:	6898      	ldr	r0, [r3, #8]
 8003c84:	4603      	mov	r3, r0
 8003c86:	4608      	mov	r0, r1
 8003c88:	4611      	mov	r1, r2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f7ff fb08 	bl	80032a0 <Plan_FollowLeft>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <Plan_Main+0x2d8>)
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e090      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 8003c9a:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <Plan_Main+0x2fc>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	6858      	ldr	r0, [r3, #4]
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6898      	ldr	r0, [r3, #8]
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	f7ff fc03 	bl	80034b8 <Plan_FollowRight>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <Plan_Main+0x2d8>)
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e07f      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <Plan_Main+0x2fc>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	6858      	ldr	r0, [r3, #4]
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6898      	ldr	r0, [r3, #8]
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4608      	mov	r0, r1
 8003ccc:	4611      	mov	r1, r2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7ff fcfe 	bl	80036d0 <Plan_Invert>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <Plan_Main+0x2d8>)
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e06e      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <Plan_Main+0x2fc>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	6858      	ldr	r0, [r3, #4]
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6898      	ldr	r0, [r3, #8]
 8003cea:	4603      	mov	r3, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f7ff fd04 	bl	80036fe <Plan_NextPlan>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b02      	ldr	r3, [pc, #8]	; (8003d04 <Plan_Main+0x2d8>)
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e05d      	b.n	8003dbc <Plan_Main+0x390>
 8003d00:	20000a6c 	.word	0x20000a6c
 8003d04:	20000a88 	.word	0x20000a88
 8003d08:	20000a87 	.word	0x20000a87
 8003d0c:	20000d60 	.word	0x20000d60
 8003d10:	20000b3c 	.word	0x20000b3c
 8003d14:	20000a84 	.word	0x20000a84
 8003d18:	20000a85 	.word	0x20000a85
 8003d1c:	20000a86 	.word	0x20000a86
 8003d20:	20000cd9 	.word	0x20000cd9
 8003d24:	20000cd8 	.word	0x20000cd8
 8003d28:	20000d50 	.word	0x20000d50
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 8003d2c:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <Plan_Main+0x3a0>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4611      	mov	r1, r2
 8003d32:	6858      	ldr	r0, [r3, #4]
 8003d34:	4602      	mov	r2, r0
 8003d36:	6898      	ldr	r0, [r3, #8]
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f7ff fcea 	bl	8003718 <Plan_Null>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <Plan_Main+0x3a4>)
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e036      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <Plan_Main+0x3a8>)
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <Plan_Main+0x3a0>)
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	4608      	mov	r0, r1
 8003d58:	685c      	ldr	r4, [r3, #4]
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	461c      	mov	r4, r3
 8003d60:	4613      	mov	r3, r2
 8003d62:	4622      	mov	r2, r4
 8003d64:	f7ff f91c 	bl	8002fa0 <Plan_Backward>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <Plan_Main+0x3a4>)
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e024      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_JUMP: 	retval = Plan_Jump(plan_active); 		break;
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <Plan_Main+0x3a0>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4611      	mov	r1, r2
 8003d78:	6858      	ldr	r0, [r3, #4]
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6898      	ldr	r0, [r3, #8]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	f7ff fcd5 	bl	8003734 <Plan_Jump>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <Plan_Main+0x3a4>)
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e013      	b.n	8003dbc <Plan_Main+0x390>
				case PLAN_IDLE: 	retval = Plan_Idle(plan_active); 		break;
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <Plan_Main+0x3a0>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	6858      	ldr	r0, [r3, #4]
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6898      	ldr	r0, [r3, #8]
 8003da0:	4603      	mov	r3, r0
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	f7ff f9ae 	bl	8003108 <Plan_Idle>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <Plan_Main+0x3a4>)
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e002      	b.n	8003dbc <Plan_Main+0x390>
				default: retval = 2;
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <Plan_Main+0x3a4>)
 8003db8:	2202      	movs	r2, #2
 8003dba:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		plan_counter++;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <Plan_Main+0x3ac>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <Plan_Main+0x3ac>)
 8003dc4:	6013      	str	r3, [r2, #0]
	}
}
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}
 8003dcc:	20000d50 	.word	0x20000d50
 8003dd0:	20000a88 	.word	0x20000a88
 8003dd4:	20000a87 	.word	0x20000a87
 8003dd8:	20000a78 	.word	0x20000a78

08003ddc <Run_Init>:
float robot_enc_pos = 0;
float robot_enc_yawpos = 0;

float temp_yaw_speed;

void Run_Init() {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8003de0:	2290      	movs	r2, #144	; 0x90
 8003de2:	2100      	movs	r1, #0
 8003de4:	482a      	ldr	r0, [pc, #168]	; (8003e90 <Run_Init+0xb4>)
 8003de6:	f00b fe92 	bl	800fb0e <memset>

	motor[0].mode = MOTOR_MODE_OPEN;
 8003dea:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <Run_Init+0xb4>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <Run_Init+0xb4>)
 8003df2:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <Run_Init+0xb8>)
 8003df4:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <Run_Init+0xb4>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <Run_Init+0xb4>)
 8003dfe:	2204      	movs	r2, #4
 8003e00:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <Run_Init+0xb4>)
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <Run_Init+0xbc>)
 8003e06:	611a      	str	r2, [r3, #16]
	motor[0].dir = -1;
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <Run_Init+0xb4>)
 8003e0a:	22ff      	movs	r2, #255	; 0xff
 8003e0c:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.01;
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <Run_Init+0xb4>)
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <Run_Init+0xc0>)
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].vel_factor = 0.625;
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <Run_Init+0xb4>)
 8003e16:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <Run_Init+0xc4>)
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].kp = 2;
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <Run_Init+0xb4>)
 8003e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
	motor[0].ki = 15;
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <Run_Init+0xb4>)
 8003e24:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <Run_Init+0xc8>)
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34
	motor[0].filter_alpha = 0.5;
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <Run_Init+0xb4>)
 8003e2a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003e2e:	645a      	str	r2, [r3, #68]	; 0x44

	motor[1].mode = motor[0].mode;
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <Run_Init+0xb4>)
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <Run_Init+0xb4>)
 8003e36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	motor[1].pwm_htim = &htim3;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <Run_Init+0xb4>)
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <Run_Init+0xb8>)
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[1].ch1 = TIM_CHANNEL_4;
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <Run_Init+0xb4>)
 8003e42:	220c      	movs	r2, #12
 8003e44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	motor[1].ch2 = TIM_CHANNEL_3;
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <Run_Init+0xb4>)
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	motor[1].enc_htim = &htim4;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <Run_Init+0xb4>)
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <Run_Init+0xcc>)
 8003e54:	659a      	str	r2, [r3, #88]	; 0x58
	motor[1].dir = 1;
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <Run_Init+0xb4>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	motor[1].pwm_factor = 0.0097;
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <Run_Init+0xb4>)
 8003e60:	4a12      	ldr	r2, [pc, #72]	; (8003eac <Run_Init+0xd0>)
 8003e62:	66da      	str	r2, [r3, #108]	; 0x6c
	motor[1].vel_factor = 0.625;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <Run_Init+0xb4>)
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <Run_Init+0xc4>)
 8003e68:	675a      	str	r2, [r3, #116]	; 0x74
	motor[1].kp = motor[0].kp;
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <Run_Init+0xb4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <Run_Init+0xb4>)
 8003e70:	6793      	str	r3, [r2, #120]	; 0x78
	motor[1].ki = motor[0].ki;
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <Run_Init+0xb4>)
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <Run_Init+0xb4>)
 8003e78:	67d3      	str	r3, [r2, #124]	; 0x7c
	motor[1].filter_alpha = motor[0].filter_alpha;
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <Run_Init+0xb4>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <Run_Init+0xb4>)
 8003e80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	robot_enc_pos = 0;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <Run_Init+0xd4>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000a8c 	.word	0x20000a8c
 8003e94:	20000e24 	.word	0x20000e24
 8003e98:	20000ddc 	.word	0x20000ddc
 8003e9c:	3c23d70a 	.word	0x3c23d70a
 8003ea0:	3f200000 	.word	0x3f200000
 8003ea4:	41700000 	.word	0x41700000
 8003ea8:	20000e6c 	.word	0x20000e6c
 8003eac:	3c1eecc0 	.word	0x3c1eecc0
 8003eb0:	20000b1c 	.word	0x20000b1c

08003eb4 <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 8003eb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 8003ec0:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ec4:	4828      	ldr	r0, [pc, #160]	; (8003f68 <Run_MotorRoutine+0xb4>)
 8003ec6:	f7fe fb90 	bl	80025ea <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 8003eca:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ece:	4827      	ldr	r0, [pc, #156]	; (8003f6c <Run_MotorRoutine+0xb8>)
 8003ed0:	f7fe fb8b 	bl	80025ea <Motor_EnocderRoutine>
	robot_enc_pos += (motor[0].enc_vel*0.5) + (motor[1].enc_vel*0.5);
 8003ed4:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <Run_MotorRoutine+0xbc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fc fb35 	bl	8000548 <__aeabi_f2d>
 8003ede:	4604      	mov	r4, r0
 8003ee0:	460d      	mov	r5, r1
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <Run_MotorRoutine+0xb4>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fb1c 	bl	8000524 <__aeabi_i2d>
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <Run_MotorRoutine+0xc0>)
 8003ef2:	f7fc fb81 	bl	80005f8 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4690      	mov	r8, r2
 8003efc:	4699      	mov	r9, r3
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <Run_MotorRoutine+0xb4>)
 8003f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fb0e 	bl	8000524 <__aeabi_i2d>
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <Run_MotorRoutine+0xc0>)
 8003f0e:	f7fc fb73 	bl	80005f8 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4640      	mov	r0, r8
 8003f18:	4649      	mov	r1, r9
 8003f1a:	f7fc f9b7 	bl	800028c <__adddf3>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc f9b1 	bl	800028c <__adddf3>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fc fe59 	bl	8000be8 <__aeabi_d2f>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <Run_MotorRoutine+0xbc>)
 8003f3a:	6013      	str	r3, [r2, #0]
	robot_enc_yawpos += (motor[1].enc_vel - motor[0].enc_vel);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <Run_MotorRoutine+0xb4>)
 8003f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <Run_MotorRoutine+0xb4>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <Run_MotorRoutine+0xc4>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <Run_MotorRoutine+0xc4>)
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f68:	20000a8c 	.word	0x20000a8c
 8003f6c:	20000ad4 	.word	0x20000ad4
 8003f70:	20000b1c 	.word	0x20000b1c
 8003f74:	3fe00000 	.word	0x3fe00000
 8003f78:	20000b20 	.word	0x20000b20

08003f7c <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 8003f86:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f8a:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <Run_MotorRoutine2+0x28>)
 8003f8c:	f7fe fb5c 	bl	8002648 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 8003f90:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f94:	4804      	ldr	r0, [pc, #16]	; (8003fa8 <Run_MotorRoutine2+0x2c>)
 8003f96:	f7fe fb57 	bl	8002648 <Motor_ControlRoutine>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000a8c 	.word	0x20000a8c
 8003fa8:	20000ad4 	.word	0x20000ad4
 8003fac:	00000000 	.word	0x00000000

08003fb0 <Run_YawSpeed>:
float ki;
float kd;
float alpha;
int16_t sum_error;

float Run_YawSpeed(float period, float _speed, uint8_t flag) {
 8003fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fb4:	b08c      	sub	sp, #48	; 0x30
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fbc:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	71fb      	strb	r3, [r7, #7]
	static int16_t last_error = 0;
	static int16_t last_div_error = 0;
	static float last_mv = 0;
	int16_t error = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pr_sensor_bin = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	83fb      	strh	r3, [r7, #30]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 8003fcc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003fd0:	83bb      	strh	r3, [r7, #28]
	if((flag&0x01)==0x01) {
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <Run_YawSpeed+0x48>
		pr_sensor_bin = (~sensor_binary) & mask;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <Run_YawSpeed+0x44>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	b21a      	sxth	r2, r3
 8003fe6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	83fb      	strh	r3, [r7, #30]
 8003ff0:	e007      	b.n	8004002 <Run_YawSpeed+0x52>
 8003ff2:	bf00      	nop
 8003ff4:	20000baa 	.word	0x20000baa
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 8003ff8:	4bca      	ldr	r3, [pc, #808]	; (8004324 <Run_YawSpeed+0x374>)
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	8bbb      	ldrh	r3, [r7, #28]
 8003ffe:	4013      	ands	r3, r2
 8004000:	83fb      	strh	r3, [r7, #30]
	}

	switch(sensor_binary) {
 8004002:	4bc8      	ldr	r3, [pc, #800]	; (8004324 <Run_YawSpeed+0x374>)
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	f643 6201 	movw	r2, #15873	; 0x3e01
 800400a:	4293      	cmp	r3, r2
 800400c:	f000 844c 	beq.w	80048a8 <Run_YawSpeed+0x8f8>
 8004010:	f643 6201 	movw	r2, #15873	; 0x3e01
 8004014:	4293      	cmp	r3, r2
 8004016:	f300 84fd 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800401a:	f643 4203 	movw	r2, #15363	; 0x3c03
 800401e:	4293      	cmp	r3, r2
 8004020:	f000 844a 	beq.w	80048b8 <Run_YawSpeed+0x908>
 8004024:	f643 4203 	movw	r2, #15363	; 0x3c03
 8004028:	4293      	cmp	r3, r2
 800402a:	f300 84f3 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800402e:	f5b3 5f67 	cmp.w	r3, #14784	; 0x39c0
 8004032:	f000 848e 	beq.w	8004952 <Run_YawSpeed+0x9a2>
 8004036:	f5b3 5f67 	cmp.w	r3, #14784	; 0x39c0
 800403a:	f300 84eb 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800403e:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 8004042:	f000 8492 	beq.w	800496a <Run_YawSpeed+0x9ba>
 8004046:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 800404a:	f300 84e3 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800404e:	f643 02e0 	movw	r2, #14560	; 0x38e0
 8004052:	4293      	cmp	r3, r2
 8004054:	f000 8466 	beq.w	8004924 <Run_YawSpeed+0x974>
 8004058:	f643 02e0 	movw	r2, #14560	; 0x38e0
 800405c:	4293      	cmp	r3, r2
 800405e:	f300 84d9 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004062:	f5b3 5f63 	cmp.w	r3, #14528	; 0x38c0
 8004066:	f000 8468 	beq.w	800493a <Run_YawSpeed+0x98a>
 800406a:	f5b3 5f63 	cmp.w	r3, #14528	; 0x38c0
 800406e:	f300 84d1 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004072:	f643 0260 	movw	r2, #14432	; 0x3860
 8004076:	4293      	cmp	r3, r2
 8004078:	f000 8448 	beq.w	800490c <Run_YawSpeed+0x95c>
 800407c:	f643 0260 	movw	r2, #14432	; 0x3860
 8004080:	4293      	cmp	r3, r2
 8004082:	f300 84c7 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004086:	f643 0207 	movw	r2, #14343	; 0x3807
 800408a:	4293      	cmp	r3, r2
 800408c:	f000 841e 	beq.w	80048cc <Run_YawSpeed+0x91c>
 8004090:	f643 0207 	movw	r2, #14343	; 0x3807
 8004094:	4293      	cmp	r3, r2
 8004096:	f300 84bd 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800409a:	f643 0201 	movw	r2, #14337	; 0x3801
 800409e:	4293      	cmp	r3, r2
 80040a0:	f000 8406 	beq.w	80048b0 <Run_YawSpeed+0x900>
 80040a4:	f643 0201 	movw	r2, #14337	; 0x3801
 80040a8:	4293      	cmp	r3, r2
 80040aa:	f300 84b3 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80040ae:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80040b2:	f000 83c8 	beq.w	8004846 <Run_YawSpeed+0x896>
 80040b6:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80040ba:	f300 84ab 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80040be:	f5b3 5f47 	cmp.w	r3, #12736	; 0x31c0
 80040c2:	f000 8449 	beq.w	8004958 <Run_YawSpeed+0x9a8>
 80040c6:	f5b3 5f47 	cmp.w	r3, #12736	; 0x31c0
 80040ca:	f300 84a3 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80040ce:	f5b3 5f46 	cmp.w	r3, #12672	; 0x3180
 80040d2:	f000 844d 	beq.w	8004970 <Run_YawSpeed+0x9c0>
 80040d6:	f5b3 5f46 	cmp.w	r3, #12672	; 0x3180
 80040da:	f300 849b 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80040de:	f243 02e0 	movw	r2, #12512	; 0x30e0
 80040e2:	4293      	cmp	r3, r2
 80040e4:	f000 8422 	beq.w	800492c <Run_YawSpeed+0x97c>
 80040e8:	f243 02e0 	movw	r2, #12512	; 0x30e0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	f300 8491 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80040f2:	f5b3 5f43 	cmp.w	r3, #12480	; 0x30c0
 80040f6:	f000 8423 	beq.w	8004940 <Run_YawSpeed+0x990>
 80040fa:	f5b3 5f43 	cmp.w	r3, #12480	; 0x30c0
 80040fe:	f300 8489 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004102:	f243 0260 	movw	r2, #12384	; 0x3060
 8004106:	4293      	cmp	r3, r2
 8004108:	f000 83ef 	beq.w	80048ea <Run_YawSpeed+0x93a>
 800410c:	f243 0260 	movw	r2, #12384	; 0x3060
 8004110:	4293      	cmp	r3, r2
 8004112:	f300 847f 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004116:	f243 020f 	movw	r2, #12303	; 0x300f
 800411a:	4293      	cmp	r3, r2
 800411c:	f000 83dd 	beq.w	80048da <Run_YawSpeed+0x92a>
 8004120:	f243 020f 	movw	r2, #12303	; 0x300f
 8004124:	4293      	cmp	r3, r2
 8004126:	f300 8475 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800412a:	f243 0203 	movw	r2, #12291	; 0x3003
 800412e:	4293      	cmp	r3, r2
 8004130:	f000 83c9 	beq.w	80048c6 <Run_YawSpeed+0x916>
 8004134:	f243 0203 	movw	r2, #12291	; 0x3003
 8004138:	4293      	cmp	r3, r2
 800413a:	f300 846b 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800413e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004142:	f000 8383 	beq.w	800484c <Run_YawSpeed+0x89c>
 8004146:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800414a:	f300 8463 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800414e:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 8004152:	f000 8413 	beq.w	800497c <Run_YawSpeed+0x9cc>
 8004156:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 800415a:	f300 845b 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800415e:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8004162:	f000 840e 	beq.w	8004982 <Run_YawSpeed+0x9d2>
 8004166:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800416a:	f300 8453 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800416e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8004172:	f000 83f4 	beq.w	800495e <Run_YawSpeed+0x9ae>
 8004176:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 800417a:	f300 844b 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800417e:	f242 1283 	movw	r2, #8579	; 0x2183
 8004182:	4293      	cmp	r3, r2
 8004184:	f000 83bf 	beq.w	8004906 <Run_YawSpeed+0x956>
 8004188:	f242 1283 	movw	r2, #8579	; 0x2183
 800418c:	4293      	cmp	r3, r2
 800418e:	f300 8441 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004192:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 8004196:	f000 83ee 	beq.w	8004976 <Run_YawSpeed+0x9c6>
 800419a:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800419e:	f300 8439 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80041a2:	f242 02e0 	movw	r2, #8416	; 0x20e0
 80041a6:	4293      	cmp	r3, r2
 80041a8:	f000 83a3 	beq.w	80048f2 <Run_YawSpeed+0x942>
 80041ac:	f242 02e0 	movw	r2, #8416	; 0x20e0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	f300 842f 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80041b6:	f242 02c1 	movw	r2, #8385	; 0x20c1
 80041ba:	4293      	cmp	r3, r2
 80041bc:	f000 839d 	beq.w	80048fa <Run_YawSpeed+0x94a>
 80041c0:	f242 02c1 	movw	r2, #8385	; 0x20c1
 80041c4:	4293      	cmp	r3, r2
 80041c6:	f300 8425 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80041ca:	f5b3 5f03 	cmp.w	r3, #8384	; 0x20c0
 80041ce:	f000 83ba 	beq.w	8004946 <Run_YawSpeed+0x996>
 80041d2:	f5b3 5f03 	cmp.w	r3, #8384	; 0x20c0
 80041d6:	f300 841d 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80041da:	f242 0260 	movw	r2, #8288	; 0x2060
 80041de:	4293      	cmp	r3, r2
 80041e0:	f000 839c 	beq.w	800491c <Run_YawSpeed+0x96c>
 80041e4:	f242 0260 	movw	r2, #8288	; 0x2060
 80041e8:	4293      	cmp	r3, r2
 80041ea:	f300 8413 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80041ee:	f242 021f 	movw	r2, #8223	; 0x201f
 80041f2:	4293      	cmp	r3, r2
 80041f4:	f300 840e 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80041f8:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f280 80bd 	bge.w	800437c <Run_YawSpeed+0x3cc>
 8004202:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004206:	f000 831b 	beq.w	8004840 <Run_YawSpeed+0x890>
 800420a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800420e:	f300 8401 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004212:	f5b3 5fce 	cmp.w	r3, #6592	; 0x19c0
 8004216:	f000 8399 	beq.w	800494c <Run_YawSpeed+0x99c>
 800421a:	f5b3 5fce 	cmp.w	r3, #6592	; 0x19c0
 800421e:	f300 83f9 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004222:	f5b3 5fcc 	cmp.w	r3, #6528	; 0x1980
 8004226:	f000 839d 	beq.w	8004964 <Run_YawSpeed+0x9b4>
 800422a:	f5b3 5fcc 	cmp.w	r3, #6528	; 0x1980
 800422e:	f300 83f1 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004232:	f5b3 5fc6 	cmp.w	r3, #6336	; 0x18c0
 8004236:	f000 837d 	beq.w	8004934 <Run_YawSpeed+0x984>
 800423a:	f5b3 5fc6 	cmp.w	r3, #6336	; 0x18c0
 800423e:	f300 83e9 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004242:	f5b3 5fc3 	cmp.w	r3, #6240	; 0x1860
 8004246:	f000 8365 	beq.w	8004914 <Run_YawSpeed+0x964>
 800424a:	f5b3 5fc3 	cmp.w	r3, #6240	; 0x1860
 800424e:	f300 83e1 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004252:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004256:	4293      	cmp	r3, r2
 8004258:	f000 8317 	beq.w	800488a <Run_YawSpeed+0x8da>
 800425c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004260:	4293      	cmp	r3, r2
 8004262:	f300 83d7 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004266:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800426a:	f000 8317 	beq.w	800489c <Run_YawSpeed+0x8ec>
 800426e:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8004272:	f300 83cf 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004276:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800427a:	f000 82db 	beq.w	8004834 <Run_YawSpeed+0x884>
 800427e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004282:	f300 83c7 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800428a:	f000 82d6 	beq.w	800483a <Run_YawSpeed+0x88a>
 800428e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004292:	f300 83bf 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004296:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800429a:	4293      	cmp	r3, r2
 800429c:	f000 82e8 	beq.w	8004870 <Run_YawSpeed+0x8c0>
 80042a0:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f300 83b5 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80042aa:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80042ae:	f000 82e9 	beq.w	8004884 <Run_YawSpeed+0x8d4>
 80042b2:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80042b6:	f300 83ad 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80042ba:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 80042be:	f000 82ea 	beq.w	8004896 <Run_YawSpeed+0x8e6>
 80042c2:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 80042c6:	f300 83a5 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80042ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ce:	f000 82ab 	beq.w	8004828 <Run_YawSpeed+0x878>
 80042d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042d6:	f300 839d 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80042da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042de:	f000 82a6 	beq.w	800482e <Run_YawSpeed+0x87e>
 80042e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042e6:	f300 8395 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80042ea:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80042ee:	f000 82bb 	beq.w	8004868 <Run_YawSpeed+0x8b8>
 80042f2:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80042f6:	f300 838d 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80042fa:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80042fe:	f000 82be 	beq.w	800487e <Run_YawSpeed+0x8ce>
 8004302:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8004306:	f300 8385 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800430a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800430e:	f000 82bf 	beq.w	8004890 <Run_YawSpeed+0x8e0>
 8004312:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8004316:	f300 837d 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 800431a:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800431e:	f000 827d 	beq.w	800481c <Run_YawSpeed+0x86c>
 8004322:	e001      	b.n	8004328 <Run_YawSpeed+0x378>
 8004324:	20000baa 	.word	0x20000baa
 8004328:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800432c:	f300 8372 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004334:	f000 8275 	beq.w	8004822 <Run_YawSpeed+0x872>
 8004338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433c:	f300 836a 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004340:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8004344:	f000 828c 	beq.w	8004860 <Run_YawSpeed+0x8b0>
 8004348:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800434c:	f300 8362 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004350:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004354:	f300 835e 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 8004358:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800435c:	da68      	bge.n	8004430 <Run_YawSpeed+0x480>
 800435e:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8004362:	f280 8357 	bge.w	8004a14 <Run_YawSpeed+0xa64>
 8004366:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800436a:	f280 80ab 	bge.w	80044c4 <Run_YawSpeed+0x514>
 800436e:	2b71      	cmp	r3, #113	; 0x71
 8004370:	f300 8214 	bgt.w	800479c <Run_YawSpeed+0x7ec>
 8004374:	2b00      	cmp	r3, #0
 8004376:	f300 8127 	bgt.w	80045c8 <Run_YawSpeed+0x618>
 800437a:	e34b      	b.n	8004a14 <Run_YawSpeed+0xa64>
 800437c:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8004380:	3b18      	subs	r3, #24
 8004382:	2b27      	cmp	r3, #39	; 0x27
 8004384:	f200 8346 	bhi.w	8004a14 <Run_YawSpeed+0xa64>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <Run_YawSpeed+0x3e0>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080048a3 	.word	0x080048a3
 8004394:	08004a15 	.word	0x08004a15
 8004398:	08004a15 	.word	0x08004a15
 800439c:	08004a15 	.word	0x08004a15
 80043a0:	08004a15 	.word	0x08004a15
 80043a4:	08004a15 	.word	0x08004a15
 80043a8:	08004a15 	.word	0x08004a15
 80043ac:	08004a15 	.word	0x08004a15
 80043b0:	08004853 	.word	0x08004853
 80043b4:	080048c1 	.word	0x080048c1
 80043b8:	08004a15 	.word	0x08004a15
 80043bc:	08004a15 	.word	0x08004a15
 80043c0:	08004a15 	.word	0x08004a15
 80043c4:	08004a15 	.word	0x08004a15
 80043c8:	08004a15 	.word	0x08004a15
 80043cc:	080048d3 	.word	0x080048d3
 80043d0:	08004a15 	.word	0x08004a15
 80043d4:	08004a15 	.word	0x08004a15
 80043d8:	08004a15 	.word	0x08004a15
 80043dc:	08004a15 	.word	0x08004a15
 80043e0:	08004a15 	.word	0x08004a15
 80043e4:	08004a15 	.word	0x08004a15
 80043e8:	08004a15 	.word	0x08004a15
 80043ec:	08004a15 	.word	0x08004a15
 80043f0:	08004a15 	.word	0x08004a15
 80043f4:	08004a15 	.word	0x08004a15
 80043f8:	08004a15 	.word	0x08004a15
 80043fc:	08004a15 	.word	0x08004a15
 8004400:	08004a15 	.word	0x08004a15
 8004404:	08004a15 	.word	0x08004a15
 8004408:	08004a15 	.word	0x08004a15
 800440c:	08004a15 	.word	0x08004a15
 8004410:	08004a15 	.word	0x08004a15
 8004414:	08004a15 	.word	0x08004a15
 8004418:	08004a15 	.word	0x08004a15
 800441c:	08004a15 	.word	0x08004a15
 8004420:	08004a15 	.word	0x08004a15
 8004424:	08004a15 	.word	0x08004a15
 8004428:	08004a15 	.word	0x08004a15
 800442c:	080048e3 	.word	0x080048e3
 8004430:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004434:	2b20      	cmp	r3, #32
 8004436:	f200 82ed 	bhi.w	8004a14 <Run_YawSpeed+0xa64>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <Run_YawSpeed+0x490>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004811 	.word	0x08004811
 8004444:	08004901 	.word	0x08004901
 8004448:	08004a15 	.word	0x08004a15
 800444c:	080049a7 	.word	0x080049a7
 8004450:	08004a15 	.word	0x08004a15
 8004454:	08004a15 	.word	0x08004a15
 8004458:	08004a15 	.word	0x08004a15
 800445c:	080049a1 	.word	0x080049a1
 8004460:	08004a15 	.word	0x08004a15
 8004464:	08004a15 	.word	0x08004a15
 8004468:	08004a15 	.word	0x08004a15
 800446c:	08004a15 	.word	0x08004a15
 8004470:	08004a15 	.word	0x08004a15
 8004474:	08004a15 	.word	0x08004a15
 8004478:	08004a15 	.word	0x08004a15
 800447c:	08004a15 	.word	0x08004a15
 8004480:	08004a15 	.word	0x08004a15
 8004484:	08004a15 	.word	0x08004a15
 8004488:	08004a15 	.word	0x08004a15
 800448c:	08004a15 	.word	0x08004a15
 8004490:	08004a15 	.word	0x08004a15
 8004494:	08004a15 	.word	0x08004a15
 8004498:	08004a15 	.word	0x08004a15
 800449c:	08004a15 	.word	0x08004a15
 80044a0:	08004a15 	.word	0x08004a15
 80044a4:	08004a15 	.word	0x08004a15
 80044a8:	08004a15 	.word	0x08004a15
 80044ac:	08004a15 	.word	0x08004a15
 80044b0:	08004a15 	.word	0x08004a15
 80044b4:	08004a15 	.word	0x08004a15
 80044b8:	08004a15 	.word	0x08004a15
 80044bc:	08004a15 	.word	0x08004a15
 80044c0:	08004879 	.word	0x08004879
 80044c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044c8:	2b07      	cmp	r3, #7
 80044ca:	f200 82a3 	bhi.w	8004a14 <Run_YawSpeed+0xa64>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <Run_YawSpeed+0x524>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004817 	.word	0x08004817
 80044d8:	0800499b 	.word	0x0800499b
 80044dc:	08004a15 	.word	0x08004a15
 80044e0:	08004995 	.word	0x08004995
 80044e4:	08004a15 	.word	0x08004a15
 80044e8:	08004a15 	.word	0x08004a15
 80044ec:	08004989 	.word	0x08004989
 80044f0:	0800498f 	.word	0x0800498f
 80044f4:	3bc0      	subs	r3, #192	; 0xc0
 80044f6:	2b30      	cmp	r3, #48	; 0x30
 80044f8:	f200 828c 	bhi.w	8004a14 <Run_YawSpeed+0xa64>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <Run_YawSpeed+0x554>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	0800480b 	.word	0x0800480b
 8004508:	080049bf 	.word	0x080049bf
 800450c:	08004a15 	.word	0x08004a15
 8004510:	080049b9 	.word	0x080049b9
 8004514:	08004a15 	.word	0x08004a15
 8004518:	08004a15 	.word	0x08004a15
 800451c:	080049ad 	.word	0x080049ad
 8004520:	080049b3 	.word	0x080049b3
 8004524:	08004a15 	.word	0x08004a15
 8004528:	08004a15 	.word	0x08004a15
 800452c:	08004a15 	.word	0x08004a15
 8004530:	08004a15 	.word	0x08004a15
 8004534:	08004a15 	.word	0x08004a15
 8004538:	08004a15 	.word	0x08004a15
 800453c:	08004a15 	.word	0x08004a15
 8004540:	08004a15 	.word	0x08004a15
 8004544:	08004a15 	.word	0x08004a15
 8004548:	08004a15 	.word	0x08004a15
 800454c:	08004a15 	.word	0x08004a15
 8004550:	08004a15 	.word	0x08004a15
 8004554:	08004a15 	.word	0x08004a15
 8004558:	08004a15 	.word	0x08004a15
 800455c:	08004a15 	.word	0x08004a15
 8004560:	08004a15 	.word	0x08004a15
 8004564:	08004a15 	.word	0x08004a15
 8004568:	08004a15 	.word	0x08004a15
 800456c:	08004a15 	.word	0x08004a15
 8004570:	08004a15 	.word	0x08004a15
 8004574:	08004a15 	.word	0x08004a15
 8004578:	08004a15 	.word	0x08004a15
 800457c:	08004a15 	.word	0x08004a15
 8004580:	08004a15 	.word	0x08004a15
 8004584:	08004803 	.word	0x08004803
 8004588:	080049dd 	.word	0x080049dd
 800458c:	08004a15 	.word	0x08004a15
 8004590:	080049d5 	.word	0x080049d5
 8004594:	08004a15 	.word	0x08004a15
 8004598:	08004a15 	.word	0x08004a15
 800459c:	080049c5 	.word	0x080049c5
 80045a0:	080049cd 	.word	0x080049cd
 80045a4:	08004a15 	.word	0x08004a15
 80045a8:	08004a15 	.word	0x08004a15
 80045ac:	08004a15 	.word	0x08004a15
 80045b0:	08004a15 	.word	0x08004a15
 80045b4:	08004a15 	.word	0x08004a15
 80045b8:	08004a15 	.word	0x08004a15
 80045bc:	08004a15 	.word	0x08004a15
 80045c0:	08004a15 	.word	0x08004a15
 80045c4:	08004859 	.word	0x08004859
 80045c8:	3b01      	subs	r3, #1
 80045ca:	2b70      	cmp	r3, #112	; 0x70
 80045cc:	f200 8222 	bhi.w	8004a14 <Run_YawSpeed+0xa64>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <Run_YawSpeed+0x628>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080047ab 	.word	0x080047ab
 80045dc:	08004a15 	.word	0x08004a15
 80045e0:	080047b3 	.word	0x080047b3
 80045e4:	08004a15 	.word	0x08004a15
 80045e8:	08004a15 	.word	0x08004a15
 80045ec:	08004a15 	.word	0x08004a15
 80045f0:	080047bb 	.word	0x080047bb
 80045f4:	08004a15 	.word	0x08004a15
 80045f8:	08004a15 	.word	0x08004a15
 80045fc:	08004a15 	.word	0x08004a15
 8004600:	08004a15 	.word	0x08004a15
 8004604:	080047cb 	.word	0x080047cb
 8004608:	08004a15 	.word	0x08004a15
 800460c:	080047c3 	.word	0x080047c3
 8004610:	08004a15 	.word	0x08004a15
 8004614:	08004a15 	.word	0x08004a15
 8004618:	08004a15 	.word	0x08004a15
 800461c:	08004a15 	.word	0x08004a15
 8004620:	08004a15 	.word	0x08004a15
 8004624:	08004a15 	.word	0x08004a15
 8004628:	08004a15 	.word	0x08004a15
 800462c:	08004a15 	.word	0x08004a15
 8004630:	08004a15 	.word	0x08004a15
 8004634:	080047db 	.word	0x080047db
 8004638:	08004a15 	.word	0x08004a15
 800463c:	08004a15 	.word	0x08004a15
 8004640:	08004a15 	.word	0x08004a15
 8004644:	080047d3 	.word	0x080047d3
 8004648:	08004a15 	.word	0x08004a15
 800464c:	08004a15 	.word	0x08004a15
 8004650:	08004a15 	.word	0x08004a15
 8004654:	08004a15 	.word	0x08004a15
 8004658:	08004a15 	.word	0x08004a15
 800465c:	08004a15 	.word	0x08004a15
 8004660:	08004a15 	.word	0x08004a15
 8004664:	08004a15 	.word	0x08004a15
 8004668:	08004a15 	.word	0x08004a15
 800466c:	08004a15 	.word	0x08004a15
 8004670:	08004a15 	.word	0x08004a15
 8004674:	08004a15 	.word	0x08004a15
 8004678:	08004a15 	.word	0x08004a15
 800467c:	08004a15 	.word	0x08004a15
 8004680:	08004a15 	.word	0x08004a15
 8004684:	08004a15 	.word	0x08004a15
 8004688:	08004a15 	.word	0x08004a15
 800468c:	08004a15 	.word	0x08004a15
 8004690:	08004a15 	.word	0x08004a15
 8004694:	080047eb 	.word	0x080047eb
 8004698:	08004a0d 	.word	0x08004a0d
 800469c:	08004a15 	.word	0x08004a15
 80046a0:	08004a15 	.word	0x08004a15
 80046a4:	08004a15 	.word	0x08004a15
 80046a8:	08004a15 	.word	0x08004a15
 80046ac:	08004a15 	.word	0x08004a15
 80046b0:	08004a15 	.word	0x08004a15
 80046b4:	080047e3 	.word	0x080047e3
 80046b8:	08004a15 	.word	0x08004a15
 80046bc:	08004a15 	.word	0x08004a15
 80046c0:	08004a15 	.word	0x08004a15
 80046c4:	08004a15 	.word	0x08004a15
 80046c8:	08004a15 	.word	0x08004a15
 80046cc:	08004a15 	.word	0x08004a15
 80046d0:	08004a15 	.word	0x08004a15
 80046d4:	08004a15 	.word	0x08004a15
 80046d8:	08004a15 	.word	0x08004a15
 80046dc:	08004a15 	.word	0x08004a15
 80046e0:	08004a15 	.word	0x08004a15
 80046e4:	08004a15 	.word	0x08004a15
 80046e8:	08004a15 	.word	0x08004a15
 80046ec:	08004a15 	.word	0x08004a15
 80046f0:	08004a15 	.word	0x08004a15
 80046f4:	08004a15 	.word	0x08004a15
 80046f8:	08004a15 	.word	0x08004a15
 80046fc:	08004a15 	.word	0x08004a15
 8004700:	08004a15 	.word	0x08004a15
 8004704:	08004a15 	.word	0x08004a15
 8004708:	08004a15 	.word	0x08004a15
 800470c:	08004a15 	.word	0x08004a15
 8004710:	08004a15 	.word	0x08004a15
 8004714:	08004a15 	.word	0x08004a15
 8004718:	08004a15 	.word	0x08004a15
 800471c:	08004a15 	.word	0x08004a15
 8004720:	08004a15 	.word	0x08004a15
 8004724:	08004a15 	.word	0x08004a15
 8004728:	08004a15 	.word	0x08004a15
 800472c:	08004a15 	.word	0x08004a15
 8004730:	08004a15 	.word	0x08004a15
 8004734:	08004a15 	.word	0x08004a15
 8004738:	08004a15 	.word	0x08004a15
 800473c:	08004a15 	.word	0x08004a15
 8004740:	08004a15 	.word	0x08004a15
 8004744:	08004a15 	.word	0x08004a15
 8004748:	08004a15 	.word	0x08004a15
 800474c:	08004a15 	.word	0x08004a15
 8004750:	08004a15 	.word	0x08004a15
 8004754:	080047fb 	.word	0x080047fb
 8004758:	080049fd 	.word	0x080049fd
 800475c:	08004a15 	.word	0x08004a15
 8004760:	080049f5 	.word	0x080049f5
 8004764:	08004a15 	.word	0x08004a15
 8004768:	08004a15 	.word	0x08004a15
 800476c:	080049e5 	.word	0x080049e5
 8004770:	080049ed 	.word	0x080049ed
 8004774:	08004a15 	.word	0x08004a15
 8004778:	08004a15 	.word	0x08004a15
 800477c:	08004a15 	.word	0x08004a15
 8004780:	08004a15 	.word	0x08004a15
 8004784:	08004a15 	.word	0x08004a15
 8004788:	08004a15 	.word	0x08004a15
 800478c:	08004a15 	.word	0x08004a15
 8004790:	08004a15 	.word	0x08004a15
 8004794:	080047f3 	.word	0x080047f3
 8004798:	08004a05 	.word	0x08004a05
 800479c:	2bf0      	cmp	r3, #240	; 0xf0
 800479e:	f300 8139 	bgt.w	8004a14 <Run_YawSpeed+0xa64>
 80047a2:	2bc0      	cmp	r3, #192	; 0xc0
 80047a4:	f6bf aea6 	bge.w	80044f4 <Run_YawSpeed+0x544>
 80047a8:	e134      	b.n	8004a14 <Run_YawSpeed+0xa64>
	case B00000000000001: error = -12; break;
 80047aa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80047ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047b0:	e133      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000000011: error = -11; break;
 80047b2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80047b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047b8:	e12f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
//	case B00000000000011: error = -11; break;
	case B00000000000111: error = -10; break;
 80047ba:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80047be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047c0:	e12b      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000001110: error = -9; break;
 80047c2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80047c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047c8:	e127      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000001100: error = -8; break;
 80047ca:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80047ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047d0:	e123      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000011100: error = -7; break;
 80047d2:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80047d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047d8:	e11f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000011000: error = -6; break;
 80047da:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 80047de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047e0:	e11b      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000111000: error = -5; break;
 80047e2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80047e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047e8:	e117      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000000110000: error = -4; break;
 80047ea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80047ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047f0:	e113      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000001110000: error = -3; break;
 80047f2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80047f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047f8:	e10f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000001100000: error = -2; break;
 80047fa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80047fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004800:	e10b      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011100000: error = -1; break;
 8004802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004806:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004808:	e107      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000011000000: error = 0; break;
 800480a:	2300      	movs	r3, #0
 800480c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800480e:	e104      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000111000000: error = 1; break;
 8004810:	2301      	movs	r3, #1
 8004812:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004814:	e101      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000110000000: error = 2; break;
 8004816:	2302      	movs	r3, #2
 8004818:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800481a:	e0fe      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00001110000000: error = 3; break;
 800481c:	2303      	movs	r3, #3
 800481e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004820:	e0fb      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00001100000000: error = 4; break;
 8004822:	2304      	movs	r3, #4
 8004824:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004826:	e0f8      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00011100000000: error = 5; break;
 8004828:	2305      	movs	r3, #5
 800482a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800482c:	e0f5      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00011000000000: error = 6; break;
 800482e:	2306      	movs	r3, #6
 8004830:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004832:	e0f2      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00111000000000: error = 7; break;
 8004834:	2307      	movs	r3, #7
 8004836:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004838:	e0ef      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00110000000000: error = 8; break;
 800483a:	2308      	movs	r3, #8
 800483c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800483e:	e0ec      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B01110000000000: error = 9; break;
 8004840:	2309      	movs	r3, #9
 8004842:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004844:	e0e9      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11100000000000: error = 10; break;
 8004846:	230a      	movs	r3, #10
 8004848:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800484a:	e0e6      	b.n	8004a1a <Run_YawSpeed+0xa6a>
//	case B11000000000000: error = 11; break;
	case B11000000000000: error = 11; break;
 800484c:	230b      	movs	r3, #11
 800484e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004850:	e0e3      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000000000000: error = 12; break;
 8004852:	230c      	movs	r3, #12
 8004854:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004856:	e0e0      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000011110000: error = -1; break;
 8004858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800485c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800485e:	e0dc      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000111111000: error = -1; break;
 8004860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004864:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004866:	e0d8      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00001111111100: error = -1; break;
 8004868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800486c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800486e:	e0d4      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00011111111110: error = -1; break;
 8004870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004874:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004876:	e0d0      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000111100000: error = 0; break;
 8004878:	2300      	movs	r3, #0
 800487a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800487c:	e0cd      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00001111110000: error = 0; break;
 800487e:	2300      	movs	r3, #0
 8004880:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004882:	e0ca      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00011111111000: error = 0; break;
 8004884:	2300      	movs	r3, #0
 8004886:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004888:	e0c7      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00111111111100: error = 0; break;
 800488a:	2300      	movs	r3, #0
 800488c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800488e:	e0c4      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00001111000000: error = 1; break;
 8004890:	2301      	movs	r3, #1
 8004892:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004894:	e0c1      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00011111100000: error = 1; break;
 8004896:	2301      	movs	r3, #1
 8004898:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800489a:	e0be      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00111111110000: error = 1; break;
 800489c:	2301      	movs	r3, #1
 800489e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048a0:	e0bb      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B01111111111000: error = 1; break;
 80048a2:	2301      	movs	r3, #1
 80048a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048a6:	e0b8      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B11111000000001: error = -2; break;
 80048a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048ae:	e0b4      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B11100000000001: error = -1; break;
 80048b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048b6:	e0b0      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11110000000011: error = -1; break;
 80048b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048be:	e0ac      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B10000000000001: error = 0; break;
 80048c0:	2300      	movs	r3, #0
 80048c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048c4:	e0a9      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11000000000011: error = 0; break;
 80048c6:	2300      	movs	r3, #0
 80048c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048ca:	e0a6      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11100000000111: error = 0; break;
 80048cc:	2300      	movs	r3, #0
 80048ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048d0:	e0a3      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B10000000000111: error = -1; break;
 80048d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048d8:	e09f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11000000001111: error = -1; break;
 80048da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048e0:	e09b      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B10000000011111: error = -2; break;
 80048e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048e8:	e097      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B11000001100000: error = -2; break;
 80048ea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048f0:	e093      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000011100000: error = -1; break;
 80048f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048f8:	e08f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000011000001: error = 0; break;
 80048fa:	2300      	movs	r3, #0
 80048fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048fe:	e08c      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000111000001: error = 1; break;
 8004900:	2301      	movs	r3, #1
 8004902:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004904:	e089      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000110000011: error = 2; break;
 8004906:	2302      	movs	r3, #2
 8004908:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800490a:	e086      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B11100001100000: error = -2; break;
 800490c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004910:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004912:	e082      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B01100001100000: error = -2; break;
 8004914:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004918:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800491a:	e07e      	b.n	8004a1a <Run_YawSpeed+0xa6a>
//	case B11000011110000: error = -2; break;
	case B10000001100000: error = -2; break;
 800491c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004920:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004922:	e07a      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B11100011100000: error = -1; break;
 8004924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004928:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800492a:	e076      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11000011100000: error = -1; break;
 800492c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004930:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004932:	e072      	b.n	8004a1a <Run_YawSpeed+0xa6a>
//	case B10000111110000: error = -1; break;

	case B01100011000000: error = 0; break;
 8004934:	2300      	movs	r3, #0
 8004936:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004938:	e06f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11100011000000: error = 0; break;
 800493a:	2300      	movs	r3, #0
 800493c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800493e:	e06c      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11000011000000: error = 0; break;
 8004940:	2300      	movs	r3, #0
 8004942:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004944:	e069      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000011000000: error = 0; break;
 8004946:	2300      	movs	r3, #0
 8004948:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800494a:	e066      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B01100111000000: error = 1; break;
 800494c:	2301      	movs	r3, #1
 800494e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004950:	e063      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11100111000000: error = 1; break;
 8004952:	2301      	movs	r3, #1
 8004954:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004956:	e060      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11000111000000: error = 1; break;
 8004958:	2301      	movs	r3, #1
 800495a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800495c:	e05d      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000111000000: error = 1; break;
 800495e:	2301      	movs	r3, #1
 8004960:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004962:	e05a      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B01100110000000: error = 2; break;
 8004964:	2302      	movs	r3, #2
 8004966:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004968:	e057      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11100110000000: error = 2; break;
 800496a:	2302      	movs	r3, #2
 800496c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800496e:	e054      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B11000110000000: error = 2; break;
 8004970:	2302      	movs	r3, #2
 8004972:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004974:	e051      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B10000110000000: error = 2; break;
 8004976:	2302      	movs	r3, #2
 8004978:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800497a:	e04e      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B10001110000000: error = 3; break;
 800497c:	2303      	movs	r3, #3
 800497e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004980:	e04b      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B10001100000000: error = 4; break;
 8004982:	2304      	movs	r3, #4
 8004984:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004986:	e048      	b.n	8004a1a <Run_YawSpeed+0xa6a>



	case B00000110000110: error = 2; break;
 8004988:	2302      	movs	r3, #2
 800498a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800498c:	e045      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000110000111: error = 2; break;
 800498e:	2302      	movs	r3, #2
 8004990:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004992:	e042      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000110000011: error = 2; break;
 8004994:	2302      	movs	r3, #2
 8004996:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004998:	e03f      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000110000001: error = 2; break;
 800499a:	2302      	movs	r3, #2
 800499c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800499e:	e03c      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000111000111: error = 1; break;
 80049a0:	2301      	movs	r3, #1
 80049a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049a4:	e039      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000111000011: error = 1; break;
 80049a6:	2301      	movs	r3, #1
 80049a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049aa:	e036      	b.n	8004a1a <Run_YawSpeed+0xa6a>
//	case B00001111100001: error = 1; break;

	case B00000011000110: error = 0; break;
 80049ac:	2300      	movs	r3, #0
 80049ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049b0:	e033      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011000111: error = 0; break;
 80049b2:	2300      	movs	r3, #0
 80049b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049b6:	e030      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011000011: error = 0; break;
 80049b8:	2300      	movs	r3, #0
 80049ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049bc:	e02d      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011000001: error = 0; break;
 80049be:	2300      	movs	r3, #0
 80049c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049c2:	e02a      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000011100110: error = -1; break;
 80049c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049ca:	e026      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011100111: error = -1; break;
 80049cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049d2:	e022      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011100011: error = -1; break;
 80049d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049da:	e01e      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000011100001: error = -1; break;
 80049dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049e2:	e01a      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000001100110: error = -2; break;
 80049e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80049e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049ea:	e016      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000001100111: error = -2; break;
 80049ec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80049f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049f2:	e012      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000001100011: error = -2; break;
 80049f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80049f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049fa:	e00e      	b.n	8004a1a <Run_YawSpeed+0xa6a>
	case B00000001100001: error = -2; break;
 80049fc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004a00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a02:	e00a      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000001110001: error = -3; break;
 8004a04:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004a08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a0a:	e006      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	case B00000000110001: error = -4; break;
 8004a0c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004a10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a12:	e002      	b.n	8004a1a <Run_YawSpeed+0xa6a>

	default: error = last_error;
 8004a14:	4bc2      	ldr	r3, [pc, #776]	; (8004d20 <Run_YawSpeed+0xd70>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	float div_error = error - last_error;
 8004a1a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004a1e:	4ac0      	ldr	r2, [pc, #768]	; (8004d20 <Run_YawSpeed+0xd70>)
 8004a20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2e:	edc7 7a06 	vstr	s15, [r7, #24]
	if(last_mv < 90 && last_mv > -90)
 8004a32:	4bbc      	ldr	r3, [pc, #752]	; (8004d24 <Run_YawSpeed+0xd74>)
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8004d28 <Run_YawSpeed+0xd78>
 8004a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a44:	d527      	bpl.n	8004a96 <Run_YawSpeed+0xae6>
 8004a46:	4bb7      	ldr	r3, [pc, #732]	; (8004d24 <Run_YawSpeed+0xd74>)
 8004a48:	edd3 7a00 	vldr	s15, [r3]
 8004a4c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004d2c <Run_YawSpeed+0xd7c>
 8004a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	dd1d      	ble.n	8004a96 <Run_YawSpeed+0xae6>
		if(!(sum_error < -32000 && error < 0) && !(sum_error > 32000 && error > 0) ) sum_error += error;
 8004a5a:	4bb5      	ldr	r3, [pc, #724]	; (8004d30 <Run_YawSpeed+0xd80>)
 8004a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a60:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 8004a64:	da03      	bge.n	8004a6e <Run_YawSpeed+0xabe>
 8004a66:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	db13      	blt.n	8004a96 <Run_YawSpeed+0xae6>
 8004a6e:	4bb0      	ldr	r3, [pc, #704]	; (8004d30 <Run_YawSpeed+0xd80>)
 8004a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a74:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004a78:	dd03      	ble.n	8004a82 <Run_YawSpeed+0xad2>
 8004a7a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dc09      	bgt.n	8004a96 <Run_YawSpeed+0xae6>
 8004a82:	4bab      	ldr	r3, [pc, #684]	; (8004d30 <Run_YawSpeed+0xd80>)
 8004a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	4ba7      	ldr	r3, [pc, #668]	; (8004d30 <Run_YawSpeed+0xd80>)
 8004a94:	801a      	strh	r2, [r3, #0]
	temp_yaw_speed = last_mv;
 8004a96:	4ba3      	ldr	r3, [pc, #652]	; (8004d24 <Run_YawSpeed+0xd74>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4aa6      	ldr	r2, [pc, #664]	; (8004d34 <Run_YawSpeed+0xd84>)
 8004a9c:	6013      	str	r3, [r2, #0]
	float p, i, d;
	if(flag == 1) {
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 80a4 	bne.w	8004bee <Run_YawSpeed+0xc3e>
//		p = _speed * PID_KKP * (float)error;
//		i = 0;
//		d = _speed * PID_KKD * (float)div_error / period;
		p = (0.09*_speed + 0.8833) * (float)error;
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f7fb fd4e 	bl	8000548 <__aeabi_f2d>
 8004aac:	a390      	add	r3, pc, #576	; (adr r3, 8004cf0 <Run_YawSpeed+0xd40>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fb fda1 	bl	80005f8 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	a38e      	add	r3, pc, #568	; (adr r3, 8004cf8 <Run_YawSpeed+0xd48>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fbe2 	bl	800028c <__adddf3>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004adc:	ee17 0a90 	vmov	r0, s15
 8004ae0:	f7fb fd32 	bl	8000548 <__aeabi_f2d>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4620      	mov	r0, r4
 8004aea:	4629      	mov	r1, r5
 8004aec:	f7fb fd84 	bl	80005f8 <__aeabi_dmul>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7fc f876 	bl	8000be8 <__aeabi_d2f>
 8004afc:	4603      	mov	r3, r0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
		i = (0.03*_speed + 0.6833) * (float)sum_error * period;
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f7fb fd21 	bl	8000548 <__aeabi_f2d>
 8004b06:	a37e      	add	r3, pc, #504	; (adr r3, 8004d00 <Run_YawSpeed+0xd50>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f7fb fd74 	bl	80005f8 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	a37b      	add	r3, pc, #492	; (adr r3, 8004d08 <Run_YawSpeed+0xd58>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fbb5 	bl	800028c <__adddf3>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4614      	mov	r4, r2
 8004b28:	461d      	mov	r5, r3
 8004b2a:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <Run_YawSpeed+0xd80>)
 8004b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b38:	ee17 0a90 	vmov	r0, s15
 8004b3c:	f7fb fd04 	bl	8000548 <__aeabi_f2d>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4614      	mov	r4, r2
 8004b52:	461d      	mov	r5, r3
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7fb fcf7 	bl	8000548 <__aeabi_f2d>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7fb fd49 	bl	80005f8 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f7fc f83b 	bl	8000be8 <__aeabi_d2f>
 8004b72:	4603      	mov	r3, r0
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
		d = (0.7433*exp(0.1099*_speed)) * (float)div_error / period;
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f7fb fce6 	bl	8000548 <__aeabi_f2d>
 8004b7c:	a364      	add	r3, pc, #400	; (adr r3, 8004d10 <Run_YawSpeed+0xd60>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb fd39 	bl	80005f8 <__aeabi_dmul>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	ec43 2b17 	vmov	d7, r2, r3
 8004b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b92:	eef0 0a67 	vmov.f32	s1, s15
 8004b96:	f00c ffff 	bl	8011b98 <exp>
 8004b9a:	ec51 0b10 	vmov	r0, r1, d0
 8004b9e:	a35e      	add	r3, pc, #376	; (adr r3, 8004d18 <Run_YawSpeed+0xd68>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fd28 	bl	80005f8 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	69b8      	ldr	r0, [r7, #24]
 8004bb2:	f7fb fcc9 	bl	8000548 <__aeabi_f2d>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4620      	mov	r0, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	f7fb fd1b 	bl	80005f8 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	461d      	mov	r5, r3
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7fb fcbc 	bl	8000548 <__aeabi_f2d>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fb fe38 	bl	800084c <__aeabi_ddiv>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f7fc f800 	bl	8000be8 <__aeabi_d2f>
 8004be8:	4603      	mov	r3, r0
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	e02b      	b.n	8004c46 <Run_YawSpeed+0xc96>
	}
	else {
		p = kp * (float)error;
 8004bee:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	; (8004d38 <Run_YawSpeed+0xd88>)
 8004bfc:	edd3 7a00 	vldr	s15, [r3]
 8004c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c04:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i = ki * (float)sum_error * period;
 8004c08:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <Run_YawSpeed+0xd80>)
 8004c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <Run_YawSpeed+0xd8c>)
 8004c18:	edd3 7a00 	vldr	s15, [r3]
 8004c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c20:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		d = kd * (float)div_error / period;
 8004c2c:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <Run_YawSpeed+0xd90>)
 8004c2e:	ed93 7a00 	vldr	s14, [r3]
 8004c32:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c42:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	d = alpha*d + (1.00-alpha)*last_d;
 8004c46:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <Run_YawSpeed+0xd94>)
 8004c48:	ed93 7a00 	vldr	s14, [r3]
 8004c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c54:	ee17 0a90 	vmov	r0, s15
 8004c58:	f7fb fc76 	bl	8000548 <__aeabi_f2d>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <Run_YawSpeed+0xd94>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fb fc6f 	bl	8000548 <__aeabi_f2d>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	f04f 0000 	mov.w	r0, #0
 8004c72:	4935      	ldr	r1, [pc, #212]	; (8004d48 <Run_YawSpeed+0xd98>)
 8004c74:	f7fb fb08 	bl	8000288 <__aeabi_dsub>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4690      	mov	r8, r2
 8004c7e:	4699      	mov	r9, r3
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <Run_YawSpeed+0xd9c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fb fc5f 	bl	8000548 <__aeabi_f2d>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4640      	mov	r0, r8
 8004c90:	4649      	mov	r1, r9
 8004c92:	f7fb fcb1 	bl	80005f8 <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb faf5 	bl	800028c <__adddf3>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f7fb ff9d 	bl	8000be8 <__aeabi_d2f>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	623b      	str	r3, [r7, #32]
	last_d = d;
 8004cb2:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <Run_YawSpeed+0xd9c>)
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	6013      	str	r3, [r2, #0]
	float mv = p + i + d;
 8004cb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004cbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8004cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ccc:	edc7 7a05 	vstr	s15, [r7, #20]
	last_error = error;
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <Run_YawSpeed+0xd70>)
 8004cd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cd4:	8013      	strh	r3, [r2, #0]
	last_mv = mv;
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <Run_YawSpeed+0xd74>)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6013      	str	r3, [r2, #0]
	return mv;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	ee07 3a90 	vmov	s15, r3
}
 8004ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004cee:	bf00      	nop
 8004cf0:	70a3d70a 	.word	0x70a3d70a
 8004cf4:	3fb70a3d 	.word	0x3fb70a3d
 8004cf8:	5c91d14e 	.word	0x5c91d14e
 8004cfc:	3fec43fe 	.word	0x3fec43fe
 8004d00:	eb851eb8 	.word	0xeb851eb8
 8004d04:	3f9eb851 	.word	0x3f9eb851
 8004d08:	f62b6ae8 	.word	0xf62b6ae8
 8004d0c:	3fe5dd97 	.word	0x3fe5dd97
 8004d10:	09d49518 	.word	0x09d49518
 8004d14:	3fbc2268 	.word	0x3fbc2268
 8004d18:	14e3bcd3 	.word	0x14e3bcd3
 8004d1c:	3fe7c91d 	.word	0x3fe7c91d
 8004d20:	20000b3e 	.word	0x20000b3e
 8004d24:	20000b40 	.word	0x20000b40
 8004d28:	42b40000 	.word	0x42b40000
 8004d2c:	c2b40000 	.word	0xc2b40000
 8004d30:	20000b3c 	.word	0x20000b3c
 8004d34:	20000b24 	.word	0x20000b24
 8004d38:	20000b2c 	.word	0x20000b2c
 8004d3c:	20000b30 	.word	0x20000b30
 8004d40:	20000b34 	.word	0x20000b34
 8004d44:	20000b38 	.word	0x20000b38
 8004d48:	3ff00000 	.word	0x3ff00000
 8004d4c:	20000b28 	.word	0x20000b28

08004d50 <Run_LineTracing>:


void Run_LineTracing(float speed, float period, uint8_t flag) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, speed, flag);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	4618      	mov	r0, r3
 8004d66:	edd7 0a03 	vldr	s1, [r7, #12]
 8004d6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d6e:	f7ff f91f 	bl	8003fb0 <Run_YawSpeed>
 8004d72:	ed87 0a05 	vstr	s0, [r7, #20]
	float temp_speed = speed;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	613b      	str	r3, [r7, #16]
	if(yaw_speed > 99) yaw_speed = 99;
 8004d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d7e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004e54 <Run_LineTracing+0x104>
 8004d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8a:	dd02      	ble.n	8004d92 <Run_LineTracing+0x42>
 8004d8c:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <Run_LineTracing+0x108>)
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e00a      	b.n	8004da8 <Run_LineTracing+0x58>
	else if(yaw_speed < -99) yaw_speed = -99;
 8004d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d96:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004e5c <Run_LineTracing+0x10c>
 8004d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d501      	bpl.n	8004da8 <Run_LineTracing+0x58>
 8004da4:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <Run_LineTracing+0x110>)
 8004da6:	617b      	str	r3, [r7, #20]
	if(speed+yaw_speed > 99) {
 8004da8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dac:	edd7 7a05 	vldr	s15, [r7, #20]
 8004db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004e54 <Run_LineTracing+0x104>
 8004db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc0:	dd10      	ble.n	8004de4 <Run_LineTracing+0x94>
		temp_speed-=(speed+yaw_speed-99);
 8004dc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dce:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e54 <Run_LineTracing+0x104>
 8004dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dde:	edc7 7a04 	vstr	s15, [r7, #16]
 8004de2:	e01c      	b.n	8004e1e <Run_LineTracing+0xce>
	}
	else if(speed-yaw_speed < -99) {
 8004de4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004df0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004e5c <Run_LineTracing+0x10c>
 8004df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d50f      	bpl.n	8004e1e <Run_LineTracing+0xce>
		temp_speed+=(speed-yaw_speed+99);
 8004dfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e02:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004e54 <Run_LineTracing+0x104>
 8004e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e12:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e1a:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	Motor_SetPoint(&MOTOR_R, temp_speed-yaw_speed);
 8004e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e2e:	480d      	ldr	r0, [pc, #52]	; (8004e64 <Run_LineTracing+0x114>)
 8004e30:	f7fd fad0 	bl	80023d4 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, temp_speed+yaw_speed);
 8004e34:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e40:	eeb0 0a67 	vmov.f32	s0, s15
 8004e44:	4808      	ldr	r0, [pc, #32]	; (8004e68 <Run_LineTracing+0x118>)
 8004e46:	f7fd fac5 	bl	80023d4 <Motor_SetPoint>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	42c60000 	.word	0x42c60000
 8004e58:	42c60000 	.word	0x42c60000
 8004e5c:	c2c60000 	.word	0xc2c60000
 8004e60:	c2c60000 	.word	0xc2c60000
 8004e64:	20000a8c 	.word	0x20000a8c
 8004e68:	20000ad4 	.word	0x20000ad4

08004e6c <Run_SetMotorSpeed>:
uint8_t Run_MotorNotOver() {
	return (Motor_GetPoint(&MOTOR_R) < 99) && (Motor_GetPoint(&MOTOR_R) > -99)
		&& (Motor_GetPoint(&MOTOR_L) < 99) && (Motor_GetPoint(&MOTOR_L) > -99) ;
}

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e76:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 8004e7a:	ed97 0a00 	vldr	s0, [r7]
 8004e7e:	4806      	ldr	r0, [pc, #24]	; (8004e98 <Run_SetMotorSpeed+0x2c>)
 8004e80:	f7fd faa8 	bl	80023d4 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8004e84:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e88:	4804      	ldr	r0, [pc, #16]	; (8004e9c <Run_SetMotorSpeed+0x30>)
 8004e8a:	f7fd faa3 	bl	80023d4 <Motor_SetPoint>
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000a8c 	.word	0x20000a8c
 8004e9c:	20000ad4 	.word	0x20000ad4

08004ea0 <Run_SetReverseSpeed>:
void Run_SetMotorAccl(float accl) {
	Motor_SetAccl(&MOTOR_R, accl);
	Motor_SetAccl(&MOTOR_L, accl);
}

void Run_SetReverseSpeed(float factor) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_SetPoint(&MOTOR_R, -Motor_GetPoint(&MOTOR_R)*factor);
 8004eaa:	4812      	ldr	r0, [pc, #72]	; (8004ef4 <Run_SetReverseSpeed+0x54>)
 8004eac:	f7fd faaf 	bl	800240e <Motor_GetPoint>
 8004eb0:	eef0 7a40 	vmov.f32	s15, s0
 8004eb4:	eeb1 7a67 	vneg.f32	s14, s15
 8004eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <Run_SetReverseSpeed+0x54>)
 8004ec6:	f7fd fa85 	bl	80023d4 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, -Motor_GetPoint(&MOTOR_L)*factor);
 8004eca:	480b      	ldr	r0, [pc, #44]	; (8004ef8 <Run_SetReverseSpeed+0x58>)
 8004ecc:	f7fd fa9f 	bl	800240e <Motor_GetPoint>
 8004ed0:	eef0 7a40 	vmov.f32	s15, s0
 8004ed4:	eeb1 7a67 	vneg.f32	s14, s15
 8004ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee4:	4804      	ldr	r0, [pc, #16]	; (8004ef8 <Run_SetReverseSpeed+0x58>)
 8004ee6:	f7fd fa75 	bl	80023d4 <Motor_SetPoint>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000a8c 	.word	0x20000a8c
 8004ef8:	20000ad4 	.word	0x20000ad4

08004efc <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 8004f04:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <SEN_Init+0x3c>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e008      	b.n	8004f22 <SEN_Init+0x26>
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <SEN_Init+0x40>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004f18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b0d      	cmp	r3, #13
 8004f26:	ddf3      	ble.n	8004f10 <SEN_Init+0x14>
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000b44 	.word	0x20000b44
 8004f3c:	20000b80 	.word	0x20000b80

08004f40 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b08d      	sub	sp, #52	; 0x34
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4c:	e05a      	b.n	8005004 <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <SEN_Filter+0xd4>)
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	8818      	ldrh	r0, [r3, #0]
 8004f5e:	492e      	ldr	r1, [pc, #184]	; (8005018 <SEN_Filter+0xd8>)
 8004f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4423      	add	r3, r4
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 8004f72:	4b28      	ldr	r3, [pc, #160]	; (8005014 <SEN_Filter+0xd4>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d806      	bhi.n	8004f88 <SEN_Filter+0x48>
 8004f7a:	4b26      	ldr	r3, [pc, #152]	; (8005014 <SEN_Filter+0xd4>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <SEN_Filter+0xd4>)
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <SEN_Filter+0x4e>
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <SEN_Filter+0xd4>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	221c      	movs	r2, #28
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f00a fdb9 	bl	800fb0e <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa0:	e01f      	b.n	8004fe2 <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	3330      	adds	r3, #48	; 0x30
 8004fa8:	443b      	add	r3, r7
 8004faa:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004fae:	481a      	ldr	r0, [pc, #104]	; (8005018 <SEN_Filter+0xd8>)
 8004fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004fc2:	4a16      	ldr	r2, [pc, #88]	; (800501c <SEN_Filter+0xdc>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	08db      	lsrs	r3, r3, #3
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	440b      	add	r3, r1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	3330      	adds	r3, #48	; 0x30
 8004fd6:	443b      	add	r3, r7
 8004fd8:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	3301      	adds	r3, #1
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	dddc      	ble.n	8004fa2 <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	441a      	add	r2, r3
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	3330      	adds	r3, #48	; 0x30
 8004ff6:	443b      	add	r3, r7
 8004ff8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004ffc:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	3301      	adds	r3, #1
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	2b0d      	cmp	r3, #13
 8005008:	dda1      	ble.n	8004f4e <SEN_Filter+0xe>
	}
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	3734      	adds	r7, #52	; 0x34
 8005010:	46bd      	mov	sp, r7
 8005012:	bd90      	pop	{r4, r7, pc}
 8005014:	20000cc8 	.word	0x20000cc8
 8005018:	20000bb0 	.word	0x20000bb0
 800501c:	cccccccd 	.word	0xcccccccd

08005020 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <SEN_StartReadSensor+0x18>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	220e      	movs	r2, #14
 800502a:	4904      	ldr	r1, [pc, #16]	; (800503c <SEN_StartReadSensor+0x1c>)
 800502c:	4618      	mov	r0, r3
 800502e:	f005 f809 	bl	800a044 <HAL_ADC_Start_DMA>
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000b44 	.word	0x20000b44
 800503c:	20000b48 	.word	0x20000b48

08005040 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b5b      	ldr	r3, [pc, #364]	; (80051bc <SEN_CallbackRoutine+0x17c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	f040 80ad 	bne.w	80051b2 <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 8005058:	4859      	ldr	r0, [pc, #356]	; (80051c0 <SEN_CallbackRoutine+0x180>)
 800505a:	f7ff ff71 	bl	8004f40 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e017      	b.n	8005094 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	005a      	lsls	r2, r3, #1
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f1c3 030d 	rsb	r3, r3, #13
 800506e:	4954      	ldr	r1, [pc, #336]	; (80051c0 <SEN_CallbackRoutine+0x180>)
 8005070:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005074:	4a53      	ldr	r2, [pc, #332]	; (80051c4 <SEN_CallbackRoutine+0x184>)
 8005076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	3301      	adds	r3, #1
 8005080:	4a4f      	ldr	r2, [pc, #316]	; (80051c0 <SEN_CallbackRoutine+0x180>)
 8005082:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005086:	4a4f      	ldr	r2, [pc, #316]	; (80051c4 <SEN_CallbackRoutine+0x184>)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3301      	adds	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b06      	cmp	r3, #6
 8005098:	dde4      	ble.n	8005064 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 800509a:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <SEN_CallbackRoutine+0x188>)
 800509c:	2200      	movs	r2, #0
 800509e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e06c      	b.n	8005180 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 80050aa:	4b48      	ldr	r3, [pc, #288]	; (80051cc <SEN_CallbackRoutine+0x18c>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12a      	bne.n	8005108 <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 80050b2:	4a44      	ldr	r2, [pc, #272]	; (80051c4 <SEN_CallbackRoutine+0x184>)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80050ba:	4945      	ldr	r1, [pc, #276]	; (80051d0 <SEN_CallbackRoutine+0x190>)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d91a      	bls.n	80050fc <SEN_CallbackRoutine+0xbc>
				bit = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 80050ca:	4a3e      	ldr	r2, [pc, #248]	; (80051c4 <SEN_CallbackRoutine+0x184>)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d2:	4619      	mov	r1, r3
 80050d4:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <SEN_CallbackRoutine+0x190>)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050dc:	1acb      	subs	r3, r1, r3
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <SEN_CallbackRoutine+0x194>)
 80050e0:	fb82 1203 	smull	r1, r2, r2, r3
 80050e4:	1092      	asrs	r2, r2, #2
 80050e6:	17db      	asrs	r3, r3, #31
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3301      	adds	r3, #1
 80050ee:	b2d9      	uxtb	r1, r3
 80050f0:	4a39      	ldr	r2, [pc, #228]	; (80051d8 <SEN_CallbackRoutine+0x198>)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	460a      	mov	r2, r1
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	e02f      	b.n	800515c <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 80050fc:	4a36      	ldr	r2, [pc, #216]	; (80051d8 <SEN_CallbackRoutine+0x198>)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e029      	b.n	800515c <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 8005108:	4a2e      	ldr	r2, [pc, #184]	; (80051c4 <SEN_CallbackRoutine+0x184>)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005110:	492f      	ldr	r1, [pc, #188]	; (80051d0 <SEN_CallbackRoutine+0x190>)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005118:	429a      	cmp	r2, r3
 800511a:	d21a      	bcs.n	8005152 <SEN_CallbackRoutine+0x112>
				bit = 1;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 8005120:	4a2b      	ldr	r2, [pc, #172]	; (80051d0 <SEN_CallbackRoutine+0x190>)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005128:	4619      	mov	r1, r3
 800512a:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <SEN_CallbackRoutine+0x184>)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <SEN_CallbackRoutine+0x194>)
 8005136:	fb82 1203 	smull	r1, r2, r2, r3
 800513a:	1092      	asrs	r2, r2, #2
 800513c:	17db      	asrs	r3, r3, #31
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	3301      	adds	r3, #1
 8005144:	b2d9      	uxtb	r1, r3
 8005146:	4a24      	ldr	r2, [pc, #144]	; (80051d8 <SEN_CallbackRoutine+0x198>)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	460a      	mov	r2, r1
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e004      	b.n	800515c <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8005152:	4a21      	ldr	r2, [pc, #132]	; (80051d8 <SEN_CallbackRoutine+0x198>)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f1c3 030d 	rsb	r3, r3, #13
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	b21a      	sxth	r2, r3
 800516a:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <SEN_CallbackRoutine+0x188>)
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b21b      	sxth	r3, r3
 8005170:	4313      	orrs	r3, r2
 8005172:	b21b      	sxth	r3, r3
 8005174:	b29a      	uxth	r2, r3
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <SEN_CallbackRoutine+0x188>)
 8005178:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3301      	adds	r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b0d      	cmp	r3, #13
 8005184:	dd8f      	ble.n	80050a6 <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <SEN_CallbackRoutine+0x19c>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d102      	bne.n	8005194 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 800518e:	2000      	movs	r0, #0
 8005190:	f000 f870 	bl	8005274 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <SEN_CallbackRoutine+0x1a0>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	b2da      	uxtb	r2, r3
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <SEN_CallbackRoutine+0x1a0>)
 80051a0:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <SEN_CallbackRoutine+0x1a0>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f023 0302 	bic.w	r3, r3, #2
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <SEN_CallbackRoutine+0x1a0>)
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e000      	b.n	80051b4 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 80051b2:	bf00      	nop
}
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000b44 	.word	0x20000b44
 80051c0:	20000b48 	.word	0x20000b48
 80051c4:	20000b64 	.word	0x20000b64
 80051c8:	20000baa 	.word	0x20000baa
 80051cc:	20000bac 	.word	0x20000bac
 80051d0:	20000b80 	.word	0x20000b80
 80051d4:	66666667 	.word	0x66666667
 80051d8:	20000b9c 	.word	0x20000b9c
 80051dc:	20000cd4 	.word	0x20000cd4
 80051e0:	20000cc9 	.word	0x20000cc9

080051e4 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 80051ea:	4b1f      	ldr	r3, [pc, #124]	; (8005268 <SEN_StartAutoCalibration+0x84>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d035      	beq.n	800525e <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80051f2:	201c      	movs	r0, #28
 80051f4:	f009 fe56 	bl	800eea4 <malloc>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <SEN_StartAutoCalibration+0x88>)
 80051fe:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8005200:	201c      	movs	r0, #28
 8005202:	f009 fe4f 	bl	800eea4 <malloc>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <SEN_StartAutoCalibration+0x8c>)
 800520c:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 800520e:	4b17      	ldr	r3, [pc, #92]	; (800526c <SEN_StartAutoCalibration+0x88>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <SEN_StartAutoCalibration+0x3a>
 8005216:	4b16      	ldr	r3, [pc, #88]	; (8005270 <SEN_StartAutoCalibration+0x8c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e011      	b.n	8005248 <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <SEN_StartAutoCalibration+0x88>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	2200      	movs	r2, #0
 8005230:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 8005232:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <SEN_StartAutoCalibration+0x8c>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005240:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3301      	adds	r3, #1
 8005246:	607b      	str	r3, [r7, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b0d      	cmp	r3, #13
 800524c:	ddea      	ble.n	8005224 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <SEN_StartAutoCalibration+0x84>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e004      	b.n	8005260 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <SEN_StartAutoCalibration+0x84>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e000      	b.n	8005260 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 800525e:	bf00      	nop
}
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000cd4 	.word	0x20000cd4
 800526c:	20000ccc 	.word	0x20000ccc
 8005270:	20000cd0 	.word	0x20000cd0

08005274 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e02f      	b.n	80052e4 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <SEN_AutoCalibrationRoutine+0x84>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	4413      	add	r3, r2
 800528e:	881a      	ldrh	r2, [r3, #0]
 8005290:	491a      	ldr	r1, [pc, #104]	; (80052fc <SEN_AutoCalibrationRoutine+0x88>)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005298:	429a      	cmp	r2, r3
 800529a:	d20a      	bcs.n	80052b2 <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <SEN_AutoCalibrationRoutine+0x84>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	4915      	ldr	r1, [pc, #84]	; (80052fc <SEN_AutoCalibrationRoutine+0x88>)
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e015      	b.n	80052de <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <SEN_AutoCalibrationRoutine+0x8c>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4413      	add	r3, r2
 80052bc:	881a      	ldrh	r2, [r3, #0]
 80052be:	490f      	ldr	r1, [pc, #60]	; (80052fc <SEN_AutoCalibrationRoutine+0x88>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d909      	bls.n	80052de <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <SEN_AutoCalibrationRoutine+0x8c>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4413      	add	r3, r2
 80052d4:	4909      	ldr	r1, [pc, #36]	; (80052fc <SEN_AutoCalibrationRoutine+0x88>)
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80052dc:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b0d      	cmp	r3, #13
 80052e8:	ddcc      	ble.n	8005284 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	20000ccc 	.word	0x20000ccc
 80052fc:	20000b64 	.word	0x20000b64
 8005300:	20000cd0 	.word	0x20000cd0
 8005304:	00000000 	.word	0x00000000

08005308 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 8005308:	b5b0      	push	{r4, r5, r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <SEN_EndAutoCalibration+0xe8>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d060      	beq.n	80053dc <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d04d      	beq.n	80053c0 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e047      	b.n	80053ba <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <SEN_EndAutoCalibration+0xec>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	881a      	ldrh	r2, [r3, #0]
 8005336:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <SEN_EndAutoCalibration+0xf0>)
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	440b      	add	r3, r1
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d335      	bcc.n	80053b2 <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 8005346:	4b2b      	ldr	r3, [pc, #172]	; (80053f4 <SEN_EndAutoCalibration+0xec>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <SEN_EndAutoCalibration+0xf0>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	1acb      	subs	r3, r1, r3
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f8de 	bl	8000524 <__aeabi_i2d>
 8005368:	a31f      	add	r3, pc, #124	; (adr r3, 80053e8 <SEN_EndAutoCalibration+0xe0>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb f943 	bl	80005f8 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4614      	mov	r4, r2
 8005378:	461d      	mov	r5, r3
 800537a:	4b1f      	ldr	r3, [pc, #124]	; (80053f8 <SEN_EndAutoCalibration+0xf0>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb f8cc 	bl	8000524 <__aeabi_i2d>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4620      	mov	r0, r4
 8005392:	4629      	mov	r1, r5
 8005394:	f7fa ff7a 	bl	800028c <__adddf3>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4610      	mov	r0, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	f7fb fc02 	bl	8000ba8 <__aeabi_d2uiz>
 80053a4:	4603      	mov	r3, r0
 80053a6:	b299      	uxth	r1, r3
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <SEN_EndAutoCalibration+0xf4>)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80053b0:	e000      	b.n	80053b4 <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 80053b2:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b0d      	cmp	r3, #13
 80053be:	ddb4      	ble.n	800532a <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <SEN_EndAutoCalibration+0xec>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f009 fd75 	bl	800eeb4 <free>
	free(calib_lower_adc);
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <SEN_EndAutoCalibration+0xf0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f009 fd70 	bl	800eeb4 <free>
	autocalib_status = 0;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <SEN_EndAutoCalibration+0xe8>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e000      	b.n	80053de <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 80053dc:	bf00      	nop
}
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bdb0      	pop	{r4, r5, r7, pc}
 80053e4:	f3af 8000 	nop.w
 80053e8:	9999999a 	.word	0x9999999a
 80053ec:	3fd99999 	.word	0x3fd99999
 80053f0:	20000cd4 	.word	0x20000cd4
 80053f4:	20000ccc 	.word	0x20000ccc
 80053f8:	20000cd0 	.word	0x20000cd0
 80053fc:	20000b80 	.word	0x20000b80

08005400 <SEN_BlackLine>:

void SEN_BlackLine() {
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <SEN_BlackLine+0x14>)
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000bac 	.word	0x20000bac

08005418 <SEN_WhiteLine>:

void SEN_WhiteLine() {
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
	sensor_invert = 1;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <SEN_WhiteLine+0x14>)
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000bac 	.word	0x20000bac

08005430 <SEN_Invert>:

void SEN_Invert() {
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <SEN_Invert+0x24>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <SEN_Invert+0x24>)
 8005446:	701a      	strb	r2, [r3, #0]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000bac 	.word	0x20000bac

08005458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <HAL_MspInit+0x4c>)
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <HAL_MspInit+0x4c>)
 8005468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800546c:	6453      	str	r3, [r2, #68]	; 0x44
 800546e:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <HAL_MspInit+0x4c>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_MspInit+0x4c>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <HAL_MspInit+0x4c>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_MspInit+0x4c>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800

080054a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054ac:	e7fe      	b.n	80054ac <NMI_Handler+0x4>

080054ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054ae:	b480      	push	{r7}
 80054b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054b2:	e7fe      	b.n	80054b2 <HardFault_Handler+0x4>

080054b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054b8:	e7fe      	b.n	80054b8 <MemManage_Handler+0x4>

080054ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054be:	e7fe      	b.n	80054be <BusFault_Handler+0x4>

080054c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054c4:	e7fe      	b.n	80054c4 <UsageFault_Handler+0x4>

080054c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054c6:	b480      	push	{r7}
 80054c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054f4:	f004 fc0e 	bl	8009d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}

080054fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005500:	4802      	ldr	r0, [pc, #8]	; (800550c <ADC_IRQHandler+0x10>)
 8005502:	f004 fc8e 	bl	8009e22 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000510 	.word	0x20000510

08005510 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005514:	4802      	ldr	r0, [pc, #8]	; (8005520 <TIM6_DAC_IRQHandler+0x10>)
 8005516:	f008 f855 	bl	800d5c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000eb4 	.word	0x20000eb4

08005524 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005528:	4802      	ldr	r0, [pc, #8]	; (8005534 <DMA2_Stream0_IRQHandler+0x10>)
 800552a:	f005 fb95 	bl	800ac58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000558 	.word	0x20000558

08005538 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <GetAction+0x78>)
 8005548:	fba2 1203 	umull	r1, r2, r2, r3
 800554c:	0952      	lsrs	r2, r2, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f202 	mul.w	r2, r1, r2
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	b29b      	uxth	r3, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	b29a      	uxth	r2, r3
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <GetAction+0x7c>)
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	4413      	add	r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	3340      	adds	r3, #64	; 0x40
 800556a:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 800556c:	bf00      	nop
 800556e:	f7fc fc27 	bl	8001dc0 <EEP_ReadyToWrite>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0fa      	beq.n	800556e <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005578:	f107 010c 	add.w	r1, r7, #12
 800557c:	8bfb      	ldrh	r3, [r7, #30]
 800557e:	2210      	movs	r2, #16
 8005580:	4618      	mov	r0, r3
 8005582:	f7fc fbf7 	bl	8001d74 <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <GetAction+0x80>)
 8005588:	461c      	mov	r4, r3
 800558a:	f107 030c 	add.w	r3, r7, #12
 800558e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return plan_active;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <GetAction+0x80>)
 800559a:	461c      	mov	r4, r3
 800559c:	4613      	mov	r3, r2
 800559e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055a0:	6020      	str	r0, [r4, #0]
 80055a2:	6061      	str	r1, [r4, #4]
 80055a4:	60a2      	str	r2, [r4, #8]
}
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	3724      	adds	r7, #36	; 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd90      	pop	{r4, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	51eb851f 	.word	0x51eb851f
 80055b4:	20000cd6 	.word	0x20000cd6
 80055b8:	20000d50 	.word	0x20000d50

080055bc <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b08b      	sub	sp, #44	; 0x2c
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	1d3c      	adds	r4, r7, #4
 80055c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055c8:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	4a18      	ldr	r2, [pc, #96]	; (8005630 <SetAction+0x74>)
 80055ce:	fba2 1203 	umull	r1, r2, r2, r3
 80055d2:	0952      	lsrs	r2, r2, #5
 80055d4:	2164      	movs	r1, #100	; 0x64
 80055d6:	fb01 f202 	mul.w	r2, r1, r2
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 80055de:	4b15      	ldr	r3, [pc, #84]	; (8005634 <SetAction+0x78>)
 80055e0:	461c      	mov	r4, r3
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <SetAction+0x7c>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	4413      	add	r3, r2
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3340      	adds	r3, #64	; 0x40
 80055fe:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 8005600:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <SetAction+0x78>)
 8005602:	f107 0314 	add.w	r3, r7, #20
 8005606:	ca07      	ldmia	r2, {r0, r1, r2}
 8005608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 800560c:	bf00      	nop
 800560e:	f7fc fbd7 	bl	8001dc0 <EEP_ReadyToWrite>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0fa      	beq.n	800560e <SetAction+0x52>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005618:	f107 0114 	add.w	r1, r7, #20
 800561c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800561e:	2210      	movs	r2, #16
 8005620:	4618      	mov	r0, r3
 8005622:	f7fc fb5f 	bl	8001ce4 <EEP_WriteMem>
}
 8005626:	bf00      	nop
 8005628:	372c      	adds	r7, #44	; 0x2c
 800562a:	46bd      	mov	sp, r7
 800562c:	bd90      	pop	{r4, r7, pc}
 800562e:	bf00      	nop
 8005630:	51eb851f 	.word	0x51eb851f
 8005634:	20000d50 	.word	0x20000d50
 8005638:	20000cd6 	.word	0x20000cd6

0800563c <Storage_ResetPlan>:

void Storage_ResetPlan() {
 800563c:	b580      	push	{r7, lr}
 800563e:	b0b2      	sub	sp, #200	; 0xc8
 8005640:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 8005642:	4b37      	ldr	r3, [pc, #220]	; (8005720 <Storage_ResetPlan+0xe4>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 8005650:	2328      	movs	r3, #40	; 0x28
 8005652:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 8005656:	2364      	movs	r3, #100	; 0x64
 8005658:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 10;
 800565c:	230a      	movs	r3, #10
 800565e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 8005662:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005666:	3302      	adds	r3, #2
 8005668:	2214      	movs	r2, #20
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f00a fa4e 	bl	800fb0e <memset>
	temp.kpid[0] = 4.71428;
 8005672:	4b2c      	ldr	r3, [pc, #176]	; (8005724 <Storage_ResetPlan+0xe8>)
 8005674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 0;
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	temp.status_pid = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
	temp.alpha = 1;
 800568e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	temp.acc = 100;
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <Storage_ResetPlan+0xec>)
 8005698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 800569c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80056a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056a4:	2230      	movs	r2, #48	; 0x30
 80056a6:	4618      	mov	r0, r3
 80056a8:	f00a fac0 	bl	800fc2c <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 80056ac:	4b1f      	ldr	r3, [pc, #124]	; (800572c <Storage_ResetPlan+0xf0>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 80056b6:	bf00      	nop
 80056b8:	f7fc fb82 	bl	8001dc0 <EEP_ReadyToWrite>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0fa      	beq.n	80056b8 <Storage_ResetPlan+0x7c>
	EEP_WritePage(page_plan, buff);
 80056c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80056c6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fc fae5 	bl	8001c9c <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056d8:	e018      	b.n	800570c <Storage_ResetPlan+0xd0>

		action_temp = plan_default;
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <Storage_ResetPlan+0xf4>)
 80056dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80056e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80056ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80056ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		SetAction(action_temp, i);
 80056f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80056fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80056fe:	f7ff ff5d 	bl	80055bc <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8005702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005706:	3301      	adds	r3, #1
 8005708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800570c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005710:	2b63      	cmp	r3, #99	; 0x63
 8005712:	dde2      	ble.n	80056da <Storage_ResetPlan+0x9e>
	}
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	37c8      	adds	r7, #200	; 0xc8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000cd5 	.word	0x20000cd5
 8005724:	4096db62 	.word	0x4096db62
 8005728:	42c80000 	.word	0x42c80000
 800572c:	20000cd6 	.word	0x20000cd6
 8005730:	08012460 	.word	0x08012460

08005734 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8005734:	b580      	push	{r7, lr}
 8005736:	b094      	sub	sp, #80	; 0x50
 8005738:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	2240      	movs	r2, #64	; 0x40
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f00a f9e4 	bl	800fb0e <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 8005746:	23ab      	movs	r3, #171	; 0xab
 8005748:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 800574a:	230f      	movs	r3, #15
 800574c:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	3310      	adds	r3, #16
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8005758:	2300      	movs	r3, #0
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575c:	e012      	b.n	8005784 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	0052      	lsls	r2, r2, #1
 8005766:	441a      	add	r2, r3
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	4413      	add	r3, r2
 800576c:	01db      	lsls	r3, r3, #7
 800576e:	b29a      	uxth	r2, r3
 8005770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005776:	440b      	add	r3, r1
 8005778:	3240      	adds	r2, #64	; 0x40
 800577a:	b292      	uxth	r2, r2
 800577c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	3301      	adds	r3, #1
 8005782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005786:	2b0e      	cmp	r3, #14
 8005788:	dde9      	ble.n	800575e <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	3320      	adds	r3, #32
 800578e:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 8005790:	2300      	movs	r3, #0
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
 8005794:	e009      	b.n	80057aa <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 8005796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800579c:	4413      	add	r3, r2
 800579e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80057a2:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80057a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a6:	3301      	adds	r3, #1
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ac:	2b0d      	cmp	r3, #13
 80057ae:	ddf2      	ble.n	8005796 <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 80057b0:	bf00      	nop
 80057b2:	f7fc fb05 	bl	8001dc0 <EEP_ReadyToWrite>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0fa      	beq.n	80057b2 <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7fc fa6b 	bl	8001c9c <EEP_WritePage>
}
 80057c6:	bf00      	nop
 80057c8:	3750      	adds	r7, #80	; 0x50
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <Storage_Init>:

uint8_t Storage_Init() {
 80057d0:	b5b0      	push	{r4, r5, r7, lr}
 80057d2:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 80057d4:	bf00      	nop
 80057d6:	f7fc faf3 	bl	8001dc0 <EEP_ReadyToWrite>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0fa      	beq.n	80057d6 <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 80057e0:	4913      	ldr	r1, [pc, #76]	; (8005830 <Storage_Init+0x60>)
 80057e2:	2000      	movs	r0, #0
 80057e4:	f7fc faa2 	bl	8001d2c <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <Storage_Init+0x60>)
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2bab      	cmp	r3, #171	; 0xab
 80057ee:	d001      	beq.n	80057f4 <Storage_Init+0x24>
 80057f0:	2300      	movs	r3, #0
 80057f2:	e01b      	b.n	800582c <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 80057f4:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <Storage_Init+0x60>)
 80057f6:	791a      	ldrb	r2, [r3, #4]
 80057f8:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <Storage_Init+0x64>)
 80057fa:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <Storage_Init+0x64>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <Storage_Init+0x60>)
 8005806:	4413      	add	r3, r2
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <Storage_Init+0x68>)
 800580c:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 800580e:	4a0b      	ldr	r2, [pc, #44]	; (800583c <Storage_Init+0x6c>)
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <Storage_Init+0x60>)
 8005812:	4615      	mov	r5, r2
 8005814:	f103 0420 	add.w	r4, r3, #32
 8005818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800581a:	6028      	str	r0, [r5, #0]
 800581c:	6069      	str	r1, [r5, #4]
 800581e:	60aa      	str	r2, [r5, #8]
 8005820:	60eb      	str	r3, [r5, #12]
 8005822:	cc07      	ldmia	r4!, {r0, r1, r2}
 8005824:	6128      	str	r0, [r5, #16]
 8005826:	6169      	str	r1, [r5, #20]
 8005828:	61aa      	str	r2, [r5, #24]
	return 1;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	bdb0      	pop	{r4, r5, r7, pc}
 8005830:	20000cdc 	.word	0x20000cdc
 8005834:	20000cd5 	.word	0x20000cd5
 8005838:	20000cd6 	.word	0x20000cd6
 800583c:	20000b80 	.word	0x20000b80

08005840 <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8005840:	b580      	push	{r7, lr}
 8005842:	b092      	sub	sp, #72	; 0x48
 8005844:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8005846:	4b13      	ldr	r3, [pc, #76]	; (8005894 <Storage_PlanInit+0x54>)
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	b29b      	uxth	r3, r3
 800584e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8005852:	bf00      	nop
 8005854:	f7fc fab4 	bl	8001dc0 <EEP_ReadyToWrite>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0fa      	beq.n	8005854 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 800585e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005862:	b29b      	uxth	r3, r3
 8005864:	1d3a      	adds	r2, r7, #4
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7fc fa5f 	bl	8001d2c <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	2230      	movs	r2, #48	; 0x30
 8005872:	4619      	mov	r1, r3
 8005874:	4808      	ldr	r0, [pc, #32]	; (8005898 <Storage_PlanInit+0x58>)
 8005876:	f00a f9d9 	bl	800fc2c <memcpy>
	if(plan.id>>7 != 1) return 0;
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <Storage_PlanInit+0x58>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d001      	beq.n	800588a <Storage_PlanInit+0x4a>
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <Storage_PlanInit+0x4c>
	return 1;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3748      	adds	r7, #72	; 0x48
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000cd6 	.word	0x20000cd6
 8005898:	20000d60 	.word	0x20000d60

0800589c <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 800589c:	b5b0      	push	{r4, r5, r7, lr}
 800589e:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 80058a0:	bf00      	nop
 80058a2:	f7fc fa8d 	bl	8001dc0 <EEP_ReadyToWrite>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0fa      	beq.n	80058a2 <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80058ac:	221c      	movs	r2, #28
 80058ae:	490a      	ldr	r1, [pc, #40]	; (80058d8 <Storage_GetADCThreshold+0x3c>)
 80058b0:	2020      	movs	r0, #32
 80058b2:	f7fc fa5f 	bl	8001d74 <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80058b6:	4a09      	ldr	r2, [pc, #36]	; (80058dc <Storage_GetADCThreshold+0x40>)
 80058b8:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <Storage_GetADCThreshold+0x44>)
 80058ba:	4615      	mov	r5, r2
 80058bc:	f103 0420 	add.w	r4, r3, #32
 80058c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058c2:	6028      	str	r0, [r5, #0]
 80058c4:	6069      	str	r1, [r5, #4]
 80058c6:	60aa      	str	r2, [r5, #8]
 80058c8:	60eb      	str	r3, [r5, #12]
 80058ca:	cc07      	ldmia	r4!, {r0, r1, r2}
 80058cc:	6128      	str	r0, [r5, #16]
 80058ce:	6169      	str	r1, [r5, #20]
 80058d0:	61aa      	str	r2, [r5, #24]
}
 80058d2:	bf00      	nop
 80058d4:	bdb0      	pop	{r4, r5, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000cfc 	.word	0x20000cfc
 80058dc:	20000b80 	.word	0x20000b80
 80058e0:	20000cdc 	.word	0x20000cdc

080058e4 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <Storage_SetADCThreshold+0x3c>)
 80058ea:	4a0e      	ldr	r2, [pc, #56]	; (8005924 <Storage_SetADCThreshold+0x40>)
 80058ec:	f103 0420 	add.w	r4, r3, #32
 80058f0:	4615      	mov	r5, r2
 80058f2:	6828      	ldr	r0, [r5, #0]
 80058f4:	6869      	ldr	r1, [r5, #4]
 80058f6:	68aa      	ldr	r2, [r5, #8]
 80058f8:	68eb      	ldr	r3, [r5, #12]
 80058fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058fc:	6928      	ldr	r0, [r5, #16]
 80058fe:	6969      	ldr	r1, [r5, #20]
 8005900:	69aa      	ldr	r2, [r5, #24]
 8005902:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8005904:	bf00      	nop
 8005906:	f7fc fa5b 	bl	8001dc0 <EEP_ReadyToWrite>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0fa      	beq.n	8005906 <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8005910:	221c      	movs	r2, #28
 8005912:	4905      	ldr	r1, [pc, #20]	; (8005928 <Storage_SetADCThreshold+0x44>)
 8005914:	2020      	movs	r0, #32
 8005916:	f7fc f9e5 	bl	8001ce4 <EEP_WriteMem>
}
 800591a:	bf00      	nop
 800591c:	bdb0      	pop	{r4, r5, r7, pc}
 800591e:	bf00      	nop
 8005920:	20000cdc 	.word	0x20000cdc
 8005924:	20000b80 	.word	0x20000b80
 8005928:	20000cfc 	.word	0x20000cfc

0800592c <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b094      	sub	sp, #80	; 0x50
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 8005936:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <Storage_GetPlan+0x94>)
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <Storage_GetPlan+0x94>)
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <Storage_GetPlan+0x98>)
 8005942:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <Storage_GetPlan+0x94>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <Storage_GetPlan+0x98>)
 800594e:	4413      	add	r3, r2
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <Storage_GetPlan+0x9c>)
 8005954:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8005956:	bf00      	nop
 8005958:	f7fc fa32 	bl	8001dc0 <EEP_ReadyToWrite>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0fa      	beq.n	8005958 <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8005962:	2201      	movs	r2, #1
 8005964:	4916      	ldr	r1, [pc, #88]	; (80059c0 <Storage_GetPlan+0x94>)
 8005966:	2004      	movs	r0, #4
 8005968:	f7fc f9bc 	bl	8001ce4 <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 800596c:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <Storage_GetPlan+0x9c>)
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	099b      	lsrs	r3, r3, #6
 8005972:	b29b      	uxth	r3, r3
 8005974:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8005978:	bf00      	nop
 800597a:	f7fc fa21 	bl	8001dc0 <EEP_ReadyToWrite>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0fa      	beq.n	800597a <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8005984:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005988:	b29b      	uxth	r3, r3
 800598a:	f107 020c 	add.w	r2, r7, #12
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f7fc f9cb 	bl	8001d2c <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	2230      	movs	r2, #48	; 0x30
 800599c:	4619      	mov	r1, r3
 800599e:	480b      	ldr	r0, [pc, #44]	; (80059cc <Storage_GetPlan+0xa0>)
 80059a0:	f00a f944 	bl	800fc2c <memcpy>
	if(plan.id>>7 != 1) return 0;
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <Storage_GetPlan+0xa0>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	09db      	lsrs	r3, r3, #7
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d001      	beq.n	80059b4 <Storage_GetPlan+0x88>
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <Storage_GetPlan+0x8a>
	return 1;
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3750      	adds	r7, #80	; 0x50
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000cd5 	.word	0x20000cd5
 80059c4:	20000cdc 	.word	0x20000cdc
 80059c8:	20000cd6 	.word	0x20000cd6
 80059cc:	20000d60 	.word	0x20000d60

080059d0 <Storage_SetPlanOther>:

void Storage_SetPlanOther(Plan_typedef* ptr_plan, uint8_t n_plan) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b094      	sub	sp, #80	; 0x50
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	3308      	adds	r3, #8
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <Storage_SetPlanOther+0x5c>)
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t plan_page = (n_plan_addr)/PAGE_SIZE;
 80059ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059f0:	099b      	lsrs	r3, r3, #6
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)ptr_plan, sizeof(Plan_typedef));
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	2230      	movs	r2, #48	; 0x30
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f00a f913 	bl	800fc2c <memcpy>
	while(!EEP_ReadyToWrite());
 8005a06:	bf00      	nop
 8005a08:	f7fc f9da 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0fa      	beq.n	8005a08 <Storage_SetPlanOther+0x38>
	EEP_WritePage(plan_page, buff);
 8005a12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f107 020c 	add.w	r2, r7, #12
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fc f93c 	bl	8001c9c <EEP_WritePage>
}
 8005a24:	bf00      	nop
 8005a26:	3750      	adds	r7, #80	; 0x50
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000cdc 	.word	0x20000cdc

08005a30 <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 8005a36:	2302      	movs	r3, #2
 8005a38:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005a3a:	bf00      	nop
 8005a3c:	f7fc f9c0 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0fa      	beq.n	8005a3c <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <Storage_SetCheckpoint+0x34>)
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	4413      	add	r3, r2
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2214      	movs	r2, #20
 8005a54:	4904      	ldr	r1, [pc, #16]	; (8005a68 <Storage_SetCheckpoint+0x38>)
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fc f944 	bl	8001ce4 <EEP_WriteMem>
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000cd6 	.word	0x20000cd6
 8005a68:	20000d62 	.word	0x20000d62

08005a6c <Storage_SetPID>:

void Storage_SetPID() {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8005a72:	2318      	movs	r3, #24
 8005a74:	71fb      	strb	r3, [r7, #7]
	uint8_t size = ((uint8_t*)&plan.alpha - (uint8_t*)&plan.kpid) + sizeof(float);
 8005a76:	2314      	movs	r3, #20
 8005a78:	71bb      	strb	r3, [r7, #6]
//	uint8_t buff[size];
//	memcpy(buff, (uint8_t*)plan.kpid, 3*sizeof(float));
//	buff[3*sizeof(float)] = plan.status_pid;
//	memcpy(buff+(3*sizeof(float))+1, (uint8_t*)&plan.alpha, sizeof(float));
	while(!EEP_ReadyToWrite());
 8005a7a:	bf00      	nop
 8005a7c:	f7fc f9a0 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0fa      	beq.n	8005a7c <Storage_SetPID+0x10>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, size);
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <Storage_SetPID+0x38>)
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	4413      	add	r3, r2
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	79ba      	ldrb	r2, [r7, #6]
 8005a94:	4904      	ldr	r1, [pc, #16]	; (8005aa8 <Storage_SetPID+0x3c>)
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fc f924 	bl	8001ce4 <EEP_WriteMem>

//	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
//	while(!EEP_ReadyToWrite());
//	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000cd6 	.word	0x20000cd6
 8005aa8:	20000d78 	.word	0x20000d78

08005aac <Storage_SetSpeed>:

void Storage_SetSpeed() {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8005ab2:	2316      	movs	r3, #22
 8005ab4:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005ab6:	bf00      	nop
 8005ab8:	f7fc f982 	bl	8001dc0 <EEP_ReadyToWrite>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0fa      	beq.n	8005ab8 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <Storage_SetSpeed+0x5c>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	4413      	add	r3, r2
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2202      	movs	r2, #2
 8005ad0:	490e      	ldr	r1, [pc, #56]	; (8005b0c <Storage_SetSpeed+0x60>)
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc f906 	bl	8001ce4 <EEP_WriteMem>

	offset = (uint8_t*)&plan.acc - (uint8_t*)&plan;
 8005ad8:	232c      	movs	r3, #44	; 0x2c
 8005ada:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005adc:	bf00      	nop
 8005ade:	f7fc f96f 	bl	8001dc0 <EEP_ReadyToWrite>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0fa      	beq.n	8005ade <Storage_SetSpeed+0x32>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.acc, sizeof(float));
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <Storage_SetSpeed+0x5c>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	4413      	add	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2204      	movs	r2, #4
 8005af6:	4906      	ldr	r1, [pc, #24]	; (8005b10 <Storage_SetSpeed+0x64>)
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fc f8f3 	bl	8001ce4 <EEP_WriteMem>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000cd6 	.word	0x20000cd6
 8005b0c:	20000d76 	.word	0x20000d76
 8005b10:	20000d8c 	.word	0x20000d8c

08005b14 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, uint8_t index) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
 8005b20:	4613      	mov	r3, r2
 8005b22:	70bb      	strb	r3, [r7, #2]
	index = index%DEF_ACTION_PER_PLAN;
 8005b24:	78bb      	ldrb	r3, [r7, #2]
 8005b26:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <GetActionOther+0x78>)
 8005b28:	fba2 1203 	umull	r1, r2, r2, r3
 8005b2c:	0952      	lsrs	r2, r2, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f202 	mul.w	r2, r1, r2
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	70bb      	strb	r3, [r7, #2]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <GetActionOther+0x7c>)
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	83fb      	strh	r3, [r7, #30]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8005b46:	78bb      	ldrb	r3, [r7, #2]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	8bfb      	ldrh	r3, [r7, #30]
 8005b50:	4413      	add	r3, r2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3340      	adds	r3, #64	; 0x40
 8005b56:	83bb      	strh	r3, [r7, #28]
	while(!EEP_ReadyToWrite());
 8005b58:	bf00      	nop
 8005b5a:	f7fc f931 	bl	8001dc0 <EEP_ReadyToWrite>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0fa      	beq.n	8005b5a <GetActionOther+0x46>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005b64:	f107 010c 	add.w	r1, r7, #12
 8005b68:	8bbb      	ldrh	r3, [r7, #28]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fc f901 	bl	8001d74 <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 8005b72:	f107 020c 	add.w	r2, r7, #12
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6810      	ldr	r0, [r2, #0]
 8005b7a:	6851      	ldr	r1, [r2, #4]
 8005b7c:	6892      	ldr	r2, [r2, #8]
 8005b7e:	6018      	str	r0, [r3, #0]
 8005b80:	6059      	str	r1, [r3, #4]
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	51eb851f 	.word	0x51eb851f
 8005b90:	20000cdc 	.word	0x20000cdc

08005b94 <SetActionOther>:

void SetActionOther(Action_typedef act, uint8_t index) {
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b08b      	sub	sp, #44	; 0x2c
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	1d3c      	adds	r4, r7, #4
 8005b9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ba0:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <SetActionOther+0x64>)
 8005ba6:	fba2 1203 	umull	r1, r2, r2, r3
 8005baa:	0952      	lsrs	r2, r2, #5
 8005bac:	2164      	movs	r1, #100	; 0x64
 8005bae:	fb01 f202 	mul.w	r2, r1, r2
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <SetActionOther+0x68>)
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3340      	adds	r3, #64	; 0x40
 8005bc8:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005bca:	f107 0314 	add.w	r3, r7, #20
 8005bce:	1d3a      	adds	r2, r7, #4
 8005bd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8005bd6:	bf00      	nop
 8005bd8:	f7fc f8f2 	bl	8001dc0 <EEP_ReadyToWrite>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0fa      	beq.n	8005bd8 <SetActionOther+0x44>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005be2:	f107 0114 	add.w	r1, r7, #20
 8005be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005be8:	2210      	movs	r2, #16
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fc f87a 	bl	8001ce4 <EEP_WriteMem>
}
 8005bf0:	bf00      	nop
 8005bf2:	372c      	adds	r7, #44	; 0x2c
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd90      	pop	{r4, r7, pc}
 8005bf8:	51eb851f 	.word	0x51eb851f
 8005bfc:	20000cd6 	.word	0x20000cd6

08005c00 <SetActionOther2>:

void SetActionOther2(uint8_t n_plan, Action_typedef act, uint8_t index) {
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b08b      	sub	sp, #44	; 0x2c
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4638      	mov	r0, r7
 8005c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005c0e:	4623      	mov	r3, r4
 8005c10:	73fb      	strb	r3, [r7, #15]
	index = index%DEF_ACTION_PER_PLAN;
 8005c12:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c16:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <SetActionOther2+0x7c>)
 8005c18:	fba2 1203 	umull	r1, r2, r2, r3
 8005c1c:	0952      	lsrs	r2, r2, #5
 8005c1e:	2164      	movs	r1, #100	; 0x64
 8005c20:	fb01 f202 	mul.w	r2, r1, r2
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <SetActionOther2+0x80>)
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t act_addr = n_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8005c38:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c44:	4413      	add	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3340      	adds	r3, #64	; 0x40
 8005c4a:	84bb      	strh	r3, [r7, #36]	; 0x24
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005c4c:	f107 0314 	add.w	r3, r7, #20
 8005c50:	463a      	mov	r2, r7
 8005c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8005c58:	bf00      	nop
 8005c5a:	f7fc f8b1 	bl	8001dc0 <EEP_ReadyToWrite>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0fa      	beq.n	8005c5a <SetActionOther2+0x5a>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005c64:	f107 0114 	add.w	r1, r7, #20
 8005c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fc f839 	bl	8001ce4 <EEP_WriteMem>
}
 8005c72:	bf00      	nop
 8005c74:	372c      	adds	r7, #44	; 0x2c
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd90      	pop	{r4, r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	51eb851f 	.word	0x51eb851f
 8005c80:	20000cdc 	.word	0x20000cdc

08005c84 <GetActionSequence>:

uint8_t GetActionSequence() {
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
//	return 0; //temporary disable
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <GetActionSequence+0x8c>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d132      	bne.n	8005cfc <GetActionSequence+0x78>

		if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 8005c96:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <GetActionSequence+0x90>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d903      	bls.n	8005ca6 <GetActionSequence+0x22>
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <GetActionSequence+0x90>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e005      	b.n	8005cb2 <GetActionSequence+0x2e>
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <GetActionSequence+0x90>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	3301      	adds	r3, #1
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <GetActionSequence+0x90>)
 8005cb0:	701a      	strb	r2, [r3, #0]

		plan_active = plan_buffer[plan_buffer_i];
 8005cb2:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <GetActionSequence+0x90>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4817      	ldr	r0, [pc, #92]	; (8005d18 <GetActionSequence+0x94>)
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <GetActionSequence+0x98>)
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	440b      	add	r3, r1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if(plan_buffer_i == plan_buffer_f) {
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <GetActionSequence+0x90>)
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <GetActionSequence+0x9c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d106      	bne.n	8005ce8 <GetActionSequence+0x64>
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <GetActionSequence+0x8c>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f043 0302 	orr.w	r3, r3, #2
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <GetActionSequence+0x8c>)
 8005ce6:	701a      	strb	r2, [r3, #0]
		}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <GetActionSequence+0x8c>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <GetActionSequence+0x8c>)
 8005cf4:	701a      	strb	r2, [r3, #0]
		retval = 1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	71fb      	strb	r3, [r7, #7]
 8005cfa:	e001      	b.n	8005d00 <GetActionSequence+0x7c>
	} else {
		retval = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8005d00:	79fb      	ldrb	r3, [r7, #7]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000d5c 	.word	0x20000d5c
 8005d14:	20000d4e 	.word	0x20000d4e
 8005d18:	20000d50 	.word	0x20000d50
 8005d1c:	20000d1c 	.word	0x20000d1c
 8005d20:	20000d4d 	.word	0x20000d4d

08005d24 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <GetActionSequenceRoutine+0xfc>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <GetActionSequenceRoutine+0x1e>
 8005d32:	4b3c      	ldr	r3, [pc, #240]	; (8005e24 <GetActionSequenceRoutine+0x100>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <GetActionSequenceRoutine+0xfc>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d107      	bne.n	8005d52 <GetActionSequenceRoutine+0x2e>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <GetActionSequenceRoutine+0xfc>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d15d      	bne.n	8005e06 <GetActionSequenceRoutine+0xe2>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005d4a:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <GetActionSequenceRoutine+0x100>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d059      	beq.n	8005e06 <GetActionSequenceRoutine+0xe2>
		if(buff_index < plan.num_action-2) {
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <GetActionSequenceRoutine+0x104>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	4b34      	ldr	r3, [pc, #208]	; (8005e2c <GetActionSequenceRoutine+0x108>)
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	3b02      	subs	r3, #2
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	da49      	bge.n	8005df6 <GetActionSequenceRoutine+0xd2>
			buff_index++;
 8005d62:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <GetActionSequenceRoutine+0x104>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <GetActionSequenceRoutine+0x104>)
 8005d6c:	701a      	strb	r2, [r3, #0]
			uint8_t index_f = plan_buffer_f;
 8005d6e:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <GetActionSequenceRoutine+0x100>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	75fb      	strb	r3, [r7, #23]
			if(index_f>=BUFFER_SIZE-1) index_f=0; else index_f++;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d902      	bls.n	8005d80 <GetActionSequenceRoutine+0x5c>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]
 8005d7e:	e002      	b.n	8005d86 <GetActionSequenceRoutine+0x62>
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	3301      	adds	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
			plan_buffer[index_f] = GetActionOther(num_plan, buff_index);
 8005d86:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <GetActionSequenceRoutine+0x10c>)
 8005d88:	7819      	ldrb	r1, [r3, #0]
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <GetActionSequenceRoutine+0x104>)
 8005d8c:	7818      	ldrb	r0, [r3, #0]
 8005d8e:	7dfa      	ldrb	r2, [r7, #23]
 8005d90:	4c28      	ldr	r4, [pc, #160]	; (8005e34 <GetActionSequenceRoutine+0x110>)
 8005d92:	4613      	mov	r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	441c      	add	r4, r3
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff feb7 	bl	8005b14 <GetActionOther>
 8005da6:	4623      	mov	r3, r4
 8005da8:	463a      	mov	r2, r7
 8005daa:	6810      	ldr	r0, [r2, #0]
 8005dac:	6851      	ldr	r1, [r2, #4]
 8005dae:	6892      	ldr	r2, [r2, #8]
 8005db0:	c307      	stmia	r3!, {r0, r1, r2}
			if(plan_buffer[index_f].act == 11) {
 8005db2:	7dfa      	ldrb	r2, [r7, #23]
 8005db4:	491f      	ldr	r1, [pc, #124]	; (8005e34 <GetActionSequenceRoutine+0x110>)
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b0b      	cmp	r3, #11
 8005dc4:	d10c      	bne.n	8005de0 <GetActionSequenceRoutine+0xbc>
				buff_index = plan_buffer[index_f].act_value-1;
 8005dc6:	7dfa      	ldrb	r2, [r7, #23]
 8005dc8:	491a      	ldr	r1, [pc, #104]	; (8005e34 <GetActionSequenceRoutine+0x110>)
 8005dca:	4613      	mov	r3, r2
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3303      	adds	r3, #3
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <GetActionSequenceRoutine+0x104>)
 8005dde:	701a      	strb	r2, [r3, #0]
			}
			plan_buffer_f = index_f;
 8005de0:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <GetActionSequenceRoutine+0x100>)
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	7013      	strb	r3, [r2, #0]
			storage_flag &=~STO_FLAG_BUFF_EMPTY;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <GetActionSequenceRoutine+0x114>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f023 0302 	bic.w	r3, r3, #2
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <GetActionSequenceRoutine+0x114>)
 8005df2:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005df4:	e00f      	b.n	8005e16 <GetActionSequenceRoutine+0xf2>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <GetActionSequenceRoutine+0x114>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f043 0304 	orr.w	r3, r3, #4
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <GetActionSequenceRoutine+0x114>)
 8005e02:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005e04:	e007      	b.n	8005e16 <GetActionSequenceRoutine+0xf2>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <GetActionSequenceRoutine+0x114>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <GetActionSequenceRoutine+0x114>)
 8005e12:	701a      	strb	r2, [r3, #0]
	}
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000d4e 	.word	0x20000d4e
 8005e24:	20000d4d 	.word	0x20000d4d
 8005e28:	20000d4c 	.word	0x20000d4c
 8005e2c:	20000d60 	.word	0x20000d60
 8005e30:	20000cd5 	.word	0x20000cd5
 8005e34:	20000d1c 	.word	0x20000d1c
 8005e38:	20000d5c 	.word	0x20000d5c

08005e3c <GetActionSequenceInit>:

void GetActionSequenceInit(uint8_t num) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 8005e46:	463b      	mov	r3, r7
 8005e48:	7dfa      	ldrb	r2, [r7, #23]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fb73 	bl	8005538 <GetAction>
	buff_index = num;
 8005e52:	4a0e      	ldr	r2, [pc, #56]	; (8005e8c <GetActionSequenceInit+0x50>)
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	7013      	strb	r3, [r2, #0]
	plan_buffer_i = 0;
 8005e58:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <GetActionSequenceInit+0x54>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
	plan_buffer_f = 0;
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <GetActionSequenceInit+0x58>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
	storage_flag = 0;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <GetActionSequenceInit+0x5c>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
	memset((uint8_t*)&plan_buffer, 0, sizeof(Action_typedef)*BUFFER_SIZE);
 8005e6a:	2230      	movs	r2, #48	; 0x30
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	480b      	ldr	r0, [pc, #44]	; (8005e9c <GetActionSequenceInit+0x60>)
 8005e70:	f009 fe4d 	bl	800fb0e <memset>
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <GetActionSequenceInit+0x5c>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f043 0302 	orr.w	r3, r3, #2
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <GetActionSequenceInit+0x5c>)
 8005e80:	701a      	strb	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000d4c 	.word	0x20000d4c
 8005e90:	20000d4e 	.word	0x20000d4e
 8005e94:	20000d4d 	.word	0x20000d4d
 8005e98:	20000d5c 	.word	0x20000d5c
 8005e9c:	20000d1c 	.word	0x20000d1c

08005ea0 <Storage_InsertAction>:

void Storage_InsertAction(uint8_t index) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=plan.num_action-1; i>index; i--) {
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <Storage_InsertAction+0x50>)
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e014      	b.n	8005ede <Storage_InsertAction+0x3e>
		temp = GetActionOther(num_plan, i-1);
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <Storage_InsertAction+0x54>)
 8005eb6:	7819      	ldrb	r1, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff fe25 	bl	8005b14 <GetActionOther>
		SetActionOther(temp, i);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f107 0208 	add.w	r2, r7, #8
 8005ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ed4:	f7ff fe5e 	bl	8005b94 <SetActionOther>
	for(int i=plan.num_action-1; i>index; i--) {
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	dce6      	bgt.n	8005eb4 <Storage_InsertAction+0x14>
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000d60 	.word	0x20000d60
 8005ef4:	20000cd5 	.word	0x20000cd5

08005ef8 <Storage_DeleteAction>:

void Storage_DeleteAction(uint8_t index) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=index; i<plan.num_action-1; i++) {
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e014      	b.n	8005f32 <Storage_DeleteAction+0x3a>
		temp = GetActionOther(num_plan, i+1);
 8005f08:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <Storage_DeleteAction+0x60>)
 8005f0a:	7819      	ldrb	r1, [r3, #0]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	3301      	adds	r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fdfb 	bl	8005b14 <GetActionOther>
		SetActionOther(temp, i);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f107 0208 	add.w	r2, r7, #8
 8005f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f28:	f7ff fe34 	bl	8005b94 <SetActionOther>
	for(int i=index; i<plan.num_action-1; i++) {
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <Storage_DeleteAction+0x64>)
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	dbe4      	blt.n	8005f08 <Storage_DeleteAction+0x10>
	}
	SetActionOther(plan_default, plan.num_action-1);
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <Storage_DeleteAction+0x64>)
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	4a06      	ldr	r2, [pc, #24]	; (8005f60 <Storage_DeleteAction+0x68>)
 8005f48:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f4a:	f7ff fe23 	bl	8005b94 <SetActionOther>
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000cd5 	.word	0x20000cd5
 8005f5c:	20000d60 	.word	0x20000d60
 8005f60:	08012460 	.word	0x08012460

08005f64 <Storage_CopyPlan>:

void Storage_CopyPlan(uint8_t plan_dest) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
	Storage_SetPlanOther(&plan, plan_dest);
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	4619      	mov	r1, r3
 8005f72:	4813      	ldr	r0, [pc, #76]	; (8005fc0 <Storage_CopyPlan+0x5c>)
 8005f74:	f7ff fd2c 	bl	80059d0 <Storage_SetPlanOther>
	Action_typedef temp;
	for(int i=0; i<plan.num_action; i++) {
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e014      	b.n	8005fa8 <Storage_CopyPlan+0x44>
		temp = GetActionOther(num_plan, i);
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <Storage_CopyPlan+0x60>)
 8005f80:	7819      	ldrb	r1, [r3, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	f107 0308 	add.w	r3, r7, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fdc2 	bl	8005b14 <GetActionOther>
		SetActionOther2(plan_dest, temp, i);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	79f8      	ldrb	r0, [r7, #7]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f9e:	f7ff fe2f 	bl	8005c00 <SetActionOther2>
	for(int i=0; i<plan.num_action; i++) {
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <Storage_CopyPlan+0x5c>)
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	461a      	mov	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	dbe4      	blt.n	8005f7e <Storage_CopyPlan+0x1a>
	}
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000d60 	.word	0x20000d60
 8005fc4:	20000cd5 	.word	0x20000cd5

08005fc8 <Storage_CleanInit>:

void Storage_CleanInit() {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b092      	sub	sp, #72	; 0x48
 8005fcc:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 8005fce:	1d3b      	adds	r3, r7, #4
 8005fd0:	2240      	movs	r2, #64	; 0x40
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f009 fd9a 	bl	800fb0e <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 8005fda:	2300      	movs	r3, #0
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	e00f      	b.n	8006000 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8005fe0:	bf00      	nop
 8005fe2:	f7fb feed 	bl	8001dc0 <EEP_ReadyToWrite>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0fa      	beq.n	8005fe2 <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8005fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	1d3a      	adds	r2, r7, #4
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fb fe51 	bl	8001c9c <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8006000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006006:	dbeb      	blt.n	8005fe0 <Storage_CleanInit+0x18>
	}
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	3748      	adds	r7, #72	; 0x48
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0
  return 1;
 8006016:	2301      	movs	r3, #1
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <_kill>:

int _kill(int pid, int sig)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800602c:	f009 fdd2 	bl	800fbd4 <__errno>
 8006030:	4603      	mov	r3, r0
 8006032:	2216      	movs	r2, #22
 8006034:	601a      	str	r2, [r3, #0]
  return -1;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_exit>:

void _exit (int status)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800604a:	f04f 31ff 	mov.w	r1, #4294967295
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ffe7 	bl	8006022 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006054:	e7fe      	b.n	8006054 <_exit+0x12>

08006056 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e00a      	b.n	800607e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006068:	f3af 8000 	nop.w
 800606c:	4601      	mov	r1, r0
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	60ba      	str	r2, [r7, #8]
 8006074:	b2ca      	uxtb	r2, r1
 8006076:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3301      	adds	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	dbf0      	blt.n	8006068 <_read+0x12>
  }

  return len;
 8006086:	687b      	ldr	r3, [r7, #4]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e009      	b.n	80060b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	60ba      	str	r2, [r7, #8]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	3301      	adds	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	dbf1      	blt.n	80060a2 <_write+0x12>
  }
  return len;
 80060be:	687b      	ldr	r3, [r7, #4]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <_close>:

int _close(int file)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060f0:	605a      	str	r2, [r3, #4]
  return 0;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_isatty>:

int _isatty(int file)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006108:	2301      	movs	r3, #1
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <_sbrk+0x5c>)
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <_sbrk+0x60>)
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <_sbrk+0x64>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <_sbrk+0x64>)
 800614e:	4a12      	ldr	r2, [pc, #72]	; (8006198 <_sbrk+0x68>)
 8006150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <_sbrk+0x64>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d207      	bcs.n	8006170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006160:	f009 fd38 	bl	800fbd4 <__errno>
 8006164:	4603      	mov	r3, r0
 8006166:	220c      	movs	r2, #12
 8006168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
 800616e:	e009      	b.n	8006184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <_sbrk+0x64>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <_sbrk+0x64>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <_sbrk+0x64>)
 8006180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20020000 	.word	0x20020000
 8006190:	00000400 	.word	0x00000400
 8006194:	20000d90 	.word	0x20000d90
 8006198:	20001690 	.word	0x20001690

0800619c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <SystemInit+0x20>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	4a05      	ldr	r2, [pc, #20]	; (80061bc <SystemInit+0x20>)
 80061a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061b0:	bf00      	nop
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b096      	sub	sp, #88	; 0x58
 80061c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80061c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	609a      	str	r2, [r3, #8]
 80061d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80061de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	609a      	str	r2, [r3, #8]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	611a      	str	r2, [r3, #16]
 80061ee:	615a      	str	r2, [r3, #20]
 80061f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	2220      	movs	r2, #32
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f009 fc88 	bl	800fb0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80061fe:	4b4a      	ldr	r3, [pc, #296]	; (8006328 <MX_TIM1_Init+0x168>)
 8006200:	4a4a      	ldr	r2, [pc, #296]	; (800632c <MX_TIM1_Init+0x16c>)
 8006202:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8006204:	4b48      	ldr	r3, [pc, #288]	; (8006328 <MX_TIM1_Init+0x168>)
 8006206:	2253      	movs	r2, #83	; 0x53
 8006208:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <MX_TIM1_Init+0x168>)
 800620c:	2200      	movs	r2, #0
 800620e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8006210:	4b45      	ldr	r3, [pc, #276]	; (8006328 <MX_TIM1_Init+0x168>)
 8006212:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006216:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006218:	4b43      	ldr	r3, [pc, #268]	; (8006328 <MX_TIM1_Init+0x168>)
 800621a:	2200      	movs	r2, #0
 800621c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800621e:	4b42      	ldr	r3, [pc, #264]	; (8006328 <MX_TIM1_Init+0x168>)
 8006220:	2200      	movs	r2, #0
 8006222:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006224:	4b40      	ldr	r3, [pc, #256]	; (8006328 <MX_TIM1_Init+0x168>)
 8006226:	2200      	movs	r2, #0
 8006228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800622a:	483f      	ldr	r0, [pc, #252]	; (8006328 <MX_TIM1_Init+0x168>)
 800622c:	f006 febe 	bl	800cfac <HAL_TIM_Base_Init>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006236:	f7fc f87c 	bl	8002332 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800623a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800623e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006240:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006244:	4619      	mov	r1, r3
 8006246:	4838      	ldr	r0, [pc, #224]	; (8006328 <MX_TIM1_Init+0x168>)
 8006248:	f007 fb86 	bl	800d958 <HAL_TIM_ConfigClockSource>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006252:	f7fc f86e 	bl	8002332 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006256:	4834      	ldr	r0, [pc, #208]	; (8006328 <MX_TIM1_Init+0x168>)
 8006258:	f006 ff68 	bl	800d12c <HAL_TIM_PWM_Init>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006262:	f7fc f866 	bl	8002332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006266:	2300      	movs	r3, #0
 8006268:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800626a:	2300      	movs	r3, #0
 800626c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800626e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006272:	4619      	mov	r1, r3
 8006274:	482c      	ldr	r0, [pc, #176]	; (8006328 <MX_TIM1_Init+0x168>)
 8006276:	f007 ff6f 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006280:	f7fc f857 	bl	8002332 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006284:	2360      	movs	r3, #96	; 0x60
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006290:	2300      	movs	r3, #0
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006294:	2300      	movs	r3, #0
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006298:	2300      	movs	r3, #0
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800629c:	2300      	movs	r3, #0
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062a4:	2200      	movs	r2, #0
 80062a6:	4619      	mov	r1, r3
 80062a8:	481f      	ldr	r0, [pc, #124]	; (8006328 <MX_TIM1_Init+0x168>)
 80062aa:	f007 fa93 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80062b4:	f7fc f83d 	bl	8002332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80062b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062bc:	2204      	movs	r2, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4819      	ldr	r0, [pc, #100]	; (8006328 <MX_TIM1_Init+0x168>)
 80062c2:	f007 fa87 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80062cc:	f7fc f831 	bl	8002332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80062d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062d4:	2208      	movs	r2, #8
 80062d6:	4619      	mov	r1, r3
 80062d8:	4813      	ldr	r0, [pc, #76]	; (8006328 <MX_TIM1_Init+0x168>)
 80062da:	f007 fa7b 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80062e4:	f7fc f825 	bl	8002332 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80062fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006300:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006302:	2300      	movs	r3, #0
 8006304:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4807      	ldr	r0, [pc, #28]	; (8006328 <MX_TIM1_Init+0x168>)
 800630c:	f007 ffa0 	bl	800e250 <HAL_TIMEx_ConfigBreakDeadTime>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006316:	f7fc f80c 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800631a:	4803      	ldr	r0, [pc, #12]	; (8006328 <MX_TIM1_Init+0x168>)
 800631c:	f000 fa5a 	bl	80067d4 <HAL_TIM_MspPostInit>

}
 8006320:	bf00      	nop
 8006322:	3758      	adds	r7, #88	; 0x58
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000d94 	.word	0x20000d94
 800632c:	40010000 	.word	0x40010000

08006330 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	; 0x30
 8006334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006336:	f107 030c 	add.w	r3, r7, #12
 800633a:	2224      	movs	r2, #36	; 0x24
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f009 fbe5 	bl	800fb0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800634c:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <MX_TIM2_Init+0xa4>)
 800634e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006354:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <MX_TIM2_Init+0xa4>)
 8006356:	2200      	movs	r2, #0
 8006358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800635a:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <MX_TIM2_Init+0xa4>)
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <MX_TIM2_Init+0xa4>)
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006368:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <MX_TIM2_Init+0xa4>)
 800636a:	2200      	movs	r2, #0
 800636c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800636e:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <MX_TIM2_Init+0xa4>)
 8006370:	2200      	movs	r2, #0
 8006372:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006374:	2303      	movs	r3, #3
 8006376:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006380:	2300      	movs	r3, #0
 8006382:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006388:	2300      	movs	r3, #0
 800638a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800638c:	2301      	movs	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006390:	2300      	movs	r3, #0
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006398:	f107 030c 	add.w	r3, r7, #12
 800639c:	4619      	mov	r1, r3
 800639e:	480d      	ldr	r0, [pc, #52]	; (80063d4 <MX_TIM2_Init+0xa4>)
 80063a0:	f006 ffdc 	bl	800d35c <HAL_TIM_Encoder_Init>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80063aa:	f7fb ffc2 	bl	8002332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063ae:	2300      	movs	r3, #0
 80063b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4806      	ldr	r0, [pc, #24]	; (80063d4 <MX_TIM2_Init+0xa4>)
 80063bc:	f007 fecc 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80063c6:	f7fb ffb4 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80063ca:	bf00      	nop
 80063cc:	3730      	adds	r7, #48	; 0x30
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000ddc 	.word	0x20000ddc

080063d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063de:	f107 0320 	add.w	r3, r7, #32
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	60da      	str	r2, [r3, #12]
 80063f4:	611a      	str	r2, [r3, #16]
 80063f6:	615a      	str	r2, [r3, #20]
 80063f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80063fa:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <MX_TIM3_Init+0xec>)
 80063fc:	4a32      	ldr	r2, [pc, #200]	; (80064c8 <MX_TIM3_Init+0xf0>)
 80063fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8006400:	4b30      	ldr	r3, [pc, #192]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006402:	2207      	movs	r2, #7
 8006404:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006406:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800640c:	4b2d      	ldr	r3, [pc, #180]	; (80064c4 <MX_TIM3_Init+0xec>)
 800640e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006412:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006414:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006416:	2200      	movs	r2, #0
 8006418:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800641a:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <MX_TIM3_Init+0xec>)
 800641c:	2200      	movs	r2, #0
 800641e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006420:	4828      	ldr	r0, [pc, #160]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006422:	f006 fe83 	bl	800d12c <HAL_TIM_PWM_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800642c:	f7fb ff81 	bl	8002332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006430:	2300      	movs	r3, #0
 8006432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006434:	2300      	movs	r3, #0
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006438:	f107 0320 	add.w	r3, r7, #32
 800643c:	4619      	mov	r1, r3
 800643e:	4821      	ldr	r0, [pc, #132]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006440:	f007 fe8a 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800644a:	f7fb ff72 	bl	8002332 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800644e:	2360      	movs	r3, #96	; 0x60
 8006450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	2200      	movs	r2, #0
 8006462:	4619      	mov	r1, r3
 8006464:	4817      	ldr	r0, [pc, #92]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006466:	f007 f9b5 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006470:	f7fb ff5f 	bl	8002332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	2204      	movs	r2, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4812      	ldr	r0, [pc, #72]	; (80064c4 <MX_TIM3_Init+0xec>)
 800647c:	f007 f9aa 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006486:	f7fb ff54 	bl	8002332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	2208      	movs	r2, #8
 800648e:	4619      	mov	r1, r3
 8006490:	480c      	ldr	r0, [pc, #48]	; (80064c4 <MX_TIM3_Init+0xec>)
 8006492:	f007 f99f 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800649c:	f7fb ff49 	bl	8002332 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80064a0:	1d3b      	adds	r3, r7, #4
 80064a2:	220c      	movs	r2, #12
 80064a4:	4619      	mov	r1, r3
 80064a6:	4807      	ldr	r0, [pc, #28]	; (80064c4 <MX_TIM3_Init+0xec>)
 80064a8:	f007 f994 	bl	800d7d4 <HAL_TIM_PWM_ConfigChannel>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80064b2:	f7fb ff3e 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80064b6:	4803      	ldr	r0, [pc, #12]	; (80064c4 <MX_TIM3_Init+0xec>)
 80064b8:	f000 f98c 	bl	80067d4 <HAL_TIM_MspPostInit>

}
 80064bc:	bf00      	nop
 80064be:	3728      	adds	r7, #40	; 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000e24 	.word	0x20000e24
 80064c8:	40000400 	.word	0x40000400

080064cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064d2:	f107 030c 	add.w	r3, r7, #12
 80064d6:	2224      	movs	r2, #36	; 0x24
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f009 fb17 	bl	800fb0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80064e8:	4b20      	ldr	r3, [pc, #128]	; (800656c <MX_TIM4_Init+0xa0>)
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <MX_TIM4_Init+0xa4>)
 80064ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <MX_TIM4_Init+0xa0>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064f4:	4b1d      	ldr	r3, [pc, #116]	; (800656c <MX_TIM4_Init+0xa0>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <MX_TIM4_Init+0xa0>)
 80064fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006500:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006502:	4b1a      	ldr	r3, [pc, #104]	; (800656c <MX_TIM4_Init+0xa0>)
 8006504:	2200      	movs	r2, #0
 8006506:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006508:	4b18      	ldr	r3, [pc, #96]	; (800656c <MX_TIM4_Init+0xa0>)
 800650a:	2200      	movs	r2, #0
 800650c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800650e:	2303      	movs	r3, #3
 8006510:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006516:	2301      	movs	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006526:	2301      	movs	r3, #1
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800652a:	2300      	movs	r3, #0
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006532:	f107 030c 	add.w	r3, r7, #12
 8006536:	4619      	mov	r1, r3
 8006538:	480c      	ldr	r0, [pc, #48]	; (800656c <MX_TIM4_Init+0xa0>)
 800653a:	f006 ff0f 	bl	800d35c <HAL_TIM_Encoder_Init>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006544:	f7fb fef5 	bl	8002332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006548:	2300      	movs	r3, #0
 800654a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800654c:	2300      	movs	r3, #0
 800654e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4805      	ldr	r0, [pc, #20]	; (800656c <MX_TIM4_Init+0xa0>)
 8006556:	f007 fdff 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006560:	f7fb fee7 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006564:	bf00      	nop
 8006566:	3730      	adds	r7, #48	; 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000e6c 	.word	0x20000e6c
 8006570:	40000800 	.word	0x40000800

08006574 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800657a:	463b      	mov	r3, r7
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <MX_TIM6_Init+0x64>)
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <MX_TIM6_Init+0x68>)
 8006586:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <MX_TIM6_Init+0x64>)
 800658a:	2253      	movs	r2, #83	; 0x53
 800658c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <MX_TIM6_Init+0x64>)
 8006590:	2200      	movs	r2, #0
 8006592:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006594:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <MX_TIM6_Init+0x64>)
 8006596:	f240 32e7 	movw	r2, #999	; 0x3e7
 800659a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <MX_TIM6_Init+0x64>)
 800659e:	2200      	movs	r2, #0
 80065a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80065a2:	480d      	ldr	r0, [pc, #52]	; (80065d8 <MX_TIM6_Init+0x64>)
 80065a4:	f006 fd02 	bl	800cfac <HAL_TIM_Base_Init>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80065ae:	f7fb fec0 	bl	8002332 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80065ba:	463b      	mov	r3, r7
 80065bc:	4619      	mov	r1, r3
 80065be:	4806      	ldr	r0, [pc, #24]	; (80065d8 <MX_TIM6_Init+0x64>)
 80065c0:	f007 fdca 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80065ca:	f7fb feb2 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000eb4 	.word	0x20000eb4
 80065dc:	40001000 	.word	0x40001000

080065e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a18      	ldr	r2, [pc, #96]	; (8006650 <HAL_TIM_Base_MspInit+0x70>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10e      	bne.n	8006610 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	4b17      	ldr	r3, [pc, #92]	; (8006654 <HAL_TIM_Base_MspInit+0x74>)
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_TIM_Base_MspInit+0x74>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	6453      	str	r3, [r2, #68]	; 0x44
 8006602:	4b14      	ldr	r3, [pc, #80]	; (8006654 <HAL_TIM_Base_MspInit+0x74>)
 8006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800660e:	e01a      	b.n	8006646 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a10      	ldr	r2, [pc, #64]	; (8006658 <HAL_TIM_Base_MspInit+0x78>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d115      	bne.n	8006646 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <HAL_TIM_Base_MspInit+0x74>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	4a0c      	ldr	r2, [pc, #48]	; (8006654 <HAL_TIM_Base_MspInit+0x74>)
 8006624:	f043 0310 	orr.w	r3, r3, #16
 8006628:	6413      	str	r3, [r2, #64]	; 0x40
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_TIM_Base_MspInit+0x74>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006636:	2200      	movs	r2, #0
 8006638:	2100      	movs	r1, #0
 800663a:	2036      	movs	r0, #54	; 0x36
 800663c:	f004 f9cb 	bl	800a9d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006640:	2036      	movs	r0, #54	; 0x36
 8006642:	f004 f9e4 	bl	800aa0e <HAL_NVIC_EnableIRQ>
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40010000 	.word	0x40010000
 8006654:	40023800 	.word	0x40023800
 8006658:	40001000 	.word	0x40001000

0800665c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006664:	f107 031c 	add.w	r3, r7, #28
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	605a      	str	r2, [r3, #4]
 800666e:	609a      	str	r2, [r3, #8]
 8006670:	60da      	str	r2, [r3, #12]
 8006672:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667c:	d14b      	bne.n	8006716 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800667e:	2300      	movs	r3, #0
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	4b3f      	ldr	r3, [pc, #252]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	4a3e      	ldr	r2, [pc, #248]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	6413      	str	r3, [r2, #64]	; 0x40
 800668e:	4b3c      	ldr	r3, [pc, #240]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	4b38      	ldr	r3, [pc, #224]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	4a37      	ldr	r2, [pc, #220]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	6313      	str	r3, [r2, #48]	; 0x30
 80066aa:	4b35      	ldr	r3, [pc, #212]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	4a30      	ldr	r2, [pc, #192]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 80066c0:	f043 0302 	orr.w	r3, r3, #2
 80066c4:	6313      	str	r3, [r2, #48]	; 0x30
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80066d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d8:	2302      	movs	r3, #2
 80066da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80066e4:	2301      	movs	r3, #1
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e8:	f107 031c 	add.w	r3, r7, #28
 80066ec:	4619      	mov	r1, r3
 80066ee:	4825      	ldr	r0, [pc, #148]	; (8006784 <HAL_TIM_Encoder_MspInit+0x128>)
 80066f0:	f004 fd1c 	bl	800b12c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80066f4:	2308      	movs	r3, #8
 80066f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f8:	2302      	movs	r3, #2
 80066fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006700:	2300      	movs	r3, #0
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006704:	2301      	movs	r3, #1
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006708:	f107 031c 	add.w	r3, r7, #28
 800670c:	4619      	mov	r1, r3
 800670e:	481e      	ldr	r0, [pc, #120]	; (8006788 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006710:	f004 fd0c 	bl	800b12c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006714:	e030      	b.n	8006778 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1c      	ldr	r2, [pc, #112]	; (800678c <HAL_TIM_Encoder_MspInit+0x130>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d12b      	bne.n	8006778 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 800672a:	f043 0304 	orr.w	r3, r3, #4
 800672e:	6413      	str	r3, [r2, #64]	; 0x40
 8006730:	4b13      	ldr	r3, [pc, #76]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800673c:	2300      	movs	r3, #0
 800673e:	60bb      	str	r3, [r7, #8]
 8006740:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	4a0e      	ldr	r2, [pc, #56]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 8006746:	f043 0302 	orr.w	r3, r3, #2
 800674a:	6313      	str	r3, [r2, #48]	; 0x30
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <HAL_TIM_Encoder_MspInit+0x124>)
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006758:	23c0      	movs	r3, #192	; 0xc0
 800675a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675c:	2302      	movs	r3, #2
 800675e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006764:	2300      	movs	r3, #0
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006768:	2302      	movs	r3, #2
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800676c:	f107 031c 	add.w	r3, r7, #28
 8006770:	4619      	mov	r1, r3
 8006772:	4805      	ldr	r0, [pc, #20]	; (8006788 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006774:	f004 fcda 	bl	800b12c <HAL_GPIO_Init>
}
 8006778:	bf00      	nop
 800677a:	3730      	adds	r7, #48	; 0x30
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40023800 	.word	0x40023800
 8006784:	40020000 	.word	0x40020000
 8006788:	40020400 	.word	0x40020400
 800678c:	40000800 	.word	0x40000800

08006790 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a0b      	ldr	r2, [pc, #44]	; (80067cc <HAL_TIM_PWM_MspInit+0x3c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10d      	bne.n	80067be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_TIM_PWM_MspInit+0x40>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <HAL_TIM_PWM_MspInit+0x40>)
 80067ac:	f043 0302 	orr.w	r3, r3, #2
 80067b0:	6413      	str	r3, [r2, #64]	; 0x40
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <HAL_TIM_PWM_MspInit+0x40>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40023800 	.word	0x40023800

080067d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	605a      	str	r2, [r3, #4]
 80067e6:	609a      	str	r2, [r3, #8]
 80067e8:	60da      	str	r2, [r3, #12]
 80067ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a25      	ldr	r2, [pc, #148]	; (8006888 <HAL_TIM_MspPostInit+0xb4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d11f      	bne.n	8006836 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	4b24      	ldr	r3, [pc, #144]	; (800688c <HAL_TIM_MspPostInit+0xb8>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	4a23      	ldr	r2, [pc, #140]	; (800688c <HAL_TIM_MspPostInit+0xb8>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6313      	str	r3, [r2, #48]	; 0x30
 8006806:	4b21      	ldr	r3, [pc, #132]	; (800688c <HAL_TIM_MspPostInit+0xb8>)
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006812:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006818:	2302      	movs	r3, #2
 800681a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681c:	2300      	movs	r3, #0
 800681e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006820:	2300      	movs	r3, #0
 8006822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006824:	2301      	movs	r3, #1
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	4619      	mov	r1, r3
 800682e:	4818      	ldr	r0, [pc, #96]	; (8006890 <HAL_TIM_MspPostInit+0xbc>)
 8006830:	f004 fc7c 	bl	800b12c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006834:	e023      	b.n	800687e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a16      	ldr	r2, [pc, #88]	; (8006894 <HAL_TIM_MspPostInit+0xc0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d11e      	bne.n	800687e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <HAL_TIM_MspPostInit+0xb8>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	4a10      	ldr	r2, [pc, #64]	; (800688c <HAL_TIM_MspPostInit+0xb8>)
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	6313      	str	r3, [r2, #48]	; 0x30
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <HAL_TIM_MspPostInit+0xb8>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800685c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006862:	2302      	movs	r3, #2
 8006864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800686e:	2302      	movs	r3, #2
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006872:	f107 0314 	add.w	r3, r7, #20
 8006876:	4619      	mov	r1, r3
 8006878:	4807      	ldr	r0, [pc, #28]	; (8006898 <HAL_TIM_MspPostInit+0xc4>)
 800687a:	f004 fc57 	bl	800b12c <HAL_GPIO_Init>
}
 800687e:	bf00      	nop
 8006880:	3728      	adds	r7, #40	; 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000
 800688c:	40023800 	.word	0x40023800
 8006890:	40020000 	.word	0x40020000
 8006894:	40000400 	.word	0x40000400
 8006898:	40020800 	.word	0x40020800

0800689c <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 800689c:	b590      	push	{r4, r7, lr}
 800689e:	b089      	sub	sp, #36	; 0x24
 80068a0:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <UI_ShowSensor+0xec>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <UI_ShowSensor+0x16>
 80068ae:	2300      	movs	r3, #0
 80068b0:	e065      	b.n	800697e <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 80068b2:	4b36      	ldr	r3, [pc, #216]	; (800698c <UI_ShowSensor+0xf0>)
 80068b4:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 80068b6:	4b36      	ldr	r3, [pc, #216]	; (8006990 <UI_ShowSensor+0xf4>)
 80068b8:	7818      	ldrb	r0, [r3, #0]
 80068ba:	4b35      	ldr	r3, [pc, #212]	; (8006990 <UI_ShowSensor+0xf4>)
 80068bc:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 80068be:	4b34      	ldr	r3, [pc, #208]	; (8006990 <UI_ShowSensor+0xf4>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 80068c2:	3362      	adds	r3, #98	; 0x62
 80068c4:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 80068c6:	4b32      	ldr	r3, [pc, #200]	; (8006990 <UI_ShowSensor+0xf4>)
 80068c8:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 80068ca:	330f      	adds	r3, #15
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2401      	movs	r4, #1
 80068d0:	9400      	str	r4, [sp, #0]
 80068d2:	f7fa ff23 	bl	800171c <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 80068d6:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <UI_ShowSensor+0xf8>)
 80068d8:	1d3b      	adds	r3, r7, #4
 80068da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068de:	6018      	str	r0, [r3, #0]
 80068e0:	3304      	adds	r3, #4
 80068e2:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e03e      	b.n	8006968 <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f1c3 030d 	rsb	r3, r3, #13
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	2b0e      	cmp	r3, #14
 80068fc:	d902      	bls.n	8006904 <UI_ShowSensor+0x68>
 80068fe:	230e      	movs	r3, #14
 8006900:	74fb      	strb	r3, [r7, #19]
 8006902:	e007      	b.n	8006914 <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8006904:	7cfb      	ldrb	r3, [r7, #19]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d002      	beq.n	8006910 <UI_ShowSensor+0x74>
 800690a:	7cfb      	ldrb	r3, [r7, #19]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d101      	bne.n	8006914 <UI_ShowSensor+0x78>
 8006910:	2303      	movs	r3, #3
 8006912:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8006914:	7cfb      	ldrb	r3, [r7, #19]
 8006916:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	00d2      	lsls	r2, r2, #3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	b2da      	uxtb	r2, r3
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <UI_ShowSensor+0xf4>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	4413      	add	r3, r2
 800692a:	b2db      	uxtb	r3, r3
 800692c:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 800692e:	4b18      	ldr	r3, [pc, #96]	; (8006990 <UI_ShowSensor+0xf4>)
 8006930:	785a      	ldrb	r2, [r3, #1]
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	b2db      	uxtb	r3, r3
 8006938:	330f      	adds	r3, #15
 800693a:	b2db      	uxtb	r3, r3
 800693c:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fb f8bd 	bl	8001ac4 <DISP_FillRect2>
		DISP_OLEDUpdate(
 800694a:	7938      	ldrb	r0, [r7, #4]
 800694c:	4b10      	ldr	r3, [pc, #64]	; (8006990 <UI_ShowSensor+0xf4>)
 800694e:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8006950:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8006952:	3306      	adds	r3, #6
 8006954:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <UI_ShowSensor+0xf4>)
 8006958:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 800695a:	330f      	adds	r3, #15
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f7fb f869 	bl	8001a34 <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b0d      	cmp	r3, #13
 800696c:	ddbd      	ble.n	80068ea <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <UI_ShowSensor+0xec>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	4b03      	ldr	r3, [pc, #12]	; (8006988 <UI_ShowSensor+0xec>)
 800697a:	701a      	strb	r2, [r3, #0]
	return 1;
 800697c:	2301      	movs	r3, #1
}
 800697e:	4618      	mov	r0, r3
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd90      	pop	{r4, r7, pc}
 8006986:	bf00      	nop
 8006988:	20000cc9 	.word	0x20000cc9
 800698c:	20000b9c 	.word	0x20000b9c
 8006990:	20000290 	.word	0x20000290
 8006994:	08011ff8 	.word	0x08011ff8

08006998 <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 80069a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069a6:	483c      	ldr	r0, [pc, #240]	; (8006a98 <UI_ReadButton+0x100>)
 80069a8:	f004 fd5c 	bl	800b464 <HAL_GPIO_ReadPin>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	b25a      	sxtb	r2, r3
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	4313      	orrs	r3, r2
 80069c0:	b25b      	sxtb	r3, r3
 80069c2:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 80069c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069c8:	4833      	ldr	r0, [pc, #204]	; (8006a98 <UI_ReadButton+0x100>)
 80069ca:	f004 fd4b 	bl	800b464 <HAL_GPIO_ReadPin>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <UI_ReadButton+0x40>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e000      	b.n	80069da <UI_ReadButton+0x42>
 80069d8:	2300      	movs	r3, #0
 80069da:	b25a      	sxtb	r2, r3
 80069dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 80069e6:	2110      	movs	r1, #16
 80069e8:	482c      	ldr	r0, [pc, #176]	; (8006a9c <UI_ReadButton+0x104>)
 80069ea:	f004 fd3b 	bl	800b464 <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <UI_ReadButton+0x60>
 80069f4:	2304      	movs	r3, #4
 80069f6:	e000      	b.n	80069fa <UI_ReadButton+0x62>
 80069f8:	2300      	movs	r3, #0
 80069fa:	b25a      	sxtb	r2, r3
 80069fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 8006a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a0a:	4824      	ldr	r0, [pc, #144]	; (8006a9c <UI_ReadButton+0x104>)
 8006a0c:	f004 fd2a 	bl	800b464 <HAL_GPIO_ReadPin>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <UI_ReadButton+0x82>
 8006a16:	2308      	movs	r3, #8
 8006a18:	e000      	b.n	8006a1c <UI_ReadButton+0x84>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	b25a      	sxtb	r2, r3
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 8006a28:	2120      	movs	r1, #32
 8006a2a:	481c      	ldr	r0, [pc, #112]	; (8006a9c <UI_ReadButton+0x104>)
 8006a2c:	f004 fd1a 	bl	800b464 <HAL_GPIO_ReadPin>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <UI_ReadButton+0xa2>
 8006a36:	2310      	movs	r3, #16
 8006a38:	e000      	b.n	8006a3c <UI_ReadButton+0xa4>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	b25a      	sxtb	r2, r3
 8006a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 8006a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a4c:	4813      	ldr	r0, [pc, #76]	; (8006a9c <UI_ReadButton+0x104>)
 8006a4e:	f004 fd09 	bl	800b464 <HAL_GPIO_ReadPin>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <UI_ReadButton+0xc4>
 8006a58:	2320      	movs	r3, #32
 8006a5a:	e000      	b.n	8006a5e <UI_ReadButton+0xc6>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	b25a      	sxtb	r2, r3
 8006a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	b25b      	sxtb	r3, r3
 8006a68:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 8006a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a6e:	480b      	ldr	r0, [pc, #44]	; (8006a9c <UI_ReadButton+0x104>)
 8006a70:	f004 fcf8 	bl	800b464 <HAL_GPIO_ReadPin>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <UI_ReadButton+0xe6>
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	e000      	b.n	8006a80 <UI_ReadButton+0xe8>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	b25a      	sxtb	r2, r3
 8006a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	71fb      	strb	r3, [r7, #7]
	return temp;
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40020800 	.word	0x40020800
 8006a9c:	40020400 	.word	0x40020400

08006aa0 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 8006aa4:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006aac:	221b      	movs	r2, #27
 8006aae:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 8006ab0:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 8006ab6:	4b37      	ldr	r3, [pc, #220]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006ab8:	227f      	movs	r2, #127	; 0x7f
 8006aba:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 8006abc:	4b35      	ldr	r3, [pc, #212]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006abe:	220a      	movs	r2, #10
 8006ac0:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 8006ac2:	4b34      	ldr	r3, [pc, #208]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 8006ac8:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006aca:	2202      	movs	r2, #2
 8006acc:	719a      	strb	r2, [r3, #6]

	short_message_white = short_message;
 8006ace:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <UI_HomeScreenInit+0xf8>)
 8006ad0:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <UI_HomeScreenInit+0xf4>)
 8006ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ad6:	6018      	str	r0, [r3, #0]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	8019      	strh	r1, [r3, #0]
 8006adc:	3302      	adds	r3, #2
 8006ade:	0c0a      	lsrs	r2, r1, #16
 8006ae0:	701a      	strb	r2, [r3, #0]
	short_message_white.color = DISP_COLOR_WHITE;
 8006ae2:	4b2d      	ldr	r3, [pc, #180]	; (8006b98 <UI_HomeScreenInit+0xf8>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	709a      	strb	r2, [r3, #2]

	home_menu[0].origin_x = 14;
 8006ae8:	4b2c      	ldr	r3, [pc, #176]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006aea:	220e      	movs	r2, #14
 8006aec:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8006aee:	4b2b      	ldr	r3, [pc, #172]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006af0:	2226      	movs	r2, #38	; 0x26
 8006af2:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8006af4:	4b29      	ldr	r3, [pc, #164]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 8006afa:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006afc:	2228      	movs	r2, #40	; 0x28
 8006afe:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8006b00:	4b26      	ldr	r3, [pc, #152]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b02:	2202      	movs	r2, #2
 8006b04:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8006b06:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b08:	220e      	movs	r2, #14
 8006b0a:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b0e:	2233      	movs	r2, #51	; 0x33
 8006b10:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8006b12:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8006b18:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b1a:	2228      	movs	r2, #40	; 0x28
 8006b1c:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b20:	2202      	movs	r2, #2
 8006b22:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8006b24:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b26:	2249      	movs	r2, #73	; 0x49
 8006b28:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8006b2a:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b2c:	2226      	movs	r2, #38	; 0x26
 8006b2e:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8006b36:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b38:	2228      	movs	r2, #40	; 0x28
 8006b3a:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8006b3c:	4b17      	ldr	r3, [pc, #92]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b3e:	2202      	movs	r2, #2
 8006b40:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8006b42:	4b16      	ldr	r3, [pc, #88]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b44:	2249      	movs	r2, #73	; 0x49
 8006b46:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8006b48:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b4a:	2233      	movs	r2, #51	; 0x33
 8006b4c:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b56:	2228      	movs	r2, #40	; 0x28
 8006b58:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8006b5a:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <UI_HomeScreenInit+0xfc>)
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8006b66:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b6e:	227f      	movs	r2, #127	; 0x7f
 8006b70:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b74:	220a      	movs	r2, #10
 8006b76:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b80:	2202      	movs	r2, #2
 8006b82:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <UI_HomeScreenInit+0x100>)
 8006b86:	2202      	movs	r2, #2
 8006b88:	719a      	strb	r2, [r3, #6]
}
 8006b8a:	bf00      	nop
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000efc 	.word	0x20000efc
 8006b98:	20000f04 	.word	0x20000f04
 8006b9c:	20000f0c 	.word	0x20000f0c
 8006ba0:	20000f28 	.word	0x20000f28

08006ba4 <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08c      	sub	sp, #48	; 0x30
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	4603      	mov	r3, r0
 8006bac:	460a      	mov	r2, r1
 8006bae:	71fb      	strb	r3, [r7, #7]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 8006bb4:	79bb      	ldrb	r3, [r7, #6]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <UI_HomeScreenDisplay+0xa0>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	789b      	ldrb	r3, [r3, #2]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	79bb      	ldrb	r3, [r7, #6]
 8006bc0:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <UI_HomeScreenDisplay+0xa4>)
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	f107 000c 	add.w	r0, r7, #12
 8006bc8:	9200      	str	r2, [sp, #0]
 8006bca:	460a      	mov	r2, r1
 8006bcc:	491f      	ldr	r1, [pc, #124]	; (8006c4c <UI_HomeScreenDisplay+0xa8>)
 8006bce:	f008 ff3b 	bl	800fa48 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8006bd2:	f107 030c 	add.w	r3, r7, #12
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	481d      	ldr	r0, [pc, #116]	; (8006c50 <UI_HomeScreenDisplay+0xac>)
 8006bda:	f7fa fe59 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
 8006be2:	e027      	b.n	8006c34 <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d109      	bne.n	8006c00 <UI_HomeScreenDisplay+0x5c>
 8006bec:	4919      	ldr	r1, [pc, #100]	; (8006c54 <UI_HomeScreenDisplay+0xb0>)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e008      	b.n	8006c12 <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 8006c00:	4914      	ldr	r1, [pc, #80]	; (8006c54 <UI_HomeScreenDisplay+0xb0>)
 8006c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c04:	4613      	mov	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8006c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c14:	4613      	mov	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	4a0e      	ldr	r2, [pc, #56]	; (8006c54 <UI_HomeScreenDisplay+0xb0>)
 8006c1c:	441a      	add	r2, r3
 8006c1e:	490e      	ldr	r1, [pc, #56]	; (8006c58 <UI_HomeScreenDisplay+0xb4>)
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7fa fe31 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	3301      	adds	r3, #1
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	ddd4      	ble.n	8006be4 <UI_HomeScreenDisplay+0x40>
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	3728      	adds	r7, #40	; 0x28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000d60 	.word	0x20000d60
 8006c48:	20000cd5 	.word	0x20000cd5
 8006c4c:	08012018 	.word	0x08012018
 8006c50:	20000f28 	.word	0x20000f28
 8006c54:	20000f0c 	.word	0x20000f0c
 8006c58:	20000294 	.word	0x20000294

08006c5c <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8006c62:	4b60      	ldr	r3, [pc, #384]	; (8006de4 <UI_HomeScreen+0x188>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8006c68:	4b5f      	ldr	r3, [pc, #380]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	79fa      	ldrb	r2, [r7, #7]
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff ff97 	bl	8006ba4 <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8006c76:	f003 f861 	bl	8009d3c <HAL_GetTick>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4a5b      	ldr	r2, [pc, #364]	; (8006dec <UI_HomeScreen+0x190>)
 8006c7e:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 8006c80:	f7ff fe0c 	bl	800689c <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006c84:	f003 f85a 	bl	8009d3c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b58      	ldr	r3, [pc, #352]	; (8006dec <UI_HomeScreen+0x190>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b45      	cmp	r3, #69	; 0x45
 8006c92:	f240 8097 	bls.w	8006dc4 <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 8006c96:	f7ff fe7f 	bl	8006998 <UI_ReadButton>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <UI_HomeScreen+0x194>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	f000 8090 	beq.w	8006dc8 <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 8006ca8:	f7ff fe76 	bl	8006998 <UI_ReadButton>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b4f      	ldr	r3, [pc, #316]	; (8006df0 <UI_HomeScreen+0x194>)
 8006cb2:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 8006cb4:	4b4e      	ldr	r3, [pc, #312]	; (8006df0 <UI_HomeScreen+0x194>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 8006cc0:	4b49      	ldr	r3, [pc, #292]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0cf      	beq.n	8006c68 <UI_HomeScreen+0xc>
 8006cc8:	4b47      	ldr	r3, [pc, #284]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	4b45      	ldr	r3, [pc, #276]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006cd2:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006cd4:	e7c8      	b.n	8006c68 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 8006cd6:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <UI_HomeScreen+0x194>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00c      	beq.n	8006cfc <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006ce2:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d806      	bhi.n	8006cf8 <UI_HomeScreen+0x9c>
 8006cea:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	4b3d      	ldr	r3, [pc, #244]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006cf4:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006cf6:	e7b7      	b.n	8006c68 <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e06f      	b.n	8006ddc <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8006cfc:	4b3c      	ldr	r3, [pc, #240]	; (8006df0 <UI_HomeScreen+0x194>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d009      	beq.n	8006d1c <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	2b12      	cmp	r3, #18
 8006d0c:	d803      	bhi.n	8006d16 <UI_HomeScreen+0xba>
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	3301      	adds	r3, #1
 8006d12:	71fb      	strb	r3, [r7, #7]
 8006d14:	e7a8      	b.n	8006c68 <UI_HomeScreen+0xc>
 8006d16:	2300      	movs	r3, #0
 8006d18:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8006d1a:	e7a5      	b.n	8006c68 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 8006d1c:	4b34      	ldr	r3, [pc, #208]	; (8006df0 <UI_HomeScreen+0x194>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d009      	beq.n	8006d3c <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <UI_HomeScreen+0xda>
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	71fb      	strb	r3, [r7, #7]
 8006d34:	e798      	b.n	8006c68 <UI_HomeScreen+0xc>
 8006d36:	2313      	movs	r3, #19
 8006d38:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8006d3a:	e795      	b.n	8006c68 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 8006d3c:	4b2c      	ldr	r3, [pc, #176]	; (8006df0 <UI_HomeScreen+0x194>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <UI_HomeScreen+0xf4>
			num_menu = 0;
 8006d48:	4b27      	ldr	r3, [pc, #156]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006d4e:	e78b      	b.n	8006c68 <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d831      	bhi.n	8006dbc <UI_HomeScreen+0x160>
 8006d58:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <UI_HomeScreen+0x104>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d87 	.word	0x08006d87
 8006d68:	08006d9d 	.word	0x08006d9d
 8006d6c:	08006dad 	.word	0x08006dad
		case 0:
			if(bt & SW_OK_PRESS) {
 8006d70:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <UI_HomeScreen+0x194>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d027      	beq.n	8006dcc <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <UI_HomeScreen+0x188>)
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8006d82:	2304      	movs	r3, #4
 8006d84:	e02a      	b.n	8006ddc <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <UI_HomeScreen+0x194>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01e      	beq.n	8006dd0 <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <UI_HomeScreen+0x188>)
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 8006d98:	2305      	movs	r3, #5
 8006d9a:	e01f      	b.n	8006ddc <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <UI_HomeScreen+0x194>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d015      	beq.n	8006dd4 <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 8006da8:	2306      	movs	r3, #6
 8006daa:	e017      	b.n	8006ddc <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <UI_HomeScreen+0x194>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00f      	beq.n	8006dd8 <UI_HomeScreen+0x17c>
				return UI_SET;
 8006db8:	2307      	movs	r3, #7
 8006dba:	e00f      	b.n	8006ddc <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <UI_HomeScreen+0x18c>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e75d      	b.n	8006c80 <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006dc4:	bf00      	nop
 8006dc6:	e75b      	b.n	8006c80 <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 8006dc8:	bf00      	nop
 8006dca:	e759      	b.n	8006c80 <UI_HomeScreen+0x24>
			break;
 8006dcc:	bf00      	nop
 8006dce:	e757      	b.n	8006c80 <UI_HomeScreen+0x24>
			break;
 8006dd0:	bf00      	nop
 8006dd2:	e755      	b.n	8006c80 <UI_HomeScreen+0x24>
			break;
 8006dd4:	bf00      	nop
 8006dd6:	e753      	b.n	8006c80 <UI_HomeScreen+0x24>
			break;
 8006dd8:	bf00      	nop
	while(1) {
 8006dda:	e751      	b.n	8006c80 <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000cd8 	.word	0x20000cd8
 8006de8:	20000fdf 	.word	0x20000fdf
 8006dec:	20000fe0 	.word	0x20000fe0
 8006df0:	20000fe4 	.word	0x20000fe4

08006df4 <UI_MirroringPlan>:



void UI_MirroringPlan() {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
	for(int i=0; i<plan.num_action; i++) {
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e032      	b.n	8006e66 <UI_MirroringPlan+0x72>
		Action_typedef temp;
		temp = GetActionOther(num_plan, i);
 8006e00:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <UI_MirroringPlan+0x88>)
 8006e02:	7819      	ldrb	r1, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	463b      	mov	r3, r7
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fe82 	bl	8005b14 <GetActionOther>
		switch(temp.act) {
 8006e10:	783b      	ldrb	r3, [r7, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	d822      	bhi.n	8006e5e <UI_MirroringPlan+0x6a>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UI_MirroringPlan+0x2c>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e39 	.word	0x08006e39
 8006e24:	08006e3f 	.word	0x08006e3f
 8006e28:	08006e5f 	.word	0x08006e5f
 8006e2c:	08006e5f 	.word	0x08006e5f
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e4b 	.word	0x08006e4b
		case 1: temp.act = 2; break;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	703b      	strb	r3, [r7, #0]
 8006e3c:	e008      	b.n	8006e50 <UI_MirroringPlan+0x5c>
		case 2: temp.act = 1; break;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	703b      	strb	r3, [r7, #0]
 8006e42:	e005      	b.n	8006e50 <UI_MirroringPlan+0x5c>
		case 5: temp.act = 6; break;
 8006e44:	2306      	movs	r3, #6
 8006e46:	703b      	strb	r3, [r7, #0]
 8006e48:	e002      	b.n	8006e50 <UI_MirroringPlan+0x5c>
		case 6: temp.act = 5; break;
 8006e4a:	2305      	movs	r3, #5
 8006e4c:	703b      	strb	r3, [r7, #0]
 8006e4e:	bf00      	nop
		default: continue;
		}
		SetActionOther(temp, i);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	463a      	mov	r2, r7
 8006e56:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e58:	f7fe fe9c 	bl	8005b94 <SetActionOther>
 8006e5c:	e000      	b.n	8006e60 <UI_MirroringPlan+0x6c>
		default: continue;
 8006e5e:	bf00      	nop
	for(int i=0; i<plan.num_action; i++) {
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <UI_MirroringPlan+0x8c>)
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	dbc6      	blt.n	8006e00 <UI_MirroringPlan+0xc>
	}
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000cd5 	.word	0x20000cd5
 8006e80:	20000d60 	.word	0x20000d60

08006e84 <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 8006e8a:	4b42      	ldr	r3, [pc, #264]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 8006e90:	4b40      	ldr	r3, [pc, #256]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006e92:	220d      	movs	r2, #13
 8006e94:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 8006e96:	4b3f      	ldr	r3, [pc, #252]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006e98:	2278      	movs	r2, #120	; 0x78
 8006e9a:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 8006e9c:	4b3d      	ldr	r3, [pc, #244]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006e9e:	220b      	movs	r2, #11
 8006ea0:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 8006ea2:	4b3c      	ldr	r3, [pc, #240]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 8006ea8:	4b3a      	ldr	r3, [pc, #232]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006eaa:	2202      	movs	r2, #2
 8006eac:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8006eae:	2301      	movs	r3, #1
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	e050      	b.n	8006f56 <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 8006eb4:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006eb6:	7818      	ldrb	r0, [r3, #0]
 8006eb8:	4936      	ldr	r1, [pc, #216]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	1e5a      	subs	r2, r3, #1
 8006ecc:	4931      	ldr	r1, [pc, #196]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	4413      	add	r3, r2
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	b2d8      	uxtb	r0, r3
 8006ee6:	492b      	ldr	r1, [pc, #172]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 8006ef8:	4b26      	ldr	r3, [pc, #152]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006efa:	78d8      	ldrb	r0, [r3, #3]
 8006efc:	4925      	ldr	r1, [pc, #148]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	440b      	add	r3, r1
 8006f08:	3303      	adds	r3, #3
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8006f0e:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006f10:	7918      	ldrb	r0, [r3, #4]
 8006f12:	4920      	ldr	r1, [pc, #128]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4602      	mov	r2, r0
 8006f22:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 8006f24:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006f26:	7898      	ldrb	r0, [r3, #2]
 8006f28:	491a      	ldr	r1, [pc, #104]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	440b      	add	r3, r1
 8006f34:	3302      	adds	r3, #2
 8006f36:	4602      	mov	r2, r0
 8006f38:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 8006f3a:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006f3c:	7998      	ldrb	r0, [r3, #6]
 8006f3e:	4915      	ldr	r1, [pc, #84]	; (8006f94 <UI_SettingDisplayInit+0x110>)
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	440b      	add	r3, r1
 8006f4a:	3306      	adds	r3, #6
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3301      	adds	r3, #1
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	ddab      	ble.n	8006eb4 <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 8006f62:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f6a:	227f      	movs	r2, #127	; 0x7f
 8006f6c:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f70:	220a      	movs	r2, #10
 8006f72:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 8006f74:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <UI_SettingDisplayInit+0x114>)
 8006f82:	2202      	movs	r2, #2
 8006f84:	719a      	strb	r2, [r3, #6]
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000f30 	.word	0x20000f30
 8006f98:	20000f4c 	.word	0x20000f4c

08006f9c <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	4a29      	ldr	r2, [pc, #164]	; (8007050 <UI_SettingDisplay+0xb4>)
 8006faa:	f992 2000 	ldrsb.w	r2, [r2]
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	dd06      	ble.n	8006fc2 <UI_SettingDisplay+0x26>
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	3b03      	subs	r3, #3
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	b25a      	sxtb	r2, r3
 8006fbc:	4b24      	ldr	r3, [pc, #144]	; (8007050 <UI_SettingDisplay+0xb4>)
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	e009      	b.n	8006fd6 <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	4a22      	ldr	r2, [pc, #136]	; (8007050 <UI_SettingDisplay+0xb4>)
 8006fc6:	f992 2000 	ldrsb.w	r2, [r2]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	da03      	bge.n	8006fd6 <UI_SettingDisplay+0x3a>
 8006fce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006fd2:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <UI_SettingDisplay+0xb4>)
 8006fd4:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	e031      	b.n	8007040 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8006fdc:	4b1c      	ldr	r3, [pc, #112]	; (8007050 <UI_SettingDisplay+0xb4>)
 8006fde:	f993 3000 	ldrsb.w	r3, [r3]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	441a      	add	r2, r3
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d109      	bne.n	8007002 <UI_SettingDisplay+0x66>
 8006fee:	4919      	ldr	r1, [pc, #100]	; (8007054 <UI_SettingDisplay+0xb8>)
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e008      	b.n	8007014 <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8007002:	4914      	ldr	r1, [pc, #80]	; (8007054 <UI_SettingDisplay+0xb8>)
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4613      	mov	r3, r2
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	1a9b      	subs	r3, r3, r2
 800700c:	440b      	add	r3, r1
 800700e:	3302      	adds	r3, #2
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	4a0d      	ldr	r2, [pc, #52]	; (8007054 <UI_SettingDisplay+0xb8>)
 800701e:	441a      	add	r2, r3
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <UI_SettingDisplay+0xb4>)
 8007022:	f993 3000 	ldrsb.w	r3, [r3]
 8007026:	4619      	mov	r1, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	440b      	add	r3, r1
 800702c:	490a      	ldr	r1, [pc, #40]	; (8007058 <UI_SettingDisplay+0xbc>)
 800702e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fa fc2b 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b03      	cmp	r3, #3
 8007044:	ddca      	ble.n	8006fdc <UI_SettingDisplay+0x40>
	}
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000fe5 	.word	0x20000fe5
 8007054:	20000f30 	.word	0x20000f30
 8007058:	200002a4 	.word	0x200002a4

0800705c <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 8007066:	4964      	ldr	r1, [pc, #400]	; (80071f8 <UI_Setting+0x19c>)
 8007068:	4864      	ldr	r0, [pc, #400]	; (80071fc <UI_Setting+0x1a0>)
 800706a:	f7fa fc11 	bl	8001890 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 800706e:	4b64      	ldr	r3, [pc, #400]	; (8007200 <UI_Setting+0x1a4>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff ff92 	bl	8006f9c <UI_SettingDisplay>
	tick = HAL_GetTick();
 8007078:	f002 fe60 	bl	8009d3c <HAL_GetTick>
 800707c:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800707e:	f002 fe5d 	bl	8009d3c <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b45      	cmp	r3, #69	; 0x45
 800708a:	f240 80a0 	bls.w	80071ce <UI_Setting+0x172>
		if(bt == UI_ReadButton()) continue;
 800708e:	f7ff fc83 	bl	8006998 <UI_ReadButton>
 8007092:	4603      	mov	r3, r0
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	4293      	cmp	r3, r2
 800709a:	f000 809a 	beq.w	80071d2 <UI_Setting+0x176>
		bt = UI_ReadButton();
 800709e:	f7ff fc7b 	bl	8006998 <UI_ReadButton>
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <UI_Setting+0x72>
			if(num_menu==7) num_menu = 0; else num_menu++;
 80070b0:	4b53      	ldr	r3, [pc, #332]	; (8007200 <UI_Setting+0x1a4>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b07      	cmp	r3, #7
 80070b6:	d103      	bne.n	80070c0 <UI_Setting+0x64>
 80070b8:	4b51      	ldr	r3, [pc, #324]	; (8007200 <UI_Setting+0x1a4>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	e7d6      	b.n	800706e <UI_Setting+0x12>
 80070c0:	4b4f      	ldr	r3, [pc, #316]	; (8007200 <UI_Setting+0x1a4>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	4b4d      	ldr	r3, [pc, #308]	; (8007200 <UI_Setting+0x1a4>)
 80070ca:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 80070cc:	e7cf      	b.n	800706e <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00e      	beq.n	80070f6 <UI_Setting+0x9a>
			if(num_menu==0) num_menu = 7; else num_menu--;
 80070d8:	4b49      	ldr	r3, [pc, #292]	; (8007200 <UI_Setting+0x1a4>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d103      	bne.n	80070e8 <UI_Setting+0x8c>
 80070e0:	4b47      	ldr	r3, [pc, #284]	; (8007200 <UI_Setting+0x1a4>)
 80070e2:	2207      	movs	r2, #7
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e7c2      	b.n	800706e <UI_Setting+0x12>
 80070e8:	4b45      	ldr	r3, [pc, #276]	; (8007200 <UI_Setting+0x1a4>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	4b43      	ldr	r3, [pc, #268]	; (8007200 <UI_Setting+0x1a4>)
 80070f2:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 80070f4:	e7bb      	b.n	800706e <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	f003 0348 	and.w	r3, r3, #72	; 0x48
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <UI_Setting+0xae>
			num_menu = 0;
 8007100:	4b3f      	ldr	r3, [pc, #252]	; (8007200 <UI_Setting+0x1a4>)
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8007106:	2302      	movs	r3, #2
 8007108:	e071      	b.n	80071ee <UI_Setting+0x192>
		}
		switch(num_menu) {
 800710a:	4b3d      	ldr	r3, [pc, #244]	; (8007200 <UI_Setting+0x1a4>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b05      	cmp	r3, #5
 8007110:	d8b5      	bhi.n	800707e <UI_Setting+0x22>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <UI_Setting+0xbc>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007131 	.word	0x08007131
 800711c:	0800713f 	.word	0x0800713f
 8007120:	0800714d 	.word	0x0800714d
 8007124:	0800715b 	.word	0x0800715b
 8007128:	08007169 	.word	0x08007169
 800712c:	080071c1 	.word	0x080071c1
		case 0:
			if(bt & SW_OK_PRESS) {
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d04d      	beq.n	80071d6 <UI_Setting+0x17a>
				return UI_SET_ADC;
 800713a:	2308      	movs	r3, #8
 800713c:	e057      	b.n	80071ee <UI_Setting+0x192>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d048      	beq.n	80071da <UI_Setting+0x17e>
				return UI_SET_CALIB;
 8007148:	2309      	movs	r3, #9
 800714a:	e050      	b.n	80071ee <UI_Setting+0x192>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d043      	beq.n	80071de <UI_Setting+0x182>
				return UI_SET_CP;
 8007156:	230a      	movs	r3, #10
 8007158:	e049      	b.n	80071ee <UI_Setting+0x192>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03e      	beq.n	80071e2 <UI_Setting+0x186>
				return UI_SET_PID;
 8007164:	230b      	movs	r3, #11
 8007166:	e042      	b.n	80071ee <UI_Setting+0x192>
			}
			break;
		case 4:
			if(bt & SW_OK_PRESS) {
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d039      	beq.n	80071e6 <UI_Setting+0x18a>
				DISP_DisplayText(&short_message, "Are You Sure?");
 8007172:	4924      	ldr	r1, [pc, #144]	; (8007204 <UI_Setting+0x1a8>)
 8007174:	4824      	ldr	r0, [pc, #144]	; (8007208 <UI_Setting+0x1ac>)
 8007176:	f7fa fb8b 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 800717a:	f7ff fc0d 	bl	8006998 <UI_ReadButton>
 800717e:	4603      	mov	r3, r0
 8007180:	461a      	mov	r2, r3
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	4293      	cmp	r3, r2
 8007186:	d019      	beq.n	80071bc <UI_Setting+0x160>
					bt = UI_ReadButton();
 8007188:	f7ff fc06 	bl	8006998 <UI_ReadButton>
 800718c:	4603      	mov	r3, r0
 800718e:	71fb      	strb	r3, [r7, #7]
					if(bt & SW_OK_PRESS) {
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <UI_Setting+0x154>
						DISP_DisplayText(&short_message, "Mirroring...");
 800719a:	491c      	ldr	r1, [pc, #112]	; (800720c <UI_Setting+0x1b0>)
 800719c:	481a      	ldr	r0, [pc, #104]	; (8007208 <UI_Setting+0x1ac>)
 800719e:	f7fa fb77 	bl	8001890 <DISP_DisplayText>
						UI_MirroringPlan();
 80071a2:	f7ff fe27 	bl	8006df4 <UI_MirroringPlan>
						DISP_DisplayText(&short_message, "Mirroring Done!");
 80071a6:	491a      	ldr	r1, [pc, #104]	; (8007210 <UI_Setting+0x1b4>)
 80071a8:	4817      	ldr	r0, [pc, #92]	; (8007208 <UI_Setting+0x1ac>)
 80071aa:	f7fa fb71 	bl	8001890 <DISP_DisplayText>
						goto ui_setting;
 80071ae:	e75e      	b.n	800706e <UI_Setting+0x12>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0df      	beq.n	800717a <UI_Setting+0x11e>
						goto ui_setting;
 80071ba:	e758      	b.n	800706e <UI_Setting+0x12>
					if(bt == UI_ReadButton()) continue;
 80071bc:	bf00      	nop
 80071be:	e7dc      	b.n	800717a <UI_Setting+0x11e>
					}
				}
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00f      	beq.n	80071ea <UI_Setting+0x18e>
				return UI_SET_MEM;
 80071ca:	230d      	movs	r3, #13
 80071cc:	e00f      	b.n	80071ee <UI_Setting+0x192>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80071ce:	bf00      	nop
 80071d0:	e755      	b.n	800707e <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 80071d2:	bf00      	nop
 80071d4:	e753      	b.n	800707e <UI_Setting+0x22>
			break;
 80071d6:	bf00      	nop
 80071d8:	e751      	b.n	800707e <UI_Setting+0x22>
			break;
 80071da:	bf00      	nop
 80071dc:	e74f      	b.n	800707e <UI_Setting+0x22>
			break;
 80071de:	bf00      	nop
 80071e0:	e74d      	b.n	800707e <UI_Setting+0x22>
			break;
 80071e2:	bf00      	nop
 80071e4:	e74b      	b.n	800707e <UI_Setting+0x22>
			break;
 80071e6:	bf00      	nop
 80071e8:	e749      	b.n	800707e <UI_Setting+0x22>
			}
			break;
 80071ea:	bf00      	nop
 80071ec:	e747      	b.n	800707e <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	08012098 	.word	0x08012098
 80071fc:	20000f28 	.word	0x20000f28
 8007200:	20000fe6 	.word	0x20000fe6
 8007204:	080120a0 	.word	0x080120a0
 8007208:	20000efc 	.word	0x20000efc
 800720c:	080120b0 	.word	0x080120b0
 8007210:	080120c0 	.word	0x080120c0

08007214 <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 800721a:	4b49      	ldr	r3, [pc, #292]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 800721c:	2206      	movs	r2, #6
 800721e:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 8007220:	4b47      	ldr	r3, [pc, #284]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 8007222:	2210      	movs	r2, #16
 8007224:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 8007226:	4b46      	ldr	r3, [pc, #280]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 8007228:	2236      	movs	r2, #54	; 0x36
 800722a:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 800722c:	4b44      	ldr	r3, [pc, #272]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 800722e:	220b      	movs	r2, #11
 8007230:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 8007232:	4b43      	ldr	r3, [pc, #268]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 8007234:	2200      	movs	r2, #0
 8007236:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 8007238:	4b41      	ldr	r3, [pc, #260]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 800723a:	2202      	movs	r2, #2
 800723c:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 800723e:	4b41      	ldr	r3, [pc, #260]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 8007240:	4a3f      	ldr	r2, [pc, #252]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 8007242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007246:	6018      	str	r0, [r3, #0]
 8007248:	3304      	adds	r3, #4
 800724a:	8019      	strh	r1, [r3, #0]
 800724c:	3302      	adds	r3, #2
 800724e:	0c0a      	lsrs	r2, r1, #16
 8007250:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 8007252:	4b3c      	ldr	r3, [pc, #240]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 8007254:	223e      	movs	r2, #62	; 0x3e
 8007256:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 8007258:	4b3a      	ldr	r3, [pc, #232]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 800725a:	223a      	movs	r2, #58	; 0x3a
 800725c:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 800725e:	4b39      	ldr	r3, [pc, #228]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 8007260:	2202      	movs	r2, #2
 8007262:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 8007264:	2301      	movs	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e04c      	b.n	8007304 <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 800726a:	4935      	ldr	r1, [pc, #212]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	440b      	add	r3, r1
 8007276:	4a32      	ldr	r2, [pc, #200]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 8007278:	6810      	ldr	r0, [r2, #0]
 800727a:	6018      	str	r0, [r3, #0]
 800727c:	8891      	ldrh	r1, [r2, #4]
 800727e:	7992      	ldrb	r2, [r2, #6]
 8007280:	8099      	strh	r1, [r3, #4]
 8007282:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	492d      	ldr	r1, [pc, #180]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 800728a:	4613      	mov	r3, r2
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	440b      	add	r3, r1
 8007292:	3301      	adds	r3, #1
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	4b2a      	ldr	r3, [pc, #168]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 8007298:	791b      	ldrb	r3, [r3, #4]
 800729a:	4413      	add	r3, r2
 800729c:	b2db      	uxtb	r3, r3
 800729e:	3301      	adds	r3, #1
 80072a0:	b2d8      	uxtb	r0, r3
 80072a2:	4927      	ldr	r1, [pc, #156]	; (8007340 <UI_PlanSetDisplayInit+0x12c>)
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	440b      	add	r3, r1
 80072ae:	3301      	adds	r3, #1
 80072b0:	4602      	mov	r2, r0
 80072b2:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 80072b4:	4923      	ldr	r1, [pc, #140]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	440b      	add	r3, r1
 80072c0:	4a20      	ldr	r2, [pc, #128]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 80072c2:	6810      	ldr	r0, [r2, #0]
 80072c4:	6018      	str	r0, [r3, #0]
 80072c6:	8891      	ldrh	r1, [r2, #4]
 80072c8:	7992      	ldrb	r2, [r2, #6]
 80072ca:	8099      	strh	r1, [r3, #4]
 80072cc:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1e5a      	subs	r2, r3, #1
 80072d2:	491c      	ldr	r1, [pc, #112]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 80072d4:	4613      	mov	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	440b      	add	r3, r1
 80072dc:	3301      	adds	r3, #1
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	4b18      	ldr	r3, [pc, #96]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 80072e2:	791b      	ldrb	r3, [r3, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	3301      	adds	r3, #1
 80072ea:	b2d8      	uxtb	r0, r3
 80072ec:	4915      	ldr	r1, [pc, #84]	; (8007344 <UI_PlanSetDisplayInit+0x130>)
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	440b      	add	r3, r1
 80072f8:	3301      	adds	r3, #1
 80072fa:	4602      	mov	r2, r0
 80072fc:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3301      	adds	r3, #1
 8007302:	607b      	str	r3, [r7, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b03      	cmp	r3, #3
 8007308:	ddaf      	ble.n	800726a <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8007310:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 8007312:	2200      	movs	r2, #0
 8007314:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 8007318:	227f      	movs	r2, #127	; 0x7f
 800731a:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 800731e:	220d      	movs	r2, #13
 8007320:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 8007324:	2201      	movs	r2, #1
 8007326:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 800732a:	2200      	movs	r2, #0
 800732c:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <UI_PlanSetDisplayInit+0x134>)
 8007330:	2202      	movs	r2, #2
 8007332:	719a      	strb	r2, [r3, #6]
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	20000f54 	.word	0x20000f54
 8007344:	20000f70 	.word	0x20000f70
 8007348:	20000f8c 	.word	0x20000f8c

0800734c <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b08c      	sub	sp, #48	; 0x30
 8007350:	af02      	add	r7, sp, #8
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
 8007358:	4613      	mov	r3, r2
 800735a:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 800735c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 8007370:	79ba      	ldrb	r2, [r7, #6]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	4bba      	ldr	r3, [pc, #744]	; (8007664 <UI_PlanSetDisplay+0x318>)
 800737a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800737e:	f107 000c 	add.w	r0, r7, #12
 8007382:	49b9      	ldr	r1, [pc, #740]	; (8007668 <UI_PlanSetDisplay+0x31c>)
 8007384:	f008 fb60 	bl	800fa48 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 8007388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <UI_PlanSetDisplay+0x4c>
 8007390:	4bb6      	ldr	r3, [pc, #728]	; (800766c <UI_PlanSetDisplay+0x320>)
 8007392:	2201      	movs	r2, #1
 8007394:	709a      	strb	r2, [r3, #2]
 8007396:	e002      	b.n	800739e <UI_PlanSetDisplay+0x52>
 8007398:	4bb4      	ldr	r3, [pc, #720]	; (800766c <UI_PlanSetDisplay+0x320>)
 800739a:	2200      	movs	r2, #0
 800739c:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 800739e:	f107 030c 	add.w	r3, r7, #12
 80073a2:	4619      	mov	r1, r3
 80073a4:	48b1      	ldr	r0, [pc, #708]	; (800766c <UI_PlanSetDisplay+0x320>)
 80073a6:	f7fa fa73 	bl	8001890 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 80073aa:	2300      	movs	r3, #0
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	230e      	movs	r3, #14
 80073b0:	227f      	movs	r2, #127	; 0x7f
 80073b2:	210e      	movs	r1, #14
 80073b4:	2000      	movs	r0, #0
 80073b6:	f7fa f8d7 	bl	8001568 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 80073ba:	230d      	movs	r3, #13
 80073bc:	227f      	movs	r2, #127	; 0x7f
 80073be:	210d      	movs	r1, #13
 80073c0:	2000      	movs	r0, #0
 80073c2:	f7fa fb37 	bl	8001a34 <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 80073c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d101      	bne.n	80073d4 <UI_PlanSetDisplay+0x88>
 80073d0:	2300      	movs	r3, #0
 80073d2:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 80073d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d8:	4aa5      	ldr	r2, [pc, #660]	; (8007670 <UI_PlanSetDisplay+0x324>)
 80073da:	f992 2000 	ldrsb.w	r2, [r2]
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	dd06      	ble.n	80073f2 <UI_PlanSetDisplay+0xa6>
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	3b03      	subs	r3, #3
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	b25a      	sxtb	r2, r3
 80073ec:	4ba0      	ldr	r3, [pc, #640]	; (8007670 <UI_PlanSetDisplay+0x324>)
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e009      	b.n	8007406 <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 80073f2:	4b9f      	ldr	r3, [pc, #636]	; (8007670 <UI_PlanSetDisplay+0x324>)
 80073f4:	f993 3000 	ldrsb.w	r3, [r3]
 80073f8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	da02      	bge.n	8007406 <UI_PlanSetDisplay+0xba>
 8007400:	4a9b      	ldr	r2, [pc, #620]	; (8007670 <UI_PlanSetDisplay+0x324>)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 8007406:	2300      	movs	r3, #0
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
 800740a:	e23d      	b.n	8007888 <UI_PlanSetDisplay+0x53c>
		if(i + first_list == num && !temp) {
 800740c:	4b98      	ldr	r3, [pc, #608]	; (8007670 <UI_PlanSetDisplay+0x324>)
 800740e:	f993 3000 	ldrsb.w	r3, [r3]
 8007412:	461a      	mov	r2, r3
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	441a      	add	r2, r3
 8007418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741c:	429a      	cmp	r2, r3
 800741e:	d116      	bne.n	800744e <UI_PlanSetDisplay+0x102>
 8007420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007424:	2b00      	cmp	r3, #0
 8007426:	d112      	bne.n	800744e <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 8007428:	4992      	ldr	r1, [pc, #584]	; (8007674 <UI_PlanSetDisplay+0x328>)
 800742a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742c:	4613      	mov	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	440b      	add	r3, r1
 8007434:	3302      	adds	r3, #2
 8007436:	2201      	movs	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 800743a:	498f      	ldr	r1, [pc, #572]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 800743c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	440b      	add	r3, r1
 8007446:	3302      	adds	r3, #2
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e011      	b.n	8007472 <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 800744e:	4989      	ldr	r1, [pc, #548]	; (8007674 <UI_PlanSetDisplay+0x328>)
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	4613      	mov	r3, r2
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	440b      	add	r3, r1
 800745a:	3302      	adds	r3, #2
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 8007460:	4985      	ldr	r1, [pc, #532]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 8007462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007464:	4613      	mov	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	440b      	add	r3, r1
 800746c:	3302      	adds	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 8007472:	4b7f      	ldr	r3, [pc, #508]	; (8007670 <UI_PlanSetDisplay+0x324>)
 8007474:	f993 3000 	ldrsb.w	r3, [r3]
 8007478:	461a      	mov	r2, r3
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	4413      	add	r3, r2
 800747e:	2b0c      	cmp	r3, #12
 8007480:	f200 81ff 	bhi.w	8007882 <UI_PlanSetDisplay+0x536>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UI_PlanSetDisplay+0x140>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074c1 	.word	0x080074c1
 8007490:	08007501 	.word	0x08007501
 8007494:	08007537 	.word	0x08007537
 8007498:	080075a1 	.word	0x080075a1
 800749c:	080075e1 	.word	0x080075e1
 80074a0:	08007623 	.word	0x08007623
 80074a4:	080076a1 	.word	0x080076a1
 80074a8:	080076e1 	.word	0x080076e1
 80074ac:	08007721 	.word	0x08007721
 80074b0:	08007761 	.word	0x08007761
 80074b4:	080077bf 	.word	0x080077bf
 80074b8:	0800782d 	.word	0x0800782d
 80074bc:	08007857 	.word	0x08007857
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 80074c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c2:	4613      	mov	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	1a9b      	subs	r3, r3, r2
 80074c8:	4a6a      	ldr	r2, [pc, #424]	; (8007674 <UI_PlanSetDisplay+0x328>)
 80074ca:	4413      	add	r3, r2
 80074cc:	496b      	ldr	r1, [pc, #428]	; (800767c <UI_PlanSetDisplay+0x330>)
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fa f9de 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	461a      	mov	r2, r3
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	4968      	ldr	r1, [pc, #416]	; (8007680 <UI_PlanSetDisplay+0x334>)
 80074e0:	4618      	mov	r0, r3
 80074e2:	f008 fab1 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80074e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	4a62      	ldr	r2, [pc, #392]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 80074f0:	4413      	add	r3, r2
 80074f2:	f107 020c 	add.w	r2, r7, #12
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fa f9c9 	bl	8001890 <DISP_DisplayText>
			break;
 80074fe:	e1c0      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 8007500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007502:	4613      	mov	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	4a5a      	ldr	r2, [pc, #360]	; (8007674 <UI_PlanSetDisplay+0x328>)
 800750a:	4413      	add	r3, r2
 800750c:	495d      	ldr	r1, [pc, #372]	; (8007684 <UI_PlanSetDisplay+0x338>)
 800750e:	4618      	mov	r0, r3
 8007510:	f7fa f9be 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 8007514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007516:	4613      	mov	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	4a56      	ldr	r2, [pc, #344]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 800751e:	441a      	add	r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	789b      	ldrb	r3, [r3, #2]
 8007524:	4619      	mov	r1, r3
 8007526:	4b58      	ldr	r3, [pc, #352]	; (8007688 <UI_PlanSetDisplay+0x33c>)
 8007528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7fa f9ae 	bl	8001890 <DISP_DisplayText>
			break;
 8007534:	e1a5      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 2:
			if(plan->act != PLAN_JUMP) {
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b0b      	cmp	r3, #11
 800753c:	d010      	beq.n	8007560 <UI_PlanSetDisplay+0x214>
				DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 800753e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007540:	4613      	mov	r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	4a4b      	ldr	r2, [pc, #300]	; (8007674 <UI_PlanSetDisplay+0x328>)
 8007548:	441a      	add	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	789b      	ldrb	r3, [r3, #2]
 800754e:	4619      	mov	r1, r3
 8007550:	4b4e      	ldr	r3, [pc, #312]	; (800768c <UI_PlanSetDisplay+0x340>)
 8007552:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7fa f999 	bl	8001890 <DISP_DisplayText>
 800755e:	e009      	b.n	8007574 <UI_PlanSetDisplay+0x228>
			}
			else {
				DISP_DisplayText(&planset_list_name[i], "Index");
 8007560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007562:	4613      	mov	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	4a42      	ldr	r2, [pc, #264]	; (8007674 <UI_PlanSetDisplay+0x328>)
 800756a:	4413      	add	r3, r2
 800756c:	4948      	ldr	r1, [pc, #288]	; (8007690 <UI_PlanSetDisplay+0x344>)
 800756e:	4618      	mov	r0, r3
 8007570:	f7fa f98e 	bl	8001890 <DISP_DisplayText>
			}
			sprintf(buff, "%i", plan->act_value);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	78db      	ldrb	r3, [r3, #3]
 8007578:	461a      	mov	r2, r3
 800757a:	f107 030c 	add.w	r3, r7, #12
 800757e:	4940      	ldr	r1, [pc, #256]	; (8007680 <UI_PlanSetDisplay+0x334>)
 8007580:	4618      	mov	r0, r3
 8007582:	f008 fa61 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 8007590:	4413      	add	r3, r2
 8007592:	f107 020c 	add.w	r2, r7, #12
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7fa f979 	bl	8001890 <DISP_DisplayText>
			break;
 800759e:	e170      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 80075a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a2:	4613      	mov	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	1a9b      	subs	r3, r3, r2
 80075a8:	4a32      	ldr	r2, [pc, #200]	; (8007674 <UI_PlanSetDisplay+0x328>)
 80075aa:	4413      	add	r3, r2
 80075ac:	4939      	ldr	r1, [pc, #228]	; (8007694 <UI_PlanSetDisplay+0x348>)
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fa f96e 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	461a      	mov	r2, r3
 80075ba:	f107 030c 	add.w	r3, r7, #12
 80075be:	4930      	ldr	r1, [pc, #192]	; (8007680 <UI_PlanSetDisplay+0x334>)
 80075c0:	4618      	mov	r0, r3
 80075c2:	f008 fa41 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80075c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c8:	4613      	mov	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 80075d0:	4413      	add	r3, r2
 80075d2:	f107 020c 	add.w	r2, r7, #12
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fa f959 	bl	8001890 <DISP_DisplayText>
			break;
 80075de:	e150      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	4613      	mov	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	1a9b      	subs	r3, r3, r2
 80075e8:	4a22      	ldr	r2, [pc, #136]	; (8007674 <UI_PlanSetDisplay+0x328>)
 80075ea:	4413      	add	r3, r2
 80075ec:	492a      	ldr	r1, [pc, #168]	; (8007698 <UI_PlanSetDisplay+0x34c>)
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fa f94e 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f107 030c 	add.w	r3, r7, #12
 8007600:	491f      	ldr	r1, [pc, #124]	; (8007680 <UI_PlanSetDisplay+0x334>)
 8007602:	4618      	mov	r0, r3
 8007604:	f008 fa20 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	4a19      	ldr	r2, [pc, #100]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 8007612:	4413      	add	r3, r2
 8007614:	f107 020c 	add.w	r2, r7, #12
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7fa f938 	bl	8001890 <DISP_DisplayText>
			break;
 8007620:	e12f      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 8007622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	4a12      	ldr	r2, [pc, #72]	; (8007674 <UI_PlanSetDisplay+0x328>)
 800762c:	4413      	add	r3, r2
 800762e:	491b      	ldr	r1, [pc, #108]	; (800769c <UI_PlanSetDisplay+0x350>)
 8007630:	4618      	mov	r0, r3
 8007632:	f7fa f92d 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800763c:	461a      	mov	r2, r3
 800763e:	f107 030c 	add.w	r3, r7, #12
 8007642:	490f      	ldr	r1, [pc, #60]	; (8007680 <UI_PlanSetDisplay+0x334>)
 8007644:	4618      	mov	r0, r3
 8007646:	f008 f9ff 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800764a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	4a09      	ldr	r2, [pc, #36]	; (8007678 <UI_PlanSetDisplay+0x32c>)
 8007654:	4413      	add	r3, r2
 8007656:	f107 020c 	add.w	r2, r7, #12
 800765a:	4611      	mov	r1, r2
 800765c:	4618      	mov	r0, r3
 800765e:	f7fa f917 	bl	8001890 <DISP_DisplayText>
			break;
 8007662:	e10e      	b.n	8007882 <UI_PlanSetDisplay+0x536>
 8007664:	200002c4 	.word	0x200002c4
 8007668:	0801216c 	.word	0x0801216c
 800766c:	20000f8c 	.word	0x20000f8c
 8007670:	20000fe7 	.word	0x20000fe7
 8007674:	20000f54 	.word	0x20000f54
 8007678:	20000f70 	.word	0x20000f70
 800767c:	08012178 	.word	0x08012178
 8007680:	08012180 	.word	0x08012180
 8007684:	08012184 	.word	0x08012184
 8007688:	200002f8 	.word	0x200002f8
 800768c:	20000304 	.word	0x20000304
 8007690:	0801218c 	.word	0x0801218c
 8007694:	08012194 	.word	0x08012194
 8007698:	0801219c 	.word	0x0801219c
 800769c:	080121a4 	.word	0x080121a4
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 80076a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a2:	4613      	mov	r3, r2
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	4a7c      	ldr	r2, [pc, #496]	; (800789c <UI_PlanSetDisplay+0x550>)
 80076aa:	4413      	add	r3, r2
 80076ac:	497c      	ldr	r1, [pc, #496]	; (80078a0 <UI_PlanSetDisplay+0x554>)
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fa f8ee 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	79db      	ldrb	r3, [r3, #7]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	4979      	ldr	r1, [pc, #484]	; (80078a4 <UI_PlanSetDisplay+0x558>)
 80076c0:	4618      	mov	r0, r3
 80076c2:	f008 f9c1 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80076c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	4a76      	ldr	r2, [pc, #472]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 80076d0:	4413      	add	r3, r2
 80076d2:	f107 020c 	add.w	r2, r7, #12
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fa f8d9 	bl	8001890 <DISP_DisplayText>
			break;
 80076de:	e0d0      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 80076e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	4a6c      	ldr	r2, [pc, #432]	; (800789c <UI_PlanSetDisplay+0x550>)
 80076ea:	4413      	add	r3, r2
 80076ec:	496f      	ldr	r1, [pc, #444]	; (80078ac <UI_PlanSetDisplay+0x560>)
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fa f8ce 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	7a1b      	ldrb	r3, [r3, #8]
 80076f8:	461a      	mov	r2, r3
 80076fa:	f107 030c 	add.w	r3, r7, #12
 80076fe:	4969      	ldr	r1, [pc, #420]	; (80078a4 <UI_PlanSetDisplay+0x558>)
 8007700:	4618      	mov	r0, r3
 8007702:	f008 f9a1 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	4a66      	ldr	r2, [pc, #408]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 8007710:	4413      	add	r3, r2
 8007712:	f107 020c 	add.w	r2, r7, #12
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f7fa f8b9 	bl	8001890 <DISP_DisplayText>
			break;
 800771e:	e0b0      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 8007720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007722:	4613      	mov	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	1a9b      	subs	r3, r3, r2
 8007728:	4a5c      	ldr	r2, [pc, #368]	; (800789c <UI_PlanSetDisplay+0x550>)
 800772a:	4413      	add	r3, r2
 800772c:	4960      	ldr	r1, [pc, #384]	; (80078b0 <UI_PlanSetDisplay+0x564>)
 800772e:	4618      	mov	r0, r3
 8007730:	f7fa f8ae 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	7a5b      	ldrb	r3, [r3, #9]
 8007738:	461a      	mov	r2, r3
 800773a:	f107 030c 	add.w	r3, r7, #12
 800773e:	4959      	ldr	r1, [pc, #356]	; (80078a4 <UI_PlanSetDisplay+0x558>)
 8007740:	4618      	mov	r0, r3
 8007742:	f008 f981 	bl	800fa48 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007748:	4613      	mov	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	4a56      	ldr	r2, [pc, #344]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 8007750:	4413      	add	r3, r2
 8007752:	f107 020c 	add.w	r2, r7, #12
 8007756:	4611      	mov	r1, r2
 8007758:	4618      	mov	r0, r3
 800775a:	f7fa f899 	bl	8001890 <DISP_DisplayText>
			break;
 800775e:	e090      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	4613      	mov	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	4a4c      	ldr	r2, [pc, #304]	; (800789c <UI_PlanSetDisplay+0x550>)
 800776a:	4413      	add	r3, r2
 800776c:	4951      	ldr	r1, [pc, #324]	; (80078b4 <UI_PlanSetDisplay+0x568>)
 800776e:	4618      	mov	r0, r3
 8007770:	f7fa f88e 	bl	8001890 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	7a9b      	ldrb	r3, [r3, #10]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <UI_PlanSetDisplay+0x446>
				DISP_DisplayText(&planset_list_value[i], "Default");
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	4613      	mov	r3, r2
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	4a48      	ldr	r2, [pc, #288]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 8007786:	4413      	add	r3, r2
 8007788:	494b      	ldr	r1, [pc, #300]	; (80078b8 <UI_PlanSetDisplay+0x56c>)
 800778a:	4618      	mov	r0, r3
 800778c:	f7fa f880 	bl	8001890 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 8007790:	e077      	b.n	8007882 <UI_PlanSetDisplay+0x536>
				sprintf(buff, "%i", plan->unit_speed);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	7a9b      	ldrb	r3, [r3, #10]
 8007796:	461a      	mov	r2, r3
 8007798:	f107 030c 	add.w	r3, r7, #12
 800779c:	4941      	ldr	r1, [pc, #260]	; (80078a4 <UI_PlanSetDisplay+0x558>)
 800779e:	4618      	mov	r0, r3
 80077a0:	f008 f952 	bl	800fa48 <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 80077a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	4a3e      	ldr	r2, [pc, #248]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 80077ae:	4413      	add	r3, r2
 80077b0:	f107 020c 	add.w	r2, r7, #12
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fa f86a 	bl	8001890 <DISP_DisplayText>
			break;
 80077bc:	e061      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 80077be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	4a35      	ldr	r2, [pc, #212]	; (800789c <UI_PlanSetDisplay+0x550>)
 80077c8:	4413      	add	r3, r2
 80077ca:	493c      	ldr	r1, [pc, #240]	; (80078bc <UI_PlanSetDisplay+0x570>)
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fa f85f 	bl	8001890 <DISP_DisplayText>
			switch(plan->status) {
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	7adb      	ldrb	r3, [r3, #11]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d01c      	beq.n	8007814 <UI_PlanSetDisplay+0x4c8>
 80077da:	2b02      	cmp	r3, #2
 80077dc:	dc50      	bgt.n	8007880 <UI_PlanSetDisplay+0x534>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <UI_PlanSetDisplay+0x49c>
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d00b      	beq.n	80077fe <UI_PlanSetDisplay+0x4b2>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 80077e6:	e04b      	b.n	8007880 <UI_PlanSetDisplay+0x534>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	4613      	mov	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	4a2d      	ldr	r2, [pc, #180]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 80077f2:	4413      	add	r3, r2
 80077f4:	4932      	ldr	r1, [pc, #200]	; (80078c0 <UI_PlanSetDisplay+0x574>)
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fa f84a 	bl	8001890 <DISP_DisplayText>
 80077fc:	e015      	b.n	800782a <UI_PlanSetDisplay+0x4de>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 80077fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007800:	4613      	mov	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 8007808:	4413      	add	r3, r2
 800780a:	492e      	ldr	r1, [pc, #184]	; (80078c4 <UI_PlanSetDisplay+0x578>)
 800780c:	4618      	mov	r0, r3
 800780e:	f7fa f83f 	bl	8001890 <DISP_DisplayText>
 8007812:	e00a      	b.n	800782a <UI_PlanSetDisplay+0x4de>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 8007814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 800781e:	4413      	add	r3, r2
 8007820:	4929      	ldr	r1, [pc, #164]	; (80078c8 <UI_PlanSetDisplay+0x57c>)
 8007822:	4618      	mov	r0, r3
 8007824:	f7fa f834 	bl	8001890 <DISP_DisplayText>
 8007828:	bf00      	nop
			break;
 800782a:	e029      	b.n	8007880 <UI_PlanSetDisplay+0x534>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 800782c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782e:	4613      	mov	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	4a19      	ldr	r2, [pc, #100]	; (800789c <UI_PlanSetDisplay+0x550>)
 8007836:	4413      	add	r3, r2
 8007838:	4924      	ldr	r1, [pc, #144]	; (80078cc <UI_PlanSetDisplay+0x580>)
 800783a:	4618      	mov	r0, r3
 800783c:	f7fa f828 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8007840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 800784a:	4413      	add	r3, r2
 800784c:	4920      	ldr	r1, [pc, #128]	; (80078d0 <UI_PlanSetDisplay+0x584>)
 800784e:	4618      	mov	r0, r3
 8007850:	f7fa f81e 	bl	8001890 <DISP_DisplayText>
			break;
 8007854:	e015      	b.n	8007882 <UI_PlanSetDisplay+0x536>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8007856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007858:	4613      	mov	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	4a0f      	ldr	r2, [pc, #60]	; (800789c <UI_PlanSetDisplay+0x550>)
 8007860:	4413      	add	r3, r2
 8007862:	491c      	ldr	r1, [pc, #112]	; (80078d4 <UI_PlanSetDisplay+0x588>)
 8007864:	4618      	mov	r0, r3
 8007866:	f7fa f813 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	4613      	mov	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	4a0d      	ldr	r2, [pc, #52]	; (80078a8 <UI_PlanSetDisplay+0x55c>)
 8007874:	4413      	add	r3, r2
 8007876:	4916      	ldr	r1, [pc, #88]	; (80078d0 <UI_PlanSetDisplay+0x584>)
 8007878:	4618      	mov	r0, r3
 800787a:	f7fa f809 	bl	8001890 <DISP_DisplayText>
			break;
 800787e:	e000      	b.n	8007882 <UI_PlanSetDisplay+0x536>
			break;
 8007880:	bf00      	nop
	for(int i=0; i<4; i++) {
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	3301      	adds	r3, #1
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	2b03      	cmp	r3, #3
 800788c:	f77f adbe 	ble.w	800740c <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	3728      	adds	r7, #40	; 0x28
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000f54 	.word	0x20000f54
 80078a0:	080121ac 	.word	0x080121ac
 80078a4:	08012180 	.word	0x08012180
 80078a8:	20000f70 	.word	0x20000f70
 80078ac:	080121b4 	.word	0x080121b4
 80078b0:	080121c0 	.word	0x080121c0
 80078b4:	080121c8 	.word	0x080121c8
 80078b8:	080121d0 	.word	0x080121d0
 80078bc:	080121d8 	.word	0x080121d8
 80078c0:	080121e0 	.word	0x080121e0
 80078c4:	080121e8 	.word	0x080121e8
 80078c8:	080121f0 	.word	0x080121f0
 80078cc:	080121f8 	.word	0x080121f8
 80078d0:	08012200 	.word	0x08012200
 80078d4:	08012204 	.word	0x08012204

080078d8 <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af00      	add	r7, sp, #0
	uint8_t num_index = plan.checkpoint[num_checkpoint];
 80078de:	4bc6      	ldr	r3, [pc, #792]	; (8007bf8 <UI_PlanSet+0x320>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	4bc5      	ldr	r3, [pc, #788]	; (8007bfc <UI_PlanSet+0x324>)
 80078e6:	4413      	add	r3, r2
 80078e8:	789b      	ldrb	r3, [r3, #2]
 80078ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Action_typedef plan_set = GetAction(num_index);
 80078ee:	f107 0314 	add.w	r3, r7, #20
 80078f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fd fe1d 	bl	8005538 <GetAction>
	int8_t num = -1;
 80078fe:	23ff      	movs	r3, #255	; 0xff
 8007900:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t change_status = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 8007910:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007914:	f107 0114 	add.w	r1, r7, #20
 8007918:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff fd15 	bl	800734c <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 8007922:	f002 fa0b 	bl	8009d3c <HAL_GetTick>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8007928:	f002 fa08 	bl	8009d3c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007936:	2a01      	cmp	r2, #1
 8007938:	d101      	bne.n	800793e <UI_PlanSet+0x66>
 800793a:	2219      	movs	r2, #25
 800793c:	e000      	b.n	8007940 <UI_PlanSet+0x68>
 800793e:	2246      	movs	r2, #70	; 0x46
 8007940:	429a      	cmp	r2, r3
 8007942:	f200 8406 	bhi.w	8008152 <UI_PlanSet+0x87a>

		bt2 = UI_ReadButton();
 8007946:	f7ff f827 	bl	8006998 <UI_ReadButton>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 8007950:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007958:	429a      	cmp	r2, r3
 800795a:	d104      	bne.n	8007966 <UI_PlanSet+0x8e>
 800795c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 83f9 	beq.w	8008158 <UI_PlanSet+0x880>
		bt = bt2;
 8007966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800796a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 800796e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <UI_PlanSet+0xae>
			num = -1;
 800797a:	23ff      	movs	r3, #255	; 0xff
 800797c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return UI_HOMESCREEN;
 8007980:	2302      	movs	r3, #2
 8007982:	f000 bc16 	b.w	80081b2 <UI_PlanSet+0x8da>
		}
		if(num != -1) {
 8007986:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d03e      	beq.n	8007a0e <UI_PlanSet+0x136>
			if(bt & SW_UP_PRESS) {
 8007990:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d012      	beq.n	80079c2 <UI_PlanSet+0xea>
				if(num != 0) num--; else num=12;
 800799c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <UI_PlanSet+0xdc>
 80079a4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079b2:	e002      	b.n	80079ba <UI_PlanSet+0xe2>
 80079b4:	230c      	movs	r3, #12
 80079b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 80079c0:	e7a6      	b.n	8007910 <UI_PlanSet+0x38>
			}
			else if(bt & SW_DW_PRESS) {
 80079c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d012      	beq.n	80079f4 <UI_PlanSet+0x11c>
				if(num != 12) num++; else num=0;
 80079ce:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80079d2:	2b0c      	cmp	r3, #12
 80079d4:	d007      	beq.n	80079e6 <UI_PlanSet+0x10e>
 80079d6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	3301      	adds	r3, #1
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80079e4:	e002      	b.n	80079ec <UI_PlanSet+0x114>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 80079f2:	e78d      	b.n	8007910 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 80079f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <UI_PlanSet+0x136>
				bt_status = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				num = -1;
 8007a06:	23ff      	movs	r3, #255	; 0xff
 8007a08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				goto plan_set;
 8007a0c:	e780      	b.n	8007910 <UI_PlanSet+0x38>
			}
		}
		switch(num) {
 8007a0e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8007a12:	3301      	adds	r3, #1
 8007a14:	2b0d      	cmp	r3, #13
 8007a16:	d887      	bhi.n	8007928 <UI_PlanSet+0x50>
 8007a18:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UI_PlanSet+0x148>)
 8007a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1e:	bf00      	nop
 8007a20:	08007a59 	.word	0x08007a59
 8007a24:	08007bc9 	.word	0x08007bc9
 8007a28:	08007c35 	.word	0x08007c35
 8007a2c:	08007c93 	.word	0x08007c93
 8007a30:	08007cf1 	.word	0x08007cf1
 8007a34:	08007d4f 	.word	0x08007d4f
 8007a38:	08007dbf 	.word	0x08007dbf
 8007a3c:	08007e2f 	.word	0x08007e2f
 8007a40:	08007e8d 	.word	0x08007e8d
 8007a44:	08007eeb 	.word	0x08007eeb
 8007a48:	08007f49 	.word	0x08007f49
 8007a4c:	08007fa7 	.word	0x08007fa7
 8007a50:	08008033 	.word	0x08008033
 8007a54:	080080b5 	.word	0x080080b5
		case -1:
			if(bt & SW_DW_PRESS) {
 8007a58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d010      	beq.n	8007a86 <UI_PlanSet+0x1ae>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8007a64:	7d3b      	ldrb	r3, [r7, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d004      	beq.n	8007a74 <UI_PlanSet+0x19c>
 8007a6a:	7d3b      	ldrb	r3, [r7, #20]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	753b      	strb	r3, [r7, #20]
 8007a72:	e001      	b.n	8007a78 <UI_PlanSet+0x1a0>
 8007a74:	230c      	movs	r3, #12
 8007a76:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007a84:	e744      	b.n	8007910 <UI_PlanSet+0x38>
			}
			else if(bt & SW_UP_PRESS) {
 8007a86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d010      	beq.n	8007ab4 <UI_PlanSet+0x1dc>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8007a92:	7d3b      	ldrb	r3, [r7, #20]
 8007a94:	2b0c      	cmp	r3, #12
 8007a96:	d004      	beq.n	8007aa2 <UI_PlanSet+0x1ca>
 8007a98:	7d3b      	ldrb	r3, [r7, #20]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	753b      	strb	r3, [r7, #20]
 8007aa0:	e001      	b.n	8007aa6 <UI_PlanSet+0x1ce>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007ab2:	e72d      	b.n	8007910 <UI_PlanSet+0x38>
			}
			else if(bt & SW_OK_PRESS) {
 8007ab4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d006      	beq.n	8007ace <UI_PlanSet+0x1f6>
				num = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007acc:	e720      	b.n	8007910 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8007ace:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d012      	beq.n	8007b00 <UI_PlanSet+0x228>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d106      	bne.n	8007af0 <UI_PlanSet+0x218>
 8007ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ae6:	f107 0214 	add.w	r2, r7, #20
 8007aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8007aec:	f7fd fd66 	bl	80055bc <SetAction>
				num = -1;
 8007af0:	23ff      	movs	r3, #255	; 0xff
 8007af2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				return UI_HOMESCREEN;
 8007afc:	2302      	movs	r3, #2
 8007afe:	e358      	b.n	80081b2 <UI_PlanSet+0x8da>
			}
			else if(bt2 & SW_RG_PRESS) {
 8007b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d02b      	beq.n	8007b64 <UI_PlanSet+0x28c>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d106      	bne.n	8007b22 <UI_PlanSet+0x24a>
 8007b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b18:	f107 0214 	add.w	r2, r7, #20
 8007b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b1e:	f7fd fd4d 	bl	80055bc <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8007b22:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <UI_PlanSet+0x328>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d005      	beq.n	8007b3a <UI_PlanSet+0x262>
 8007b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b32:	3301      	adds	r3, #1
 8007b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b38:	e002      	b.n	8007b40 <UI_PlanSet+0x268>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8007b40:	463b      	mov	r3, r7
 8007b42:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b46:	4611      	mov	r1, r2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fcf5 	bl	8005538 <GetAction>
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	463a      	mov	r2, r7
 8007b54:	6810      	ldr	r0, [r2, #0]
 8007b56:	6851      	ldr	r1, [r2, #4]
 8007b58:	6892      	ldr	r2, [r2, #8]
 8007b5a:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007b62:	e6d5      	b.n	8007910 <UI_PlanSet+0x38>
			}
			else if(bt2 & SW_LF_PRESS) {
 8007b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 82f6 	beq.w	800815e <UI_PlanSet+0x886>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d106      	bne.n	8007b88 <UI_PlanSet+0x2b0>
 8007b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b7e:	f107 0214 	add.w	r2, r7, #20
 8007b82:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b84:	f7fd fd1a 	bl	80055bc <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8007b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <UI_PlanSet+0x2c4>
 8007b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b9a:	e003      	b.n	8007ba4 <UI_PlanSet+0x2cc>
 8007b9c:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <UI_PlanSet+0x328>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8007ba4:	463b      	mov	r3, r7
 8007ba6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fd fcc3 	bl	8005538 <GetAction>
 8007bb2:	f107 0314 	add.w	r3, r7, #20
 8007bb6:	463a      	mov	r2, r7
 8007bb8:	6810      	ldr	r0, [r2, #0]
 8007bba:	6851      	ldr	r1, [r2, #4]
 8007bbc:	6892      	ldr	r2, [r2, #8]
 8007bbe:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007bc6:	e6a3      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8007bc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d017      	beq.n	8007c04 <UI_PlanSet+0x32c>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8007bd4:	7d7b      	ldrb	r3, [r7, #21]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <UI_PlanSet+0x30c>
 8007bda:	7d7b      	ldrb	r3, [r7, #21]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	757b      	strb	r3, [r7, #21]
 8007be2:	e001      	b.n	8007be8 <UI_PlanSet+0x310>
 8007be4:	230e      	movs	r3, #14
 8007be6:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007bf4:	e68c      	b.n	8007910 <UI_PlanSet+0x38>
 8007bf6:	bf00      	nop
 8007bf8:	20000cd8 	.word	0x20000cd8
 8007bfc:	20000d60 	.word	0x20000d60
 8007c00:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8007c04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 82a9 	beq.w	8008164 <UI_PlanSet+0x88c>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8007c12:	7d7b      	ldrb	r3, [r7, #21]
 8007c14:	2b0e      	cmp	r3, #14
 8007c16:	d004      	beq.n	8007c22 <UI_PlanSet+0x34a>
 8007c18:	7d7b      	ldrb	r3, [r7, #21]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	757b      	strb	r3, [r7, #21]
 8007c20:	e001      	b.n	8007c26 <UI_PlanSet+0x34e>
 8007c22:	2300      	movs	r3, #0
 8007c24:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c32:	e66d      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8007c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d010      	beq.n	8007c62 <UI_PlanSet+0x38a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8007c40:	7dbb      	ldrb	r3, [r7, #22]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <UI_PlanSet+0x378>
 8007c46:	7dbb      	ldrb	r3, [r7, #22]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	75bb      	strb	r3, [r7, #22]
 8007c4e:	e001      	b.n	8007c54 <UI_PlanSet+0x37c>
 8007c50:	2302      	movs	r3, #2
 8007c52:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c60:	e656      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007c62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 827d 	beq.w	800816a <UI_PlanSet+0x892>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8007c70:	7dbb      	ldrb	r3, [r7, #22]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d004      	beq.n	8007c80 <UI_PlanSet+0x3a8>
 8007c76:	7dbb      	ldrb	r3, [r7, #22]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	75bb      	strb	r3, [r7, #22]
 8007c7e:	e001      	b.n	8007c84 <UI_PlanSet+0x3ac>
 8007c80:	2300      	movs	r3, #0
 8007c82:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c90:	e63e      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8007c92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <UI_PlanSet+0x3e8>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <UI_PlanSet+0x3d6>
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	e001      	b.n	8007cb2 <UI_PlanSet+0x3da>
 8007cae:	23ff      	movs	r3, #255	; 0xff
 8007cb0:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007cbe:	e627      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007cc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8251 	beq.w	8008170 <UI_PlanSet+0x898>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2bff      	cmp	r3, #255	; 0xff
 8007cd2:	d004      	beq.n	8007cde <UI_PlanSet+0x406>
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	75fb      	strb	r3, [r7, #23]
 8007cdc:	e001      	b.n	8007ce2 <UI_PlanSet+0x40a>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007cee:	e60f      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8007cf0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d010      	beq.n	8007d1e <UI_PlanSet+0x446>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8007cfc:	7e3b      	ldrb	r3, [r7, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d004      	beq.n	8007d0c <UI_PlanSet+0x434>
 8007d02:	7e3b      	ldrb	r3, [r7, #24]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	763b      	strb	r3, [r7, #24]
 8007d0a:	e001      	b.n	8007d10 <UI_PlanSet+0x438>
 8007d0c:	23ff      	movs	r3, #255	; 0xff
 8007d0e:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d1c:	e5f8      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007d1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8225 	beq.w	8008176 <UI_PlanSet+0x89e>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 8007d2c:	7e3b      	ldrb	r3, [r7, #24]
 8007d2e:	2bff      	cmp	r3, #255	; 0xff
 8007d30:	d004      	beq.n	8007d3c <UI_PlanSet+0x464>
 8007d32:	7e3b      	ldrb	r3, [r7, #24]
 8007d34:	3301      	adds	r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	763b      	strb	r3, [r7, #24]
 8007d3a:	e001      	b.n	8007d40 <UI_PlanSet+0x468>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d4c:	e5e0      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8007d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d52:	f003 0310 	and.w	r3, r3, #16
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d015      	beq.n	8007d86 <UI_PlanSet+0x4ae>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 8007d5a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007d5e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007d62:	d007      	beq.n	8007d74 <UI_PlanSet+0x49c>
 8007d64:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	b25b      	sxtb	r3, r3
 8007d70:	767b      	strb	r3, [r7, #25]
 8007d72:	e001      	b.n	8007d78 <UI_PlanSet+0x4a0>
 8007d74:	2363      	movs	r3, #99	; 0x63
 8007d76:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d84:	e5c4      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007d86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 81f4 	beq.w	800817c <UI_PlanSet+0x8a4>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8007d94:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007d98:	2b63      	cmp	r3, #99	; 0x63
 8007d9a:	d007      	beq.n	8007dac <UI_PlanSet+0x4d4>
 8007d9c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	3301      	adds	r3, #1
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	767b      	strb	r3, [r7, #25]
 8007daa:	e001      	b.n	8007db0 <UI_PlanSet+0x4d8>
 8007dac:	239d      	movs	r3, #157	; 0x9d
 8007dae:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007dbc:	e5a8      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 8007dbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d015      	beq.n	8007df6 <UI_PlanSet+0x51e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 8007dca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007dce:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007dd2:	d007      	beq.n	8007de4 <UI_PlanSet+0x50c>
 8007dd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	76bb      	strb	r3, [r7, #26]
 8007de2:	e001      	b.n	8007de8 <UI_PlanSet+0x510>
 8007de4:	2363      	movs	r3, #99	; 0x63
 8007de6:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007df4:	e58c      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007df6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 81bf 	beq.w	8008182 <UI_PlanSet+0x8aa>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8007e04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007e08:	2b63      	cmp	r3, #99	; 0x63
 8007e0a:	d007      	beq.n	8007e1c <UI_PlanSet+0x544>
 8007e0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	76bb      	strb	r3, [r7, #26]
 8007e1a:	e001      	b.n	8007e20 <UI_PlanSet+0x548>
 8007e1c:	239d      	movs	r3, #157	; 0x9d
 8007e1e:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e2c:	e570      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 8007e2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e32:	f003 0310 	and.w	r3, r3, #16
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d010      	beq.n	8007e5c <UI_PlanSet+0x584>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 8007e3a:	7efb      	ldrb	r3, [r7, #27]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <UI_PlanSet+0x572>
 8007e40:	7efb      	ldrb	r3, [r7, #27]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	76fb      	strb	r3, [r7, #27]
 8007e48:	e001      	b.n	8007e4e <UI_PlanSet+0x576>
 8007e4a:	23ff      	movs	r3, #255	; 0xff
 8007e4c:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e5a:	e559      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007e5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 818f 	beq.w	8008188 <UI_PlanSet+0x8b0>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 8007e6a:	7efb      	ldrb	r3, [r7, #27]
 8007e6c:	2bff      	cmp	r3, #255	; 0xff
 8007e6e:	d004      	beq.n	8007e7a <UI_PlanSet+0x5a2>
 8007e70:	7efb      	ldrb	r3, [r7, #27]
 8007e72:	3301      	adds	r3, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	76fb      	strb	r3, [r7, #27]
 8007e78:	e001      	b.n	8007e7e <UI_PlanSet+0x5a6>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007e84:	2301      	movs	r3, #1
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e8a:	e541      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 8007e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <UI_PlanSet+0x5e2>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 8007e98:	7f3b      	ldrb	r3, [r7, #28]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <UI_PlanSet+0x5d0>
 8007e9e:	7f3b      	ldrb	r3, [r7, #28]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	773b      	strb	r3, [r7, #28]
 8007ea6:	e001      	b.n	8007eac <UI_PlanSet+0x5d4>
 8007ea8:	23ff      	movs	r3, #255	; 0xff
 8007eaa:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007eb8:	e52a      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007eba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8163 	beq.w	800818e <UI_PlanSet+0x8b6>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 8007ec8:	7f3b      	ldrb	r3, [r7, #28]
 8007eca:	2bff      	cmp	r3, #255	; 0xff
 8007ecc:	d004      	beq.n	8007ed8 <UI_PlanSet+0x600>
 8007ece:	7f3b      	ldrb	r3, [r7, #28]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	773b      	strb	r3, [r7, #28]
 8007ed6:	e001      	b.n	8007edc <UI_PlanSet+0x604>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007ee8:	e512      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 8007eea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d010      	beq.n	8007f18 <UI_PlanSet+0x640>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 8007ef6:	7f7b      	ldrb	r3, [r7, #29]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <UI_PlanSet+0x62e>
 8007efc:	7f7b      	ldrb	r3, [r7, #29]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	777b      	strb	r3, [r7, #29]
 8007f04:	e001      	b.n	8007f0a <UI_PlanSet+0x632>
 8007f06:	23ff      	movs	r3, #255	; 0xff
 8007f08:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007f16:	e4fb      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007f18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8137 	beq.w	8008194 <UI_PlanSet+0x8bc>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 8007f26:	7f7b      	ldrb	r3, [r7, #29]
 8007f28:	2bff      	cmp	r3, #255	; 0xff
 8007f2a:	d004      	beq.n	8007f36 <UI_PlanSet+0x65e>
 8007f2c:	7f7b      	ldrb	r3, [r7, #29]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	777b      	strb	r3, [r7, #29]
 8007f34:	e001      	b.n	8007f3a <UI_PlanSet+0x662>
 8007f36:	2300      	movs	r3, #0
 8007f38:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007f46:	e4e3      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 8007f48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d010      	beq.n	8007f76 <UI_PlanSet+0x69e>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 8007f54:	7fbb      	ldrb	r3, [r7, #30]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <UI_PlanSet+0x68c>
 8007f5a:	7fbb      	ldrb	r3, [r7, #30]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	77bb      	strb	r3, [r7, #30]
 8007f62:	e001      	b.n	8007f68 <UI_PlanSet+0x690>
 8007f64:	23ff      	movs	r3, #255	; 0xff
 8007f66:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007f74:	e4cc      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007f76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 810b 	beq.w	800819a <UI_PlanSet+0x8c2>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 8007f84:	7fbb      	ldrb	r3, [r7, #30]
 8007f86:	2bff      	cmp	r3, #255	; 0xff
 8007f88:	d004      	beq.n	8007f94 <UI_PlanSet+0x6bc>
 8007f8a:	7fbb      	ldrb	r3, [r7, #30]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	77bb      	strb	r3, [r7, #30]
 8007f92:	e001      	b.n	8007f98 <UI_PlanSet+0x6c0>
 8007f94:	2300      	movs	r3, #0
 8007f96:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007fa4:	e4b4      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 8007fa6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007faa:	f003 0310 	and.w	r3, r3, #16
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01d      	beq.n	8007fee <UI_PlanSet+0x716>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 8007fb2:	7ffb      	ldrb	r3, [r7, #31]
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d007      	beq.n	8007fcc <UI_PlanSet+0x6f4>
 8007fbc:	7ffb      	ldrb	r3, [r7, #31]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e009      	b.n	8007fe0 <UI_PlanSet+0x708>
 8007fcc:	7ffb      	ldrb	r3, [r7, #31]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	7ffb      	ldrb	r3, [r7, #31]
 8007fd8:	f043 0302 	orr.w	r3, r3, #2
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007fec:	e490      	b.n	8007910 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007fee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80d2 	beq.w	80081a0 <UI_PlanSet+0x8c8>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8007ffc:	7ffb      	ldrb	r3, [r7, #31]
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d007      	beq.n	8008016 <UI_PlanSet+0x73e>
 8008006:	7ffb      	ldrb	r3, [r7, #31]
 8008008:	3301      	adds	r3, #1
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	b2db      	uxtb	r3, r3
 8008012:	77fb      	strb	r3, [r7, #31]
 8008014:	e006      	b.n	8008024 <UI_PlanSet+0x74c>
 8008016:	7ffb      	ldrb	r3, [r7, #31]
 8008018:	f023 0303 	bic.w	r3, r3, #3
 800801c:	b2db      	uxtb	r3, r3
 800801e:	77fb      	strb	r3, [r7, #31]
 8008020:	7ffb      	ldrb	r3, [r7, #31]
 8008022:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800802a:	2301      	movs	r3, #1
 800802c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8008030:	e46e      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 11:
			if(bt & SW_OK_PRESS) {
 8008032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 80b3 	beq.w	80081a6 <UI_PlanSet+0x8ce>
				DISP_DisplayText(&short_message, "Insert action?");
 8008040:	495e      	ldr	r1, [pc, #376]	; (80081bc <UI_PlanSet+0x8e4>)
 8008042:	485f      	ldr	r0, [pc, #380]	; (80081c0 <UI_PlanSet+0x8e8>)
 8008044:	f7f9 fc24 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 8008048:	f7fe fca6 	bl	8006998 <UI_ReadButton>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008054:	4293      	cmp	r3, r2
 8008056:	d01f      	beq.n	8008098 <UI_PlanSet+0x7c0>
					bt = UI_ReadButton();
 8008058:	f7fe fc9e 	bl	8006998 <UI_ReadButton>
 800805c:	4603      	mov	r3, r0
 800805e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8008062:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00d      	beq.n	800808a <UI_PlanSet+0x7b2>
						DISP_DisplayText(&short_message, "Inserting");
 800806e:	4955      	ldr	r1, [pc, #340]	; (80081c4 <UI_PlanSet+0x8ec>)
 8008070:	4853      	ldr	r0, [pc, #332]	; (80081c0 <UI_PlanSet+0x8e8>)
 8008072:	f7f9 fc0d 	bl	8001890 <DISP_DisplayText>
						Storage_InsertAction(num_index);
 8008076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd ff10 	bl	8005ea0 <Storage_InsertAction>
						DISP_DisplayText(&short_message, "Insert Done!");
 8008080:	4951      	ldr	r1, [pc, #324]	; (80081c8 <UI_PlanSet+0x8f0>)
 8008082:	484f      	ldr	r0, [pc, #316]	; (80081c0 <UI_PlanSet+0x8e8>)
 8008084:	f7f9 fc04 	bl	8001890 <DISP_DisplayText>
						break;
 8008088:	e009      	b.n	800809e <UI_PlanSet+0x7c6>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 800808a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <UI_PlanSet+0x7c4>
 8008096:	e7d7      	b.n	8008048 <UI_PlanSet+0x770>
					if(bt == UI_ReadButton()) continue;
 8008098:	bf00      	nop
 800809a:	e7d5      	b.n	8008048 <UI_PlanSet+0x770>
						break;
 800809c:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 800809e:	494b      	ldr	r1, [pc, #300]	; (80081cc <UI_PlanSet+0x8f4>)
 80080a0:	484b      	ldr	r0, [pc, #300]	; (80081d0 <UI_PlanSet+0x8f8>)
 80080a2:	f7f9 fbf5 	bl	8001890 <DISP_DisplayText>
				bt_status = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80080b2:	e42d      	b.n	8007910 <UI_PlanSet+0x38>
			}
			break;
		case 12:
			if(bt & SW_OK_PRESS) {
 80080b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d075      	beq.n	80081ac <UI_PlanSet+0x8d4>
				DISP_DisplayText(&short_message, "Delete this action?");
 80080c0:	4944      	ldr	r1, [pc, #272]	; (80081d4 <UI_PlanSet+0x8fc>)
 80080c2:	483f      	ldr	r0, [pc, #252]	; (80081c0 <UI_PlanSet+0x8e8>)
 80080c4:	f7f9 fbe4 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80080c8:	f7fe fc66 	bl	8006998 <UI_ReadButton>
 80080cc:	4603      	mov	r3, r0
 80080ce:	461a      	mov	r2, r3
 80080d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d02d      	beq.n	8008134 <UI_PlanSet+0x85c>
					bt = UI_ReadButton();
 80080d8:	f7fe fc5e 	bl	8006998 <UI_ReadButton>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 80080e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01b      	beq.n	8008126 <UI_PlanSet+0x84e>
						DISP_DisplayText(&short_message, "Deleting");
 80080ee:	493a      	ldr	r1, [pc, #232]	; (80081d8 <UI_PlanSet+0x900>)
 80080f0:	4833      	ldr	r0, [pc, #204]	; (80081c0 <UI_PlanSet+0x8e8>)
 80080f2:	f7f9 fbcd 	bl	8001890 <DISP_DisplayText>
						Storage_DeleteAction(num_index);
 80080f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fd fefc 	bl	8005ef8 <Storage_DeleteAction>
						DISP_DisplayText(&short_message, "Delete Done!");
 8008100:	4936      	ldr	r1, [pc, #216]	; (80081dc <UI_PlanSet+0x904>)
 8008102:	482f      	ldr	r0, [pc, #188]	; (80081c0 <UI_PlanSet+0x8e8>)
 8008104:	f7f9 fbc4 	bl	8001890 <DISP_DisplayText>
						plan_set = GetAction(num_index);
 8008108:	463b      	mov	r3, r7
 800810a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800810e:	4611      	mov	r1, r2
 8008110:	4618      	mov	r0, r3
 8008112:	f7fd fa11 	bl	8005538 <GetAction>
 8008116:	f107 0314 	add.w	r3, r7, #20
 800811a:	463a      	mov	r2, r7
 800811c:	6810      	ldr	r0, [r2, #0]
 800811e:	6851      	ldr	r1, [r2, #4]
 8008120:	6892      	ldr	r2, [r2, #8]
 8008122:	c307      	stmia	r3!, {r0, r1, r2}
						break;
 8008124:	e009      	b.n	800813a <UI_PlanSet+0x862>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8008126:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d102      	bne.n	8008138 <UI_PlanSet+0x860>
 8008132:	e7c9      	b.n	80080c8 <UI_PlanSet+0x7f0>
					if(bt == UI_ReadButton()) continue;
 8008134:	bf00      	nop
 8008136:	e7c7      	b.n	80080c8 <UI_PlanSet+0x7f0>
						break;
 8008138:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 800813a:	4924      	ldr	r1, [pc, #144]	; (80081cc <UI_PlanSet+0x8f4>)
 800813c:	4824      	ldr	r0, [pc, #144]	; (80081d0 <UI_PlanSet+0x8f8>)
 800813e:	f7f9 fba7 	bl	8001890 <DISP_DisplayText>
				bt_status = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800814e:	f7ff bbdf 	b.w	8007910 <UI_PlanSet+0x38>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8008152:	bf00      	nop
 8008154:	f7ff bbe8 	b.w	8007928 <UI_PlanSet+0x50>
		if(bt == bt2 && bt_status == 0) continue;
 8008158:	bf00      	nop
 800815a:	f7ff bbe5 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 800815e:	bf00      	nop
 8008160:	f7ff bbe2 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 8008164:	bf00      	nop
 8008166:	f7ff bbdf 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 800816a:	bf00      	nop
 800816c:	f7ff bbdc 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 8008170:	bf00      	nop
 8008172:	f7ff bbd9 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 8008176:	bf00      	nop
 8008178:	f7ff bbd6 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 800817c:	bf00      	nop
 800817e:	f7ff bbd3 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 8008182:	bf00      	nop
 8008184:	f7ff bbd0 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 8008188:	bf00      	nop
 800818a:	f7ff bbcd 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 800818e:	bf00      	nop
 8008190:	f7ff bbca 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 8008194:	bf00      	nop
 8008196:	f7ff bbc7 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 800819a:	bf00      	nop
 800819c:	f7ff bbc4 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 80081a0:	bf00      	nop
 80081a2:	f7ff bbc1 	b.w	8007928 <UI_PlanSet+0x50>
			break;
 80081a6:	bf00      	nop
 80081a8:	f7ff bbbe 	b.w	8007928 <UI_PlanSet+0x50>
			}
			break;
 80081ac:	bf00      	nop
 80081ae:	f7ff bbbb 	b.w	8007928 <UI_PlanSet+0x50>
		}
	}
	return UI_IDLE;
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3730      	adds	r7, #48	; 0x30
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	0801220c 	.word	0x0801220c
 80081c0:	20000efc 	.word	0x20000efc
 80081c4:	0801221c 	.word	0x0801221c
 80081c8:	08012228 	.word	0x08012228
 80081cc:	08012200 	.word	0x08012200
 80081d0:	20000f04 	.word	0x20000f04
 80081d4:	08012238 	.word	0x08012238
 80081d8:	0801224c 	.word	0x0801224c
 80081dc:	08012258 	.word	0x08012258

080081e0 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 80081e4:	4b24      	ldr	r3, [pc, #144]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 80081e6:	2204      	movs	r2, #4
 80081e8:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 80081ec:	2232      	movs	r2, #50	; 0x32
 80081ee:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 80081f0:	4b21      	ldr	r3, [pc, #132]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 80081f2:	223a      	movs	r2, #58	; 0x3a
 80081f4:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 80081f8:	220b      	movs	r2, #11
 80081fa:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 80081fc:	4b1e      	ldr	r3, [pc, #120]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 80081fe:	2201      	movs	r2, #1
 8008200:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 8008204:	2202      	movs	r2, #2
 8008206:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 8008208:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 800820a:	2202      	movs	r2, #2
 800820c:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 800820e:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 8008212:	3307      	adds	r3, #7
 8008214:	6810      	ldr	r0, [r2, #0]
 8008216:	6018      	str	r0, [r3, #0]
 8008218:	8891      	ldrh	r1, [r2, #4]
 800821a:	7992      	ldrb	r2, [r2, #6]
 800821c:	8099      	strh	r1, [r3, #4]
 800821e:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 8008222:	223f      	movs	r2, #63	; 0x3f
 8008224:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 8008226:	4b14      	ldr	r3, [pc, #80]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 8008228:	223c      	movs	r2, #60	; 0x3c
 800822a:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 800822c:	4b12      	ldr	r3, [pc, #72]	; (8008278 <UI_ADCThresholdDisplayInit+0x98>)
 800822e:	2200      	movs	r2, #0
 8008230:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 800823a:	2200      	movs	r2, #0
 800823c:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 8008240:	227f      	movs	r2, #127	; 0x7f
 8008242:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 8008246:	220a      	movs	r2, #10
 8008248:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 800824c:	2201      	movs	r2, #1
 800824e:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 8008250:	4b0a      	ldr	r3, [pc, #40]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 8008252:	2202      	movs	r2, #2
 8008254:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <UI_ADCThresholdDisplayInit+0x9c>)
 8008258:	2202      	movs	r2, #2
 800825a:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <UI_ADCThresholdDisplayInit+0xa0>)
 800825e:	2220      	movs	r2, #32
 8008260:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <UI_ADCThresholdDisplayInit+0xa0>)
 8008264:	2206      	movs	r2, #6
 8008266:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <UI_ADCThresholdDisplayInit+0xa0>)
 800826a:	2202      	movs	r2, #2
 800826c:	715a      	strb	r2, [r3, #5]

}
 800826e:	bf00      	nop
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	20000f94 	.word	0x20000f94
 800827c:	20000fa4 	.word	0x20000fa4
 8008280:	20000fac 	.word	0x20000fac

08008284 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 800828e:	4b2d      	ldr	r3, [pc, #180]	; (8008344 <UI_ADCThresholdDisplay+0xc0>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	79fa      	ldrb	r2, [r7, #7]
 8008294:	429a      	cmp	r2, r3
 8008296:	d03e      	beq.n	8008316 <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	f107 0310 	add.w	r3, r7, #16
 80082a0:	4929      	ldr	r1, [pc, #164]	; (8008348 <UI_ADCThresholdDisplay+0xc4>)
 80082a2:	4618      	mov	r0, r3
 80082a4:	f007 fbd0 	bl	800fa48 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	4619      	mov	r1, r3
 80082ae:	4827      	ldr	r0, [pc, #156]	; (800834c <UI_ADCThresholdDisplay+0xc8>)
 80082b0:	f7f9 faee 	bl	8001890 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80082b4:	4b23      	ldr	r3, [pc, #140]	; (8008344 <UI_ADCThresholdDisplay+0xc0>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	00d2      	lsls	r2, r2, #3
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	4b23      	ldr	r3, [pc, #140]	; (8008350 <UI_ADCThresholdDisplay+0xcc>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	4413      	add	r3, r2
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 80082ce:	2320      	movs	r3, #32
 80082d0:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 80082d2:	4a20      	ldr	r2, [pc, #128]	; (8008354 <UI_ADCThresholdDisplay+0xd0>)
 80082d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d8:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	4619      	mov	r1, r3
 80082e0:	481c      	ldr	r0, [pc, #112]	; (8008354 <UI_ADCThresholdDisplay+0xd0>)
 80082e2:	f7f9 fad5 	bl	8001890 <DISP_DisplayText>

		point[0] = '~'+2;
 80082e6:	2380      	movs	r3, #128	; 0x80
 80082e8:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	461a      	mov	r2, r3
 80082ee:	00d2      	lsls	r2, r2, #3
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	4b16      	ldr	r3, [pc, #88]	; (8008350 <UI_ADCThresholdDisplay+0xcc>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	4413      	add	r3, r2
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	4b14      	ldr	r3, [pc, #80]	; (8008354 <UI_ADCThresholdDisplay+0xd0>)
 8008302:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 8008304:	f107 030c 	add.w	r3, r7, #12
 8008308:	4619      	mov	r1, r3
 800830a:	4812      	ldr	r0, [pc, #72]	; (8008354 <UI_ADCThresholdDisplay+0xd0>)
 800830c:	f7f9 fac0 	bl	8001890 <DISP_DisplayText>

		last_num = num;
 8008310:	4a0c      	ldr	r2, [pc, #48]	; (8008344 <UI_ADCThresholdDisplay+0xc0>)
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	f1c3 030d 	rsb	r3, r3, #13
 800831c:	4a0e      	ldr	r2, [pc, #56]	; (8008358 <UI_ADCThresholdDisplay+0xd4>)
 800831e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008322:	461a      	mov	r2, r3
 8008324:	f107 0310 	add.w	r3, r7, #16
 8008328:	490c      	ldr	r1, [pc, #48]	; (800835c <UI_ADCThresholdDisplay+0xd8>)
 800832a:	4618      	mov	r0, r3
 800832c:	f007 fb8c 	bl	800fa48 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	4619      	mov	r1, r3
 8008336:	480a      	ldr	r0, [pc, #40]	; (8008360 <UI_ADCThresholdDisplay+0xdc>)
 8008338:	f7f9 faaa 	bl	8001890 <DISP_DisplayText>

}
 800833c:	bf00      	nop
 800833e:	3728      	adds	r7, #40	; 0x28
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000320 	.word	0x20000320
 8008348:	08012268 	.word	0x08012268
 800834c:	20000fa4 	.word	0x20000fa4
 8008350:	20000290 	.word	0x20000290
 8008354:	20000fac 	.word	0x20000fac
 8008358:	20000b80 	.word	0x20000b80
 800835c:	08012274 	.word	0x08012274
 8008360:	20000f94 	.word	0x20000f94

08008364 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 8008376:	f7fd fa91 	bl	800589c <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 800837a:	7f7b      	ldrb	r3, [r7, #29]
 800837c:	3301      	adds	r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff ff7f 	bl	8008284 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 8008386:	7f7b      	ldrb	r3, [r7, #29]
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff ff7b 	bl	8008284 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 800838e:	f001 fcd5 	bl	8009d3c <HAL_GetTick>
 8008392:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8008394:	7f7b      	ldrb	r3, [r7, #29]
 8008396:	f1c3 030d 	rsb	r3, r3, #13
 800839a:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 800839c:	f7fe fa7e 	bl	800689c <UI_ShowSensor>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 80083a6:	7f3b      	ldrb	r3, [r7, #28]
 80083a8:	4a52      	ldr	r2, [pc, #328]	; (80084f4 <UI_ADCThreshold+0x190>)
 80083aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ae:	461a      	mov	r2, r3
 80083b0:	463b      	mov	r3, r7
 80083b2:	4951      	ldr	r1, [pc, #324]	; (80084f8 <UI_ADCThreshold+0x194>)
 80083b4:	4618      	mov	r0, r3
 80083b6:	f007 fb47 	bl	800fa48 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 80083ba:	463b      	mov	r3, r7
 80083bc:	4619      	mov	r1, r3
 80083be:	484f      	ldr	r0, [pc, #316]	; (80084fc <UI_ADCThreshold+0x198>)
 80083c0:	f7f9 fa66 	bl	8001890 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 80083c4:	f001 fcba 	bl	8009d3c <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	7fba      	ldrb	r2, [r7, #30]
 80083d0:	2a01      	cmp	r2, #1
 80083d2:	d101      	bne.n	80083d8 <UI_ADCThreshold+0x74>
 80083d4:	2214      	movs	r2, #20
 80083d6:	e000      	b.n	80083da <UI_ADCThreshold+0x76>
 80083d8:	2246      	movs	r2, #70	; 0x46
 80083da:	429a      	cmp	r2, r3
 80083dc:	f200 8081 	bhi.w	80084e2 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 80083e0:	f7fe fada 	bl	8006998 <UI_ReadButton>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 80083e8:	7ffa      	ldrb	r2, [r7, #31]
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d102      	bne.n	80083f6 <UI_ADCThreshold+0x92>
 80083f0:	7fbb      	ldrb	r3, [r7, #30]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d077      	beq.n	80084e6 <UI_ADCThreshold+0x182>
		bt = bt2;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 80083fa:	7ffb      	ldrb	r3, [r7, #31]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <UI_ADCThreshold+0xa8>
			num_sen = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 8008408:	2302      	movs	r3, #2
 800840a:	e06e      	b.n	80084ea <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 800840c:	7ffb      	ldrb	r3, [r7, #31]
 800840e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 8008416:	f7fd fa65 	bl	80058e4 <Storage_SetADCThreshold>
			num_sen = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 800841e:	2307      	movs	r3, #7
 8008420:	e063      	b.n	80084ea <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 8008422:	7ffb      	ldrb	r3, [r7, #31]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 800842c:	7f7b      	ldrb	r3, [r7, #29]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <UI_ADCThreshold+0xd6>
 8008432:	7f7b      	ldrb	r3, [r7, #29]
 8008434:	3b01      	subs	r3, #1
 8008436:	777b      	strb	r3, [r7, #29]
 8008438:	e001      	b.n	800843e <UI_ADCThreshold+0xda>
 800843a:	230d      	movs	r3, #13
 800843c:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008442:	e7a0      	b.n	8008386 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 8008444:	7ffb      	ldrb	r3, [r7, #31]
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 800844e:	7f7b      	ldrb	r3, [r7, #29]
 8008450:	2b0d      	cmp	r3, #13
 8008452:	d003      	beq.n	800845c <UI_ADCThreshold+0xf8>
 8008454:	7f7b      	ldrb	r3, [r7, #29]
 8008456:	3301      	adds	r3, #1
 8008458:	777b      	strb	r3, [r7, #29]
 800845a:	e001      	b.n	8008460 <UI_ADCThreshold+0xfc>
 800845c:	2300      	movs	r3, #0
 800845e:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008464:	e78f      	b.n	8008386 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 8008466:	7ffb      	ldrb	r3, [r7, #31]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d018      	beq.n	80084a2 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 8008470:	7f3b      	ldrb	r3, [r7, #28]
 8008472:	4a23      	ldr	r2, [pc, #140]	; (8008500 <UI_ADCThreshold+0x19c>)
 8008474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d009      	beq.n	8008490 <UI_ADCThreshold+0x12c>
 800847c:	7f3b      	ldrb	r3, [r7, #28]
 800847e:	4a20      	ldr	r2, [pc, #128]	; (8008500 <UI_ADCThreshold+0x19c>)
 8008480:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008484:	3a01      	subs	r2, #1
 8008486:	b291      	uxth	r1, r2
 8008488:	4a1d      	ldr	r2, [pc, #116]	; (8008500 <UI_ADCThreshold+0x19c>)
 800848a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800848e:	e005      	b.n	800849c <UI_ADCThreshold+0x138>
 8008490:	7f3b      	ldrb	r3, [r7, #28]
 8008492:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <UI_ADCThreshold+0x19c>)
 8008494:	f640 71ff 	movw	r1, #4095	; 0xfff
 8008498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 800849c:	2301      	movs	r3, #1
 800849e:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80084a0:	e771      	b.n	8008386 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 80084a2:	7ffb      	ldrb	r3, [r7, #31]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f43f af73 	beq.w	8008394 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 80084ae:	7f3b      	ldrb	r3, [r7, #28]
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <UI_ADCThreshold+0x19c>)
 80084b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d009      	beq.n	80084d2 <UI_ADCThreshold+0x16e>
 80084be:	7f3b      	ldrb	r3, [r7, #28]
 80084c0:	4a0f      	ldr	r2, [pc, #60]	; (8008500 <UI_ADCThreshold+0x19c>)
 80084c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80084c6:	3201      	adds	r2, #1
 80084c8:	b291      	uxth	r1, r2
 80084ca:	4a0d      	ldr	r2, [pc, #52]	; (8008500 <UI_ADCThreshold+0x19c>)
 80084cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80084d0:	e004      	b.n	80084dc <UI_ADCThreshold+0x178>
 80084d2:	7f3b      	ldrb	r3, [r7, #28]
 80084d4:	4a0a      	ldr	r2, [pc, #40]	; (8008500 <UI_ADCThreshold+0x19c>)
 80084d6:	2100      	movs	r1, #0
 80084d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 80084dc:	2301      	movs	r3, #1
 80084de:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80084e0:	e751      	b.n	8008386 <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 80084e2:	bf00      	nop
 80084e4:	e756      	b.n	8008394 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 80084e6:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 80084e8:	e754      	b.n	8008394 <UI_ADCThreshold+0x30>
		}
	}
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000b64 	.word	0x20000b64
 80084f8:	0801227c 	.word	0x0801227c
 80084fc:	20000f9b 	.word	0x20000f9b
 8008500:	20000b80 	.word	0x20000b80

08008504 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 800850a:	f7fe fa45 	bl	8006998 <UI_ReadButton>
 800850e:	4603      	mov	r3, r0
 8008510:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 8008512:	f7fc fe67 	bl	80051e4 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 8008516:	f7fe f9c1 	bl	800689c <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 800851a:	f7fe fa3d 	bl	8006998 <UI_ReadButton>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	4293      	cmp	r3, r2
 8008526:	d02a      	beq.n	800857e <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 8008528:	f7fe fa36 	bl	8006998 <UI_ReadButton>
 800852c:	4603      	mov	r3, r0
 800852e:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 800853a:	2000      	movs	r0, #0
 800853c:	f7fc fee4 	bl	8005308 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 8008540:	2302      	movs	r3, #2
 8008542:	e01e      	b.n	8008582 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 800854e:	2000      	movs	r0, #0
 8008550:	f7fc feda 	bl	8005308 <SEN_EndAutoCalibration>
			return UI_SET;
 8008554:	2307      	movs	r3, #7
 8008556:	e014      	b.n	8008582 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0d9      	beq.n	8008516 <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 8008562:	2001      	movs	r0, #1
 8008564:	f7fc fed0 	bl	8005308 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 8008568:	4908      	ldr	r1, [pc, #32]	; (800858c <UI_AutoCalib+0x88>)
 800856a:	4809      	ldr	r0, [pc, #36]	; (8008590 <UI_AutoCalib+0x8c>)
 800856c:	f7f9 f990 	bl	8001890 <DISP_DisplayText>
			Storage_SetADCThreshold();
 8008570:	f7fd f9b8 	bl	80058e4 <Storage_SetADCThreshold>
			HAL_Delay(200);
 8008574:	20c8      	movs	r0, #200	; 0xc8
 8008576:	f001 fbed 	bl	8009d54 <HAL_Delay>
			return UI_SET;
 800857a:	2307      	movs	r3, #7
 800857c:	e001      	b.n	8008582 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 800857e:	bf00      	nop
		UI_ShowSensor();
 8008580:	e7c9      	b.n	8008516 <UI_AutoCalib+0x12>
		}
	}
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	08012284 	.word	0x08012284
 8008590:	20000efc 	.word	0x20000efc

08008594 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 800859a:	4b5e      	ldr	r3, [pc, #376]	; (8008714 <UI_Startup+0x180>)
 800859c:	2209      	movs	r2, #9
 800859e:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 80085a0:	f001 fbcc 	bl	8009d3c <HAL_GetTick>
 80085a4:	4603      	mov	r3, r0
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	463b      	mov	r3, r7
 80085ac:	495a      	ldr	r1, [pc, #360]	; (8008718 <UI_Startup+0x184>)
 80085ae:	4618      	mov	r0, r3
 80085b0:	f007 fa4a 	bl	800fa48 <siprintf>
	DISP_DisplayText(&startup, buff);
 80085b4:	463b      	mov	r3, r7
 80085b6:	4619      	mov	r1, r3
 80085b8:	4856      	ldr	r0, [pc, #344]	; (8008714 <UI_Startup+0x180>)
 80085ba:	f7f9 f969 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80085be:	4b55      	ldr	r3, [pc, #340]	; (8008714 <UI_Startup+0x180>)
 80085c0:	785a      	ldrb	r2, [r3, #1]
 80085c2:	4b54      	ldr	r3, [pc, #336]	; (8008714 <UI_Startup+0x180>)
 80085c4:	791b      	ldrb	r3, [r3, #4]
 80085c6:	4413      	add	r3, r2
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	4b52      	ldr	r3, [pc, #328]	; (8008714 <UI_Startup+0x180>)
 80085cc:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 80085ce:	2001      	movs	r0, #1
 80085d0:	f001 fbc0 	bl	8009d54 <HAL_Delay>
	if(!Storage_Init()) {
 80085d4:	f7fd f8fc 	bl	80057d0 <Storage_Init>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d11d      	bne.n	800861a <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 80085de:	f001 fbad 	bl	8009d3c <HAL_GetTick>
 80085e2:	4603      	mov	r3, r0
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	461a      	mov	r2, r3
 80085e8:	463b      	mov	r3, r7
 80085ea:	494c      	ldr	r1, [pc, #304]	; (800871c <UI_Startup+0x188>)
 80085ec:	4618      	mov	r0, r3
 80085ee:	f007 fa2b 	bl	800fa48 <siprintf>
		DISP_DisplayText(&startup, buff);
 80085f2:	463b      	mov	r3, r7
 80085f4:	4619      	mov	r1, r3
 80085f6:	4847      	ldr	r0, [pc, #284]	; (8008714 <UI_Startup+0x180>)
 80085f8:	f7f9 f94a 	bl	8001890 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 80085fc:	4b45      	ldr	r3, [pc, #276]	; (8008714 <UI_Startup+0x180>)
 80085fe:	785a      	ldrb	r2, [r3, #1]
 8008600:	4b44      	ldr	r3, [pc, #272]	; (8008714 <UI_Startup+0x180>)
 8008602:	791b      	ldrb	r3, [r3, #4]
 8008604:	4413      	add	r3, r2
 8008606:	b2da      	uxtb	r2, r3
 8008608:	4b42      	ldr	r3, [pc, #264]	; (8008714 <UI_Startup+0x180>)
 800860a:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 800860c:	f7fd f892 	bl	8005734 <Storage_ResetMemory>
		} while(!Storage_Init());
 8008610:	f7fd f8de 	bl	80057d0 <Storage_Init>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0f8      	beq.n	800860c <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 800861a:	f001 fb8f 	bl	8009d3c <HAL_GetTick>
 800861e:	4603      	mov	r3, r0
 8008620:	b29b      	uxth	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	463b      	mov	r3, r7
 8008626:	493e      	ldr	r1, [pc, #248]	; (8008720 <UI_Startup+0x18c>)
 8008628:	4618      	mov	r0, r3
 800862a:	f007 fa0d 	bl	800fa48 <siprintf>
	DISP_DisplayText(&startup, buff);
 800862e:	463b      	mov	r3, r7
 8008630:	4619      	mov	r1, r3
 8008632:	4838      	ldr	r0, [pc, #224]	; (8008714 <UI_Startup+0x180>)
 8008634:	f7f9 f92c 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8008638:	4b36      	ldr	r3, [pc, #216]	; (8008714 <UI_Startup+0x180>)
 800863a:	785a      	ldrb	r2, [r3, #1]
 800863c:	4b35      	ldr	r3, [pc, #212]	; (8008714 <UI_Startup+0x180>)
 800863e:	791b      	ldrb	r3, [r3, #4]
 8008640:	4413      	add	r3, r2
 8008642:	b2da      	uxtb	r2, r3
 8008644:	4b33      	ldr	r3, [pc, #204]	; (8008714 <UI_Startup+0x180>)
 8008646:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 8008648:	f001 fb78 	bl	8009d3c <HAL_GetTick>
 800864c:	4603      	mov	r3, r0
 800864e:	b29b      	uxth	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	463b      	mov	r3, r7
 8008654:	4933      	ldr	r1, [pc, #204]	; (8008724 <UI_Startup+0x190>)
 8008656:	4618      	mov	r0, r3
 8008658:	f007 f9f6 	bl	800fa48 <siprintf>
	DISP_DisplayText(&startup, buff);
 800865c:	463b      	mov	r3, r7
 800865e:	4619      	mov	r1, r3
 8008660:	482c      	ldr	r0, [pc, #176]	; (8008714 <UI_Startup+0x180>)
 8008662:	f7f9 f915 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8008666:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <UI_Startup+0x180>)
 8008668:	785a      	ldrb	r2, [r3, #1]
 800866a:	4b2a      	ldr	r3, [pc, #168]	; (8008714 <UI_Startup+0x180>)
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4413      	add	r3, r2
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4b28      	ldr	r3, [pc, #160]	; (8008714 <UI_Startup+0x180>)
 8008674:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8008676:	2001      	movs	r0, #1
 8008678:	f001 fb6c 	bl	8009d54 <HAL_Delay>
	if(!Storage_PlanInit()) {
 800867c:	f7fd f8e0 	bl	8005840 <Storage_PlanInit>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d11d      	bne.n	80086c2 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 8008686:	f001 fb59 	bl	8009d3c <HAL_GetTick>
 800868a:	4603      	mov	r3, r0
 800868c:	b29b      	uxth	r3, r3
 800868e:	461a      	mov	r2, r3
 8008690:	463b      	mov	r3, r7
 8008692:	4925      	ldr	r1, [pc, #148]	; (8008728 <UI_Startup+0x194>)
 8008694:	4618      	mov	r0, r3
 8008696:	f007 f9d7 	bl	800fa48 <siprintf>
		DISP_DisplayText(&startup, buff);
 800869a:	463b      	mov	r3, r7
 800869c:	4619      	mov	r1, r3
 800869e:	481d      	ldr	r0, [pc, #116]	; (8008714 <UI_Startup+0x180>)
 80086a0:	f7f9 f8f6 	bl	8001890 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 80086a4:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <UI_Startup+0x180>)
 80086a6:	785a      	ldrb	r2, [r3, #1]
 80086a8:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <UI_Startup+0x180>)
 80086aa:	791b      	ldrb	r3, [r3, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	4b18      	ldr	r3, [pc, #96]	; (8008714 <UI_Startup+0x180>)
 80086b2:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 80086b4:	f7fc ffc2 	bl	800563c <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 80086b8:	f7fd f8c2 	bl	8005840 <Storage_PlanInit>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f8      	beq.n	80086b4 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 80086c2:	4b1a      	ldr	r3, [pc, #104]	; (800872c <UI_Startup+0x198>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fd f930 	bl	800592c <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 80086cc:	f001 fb36 	bl	8009d3c <HAL_GetTick>
 80086d0:	4603      	mov	r3, r0
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	463b      	mov	r3, r7
 80086d8:	4915      	ldr	r1, [pc, #84]	; (8008730 <UI_Startup+0x19c>)
 80086da:	4618      	mov	r0, r3
 80086dc:	f007 f9b4 	bl	800fa48 <siprintf>
	DISP_DisplayText(&startup, buff);
 80086e0:	463b      	mov	r3, r7
 80086e2:	4619      	mov	r1, r3
 80086e4:	480b      	ldr	r0, [pc, #44]	; (8008714 <UI_Startup+0x180>)
 80086e6:	f7f9 f8d3 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <UI_Startup+0x180>)
 80086ec:	785a      	ldrb	r2, [r3, #1]
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <UI_Startup+0x180>)
 80086f0:	791b      	ldrb	r3, [r3, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4b07      	ldr	r3, [pc, #28]	; (8008714 <UI_Startup+0x180>)
 80086f8:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 80086fa:	bf00      	nop
 80086fc:	f7fe f94c 	bl	8006998 <UI_ReadButton>
 8008700:	4603      	mov	r3, r0
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f8      	bne.n	80086fc <UI_Startup+0x168>

	return UI_HOMESCREEN;
 800870a:	2302      	movs	r3, #2
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20000fb4 	.word	0x20000fb4
 8008718:	08012290 	.word	0x08012290
 800871c:	080122a4 	.word	0x080122a4
 8008720:	080122b8 	.word	0x080122b8
 8008724:	080122c8 	.word	0x080122c8
 8008728:	080122dc 	.word	0x080122dc
 800872c:	20000cd5 	.word	0x20000cd5
 8008730:	080122f0 	.word	0x080122f0

08008734 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 800873a:	4b2f      	ldr	r3, [pc, #188]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 800873c:	2203      	movs	r2, #3
 800873e:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 8008740:	4b2d      	ldr	r3, [pc, #180]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 8008742:	220d      	movs	r2, #13
 8008744:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 8008746:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 8008748:	2278      	movs	r2, #120	; 0x78
 800874a:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 800874c:	4b2a      	ldr	r3, [pc, #168]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 800874e:	220b      	movs	r2, #11
 8008750:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 8008752:	4b29      	ldr	r3, [pc, #164]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 8008754:	2200      	movs	r2, #0
 8008756:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 8008758:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 800875a:	2202      	movs	r2, #2
 800875c:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 800875e:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 8008760:	2202      	movs	r2, #2
 8008762:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8008764:	2301      	movs	r3, #1
 8008766:	607b      	str	r3, [r7, #4]
 8008768:	e027      	b.n	80087ba <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 800876a:	4923      	ldr	r1, [pc, #140]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	1a9b      	subs	r3, r3, r2
 8008774:	440b      	add	r3, r1
 8008776:	4a20      	ldr	r2, [pc, #128]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 8008778:	6810      	ldr	r0, [r2, #0]
 800877a:	6018      	str	r0, [r3, #0]
 800877c:	8891      	ldrh	r1, [r2, #4]
 800877e:	7992      	ldrb	r2, [r2, #6]
 8008780:	8099      	strh	r1, [r3, #4]
 8008782:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	1e5a      	subs	r2, r3, #1
 8008788:	491b      	ldr	r1, [pc, #108]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 800878a:	4613      	mov	r3, r2
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	440b      	add	r3, r1
 8008792:	3301      	adds	r3, #1
 8008794:	781a      	ldrb	r2, [r3, #0]
 8008796:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 8008798:	791b      	ldrb	r3, [r3, #4]
 800879a:	4413      	add	r3, r2
 800879c:	b2db      	uxtb	r3, r3
 800879e:	3302      	adds	r3, #2
 80087a0:	b2d8      	uxtb	r0, r3
 80087a2:	4915      	ldr	r1, [pc, #84]	; (80087f8 <UI_CPDisplayInit+0xc4>)
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	440b      	add	r3, r1
 80087ae:	3301      	adds	r3, #1
 80087b0:	4602      	mov	r2, r0
 80087b2:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3301      	adds	r3, #1
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	ddd4      	ble.n	800876a <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 80087c0:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 80087cc:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087ce:	227f      	movs	r2, #127	; 0x7f
 80087d0:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 80087d2:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087d4:	220a      	movs	r2, #10
 80087d6:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 80087d8:	4b08      	ldr	r3, [pc, #32]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087da:	2201      	movs	r2, #1
 80087dc:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 80087de:	4b07      	ldr	r3, [pc, #28]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087e0:	2202      	movs	r2, #2
 80087e2:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <UI_CPDisplayInit+0xc8>)
 80087e6:	2202      	movs	r2, #2
 80087e8:	719a      	strb	r2, [r3, #6]
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000fbc 	.word	0x20000fbc
 80087fc:	20000fd8 	.word	0x20000fd8

08008800 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	; 0x28
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	6039      	str	r1, [r7, #0]
 800880a:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	4a31      	ldr	r2, [pc, #196]	; (80088d4 <UI_CPDisplay+0xd4>)
 8008810:	f992 2000 	ldrsb.w	r2, [r2]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	2b03      	cmp	r3, #3
 8008818:	dd06      	ble.n	8008828 <UI_CPDisplay+0x28>
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	3b03      	subs	r3, #3
 800881e:	b2db      	uxtb	r3, r3
 8008820:	b25a      	sxtb	r2, r3
 8008822:	4b2c      	ldr	r3, [pc, #176]	; (80088d4 <UI_CPDisplay+0xd4>)
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e009      	b.n	800883c <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <UI_CPDisplay+0xd4>)
 800882c:	f992 2000 	ldrsb.w	r2, [r2]
 8008830:	4293      	cmp	r3, r2
 8008832:	da03      	bge.n	800883c <UI_CPDisplay+0x3c>
 8008834:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008838:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <UI_CPDisplay+0xd4>)
 800883a:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800883c:	2300      	movs	r3, #0
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
 8008840:	e03f      	b.n	80088c2 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008842:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <UI_CPDisplay+0xd4>)
 8008844:	f993 3000 	ldrsb.w	r3, [r3]
 8008848:	461a      	mov	r2, r3
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	441a      	add	r2, r3
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	429a      	cmp	r2, r3
 8008852:	d109      	bne.n	8008868 <UI_CPDisplay+0x68>
 8008854:	4920      	ldr	r1, [pc, #128]	; (80088d8 <UI_CPDisplay+0xd8>)
 8008856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008858:	4613      	mov	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	440b      	add	r3, r1
 8008860:	3302      	adds	r3, #2
 8008862:	2201      	movs	r2, #1
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e008      	b.n	800887a <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008868:	491b      	ldr	r1, [pc, #108]	; (80088d8 <UI_CPDisplay+0xd8>)
 800886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	440b      	add	r3, r1
 8008874:	3302      	adds	r3, #2
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 800887a:	4b16      	ldr	r3, [pc, #88]	; (80088d4 <UI_CPDisplay+0xd4>)
 800887c:	f993 3000 	ldrsb.w	r3, [r3]
 8008880:	461a      	mov	r2, r3
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	441a      	add	r2, r3
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <UI_CPDisplay+0xd4>)
 8008888:	f993 3000 	ldrsb.w	r3, [r3]
 800888c:	4619      	mov	r1, r3
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	440b      	add	r3, r1
 8008892:	4619      	mov	r1, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	440b      	add	r3, r1
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f107 000c 	add.w	r0, r7, #12
 800889e:	490f      	ldr	r1, [pc, #60]	; (80088dc <UI_CPDisplay+0xdc>)
 80088a0:	f007 f8d2 	bl	800fa48 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 80088a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a6:	4613      	mov	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	1a9b      	subs	r3, r3, r2
 80088ac:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <UI_CPDisplay+0xd8>)
 80088ae:	4413      	add	r3, r2
 80088b0:	f107 020c 	add.w	r2, r7, #12
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f8 ffea 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	3301      	adds	r3, #1
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	ddbc      	ble.n	8008842 <UI_CPDisplay+0x42>
	}
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	3728      	adds	r7, #40	; 0x28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000fe8 	.word	0x20000fe8
 80088d8:	20000fbc 	.word	0x20000fbc
 80088dc:	08012300 	.word	0x08012300

080088e0 <UI_CP>:

UI_Menu_Lists UI_CP() {
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 80088ee:	4949      	ldr	r1, [pc, #292]	; (8008a14 <UI_CP+0x134>)
 80088f0:	4849      	ldr	r0, [pc, #292]	; (8008a18 <UI_CP+0x138>)
 80088f2:	f7f8 ffcd 	bl	8001890 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 80088f6:	79bb      	ldrb	r3, [r7, #6]
 80088f8:	4948      	ldr	r1, [pc, #288]	; (8008a1c <UI_CP+0x13c>)
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff ff80 	bl	8008800 <UI_CPDisplay>
	tick = HAL_GetTick();
 8008900:	f001 fa1c 	bl	8009d3c <HAL_GetTick>
 8008904:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008906:	f001 fa19 	bl	8009d3c <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b45      	cmp	r3, #69	; 0x45
 8008912:	d977      	bls.n	8008a04 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 8008914:	f7fe f840 	bl	8006998 <UI_ReadButton>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	4293      	cmp	r3, r2
 8008920:	d072      	beq.n	8008a08 <UI_CP+0x128>
		bt = UI_ReadButton();
 8008922:	f7fe f839 	bl	8006998 <UI_ReadButton>
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8008934:	79bb      	ldrb	r3, [r7, #6]
 8008936:	2b13      	cmp	r3, #19
 8008938:	d102      	bne.n	8008940 <UI_CP+0x60>
 800893a:	2300      	movs	r3, #0
 800893c:	71bb      	strb	r3, [r7, #6]
 800893e:	e7da      	b.n	80088f6 <UI_CP+0x16>
 8008940:	79bb      	ldrb	r3, [r7, #6]
 8008942:	3301      	adds	r3, #1
 8008944:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008946:	e7d6      	b.n	80088f6 <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 8008952:	79bb      	ldrb	r3, [r7, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d102      	bne.n	800895e <UI_CP+0x7e>
 8008958:	2313      	movs	r3, #19
 800895a:	71bb      	strb	r3, [r7, #6]
 800895c:	e7cb      	b.n	80088f6 <UI_CP+0x16>
 800895e:	79bb      	ldrb	r3, [r7, #6]
 8008960:	3b01      	subs	r3, #1
 8008962:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008964:	e7c7      	b.n	80088f6 <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d016      	beq.n	800899e <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8008970:	79bb      	ldrb	r3, [r7, #6]
 8008972:	4a2b      	ldr	r2, [pc, #172]	; (8008a20 <UI_CP+0x140>)
 8008974:	4413      	add	r3, r2
 8008976:	789b      	ldrb	r3, [r3, #2]
 8008978:	2b63      	cmp	r3, #99	; 0x63
 800897a:	d105      	bne.n	8008988 <UI_CP+0xa8>
 800897c:	79bb      	ldrb	r3, [r7, #6]
 800897e:	4a28      	ldr	r2, [pc, #160]	; (8008a20 <UI_CP+0x140>)
 8008980:	4413      	add	r3, r2
 8008982:	2200      	movs	r2, #0
 8008984:	709a      	strb	r2, [r3, #2]
 8008986:	e7b6      	b.n	80088f6 <UI_CP+0x16>
 8008988:	79bb      	ldrb	r3, [r7, #6]
 800898a:	4a25      	ldr	r2, [pc, #148]	; (8008a20 <UI_CP+0x140>)
 800898c:	441a      	add	r2, r3
 800898e:	7892      	ldrb	r2, [r2, #2]
 8008990:	3201      	adds	r2, #1
 8008992:	b2d1      	uxtb	r1, r2
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <UI_CP+0x140>)
 8008996:	4413      	add	r3, r2
 8008998:	460a      	mov	r2, r1
 800899a:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 800899c:	e7ab      	b.n	80088f6 <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d016      	beq.n	80089d6 <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 80089a8:	79bb      	ldrb	r3, [r7, #6]
 80089aa:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <UI_CP+0x140>)
 80089ac:	4413      	add	r3, r2
 80089ae:	789b      	ldrb	r3, [r3, #2]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <UI_CP+0xe0>
 80089b4:	79bb      	ldrb	r3, [r7, #6]
 80089b6:	4a1a      	ldr	r2, [pc, #104]	; (8008a20 <UI_CP+0x140>)
 80089b8:	4413      	add	r3, r2
 80089ba:	2263      	movs	r2, #99	; 0x63
 80089bc:	709a      	strb	r2, [r3, #2]
 80089be:	e79a      	b.n	80088f6 <UI_CP+0x16>
 80089c0:	79bb      	ldrb	r3, [r7, #6]
 80089c2:	4a17      	ldr	r2, [pc, #92]	; (8008a20 <UI_CP+0x140>)
 80089c4:	441a      	add	r2, r3
 80089c6:	7892      	ldrb	r2, [r2, #2]
 80089c8:	3a01      	subs	r2, #1
 80089ca:	b2d1      	uxtb	r1, r2
 80089cc:	4a14      	ldr	r2, [pc, #80]	; (8008a20 <UI_CP+0x140>)
 80089ce:	4413      	add	r3, r2
 80089d0:	460a      	mov	r2, r1
 80089d2:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 80089d4:	e78f      	b.n	80088f6 <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <UI_CP+0x104>
			return UI_HOMESCREEN;
 80089e0:	2302      	movs	r3, #2
 80089e2:	e013      	b.n	8008a0c <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d08b      	beq.n	8008906 <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 80089ee:	490d      	ldr	r1, [pc, #52]	; (8008a24 <UI_CP+0x144>)
 80089f0:	480d      	ldr	r0, [pc, #52]	; (8008a28 <UI_CP+0x148>)
 80089f2:	f7f8 ff4d 	bl	8001890 <DISP_DisplayText>
			Storage_SetCheckpoint();
 80089f6:	f7fd f81b 	bl	8005a30 <Storage_SetCheckpoint>
			HAL_Delay(200);
 80089fa:	20c8      	movs	r0, #200	; 0xc8
 80089fc:	f001 f9aa 	bl	8009d54 <HAL_Delay>
			return UI_SET;
 8008a00:	2307      	movs	r3, #7
 8008a02:	e003      	b.n	8008a0c <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008a04:	bf00      	nop
 8008a06:	e77e      	b.n	8008906 <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 8008a08:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008a0a:	e77c      	b.n	8008906 <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	08012310 	.word	0x08012310
 8008a18:	20000fd8 	.word	0x20000fd8
 8008a1c:	20000d62 	.word	0x20000d62
 8008a20:	20000d60 	.word	0x20000d60
 8008a24:	08012284 	.word	0x08012284
 8008a28:	20000efc 	.word	0x20000efc

08008a2c <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	4a2c      	ldr	r2, [pc, #176]	; (8008aec <UI_PlanSelectDisplay+0xc0>)
 8008a3a:	f992 2000 	ldrsb.w	r2, [r2]
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	dd06      	ble.n	8008a52 <UI_PlanSelectDisplay+0x26>
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	3b03      	subs	r3, #3
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	b25a      	sxtb	r2, r3
 8008a4c:	4b27      	ldr	r3, [pc, #156]	; (8008aec <UI_PlanSelectDisplay+0xc0>)
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	e009      	b.n	8008a66 <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	4a25      	ldr	r2, [pc, #148]	; (8008aec <UI_PlanSelectDisplay+0xc0>)
 8008a56:	f992 2000 	ldrsb.w	r2, [r2]
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	da03      	bge.n	8008a66 <UI_PlanSelectDisplay+0x3a>
 8008a5e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008a62:	4b22      	ldr	r3, [pc, #136]	; (8008aec <UI_PlanSelectDisplay+0xc0>)
 8008a64:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008a66:	2300      	movs	r3, #0
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6a:	e036      	b.n	8008ada <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008a6c:	4b1f      	ldr	r3, [pc, #124]	; (8008aec <UI_PlanSelectDisplay+0xc0>)
 8008a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8008a72:	461a      	mov	r2, r3
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	441a      	add	r2, r3
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d109      	bne.n	8008a92 <UI_PlanSelectDisplay+0x66>
 8008a7e:	491c      	ldr	r1, [pc, #112]	; (8008af0 <UI_PlanSelectDisplay+0xc4>)
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	440b      	add	r3, r1
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e008      	b.n	8008aa4 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008a92:	4917      	ldr	r1, [pc, #92]	; (8008af0 <UI_PlanSelectDisplay+0xc4>)
 8008a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a96:	4613      	mov	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <UI_PlanSelectDisplay+0xc0>)
 8008aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	441a      	add	r2, r3
 8008ab0:	f107 030c 	add.w	r3, r7, #12
 8008ab4:	490f      	ldr	r1, [pc, #60]	; (8008af4 <UI_PlanSelectDisplay+0xc8>)
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f006 ffc6 	bl	800fa48 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8008abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abe:	4613      	mov	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	; (8008af0 <UI_PlanSelectDisplay+0xc4>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f107 020c 	add.w	r2, r7, #12
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f8 fede 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	ddc5      	ble.n	8008a6c <UI_PlanSelectDisplay+0x40>
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	3728      	adds	r7, #40	; 0x28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000fe9 	.word	0x20000fe9
 8008af0:	20000fbc 	.word	0x20000fbc
 8008af4:	0801231c 	.word	0x0801231c

08008af8 <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 8008b06:	494f      	ldr	r1, [pc, #316]	; (8008c44 <UI_PlanSelect+0x14c>)
 8008b08:	484f      	ldr	r0, [pc, #316]	; (8008c48 <UI_PlanSelect+0x150>)
 8008b0a:	f7f8 fec1 	bl	8001890 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 8008b0e:	79bb      	ldrb	r3, [r7, #6]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff ff8b 	bl	8008a2c <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 8008b16:	f001 f911 	bl	8009d3c <HAL_GetTick>
 8008b1a:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008b1c:	f001 f90e 	bl	8009d3c <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b45      	cmp	r3, #69	; 0x45
 8008b28:	f240 8083 	bls.w	8008c32 <UI_PlanSelect+0x13a>
		if(bt == UI_ReadButton()) continue;
 8008b2c:	f7fd ff34 	bl	8006998 <UI_ReadButton>
 8008b30:	4603      	mov	r3, r0
 8008b32:	461a      	mov	r2, r3
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d07d      	beq.n	8008c36 <UI_PlanSelect+0x13e>
		bt = UI_ReadButton();
 8008b3a:	f7fd ff2d 	bl	8006998 <UI_ReadButton>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <UI_PlanSelect+0x68>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8008b4c:	79bb      	ldrb	r3, [r7, #6]
 8008b4e:	2b0e      	cmp	r3, #14
 8008b50:	d102      	bne.n	8008b58 <UI_PlanSelect+0x60>
 8008b52:	2300      	movs	r3, #0
 8008b54:	71bb      	strb	r3, [r7, #6]
 8008b56:	e7da      	b.n	8008b0e <UI_PlanSelect+0x16>
 8008b58:	79bb      	ldrb	r3, [r7, #6]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008b5e:	e7d6      	b.n	8008b0e <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <UI_PlanSelect+0x86>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 8008b6a:	79bb      	ldrb	r3, [r7, #6]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <UI_PlanSelect+0x7e>
 8008b70:	230e      	movs	r3, #14
 8008b72:	71bb      	strb	r3, [r7, #6]
 8008b74:	e7cb      	b.n	8008b0e <UI_PlanSelect+0x16>
 8008b76:	79bb      	ldrb	r3, [r7, #6]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008b7c:	e7c7      	b.n	8008b0e <UI_PlanSelect+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d029      	beq.n	8008bdc <UI_PlanSelect+0xe4>
			DISP_DisplayText(&short_message, "Copy to this Plan?");
 8008b88:	4930      	ldr	r1, [pc, #192]	; (8008c4c <UI_PlanSelect+0x154>)
 8008b8a:	4831      	ldr	r0, [pc, #196]	; (8008c50 <UI_PlanSelect+0x158>)
 8008b8c:	f7f8 fe80 	bl	8001890 <DISP_DisplayText>
			while(1) {
				if(bt == UI_ReadButton()) continue;
 8008b90:	f7fd ff02 	bl	8006998 <UI_ReadButton>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d01c      	beq.n	8008bd8 <UI_PlanSelect+0xe0>
				bt = UI_ReadButton();
 8008b9e:	f7fd fefb 	bl	8006998 <UI_ReadButton>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_OK_PRESS) {
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00d      	beq.n	8008bcc <UI_PlanSelect+0xd4>
					DISP_DisplayText(&short_message, "Copying...");
 8008bb0:	4928      	ldr	r1, [pc, #160]	; (8008c54 <UI_PlanSelect+0x15c>)
 8008bb2:	4827      	ldr	r0, [pc, #156]	; (8008c50 <UI_PlanSelect+0x158>)
 8008bb4:	f7f8 fe6c 	bl	8001890 <DISP_DisplayText>
					Storage_CopyPlan(num_menu);
 8008bb8:	79bb      	ldrb	r3, [r7, #6]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fd f9d2 	bl	8005f64 <Storage_CopyPlan>
					DISP_DisplayText(&short_message, "Copy done!");
 8008bc0:	4925      	ldr	r1, [pc, #148]	; (8008c58 <UI_PlanSelect+0x160>)
 8008bc2:	4823      	ldr	r0, [pc, #140]	; (8008c50 <UI_PlanSelect+0x158>)
 8008bc4:	f7f8 fe64 	bl	8001890 <DISP_DisplayText>
					break;
 8008bc8:	bf00      	nop
				}
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
					goto ui_cp;
				}
			}
			goto ui_cp;
 8008bca:	e7a0      	b.n	8008b0e <UI_PlanSelect+0x16>
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0dc      	beq.n	8008b90 <UI_PlanSelect+0x98>
					goto ui_cp;
 8008bd6:	e79a      	b.n	8008b0e <UI_PlanSelect+0x16>
				if(bt == UI_ReadButton()) continue;
 8008bd8:	bf00      	nop
 8008bda:	e7d9      	b.n	8008b90 <UI_PlanSelect+0x98>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <UI_PlanSelect+0xf2>
			return UI_HOMESCREEN;
 8008be6:	2302      	movs	r3, #2
 8008be8:	e027      	b.n	8008c3a <UI_PlanSelect+0x142>
		}
		else if(bt & SW_OK_PRESS) {
 8008bea:	79fb      	ldrb	r3, [r7, #7]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d093      	beq.n	8008b1c <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8008bf4:	4919      	ldr	r1, [pc, #100]	; (8008c5c <UI_PlanSelect+0x164>)
 8008bf6:	4816      	ldr	r0, [pc, #88]	; (8008c50 <UI_PlanSelect+0x158>)
 8008bf8:	f7f8 fe4a 	bl	8001890 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8008bfc:	79bb      	ldrb	r3, [r7, #6]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fc fe94 	bl	800592c <Storage_GetPlan>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <UI_PlanSelect+0x128>
				DISP_DisplayText(&short_message, "Reseting...");
 8008c0a:	4915      	ldr	r1, [pc, #84]	; (8008c60 <UI_PlanSelect+0x168>)
 8008c0c:	4810      	ldr	r0, [pc, #64]	; (8008c50 <UI_PlanSelect+0x158>)
 8008c0e:	f7f8 fe3f 	bl	8001890 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008c12:	f7fc fd13 	bl	800563c <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8008c16:	f7fc fe13 	bl	8005840 <Storage_PlanInit>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0f8      	beq.n	8008c12 <UI_PlanSelect+0x11a>
			}
			DISP_DisplayText(&short_message, "Done!");
 8008c20:	4910      	ldr	r1, [pc, #64]	; (8008c64 <UI_PlanSelect+0x16c>)
 8008c22:	480b      	ldr	r0, [pc, #44]	; (8008c50 <UI_PlanSelect+0x158>)
 8008c24:	f7f8 fe34 	bl	8001890 <DISP_DisplayText>
			HAL_Delay(200);
 8008c28:	20c8      	movs	r0, #200	; 0xc8
 8008c2a:	f001 f893 	bl	8009d54 <HAL_Delay>
			return UI_HOMESCREEN;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e003      	b.n	8008c3a <UI_PlanSelect+0x142>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008c32:	bf00      	nop
 8008c34:	e772      	b.n	8008b1c <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8008c36:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008c38:	e770      	b.n	8008b1c <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	08012324 	.word	0x08012324
 8008c48:	20000fd8 	.word	0x20000fd8
 8008c4c:	08012330 	.word	0x08012330
 8008c50:	20000efc 	.word	0x20000efc
 8008c54:	08012344 	.word	0x08012344
 8008c58:	08012350 	.word	0x08012350
 8008c5c:	0801235c 	.word	0x0801235c
 8008c60:	08012368 	.word	0x08012368
 8008c64:	08012374 	.word	0x08012374

08008c68 <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	4a29      	ldr	r2, [pc, #164]	; (8008d1c <UI_MemSettingDisplay+0xb4>)
 8008c76:	f992 2000 	ldrsb.w	r2, [r2]
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	dd06      	ble.n	8008c8e <UI_MemSettingDisplay+0x26>
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	3b03      	subs	r3, #3
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	b25a      	sxtb	r2, r3
 8008c88:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <UI_MemSettingDisplay+0xb4>)
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e009      	b.n	8008ca2 <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	4a22      	ldr	r2, [pc, #136]	; (8008d1c <UI_MemSettingDisplay+0xb4>)
 8008c92:	f992 2000 	ldrsb.w	r2, [r2]
 8008c96:	4293      	cmp	r3, r2
 8008c98:	da03      	bge.n	8008ca2 <UI_MemSettingDisplay+0x3a>
 8008c9a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <UI_MemSettingDisplay+0xb4>)
 8008ca0:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	e031      	b.n	8008d0c <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <UI_MemSettingDisplay+0xb4>)
 8008caa:	f993 3000 	ldrsb.w	r3, [r3]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d109      	bne.n	8008cce <UI_MemSettingDisplay+0x66>
 8008cba:	4919      	ldr	r1, [pc, #100]	; (8008d20 <UI_MemSettingDisplay+0xb8>)
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	2201      	movs	r2, #1
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e008      	b.n	8008ce0 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8008cce:	4914      	ldr	r1, [pc, #80]	; (8008d20 <UI_MemSettingDisplay+0xb8>)
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3302      	adds	r3, #2
 8008cdc:	2200      	movs	r2, #0
 8008cde:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	1a9b      	subs	r3, r3, r2
 8008ce8:	4a0d      	ldr	r2, [pc, #52]	; (8008d20 <UI_MemSettingDisplay+0xb8>)
 8008cea:	441a      	add	r2, r3
 8008cec:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <UI_MemSettingDisplay+0xb4>)
 8008cee:	f993 3000 	ldrsb.w	r3, [r3]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	440b      	add	r3, r1
 8008cf8:	490a      	ldr	r1, [pc, #40]	; (8008d24 <UI_MemSettingDisplay+0xbc>)
 8008cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4610      	mov	r0, r2
 8008d02:	f7f8 fdc5 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	ddca      	ble.n	8008ca8 <UI_MemSettingDisplay+0x40>
	}
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000fea 	.word	0x20000fea
 8008d20:	20000f30 	.word	0x20000f30
 8008d24:	20000310 	.word	0x20000310

08008d28 <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 8008d32:	495b      	ldr	r1, [pc, #364]	; (8008ea0 <UI_MemSetting+0x178>)
 8008d34:	485b      	ldr	r0, [pc, #364]	; (8008ea4 <UI_MemSetting+0x17c>)
 8008d36:	f7f8 fdab 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 8008d3a:	4b5b      	ldr	r3, [pc, #364]	; (8008ea8 <UI_MemSetting+0x180>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff ff92 	bl	8008c68 <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8008d44:	f000 fffa 	bl	8009d3c <HAL_GetTick>
 8008d48:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008d4a:	f000 fff7 	bl	8009d3c <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b45      	cmp	r3, #69	; 0x45
 8008d56:	f240 8097 	bls.w	8008e88 <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 8008d5a:	f7fd fe1d 	bl	8006998 <UI_ReadButton>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	461a      	mov	r2, r3
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	f000 8091 	beq.w	8008e8c <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 8008d6a:	f7fd fe15 	bl	8006998 <UI_ReadButton>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00e      	beq.n	8008d9a <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8008d7c:	4b4a      	ldr	r3, [pc, #296]	; (8008ea8 <UI_MemSetting+0x180>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d103      	bne.n	8008d8c <UI_MemSetting+0x64>
 8008d84:	4b48      	ldr	r3, [pc, #288]	; (8008ea8 <UI_MemSetting+0x180>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	e7d6      	b.n	8008d3a <UI_MemSetting+0x12>
 8008d8c:	4b46      	ldr	r3, [pc, #280]	; (8008ea8 <UI_MemSetting+0x180>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	4b44      	ldr	r3, [pc, #272]	; (8008ea8 <UI_MemSetting+0x180>)
 8008d96:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8008d98:	e7cf      	b.n	8008d3a <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 8008da4:	4b40      	ldr	r3, [pc, #256]	; (8008ea8 <UI_MemSetting+0x180>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <UI_MemSetting+0x8c>
 8008dac:	4b3e      	ldr	r3, [pc, #248]	; (8008ea8 <UI_MemSetting+0x180>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	e7c2      	b.n	8008d3a <UI_MemSetting+0x12>
 8008db4:	4b3c      	ldr	r3, [pc, #240]	; (8008ea8 <UI_MemSetting+0x180>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	4b3a      	ldr	r3, [pc, #232]	; (8008ea8 <UI_MemSetting+0x180>)
 8008dbe:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8008dc0:	e7bb      	b.n	8008d3a <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <UI_MemSetting+0xae>
			num_menu = 0;
 8008dcc:	4b36      	ldr	r3, [pc, #216]	; (8008ea8 <UI_MemSetting+0x180>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e060      	b.n	8008e98 <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <UI_MemSetting+0xc2>
			num_menu = 0;
 8008de0:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <UI_MemSetting+0x180>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 8008de6:	2307      	movs	r3, #7
 8008de8:	e056      	b.n	8008e98 <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 8008dea:	4b2f      	ldr	r3, [pc, #188]	; (8008ea8 <UI_MemSetting+0x180>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d027      	beq.n	8008e42 <UI_MemSetting+0x11a>
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	dca9      	bgt.n	8008d4a <UI_MemSetting+0x22>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <UI_MemSetting+0xd8>
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d018      	beq.n	8008e30 <UI_MemSetting+0x108>
 8008dfe:	e04a      	b.n	8008e96 <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d042      	beq.n	8008e90 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 8008e0a:	4928      	ldr	r1, [pc, #160]	; (8008eac <UI_MemSetting+0x184>)
 8008e0c:	4828      	ldr	r0, [pc, #160]	; (8008eb0 <UI_MemSetting+0x188>)
 8008e0e:	f7f8 fd3f 	bl	8001890 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008e12:	f7fc fc13 	bl	800563c <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8008e16:	f7fc fd13 	bl	8005840 <Storage_PlanInit>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f8      	beq.n	8008e12 <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 8008e20:	4924      	ldr	r1, [pc, #144]	; (8008eb4 <UI_MemSetting+0x18c>)
 8008e22:	4823      	ldr	r0, [pc, #140]	; (8008eb0 <UI_MemSetting+0x188>)
 8008e24:	f7f8 fd34 	bl	8001890 <DISP_DisplayText>
				HAL_Delay(200);
 8008e28:	20c8      	movs	r0, #200	; 0xc8
 8008e2a:	f000 ff93 	bl	8009d54 <HAL_Delay>
				goto ui_mem;
 8008e2e:	e784      	b.n	8008d3a <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d02c      	beq.n	8008e94 <UI_MemSetting+0x16c>
				num_menu = 3;
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <UI_MemSetting+0x180>)
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008e40:	e028      	b.n	8008e94 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 8008e42:	491d      	ldr	r1, [pc, #116]	; (8008eb8 <UI_MemSetting+0x190>)
 8008e44:	481d      	ldr	r0, [pc, #116]	; (8008ebc <UI_MemSetting+0x194>)
 8008e46:	f7f8 fd23 	bl	8001890 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 8008e4a:	f7fd fda5 	bl	8006998 <UI_ReadButton>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <UI_MemSetting+0x13c>
					num_menu = 1;
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <UI_MemSetting+0x180>)
 8008e5e:	2201      	movs	r2, #1
 8008e60:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 8008e62:	e76a      	b.n	8008d3a <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0ed      	beq.n	8008e4a <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 8008e6e:	4914      	ldr	r1, [pc, #80]	; (8008ec0 <UI_MemSetting+0x198>)
 8008e70:	4812      	ldr	r0, [pc, #72]	; (8008ebc <UI_MemSetting+0x194>)
 8008e72:	f7f8 fd0d 	bl	8001890 <DISP_DisplayText>
					Storage_CleanInit();
 8008e76:	f7fd f8a7 	bl	8005fc8 <Storage_CleanInit>
					HAL_Delay(1000);
 8008e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e7e:	f000 ff69 	bl	8009d54 <HAL_Delay>
					HAL_NVIC_SystemReset();
 8008e82:	f001 fdd2 	bl	800aa2a <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 8008e86:	e7e0      	b.n	8008e4a <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008e88:	bf00      	nop
 8008e8a:	e75e      	b.n	8008d4a <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 8008e8c:	bf00      	nop
 8008e8e:	e75c      	b.n	8008d4a <UI_MemSetting+0x22>
			break;
 8008e90:	bf00      	nop
 8008e92:	e75a      	b.n	8008d4a <UI_MemSetting+0x22>
			break;
 8008e94:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008e96:	e758      	b.n	8008d4a <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	08012394 	.word	0x08012394
 8008ea4:	20000f28 	.word	0x20000f28
 8008ea8:	20000feb 	.word	0x20000feb
 8008eac:	08012368 	.word	0x08012368
 8008eb0:	20000efc 	.word	0x20000efc
 8008eb4:	08012374 	.word	0x08012374
 8008eb8:	0801239c 	.word	0x0801239c
 8008ebc:	20000f45 	.word	0x20000f45
 8008ec0:	080123ac 	.word	0x080123ac

08008ec4 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	4a53      	ldr	r2, [pc, #332]	; (8009020 <UI_PIDSettingDisplay+0x15c>)
 8008ed2:	f992 2000 	ldrsb.w	r2, [r2]
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	dd06      	ble.n	8008eea <UI_PIDSettingDisplay+0x26>
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	3b03      	subs	r3, #3
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	b25a      	sxtb	r2, r3
 8008ee4:	4b4e      	ldr	r3, [pc, #312]	; (8009020 <UI_PIDSettingDisplay+0x15c>)
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e009      	b.n	8008efe <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	4a4c      	ldr	r2, [pc, #304]	; (8009020 <UI_PIDSettingDisplay+0x15c>)
 8008eee:	f992 2000 	ldrsb.w	r2, [r2]
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	da03      	bge.n	8008efe <UI_PIDSettingDisplay+0x3a>
 8008ef6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008efa:	4b49      	ldr	r3, [pc, #292]	; (8009020 <UI_PIDSettingDisplay+0x15c>)
 8008efc:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
 8008f02:	e083      	b.n	800900c <UI_PIDSettingDisplay+0x148>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008f04:	4b46      	ldr	r3, [pc, #280]	; (8009020 <UI_PIDSettingDisplay+0x15c>)
 8008f06:	f993 3000 	ldrsb.w	r3, [r3]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	441a      	add	r2, r3
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d109      	bne.n	8008f2a <UI_PIDSettingDisplay+0x66>
 8008f16:	4943      	ldr	r1, [pc, #268]	; (8009024 <UI_PIDSettingDisplay+0x160>)
 8008f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	440b      	add	r3, r1
 8008f22:	3302      	adds	r3, #2
 8008f24:	2201      	movs	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e008      	b.n	8008f3c <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008f2a:	493e      	ldr	r1, [pc, #248]	; (8009024 <UI_PIDSettingDisplay+0x160>)
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	4613      	mov	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	440b      	add	r3, r1
 8008f36:	3302      	adds	r3, #2
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8008f3c:	4b38      	ldr	r3, [pc, #224]	; (8009020 <UI_PIDSettingDisplay+0x15c>)
 8008f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	4413      	add	r3, r2
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d850      	bhi.n	8008fee <UI_PIDSettingDisplay+0x12a>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UI_PIDSettingDisplay+0x90>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f69 	.word	0x08008f69
 8008f58:	08008f83 	.word	0x08008f83
 8008f5c:	08008f9d 	.word	0x08008f9d
 8008f60:	08008fb7 	.word	0x08008fb7
 8008f64:	08008fd5 	.word	0x08008fd5
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 8008f68:	4b2f      	ldr	r3, [pc, #188]	; (8009028 <UI_PIDSettingDisplay+0x164>)
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 faeb 	bl	8000548 <__aeabi_f2d>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	f107 000c 	add.w	r0, r7, #12
 8008f7a:	492c      	ldr	r1, [pc, #176]	; (800902c <UI_PIDSettingDisplay+0x168>)
 8008f7c:	f006 fd64 	bl	800fa48 <siprintf>
			break;
 8008f80:	e035      	b.n	8008fee <UI_PIDSettingDisplay+0x12a>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 8008f82:	4b29      	ldr	r3, [pc, #164]	; (8009028 <UI_PIDSettingDisplay+0x164>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f7 fade 	bl	8000548 <__aeabi_f2d>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	f107 000c 	add.w	r0, r7, #12
 8008f94:	4926      	ldr	r1, [pc, #152]	; (8009030 <UI_PIDSettingDisplay+0x16c>)
 8008f96:	f006 fd57 	bl	800fa48 <siprintf>
			break;
 8008f9a:	e028      	b.n	8008fee <UI_PIDSettingDisplay+0x12a>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 8008f9c:	4b22      	ldr	r3, [pc, #136]	; (8009028 <UI_PIDSettingDisplay+0x164>)
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f7 fad1 	bl	8000548 <__aeabi_f2d>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	f107 000c 	add.w	r0, r7, #12
 8008fae:	4921      	ldr	r1, [pc, #132]	; (8009034 <UI_PIDSettingDisplay+0x170>)
 8008fb0:	f006 fd4a 	bl	800fa48 <siprintf>
			break;
 8008fb4:	e01b      	b.n	8008fee <UI_PIDSettingDisplay+0x12a>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 8008fb6:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <UI_PIDSettingDisplay+0x164>)
 8008fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <UI_PIDSettingDisplay+0x100>
 8008fc0:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <UI_PIDSettingDisplay+0x174>)
 8008fc2:	e000      	b.n	8008fc6 <UI_PIDSettingDisplay+0x102>
 8008fc4:	4a1d      	ldr	r2, [pc, #116]	; (800903c <UI_PIDSettingDisplay+0x178>)
 8008fc6:	f107 030c 	add.w	r3, r7, #12
 8008fca:	491d      	ldr	r1, [pc, #116]	; (8009040 <UI_PIDSettingDisplay+0x17c>)
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f006 fd3b 	bl	800fa48 <siprintf>
			break;
 8008fd2:	e00c      	b.n	8008fee <UI_PIDSettingDisplay+0x12a>
		case 4:
			sprintf(buff, "a ~ %1.3f", plan.alpha);
 8008fd4:	4b14      	ldr	r3, [pc, #80]	; (8009028 <UI_PIDSettingDisplay+0x164>)
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f7 fab5 	bl	8000548 <__aeabi_f2d>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	f107 000c 	add.w	r0, r7, #12
 8008fe6:	4917      	ldr	r1, [pc, #92]	; (8009044 <UI_PIDSettingDisplay+0x180>)
 8008fe8:	f006 fd2e 	bl	800fa48 <siprintf>
			break;
 8008fec:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	1a9b      	subs	r3, r3, r2
 8008ff6:	4a0b      	ldr	r2, [pc, #44]	; (8009024 <UI_PIDSettingDisplay+0x160>)
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f107 020c 	add.w	r2, r7, #12
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f7f8 fc45 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	3301      	adds	r3, #1
 800900a:	627b      	str	r3, [r7, #36]	; 0x24
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	2b03      	cmp	r3, #3
 8009010:	f77f af78 	ble.w	8008f04 <UI_PIDSettingDisplay+0x40>
	}
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	3728      	adds	r7, #40	; 0x28
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000fec 	.word	0x20000fec
 8009024:	20000fbc 	.word	0x20000fbc
 8009028:	20000d60 	.word	0x20000d60
 800902c:	080123b4 	.word	0x080123b4
 8009030:	080123c0 	.word	0x080123c0
 8009034:	080123cc 	.word	0x080123cc
 8009038:	080123d8 	.word	0x080123d8
 800903c:	080123e0 	.word	0x080123e0
 8009040:	080123e8 	.word	0x080123e8
 8009044:	080123ec 	.word	0x080123ec

08009048 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8009056:	49a2      	ldr	r1, [pc, #648]	; (80092e0 <UI_PIDSetting+0x298>)
 8009058:	48a2      	ldr	r0, [pc, #648]	; (80092e4 <UI_PIDSetting+0x29c>)
 800905a:	f7f8 fc19 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 800905e:	4ba2      	ldr	r3, [pc, #648]	; (80092e8 <UI_PIDSetting+0x2a0>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff ff2e 	bl	8008ec4 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8009068:	f000 fe68 	bl	8009d3c <HAL_GetTick>
 800906c:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800906e:	f000 fe65 	bl	8009d3c <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	7bba      	ldrb	r2, [r7, #14]
 800907a:	2a01      	cmp	r2, #1
 800907c:	d101      	bne.n	8009082 <UI_PIDSetting+0x3a>
 800907e:	2219      	movs	r2, #25
 8009080:	e000      	b.n	8009084 <UI_PIDSetting+0x3c>
 8009082:	2246      	movs	r2, #70	; 0x46
 8009084:	429a      	cmp	r2, r3
 8009086:	f200 8211 	bhi.w	80094ac <UI_PIDSetting+0x464>
		bt2 = UI_ReadButton();
 800908a:	f7fd fc85 	bl	8006998 <UI_ReadButton>
 800908e:	4603      	mov	r3, r0
 8009090:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8009092:	7bfa      	ldrb	r2, [r7, #15]
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	429a      	cmp	r2, r3
 8009098:	d103      	bne.n	80090a2 <UI_PIDSetting+0x5a>
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8207 	beq.w	80094b0 <UI_PIDSetting+0x468>
		bt = bt2;
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d010      	beq.n	80090d2 <UI_PIDSetting+0x8a>
			if(num_menu==4) num_menu = 0; else num_menu++;
 80090b0:	4b8d      	ldr	r3, [pc, #564]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d103      	bne.n	80090c0 <UI_PIDSetting+0x78>
 80090b8:	4b8b      	ldr	r3, [pc, #556]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e005      	b.n	80090cc <UI_PIDSetting+0x84>
 80090c0:	4b89      	ldr	r3, [pc, #548]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	3301      	adds	r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	4b87      	ldr	r3, [pc, #540]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090ca:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 80090d0:	e7c5      	b.n	800905e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d010      	beq.n	80090fe <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 4; else num_menu--;
 80090dc:	4b82      	ldr	r3, [pc, #520]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d103      	bne.n	80090ec <UI_PIDSetting+0xa4>
 80090e4:	4b80      	ldr	r3, [pc, #512]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090e6:	2204      	movs	r2, #4
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	e005      	b.n	80090f8 <UI_PIDSetting+0xb0>
 80090ec:	4b7e      	ldr	r3, [pc, #504]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	4b7c      	ldr	r3, [pc, #496]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80090f6:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 80090fc:	e7af      	b.n	800905e <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <UI_PIDSetting+0xca>
			num_menu = 0;
 8009108:	4b77      	ldr	r3, [pc, #476]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800910e:	2302      	movs	r3, #2
 8009110:	e1d6      	b.n	80094c0 <UI_PIDSetting+0x478>
		}
		else if(bt & SW_BK_PRESS) {
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <UI_PIDSetting+0xea>
			num_menu = 0;
 800911c:	4b72      	ldr	r3, [pc, #456]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8009122:	4972      	ldr	r1, [pc, #456]	; (80092ec <UI_PIDSetting+0x2a4>)
 8009124:	4872      	ldr	r0, [pc, #456]	; (80092f0 <UI_PIDSetting+0x2a8>)
 8009126:	f7f8 fbb3 	bl	8001890 <DISP_DisplayText>
			Storage_SetPID();
 800912a:	f7fc fc9f 	bl	8005a6c <Storage_SetPID>
			return UI_SET;
 800912e:	2307      	movs	r3, #7
 8009130:	e1c6      	b.n	80094c0 <UI_PIDSetting+0x478>
		}
		switch(num_menu) {
 8009132:	4b6d      	ldr	r3, [pc, #436]	; (80092e8 <UI_PIDSetting+0x2a0>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b04      	cmp	r3, #4
 8009138:	f000 8118 	beq.w	800936c <UI_PIDSetting+0x324>
 800913c:	2b04      	cmp	r3, #4
 800913e:	dc96      	bgt.n	800906e <UI_PIDSetting+0x26>
 8009140:	2b02      	cmp	r3, #2
 8009142:	dc02      	bgt.n	800914a <UI_PIDSetting+0x102>
 8009144:	2b00      	cmp	r3, #0
 8009146:	da04      	bge.n	8009152 <UI_PIDSetting+0x10a>
 8009148:	e1b9      	b.n	80094be <UI_PIDSetting+0x476>
 800914a:	2b03      	cmp	r3, #3
 800914c:	f000 80f9 	beq.w	8009342 <UI_PIDSetting+0x2fa>
 8009150:	e1b5      	b.n	80094be <UI_PIDSetting+0x476>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009158:	2b10      	cmp	r3, #16
 800915a:	d12c      	bne.n	80091b6 <UI_PIDSetting+0x16e>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 499.0; else plan.kpid[num_menu]-=1.0;
 800915c:	4b62      	ldr	r3, [pc, #392]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4a64      	ldr	r2, [pc, #400]	; (80092f4 <UI_PIDSetting+0x2ac>)
 8009162:	3306      	adds	r3, #6
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	edd3 7a00 	vldr	s15, [r3]
 800916c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009174:	d108      	bne.n	8009188 <UI_PIDSetting+0x140>
 8009176:	4b5c      	ldr	r3, [pc, #368]	; (80092e8 <UI_PIDSetting+0x2a0>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	4a5e      	ldr	r2, [pc, #376]	; (80092f4 <UI_PIDSetting+0x2ac>)
 800917c:	3306      	adds	r3, #6
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	4a5d      	ldr	r2, [pc, #372]	; (80092f8 <UI_PIDSetting+0x2b0>)
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e013      	b.n	80091b0 <UI_PIDSetting+0x168>
 8009188:	4b57      	ldr	r3, [pc, #348]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	4a59      	ldr	r2, [pc, #356]	; (80092f4 <UI_PIDSetting+0x2ac>)
 800918e:	3306      	adds	r3, #6
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	edd3 7a00 	vldr	s15, [r3]
 8009198:	4b53      	ldr	r3, [pc, #332]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091a4:	4a53      	ldr	r2, [pc, #332]	; (80092f4 <UI_PIDSetting+0x2ac>)
 80091a6:	3306      	adds	r3, #6
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80091b4:	e753      	b.n	800905e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d12f      	bne.n	8009220 <UI_PIDSetting+0x1d8>
				if(plan.kpid[num_menu]==499.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 80091c0:	4b49      	ldr	r3, [pc, #292]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	4a4b      	ldr	r2, [pc, #300]	; (80092f4 <UI_PIDSetting+0x2ac>)
 80091c6:	3306      	adds	r3, #6
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	edd3 7a00 	vldr	s15, [r3]
 80091d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80092fc <UI_PIDSetting+0x2b4>
 80091d4:	eef4 7a47 	vcmp.f32	s15, s14
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	d109      	bne.n	80091f2 <UI_PIDSetting+0x1aa>
 80091de:	4b42      	ldr	r3, [pc, #264]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	4a44      	ldr	r2, [pc, #272]	; (80092f4 <UI_PIDSetting+0x2ac>)
 80091e4:	3306      	adds	r3, #6
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e013      	b.n	800921a <UI_PIDSetting+0x1d2>
 80091f2:	4b3d      	ldr	r3, [pc, #244]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	4a3f      	ldr	r2, [pc, #252]	; (80092f4 <UI_PIDSetting+0x2ac>)
 80091f8:	3306      	adds	r3, #6
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	edd3 7a00 	vldr	s15, [r3]
 8009202:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <UI_PIDSetting+0x2a0>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800920a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800920e:	4a39      	ldr	r2, [pc, #228]	; (80092f4 <UI_PIDSetting+0x2ac>)
 8009210:	3306      	adds	r3, #6
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 800921a:	2301      	movs	r3, #1
 800921c:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800921e:	e71e      	b.n	800905e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009226:	2b30      	cmp	r3, #48	; 0x30
 8009228:	d136      	bne.n	8009298 <UI_PIDSetting+0x250>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 499.0; else plan.kpid[num_menu]-=0.10;
 800922a:	4b2f      	ldr	r3, [pc, #188]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	4a31      	ldr	r2, [pc, #196]	; (80092f4 <UI_PIDSetting+0x2ac>)
 8009230:	3306      	adds	r3, #6
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	edd3 7a00 	vldr	s15, [r3]
 800923a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800923e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009242:	d108      	bne.n	8009256 <UI_PIDSetting+0x20e>
 8009244:	4b28      	ldr	r3, [pc, #160]	; (80092e8 <UI_PIDSetting+0x2a0>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <UI_PIDSetting+0x2ac>)
 800924a:	3306      	adds	r3, #6
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	4a29      	ldr	r2, [pc, #164]	; (80092f8 <UI_PIDSetting+0x2b0>)
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e01d      	b.n	8009292 <UI_PIDSetting+0x24a>
 8009256:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <UI_PIDSetting+0x2a0>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <UI_PIDSetting+0x2ac>)
 800925c:	3306      	adds	r3, #6
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f7f7 f96f 	bl	8000548 <__aeabi_f2d>
 800926a:	a31b      	add	r3, pc, #108	; (adr r3, 80092d8 <UI_PIDSetting+0x290>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f80a 	bl	8000288 <__aeabi_dsub>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	491b      	ldr	r1, [pc, #108]	; (80092e8 <UI_PIDSetting+0x2a0>)
 800927a:	7809      	ldrb	r1, [r1, #0]
 800927c:	460c      	mov	r4, r1
 800927e:	4610      	mov	r0, r2
 8009280:	4619      	mov	r1, r3
 8009282:	f7f7 fcb1 	bl	8000be8 <__aeabi_d2f>
 8009286:	4602      	mov	r2, r0
 8009288:	491a      	ldr	r1, [pc, #104]	; (80092f4 <UI_PIDSetting+0x2ac>)
 800928a:	1da3      	adds	r3, r4, #6
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8009292:	2301      	movs	r3, #1
 8009294:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009296:	e6e2      	b.n	800905e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800929e:	2b22      	cmp	r3, #34	; 0x22
 80092a0:	f040 8108 	bne.w	80094b4 <UI_PIDSetting+0x46c>
				if(plan.kpid[num_menu]==499.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 80092a4:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	4a12      	ldr	r2, [pc, #72]	; (80092f4 <UI_PIDSetting+0x2ac>)
 80092aa:	3306      	adds	r3, #6
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	edd3 7a00 	vldr	s15, [r3]
 80092b4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80092fc <UI_PIDSetting+0x2b4>
 80092b8:	eef4 7a47 	vcmp.f32	s15, s14
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	d11e      	bne.n	8009300 <UI_PIDSetting+0x2b8>
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <UI_PIDSetting+0x2a0>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	4a0b      	ldr	r2, [pc, #44]	; (80092f4 <UI_PIDSetting+0x2ac>)
 80092c8:	3306      	adds	r3, #6
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e032      	b.n	800933c <UI_PIDSetting+0x2f4>
 80092d6:	bf00      	nop
 80092d8:	9999999a 	.word	0x9999999a
 80092dc:	3fb99999 	.word	0x3fb99999
 80092e0:	080123f8 	.word	0x080123f8
 80092e4:	20000f28 	.word	0x20000f28
 80092e8:	20000fed 	.word	0x20000fed
 80092ec:	080123fc 	.word	0x080123fc
 80092f0:	20000efc 	.word	0x20000efc
 80092f4:	20000d60 	.word	0x20000d60
 80092f8:	43f98000 	.word	0x43f98000
 80092fc:	43f98000 	.word	0x43f98000
 8009300:	4b77      	ldr	r3, [pc, #476]	; (80094e0 <UI_PIDSetting+0x498>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	4a77      	ldr	r2, [pc, #476]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009306:	3306      	adds	r3, #6
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7f7 f91a 	bl	8000548 <__aeabi_f2d>
 8009314:	a36c      	add	r3, pc, #432	; (adr r3, 80094c8 <UI_PIDSetting+0x480>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f7f6 ffb7 	bl	800028c <__adddf3>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	496f      	ldr	r1, [pc, #444]	; (80094e0 <UI_PIDSetting+0x498>)
 8009324:	7809      	ldrb	r1, [r1, #0]
 8009326:	460c      	mov	r4, r1
 8009328:	4610      	mov	r0, r2
 800932a:	4619      	mov	r1, r3
 800932c:	f7f7 fc5c 	bl	8000be8 <__aeabi_d2f>
 8009330:	4602      	mov	r2, r0
 8009332:	496c      	ldr	r1, [pc, #432]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009334:	1da3      	adds	r3, r4, #6
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 800933c:	2301      	movs	r3, #1
 800933e:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009340:	e68d      	b.n	800905e <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	f003 0312 	and.w	r3, r3, #18
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80b5 	beq.w	80094b8 <UI_PIDSetting+0x470>
				plan.status_pid = !plan.status_pid;
 800934e:	4b65      	ldr	r3, [pc, #404]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	bf0c      	ite	eq
 8009358:	2301      	moveq	r3, #1
 800935a:	2300      	movne	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	4b60      	ldr	r3, [pc, #384]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800936a:	e678      	b.n	800905e <UI_PIDSetting+0x16>
			}
			break;
		case 4:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009372:	2b10      	cmp	r3, #16
 8009374:	d121      	bne.n	80093ba <UI_PIDSetting+0x372>
				plan.alpha-=0.01;
 8009376:	4b5b      	ldr	r3, [pc, #364]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	4618      	mov	r0, r3
 800937c:	f7f7 f8e4 	bl	8000548 <__aeabi_f2d>
 8009380:	a353      	add	r3, pc, #332	; (adr r3, 80094d0 <UI_PIDSetting+0x488>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff7f 	bl	8000288 <__aeabi_dsub>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4610      	mov	r0, r2
 8009390:	4619      	mov	r1, r3
 8009392:	f7f7 fc29 	bl	8000be8 <__aeabi_d2f>
 8009396:	4603      	mov	r3, r0
 8009398:	4a52      	ldr	r2, [pc, #328]	; (80094e4 <UI_PIDSetting+0x49c>)
 800939a:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha<0) plan.alpha = 1.0;
 800939c:	4b51      	ldr	r3, [pc, #324]	; (80094e4 <UI_PIDSetting+0x49c>)
 800939e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80093a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093aa:	d503      	bpl.n	80093b4 <UI_PIDSetting+0x36c>
 80093ac:	4b4d      	ldr	r3, [pc, #308]	; (80094e4 <UI_PIDSetting+0x49c>)
 80093ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 80093b4:	2301      	movs	r3, #1
 80093b6:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80093b8:	e651      	b.n	800905e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d123      	bne.n	800940c <UI_PIDSetting+0x3c4>
				plan.alpha+=0.01;
 80093c4:	4b47      	ldr	r3, [pc, #284]	; (80094e4 <UI_PIDSetting+0x49c>)
 80093c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7f7 f8bd 	bl	8000548 <__aeabi_f2d>
 80093ce:	a340      	add	r3, pc, #256	; (adr r3, 80094d0 <UI_PIDSetting+0x488>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f7f6 ff5a 	bl	800028c <__adddf3>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4610      	mov	r0, r2
 80093de:	4619      	mov	r1, r3
 80093e0:	f7f7 fc02 	bl	8000be8 <__aeabi_d2f>
 80093e4:	4603      	mov	r3, r0
 80093e6:	4a3f      	ldr	r2, [pc, #252]	; (80094e4 <UI_PIDSetting+0x49c>)
 80093e8:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha>1.0) plan.alpha = 0.0;
 80093ea:	4b3e      	ldr	r3, [pc, #248]	; (80094e4 <UI_PIDSetting+0x49c>)
 80093ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80093f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fc:	dd03      	ble.n	8009406 <UI_PIDSetting+0x3be>
 80093fe:	4b39      	ldr	r3, [pc, #228]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 8009406:	2301      	movs	r3, #1
 8009408:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800940a:	e628      	b.n	800905e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009412:	2b30      	cmp	r3, #48	; 0x30
 8009414:	d121      	bne.n	800945a <UI_PIDSetting+0x412>
				plan.alpha-=0.0010;
 8009416:	4b33      	ldr	r3, [pc, #204]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	4618      	mov	r0, r3
 800941c:	f7f7 f894 	bl	8000548 <__aeabi_f2d>
 8009420:	a32d      	add	r3, pc, #180	; (adr r3, 80094d8 <UI_PIDSetting+0x490>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff2f 	bl	8000288 <__aeabi_dsub>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4610      	mov	r0, r2
 8009430:	4619      	mov	r1, r3
 8009432:	f7f7 fbd9 	bl	8000be8 <__aeabi_d2f>
 8009436:	4603      	mov	r3, r0
 8009438:	4a2a      	ldr	r2, [pc, #168]	; (80094e4 <UI_PIDSetting+0x49c>)
 800943a:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha<0) plan.alpha = 1.0;
 800943c:	4b29      	ldr	r3, [pc, #164]	; (80094e4 <UI_PIDSetting+0x49c>)
 800943e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944a:	d503      	bpl.n	8009454 <UI_PIDSetting+0x40c>
 800944c:	4b25      	ldr	r3, [pc, #148]	; (80094e4 <UI_PIDSetting+0x49c>)
 800944e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009452:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 8009454:	2301      	movs	r3, #1
 8009456:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009458:	e601      	b.n	800905e <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009460:	2b22      	cmp	r3, #34	; 0x22
 8009462:	d12b      	bne.n	80094bc <UI_PIDSetting+0x474>
				plan.alpha+=0.001;
 8009464:	4b1f      	ldr	r3, [pc, #124]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009468:	4618      	mov	r0, r3
 800946a:	f7f7 f86d 	bl	8000548 <__aeabi_f2d>
 800946e:	a31a      	add	r3, pc, #104	; (adr r3, 80094d8 <UI_PIDSetting+0x490>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f6 ff0a 	bl	800028c <__adddf3>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4610      	mov	r0, r2
 800947e:	4619      	mov	r1, r3
 8009480:	f7f7 fbb2 	bl	8000be8 <__aeabi_d2f>
 8009484:	4603      	mov	r3, r0
 8009486:	4a17      	ldr	r2, [pc, #92]	; (80094e4 <UI_PIDSetting+0x49c>)
 8009488:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha>1.0) plan.alpha = 0.0;
 800948a:	4b16      	ldr	r3, [pc, #88]	; (80094e4 <UI_PIDSetting+0x49c>)
 800948c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949c:	dd03      	ble.n	80094a6 <UI_PIDSetting+0x45e>
 800949e:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <UI_PIDSetting+0x49c>)
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 80094a6:	2301      	movs	r3, #1
 80094a8:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80094aa:	e5d8      	b.n	800905e <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80094ac:	bf00      	nop
 80094ae:	e5de      	b.n	800906e <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 80094b0:	bf00      	nop
 80094b2:	e5dc      	b.n	800906e <UI_PIDSetting+0x26>
			break;
 80094b4:	bf00      	nop
 80094b6:	e5da      	b.n	800906e <UI_PIDSetting+0x26>
			break;
 80094b8:	bf00      	nop
 80094ba:	e5d8      	b.n	800906e <UI_PIDSetting+0x26>
			}
			break;
 80094bc:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80094be:	e5d6      	b.n	800906e <UI_PIDSetting+0x26>
		}
	}
	return UI_IDLE;
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd90      	pop	{r4, r7, pc}
 80094c8:	9999999a 	.word	0x9999999a
 80094cc:	3fb99999 	.word	0x3fb99999
 80094d0:	47ae147b 	.word	0x47ae147b
 80094d4:	3f847ae1 	.word	0x3f847ae1
 80094d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80094dc:	3f50624d 	.word	0x3f50624d
 80094e0:	20000fed 	.word	0x20000fed
 80094e4:	20000d60 	.word	0x20000d60

080094e8 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	; 0x28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<4; i++) {
 80094f2:	2301      	movs	r3, #1
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
 80094f6:	e053      	b.n	80095a0 <UI_SpeedSetDisplay+0xb8>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d109      	bne.n	8009514 <UI_SpeedSetDisplay+0x2c>
 8009500:	492b      	ldr	r1, [pc, #172]	; (80095b0 <UI_SpeedSetDisplay+0xc8>)
 8009502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009504:	4613      	mov	r3, r2
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	1a9b      	subs	r3, r3, r2
 800950a:	440b      	add	r3, r1
 800950c:	3302      	adds	r3, #2
 800950e:	2201      	movs	r2, #1
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e008      	b.n	8009526 <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8009514:	4926      	ldr	r1, [pc, #152]	; (80095b0 <UI_SpeedSetDisplay+0xc8>)
 8009516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009518:	4613      	mov	r3, r2
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	440b      	add	r3, r1
 8009520:	3302      	adds	r3, #2
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	2b03      	cmp	r3, #3
 800952a:	d01d      	beq.n	8009568 <UI_SpeedSetDisplay+0x80>
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	2b03      	cmp	r3, #3
 8009530:	dc27      	bgt.n	8009582 <UI_SpeedSetDisplay+0x9a>
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	2b01      	cmp	r3, #1
 8009536:	d003      	beq.n	8009540 <UI_SpeedSetDisplay+0x58>
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	2b02      	cmp	r3, #2
 800953c:	d00a      	beq.n	8009554 <UI_SpeedSetDisplay+0x6c>
 800953e:	e020      	b.n	8009582 <UI_SpeedSetDisplay+0x9a>
		case 1:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 8009540:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <UI_SpeedSetDisplay+0xcc>)
 8009542:	7d9b      	ldrb	r3, [r3, #22]
 8009544:	461a      	mov	r2, r3
 8009546:	f107 030c 	add.w	r3, r7, #12
 800954a:	491b      	ldr	r1, [pc, #108]	; (80095b8 <UI_SpeedSetDisplay+0xd0>)
 800954c:	4618      	mov	r0, r3
 800954e:	f006 fa7b 	bl	800fa48 <siprintf>
			break;
 8009552:	e016      	b.n	8009582 <UI_SpeedSetDisplay+0x9a>
		case 2:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 8009554:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <UI_SpeedSetDisplay+0xcc>)
 8009556:	7ddb      	ldrb	r3, [r3, #23]
 8009558:	461a      	mov	r2, r3
 800955a:	f107 030c 	add.w	r3, r7, #12
 800955e:	4917      	ldr	r1, [pc, #92]	; (80095bc <UI_SpeedSetDisplay+0xd4>)
 8009560:	4618      	mov	r0, r3
 8009562:	f006 fa71 	bl	800fa48 <siprintf>
			break;
 8009566:	e00c      	b.n	8009582 <UI_SpeedSetDisplay+0x9a>
		case 3:
			sprintf(buff, "Accel ~ %-1.2f", plan.acc);
 8009568:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <UI_SpeedSetDisplay+0xcc>)
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	4618      	mov	r0, r3
 800956e:	f7f6 ffeb 	bl	8000548 <__aeabi_f2d>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	f107 000c 	add.w	r0, r7, #12
 800957a:	4911      	ldr	r1, [pc, #68]	; (80095c0 <UI_SpeedSetDisplay+0xd8>)
 800957c:	f006 fa64 	bl	800fa48 <siprintf>
			break;
 8009580:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8009582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009584:	4613      	mov	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	1a9b      	subs	r3, r3, r2
 800958a:	4a09      	ldr	r2, [pc, #36]	; (80095b0 <UI_SpeedSetDisplay+0xc8>)
 800958c:	4413      	add	r3, r2
 800958e:	f107 020c 	add.w	r2, r7, #12
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f7f8 f97b 	bl	8001890 <DISP_DisplayText>
	for(int i=1; i<4; i++) {
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	3301      	adds	r3, #1
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	dda8      	ble.n	80094f8 <UI_SpeedSetDisplay+0x10>
	}
}
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	3728      	adds	r7, #40	; 0x28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000fbc 	.word	0x20000fbc
 80095b4:	20000d60 	.word	0x20000d60
 80095b8:	08012408 	.word	0x08012408
 80095bc:	08012418 	.word	0x08012418
 80095c0:	08012428 	.word	0x08012428

080095c4 <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 1;
 80095ca:	2301      	movs	r3, #1
 80095cc:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 80095d6:	4980      	ldr	r1, [pc, #512]	; (80097d8 <UI_SpeedSetting+0x214>)
 80095d8:	4880      	ldr	r0, [pc, #512]	; (80097dc <UI_SpeedSetting+0x218>)
 80095da:	f7f8 f959 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff ff81 	bl	80094e8 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 80095e6:	f000 fba9 	bl	8009d3c <HAL_GetTick>
 80095ea:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 80095ec:	f000 fba6 	bl	8009d3c <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	7b7a      	ldrb	r2, [r7, #13]
 80095f8:	2a01      	cmp	r2, #1
 80095fa:	d101      	bne.n	8009600 <UI_SpeedSetting+0x3c>
 80095fc:	221e      	movs	r2, #30
 80095fe:	e000      	b.n	8009602 <UI_SpeedSetting+0x3e>
 8009600:	2246      	movs	r2, #70	; 0x46
 8009602:	429a      	cmp	r2, r3
 8009604:	f200 80df 	bhi.w	80097c6 <UI_SpeedSetting+0x202>
		bt2 = UI_ReadButton();
 8009608:	f7fd f9c6 	bl	8006998 <UI_ReadButton>
 800960c:	4603      	mov	r3, r0
 800960e:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	429a      	cmp	r2, r3
 8009616:	d103      	bne.n	8009620 <UI_SpeedSetting+0x5c>
 8009618:	7b7b      	ldrb	r3, [r7, #13]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 80d5 	beq.w	80097ca <UI_SpeedSetting+0x206>
		bt = bt2;
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <UI_SpeedSetting+0x80>
			if(num_menu!=3) num_menu++;
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b03      	cmp	r3, #3
 8009632:	d002      	beq.n	800963a <UI_SpeedSetting+0x76>
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	3301      	adds	r3, #1
 8009638:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 800963e:	f7fc fa35 	bl	8005aac <Storage_SetSpeed>
			goto ui_mem;
 8009642:	e7cc      	b.n	80095de <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00e      	beq.n	800966c <UI_SpeedSetting+0xa8>
			if(num_menu==1) {
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d103      	bne.n	800965c <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 8009654:	f7fc fa2a 	bl	8005aac <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8009658:	2302      	movs	r3, #2
 800965a:	e0b8      	b.n	80097ce <UI_SpeedSetting+0x20a>
			}
			else num_menu--;
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	3b01      	subs	r3, #1
 8009660:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8009666:	f7fc fa21 	bl	8005aac <Storage_SetSpeed>
			goto ui_mem;
 800966a:	e7b8      	b.n	80095de <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <UI_SpeedSetting+0xbe>
			num_menu = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 800967a:	f7fc fa17 	bl	8005aac <Storage_SetSpeed>
			return UI_HOMESCREEN;
 800967e:	2302      	movs	r3, #2
 8009680:	e0a5      	b.n	80097ce <UI_SpeedSetting+0x20a>
		}
		switch(num_menu) {
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b03      	cmp	r3, #3
 8009686:	d05e      	beq.n	8009746 <UI_SpeedSetting+0x182>
 8009688:	2b03      	cmp	r3, #3
 800968a:	dcaf      	bgt.n	80095ec <UI_SpeedSetting+0x28>
 800968c:	2b01      	cmp	r3, #1
 800968e:	d002      	beq.n	8009696 <UI_SpeedSetting+0xd2>
 8009690:	2b02      	cmp	r3, #2
 8009692:	d02c      	beq.n	80096ee <UI_SpeedSetting+0x12a>
 8009694:	e09a      	b.n	80097cc <UI_SpeedSetting+0x208>
		case 1 :
			if(bt & SW_LF_PRESS) {
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	d010      	beq.n	80096c2 <UI_SpeedSetting+0xfe>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 80096a0:	4b4f      	ldr	r3, [pc, #316]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096a2:	7d9b      	ldrb	r3, [r3, #22]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d103      	bne.n	80096b0 <UI_SpeedSetting+0xec>
 80096a8:	4b4d      	ldr	r3, [pc, #308]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096aa:	2263      	movs	r2, #99	; 0x63
 80096ac:	759a      	strb	r2, [r3, #22]
 80096ae:	e005      	b.n	80096bc <UI_SpeedSetting+0xf8>
 80096b0:	4b4b      	ldr	r3, [pc, #300]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096b2:	7d9b      	ldrb	r3, [r3, #22]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	4b49      	ldr	r3, [pc, #292]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096ba:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 80096bc:	2301      	movs	r3, #1
 80096be:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80096c0:	e78d      	b.n	80095de <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d010      	beq.n	80096ee <UI_SpeedSetting+0x12a>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 80096cc:	4b44      	ldr	r3, [pc, #272]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096ce:	7d9b      	ldrb	r3, [r3, #22]
 80096d0:	2b63      	cmp	r3, #99	; 0x63
 80096d2:	d103      	bne.n	80096dc <UI_SpeedSetting+0x118>
 80096d4:	4b42      	ldr	r3, [pc, #264]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	759a      	strb	r2, [r3, #22]
 80096da:	e005      	b.n	80096e8 <UI_SpeedSetting+0x124>
 80096dc:	4b40      	ldr	r3, [pc, #256]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096de:	7d9b      	ldrb	r3, [r3, #22]
 80096e0:	3301      	adds	r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	4b3e      	ldr	r3, [pc, #248]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096e6:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 80096e8:	2301      	movs	r3, #1
 80096ea:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80096ec:	e777      	b.n	80095de <UI_SpeedSetting+0x1a>
			}
		case 2 :
			if(bt & SW_LF_PRESS) {
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d010      	beq.n	800971a <UI_SpeedSetting+0x156>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 80096f8:	4b39      	ldr	r3, [pc, #228]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80096fa:	7ddb      	ldrb	r3, [r3, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <UI_SpeedSetting+0x144>
 8009700:	4b37      	ldr	r3, [pc, #220]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009702:	2263      	movs	r2, #99	; 0x63
 8009704:	75da      	strb	r2, [r3, #23]
 8009706:	e005      	b.n	8009714 <UI_SpeedSetting+0x150>
 8009708:	4b35      	ldr	r3, [pc, #212]	; (80097e0 <UI_SpeedSetting+0x21c>)
 800970a:	7ddb      	ldrb	r3, [r3, #23]
 800970c:	3b01      	subs	r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b33      	ldr	r3, [pc, #204]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009712:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8009714:	2301      	movs	r3, #1
 8009716:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009718:	e761      	b.n	80095de <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <UI_SpeedSetting+0x182>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 8009724:	4b2e      	ldr	r3, [pc, #184]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009726:	7ddb      	ldrb	r3, [r3, #23]
 8009728:	2b63      	cmp	r3, #99	; 0x63
 800972a:	d103      	bne.n	8009734 <UI_SpeedSetting+0x170>
 800972c:	4b2c      	ldr	r3, [pc, #176]	; (80097e0 <UI_SpeedSetting+0x21c>)
 800972e:	2200      	movs	r2, #0
 8009730:	75da      	strb	r2, [r3, #23]
 8009732:	e005      	b.n	8009740 <UI_SpeedSetting+0x17c>
 8009734:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009736:	7ddb      	ldrb	r3, [r3, #23]
 8009738:	3301      	adds	r3, #1
 800973a:	b2da      	uxtb	r2, r3
 800973c:	4b28      	ldr	r3, [pc, #160]	; (80097e0 <UI_SpeedSetting+0x21c>)
 800973e:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8009740:	2301      	movs	r3, #1
 8009742:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009744:	e74b      	b.n	80095de <UI_SpeedSetting+0x1a>
			}
		case 3 :
			if(bt & SW_LF_PRESS) {
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b00      	cmp	r3, #0
 800974e:	d018      	beq.n	8009782 <UI_SpeedSetting+0x1be>
				if(plan.acc==0) plan.acc = 99.; else plan.acc-=1;
 8009750:	4b23      	ldr	r3, [pc, #140]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009752:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975e:	d103      	bne.n	8009768 <UI_SpeedSetting+0x1a4>
 8009760:	4b1f      	ldr	r3, [pc, #124]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009762:	4a20      	ldr	r2, [pc, #128]	; (80097e4 <UI_SpeedSetting+0x220>)
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c
 8009766:	e009      	b.n	800977c <UI_SpeedSetting+0x1b8>
 8009768:	4b1d      	ldr	r3, [pc, #116]	; (80097e0 <UI_SpeedSetting+0x21c>)
 800976a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800976e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009776:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009778:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				bt_status = 1;
 800977c:	2301      	movs	r3, #1
 800977e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009780:	e72d      	b.n	80095de <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	f43f af2f 	beq.w	80095ec <UI_SpeedSetting+0x28>
				if(plan.acc==99) plan.acc = 0; else plan.acc+=1;
 800978e:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <UI_SpeedSetting+0x21c>)
 8009790:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009794:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80097e8 <UI_SpeedSetting+0x224>
 8009798:	eef4 7a47 	vcmp.f32	s15, s14
 800979c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a0:	d104      	bne.n	80097ac <UI_SpeedSetting+0x1e8>
 80097a2:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80097aa:	e009      	b.n	80097c0 <UI_SpeedSetting+0x1fc>
 80097ac:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80097ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80097b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <UI_SpeedSetting+0x21c>)
 80097bc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				bt_status = 1;
 80097c0:	2301      	movs	r3, #1
 80097c2:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80097c4:	e70b      	b.n	80095de <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 80097c6:	bf00      	nop
 80097c8:	e710      	b.n	80095ec <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 80097ca:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 80097cc:	e70e      	b.n	80095ec <UI_SpeedSetting+0x28>
			}

		}
	}
	return UI_IDLE;
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	08012438 	.word	0x08012438
 80097dc:	20000f28 	.word	0x20000f28
 80097e0:	20000d60 	.word	0x20000d60
 80097e4:	42c60000 	.word	0x42c60000
 80097e8:	42c60000 	.word	0x42c60000

080097ec <UI_Run>:


UI_Menu_Lists UI_Run() {
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 80097f2:	f7fa f8a1 	bl	8003938 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 80097f6:	f7fa f8f1 	bl	80039dc <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 80097fa:	4b3c      	ldr	r3, [pc, #240]	; (80098ec <UI_Run+0x100>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	4b3b      	ldr	r3, [pc, #236]	; (80098f0 <UI_Run+0x104>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	4619      	mov	r1, r3
 8009806:	4b3b      	ldr	r3, [pc, #236]	; (80098f4 <UI_Run+0x108>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	4638      	mov	r0, r7
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	460b      	mov	r3, r1
 8009810:	4939      	ldr	r1, [pc, #228]	; (80098f8 <UI_Run+0x10c>)
 8009812:	f006 f919 	bl	800fa48 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8009816:	463b      	mov	r3, r7
 8009818:	4619      	mov	r1, r3
 800981a:	4838      	ldr	r0, [pc, #224]	; (80098fc <UI_Run+0x110>)
 800981c:	f7f8 f838 	bl	8001890 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 8009820:	4b37      	ldr	r3, [pc, #220]	; (8009900 <UI_Run+0x114>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	461a      	mov	r2, r3
 8009826:	4b37      	ldr	r3, [pc, #220]	; (8009904 <UI_Run+0x118>)
 8009828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800982c:	463b      	mov	r3, r7
 800982e:	4936      	ldr	r1, [pc, #216]	; (8009908 <UI_Run+0x11c>)
 8009830:	4618      	mov	r0, r3
 8009832:	f006 f909 	bl	800fa48 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 8009836:	463b      	mov	r3, r7
 8009838:	4619      	mov	r1, r3
 800983a:	4834      	ldr	r0, [pc, #208]	; (800990c <UI_Run+0x120>)
 800983c:	f7f8 f828 	bl	8001890 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 8009840:	4b33      	ldr	r3, [pc, #204]	; (8009910 <UI_Run+0x124>)
 8009842:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800984a:	ee17 3a90 	vmov	r3, s15
 800984e:	b21b      	sxth	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <UI_Run+0x124>)
 8009854:	edd3 7a08 	vldr	s15, [r3, #32]
 8009858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800985c:	ee17 3a90 	vmov	r3, s15
 8009860:	b21b      	sxth	r3, r3
 8009862:	4638      	mov	r0, r7
 8009864:	492b      	ldr	r1, [pc, #172]	; (8009914 <UI_Run+0x128>)
 8009866:	f006 f8ef 	bl	800fa48 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 800986a:	463b      	mov	r3, r7
 800986c:	4619      	mov	r1, r3
 800986e:	482a      	ldr	r0, [pc, #168]	; (8009918 <UI_Run+0x12c>)
 8009870:	f7f8 f80e 	bl	8001890 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8009874:	4b29      	ldr	r3, [pc, #164]	; (800991c <UI_Run+0x130>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	d027      	beq.n	80098d0 <UI_Run+0xe4>
		Plan_UIRoutine();
 8009880:	f7fa f8ac 	bl	80039dc <Plan_UIRoutine>
		UI_ShowSensor();
 8009884:	f7fd f80a 	bl	800689c <UI_ShowSensor>
		bt = UI_ReadButton();
 8009888:	f7fd f886 	bl	8006998 <UI_ReadButton>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	4b23      	ldr	r3, [pc, #140]	; (8009920 <UI_Run+0x134>)
 8009892:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 8009894:	4b22      	ldr	r3, [pc, #136]	; (8009920 <UI_Run+0x134>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <UI_Run+0xca>
			main_flag &=~0x01;
 80098a0:	4b1e      	ldr	r3, [pc, #120]	; (800991c <UI_Run+0x130>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	4b1c      	ldr	r3, [pc, #112]	; (800991c <UI_Run+0x130>)
 80098ac:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 80098ae:	f7fa f80b 	bl	80038c8 <Plan_Stop>
			return UI_HOMESCREEN;
 80098b2:	2302      	movs	r3, #2
 80098b4:	e016      	b.n	80098e4 <UI_Run+0xf8>
		}
		if(main_flag & 0x80) {
 80098b6:	4b19      	ldr	r3, [pc, #100]	; (800991c <UI_Run+0x130>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dad9      	bge.n	8009874 <UI_Run+0x88>
			main_flag &=~0x80;
 80098c0:	4b16      	ldr	r3, [pc, #88]	; (800991c <UI_Run+0x130>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	4b14      	ldr	r3, [pc, #80]	; (800991c <UI_Run+0x130>)
 80098cc:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 80098ce:	e792      	b.n	80097f6 <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 80098d0:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 80098d2:	4914      	ldr	r1, [pc, #80]	; (8009924 <UI_Run+0x138>)
 80098d4:	4814      	ldr	r0, [pc, #80]	; (8009928 <UI_Run+0x13c>)
 80098d6:	f7f7 ffdb 	bl	8001890 <DISP_DisplayText>
	HAL_Delay(500);
 80098da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098de:	f000 fa39 	bl	8009d54 <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 80098e2:	2302      	movs	r3, #2
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20000cd9 	.word	0x20000cd9
 80098f0:	20000cd8 	.word	0x20000cd8
 80098f4:	20000cd5 	.word	0x20000cd5
 80098f8:	08012018 	.word	0x08012018
 80098fc:	20000f28 	.word	0x20000f28
 8009900:	20000d50 	.word	0x20000d50
 8009904:	200002c4 	.word	0x200002c4
 8009908:	08012440 	.word	0x08012440
 800990c:	20000fca 	.word	0x20000fca
 8009910:	20000a8c 	.word	0x20000a8c
 8009914:	0801244c 	.word	0x0801244c
 8009918:	20000fd1 	.word	0x20000fd1
 800991c:	20000a6c 	.word	0x20000a6c
 8009920:	20000fee 	.word	0x20000fee
 8009924:	08012458 	.word	0x08012458
 8009928:	20000efc 	.word	0x20000efc

0800992c <UI_Init>:


void UI_Init() {
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 8009930:	f7fd f8b6 	bl	8006aa0 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 8009934:	f7fd faa6 	bl	8006e84 <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 8009938:	f7fd fc6c 	bl	8007214 <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 800993c:	f7fe fc50 	bl	80081e0 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 8009940:	f7fe fef8 	bl	8008734 <UI_CPDisplayInit>
}
 8009944:	bf00      	nop
 8009946:	bd80      	pop	{r7, pc}

08009948 <UI_Main>:

void UI_Main() {
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 800994c:	f7f8 f96a 	bl	8001c24 <DISP_ClearAll>
	switch(retval) {
 8009950:	4b3b      	ldr	r3, [pc, #236]	; (8009a40 <UI_Main+0xf8>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	2b0c      	cmp	r3, #12
 8009958:	d870      	bhi.n	8009a3c <UI_Main+0xf4>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <UI_Main+0x18>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009995 	.word	0x08009995
 8009964:	080099a3 	.word	0x080099a3
 8009968:	080099b1 	.word	0x080099b1
 800996c:	080099bf 	.word	0x080099bf
 8009970:	080099cd 	.word	0x080099cd
 8009974:	080099db 	.word	0x080099db
 8009978:	080099e9 	.word	0x080099e9
 800997c:	080099f7 	.word	0x080099f7
 8009980:	08009a05 	.word	0x08009a05
 8009984:	08009a13 	.word	0x08009a13
 8009988:	08009a21 	.word	0x08009a21
 800998c:	08009a3d 	.word	0x08009a3d
 8009990:	08009a2f 	.word	0x08009a2f
	case UI_STARTUP:
		retval = UI_Startup();
 8009994:	f7fe fdfe 	bl	8008594 <UI_Startup>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <UI_Main+0xf8>)
 800999e:	701a      	strb	r2, [r3, #0]
		break;
 80099a0:	e04c      	b.n	8009a3c <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 80099a2:	f7fd f95b 	bl	8006c5c <UI_HomeScreen>
 80099a6:	4603      	mov	r3, r0
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <UI_Main+0xf8>)
 80099ac:	701a      	strb	r2, [r3, #0]
		break;
 80099ae:	e045      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 80099b0:	f7ff fe08 	bl	80095c4 <UI_SpeedSetting>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	4b21      	ldr	r3, [pc, #132]	; (8009a40 <UI_Main+0xf8>)
 80099ba:	701a      	strb	r2, [r3, #0]
		break;
 80099bc:	e03e      	b.n	8009a3c <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 80099be:	f7ff ff15 	bl	80097ec <UI_Run>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	4b1e      	ldr	r3, [pc, #120]	; (8009a40 <UI_Main+0xf8>)
 80099c8:	701a      	strb	r2, [r3, #0]
		break;
 80099ca:	e037      	b.n	8009a3c <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 80099cc:	f7fd ff84 	bl	80078d8 <UI_PlanSet>
 80099d0:	4603      	mov	r3, r0
 80099d2:	461a      	mov	r2, r3
 80099d4:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <UI_Main+0xf8>)
 80099d6:	701a      	strb	r2, [r3, #0]
		break;
 80099d8:	e030      	b.n	8009a3c <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 80099da:	f7ff f88d 	bl	8008af8 <UI_PlanSelect>
 80099de:	4603      	mov	r3, r0
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <UI_Main+0xf8>)
 80099e4:	701a      	strb	r2, [r3, #0]
		break;
 80099e6:	e029      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 80099e8:	f7fd fb38 	bl	800705c <UI_Setting>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <UI_Main+0xf8>)
 80099f2:	701a      	strb	r2, [r3, #0]
		break;
 80099f4:	e022      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 80099f6:	f7fe fcb5 	bl	8008364 <UI_ADCThreshold>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <UI_Main+0xf8>)
 8009a00:	701a      	strb	r2, [r3, #0]
		break;
 8009a02:	e01b      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 8009a04:	f7fe fd7e 	bl	8008504 <UI_AutoCalib>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <UI_Main+0xf8>)
 8009a0e:	701a      	strb	r2, [r3, #0]
		break;
 8009a10:	e014      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 8009a12:	f7fe ff65 	bl	80088e0 <UI_CP>
 8009a16:	4603      	mov	r3, r0
 8009a18:	461a      	mov	r2, r3
 8009a1a:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <UI_Main+0xf8>)
 8009a1c:	701a      	strb	r2, [r3, #0]
		break;
 8009a1e:	e00d      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 8009a20:	f7ff fb12 	bl	8009048 <UI_PIDSetting>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461a      	mov	r2, r3
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <UI_Main+0xf8>)
 8009a2a:	701a      	strb	r2, [r3, #0]
		break;
 8009a2c:	e006      	b.n	8009a3c <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 8009a2e:	f7ff f97b 	bl	8008d28 <UI_MemSetting>
 8009a32:	4603      	mov	r3, r0
 8009a34:	461a      	mov	r2, r3
 8009a36:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <UI_Main+0xf8>)
 8009a38:	701a      	strb	r2, [r3, #0]
		break;
 8009a3a:	bf00      	nop
	default:
		;
	}
}
 8009a3c:	bf00      	nop
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000321 	.word	0x20000321

08009a44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009a48:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a4a:	4a12      	ldr	r2, [pc, #72]	; (8009a94 <MX_USART3_UART_Init+0x50>)
 8009a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009a4e:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009a56:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009a62:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a6a:	220c      	movs	r2, #12
 8009a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a6e:	4b08      	ldr	r3, [pc, #32]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a74:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <MX_USART3_UART_Init+0x4c>)
 8009a7c:	f004 fc4e 	bl	800e31c <HAL_UART_Init>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009a86:	f7f8 fc54 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009a8a:	bf00      	nop
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000ff0 	.word	0x20000ff0
 8009a94:	40004800 	.word	0x40004800

08009a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa0:	f107 0314 	add.w	r3, r7, #20
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	609a      	str	r2, [r3, #8]
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <HAL_UART_MspInit+0x84>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d12c      	bne.n	8009b14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009aba:	2300      	movs	r3, #0
 8009abc:	613b      	str	r3, [r7, #16]
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <HAL_UART_MspInit+0x88>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	4a17      	ldr	r2, [pc, #92]	; (8009b20 <HAL_UART_MspInit+0x88>)
 8009ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8009aca:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <HAL_UART_MspInit+0x88>)
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <HAL_UART_MspInit+0x88>)
 8009adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ade:	4a10      	ldr	r2, [pc, #64]	; (8009b20 <HAL_UART_MspInit+0x88>)
 8009ae0:	f043 0304 	orr.w	r3, r3, #4
 8009ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <HAL_UART_MspInit+0x88>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	f003 0304 	and.w	r3, r3, #4
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009af2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af8:	2302      	movs	r3, #2
 8009afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b00:	2303      	movs	r3, #3
 8009b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009b04:	2307      	movs	r3, #7
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b08:	f107 0314 	add.w	r3, r7, #20
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4805      	ldr	r0, [pc, #20]	; (8009b24 <HAL_UART_MspInit+0x8c>)
 8009b10:	f001 fb0c 	bl	800b12c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009b14:	bf00      	nop
 8009b16:	3728      	adds	r7, #40	; 0x28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40004800 	.word	0x40004800
 8009b20:	40023800 	.word	0x40023800
 8009b24:	40020800 	.word	0x40020800

08009b28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b2c:	4b14      	ldr	r3, [pc, #80]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b34:	4b12      	ldr	r3, [pc, #72]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b36:	2204      	movs	r2, #4
 8009b38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b3a:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b40:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b46:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b48:	2202      	movs	r2, #2
 8009b4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b52:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b58:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b5e:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b64:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b6a:	4805      	ldr	r0, [pc, #20]	; (8009b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b6c:	f002 fc6b 	bl	800c446 <HAL_PCD_Init>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009b76:	f7f8 fbdc 	bl	8002332 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009b7a:	bf00      	nop
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20001034 	.word	0x20001034

08009b84 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	605a      	str	r2, [r3, #4]
 8009b96:	609a      	str	r2, [r3, #8]
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba4:	d132      	bne.n	8009c0c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bb6:	4b17      	ldr	r3, [pc, #92]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	613b      	str	r3, [r7, #16]
 8009bc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bd4:	230a      	movs	r3, #10
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bd8:	f107 0314 	add.w	r3, r7, #20
 8009bdc:	4619      	mov	r1, r3
 8009bde:	480e      	ldr	r0, [pc, #56]	; (8009c18 <HAL_PCD_MspInit+0x94>)
 8009be0:	f001 faa4 	bl	800b12c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be8:	4a0a      	ldr	r2, [pc, #40]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bee:	6353      	str	r3, [r2, #52]	; 0x34
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf8:	4a06      	ldr	r2, [pc, #24]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <HAL_PCD_MspInit+0x90>)
 8009c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	3728      	adds	r7, #40	; 0x28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40023800 	.word	0x40023800
 8009c18:	40020000 	.word	0x40020000

08009c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009c20:	480d      	ldr	r0, [pc, #52]	; (8009c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009c22:	490e      	ldr	r1, [pc, #56]	; (8009c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009c24:	4a0e      	ldr	r2, [pc, #56]	; (8009c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c28:	e002      	b.n	8009c30 <LoopCopyDataInit>

08009c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c2e:	3304      	adds	r3, #4

08009c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c34:	d3f9      	bcc.n	8009c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c36:	4a0b      	ldr	r2, [pc, #44]	; (8009c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009c38:	4c0b      	ldr	r4, [pc, #44]	; (8009c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c3c:	e001      	b.n	8009c42 <LoopFillZerobss>

08009c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c40:	3204      	adds	r2, #4

08009c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c44:	d3fb      	bcc.n	8009c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009c46:	f7fc faa9 	bl	800619c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c4a:	f005 ffc9 	bl	800fbe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c4e:	f7f8 fa45 	bl	80020dc <main>
  bx  lr    
 8009c52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c5c:	200004f4 	.word	0x200004f4
  ldr r2, =_sidata
 8009c60:	08012840 	.word	0x08012840
  ldr r2, =_sbss
 8009c64:	200004f4 	.word	0x200004f4
  ldr r4, =_ebss
 8009c68:	20001690 	.word	0x20001690

08009c6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c6c:	e7fe      	b.n	8009c6c <CAN1_RX0_IRQHandler>
	...

08009c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <HAL_Init+0x40>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <HAL_Init+0x40>)
 8009c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <HAL_Init+0x40>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a0a      	ldr	r2, [pc, #40]	; (8009cb0 <HAL_Init+0x40>)
 8009c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c8c:	4b08      	ldr	r3, [pc, #32]	; (8009cb0 <HAL_Init+0x40>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a07      	ldr	r2, [pc, #28]	; (8009cb0 <HAL_Init+0x40>)
 8009c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c98:	2003      	movs	r0, #3
 8009c9a:	f000 fe91 	bl	800a9c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c9e:	200f      	movs	r0, #15
 8009ca0:	f000 f808 	bl	8009cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009ca4:	f7fb fbd8 	bl	8005458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40023c00 	.word	0x40023c00

08009cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cbc:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <HAL_InitTick+0x54>)
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <HAL_InitTick+0x58>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fead 	bl	800aa32 <HAL_SYSTICK_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e00e      	b.n	8009d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b0f      	cmp	r3, #15
 8009ce6:	d80a      	bhi.n	8009cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ce8:	2200      	movs	r2, #0
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	f000 fe71 	bl	800a9d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cf4:	4a06      	ldr	r2, [pc, #24]	; (8009d10 <HAL_InitTick+0x5c>)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e000      	b.n	8009d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	2000028c 	.word	0x2000028c
 8009d0c:	20000328 	.word	0x20000328
 8009d10:	20000324 	.word	0x20000324

08009d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d18:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <HAL_IncTick+0x20>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <HAL_IncTick+0x24>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4413      	add	r3, r2
 8009d24:	4a04      	ldr	r2, [pc, #16]	; (8009d38 <HAL_IncTick+0x24>)
 8009d26:	6013      	str	r3, [r2, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000328 	.word	0x20000328
 8009d38:	20001540 	.word	0x20001540

08009d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8009d40:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <HAL_GetTick+0x14>)
 8009d42:	681b      	ldr	r3, [r3, #0]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	20001540 	.word	0x20001540

08009d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d5c:	f7ff ffee 	bl	8009d3c <HAL_GetTick>
 8009d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d005      	beq.n	8009d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d6e:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <HAL_Delay+0x44>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d7a:	bf00      	nop
 8009d7c:	f7ff ffde 	bl	8009d3c <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d8f7      	bhi.n	8009d7c <HAL_Delay+0x28>
  {
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000328 	.word	0x20000328

08009d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e033      	b.n	8009e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d109      	bne.n	8009dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f7 f9ee 	bl	800119c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	f003 0310 	and.w	r3, r3, #16
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d118      	bne.n	8009e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009de2:	f023 0302 	bic.w	r3, r3, #2
 8009de6:	f043 0202 	orr.w	r2, r3, #2
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fb78 	bl	800a4e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	f043 0201 	orr.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
 8009e0a:	e001      	b.n	8009e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d049      	beq.n	8009eec <HAL_ADC_IRQHandler+0xca>
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d046      	beq.n	8009eec <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	f003 0310 	and.w	r3, r3, #16
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d12b      	bne.n	8009edc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d127      	bne.n	8009edc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d006      	beq.n	8009ea8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d119      	bne.n	8009edc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0220 	bic.w	r2, r2, #32
 8009eb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	f043 0201 	orr.w	r2, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7f8 fa1d 	bl	800231c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f06f 0212 	mvn.w	r2, #18
 8009eea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d057      	beq.n	8009fb2 <HAL_ADC_IRQHandler+0x190>
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d054      	beq.n	8009fb2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0c:	f003 0310 	and.w	r3, r3, #16
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d105      	bne.n	8009f20 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d139      	bne.n	8009fa2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d006      	beq.n	8009f4a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d12b      	bne.n	8009fa2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d124      	bne.n	8009fa2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d11d      	bne.n	8009fa2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d119      	bne.n	8009fa2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9a:	f043 0201 	orr.w	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fc1c 	bl	800a7e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 020c 	mvn.w	r2, #12
 8009fb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d017      	beq.n	8009ff8 <HAL_ADC_IRQHandler+0x1d6>
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d014      	beq.n	8009ff8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d10d      	bne.n	8009ff8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f945 	bl	800a278 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f06f 0201 	mvn.w	r2, #1
 8009ff6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a006:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d015      	beq.n	800a03a <HAL_ADC_IRQHandler+0x218>
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d012      	beq.n	800a03a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a018:	f043 0202 	orr.w	r2, r3, #2
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0220 	mvn.w	r2, #32
 800a028:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f92e 	bl	800a28c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f06f 0220 	mvn.w	r2, #32
 800a038:	601a      	str	r2, [r3, #0]
  }
}
 800a03a:	bf00      	nop
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <HAL_ADC_Start_DMA+0x1e>
 800a05e:	2302      	movs	r3, #2
 800a060:	e0e9      	b.n	800a236 <HAL_ADC_Start_DMA+0x1f2>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b01      	cmp	r3, #1
 800a076:	d018      	beq.n	800a0aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f042 0201 	orr.w	r2, r2, #1
 800a086:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a088:	4b6d      	ldr	r3, [pc, #436]	; (800a240 <HAL_ADC_Start_DMA+0x1fc>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a6d      	ldr	r2, [pc, #436]	; (800a244 <HAL_ADC_Start_DMA+0x200>)
 800a08e:	fba2 2303 	umull	r2, r3, r2, r3
 800a092:	0c9a      	lsrs	r2, r3, #18
 800a094:	4613      	mov	r3, r2
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4413      	add	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a09c:	e002      	b.n	800a0a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1f9      	bne.n	800a09e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b8:	d107      	bne.n	800a0ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	f040 80a1 	bne.w	800a21c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a0e2:	f023 0301 	bic.w	r3, r3, #1
 800a0e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d007      	beq.n	800a10c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a104:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a118:	d106      	bne.n	800a128 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11e:	f023 0206 	bic.w	r2, r3, #6
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	645a      	str	r2, [r3, #68]	; 0x44
 800a126:	e002      	b.n	800a12e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a136:	4b44      	ldr	r3, [pc, #272]	; (800a248 <HAL_ADC_Start_DMA+0x204>)
 800a138:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	4a43      	ldr	r2, [pc, #268]	; (800a24c <HAL_ADC_Start_DMA+0x208>)
 800a140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	4a42      	ldr	r2, [pc, #264]	; (800a250 <HAL_ADC_Start_DMA+0x20c>)
 800a148:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	4a41      	ldr	r2, [pc, #260]	; (800a254 <HAL_ADC_Start_DMA+0x210>)
 800a150:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a15a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a16a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a17a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	334c      	adds	r3, #76	; 0x4c
 800a186:	4619      	mov	r1, r3
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f000 fd0c 	bl	800aba8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f003 031f 	and.w	r3, r3, #31
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d12a      	bne.n	800a1f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2d      	ldr	r2, [pc, #180]	; (800a258 <HAL_ADC_Start_DMA+0x214>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d015      	beq.n	800a1d2 <HAL_ADC_Start_DMA+0x18e>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a2c      	ldr	r2, [pc, #176]	; (800a25c <HAL_ADC_Start_DMA+0x218>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d105      	bne.n	800a1bc <HAL_ADC_Start_DMA+0x178>
 800a1b0:	4b25      	ldr	r3, [pc, #148]	; (800a248 <HAL_ADC_Start_DMA+0x204>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f003 031f 	and.w	r3, r3, #31
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a27      	ldr	r2, [pc, #156]	; (800a260 <HAL_ADC_Start_DMA+0x21c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d136      	bne.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
 800a1c6:	4b20      	ldr	r3, [pc, #128]	; (800a248 <HAL_ADC_Start_DMA+0x204>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f003 0310 	and.w	r3, r3, #16
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d130      	bne.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d129      	bne.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a1ee:	609a      	str	r2, [r3, #8]
 800a1f0:	e020      	b.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a18      	ldr	r2, [pc, #96]	; (800a258 <HAL_ADC_Start_DMA+0x214>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d11b      	bne.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d114      	bne.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689a      	ldr	r2, [r3, #8]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a218:	609a      	str	r2, [r3, #8]
 800a21a:	e00b      	b.n	800a234 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a220:	f043 0210 	orr.w	r2, r3, #16
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22c:	f043 0201 	orr.w	r2, r3, #1
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	2000028c 	.word	0x2000028c
 800a244:	431bde83 	.word	0x431bde83
 800a248:	40012300 	.word	0x40012300
 800a24c:	0800a6dd 	.word	0x0800a6dd
 800a250:	0800a797 	.word	0x0800a797
 800a254:	0800a7b3 	.word	0x0800a7b3
 800a258:	40012000 	.word	0x40012000
 800a25c:	40012100 	.word	0x40012100
 800a260:	40012200 	.word	0x40012200

0800a264 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_ADC_ConfigChannel+0x1c>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e105      	b.n	800a4c8 <HAL_ADC_ConfigChannel+0x228>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b09      	cmp	r3, #9
 800a2ca:	d925      	bls.n	800a318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68d9      	ldr	r1, [r3, #12]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	461a      	mov	r2, r3
 800a2da:	4613      	mov	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4413      	add	r3, r2
 800a2e0:	3b1e      	subs	r3, #30
 800a2e2:	2207      	movs	r2, #7
 800a2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e8:	43da      	mvns	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	400a      	ands	r2, r1
 800a2f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68d9      	ldr	r1, [r3, #12]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	689a      	ldr	r2, [r3, #8]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	4618      	mov	r0, r3
 800a304:	4603      	mov	r3, r0
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	4403      	add	r3, r0
 800a30a:	3b1e      	subs	r3, #30
 800a30c:	409a      	lsls	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	e022      	b.n	800a35e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6919      	ldr	r1, [r3, #16]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	461a      	mov	r2, r3
 800a326:	4613      	mov	r3, r2
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	4413      	add	r3, r2
 800a32c:	2207      	movs	r2, #7
 800a32e:	fa02 f303 	lsl.w	r3, r2, r3
 800a332:	43da      	mvns	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	400a      	ands	r2, r1
 800a33a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6919      	ldr	r1, [r3, #16]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	4618      	mov	r0, r3
 800a34e:	4603      	mov	r3, r0
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	4403      	add	r3, r0
 800a354:	409a      	lsls	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b06      	cmp	r3, #6
 800a364:	d824      	bhi.n	800a3b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	3b05      	subs	r3, #5
 800a378:	221f      	movs	r2, #31
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	43da      	mvns	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	400a      	ands	r2, r1
 800a386:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	b29b      	uxth	r3, r3
 800a394:	4618      	mov	r0, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	3b05      	subs	r3, #5
 800a3a2:	fa00 f203 	lsl.w	r2, r0, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	635a      	str	r2, [r3, #52]	; 0x34
 800a3ae:	e04c      	b.n	800a44a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2b0c      	cmp	r3, #12
 800a3b6:	d824      	bhi.n	800a402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	3b23      	subs	r3, #35	; 0x23
 800a3ca:	221f      	movs	r2, #31
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d0:	43da      	mvns	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	400a      	ands	r2, r1
 800a3d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	3b23      	subs	r3, #35	; 0x23
 800a3f4:	fa00 f203 	lsl.w	r2, r0, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a400:	e023      	b.n	800a44a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	3b41      	subs	r3, #65	; 0x41
 800a414:	221f      	movs	r2, #31
 800a416:	fa02 f303 	lsl.w	r3, r2, r3
 800a41a:	43da      	mvns	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	400a      	ands	r2, r1
 800a422:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	4618      	mov	r0, r3
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	3b41      	subs	r3, #65	; 0x41
 800a43e:	fa00 f203 	lsl.w	r2, r0, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a44a:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <HAL_ADC_ConfigChannel+0x234>)
 800a44c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <HAL_ADC_ConfigChannel+0x238>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d109      	bne.n	800a46c <HAL_ADC_ConfigChannel+0x1cc>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b12      	cmp	r3, #18
 800a45e:	d105      	bne.n	800a46c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a19      	ldr	r2, [pc, #100]	; (800a4d8 <HAL_ADC_ConfigChannel+0x238>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d123      	bne.n	800a4be <HAL_ADC_ConfigChannel+0x21e>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b10      	cmp	r3, #16
 800a47c:	d003      	beq.n	800a486 <HAL_ADC_ConfigChannel+0x1e6>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b11      	cmp	r3, #17
 800a484:	d11b      	bne.n	800a4be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b10      	cmp	r3, #16
 800a498:	d111      	bne.n	800a4be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a49a:	4b10      	ldr	r3, [pc, #64]	; (800a4dc <HAL_ADC_ConfigChannel+0x23c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a10      	ldr	r2, [pc, #64]	; (800a4e0 <HAL_ADC_ConfigChannel+0x240>)
 800a4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a4:	0c9a      	lsrs	r2, r3, #18
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a4b0:	e002      	b.n	800a4b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1f9      	bne.n	800a4b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	40012300 	.word	0x40012300
 800a4d8:	40012000 	.word	0x40012000
 800a4dc:	2000028c 	.word	0x2000028c
 800a4e0:	431bde83 	.word	0x431bde83

0800a4e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a4ec:	4b79      	ldr	r3, [pc, #484]	; (800a6d4 <ADC_Init+0x1f0>)
 800a4ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	685a      	ldr	r2, [r3, #4]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	431a      	orrs	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6859      	ldr	r1, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	021a      	lsls	r2, r3, #8
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a53c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6859      	ldr	r1, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a55e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6899      	ldr	r1, [r3, #8]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	4a58      	ldr	r2, [pc, #352]	; (800a6d8 <ADC_Init+0x1f4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d022      	beq.n	800a5c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a58a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6899      	ldr	r1, [r3, #8]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a5ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6899      	ldr	r1, [r3, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	609a      	str	r2, [r3, #8]
 800a5c0:	e00f      	b.n	800a5e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a5d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a5e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f022 0202 	bic.w	r2, r2, #2
 800a5f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6899      	ldr	r1, [r3, #8]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7e1b      	ldrb	r3, [r3, #24]
 800a5fc:	005a      	lsls	r2, r3, #1
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01b      	beq.n	800a648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a61e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a62e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6859      	ldr	r1, [r3, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63a:	3b01      	subs	r3, #1
 800a63c:	035a      	lsls	r2, r3, #13
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
 800a646:	e007      	b.n	800a658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	3b01      	subs	r3, #1
 800a674:	051a      	lsls	r2, r3, #20
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a68c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6899      	ldr	r1, [r3, #8]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a69a:	025a      	lsls	r2, r3, #9
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6899      	ldr	r1, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	029a      	lsls	r2, r3, #10
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	609a      	str	r2, [r3, #8]
}
 800a6c8:	bf00      	nop
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	40012300 	.word	0x40012300
 800a6d8:	0f000001 	.word	0x0f000001

0800a6dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d13c      	bne.n	800a770 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d12b      	bne.n	800a768 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a714:	2b00      	cmp	r3, #0
 800a716:	d127      	bne.n	800a768 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a722:	2b00      	cmp	r3, #0
 800a724:	d006      	beq.n	800a734 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a730:	2b00      	cmp	r3, #0
 800a732:	d119      	bne.n	800a768 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f022 0220 	bic.w	r2, r2, #32
 800a742:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d105      	bne.n	800a768 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a760:	f043 0201 	orr.w	r2, r3, #1
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7f7 fdd7 	bl	800231c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a76e:	e00e      	b.n	800a78e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	f003 0310 	and.w	r3, r3, #16
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff fd85 	bl	800a28c <HAL_ADC_ErrorCallback>
}
 800a782:	e004      	b.n	800a78e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	4798      	blx	r3
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff fd5d 	bl	800a264 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a7aa:	bf00      	nop
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2240      	movs	r2, #64	; 0x40
 800a7c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ca:	f043 0204 	orr.w	r2, r3, #4
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff fd5a 	bl	800a28c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a804:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <__NVIC_SetPriorityGrouping+0x44>)
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a810:	4013      	ands	r3, r2
 800a812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a81c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a826:	4a04      	ldr	r2, [pc, #16]	; (800a838 <__NVIC_SetPriorityGrouping+0x44>)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	60d3      	str	r3, [r2, #12]
}
 800a82c:	bf00      	nop
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	e000ed00 	.word	0xe000ed00

0800a83c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <__NVIC_GetPriorityGrouping+0x18>)
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	0a1b      	lsrs	r3, r3, #8
 800a846:	f003 0307 	and.w	r3, r3, #7
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	e000ed00 	.word	0xe000ed00

0800a858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a866:	2b00      	cmp	r3, #0
 800a868:	db0b      	blt.n	800a882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	f003 021f 	and.w	r2, r3, #31
 800a870:	4907      	ldr	r1, [pc, #28]	; (800a890 <__NVIC_EnableIRQ+0x38>)
 800a872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	2001      	movs	r0, #1
 800a87a:	fa00 f202 	lsl.w	r2, r0, r2
 800a87e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a882:	bf00      	nop
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	e000e100 	.word	0xe000e100

0800a894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	6039      	str	r1, [r7, #0]
 800a89e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	db0a      	blt.n	800a8be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	490c      	ldr	r1, [pc, #48]	; (800a8e0 <__NVIC_SetPriority+0x4c>)
 800a8ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8b2:	0112      	lsls	r2, r2, #4
 800a8b4:	b2d2      	uxtb	r2, r2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a8bc:	e00a      	b.n	800a8d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	4908      	ldr	r1, [pc, #32]	; (800a8e4 <__NVIC_SetPriority+0x50>)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	3b04      	subs	r3, #4
 800a8cc:	0112      	lsls	r2, r2, #4
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	761a      	strb	r2, [r3, #24]
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	e000e100 	.word	0xe000e100
 800a8e4:	e000ed00 	.word	0xe000ed00

0800a8e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b089      	sub	sp, #36	; 0x24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f1c3 0307 	rsb	r3, r3, #7
 800a902:	2b04      	cmp	r3, #4
 800a904:	bf28      	it	cs
 800a906:	2304      	movcs	r3, #4
 800a908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	3304      	adds	r3, #4
 800a90e:	2b06      	cmp	r3, #6
 800a910:	d902      	bls.n	800a918 <NVIC_EncodePriority+0x30>
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3b03      	subs	r3, #3
 800a916:	e000      	b.n	800a91a <NVIC_EncodePriority+0x32>
 800a918:	2300      	movs	r3, #0
 800a91a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a91c:	f04f 32ff 	mov.w	r2, #4294967295
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	fa02 f303 	lsl.w	r3, r2, r3
 800a926:	43da      	mvns	r2, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	401a      	ands	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a930:	f04f 31ff 	mov.w	r1, #4294967295
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	fa01 f303 	lsl.w	r3, r1, r3
 800a93a:	43d9      	mvns	r1, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a940:	4313      	orrs	r3, r2
         );
}
 800a942:	4618      	mov	r0, r3
 800a944:	3724      	adds	r7, #36	; 0x24
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
	...

0800a950 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a950:	b480      	push	{r7}
 800a952:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a954:	f3bf 8f4f 	dsb	sy
}
 800a958:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a95a:	4b06      	ldr	r3, [pc, #24]	; (800a974 <__NVIC_SystemReset+0x24>)
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a962:	4904      	ldr	r1, [pc, #16]	; (800a974 <__NVIC_SystemReset+0x24>)
 800a964:	4b04      	ldr	r3, [pc, #16]	; (800a978 <__NVIC_SystemReset+0x28>)
 800a966:	4313      	orrs	r3, r2
 800a968:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a96a:	f3bf 8f4f 	dsb	sy
}
 800a96e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a970:	bf00      	nop
 800a972:	e7fd      	b.n	800a970 <__NVIC_SystemReset+0x20>
 800a974:	e000ed00 	.word	0xe000ed00
 800a978:	05fa0004 	.word	0x05fa0004

0800a97c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3b01      	subs	r3, #1
 800a988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a98c:	d301      	bcc.n	800a992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a98e:	2301      	movs	r3, #1
 800a990:	e00f      	b.n	800a9b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a992:	4a0a      	ldr	r2, [pc, #40]	; (800a9bc <SysTick_Config+0x40>)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3b01      	subs	r3, #1
 800a998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a99a:	210f      	movs	r1, #15
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	f7ff ff78 	bl	800a894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a9a4:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <SysTick_Config+0x40>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a9aa:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <SysTick_Config+0x40>)
 800a9ac:	2207      	movs	r2, #7
 800a9ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	e000e010 	.word	0xe000e010

0800a9c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff ff13 	bl	800a7f4 <__NVIC_SetPriorityGrouping>
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b086      	sub	sp, #24
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	4603      	mov	r3, r0
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	607a      	str	r2, [r7, #4]
 800a9e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a9e8:	f7ff ff28 	bl	800a83c <__NVIC_GetPriorityGrouping>
 800a9ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	6978      	ldr	r0, [r7, #20]
 800a9f4:	f7ff ff78 	bl	800a8e8 <NVIC_EncodePriority>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff ff47 	bl	800a894 <__NVIC_SetPriority>
}
 800aa06:	bf00      	nop
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	4603      	mov	r3, r0
 800aa16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff ff1b 	bl	800a858 <__NVIC_EnableIRQ>
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800aa2e:	f7ff ff8f 	bl	800a950 <__NVIC_SystemReset>

0800aa32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ff9e 	bl	800a97c <SysTick_Config>
 800aa40:	4603      	mov	r3, r0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aa58:	f7ff f970 	bl	8009d3c <HAL_GetTick>
 800aa5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e099      	b.n	800ab9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0201 	bic.w	r2, r2, #1
 800aa86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa88:	e00f      	b.n	800aaaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa8a:	f7ff f957 	bl	8009d3c <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b05      	cmp	r3, #5
 800aa96:	d908      	bls.n	800aaaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e078      	b.n	800ab9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e8      	bne.n	800aa8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4b38      	ldr	r3, [pc, #224]	; (800aba4 <HAL_DMA_Init+0x158>)
 800aac4:	4013      	ands	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a1b      	ldr	r3, [r3, #32]
 800aaf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	d107      	bne.n	800ab14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f023 0307 	bic.w	r3, r3, #7
 800ab2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	d117      	bne.n	800ab6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00e      	beq.n	800ab6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fa6f 	bl	800b034 <DMA_CheckFifoParam>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d008      	beq.n	800ab6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2240      	movs	r2, #64	; 0x40
 800ab60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e016      	b.n	800ab9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa26 	bl	800afc8 <DMA_CalcBaseAndBitshift>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab84:	223f      	movs	r2, #63	; 0x3f
 800ab86:	409a      	lsls	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	f010803f 	.word	0xf010803f

0800aba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <HAL_DMA_Start_IT+0x26>
 800abca:	2302      	movs	r3, #2
 800abcc:	e040      	b.n	800ac50 <HAL_DMA_Start_IT+0xa8>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d12f      	bne.n	800ac42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2202      	movs	r2, #2
 800abe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 f9b8 	bl	800af6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac00:	223f      	movs	r2, #63	; 0x3f
 800ac02:	409a      	lsls	r2, r3
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0216 	orr.w	r2, r2, #22
 800ac16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d007      	beq.n	800ac30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0208 	orr.w	r2, r2, #8
 800ac2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e005      	b.n	800ac4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac64:	4b8e      	ldr	r3, [pc, #568]	; (800aea0 <HAL_DMA_IRQHandler+0x248>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a8e      	ldr	r2, [pc, #568]	; (800aea4 <HAL_DMA_IRQHandler+0x24c>)
 800ac6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6e:	0a9b      	lsrs	r3, r3, #10
 800ac70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac82:	2208      	movs	r2, #8
 800ac84:	409a      	lsls	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01a      	beq.n	800acc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0304 	and.w	r3, r3, #4
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d013      	beq.n	800acc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 0204 	bic.w	r2, r2, #4
 800acaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb0:	2208      	movs	r2, #8
 800acb2:	409a      	lsls	r2, r3
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbc:	f043 0201 	orr.w	r2, r3, #1
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acc8:	2201      	movs	r2, #1
 800acca:	409a      	lsls	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4013      	ands	r3, r2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d012      	beq.n	800acfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00b      	beq.n	800acfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace6:	2201      	movs	r2, #1
 800ace8:	409a      	lsls	r2, r3
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf2:	f043 0202 	orr.w	r2, r3, #2
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfe:	2204      	movs	r2, #4
 800ad00:	409a      	lsls	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	4013      	ands	r3, r2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d012      	beq.n	800ad30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00b      	beq.n	800ad30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad1c:	2204      	movs	r2, #4
 800ad1e:	409a      	lsls	r2, r3
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad28:	f043 0204 	orr.w	r2, r3, #4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad34:	2210      	movs	r2, #16
 800ad36:	409a      	lsls	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d043      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0308 	and.w	r3, r3, #8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d03c      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad52:	2210      	movs	r2, #16
 800ad54:	409a      	lsls	r2, r3
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d018      	beq.n	800ad9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d108      	bne.n	800ad88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d024      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	4798      	blx	r3
 800ad86:	e01f      	b.n	800adc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01b      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	4798      	blx	r3
 800ad98:	e016      	b.n	800adc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d107      	bne.n	800adb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f022 0208 	bic.w	r2, r2, #8
 800adb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d003      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adcc:	2220      	movs	r2, #32
 800adce:	409a      	lsls	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4013      	ands	r3, r2
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 808f 	beq.w	800aef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8087 	beq.w	800aef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adee:	2220      	movs	r2, #32
 800adf0:	409a      	lsls	r2, r3
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b05      	cmp	r3, #5
 800ae00:	d136      	bne.n	800ae70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0216 	bic.w	r2, r2, #22
 800ae10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	695a      	ldr	r2, [r3, #20]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <HAL_DMA_IRQHandler+0x1da>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d007      	beq.n	800ae42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0208 	bic.w	r2, r2, #8
 800ae40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae46:	223f      	movs	r2, #63	; 0x3f
 800ae48:	409a      	lsls	r2, r3
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d07e      	beq.n	800af64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
        }
        return;
 800ae6e:	e079      	b.n	800af64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d01d      	beq.n	800aeba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10d      	bne.n	800aea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d031      	beq.n	800aef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	4798      	blx	r3
 800ae9c:	e02c      	b.n	800aef8 <HAL_DMA_IRQHandler+0x2a0>
 800ae9e:	bf00      	nop
 800aea0:	2000028c 	.word	0x2000028c
 800aea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d023      	beq.n	800aef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
 800aeb8:	e01e      	b.n	800aef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10f      	bne.n	800aee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0210 	bic.w	r2, r2, #16
 800aed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d032      	beq.n	800af66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d022      	beq.n	800af52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2205      	movs	r2, #5
 800af10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f022 0201 	bic.w	r2, r2, #1
 800af22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	3301      	adds	r3, #1
 800af28:	60bb      	str	r3, [r7, #8]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d307      	bcc.n	800af40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1f2      	bne.n	800af24 <HAL_DMA_IRQHandler+0x2cc>
 800af3e:	e000      	b.n	800af42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800af40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
 800af62:	e000      	b.n	800af66 <HAL_DMA_IRQHandler+0x30e>
        return;
 800af64:	bf00      	nop
    }
  }
}
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	2b40      	cmp	r3, #64	; 0x40
 800af98:	d108      	bne.n	800afac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800afaa:	e007      	b.n	800afbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]
}
 800afbc:	bf00      	nop
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	3b10      	subs	r3, #16
 800afd8:	4a14      	ldr	r2, [pc, #80]	; (800b02c <DMA_CalcBaseAndBitshift+0x64>)
 800afda:	fba2 2303 	umull	r2, r3, r2, r3
 800afde:	091b      	lsrs	r3, r3, #4
 800afe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800afe2:	4a13      	ldr	r2, [pc, #76]	; (800b030 <DMA_CalcBaseAndBitshift+0x68>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d909      	bls.n	800b00a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800affe:	f023 0303 	bic.w	r3, r3, #3
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	659a      	str	r2, [r3, #88]	; 0x58
 800b008:	e007      	b.n	800b01a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	aaaaaaab 	.word	0xaaaaaaab
 800b030:	08012484 	.word	0x08012484

0800b034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d11f      	bne.n	800b08e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b03      	cmp	r3, #3
 800b052:	d856      	bhi.n	800b102 <DMA_CheckFifoParam+0xce>
 800b054:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <DMA_CheckFifoParam+0x28>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b06d 	.word	0x0800b06d
 800b060:	0800b07f 	.word	0x0800b07f
 800b064:	0800b06d 	.word	0x0800b06d
 800b068:	0800b103 	.word	0x0800b103
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d046      	beq.n	800b106 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b07c:	e043      	b.n	800b106 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b086:	d140      	bne.n	800b10a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b08c:	e03d      	b.n	800b10a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b096:	d121      	bne.n	800b0dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d837      	bhi.n	800b10e <DMA_CheckFifoParam+0xda>
 800b09e:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <DMA_CheckFifoParam+0x70>)
 800b0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a4:	0800b0b5 	.word	0x0800b0b5
 800b0a8:	0800b0bb 	.word	0x0800b0bb
 800b0ac:	0800b0b5 	.word	0x0800b0b5
 800b0b0:	0800b0cd 	.word	0x0800b0cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b8:	e030      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d025      	beq.n	800b112 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0ca:	e022      	b.n	800b112 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b0d4:	d11f      	bne.n	800b116 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b0da:	e01c      	b.n	800b116 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d903      	bls.n	800b0ea <DMA_CheckFifoParam+0xb6>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d003      	beq.n	800b0f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b0e8:	e018      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ee:	e015      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00e      	beq.n	800b11a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b100:	e00b      	b.n	800b11a <DMA_CheckFifoParam+0xe6>
      break;
 800b102:	bf00      	nop
 800b104:	e00a      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      break;
 800b106:	bf00      	nop
 800b108:	e008      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      break;
 800b10a:	bf00      	nop
 800b10c:	e006      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      break;
 800b10e:	bf00      	nop
 800b110:	e004      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      break;
 800b112:	bf00      	nop
 800b114:	e002      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      break;   
 800b116:	bf00      	nop
 800b118:	e000      	b.n	800b11c <DMA_CheckFifoParam+0xe8>
      break;
 800b11a:	bf00      	nop
    }
  } 
  
  return status; 
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop

0800b12c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b089      	sub	sp, #36	; 0x24
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b13e:	2300      	movs	r3, #0
 800b140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b142:	2300      	movs	r3, #0
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	e16b      	b.n	800b420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b148:	2201      	movs	r2, #1
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	fa02 f303 	lsl.w	r3, r2, r3
 800b150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	4013      	ands	r3, r2
 800b15a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	f040 815a 	bne.w	800b41a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d005      	beq.n	800b17e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d130      	bne.n	800b1e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	2203      	movs	r2, #3
 800b18a:	fa02 f303 	lsl.w	r3, r2, r3
 800b18e:	43db      	mvns	r3, r3
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	4013      	ands	r3, r2
 800b194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a2:	69ba      	ldr	r2, [r7, #24]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1bc:	43db      	mvns	r3, r3
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	091b      	lsrs	r3, r3, #4
 800b1ca:	f003 0201 	and.w	r2, r3, #1
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f003 0303 	and.w	r3, r3, #3
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d017      	beq.n	800b21c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fc:	43db      	mvns	r3, r3
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	4013      	ands	r3, r2
 800b202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	689a      	ldr	r2, [r3, #8]
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	fa02 f303 	lsl.w	r3, r2, r3
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	4313      	orrs	r3, r2
 800b214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f003 0303 	and.w	r3, r3, #3
 800b224:	2b02      	cmp	r3, #2
 800b226:	d123      	bne.n	800b270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	08da      	lsrs	r2, r3, #3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3208      	adds	r2, #8
 800b230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f003 0307 	and.w	r3, r3, #7
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	220f      	movs	r2, #15
 800b240:	fa02 f303 	lsl.w	r3, r2, r3
 800b244:	43db      	mvns	r3, r3
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	4013      	ands	r3, r2
 800b24a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	691a      	ldr	r2, [r3, #16]
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	f003 0307 	and.w	r3, r3, #7
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	4313      	orrs	r3, r2
 800b260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	08da      	lsrs	r2, r3, #3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3208      	adds	r2, #8
 800b26a:	69b9      	ldr	r1, [r7, #24]
 800b26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	2203      	movs	r2, #3
 800b27c:	fa02 f303 	lsl.w	r3, r2, r3
 800b280:	43db      	mvns	r3, r3
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	4013      	ands	r3, r2
 800b286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f003 0203 	and.w	r2, r3, #3
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	fa02 f303 	lsl.w	r3, r2, r3
 800b298:	69ba      	ldr	r2, [r7, #24]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 80b4 	beq.w	800b41a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60fb      	str	r3, [r7, #12]
 800b2b6:	4b60      	ldr	r3, [pc, #384]	; (800b438 <HAL_GPIO_Init+0x30c>)
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ba:	4a5f      	ldr	r2, [pc, #380]	; (800b438 <HAL_GPIO_Init+0x30c>)
 800b2bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2c0:	6453      	str	r3, [r2, #68]	; 0x44
 800b2c2:	4b5d      	ldr	r3, [pc, #372]	; (800b438 <HAL_GPIO_Init+0x30c>)
 800b2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b2ce:	4a5b      	ldr	r2, [pc, #364]	; (800b43c <HAL_GPIO_Init+0x310>)
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	089b      	lsrs	r3, r3, #2
 800b2d4:	3302      	adds	r3, #2
 800b2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	f003 0303 	and.w	r3, r3, #3
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	220f      	movs	r2, #15
 800b2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ea:	43db      	mvns	r3, r3
 800b2ec:	69ba      	ldr	r2, [r7, #24]
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a52      	ldr	r2, [pc, #328]	; (800b440 <HAL_GPIO_Init+0x314>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d02b      	beq.n	800b352 <HAL_GPIO_Init+0x226>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a51      	ldr	r2, [pc, #324]	; (800b444 <HAL_GPIO_Init+0x318>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d025      	beq.n	800b34e <HAL_GPIO_Init+0x222>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a50      	ldr	r2, [pc, #320]	; (800b448 <HAL_GPIO_Init+0x31c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d01f      	beq.n	800b34a <HAL_GPIO_Init+0x21e>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a4f      	ldr	r2, [pc, #316]	; (800b44c <HAL_GPIO_Init+0x320>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d019      	beq.n	800b346 <HAL_GPIO_Init+0x21a>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a4e      	ldr	r2, [pc, #312]	; (800b450 <HAL_GPIO_Init+0x324>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d013      	beq.n	800b342 <HAL_GPIO_Init+0x216>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a4d      	ldr	r2, [pc, #308]	; (800b454 <HAL_GPIO_Init+0x328>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d00d      	beq.n	800b33e <HAL_GPIO_Init+0x212>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a4c      	ldr	r2, [pc, #304]	; (800b458 <HAL_GPIO_Init+0x32c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d007      	beq.n	800b33a <HAL_GPIO_Init+0x20e>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a4b      	ldr	r2, [pc, #300]	; (800b45c <HAL_GPIO_Init+0x330>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d101      	bne.n	800b336 <HAL_GPIO_Init+0x20a>
 800b332:	2307      	movs	r3, #7
 800b334:	e00e      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b336:	2308      	movs	r3, #8
 800b338:	e00c      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b33a:	2306      	movs	r3, #6
 800b33c:	e00a      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b33e:	2305      	movs	r3, #5
 800b340:	e008      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b342:	2304      	movs	r3, #4
 800b344:	e006      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b346:	2303      	movs	r3, #3
 800b348:	e004      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b34a:	2302      	movs	r3, #2
 800b34c:	e002      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <HAL_GPIO_Init+0x228>
 800b352:	2300      	movs	r3, #0
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	f002 0203 	and.w	r2, r2, #3
 800b35a:	0092      	lsls	r2, r2, #2
 800b35c:	4093      	lsls	r3, r2
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	4313      	orrs	r3, r2
 800b362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b364:	4935      	ldr	r1, [pc, #212]	; (800b43c <HAL_GPIO_Init+0x310>)
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	089b      	lsrs	r3, r3, #2
 800b36a:	3302      	adds	r3, #2
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b372:	4b3b      	ldr	r3, [pc, #236]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	43db      	mvns	r3, r3
 800b37c:	69ba      	ldr	r2, [r7, #24]
 800b37e:	4013      	ands	r3, r2
 800b380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	4313      	orrs	r3, r2
 800b394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b396:	4a32      	ldr	r2, [pc, #200]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b39c:	4b30      	ldr	r3, [pc, #192]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	43db      	mvns	r3, r3
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3c0:	4a27      	ldr	r2, [pc, #156]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b3c6:	4b26      	ldr	r3, [pc, #152]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	43db      	mvns	r3, r3
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b3ea:	4a1d      	ldr	r2, [pc, #116]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b3f0:	4b1b      	ldr	r3, [pc, #108]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	43db      	mvns	r3, r3
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d003      	beq.n	800b414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b414:	4a12      	ldr	r2, [pc, #72]	; (800b460 <HAL_GPIO_Init+0x334>)
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	3301      	adds	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2b0f      	cmp	r3, #15
 800b424:	f67f ae90 	bls.w	800b148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	3724      	adds	r7, #36	; 0x24
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	40023800 	.word	0x40023800
 800b43c:	40013800 	.word	0x40013800
 800b440:	40020000 	.word	0x40020000
 800b444:	40020400 	.word	0x40020400
 800b448:	40020800 	.word	0x40020800
 800b44c:	40020c00 	.word	0x40020c00
 800b450:	40021000 	.word	0x40021000
 800b454:	40021400 	.word	0x40021400
 800b458:	40021800 	.word	0x40021800
 800b45c:	40021c00 	.word	0x40021c00
 800b460:	40013c00 	.word	0x40013c00

0800b464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	691a      	ldr	r2, [r3, #16]
 800b474:	887b      	ldrh	r3, [r7, #2]
 800b476:	4013      	ands	r3, r2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	e001      	b.n	800b486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b482:	2300      	movs	r3, #0
 800b484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	807b      	strh	r3, [r7, #2]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b4a4:	787b      	ldrb	r3, [r7, #1]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b4aa:	887a      	ldrh	r2, [r7, #2]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b4b0:	e003      	b.n	800b4ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b4b2:	887b      	ldrh	r3, [r7, #2]
 800b4b4:	041a      	lsls	r2, r3, #16
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	619a      	str	r2, [r3, #24]
}
 800b4ba:	bf00      	nop
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e12b      	b.n	800b732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7f6 fd76 	bl	8001fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2224      	movs	r2, #36	; 0x24
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b51a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b52a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b52c:	f001 fd16 	bl	800cf5c <HAL_RCC_GetPCLK1Freq>
 800b530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4a81      	ldr	r2, [pc, #516]	; (800b73c <HAL_I2C_Init+0x274>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d807      	bhi.n	800b54c <HAL_I2C_Init+0x84>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a80      	ldr	r2, [pc, #512]	; (800b740 <HAL_I2C_Init+0x278>)
 800b540:	4293      	cmp	r3, r2
 800b542:	bf94      	ite	ls
 800b544:	2301      	movls	r3, #1
 800b546:	2300      	movhi	r3, #0
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	e006      	b.n	800b55a <HAL_I2C_Init+0x92>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4a7d      	ldr	r2, [pc, #500]	; (800b744 <HAL_I2C_Init+0x27c>)
 800b550:	4293      	cmp	r3, r2
 800b552:	bf94      	ite	ls
 800b554:	2301      	movls	r3, #1
 800b556:	2300      	movhi	r3, #0
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e0e7      	b.n	800b732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4a78      	ldr	r2, [pc, #480]	; (800b748 <HAL_I2C_Init+0x280>)
 800b566:	fba2 2303 	umull	r2, r3, r2, r3
 800b56a:	0c9b      	lsrs	r3, r3, #18
 800b56c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	430a      	orrs	r2, r1
 800b580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6a1b      	ldr	r3, [r3, #32]
 800b588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	4a6a      	ldr	r2, [pc, #424]	; (800b73c <HAL_I2C_Init+0x274>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d802      	bhi.n	800b59c <HAL_I2C_Init+0xd4>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	3301      	adds	r3, #1
 800b59a:	e009      	b.n	800b5b0 <HAL_I2C_Init+0xe8>
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b5a2:	fb02 f303 	mul.w	r3, r2, r3
 800b5a6:	4a69      	ldr	r2, [pc, #420]	; (800b74c <HAL_I2C_Init+0x284>)
 800b5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ac:	099b      	lsrs	r3, r3, #6
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6812      	ldr	r2, [r2, #0]
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b5c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	495c      	ldr	r1, [pc, #368]	; (800b73c <HAL_I2C_Init+0x274>)
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	d819      	bhi.n	800b604 <HAL_I2C_Init+0x13c>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	1e59      	subs	r1, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5de:	1c59      	adds	r1, r3, #1
 800b5e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b5e4:	400b      	ands	r3, r1
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <HAL_I2C_Init+0x138>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	1e59      	subs	r1, r3, #1
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5fe:	e051      	b.n	800b6a4 <HAL_I2C_Init+0x1dc>
 800b600:	2304      	movs	r3, #4
 800b602:	e04f      	b.n	800b6a4 <HAL_I2C_Init+0x1dc>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d111      	bne.n	800b630 <HAL_I2C_Init+0x168>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1e58      	subs	r0, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6859      	ldr	r1, [r3, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	440b      	add	r3, r1
 800b61a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b61e:	3301      	adds	r3, #1
 800b620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b624:	2b00      	cmp	r3, #0
 800b626:	bf0c      	ite	eq
 800b628:	2301      	moveq	r3, #1
 800b62a:	2300      	movne	r3, #0
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	e012      	b.n	800b656 <HAL_I2C_Init+0x18e>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	1e58      	subs	r0, r3, #1
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6859      	ldr	r1, [r3, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	0099      	lsls	r1, r3, #2
 800b640:	440b      	add	r3, r1
 800b642:	fbb0 f3f3 	udiv	r3, r0, r3
 800b646:	3301      	adds	r3, #1
 800b648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bf0c      	ite	eq
 800b650:	2301      	moveq	r3, #1
 800b652:	2300      	movne	r3, #0
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <HAL_I2C_Init+0x196>
 800b65a:	2301      	movs	r3, #1
 800b65c:	e022      	b.n	800b6a4 <HAL_I2C_Init+0x1dc>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10e      	bne.n	800b684 <HAL_I2C_Init+0x1bc>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	1e58      	subs	r0, r3, #1
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6859      	ldr	r1, [r3, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	440b      	add	r3, r1
 800b674:	fbb0 f3f3 	udiv	r3, r0, r3
 800b678:	3301      	adds	r3, #1
 800b67a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b682:	e00f      	b.n	800b6a4 <HAL_I2C_Init+0x1dc>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	1e58      	subs	r0, r3, #1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6859      	ldr	r1, [r3, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	440b      	add	r3, r1
 800b692:	0099      	lsls	r1, r3, #2
 800b694:	440b      	add	r3, r1
 800b696:	fbb0 f3f3 	udiv	r3, r0, r3
 800b69a:	3301      	adds	r3, #1
 800b69c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	6809      	ldr	r1, [r1, #0]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69da      	ldr	r2, [r3, #28]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b6d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	6911      	ldr	r1, [r2, #16]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	68d2      	ldr	r2, [r2, #12]
 800b6de:	4311      	orrs	r1, r2
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6812      	ldr	r2, [r2, #0]
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	695a      	ldr	r2, [r3, #20]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	430a      	orrs	r2, r1
 800b702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f042 0201 	orr.w	r2, r2, #1
 800b712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2220      	movs	r2, #32
 800b71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	000186a0 	.word	0x000186a0
 800b740:	001e847f 	.word	0x001e847f
 800b744:	003d08ff 	.word	0x003d08ff
 800b748:	431bde83 	.word	0x431bde83
 800b74c:	10624dd3 	.word	0x10624dd3

0800b750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af02      	add	r7, sp, #8
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	4608      	mov	r0, r1
 800b75a:	4611      	mov	r1, r2
 800b75c:	461a      	mov	r2, r3
 800b75e:	4603      	mov	r3, r0
 800b760:	817b      	strh	r3, [r7, #10]
 800b762:	460b      	mov	r3, r1
 800b764:	813b      	strh	r3, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b76a:	f7fe fae7 	bl	8009d3c <HAL_GetTick>
 800b76e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b20      	cmp	r3, #32
 800b77a:	f040 80d9 	bne.w	800b930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	2319      	movs	r3, #25
 800b784:	2201      	movs	r2, #1
 800b786:	496d      	ldr	r1, [pc, #436]	; (800b93c <HAL_I2C_Mem_Write+0x1ec>)
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 fc7f 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b794:	2302      	movs	r3, #2
 800b796:	e0cc      	b.n	800b932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d101      	bne.n	800b7a6 <HAL_I2C_Mem_Write+0x56>
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e0c5      	b.n	800b932 <HAL_I2C_Mem_Write+0x1e2>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d007      	beq.n	800b7cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f042 0201 	orr.w	r2, r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2221      	movs	r2, #33	; 0x21
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2240      	movs	r2, #64	; 0x40
 800b7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6a3a      	ldr	r2, [r7, #32]
 800b7f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b802:	b29a      	uxth	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	4a4d      	ldr	r2, [pc, #308]	; (800b940 <HAL_I2C_Mem_Write+0x1f0>)
 800b80c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b80e:	88f8      	ldrh	r0, [r7, #6]
 800b810:	893a      	ldrh	r2, [r7, #8]
 800b812:	8979      	ldrh	r1, [r7, #10]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	4603      	mov	r3, r0
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 fab6 	bl	800bd90 <I2C_RequestMemoryWrite>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d052      	beq.n	800b8d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e081      	b.n	800b932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 fd00 	bl	800c238 <I2C_WaitOnTXEFlagUntilTimeout>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00d      	beq.n	800b85a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b842:	2b04      	cmp	r3, #4
 800b844:	d107      	bne.n	800b856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e06b      	b.n	800b932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	781a      	ldrb	r2, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b874:	3b01      	subs	r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b880:	b29b      	uxth	r3, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b04      	cmp	r3, #4
 800b896:	d11b      	bne.n	800b8d0 <HAL_I2C_Mem_Write+0x180>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d017      	beq.n	800b8d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b0:	1c5a      	adds	r2, r3, #1
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1aa      	bne.n	800b82e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 fcec 	bl	800c2ba <I2C_WaitOnBTFFlagUntilTimeout>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00d      	beq.n	800b904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d107      	bne.n	800b900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e016      	b.n	800b932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2220      	movs	r2, #32
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	e000      	b.n	800b932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b930:	2302      	movs	r3, #2
  }
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	00100002 	.word	0x00100002
 800b940:	ffff0000 	.word	0xffff0000

0800b944 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08c      	sub	sp, #48	; 0x30
 800b948:	af02      	add	r7, sp, #8
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	4608      	mov	r0, r1
 800b94e:	4611      	mov	r1, r2
 800b950:	461a      	mov	r2, r3
 800b952:	4603      	mov	r3, r0
 800b954:	817b      	strh	r3, [r7, #10]
 800b956:	460b      	mov	r3, r1
 800b958:	813b      	strh	r3, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b95e:	f7fe f9ed 	bl	8009d3c <HAL_GetTick>
 800b962:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	2b20      	cmp	r3, #32
 800b96e:	f040 8208 	bne.w	800bd82 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2319      	movs	r3, #25
 800b978:	2201      	movs	r2, #1
 800b97a:	497b      	ldr	r1, [pc, #492]	; (800bb68 <HAL_I2C_Mem_Read+0x224>)
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 fb85 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b988:	2302      	movs	r3, #2
 800b98a:	e1fb      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <HAL_I2C_Mem_Read+0x56>
 800b996:	2302      	movs	r3, #2
 800b998:	e1f4      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d007      	beq.n	800b9c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f042 0201 	orr.w	r2, r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2222      	movs	r2, #34	; 0x22
 800b9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2240      	movs	r2, #64	; 0x40
 800b9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b9f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4a5b      	ldr	r2, [pc, #364]	; (800bb6c <HAL_I2C_Mem_Read+0x228>)
 800ba00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba02:	88f8      	ldrh	r0, [r7, #6]
 800ba04:	893a      	ldrh	r2, [r7, #8]
 800ba06:	8979      	ldrh	r1, [r7, #10]
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	4603      	mov	r3, r0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 fa52 	bl	800bebc <I2C_RequestMemoryRead>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e1b0      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d113      	bne.n	800ba52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	623b      	str	r3, [r7, #32]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	623b      	str	r3, [r7, #32]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	623b      	str	r3, [r7, #32]
 800ba3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	e184      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d11b      	bne.n	800ba92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	61fb      	str	r3, [r7, #28]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	61fb      	str	r3, [r7, #28]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	e164      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d11b      	bne.n	800bad2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baba:	2300      	movs	r3, #0
 800babc:	61bb      	str	r3, [r7, #24]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	61bb      	str	r3, [r7, #24]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	61bb      	str	r3, [r7, #24]
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	e144      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bad2:	2300      	movs	r3, #0
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800bae8:	e138      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baee:	2b03      	cmp	r3, #3
 800baf0:	f200 80f1 	bhi.w	800bcd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d123      	bne.n	800bb44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f000 fc1b 	bl	800c33c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e139      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	691a      	ldr	r2, [r3, #16]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb42:	e10b      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d14e      	bne.n	800bbea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	2200      	movs	r2, #0
 800bb54:	4906      	ldr	r1, [pc, #24]	; (800bb70 <HAL_I2C_Mem_Read+0x22c>)
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fa98 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d008      	beq.n	800bb74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e10e      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
 800bb66:	bf00      	nop
 800bb68:	00100002 	.word	0x00100002
 800bb6c:	ffff0000 	.word	0xffff0000
 800bb70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bba0:	3b01      	subs	r3, #1
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	691a      	ldr	r2, [r3, #16]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bbe8:	e0b8      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4966      	ldr	r1, [pc, #408]	; (800bd8c <HAL_I2C_Mem_Read+0x448>)
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 fa49 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e0bf      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	691a      	ldr	r2, [r3, #16]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	494f      	ldr	r1, [pc, #316]	; (800bd8c <HAL_I2C_Mem_Read+0x448>)
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f000 fa1b 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e091      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	691a      	ldr	r2, [r3, #16]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7a:	b2d2      	uxtb	r2, r2
 800bc7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	691a      	ldr	r2, [r3, #16]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	1c5a      	adds	r2, r3, #1
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	3b01      	subs	r3, #1
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bcd4:	e042      	b.n	800bd5c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 fb2e 	bl	800c33c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e04c      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	691a      	ldr	r2, [r3, #16]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	b2d2      	uxtb	r2, r2
 800bcf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd06:	3b01      	subs	r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	3b01      	subs	r3, #1
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b04      	cmp	r3, #4
 800bd28:	d118      	bne.n	800bd5c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	691a      	ldr	r2, [r3, #16]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd46:	3b01      	subs	r3, #1
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	3b01      	subs	r3, #1
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f47f aec2 	bne.w	800baea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e000      	b.n	800bd84 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd82:	2302      	movs	r3, #2
  }
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3728      	adds	r7, #40	; 0x28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	00010004 	.word	0x00010004

0800bd90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	817b      	strh	r3, [r7, #10]
 800bda2:	460b      	mov	r3, r1
 800bda4:	813b      	strh	r3, [r7, #8]
 800bda6:	4613      	mov	r3, r2
 800bda8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 f960 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00d      	beq.n	800bdee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde0:	d103      	bne.n	800bdea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bde8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e05f      	b.n	800beae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdee:	897b      	ldrh	r3, [r7, #10]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bdfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	6a3a      	ldr	r2, [r7, #32]
 800be02:	492d      	ldr	r1, [pc, #180]	; (800beb8 <I2C_RequestMemoryWrite+0x128>)
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 f998 	bl	800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e04c      	b.n	800beae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2c:	6a39      	ldr	r1, [r7, #32]
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 fa02 	bl	800c238 <I2C_WaitOnTXEFlagUntilTimeout>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00d      	beq.n	800be56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3e:	2b04      	cmp	r3, #4
 800be40:	d107      	bne.n	800be52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e02b      	b.n	800beae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be56:	88fb      	ldrh	r3, [r7, #6]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d105      	bne.n	800be68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be5c:	893b      	ldrh	r3, [r7, #8]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	611a      	str	r2, [r3, #16]
 800be66:	e021      	b.n	800beac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800be68:	893b      	ldrh	r3, [r7, #8]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be78:	6a39      	ldr	r1, [r7, #32]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f9dc 	bl	800c238 <I2C_WaitOnTXEFlagUntilTimeout>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00d      	beq.n	800bea2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	2b04      	cmp	r3, #4
 800be8c:	d107      	bne.n	800be9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e005      	b.n	800beae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bea2:	893b      	ldrh	r3, [r7, #8]
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	00010002 	.word	0x00010002

0800bebc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	4608      	mov	r0, r1
 800bec6:	4611      	mov	r1, r2
 800bec8:	461a      	mov	r2, r3
 800beca:	4603      	mov	r3, r0
 800becc:	817b      	strh	r3, [r7, #10]
 800bece:	460b      	mov	r3, r1
 800bed0:	813b      	strh	r3, [r7, #8]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bee4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bef4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	2200      	movs	r2, #0
 800befe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f000 f8c2 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00d      	beq.n	800bf2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf1c:	d103      	bne.n	800bf26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e0aa      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf2a:	897b      	ldrh	r3, [r7, #10]
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	461a      	mov	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bf38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	6a3a      	ldr	r2, [r7, #32]
 800bf3e:	4952      	ldr	r1, [pc, #328]	; (800c088 <I2C_RequestMemoryRead+0x1cc>)
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f8fa 	bl	800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e097      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf68:	6a39      	ldr	r1, [r7, #32]
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f964 	bl	800c238 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00d      	beq.n	800bf92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	d107      	bne.n	800bf8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e076      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf92:	88fb      	ldrh	r3, [r7, #6]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d105      	bne.n	800bfa4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf98:	893b      	ldrh	r3, [r7, #8]
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	611a      	str	r2, [r3, #16]
 800bfa2:	e021      	b.n	800bfe8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bfa4:	893b      	ldrh	r3, [r7, #8]
 800bfa6:	0a1b      	lsrs	r3, r3, #8
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb4:	6a39      	ldr	r1, [r7, #32]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f93e 	bl	800c238 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00d      	beq.n	800bfde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d107      	bne.n	800bfda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e050      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bfde:	893b      	ldrh	r3, [r7, #8]
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfea:	6a39      	ldr	r1, [r7, #32]
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f000 f923 	bl	800c238 <I2C_WaitOnTXEFlagUntilTimeout>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00d      	beq.n	800c014 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d107      	bne.n	800c010 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c00e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e035      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c022:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f000 f82b 	bl	800c08c <I2C_WaitOnFlagUntilTimeout>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00d      	beq.n	800c058 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c04a:	d103      	bne.n	800c054 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e013      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c058:	897b      	ldrh	r3, [r7, #10]
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f043 0301 	orr.w	r3, r3, #1
 800c060:	b2da      	uxtb	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	6a3a      	ldr	r2, [r7, #32]
 800c06c:	4906      	ldr	r1, [pc, #24]	; (800c088 <I2C_RequestMemoryRead+0x1cc>)
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f000 f863 	bl	800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e000      	b.n	800c080 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	00010002 	.word	0x00010002

0800c08c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	4613      	mov	r3, r2
 800c09a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c09c:	e025      	b.n	800c0ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a4:	d021      	beq.n	800c0ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0a6:	f7fd fe49 	bl	8009d3c <HAL_GetTick>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d302      	bcc.n	800c0bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d116      	bne.n	800c0ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	f043 0220 	orr.w	r2, r3, #32
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e023      	b.n	800c132 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	0c1b      	lsrs	r3, r3, #16
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d10d      	bne.n	800c110 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	43da      	mvns	r2, r3
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	4013      	ands	r3, r2
 800c100:	b29b      	uxth	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	bf0c      	ite	eq
 800c106:	2301      	moveq	r3, #1
 800c108:	2300      	movne	r3, #0
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	461a      	mov	r2, r3
 800c10e:	e00c      	b.n	800c12a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	43da      	mvns	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	4013      	ands	r3, r2
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	bf0c      	ite	eq
 800c122:	2301      	moveq	r3, #1
 800c124:	2300      	movne	r3, #0
 800c126:	b2db      	uxtb	r3, r3
 800c128:	461a      	mov	r2, r3
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d0b6      	beq.n	800c09e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c148:	e051      	b.n	800c1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c158:	d123      	bne.n	800c1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c168:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c172:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	f043 0204 	orr.w	r2, r3, #4
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e046      	b.n	800c230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d021      	beq.n	800c1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1aa:	f7fd fdc7 	bl	8009d3c <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d302      	bcc.n	800c1c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d116      	bne.n	800c1ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1da:	f043 0220 	orr.w	r2, r3, #32
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e020      	b.n	800c230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	0c1b      	lsrs	r3, r3, #16
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d10c      	bne.n	800c212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	43da      	mvns	r2, r3
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	4013      	ands	r3, r2
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	bf14      	ite	ne
 800c20a:	2301      	movne	r3, #1
 800c20c:	2300      	moveq	r3, #0
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	e00b      	b.n	800c22a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	43da      	mvns	r2, r3
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	4013      	ands	r3, r2
 800c21e:	b29b      	uxth	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	bf14      	ite	ne
 800c224:	2301      	movne	r3, #1
 800c226:	2300      	moveq	r3, #0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d18d      	bne.n	800c14a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c244:	e02d      	b.n	800c2a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 f8ce 	bl	800c3e8 <I2C_IsAcknowledgeFailed>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e02d      	b.n	800c2b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25c:	d021      	beq.n	800c2a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c25e:	f7fd fd6d 	bl	8009d3c <HAL_GetTick>
 800c262:	4602      	mov	r2, r0
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d302      	bcc.n	800c274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d116      	bne.n	800c2a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2220      	movs	r2, #32
 800c27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	f043 0220 	orr.w	r2, r3, #32
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e007      	b.n	800c2b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ac:	2b80      	cmp	r3, #128	; 0x80
 800c2ae:	d1ca      	bne.n	800c246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2c6:	e02d      	b.n	800c324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 f88d 	bl	800c3e8 <I2C_IsAcknowledgeFailed>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e02d      	b.n	800c334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d021      	beq.n	800c324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2e0:	f7fd fd2c 	bl	8009d3c <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d302      	bcc.n	800c2f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d116      	bne.n	800c324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2220      	movs	r2, #32
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c310:	f043 0220 	orr.w	r2, r3, #32
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e007      	b.n	800c334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f003 0304 	and.w	r3, r3, #4
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d1ca      	bne.n	800c2c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c348:	e042      	b.n	800c3d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	f003 0310 	and.w	r3, r3, #16
 800c354:	2b10      	cmp	r3, #16
 800c356:	d119      	bne.n	800c38c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f06f 0210 	mvn.w	r2, #16
 800c360:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2220      	movs	r2, #32
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e029      	b.n	800c3e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c38c:	f7fd fcd6 	bl	8009d3c <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d302      	bcc.n	800c3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d116      	bne.n	800c3d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2220      	movs	r2, #32
 800c3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	f043 0220 	orr.w	r2, r3, #32
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e007      	b.n	800c3e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	695b      	ldr	r3, [r3, #20]
 800c3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3da:	2b40      	cmp	r3, #64	; 0x40
 800c3dc:	d1b5      	bne.n	800c34a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3fe:	d11b      	bne.n	800c438 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c408:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2220      	movs	r2, #32
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	f043 0204 	orr.w	r2, r3, #4
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e000      	b.n	800c43a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c446:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c448:	b08f      	sub	sp, #60	; 0x3c
 800c44a:	af0a      	add	r7, sp, #40	; 0x28
 800c44c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e10f      	b.n	800c678 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800c464:	b2db      	uxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7fd fb86 	bl	8009b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2203      	movs	r2, #3
 800c47c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d102      	bne.n	800c492 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4618      	mov	r0, r3
 800c498:	f002 fa63 	bl	800e962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	687e      	ldr	r6, [r7, #4]
 800c4a4:	466d      	mov	r5, sp
 800c4a6:	f106 0410 	add.w	r4, r6, #16
 800c4aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c4ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c4b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4b6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c4ba:	1d33      	adds	r3, r6, #4
 800c4bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4be:	6838      	ldr	r0, [r7, #0]
 800c4c0:	f002 f9ee 	bl	800e8a0 <USB_CoreInit>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e0d0      	b.n	800c678 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2100      	movs	r1, #0
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f002 fa51 	bl	800e984 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73fb      	strb	r3, [r7, #15]
 800c4e6:	e04a      	b.n	800c57e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c4e8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	4413      	add	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	440b      	add	r3, r1
 800c4f6:	333d      	adds	r3, #61	; 0x3d
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c4fc:	7bfa      	ldrb	r2, [r7, #15]
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	4613      	mov	r3, r2
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4413      	add	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	440b      	add	r3, r1
 800c50a:	333c      	adds	r3, #60	; 0x3c
 800c50c:	7bfa      	ldrb	r2, [r7, #15]
 800c50e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c510:	7bfa      	ldrb	r2, [r7, #15]
 800c512:	7bfb      	ldrb	r3, [r7, #15]
 800c514:	b298      	uxth	r0, r3
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	4613      	mov	r3, r2
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	4413      	add	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	440b      	add	r3, r1
 800c522:	3344      	adds	r3, #68	; 0x44
 800c524:	4602      	mov	r2, r0
 800c526:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c528:	7bfa      	ldrb	r2, [r7, #15]
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	4613      	mov	r3, r2
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	440b      	add	r3, r1
 800c536:	3340      	adds	r3, #64	; 0x40
 800c538:	2200      	movs	r2, #0
 800c53a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c53c:	7bfa      	ldrb	r2, [r7, #15]
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	4613      	mov	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	440b      	add	r3, r1
 800c54a:	3348      	adds	r3, #72	; 0x48
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c550:	7bfa      	ldrb	r2, [r7, #15]
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	4613      	mov	r3, r2
 800c556:	00db      	lsls	r3, r3, #3
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	334c      	adds	r3, #76	; 0x4c
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c564:	7bfa      	ldrb	r2, [r7, #15]
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	4613      	mov	r3, r2
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	4413      	add	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	440b      	add	r3, r1
 800c572:	3354      	adds	r3, #84	; 0x54
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	3301      	adds	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
 800c57e:	7bfa      	ldrb	r2, [r7, #15]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d3af      	bcc.n	800c4e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]
 800c58c:	e044      	b.n	800c618 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c58e:	7bfa      	ldrb	r2, [r7, #15]
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	4613      	mov	r3, r2
 800c594:	00db      	lsls	r3, r3, #3
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	440b      	add	r3, r1
 800c59c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c5a4:	7bfa      	ldrb	r2, [r7, #15]
 800c5a6:	6879      	ldr	r1, [r7, #4]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800c5b6:	7bfa      	ldrb	r2, [r7, #15]
 800c5b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c5ba:	7bfa      	ldrb	r2, [r7, #15]
 800c5bc:	6879      	ldr	r1, [r7, #4]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	00db      	lsls	r3, r3, #3
 800c5c2:	4413      	add	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	440b      	add	r3, r1
 800c5c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c5d0:	7bfa      	ldrb	r2, [r7, #15]
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	440b      	add	r3, r1
 800c5de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c5e6:	7bfa      	ldrb	r2, [r7, #15]
 800c5e8:	6879      	ldr	r1, [r7, #4]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	4413      	add	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	440b      	add	r3, r1
 800c5f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c5fc:	7bfa      	ldrb	r2, [r7, #15]
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	4613      	mov	r3, r2
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	4413      	add	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	440b      	add	r3, r1
 800c60a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	3301      	adds	r3, #1
 800c616:	73fb      	strb	r3, [r7, #15]
 800c618:	7bfa      	ldrb	r2, [r7, #15]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d3b5      	bcc.n	800c58e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	603b      	str	r3, [r7, #0]
 800c628:	687e      	ldr	r6, [r7, #4]
 800c62a:	466d      	mov	r5, sp
 800c62c:	f106 0410 	add.w	r4, r6, #16
 800c630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c638:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c63c:	e885 0003 	stmia.w	r5, {r0, r1}
 800c640:	1d33      	adds	r3, r6, #4
 800c642:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c644:	6838      	ldr	r0, [r7, #0]
 800c646:	f002 f9e9 	bl	800ea1c <USB_DevInit>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d005      	beq.n	800c65c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2202      	movs	r2, #2
 800c654:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e00d      	b.n	800c678 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4618      	mov	r0, r3
 800c672:	f002 fbb4 	bl	800edde <USB_DevDisconnect>

  return HAL_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e267      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d075      	beq.n	800c78a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c69e:	4b88      	ldr	r3, [pc, #544]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	f003 030c 	and.w	r3, r3, #12
 800c6a6:	2b04      	cmp	r3, #4
 800c6a8:	d00c      	beq.n	800c6c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6aa:	4b85      	ldr	r3, [pc, #532]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c6b2:	2b08      	cmp	r3, #8
 800c6b4:	d112      	bne.n	800c6dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6b6:	4b82      	ldr	r3, [pc, #520]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6c2:	d10b      	bne.n	800c6dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6c4:	4b7e      	ldr	r3, [pc, #504]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d05b      	beq.n	800c788 <HAL_RCC_OscConfig+0x108>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d157      	bne.n	800c788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e242      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e4:	d106      	bne.n	800c6f4 <HAL_RCC_OscConfig+0x74>
 800c6e6:	4b76      	ldr	r3, [pc, #472]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a75      	ldr	r2, [pc, #468]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c6ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e01d      	b.n	800c730 <HAL_RCC_OscConfig+0xb0>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6fc:	d10c      	bne.n	800c718 <HAL_RCC_OscConfig+0x98>
 800c6fe:	4b70      	ldr	r3, [pc, #448]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a6f      	ldr	r2, [pc, #444]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	4b6d      	ldr	r3, [pc, #436]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a6c      	ldr	r2, [pc, #432]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	e00b      	b.n	800c730 <HAL_RCC_OscConfig+0xb0>
 800c718:	4b69      	ldr	r3, [pc, #420]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a68      	ldr	r2, [pc, #416]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c71e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	4b66      	ldr	r3, [pc, #408]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a65      	ldr	r2, [pc, #404]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c72a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c72e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d013      	beq.n	800c760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c738:	f7fd fb00 	bl	8009d3c <HAL_GetTick>
 800c73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c73e:	e008      	b.n	800c752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c740:	f7fd fafc 	bl	8009d3c <HAL_GetTick>
 800c744:	4602      	mov	r2, r0
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b64      	cmp	r3, #100	; 0x64
 800c74c:	d901      	bls.n	800c752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e207      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c752:	4b5b      	ldr	r3, [pc, #364]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0f0      	beq.n	800c740 <HAL_RCC_OscConfig+0xc0>
 800c75e:	e014      	b.n	800c78a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c760:	f7fd faec 	bl	8009d3c <HAL_GetTick>
 800c764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c766:	e008      	b.n	800c77a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c768:	f7fd fae8 	bl	8009d3c <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b64      	cmp	r3, #100	; 0x64
 800c774:	d901      	bls.n	800c77a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e1f3      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c77a:	4b51      	ldr	r3, [pc, #324]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1f0      	bne.n	800c768 <HAL_RCC_OscConfig+0xe8>
 800c786:	e000      	b.n	800c78a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d063      	beq.n	800c85e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c796:	4b4a      	ldr	r3, [pc, #296]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f003 030c 	and.w	r3, r3, #12
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7a2:	4b47      	ldr	r3, [pc, #284]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c7aa:	2b08      	cmp	r3, #8
 800c7ac:	d11c      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7ae:	4b44      	ldr	r3, [pc, #272]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d116      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7ba:	4b41      	ldr	r3, [pc, #260]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x152>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d001      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e1c7      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7d2:	4b3b      	ldr	r3, [pc, #236]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	4937      	ldr	r1, [pc, #220]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7e6:	e03a      	b.n	800c85e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d020      	beq.n	800c832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7f0:	4b34      	ldr	r3, [pc, #208]	; (800c8c4 <HAL_RCC_OscConfig+0x244>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f6:	f7fd faa1 	bl	8009d3c <HAL_GetTick>
 800c7fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7fc:	e008      	b.n	800c810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7fe:	f7fd fa9d 	bl	8009d3c <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d901      	bls.n	800c810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e1a8      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c810:	4b2b      	ldr	r3, [pc, #172]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f0      	beq.n	800c7fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c81c:	4b28      	ldr	r3, [pc, #160]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	4925      	ldr	r1, [pc, #148]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	600b      	str	r3, [r1, #0]
 800c830:	e015      	b.n	800c85e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c832:	4b24      	ldr	r3, [pc, #144]	; (800c8c4 <HAL_RCC_OscConfig+0x244>)
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c838:	f7fd fa80 	bl	8009d3c <HAL_GetTick>
 800c83c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c83e:	e008      	b.n	800c852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c840:	f7fd fa7c 	bl	8009d3c <HAL_GetTick>
 800c844:	4602      	mov	r2, r0
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d901      	bls.n	800c852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	e187      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c852:	4b1b      	ldr	r3, [pc, #108]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1f0      	bne.n	800c840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0308 	and.w	r3, r3, #8
 800c866:	2b00      	cmp	r3, #0
 800c868:	d036      	beq.n	800c8d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	695b      	ldr	r3, [r3, #20]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d016      	beq.n	800c8a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c872:	4b15      	ldr	r3, [pc, #84]	; (800c8c8 <HAL_RCC_OscConfig+0x248>)
 800c874:	2201      	movs	r2, #1
 800c876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c878:	f7fd fa60 	bl	8009d3c <HAL_GetTick>
 800c87c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c87e:	e008      	b.n	800c892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c880:	f7fd fa5c 	bl	8009d3c <HAL_GetTick>
 800c884:	4602      	mov	r2, r0
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d901      	bls.n	800c892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e167      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c892:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <HAL_RCC_OscConfig+0x240>)
 800c894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d0f0      	beq.n	800c880 <HAL_RCC_OscConfig+0x200>
 800c89e:	e01b      	b.n	800c8d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c8a0:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <HAL_RCC_OscConfig+0x248>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c8a6:	f7fd fa49 	bl	8009d3c <HAL_GetTick>
 800c8aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8ac:	e00e      	b.n	800c8cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8ae:	f7fd fa45 	bl	8009d3c <HAL_GetTick>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d907      	bls.n	800c8cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e150      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
 800c8c0:	40023800 	.word	0x40023800
 800c8c4:	42470000 	.word	0x42470000
 800c8c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8cc:	4b88      	ldr	r3, [pc, #544]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1ea      	bne.n	800c8ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 0304 	and.w	r3, r3, #4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 8097 	beq.w	800ca14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8ea:	4b81      	ldr	r3, [pc, #516]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10f      	bne.n	800c916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60bb      	str	r3, [r7, #8]
 800c8fa:	4b7d      	ldr	r3, [pc, #500]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	4a7c      	ldr	r2, [pc, #496]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c904:	6413      	str	r3, [r2, #64]	; 0x40
 800c906:	4b7a      	ldr	r3, [pc, #488]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c90e:	60bb      	str	r3, [r7, #8]
 800c910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c912:	2301      	movs	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c916:	4b77      	ldr	r3, [pc, #476]	; (800caf4 <HAL_RCC_OscConfig+0x474>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d118      	bne.n	800c954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c922:	4b74      	ldr	r3, [pc, #464]	; (800caf4 <HAL_RCC_OscConfig+0x474>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a73      	ldr	r2, [pc, #460]	; (800caf4 <HAL_RCC_OscConfig+0x474>)
 800c928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c92c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c92e:	f7fd fa05 	bl	8009d3c <HAL_GetTick>
 800c932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c934:	e008      	b.n	800c948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c936:	f7fd fa01 	bl	8009d3c <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	2b02      	cmp	r3, #2
 800c942:	d901      	bls.n	800c948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e10c      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c948:	4b6a      	ldr	r3, [pc, #424]	; (800caf4 <HAL_RCC_OscConfig+0x474>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0f0      	beq.n	800c936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d106      	bne.n	800c96a <HAL_RCC_OscConfig+0x2ea>
 800c95c:	4b64      	ldr	r3, [pc, #400]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c960:	4a63      	ldr	r2, [pc, #396]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c962:	f043 0301 	orr.w	r3, r3, #1
 800c966:	6713      	str	r3, [r2, #112]	; 0x70
 800c968:	e01c      	b.n	800c9a4 <HAL_RCC_OscConfig+0x324>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	2b05      	cmp	r3, #5
 800c970:	d10c      	bne.n	800c98c <HAL_RCC_OscConfig+0x30c>
 800c972:	4b5f      	ldr	r3, [pc, #380]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c976:	4a5e      	ldr	r2, [pc, #376]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c978:	f043 0304 	orr.w	r3, r3, #4
 800c97c:	6713      	str	r3, [r2, #112]	; 0x70
 800c97e:	4b5c      	ldr	r3, [pc, #368]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c982:	4a5b      	ldr	r2, [pc, #364]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c984:	f043 0301 	orr.w	r3, r3, #1
 800c988:	6713      	str	r3, [r2, #112]	; 0x70
 800c98a:	e00b      	b.n	800c9a4 <HAL_RCC_OscConfig+0x324>
 800c98c:	4b58      	ldr	r3, [pc, #352]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c990:	4a57      	ldr	r2, [pc, #348]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c992:	f023 0301 	bic.w	r3, r3, #1
 800c996:	6713      	str	r3, [r2, #112]	; 0x70
 800c998:	4b55      	ldr	r3, [pc, #340]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c99c:	4a54      	ldr	r2, [pc, #336]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c99e:	f023 0304 	bic.w	r3, r3, #4
 800c9a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d015      	beq.n	800c9d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9ac:	f7fd f9c6 	bl	8009d3c <HAL_GetTick>
 800c9b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9b2:	e00a      	b.n	800c9ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9b4:	f7fd f9c2 	bl	8009d3c <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d901      	bls.n	800c9ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e0cb      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9ca:	4b49      	ldr	r3, [pc, #292]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0ee      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x334>
 800c9d6:	e014      	b.n	800ca02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9d8:	f7fd f9b0 	bl	8009d3c <HAL_GetTick>
 800c9dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9de:	e00a      	b.n	800c9f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9e0:	f7fd f9ac 	bl	8009d3c <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d901      	bls.n	800c9f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c9f2:	2303      	movs	r3, #3
 800c9f4:	e0b5      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9f6:	4b3e      	ldr	r3, [pc, #248]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800c9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1ee      	bne.n	800c9e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d105      	bne.n	800ca14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca08:	4b39      	ldr	r3, [pc, #228]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800ca0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0c:	4a38      	ldr	r2, [pc, #224]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800ca0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 80a1 	beq.w	800cb60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca1e:	4b34      	ldr	r3, [pc, #208]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f003 030c 	and.w	r3, r3, #12
 800ca26:	2b08      	cmp	r3, #8
 800ca28:	d05c      	beq.n	800cae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d141      	bne.n	800cab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca32:	4b31      	ldr	r3, [pc, #196]	; (800caf8 <HAL_RCC_OscConfig+0x478>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca38:	f7fd f980 	bl	8009d3c <HAL_GetTick>
 800ca3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca3e:	e008      	b.n	800ca52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca40:	f7fd f97c 	bl	8009d3c <HAL_GetTick>
 800ca44:	4602      	mov	r2, r0
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d901      	bls.n	800ca52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e087      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca52:	4b27      	ldr	r3, [pc, #156]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1f0      	bne.n	800ca40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	69da      	ldr	r2, [r3, #28]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	431a      	orrs	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6c:	019b      	lsls	r3, r3, #6
 800ca6e:	431a      	orrs	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca74:	085b      	lsrs	r3, r3, #1
 800ca76:	3b01      	subs	r3, #1
 800ca78:	041b      	lsls	r3, r3, #16
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca80:	061b      	lsls	r3, r3, #24
 800ca82:	491b      	ldr	r1, [pc, #108]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800ca84:	4313      	orrs	r3, r2
 800ca86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca88:	4b1b      	ldr	r3, [pc, #108]	; (800caf8 <HAL_RCC_OscConfig+0x478>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca8e:	f7fd f955 	bl	8009d3c <HAL_GetTick>
 800ca92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca94:	e008      	b.n	800caa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca96:	f7fd f951 	bl	8009d3c <HAL_GetTick>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	d901      	bls.n	800caa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e05c      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800caa8:	4b11      	ldr	r3, [pc, #68]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d0f0      	beq.n	800ca96 <HAL_RCC_OscConfig+0x416>
 800cab4:	e054      	b.n	800cb60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cab6:	4b10      	ldr	r3, [pc, #64]	; (800caf8 <HAL_RCC_OscConfig+0x478>)
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cabc:	f7fd f93e 	bl	8009d3c <HAL_GetTick>
 800cac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cac2:	e008      	b.n	800cad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cac4:	f7fd f93a 	bl	8009d3c <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d901      	bls.n	800cad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e045      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cad6:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <HAL_RCC_OscConfig+0x470>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1f0      	bne.n	800cac4 <HAL_RCC_OscConfig+0x444>
 800cae2:	e03d      	b.n	800cb60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d107      	bne.n	800cafc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800caec:	2301      	movs	r3, #1
 800caee:	e038      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
 800caf0:	40023800 	.word	0x40023800
 800caf4:	40007000 	.word	0x40007000
 800caf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cafc:	4b1b      	ldr	r3, [pc, #108]	; (800cb6c <HAL_RCC_OscConfig+0x4ec>)
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d028      	beq.n	800cb5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d121      	bne.n	800cb5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d11a      	bne.n	800cb5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cb32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d111      	bne.n	800cb5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	085b      	lsrs	r3, r3, #1
 800cb44:	3b01      	subs	r3, #1
 800cb46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d107      	bne.n	800cb5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d001      	beq.n	800cb60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e000      	b.n	800cb62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	40023800 	.word	0x40023800

0800cb70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e0cc      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb84:	4b68      	ldr	r3, [pc, #416]	; (800cd28 <HAL_RCC_ClockConfig+0x1b8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0307 	and.w	r3, r3, #7
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d90c      	bls.n	800cbac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb92:	4b65      	ldr	r3, [pc, #404]	; (800cd28 <HAL_RCC_ClockConfig+0x1b8>)
 800cb94:	683a      	ldr	r2, [r7, #0]
 800cb96:	b2d2      	uxtb	r2, r2
 800cb98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb9a:	4b63      	ldr	r3, [pc, #396]	; (800cd28 <HAL_RCC_ClockConfig+0x1b8>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0307 	and.w	r3, r3, #7
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d001      	beq.n	800cbac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e0b8      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f003 0302 	and.w	r3, r3, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d020      	beq.n	800cbfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 0304 	and.w	r3, r3, #4
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d005      	beq.n	800cbd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cbc4:	4b59      	ldr	r3, [pc, #356]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	4a58      	ldr	r2, [pc, #352]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cbca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cbce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0308 	and.w	r3, r3, #8
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d005      	beq.n	800cbe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cbdc:	4b53      	ldr	r3, [pc, #332]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	4a52      	ldr	r2, [pc, #328]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cbe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cbe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbe8:	4b50      	ldr	r3, [pc, #320]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	494d      	ldr	r1, [pc, #308]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d044      	beq.n	800cc90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d107      	bne.n	800cc1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc0e:	4b47      	ldr	r3, [pc, #284]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d119      	bne.n	800cc4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e07f      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d003      	beq.n	800cc2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d107      	bne.n	800cc3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc2e:	4b3f      	ldr	r3, [pc, #252]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d109      	bne.n	800cc4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e06f      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc3e:	4b3b      	ldr	r3, [pc, #236]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e067      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc4e:	4b37      	ldr	r3, [pc, #220]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f023 0203 	bic.w	r2, r3, #3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	4934      	ldr	r1, [pc, #208]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc60:	f7fd f86c 	bl	8009d3c <HAL_GetTick>
 800cc64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc66:	e00a      	b.n	800cc7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc68:	f7fd f868 	bl	8009d3c <HAL_GetTick>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d901      	bls.n	800cc7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e04f      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc7e:	4b2b      	ldr	r3, [pc, #172]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f003 020c 	and.w	r2, r3, #12
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d1eb      	bne.n	800cc68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc90:	4b25      	ldr	r3, [pc, #148]	; (800cd28 <HAL_RCC_ClockConfig+0x1b8>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0307 	and.w	r3, r3, #7
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d20c      	bcs.n	800ccb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc9e:	4b22      	ldr	r3, [pc, #136]	; (800cd28 <HAL_RCC_ClockConfig+0x1b8>)
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	b2d2      	uxtb	r2, r2
 800cca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cca6:	4b20      	ldr	r3, [pc, #128]	; (800cd28 <HAL_RCC_ClockConfig+0x1b8>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d001      	beq.n	800ccb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e032      	b.n	800cd1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d008      	beq.n	800ccd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ccc4:	4b19      	ldr	r3, [pc, #100]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	4916      	ldr	r1, [pc, #88]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f003 0308 	and.w	r3, r3, #8
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d009      	beq.n	800ccf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cce2:	4b12      	ldr	r3, [pc, #72]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	490e      	ldr	r1, [pc, #56]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ccf6:	f000 f821 	bl	800cd3c <HAL_RCC_GetSysClockFreq>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	4b0b      	ldr	r3, [pc, #44]	; (800cd2c <HAL_RCC_ClockConfig+0x1bc>)
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	091b      	lsrs	r3, r3, #4
 800cd02:	f003 030f 	and.w	r3, r3, #15
 800cd06:	490a      	ldr	r1, [pc, #40]	; (800cd30 <HAL_RCC_ClockConfig+0x1c0>)
 800cd08:	5ccb      	ldrb	r3, [r1, r3]
 800cd0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd0e:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <HAL_RCC_ClockConfig+0x1c4>)
 800cd10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cd12:	4b09      	ldr	r3, [pc, #36]	; (800cd38 <HAL_RCC_ClockConfig+0x1c8>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fc ffcc 	bl	8009cb4 <HAL_InitTick>

  return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	40023c00 	.word	0x40023c00
 800cd2c:	40023800 	.word	0x40023800
 800cd30:	0801246c 	.word	0x0801246c
 800cd34:	2000028c 	.word	0x2000028c
 800cd38:	20000324 	.word	0x20000324

0800cd3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd40:	b094      	sub	sp, #80	; 0x50
 800cd42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	647b      	str	r3, [r7, #68]	; 0x44
 800cd48:	2300      	movs	r3, #0
 800cd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cd50:	2300      	movs	r3, #0
 800cd52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd54:	4b79      	ldr	r3, [pc, #484]	; (800cf3c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	f003 030c 	and.w	r3, r3, #12
 800cd5c:	2b08      	cmp	r3, #8
 800cd5e:	d00d      	beq.n	800cd7c <HAL_RCC_GetSysClockFreq+0x40>
 800cd60:	2b08      	cmp	r3, #8
 800cd62:	f200 80e1 	bhi.w	800cf28 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <HAL_RCC_GetSysClockFreq+0x34>
 800cd6a:	2b04      	cmp	r3, #4
 800cd6c:	d003      	beq.n	800cd76 <HAL_RCC_GetSysClockFreq+0x3a>
 800cd6e:	e0db      	b.n	800cf28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd70:	4b73      	ldr	r3, [pc, #460]	; (800cf40 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cd74:	e0db      	b.n	800cf2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd76:	4b72      	ldr	r3, [pc, #456]	; (800cf40 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cd7a:	e0d8      	b.n	800cf2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd7c:	4b6f      	ldr	r3, [pc, #444]	; (800cf3c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd86:	4b6d      	ldr	r3, [pc, #436]	; (800cf3c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d063      	beq.n	800ce5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd92:	4b6a      	ldr	r3, [pc, #424]	; (800cf3c <HAL_RCC_GetSysClockFreq+0x200>)
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	099b      	lsrs	r3, r3, #6
 800cd98:	2200      	movs	r2, #0
 800cd9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda4:	633b      	str	r3, [r7, #48]	; 0x30
 800cda6:	2300      	movs	r3, #0
 800cda8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cdae:	4622      	mov	r2, r4
 800cdb0:	462b      	mov	r3, r5
 800cdb2:	f04f 0000 	mov.w	r0, #0
 800cdb6:	f04f 0100 	mov.w	r1, #0
 800cdba:	0159      	lsls	r1, r3, #5
 800cdbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cdc0:	0150      	lsls	r0, r2, #5
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	1a51      	subs	r1, r2, r1
 800cdca:	6139      	str	r1, [r7, #16]
 800cdcc:	4629      	mov	r1, r5
 800cdce:	eb63 0301 	sbc.w	r3, r3, r1
 800cdd2:	617b      	str	r3, [r7, #20]
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cde0:	4659      	mov	r1, fp
 800cde2:	018b      	lsls	r3, r1, #6
 800cde4:	4651      	mov	r1, sl
 800cde6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cdea:	4651      	mov	r1, sl
 800cdec:	018a      	lsls	r2, r1, #6
 800cdee:	4651      	mov	r1, sl
 800cdf0:	ebb2 0801 	subs.w	r8, r2, r1
 800cdf4:	4659      	mov	r1, fp
 800cdf6:	eb63 0901 	sbc.w	r9, r3, r1
 800cdfa:	f04f 0200 	mov.w	r2, #0
 800cdfe:	f04f 0300 	mov.w	r3, #0
 800ce02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce0e:	4690      	mov	r8, r2
 800ce10:	4699      	mov	r9, r3
 800ce12:	4623      	mov	r3, r4
 800ce14:	eb18 0303 	adds.w	r3, r8, r3
 800ce18:	60bb      	str	r3, [r7, #8]
 800ce1a:	462b      	mov	r3, r5
 800ce1c:	eb49 0303 	adc.w	r3, r9, r3
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	f04f 0200 	mov.w	r2, #0
 800ce26:	f04f 0300 	mov.w	r3, #0
 800ce2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ce2e:	4629      	mov	r1, r5
 800ce30:	028b      	lsls	r3, r1, #10
 800ce32:	4621      	mov	r1, r4
 800ce34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ce38:	4621      	mov	r1, r4
 800ce3a:	028a      	lsls	r2, r1, #10
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce42:	2200      	movs	r2, #0
 800ce44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce4c:	f7f3 ff1c 	bl	8000c88 <__aeabi_uldivmod>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4613      	mov	r3, r2
 800ce56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce58:	e058      	b.n	800cf0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce5a:	4b38      	ldr	r3, [pc, #224]	; (800cf3c <HAL_RCC_GetSysClockFreq+0x200>)
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	099b      	lsrs	r3, r3, #6
 800ce60:	2200      	movs	r2, #0
 800ce62:	4618      	mov	r0, r3
 800ce64:	4611      	mov	r1, r2
 800ce66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ce6a:	623b      	str	r3, [r7, #32]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ce74:	4642      	mov	r2, r8
 800ce76:	464b      	mov	r3, r9
 800ce78:	f04f 0000 	mov.w	r0, #0
 800ce7c:	f04f 0100 	mov.w	r1, #0
 800ce80:	0159      	lsls	r1, r3, #5
 800ce82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce86:	0150      	lsls	r0, r2, #5
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4641      	mov	r1, r8
 800ce8e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ce92:	4649      	mov	r1, r9
 800ce94:	eb63 0b01 	sbc.w	fp, r3, r1
 800ce98:	f04f 0200 	mov.w	r2, #0
 800ce9c:	f04f 0300 	mov.w	r3, #0
 800cea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ceac:	ebb2 040a 	subs.w	r4, r2, sl
 800ceb0:	eb63 050b 	sbc.w	r5, r3, fp
 800ceb4:	f04f 0200 	mov.w	r2, #0
 800ceb8:	f04f 0300 	mov.w	r3, #0
 800cebc:	00eb      	lsls	r3, r5, #3
 800cebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cec2:	00e2      	lsls	r2, r4, #3
 800cec4:	4614      	mov	r4, r2
 800cec6:	461d      	mov	r5, r3
 800cec8:	4643      	mov	r3, r8
 800ceca:	18e3      	adds	r3, r4, r3
 800cecc:	603b      	str	r3, [r7, #0]
 800cece:	464b      	mov	r3, r9
 800ced0:	eb45 0303 	adc.w	r3, r5, r3
 800ced4:	607b      	str	r3, [r7, #4]
 800ced6:	f04f 0200 	mov.w	r2, #0
 800ceda:	f04f 0300 	mov.w	r3, #0
 800cede:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cee2:	4629      	mov	r1, r5
 800cee4:	028b      	lsls	r3, r1, #10
 800cee6:	4621      	mov	r1, r4
 800cee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ceec:	4621      	mov	r1, r4
 800ceee:	028a      	lsls	r2, r1, #10
 800cef0:	4610      	mov	r0, r2
 800cef2:	4619      	mov	r1, r3
 800cef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef6:	2200      	movs	r2, #0
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	61fa      	str	r2, [r7, #28]
 800cefc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf00:	f7f3 fec2 	bl	8000c88 <__aeabi_uldivmod>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4613      	mov	r3, r2
 800cf0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cf0c:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <HAL_RCC_GetSysClockFreq+0x200>)
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	0c1b      	lsrs	r3, r3, #16
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	3301      	adds	r3, #1
 800cf18:	005b      	lsls	r3, r3, #1
 800cf1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800cf1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cf26:	e002      	b.n	800cf2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cf28:	4b05      	ldr	r3, [pc, #20]	; (800cf40 <HAL_RCC_GetSysClockFreq+0x204>)
 800cf2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cf2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cf2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3750      	adds	r7, #80	; 0x50
 800cf34:	46bd      	mov	sp, r7
 800cf36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf3a:	bf00      	nop
 800cf3c:	40023800 	.word	0x40023800
 800cf40:	00f42400 	.word	0x00f42400

0800cf44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf44:	b480      	push	{r7}
 800cf46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf48:	4b03      	ldr	r3, [pc, #12]	; (800cf58 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	2000028c 	.word	0x2000028c

0800cf5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cf60:	f7ff fff0 	bl	800cf44 <HAL_RCC_GetHCLKFreq>
 800cf64:	4602      	mov	r2, r0
 800cf66:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	0a9b      	lsrs	r3, r3, #10
 800cf6c:	f003 0307 	and.w	r3, r3, #7
 800cf70:	4903      	ldr	r1, [pc, #12]	; (800cf80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf72:	5ccb      	ldrb	r3, [r1, r3]
 800cf74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	40023800 	.word	0x40023800
 800cf80:	0801247c 	.word	0x0801247c

0800cf84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cf88:	f7ff ffdc 	bl	800cf44 <HAL_RCC_GetHCLKFreq>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	0b5b      	lsrs	r3, r3, #13
 800cf94:	f003 0307 	and.w	r3, r3, #7
 800cf98:	4903      	ldr	r1, [pc, #12]	; (800cfa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf9a:	5ccb      	ldrb	r3, [r1, r3]
 800cf9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	40023800 	.word	0x40023800
 800cfa8:	0801247c 	.word	0x0801247c

0800cfac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e041      	b.n	800d042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d106      	bne.n	800cfd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7f9 fb04 	bl	80065e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f000 fda4 	bl	800db38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d001      	beq.n	800d064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	e04e      	b.n	800d102 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2202      	movs	r2, #2
 800d068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68da      	ldr	r2, [r3, #12]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f042 0201 	orr.w	r2, r2, #1
 800d07a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a23      	ldr	r2, [pc, #140]	; (800d110 <HAL_TIM_Base_Start_IT+0xc4>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d022      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d08e:	d01d      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a1f      	ldr	r2, [pc, #124]	; (800d114 <HAL_TIM_Base_Start_IT+0xc8>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d018      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a1e      	ldr	r2, [pc, #120]	; (800d118 <HAL_TIM_Base_Start_IT+0xcc>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d013      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a1c      	ldr	r2, [pc, #112]	; (800d11c <HAL_TIM_Base_Start_IT+0xd0>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d00e      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a1b      	ldr	r2, [pc, #108]	; (800d120 <HAL_TIM_Base_Start_IT+0xd4>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d009      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a19      	ldr	r2, [pc, #100]	; (800d124 <HAL_TIM_Base_Start_IT+0xd8>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d004      	beq.n	800d0cc <HAL_TIM_Base_Start_IT+0x80>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a18      	ldr	r2, [pc, #96]	; (800d128 <HAL_TIM_Base_Start_IT+0xdc>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d111      	bne.n	800d0f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b06      	cmp	r3, #6
 800d0dc:	d010      	beq.n	800d100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f042 0201 	orr.w	r2, r2, #1
 800d0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0ee:	e007      	b.n	800d100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f042 0201 	orr.w	r2, r2, #1
 800d0fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	40010000 	.word	0x40010000
 800d114:	40000400 	.word	0x40000400
 800d118:	40000800 	.word	0x40000800
 800d11c:	40000c00 	.word	0x40000c00
 800d120:	40010400 	.word	0x40010400
 800d124:	40014000 	.word	0x40014000
 800d128:	40001800 	.word	0x40001800

0800d12c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e041      	b.n	800d1c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	d106      	bne.n	800d158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7f9 fb1c 	bl	8006790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3304      	adds	r3, #4
 800d168:	4619      	mov	r1, r3
 800d16a:	4610      	mov	r0, r2
 800d16c:	f000 fce4 	bl	800db38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d109      	bne.n	800d1f0 <HAL_TIM_PWM_Start+0x24>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	bf14      	ite	ne
 800d1e8:	2301      	movne	r3, #1
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	e022      	b.n	800d236 <HAL_TIM_PWM_Start+0x6a>
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	d109      	bne.n	800d20a <HAL_TIM_PWM_Start+0x3e>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	bf14      	ite	ne
 800d202:	2301      	movne	r3, #1
 800d204:	2300      	moveq	r3, #0
 800d206:	b2db      	uxtb	r3, r3
 800d208:	e015      	b.n	800d236 <HAL_TIM_PWM_Start+0x6a>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b08      	cmp	r3, #8
 800d20e:	d109      	bne.n	800d224 <HAL_TIM_PWM_Start+0x58>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d216:	b2db      	uxtb	r3, r3
 800d218:	2b01      	cmp	r3, #1
 800d21a:	bf14      	ite	ne
 800d21c:	2301      	movne	r3, #1
 800d21e:	2300      	moveq	r3, #0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	e008      	b.n	800d236 <HAL_TIM_PWM_Start+0x6a>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	bf14      	ite	ne
 800d230:	2301      	movne	r3, #1
 800d232:	2300      	moveq	r3, #0
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e07c      	b.n	800d338 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d104      	bne.n	800d24e <HAL_TIM_PWM_Start+0x82>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d24c:	e013      	b.n	800d276 <HAL_TIM_PWM_Start+0xaa>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	2b04      	cmp	r3, #4
 800d252:	d104      	bne.n	800d25e <HAL_TIM_PWM_Start+0x92>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2202      	movs	r2, #2
 800d258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d25c:	e00b      	b.n	800d276 <HAL_TIM_PWM_Start+0xaa>
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	2b08      	cmp	r3, #8
 800d262:	d104      	bne.n	800d26e <HAL_TIM_PWM_Start+0xa2>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2202      	movs	r2, #2
 800d268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d26c:	e003      	b.n	800d276 <HAL_TIM_PWM_Start+0xaa>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2202      	movs	r2, #2
 800d272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2201      	movs	r2, #1
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 ff44 	bl	800e10c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a2d      	ldr	r2, [pc, #180]	; (800d340 <HAL_TIM_PWM_Start+0x174>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d004      	beq.n	800d298 <HAL_TIM_PWM_Start+0xcc>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a2c      	ldr	r2, [pc, #176]	; (800d344 <HAL_TIM_PWM_Start+0x178>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d101      	bne.n	800d29c <HAL_TIM_PWM_Start+0xd0>
 800d298:	2301      	movs	r3, #1
 800d29a:	e000      	b.n	800d29e <HAL_TIM_PWM_Start+0xd2>
 800d29c:	2300      	movs	r3, #0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d007      	beq.n	800d2b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a22      	ldr	r2, [pc, #136]	; (800d340 <HAL_TIM_PWM_Start+0x174>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d022      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2c4:	d01d      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a1f      	ldr	r2, [pc, #124]	; (800d348 <HAL_TIM_PWM_Start+0x17c>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d018      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a1d      	ldr	r2, [pc, #116]	; (800d34c <HAL_TIM_PWM_Start+0x180>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d013      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a1c      	ldr	r2, [pc, #112]	; (800d350 <HAL_TIM_PWM_Start+0x184>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d00e      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a16      	ldr	r2, [pc, #88]	; (800d344 <HAL_TIM_PWM_Start+0x178>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d009      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a18      	ldr	r2, [pc, #96]	; (800d354 <HAL_TIM_PWM_Start+0x188>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d004      	beq.n	800d302 <HAL_TIM_PWM_Start+0x136>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a16      	ldr	r2, [pc, #88]	; (800d358 <HAL_TIM_PWM_Start+0x18c>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d111      	bne.n	800d326 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	f003 0307 	and.w	r3, r3, #7
 800d30c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2b06      	cmp	r3, #6
 800d312:	d010      	beq.n	800d336 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f042 0201 	orr.w	r2, r2, #1
 800d322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d324:	e007      	b.n	800d336 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0201 	orr.w	r2, r2, #1
 800d334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	40010000 	.word	0x40010000
 800d344:	40010400 	.word	0x40010400
 800d348:	40000400 	.word	0x40000400
 800d34c:	40000800 	.word	0x40000800
 800d350:	40000c00 	.word	0x40000c00
 800d354:	40014000 	.word	0x40014000
 800d358:	40001800 	.word	0x40001800

0800d35c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e097      	b.n	800d4a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7f9 f969 	bl	800665c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2202      	movs	r2, #2
 800d38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3a0:	f023 0307 	bic.w	r3, r3, #7
 800d3a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	f000 fbc1 	bl	800db38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	699b      	ldr	r3, [r3, #24]
 800d3c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	6a1b      	ldr	r3, [r3, #32]
 800d3cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3de:	f023 0303 	bic.w	r3, r3, #3
 800d3e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	689a      	ldr	r2, [r3, #8]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	021b      	lsls	r3, r3, #8
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d3fc:	f023 030c 	bic.w	r3, r3, #12
 800d400:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d40c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	021b      	lsls	r3, r3, #8
 800d418:	4313      	orrs	r3, r2
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	4313      	orrs	r3, r2
 800d41e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	011a      	lsls	r2, r3, #4
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	031b      	lsls	r3, r3, #12
 800d42c:	4313      	orrs	r3, r2
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	4313      	orrs	r3, r2
 800d432:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d43a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d442:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	685a      	ldr	r2, [r3, #4]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	695b      	ldr	r3, [r3, #20]
 800d44c:	011b      	lsls	r3, r3, #4
 800d44e:	4313      	orrs	r3, r2
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	4313      	orrs	r3, r2
 800d454:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	693a      	ldr	r2, [r7, #16]
 800d464:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2201      	movs	r2, #1
 800d47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3718      	adds	r7, #24
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d110      	bne.n	800d4fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d102      	bne.n	800d4e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4de:	7b7b      	ldrb	r3, [r7, #13]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d001      	beq.n	800d4e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e069      	b.n	800d5bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2202      	movs	r2, #2
 800d4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4f8:	e031      	b.n	800d55e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d110      	bne.n	800d522 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d500:	7bbb      	ldrb	r3, [r7, #14]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d102      	bne.n	800d50c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d506:	7b3b      	ldrb	r3, [r7, #12]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d001      	beq.n	800d510 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e055      	b.n	800d5bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2202      	movs	r2, #2
 800d51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d520:	e01d      	b.n	800d55e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d522:	7bfb      	ldrb	r3, [r7, #15]
 800d524:	2b01      	cmp	r3, #1
 800d526:	d108      	bne.n	800d53a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d528:	7bbb      	ldrb	r3, [r7, #14]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d105      	bne.n	800d53a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d52e:	7b7b      	ldrb	r3, [r7, #13]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d102      	bne.n	800d53a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d534:	7b3b      	ldrb	r3, [r7, #12]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d001      	beq.n	800d53e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e03e      	b.n	800d5bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2202      	movs	r2, #2
 800d542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2202      	movs	r2, #2
 800d54a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2202      	movs	r2, #2
 800d552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2202      	movs	r2, #2
 800d55a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d003      	beq.n	800d56c <HAL_TIM_Encoder_Start+0xc4>
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b04      	cmp	r3, #4
 800d568:	d008      	beq.n	800d57c <HAL_TIM_Encoder_Start+0xd4>
 800d56a:	e00f      	b.n	800d58c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2201      	movs	r2, #1
 800d572:	2100      	movs	r1, #0
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fdc9 	bl	800e10c <TIM_CCxChannelCmd>
      break;
 800d57a:	e016      	b.n	800d5aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2201      	movs	r2, #1
 800d582:	2104      	movs	r1, #4
 800d584:	4618      	mov	r0, r3
 800d586:	f000 fdc1 	bl	800e10c <TIM_CCxChannelCmd>
      break;
 800d58a:	e00e      	b.n	800d5aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2201      	movs	r2, #1
 800d592:	2100      	movs	r1, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fdb9 	bl	800e10c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	2104      	movs	r1, #4
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 fdb2 	bl	800e10c <TIM_CCxChannelCmd>
      break;
 800d5a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f042 0201 	orr.w	r2, r2, #1
 800d5b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	f003 0302 	and.w	r3, r3, #2
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d122      	bne.n	800d620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	f003 0302 	and.w	r3, r3, #2
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d11b      	bne.n	800d620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f06f 0202 	mvn.w	r2, #2
 800d5f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	f003 0303 	and.w	r3, r3, #3
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fa77 	bl	800dafa <HAL_TIM_IC_CaptureCallback>
 800d60c:	e005      	b.n	800d61a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fa69 	bl	800dae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fa7a 	bl	800db0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b04      	cmp	r3, #4
 800d62c:	d122      	bne.n	800d674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	2b04      	cmp	r3, #4
 800d63a:	d11b      	bne.n	800d674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f06f 0204 	mvn.w	r2, #4
 800d644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2202      	movs	r2, #2
 800d64a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fa4d 	bl	800dafa <HAL_TIM_IC_CaptureCallback>
 800d660:	e005      	b.n	800d66e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa3f 	bl	800dae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fa50 	bl	800db0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	f003 0308 	and.w	r3, r3, #8
 800d67e:	2b08      	cmp	r3, #8
 800d680:	d122      	bne.n	800d6c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	f003 0308 	and.w	r3, r3, #8
 800d68c:	2b08      	cmp	r3, #8
 800d68e:	d11b      	bne.n	800d6c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f06f 0208 	mvn.w	r2, #8
 800d698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2204      	movs	r2, #4
 800d69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	69db      	ldr	r3, [r3, #28]
 800d6a6:	f003 0303 	and.w	r3, r3, #3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fa23 	bl	800dafa <HAL_TIM_IC_CaptureCallback>
 800d6b4:	e005      	b.n	800d6c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fa15 	bl	800dae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fa26 	bl	800db0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	691b      	ldr	r3, [r3, #16]
 800d6ce:	f003 0310 	and.w	r3, r3, #16
 800d6d2:	2b10      	cmp	r3, #16
 800d6d4:	d122      	bne.n	800d71c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	f003 0310 	and.w	r3, r3, #16
 800d6e0:	2b10      	cmp	r3, #16
 800d6e2:	d11b      	bne.n	800d71c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f06f 0210 	mvn.w	r2, #16
 800d6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2208      	movs	r2, #8
 800d6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d003      	beq.n	800d70a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f9f9 	bl	800dafa <HAL_TIM_IC_CaptureCallback>
 800d708:	e005      	b.n	800d716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f9eb 	bl	800dae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f9fc 	bl	800db0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b01      	cmp	r3, #1
 800d728:	d10e      	bne.n	800d748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	2b01      	cmp	r3, #1
 800d736:	d107      	bne.n	800d748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f06f 0201 	mvn.w	r2, #1
 800d740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7f4 fda2 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d752:	2b80      	cmp	r3, #128	; 0x80
 800d754:	d10e      	bne.n	800d774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d760:	2b80      	cmp	r3, #128	; 0x80
 800d762:	d107      	bne.n	800d774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fdca 	bl	800e308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77e:	2b40      	cmp	r3, #64	; 0x40
 800d780:	d10e      	bne.n	800d7a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78c:	2b40      	cmp	r3, #64	; 0x40
 800d78e:	d107      	bne.n	800d7a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 f9c1 	bl	800db22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	f003 0320 	and.w	r3, r3, #32
 800d7aa:	2b20      	cmp	r3, #32
 800d7ac:	d10e      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	f003 0320 	and.w	r3, r3, #32
 800d7b8:	2b20      	cmp	r3, #32
 800d7ba:	d107      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f06f 0220 	mvn.w	r2, #32
 800d7c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fd94 	bl	800e2f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d101      	bne.n	800d7f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	e0ae      	b.n	800d950 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b0c      	cmp	r3, #12
 800d7fe:	f200 809f 	bhi.w	800d940 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d802:	a201      	add	r2, pc, #4	; (adr r2, 800d808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d808:	0800d83d 	.word	0x0800d83d
 800d80c:	0800d941 	.word	0x0800d941
 800d810:	0800d941 	.word	0x0800d941
 800d814:	0800d941 	.word	0x0800d941
 800d818:	0800d87d 	.word	0x0800d87d
 800d81c:	0800d941 	.word	0x0800d941
 800d820:	0800d941 	.word	0x0800d941
 800d824:	0800d941 	.word	0x0800d941
 800d828:	0800d8bf 	.word	0x0800d8bf
 800d82c:	0800d941 	.word	0x0800d941
 800d830:	0800d941 	.word	0x0800d941
 800d834:	0800d941 	.word	0x0800d941
 800d838:	0800d8ff 	.word	0x0800d8ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	4618      	mov	r0, r3
 800d844:	f000 fa18 	bl	800dc78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	699a      	ldr	r2, [r3, #24]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f042 0208 	orr.w	r2, r2, #8
 800d856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	699a      	ldr	r2, [r3, #24]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f022 0204 	bic.w	r2, r2, #4
 800d866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6999      	ldr	r1, [r3, #24]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	691a      	ldr	r2, [r3, #16]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	430a      	orrs	r2, r1
 800d878:	619a      	str	r2, [r3, #24]
      break;
 800d87a:	e064      	b.n	800d946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68b9      	ldr	r1, [r7, #8]
 800d882:	4618      	mov	r0, r3
 800d884:	f000 fa68 	bl	800dd58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	699a      	ldr	r2, [r3, #24]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	699a      	ldr	r2, [r3, #24]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6999      	ldr	r1, [r3, #24]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	021a      	lsls	r2, r3, #8
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	430a      	orrs	r2, r1
 800d8ba:	619a      	str	r2, [r3, #24]
      break;
 800d8bc:	e043      	b.n	800d946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 fabd 	bl	800de44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69da      	ldr	r2, [r3, #28]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f042 0208 	orr.w	r2, r2, #8
 800d8d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	69da      	ldr	r2, [r3, #28]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f022 0204 	bic.w	r2, r2, #4
 800d8e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	69d9      	ldr	r1, [r3, #28]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	691a      	ldr	r2, [r3, #16]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	61da      	str	r2, [r3, #28]
      break;
 800d8fc:	e023      	b.n	800d946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fb11 	bl	800df2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	69da      	ldr	r2, [r3, #28]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	69da      	ldr	r2, [r3, #28]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	69d9      	ldr	r1, [r3, #28]
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	021a      	lsls	r2, r3, #8
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	61da      	str	r2, [r3, #28]
      break;
 800d93e:	e002      	b.n	800d946 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	75fb      	strb	r3, [r7, #23]
      break;
 800d944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2200      	movs	r2, #0
 800d94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d101      	bne.n	800d974 <HAL_TIM_ConfigClockSource+0x1c>
 800d970:	2302      	movs	r3, #2
 800d972:	e0b4      	b.n	800dade <HAL_TIM_ConfigClockSource+0x186>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2202      	movs	r2, #2
 800d980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d99a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9ac:	d03e      	beq.n	800da2c <HAL_TIM_ConfigClockSource+0xd4>
 800d9ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9b2:	f200 8087 	bhi.w	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9ba:	f000 8086 	beq.w	800daca <HAL_TIM_ConfigClockSource+0x172>
 800d9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9c2:	d87f      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9c4:	2b70      	cmp	r3, #112	; 0x70
 800d9c6:	d01a      	beq.n	800d9fe <HAL_TIM_ConfigClockSource+0xa6>
 800d9c8:	2b70      	cmp	r3, #112	; 0x70
 800d9ca:	d87b      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9cc:	2b60      	cmp	r3, #96	; 0x60
 800d9ce:	d050      	beq.n	800da72 <HAL_TIM_ConfigClockSource+0x11a>
 800d9d0:	2b60      	cmp	r3, #96	; 0x60
 800d9d2:	d877      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9d4:	2b50      	cmp	r3, #80	; 0x50
 800d9d6:	d03c      	beq.n	800da52 <HAL_TIM_ConfigClockSource+0xfa>
 800d9d8:	2b50      	cmp	r3, #80	; 0x50
 800d9da:	d873      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9dc:	2b40      	cmp	r3, #64	; 0x40
 800d9de:	d058      	beq.n	800da92 <HAL_TIM_ConfigClockSource+0x13a>
 800d9e0:	2b40      	cmp	r3, #64	; 0x40
 800d9e2:	d86f      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9e4:	2b30      	cmp	r3, #48	; 0x30
 800d9e6:	d064      	beq.n	800dab2 <HAL_TIM_ConfigClockSource+0x15a>
 800d9e8:	2b30      	cmp	r3, #48	; 0x30
 800d9ea:	d86b      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9ec:	2b20      	cmp	r3, #32
 800d9ee:	d060      	beq.n	800dab2 <HAL_TIM_ConfigClockSource+0x15a>
 800d9f0:	2b20      	cmp	r3, #32
 800d9f2:	d867      	bhi.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d05c      	beq.n	800dab2 <HAL_TIM_ConfigClockSource+0x15a>
 800d9f8:	2b10      	cmp	r3, #16
 800d9fa:	d05a      	beq.n	800dab2 <HAL_TIM_ConfigClockSource+0x15a>
 800d9fc:	e062      	b.n	800dac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6818      	ldr	r0, [r3, #0]
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	6899      	ldr	r1, [r3, #8]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f000 fb5d 	bl	800e0cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800da20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	609a      	str	r2, [r3, #8]
      break;
 800da2a:	e04f      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	6899      	ldr	r1, [r3, #8]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	685a      	ldr	r2, [r3, #4]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	f000 fb46 	bl	800e0cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689a      	ldr	r2, [r3, #8]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da4e:	609a      	str	r2, [r3, #8]
      break;
 800da50:	e03c      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	6859      	ldr	r1, [r3, #4]
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	461a      	mov	r2, r3
 800da60:	f000 faba 	bl	800dfd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2150      	movs	r1, #80	; 0x50
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 fb13 	bl	800e096 <TIM_ITRx_SetConfig>
      break;
 800da70:	e02c      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	6859      	ldr	r1, [r3, #4]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	461a      	mov	r2, r3
 800da80:	f000 fad9 	bl	800e036 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2160      	movs	r1, #96	; 0x60
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 fb03 	bl	800e096 <TIM_ITRx_SetConfig>
      break;
 800da90:	e01c      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	6859      	ldr	r1, [r3, #4]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	461a      	mov	r2, r3
 800daa0:	f000 fa9a 	bl	800dfd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2140      	movs	r1, #64	; 0x40
 800daaa:	4618      	mov	r0, r3
 800daac:	f000 faf3 	bl	800e096 <TIM_ITRx_SetConfig>
      break;
 800dab0:	e00c      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4619      	mov	r1, r3
 800dabc:	4610      	mov	r0, r2
 800dabe:	f000 faea 	bl	800e096 <TIM_ITRx_SetConfig>
      break;
 800dac2:	e003      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	73fb      	strb	r3, [r7, #15]
      break;
 800dac8:	e000      	b.n	800dacc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800daca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dae6:	b480      	push	{r7}
 800dae8:	b083      	sub	sp, #12
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800daee:	bf00      	nop
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db02:	bf00      	nop
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db0e:	b480      	push	{r7}
 800db10:	b083      	sub	sp, #12
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db16:	bf00      	nop
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db22:	b480      	push	{r7}
 800db24:	b083      	sub	sp, #12
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db2a:	bf00      	nop
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
	...

0800db38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a40      	ldr	r2, [pc, #256]	; (800dc4c <TIM_Base_SetConfig+0x114>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d013      	beq.n	800db78 <TIM_Base_SetConfig+0x40>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db56:	d00f      	beq.n	800db78 <TIM_Base_SetConfig+0x40>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a3d      	ldr	r2, [pc, #244]	; (800dc50 <TIM_Base_SetConfig+0x118>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d00b      	beq.n	800db78 <TIM_Base_SetConfig+0x40>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a3c      	ldr	r2, [pc, #240]	; (800dc54 <TIM_Base_SetConfig+0x11c>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d007      	beq.n	800db78 <TIM_Base_SetConfig+0x40>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a3b      	ldr	r2, [pc, #236]	; (800dc58 <TIM_Base_SetConfig+0x120>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d003      	beq.n	800db78 <TIM_Base_SetConfig+0x40>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a3a      	ldr	r2, [pc, #232]	; (800dc5c <TIM_Base_SetConfig+0x124>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d108      	bne.n	800db8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	4313      	orrs	r3, r2
 800db88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4a2f      	ldr	r2, [pc, #188]	; (800dc4c <TIM_Base_SetConfig+0x114>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d02b      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db98:	d027      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a2c      	ldr	r2, [pc, #176]	; (800dc50 <TIM_Base_SetConfig+0x118>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d023      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4a2b      	ldr	r2, [pc, #172]	; (800dc54 <TIM_Base_SetConfig+0x11c>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d01f      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a2a      	ldr	r2, [pc, #168]	; (800dc58 <TIM_Base_SetConfig+0x120>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d01b      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4a29      	ldr	r2, [pc, #164]	; (800dc5c <TIM_Base_SetConfig+0x124>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d017      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a28      	ldr	r2, [pc, #160]	; (800dc60 <TIM_Base_SetConfig+0x128>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d013      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4a27      	ldr	r2, [pc, #156]	; (800dc64 <TIM_Base_SetConfig+0x12c>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d00f      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4a26      	ldr	r2, [pc, #152]	; (800dc68 <TIM_Base_SetConfig+0x130>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d00b      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a25      	ldr	r2, [pc, #148]	; (800dc6c <TIM_Base_SetConfig+0x134>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d007      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4a24      	ldr	r2, [pc, #144]	; (800dc70 <TIM_Base_SetConfig+0x138>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d003      	beq.n	800dbea <TIM_Base_SetConfig+0xb2>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a23      	ldr	r2, [pc, #140]	; (800dc74 <TIM_Base_SetConfig+0x13c>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d108      	bne.n	800dbfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	4313      	orrs	r3, r2
 800dc08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	689a      	ldr	r2, [r3, #8]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4a0a      	ldr	r2, [pc, #40]	; (800dc4c <TIM_Base_SetConfig+0x114>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d003      	beq.n	800dc30 <TIM_Base_SetConfig+0xf8>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a0c      	ldr	r2, [pc, #48]	; (800dc5c <TIM_Base_SetConfig+0x124>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d103      	bne.n	800dc38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	691a      	ldr	r2, [r3, #16]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	615a      	str	r2, [r3, #20]
}
 800dc3e:	bf00      	nop
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40000400 	.word	0x40000400
 800dc54:	40000800 	.word	0x40000800
 800dc58:	40000c00 	.word	0x40000c00
 800dc5c:	40010400 	.word	0x40010400
 800dc60:	40014000 	.word	0x40014000
 800dc64:	40014400 	.word	0x40014400
 800dc68:	40014800 	.word	0x40014800
 800dc6c:	40001800 	.word	0x40001800
 800dc70:	40001c00 	.word	0x40001c00
 800dc74:	40002000 	.word	0x40002000

0800dc78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a1b      	ldr	r3, [r3, #32]
 800dc86:	f023 0201 	bic.w	r2, r3, #1
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	699b      	ldr	r3, [r3, #24]
 800dc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f023 0303 	bic.w	r3, r3, #3
 800dcae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	f023 0302 	bic.w	r3, r3, #2
 800dcc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	4a20      	ldr	r2, [pc, #128]	; (800dd50 <TIM_OC1_SetConfig+0xd8>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d003      	beq.n	800dcdc <TIM_OC1_SetConfig+0x64>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4a1f      	ldr	r2, [pc, #124]	; (800dd54 <TIM_OC1_SetConfig+0xdc>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d10c      	bne.n	800dcf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	f023 0308 	bic.w	r3, r3, #8
 800dce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	4313      	orrs	r3, r2
 800dcec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	f023 0304 	bic.w	r3, r3, #4
 800dcf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <TIM_OC1_SetConfig+0xd8>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d003      	beq.n	800dd06 <TIM_OC1_SetConfig+0x8e>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a14      	ldr	r2, [pc, #80]	; (800dd54 <TIM_OC1_SetConfig+0xdc>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d111      	bne.n	800dd2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dd14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	695b      	ldr	r3, [r3, #20]
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	693a      	ldr	r2, [r7, #16]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	697a      	ldr	r2, [r7, #20]
 800dd42:	621a      	str	r2, [r3, #32]
}
 800dd44:	bf00      	nop
 800dd46:	371c      	adds	r7, #28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	40010000 	.word	0x40010000
 800dd54:	40010400 	.word	0x40010400

0800dd58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	f023 0210 	bic.w	r2, r3, #16
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	021b      	lsls	r3, r3, #8
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f023 0320 	bic.w	r3, r3, #32
 800dda2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	011b      	lsls	r3, r3, #4
 800ddaa:	697a      	ldr	r2, [r7, #20]
 800ddac:	4313      	orrs	r3, r2
 800ddae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a22      	ldr	r2, [pc, #136]	; (800de3c <TIM_OC2_SetConfig+0xe4>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d003      	beq.n	800ddc0 <TIM_OC2_SetConfig+0x68>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4a21      	ldr	r2, [pc, #132]	; (800de40 <TIM_OC2_SetConfig+0xe8>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d10d      	bne.n	800dddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	011b      	lsls	r3, r3, #4
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a17      	ldr	r2, [pc, #92]	; (800de3c <TIM_OC2_SetConfig+0xe4>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d003      	beq.n	800ddec <TIM_OC2_SetConfig+0x94>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a16      	ldr	r2, [pc, #88]	; (800de40 <TIM_OC2_SetConfig+0xe8>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d113      	bne.n	800de14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ddf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	693a      	ldr	r2, [r7, #16]
 800de04:	4313      	orrs	r3, r2
 800de06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	4313      	orrs	r3, r2
 800de12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	693a      	ldr	r2, [r7, #16]
 800de18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	697a      	ldr	r2, [r7, #20]
 800de2c:	621a      	str	r2, [r3, #32]
}
 800de2e:	bf00      	nop
 800de30:	371c      	adds	r7, #28
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	40010000 	.word	0x40010000
 800de40:	40010400 	.word	0x40010400

0800de44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de44:	b480      	push	{r7}
 800de46:	b087      	sub	sp, #28
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	69db      	ldr	r3, [r3, #28]
 800de6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f023 0303 	bic.w	r3, r3, #3
 800de7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	4313      	orrs	r3, r2
 800de84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	021b      	lsls	r3, r3, #8
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	4313      	orrs	r3, r2
 800de98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a21      	ldr	r2, [pc, #132]	; (800df24 <TIM_OC3_SetConfig+0xe0>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d003      	beq.n	800deaa <TIM_OC3_SetConfig+0x66>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a20      	ldr	r2, [pc, #128]	; (800df28 <TIM_OC3_SetConfig+0xe4>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d10d      	bne.n	800dec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800deb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	021b      	lsls	r3, r3, #8
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	4313      	orrs	r3, r2
 800debc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a16      	ldr	r2, [pc, #88]	; (800df24 <TIM_OC3_SetConfig+0xe0>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d003      	beq.n	800ded6 <TIM_OC3_SetConfig+0x92>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a15      	ldr	r2, [pc, #84]	; (800df28 <TIM_OC3_SetConfig+0xe4>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d113      	bne.n	800defe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dedc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	011b      	lsls	r3, r3, #4
 800deec:	693a      	ldr	r2, [r7, #16]
 800deee:	4313      	orrs	r3, r2
 800def0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	011b      	lsls	r3, r3, #4
 800def8:	693a      	ldr	r2, [r7, #16]
 800defa:	4313      	orrs	r3, r2
 800defc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	621a      	str	r2, [r3, #32]
}
 800df18:	bf00      	nop
 800df1a:	371c      	adds	r7, #28
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	40010000 	.word	0x40010000
 800df28:	40010400 	.word	0x40010400

0800df2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a1b      	ldr	r3, [r3, #32]
 800df3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	69db      	ldr	r3, [r3, #28]
 800df52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	021b      	lsls	r3, r3, #8
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	031b      	lsls	r3, r3, #12
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	4313      	orrs	r3, r2
 800df82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a12      	ldr	r2, [pc, #72]	; (800dfd0 <TIM_OC4_SetConfig+0xa4>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d003      	beq.n	800df94 <TIM_OC4_SetConfig+0x68>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a11      	ldr	r2, [pc, #68]	; (800dfd4 <TIM_OC4_SetConfig+0xa8>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d109      	bne.n	800dfa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	695b      	ldr	r3, [r3, #20]
 800dfa0:	019b      	lsls	r3, r3, #6
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	697a      	ldr	r2, [r7, #20]
 800dfac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	621a      	str	r2, [r3, #32]
}
 800dfc2:	bf00      	nop
 800dfc4:	371c      	adds	r7, #28
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	40010000 	.word	0x40010000
 800dfd4:	40010400 	.word	0x40010400

0800dfd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b087      	sub	sp, #28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6a1b      	ldr	r3, [r3, #32]
 800dfe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	f023 0201 	bic.w	r2, r3, #1
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	011b      	lsls	r3, r3, #4
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	4313      	orrs	r3, r2
 800e00c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f023 030a 	bic.w	r3, r3, #10
 800e014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	621a      	str	r2, [r3, #32]
}
 800e02a:	bf00      	nop
 800e02c:	371c      	adds	r7, #28
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e036:	b480      	push	{r7}
 800e038:	b087      	sub	sp, #28
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6a1b      	ldr	r3, [r3, #32]
 800e046:	f023 0210 	bic.w	r2, r3, #16
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6a1b      	ldr	r3, [r3, #32]
 800e058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	031b      	lsls	r3, r3, #12
 800e066:	697a      	ldr	r2, [r7, #20]
 800e068:	4313      	orrs	r3, r2
 800e06a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	011b      	lsls	r3, r3, #4
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	697a      	ldr	r2, [r7, #20]
 800e082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	621a      	str	r2, [r3, #32]
}
 800e08a:	bf00      	nop
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e096:	b480      	push	{r7}
 800e098:	b085      	sub	sp, #20
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
 800e09e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	f043 0307 	orr.w	r3, r3, #7
 800e0b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	609a      	str	r2, [r3, #8]
}
 800e0c0:	bf00      	nop
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b087      	sub	sp, #28
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e0e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	021a      	lsls	r2, r3, #8
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	431a      	orrs	r2, r3
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	609a      	str	r2, [r3, #8]
}
 800e100:	bf00      	nop
 800e102:	371c      	adds	r7, #28
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f003 031f 	and.w	r3, r3, #31
 800e11e:	2201      	movs	r2, #1
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6a1a      	ldr	r2, [r3, #32]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	43db      	mvns	r3, r3
 800e12e:	401a      	ands	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6a1a      	ldr	r2, [r3, #32]
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f003 031f 	and.w	r3, r3, #31
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	fa01 f303 	lsl.w	r3, r1, r3
 800e144:	431a      	orrs	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	621a      	str	r2, [r3, #32]
}
 800e14a:	bf00      	nop
 800e14c:	371c      	adds	r7, #28
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
	...

0800e158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d101      	bne.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e16c:	2302      	movs	r3, #2
 800e16e:	e05a      	b.n	800e226 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2202      	movs	r2, #2
 800e17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a21      	ldr	r2, [pc, #132]	; (800e234 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d022      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1bc:	d01d      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a1d      	ldr	r2, [pc, #116]	; (800e238 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d018      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a1b      	ldr	r2, [pc, #108]	; (800e23c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d013      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a1a      	ldr	r2, [pc, #104]	; (800e240 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d00e      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a18      	ldr	r2, [pc, #96]	; (800e244 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d009      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a17      	ldr	r2, [pc, #92]	; (800e248 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d004      	beq.n	800e1fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a15      	ldr	r2, [pc, #84]	; (800e24c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d10c      	bne.n	800e214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	4313      	orrs	r3, r2
 800e20a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3714      	adds	r7, #20
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	40010000 	.word	0x40010000
 800e238:	40000400 	.word	0x40000400
 800e23c:	40000800 	.word	0x40000800
 800e240:	40000c00 	.word	0x40000c00
 800e244:	40010400 	.word	0x40010400
 800e248:	40014000 	.word	0x40014000
 800e24c:	40001800 	.word	0x40001800

0800e250 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e264:	2b01      	cmp	r3, #1
 800e266:	d101      	bne.n	800e26c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e268:	2302      	movs	r3, #2
 800e26a:	e03d      	b.n	800e2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	4313      	orrs	r3, r2
 800e280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	69db      	ldr	r3, [r3, #28]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e03f      	b.n	800e3ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7fb fba8 	bl	8009a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2224      	movs	r2, #36	; 0x24
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68da      	ldr	r2, [r3, #12]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e35e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f829 	bl	800e3b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	691a      	ldr	r2, [r3, #16]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	695a      	ldr	r2, [r3, #20]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68da      	ldr	r2, [r3, #12]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2220      	movs	r2, #32
 800e3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2220      	movs	r2, #32
 800e3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3bc:	b0c0      	sub	sp, #256	; 0x100
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3d4:	68d9      	ldr	r1, [r3, #12]
 800e3d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	ea40 0301 	orr.w	r3, r0, r1
 800e3e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3e6:	689a      	ldr	r2, [r3, #8]
 800e3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	431a      	orrs	r2, r3
 800e3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3f4:	695b      	ldr	r3, [r3, #20]
 800e3f6:	431a      	orrs	r2, r3
 800e3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3fc:	69db      	ldr	r3, [r3, #28]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e410:	f021 010c 	bic.w	r1, r1, #12
 800e414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e41e:	430b      	orrs	r3, r1
 800e420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	695b      	ldr	r3, [r3, #20]
 800e42a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e432:	6999      	ldr	r1, [r3, #24]
 800e434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	ea40 0301 	orr.w	r3, r0, r1
 800e43e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	4b8f      	ldr	r3, [pc, #572]	; (800e684 <UART_SetConfig+0x2cc>)
 800e448:	429a      	cmp	r2, r3
 800e44a:	d005      	beq.n	800e458 <UART_SetConfig+0xa0>
 800e44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	4b8d      	ldr	r3, [pc, #564]	; (800e688 <UART_SetConfig+0x2d0>)
 800e454:	429a      	cmp	r2, r3
 800e456:	d104      	bne.n	800e462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e458:	f7fe fd94 	bl	800cf84 <HAL_RCC_GetPCLK2Freq>
 800e45c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e460:	e003      	b.n	800e46a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e462:	f7fe fd7b 	bl	800cf5c <HAL_RCC_GetPCLK1Freq>
 800e466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e46a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e46e:	69db      	ldr	r3, [r3, #28]
 800e470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e474:	f040 810c 	bne.w	800e690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e47c:	2200      	movs	r2, #0
 800e47e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e48a:	4622      	mov	r2, r4
 800e48c:	462b      	mov	r3, r5
 800e48e:	1891      	adds	r1, r2, r2
 800e490:	65b9      	str	r1, [r7, #88]	; 0x58
 800e492:	415b      	adcs	r3, r3
 800e494:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e49a:	4621      	mov	r1, r4
 800e49c:	eb12 0801 	adds.w	r8, r2, r1
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	eb43 0901 	adc.w	r9, r3, r1
 800e4a6:	f04f 0200 	mov.w	r2, #0
 800e4aa:	f04f 0300 	mov.w	r3, #0
 800e4ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e4b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e4b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e4ba:	4690      	mov	r8, r2
 800e4bc:	4699      	mov	r9, r3
 800e4be:	4623      	mov	r3, r4
 800e4c0:	eb18 0303 	adds.w	r3, r8, r3
 800e4c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e4c8:	462b      	mov	r3, r5
 800e4ca:	eb49 0303 	adc.w	r3, r9, r3
 800e4ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e4d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e4de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e4e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	18db      	adds	r3, r3, r3
 800e4ea:	653b      	str	r3, [r7, #80]	; 0x50
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	eb42 0303 	adc.w	r3, r2, r3
 800e4f2:	657b      	str	r3, [r7, #84]	; 0x54
 800e4f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e4f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e4fc:	f7f2 fbc4 	bl	8000c88 <__aeabi_uldivmod>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4b61      	ldr	r3, [pc, #388]	; (800e68c <UART_SetConfig+0x2d4>)
 800e506:	fba3 2302 	umull	r2, r3, r3, r2
 800e50a:	095b      	lsrs	r3, r3, #5
 800e50c:	011c      	lsls	r4, r3, #4
 800e50e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e512:	2200      	movs	r2, #0
 800e514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e51c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e520:	4642      	mov	r2, r8
 800e522:	464b      	mov	r3, r9
 800e524:	1891      	adds	r1, r2, r2
 800e526:	64b9      	str	r1, [r7, #72]	; 0x48
 800e528:	415b      	adcs	r3, r3
 800e52a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e52c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e530:	4641      	mov	r1, r8
 800e532:	eb12 0a01 	adds.w	sl, r2, r1
 800e536:	4649      	mov	r1, r9
 800e538:	eb43 0b01 	adc.w	fp, r3, r1
 800e53c:	f04f 0200 	mov.w	r2, #0
 800e540:	f04f 0300 	mov.w	r3, #0
 800e544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e54c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e550:	4692      	mov	sl, r2
 800e552:	469b      	mov	fp, r3
 800e554:	4643      	mov	r3, r8
 800e556:	eb1a 0303 	adds.w	r3, sl, r3
 800e55a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e55e:	464b      	mov	r3, r9
 800e560:	eb4b 0303 	adc.w	r3, fp, r3
 800e564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e57c:	460b      	mov	r3, r1
 800e57e:	18db      	adds	r3, r3, r3
 800e580:	643b      	str	r3, [r7, #64]	; 0x40
 800e582:	4613      	mov	r3, r2
 800e584:	eb42 0303 	adc.w	r3, r2, r3
 800e588:	647b      	str	r3, [r7, #68]	; 0x44
 800e58a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e58e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e592:	f7f2 fb79 	bl	8000c88 <__aeabi_uldivmod>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4611      	mov	r1, r2
 800e59c:	4b3b      	ldr	r3, [pc, #236]	; (800e68c <UART_SetConfig+0x2d4>)
 800e59e:	fba3 2301 	umull	r2, r3, r3, r1
 800e5a2:	095b      	lsrs	r3, r3, #5
 800e5a4:	2264      	movs	r2, #100	; 0x64
 800e5a6:	fb02 f303 	mul.w	r3, r2, r3
 800e5aa:	1acb      	subs	r3, r1, r3
 800e5ac:	00db      	lsls	r3, r3, #3
 800e5ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e5b2:	4b36      	ldr	r3, [pc, #216]	; (800e68c <UART_SetConfig+0x2d4>)
 800e5b4:	fba3 2302 	umull	r2, r3, r3, r2
 800e5b8:	095b      	lsrs	r3, r3, #5
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e5c0:	441c      	add	r4, r3
 800e5c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e5d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e5d4:	4642      	mov	r2, r8
 800e5d6:	464b      	mov	r3, r9
 800e5d8:	1891      	adds	r1, r2, r2
 800e5da:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5dc:	415b      	adcs	r3, r3
 800e5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e5e4:	4641      	mov	r1, r8
 800e5e6:	1851      	adds	r1, r2, r1
 800e5e8:	6339      	str	r1, [r7, #48]	; 0x30
 800e5ea:	4649      	mov	r1, r9
 800e5ec:	414b      	adcs	r3, r1
 800e5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e5f0:	f04f 0200 	mov.w	r2, #0
 800e5f4:	f04f 0300 	mov.w	r3, #0
 800e5f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e5fc:	4659      	mov	r1, fp
 800e5fe:	00cb      	lsls	r3, r1, #3
 800e600:	4651      	mov	r1, sl
 800e602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e606:	4651      	mov	r1, sl
 800e608:	00ca      	lsls	r2, r1, #3
 800e60a:	4610      	mov	r0, r2
 800e60c:	4619      	mov	r1, r3
 800e60e:	4603      	mov	r3, r0
 800e610:	4642      	mov	r2, r8
 800e612:	189b      	adds	r3, r3, r2
 800e614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e618:	464b      	mov	r3, r9
 800e61a:	460a      	mov	r2, r1
 800e61c:	eb42 0303 	adc.w	r3, r2, r3
 800e620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e638:	460b      	mov	r3, r1
 800e63a:	18db      	adds	r3, r3, r3
 800e63c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e63e:	4613      	mov	r3, r2
 800e640:	eb42 0303 	adc.w	r3, r2, r3
 800e644:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e64a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e64e:	f7f2 fb1b 	bl	8000c88 <__aeabi_uldivmod>
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <UART_SetConfig+0x2d4>)
 800e658:	fba3 1302 	umull	r1, r3, r3, r2
 800e65c:	095b      	lsrs	r3, r3, #5
 800e65e:	2164      	movs	r1, #100	; 0x64
 800e660:	fb01 f303 	mul.w	r3, r1, r3
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	3332      	adds	r3, #50	; 0x32
 800e66a:	4a08      	ldr	r2, [pc, #32]	; (800e68c <UART_SetConfig+0x2d4>)
 800e66c:	fba2 2303 	umull	r2, r3, r2, r3
 800e670:	095b      	lsrs	r3, r3, #5
 800e672:	f003 0207 	and.w	r2, r3, #7
 800e676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4422      	add	r2, r4
 800e67e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e680:	e106      	b.n	800e890 <UART_SetConfig+0x4d8>
 800e682:	bf00      	nop
 800e684:	40011000 	.word	0x40011000
 800e688:	40011400 	.word	0x40011400
 800e68c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e694:	2200      	movs	r2, #0
 800e696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e69a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e69e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e6a2:	4642      	mov	r2, r8
 800e6a4:	464b      	mov	r3, r9
 800e6a6:	1891      	adds	r1, r2, r2
 800e6a8:	6239      	str	r1, [r7, #32]
 800e6aa:	415b      	adcs	r3, r3
 800e6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e6b2:	4641      	mov	r1, r8
 800e6b4:	1854      	adds	r4, r2, r1
 800e6b6:	4649      	mov	r1, r9
 800e6b8:	eb43 0501 	adc.w	r5, r3, r1
 800e6bc:	f04f 0200 	mov.w	r2, #0
 800e6c0:	f04f 0300 	mov.w	r3, #0
 800e6c4:	00eb      	lsls	r3, r5, #3
 800e6c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e6ca:	00e2      	lsls	r2, r4, #3
 800e6cc:	4614      	mov	r4, r2
 800e6ce:	461d      	mov	r5, r3
 800e6d0:	4643      	mov	r3, r8
 800e6d2:	18e3      	adds	r3, r4, r3
 800e6d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e6d8:	464b      	mov	r3, r9
 800e6da:	eb45 0303 	adc.w	r3, r5, r3
 800e6de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e6ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e6f2:	f04f 0200 	mov.w	r2, #0
 800e6f6:	f04f 0300 	mov.w	r3, #0
 800e6fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e6fe:	4629      	mov	r1, r5
 800e700:	008b      	lsls	r3, r1, #2
 800e702:	4621      	mov	r1, r4
 800e704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e708:	4621      	mov	r1, r4
 800e70a:	008a      	lsls	r2, r1, #2
 800e70c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e710:	f7f2 faba 	bl	8000c88 <__aeabi_uldivmod>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4b60      	ldr	r3, [pc, #384]	; (800e89c <UART_SetConfig+0x4e4>)
 800e71a:	fba3 2302 	umull	r2, r3, r3, r2
 800e71e:	095b      	lsrs	r3, r3, #5
 800e720:	011c      	lsls	r4, r3, #4
 800e722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e726:	2200      	movs	r2, #0
 800e728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e72c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e734:	4642      	mov	r2, r8
 800e736:	464b      	mov	r3, r9
 800e738:	1891      	adds	r1, r2, r2
 800e73a:	61b9      	str	r1, [r7, #24]
 800e73c:	415b      	adcs	r3, r3
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e744:	4641      	mov	r1, r8
 800e746:	1851      	adds	r1, r2, r1
 800e748:	6139      	str	r1, [r7, #16]
 800e74a:	4649      	mov	r1, r9
 800e74c:	414b      	adcs	r3, r1
 800e74e:	617b      	str	r3, [r7, #20]
 800e750:	f04f 0200 	mov.w	r2, #0
 800e754:	f04f 0300 	mov.w	r3, #0
 800e758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e75c:	4659      	mov	r1, fp
 800e75e:	00cb      	lsls	r3, r1, #3
 800e760:	4651      	mov	r1, sl
 800e762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e766:	4651      	mov	r1, sl
 800e768:	00ca      	lsls	r2, r1, #3
 800e76a:	4610      	mov	r0, r2
 800e76c:	4619      	mov	r1, r3
 800e76e:	4603      	mov	r3, r0
 800e770:	4642      	mov	r2, r8
 800e772:	189b      	adds	r3, r3, r2
 800e774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e778:	464b      	mov	r3, r9
 800e77a:	460a      	mov	r2, r1
 800e77c:	eb42 0303 	adc.w	r3, r2, r3
 800e780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e78e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e790:	f04f 0200 	mov.w	r2, #0
 800e794:	f04f 0300 	mov.w	r3, #0
 800e798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e79c:	4649      	mov	r1, r9
 800e79e:	008b      	lsls	r3, r1, #2
 800e7a0:	4641      	mov	r1, r8
 800e7a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e7a6:	4641      	mov	r1, r8
 800e7a8:	008a      	lsls	r2, r1, #2
 800e7aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e7ae:	f7f2 fa6b 	bl	8000c88 <__aeabi_uldivmod>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	4b38      	ldr	r3, [pc, #224]	; (800e89c <UART_SetConfig+0x4e4>)
 800e7ba:	fba3 2301 	umull	r2, r3, r3, r1
 800e7be:	095b      	lsrs	r3, r3, #5
 800e7c0:	2264      	movs	r2, #100	; 0x64
 800e7c2:	fb02 f303 	mul.w	r3, r2, r3
 800e7c6:	1acb      	subs	r3, r1, r3
 800e7c8:	011b      	lsls	r3, r3, #4
 800e7ca:	3332      	adds	r3, #50	; 0x32
 800e7cc:	4a33      	ldr	r2, [pc, #204]	; (800e89c <UART_SetConfig+0x4e4>)
 800e7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d2:	095b      	lsrs	r3, r3, #5
 800e7d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7d8:	441c      	add	r4, r3
 800e7da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e7de:	2200      	movs	r2, #0
 800e7e0:	673b      	str	r3, [r7, #112]	; 0x70
 800e7e2:	677a      	str	r2, [r7, #116]	; 0x74
 800e7e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e7e8:	4642      	mov	r2, r8
 800e7ea:	464b      	mov	r3, r9
 800e7ec:	1891      	adds	r1, r2, r2
 800e7ee:	60b9      	str	r1, [r7, #8]
 800e7f0:	415b      	adcs	r3, r3
 800e7f2:	60fb      	str	r3, [r7, #12]
 800e7f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e7f8:	4641      	mov	r1, r8
 800e7fa:	1851      	adds	r1, r2, r1
 800e7fc:	6039      	str	r1, [r7, #0]
 800e7fe:	4649      	mov	r1, r9
 800e800:	414b      	adcs	r3, r1
 800e802:	607b      	str	r3, [r7, #4]
 800e804:	f04f 0200 	mov.w	r2, #0
 800e808:	f04f 0300 	mov.w	r3, #0
 800e80c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e810:	4659      	mov	r1, fp
 800e812:	00cb      	lsls	r3, r1, #3
 800e814:	4651      	mov	r1, sl
 800e816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e81a:	4651      	mov	r1, sl
 800e81c:	00ca      	lsls	r2, r1, #3
 800e81e:	4610      	mov	r0, r2
 800e820:	4619      	mov	r1, r3
 800e822:	4603      	mov	r3, r0
 800e824:	4642      	mov	r2, r8
 800e826:	189b      	adds	r3, r3, r2
 800e828:	66bb      	str	r3, [r7, #104]	; 0x68
 800e82a:	464b      	mov	r3, r9
 800e82c:	460a      	mov	r2, r1
 800e82e:	eb42 0303 	adc.w	r3, r2, r3
 800e832:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	663b      	str	r3, [r7, #96]	; 0x60
 800e83e:	667a      	str	r2, [r7, #100]	; 0x64
 800e840:	f04f 0200 	mov.w	r2, #0
 800e844:	f04f 0300 	mov.w	r3, #0
 800e848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e84c:	4649      	mov	r1, r9
 800e84e:	008b      	lsls	r3, r1, #2
 800e850:	4641      	mov	r1, r8
 800e852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e856:	4641      	mov	r1, r8
 800e858:	008a      	lsls	r2, r1, #2
 800e85a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e85e:	f7f2 fa13 	bl	8000c88 <__aeabi_uldivmod>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4b0d      	ldr	r3, [pc, #52]	; (800e89c <UART_SetConfig+0x4e4>)
 800e868:	fba3 1302 	umull	r1, r3, r3, r2
 800e86c:	095b      	lsrs	r3, r3, #5
 800e86e:	2164      	movs	r1, #100	; 0x64
 800e870:	fb01 f303 	mul.w	r3, r1, r3
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	011b      	lsls	r3, r3, #4
 800e878:	3332      	adds	r3, #50	; 0x32
 800e87a:	4a08      	ldr	r2, [pc, #32]	; (800e89c <UART_SetConfig+0x4e4>)
 800e87c:	fba2 2303 	umull	r2, r3, r2, r3
 800e880:	095b      	lsrs	r3, r3, #5
 800e882:	f003 020f 	and.w	r2, r3, #15
 800e886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4422      	add	r2, r4
 800e88e:	609a      	str	r2, [r3, #8]
}
 800e890:	bf00      	nop
 800e892:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e896:	46bd      	mov	sp, r7
 800e898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e89c:	51eb851f 	.word	0x51eb851f

0800e8a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b084      	sub	sp, #16
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	f107 001c 	add.w	r0, r7, #28
 800e8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d122      	bne.n	800e8fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e8cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d105      	bne.n	800e8f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 faa2 	bl	800ee3c <USB_CoreReset>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	73fb      	strb	r3, [r7, #15]
 800e8fc:	e01a      	b.n	800e934 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fa96 	bl	800ee3c <USB_CoreReset>
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	639a      	str	r2, [r3, #56]	; 0x38
 800e926:	e005      	b.n	800e934 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e92c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e936:	2b01      	cmp	r3, #1
 800e938:	d10b      	bne.n	800e952 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	f043 0206 	orr.w	r2, r3, #6
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	f043 0220 	orr.w	r2, r3, #32
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e952:	7bfb      	ldrb	r3, [r7, #15]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e95e:	b004      	add	sp, #16
 800e960:	4770      	bx	lr

0800e962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	f023 0201 	bic.w	r2, r3, #1
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e990:	2300      	movs	r3, #0
 800e992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e9a0:	78fb      	ldrb	r3, [r7, #3]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d115      	bne.n	800e9d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e9b2:	2001      	movs	r0, #1
 800e9b4:	f7fb f9ce 	bl	8009d54 <HAL_Delay>
      ms++;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fa2e 	bl	800ee20 <USB_GetMode>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d01e      	beq.n	800ea08 <USB_SetCurrentMode+0x84>
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b31      	cmp	r3, #49	; 0x31
 800e9ce:	d9f0      	bls.n	800e9b2 <USB_SetCurrentMode+0x2e>
 800e9d0:	e01a      	b.n	800ea08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e9d2:	78fb      	ldrb	r3, [r7, #3]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d115      	bne.n	800ea04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e9e4:	2001      	movs	r0, #1
 800e9e6:	f7fb f9b5 	bl	8009d54 <HAL_Delay>
      ms++;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 fa15 	bl	800ee20 <USB_GetMode>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d005      	beq.n	800ea08 <USB_SetCurrentMode+0x84>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2b31      	cmp	r3, #49	; 0x31
 800ea00:	d9f0      	bls.n	800e9e4 <USB_SetCurrentMode+0x60>
 800ea02:	e001      	b.n	800ea08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e005      	b.n	800ea14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2b32      	cmp	r3, #50	; 0x32
 800ea0c:	d101      	bne.n	800ea12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e000      	b.n	800ea14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea1c:	b084      	sub	sp, #16
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b086      	sub	sp, #24
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ea2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ea36:	2300      	movs	r3, #0
 800ea38:	613b      	str	r3, [r7, #16]
 800ea3a:	e009      	b.n	800ea50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	3340      	adds	r3, #64	; 0x40
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	4413      	add	r3, r2
 800ea46:	2200      	movs	r2, #0
 800ea48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	613b      	str	r3, [r7, #16]
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	2b0e      	cmp	r3, #14
 800ea54:	d9f2      	bls.n	800ea3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ea56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d11c      	bne.n	800ea96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea6a:	f043 0302 	orr.w	r3, r3, #2
 800ea6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	639a      	str	r2, [r3, #56]	; 0x38
 800ea94:	e00b      	b.n	800eaae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eab4:	461a      	mov	r2, r3
 800eab6:	2300      	movs	r3, #0
 800eab8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac0:	4619      	mov	r1, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac8:	461a      	mov	r2, r3
 800eaca:	680b      	ldr	r3, [r1, #0]
 800eacc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d10c      	bne.n	800eaee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ead4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d104      	bne.n	800eae4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eada:	2100      	movs	r1, #0
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f965 	bl	800edac <USB_SetDevSpeed>
 800eae2:	e008      	b.n	800eaf6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eae4:	2101      	movs	r1, #1
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f960 	bl	800edac <USB_SetDevSpeed>
 800eaec:	e003      	b.n	800eaf6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eaee:	2103      	movs	r1, #3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 f95b 	bl	800edac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eaf6:	2110      	movs	r1, #16
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f8f3 	bl	800ece4 <USB_FlushTxFifo>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f91f 	bl	800ed4c <USB_FlushRxFifo>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d001      	beq.n	800eb18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1e:	461a      	mov	r2, r3
 800eb20:	2300      	movs	r3, #0
 800eb22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb36:	461a      	mov	r2, r3
 800eb38:	2300      	movs	r3, #0
 800eb3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	613b      	str	r3, [r7, #16]
 800eb40:	e043      	b.n	800ebca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	015a      	lsls	r2, r3, #5
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	4413      	add	r3, r2
 800eb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb58:	d118      	bne.n	800eb8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10a      	bne.n	800eb76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	015a      	lsls	r2, r3, #5
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb72:	6013      	str	r3, [r2, #0]
 800eb74:	e013      	b.n	800eb9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	015a      	lsls	r2, r3, #5
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb82:	461a      	mov	r2, r3
 800eb84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eb88:	6013      	str	r3, [r2, #0]
 800eb8a:	e008      	b.n	800eb9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	015a      	lsls	r2, r3, #5
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	4413      	add	r3, r2
 800eb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb98:	461a      	mov	r2, r3
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	015a      	lsls	r2, r3, #5
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	4413      	add	r3, r2
 800eba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebaa:	461a      	mov	r2, r3
 800ebac:	2300      	movs	r3, #0
 800ebae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	015a      	lsls	r2, r3, #5
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ebc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	613b      	str	r3, [r7, #16]
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d3b7      	bcc.n	800eb42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	e043      	b.n	800ec60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	015a      	lsls	r2, r3, #5
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	4413      	add	r3, r2
 800ebe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebee:	d118      	bne.n	800ec22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10a      	bne.n	800ec0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	015a      	lsls	r2, r3, #5
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec02:	461a      	mov	r2, r3
 800ec04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	e013      	b.n	800ec34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	015a      	lsls	r2, r3, #5
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4413      	add	r3, r2
 800ec14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec18:	461a      	mov	r2, r3
 800ec1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec1e:	6013      	str	r3, [r2, #0]
 800ec20:	e008      	b.n	800ec34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	015a      	lsls	r2, r3, #5
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	4413      	add	r3, r2
 800ec2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2e:	461a      	mov	r2, r3
 800ec30:	2300      	movs	r3, #0
 800ec32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	015a      	lsls	r2, r3, #5
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec40:	461a      	mov	r2, r3
 800ec42:	2300      	movs	r3, #0
 800ec44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	015a      	lsls	r2, r3, #5
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec52:	461a      	mov	r2, r3
 800ec54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	613b      	str	r3, [r7, #16]
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	693a      	ldr	r2, [r7, #16]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d3b7      	bcc.n	800ebd8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec6e:	691b      	ldr	r3, [r3, #16]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ec88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d105      	bne.n	800ec9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	f043 0210 	orr.w	r2, r3, #16
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	699a      	ldr	r2, [r3, #24]
 800eca0:	4b0f      	ldr	r3, [pc, #60]	; (800ece0 <USB_DevInit+0x2c4>)
 800eca2:	4313      	orrs	r3, r2
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d005      	beq.n	800ecba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	f043 0208 	orr.w	r2, r3, #8
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ecba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d107      	bne.n	800ecd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	699b      	ldr	r3, [r3, #24]
 800ecc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ecc8:	f043 0304 	orr.w	r3, r3, #4
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ecd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ecdc:	b004      	add	sp, #16
 800ecde:	4770      	bx	lr
 800ece0:	803c3800 	.word	0x803c3800

0800ece4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4a13      	ldr	r2, [pc, #76]	; (800ed48 <USB_FlushTxFifo+0x64>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d901      	bls.n	800ed04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ed00:	2303      	movs	r3, #3
 800ed02:	e01b      	b.n	800ed3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	daf2      	bge.n	800ecf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	019b      	lsls	r3, r3, #6
 800ed14:	f043 0220 	orr.w	r2, r3, #32
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	4a08      	ldr	r2, [pc, #32]	; (800ed48 <USB_FlushTxFifo+0x64>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d901      	bls.n	800ed2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e006      	b.n	800ed3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	f003 0320 	and.w	r3, r3, #32
 800ed36:	2b20      	cmp	r3, #32
 800ed38:	d0f0      	beq.n	800ed1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr
 800ed48:	00030d40 	.word	0x00030d40

0800ed4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b085      	sub	sp, #20
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed54:	2300      	movs	r3, #0
 800ed56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	4a11      	ldr	r2, [pc, #68]	; (800eda8 <USB_FlushRxFifo+0x5c>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d901      	bls.n	800ed6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ed66:	2303      	movs	r3, #3
 800ed68:	e018      	b.n	800ed9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	daf2      	bge.n	800ed58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2210      	movs	r2, #16
 800ed7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	4a08      	ldr	r2, [pc, #32]	; (800eda8 <USB_FlushRxFifo+0x5c>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d901      	bls.n	800ed8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	e006      	b.n	800ed9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	691b      	ldr	r3, [r3, #16]
 800ed92:	f003 0310 	and.w	r3, r3, #16
 800ed96:	2b10      	cmp	r3, #16
 800ed98:	d0f0      	beq.n	800ed7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr
 800eda8:	00030d40 	.word	0x00030d40

0800edac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	460b      	mov	r3, r1
 800edb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	68f9      	ldr	r1, [r7, #12]
 800edc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edcc:	4313      	orrs	r3, r2
 800edce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr

0800edde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800edde:	b480      	push	{r7}
 800ede0:	b085      	sub	sp, #20
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800edf8:	f023 0303 	bic.w	r3, r3, #3
 800edfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee0c:	f043 0302 	orr.w	r3, r3, #2
 800ee10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3714      	adds	r7, #20
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	695b      	ldr	r3, [r3, #20]
 800ee2c:	f003 0301 	and.w	r3, r3, #1
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b085      	sub	sp, #20
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ee44:	2300      	movs	r3, #0
 800ee46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	4a13      	ldr	r2, [pc, #76]	; (800eea0 <USB_CoreReset+0x64>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d901      	bls.n	800ee5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ee56:	2303      	movs	r3, #3
 800ee58:	e01b      	b.n	800ee92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	daf2      	bge.n	800ee48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	f043 0201 	orr.w	r2, r3, #1
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3301      	adds	r3, #1
 800ee76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4a09      	ldr	r2, [pc, #36]	; (800eea0 <USB_CoreReset+0x64>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d901      	bls.n	800ee84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ee80:	2303      	movs	r3, #3
 800ee82:	e006      	b.n	800ee92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	f003 0301 	and.w	r3, r3, #1
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d0f0      	beq.n	800ee72 <USB_CoreReset+0x36>

  return HAL_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	00030d40 	.word	0x00030d40

0800eea4 <malloc>:
 800eea4:	4b02      	ldr	r3, [pc, #8]	; (800eeb0 <malloc+0xc>)
 800eea6:	4601      	mov	r1, r0
 800eea8:	6818      	ldr	r0, [r3, #0]
 800eeaa:	f000 b82b 	b.w	800ef04 <_malloc_r>
 800eeae:	bf00      	nop
 800eeb0:	20000384 	.word	0x20000384

0800eeb4 <free>:
 800eeb4:	4b02      	ldr	r3, [pc, #8]	; (800eec0 <free+0xc>)
 800eeb6:	4601      	mov	r1, r0
 800eeb8:	6818      	ldr	r0, [r3, #0]
 800eeba:	f001 bd3f 	b.w	801093c <_free_r>
 800eebe:	bf00      	nop
 800eec0:	20000384 	.word	0x20000384

0800eec4 <sbrk_aligned>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	4e0e      	ldr	r6, [pc, #56]	; (800ef00 <sbrk_aligned+0x3c>)
 800eec8:	460c      	mov	r4, r1
 800eeca:	6831      	ldr	r1, [r6, #0]
 800eecc:	4605      	mov	r5, r0
 800eece:	b911      	cbnz	r1, 800eed6 <sbrk_aligned+0x12>
 800eed0:	f000 fe5e 	bl	800fb90 <_sbrk_r>
 800eed4:	6030      	str	r0, [r6, #0]
 800eed6:	4621      	mov	r1, r4
 800eed8:	4628      	mov	r0, r5
 800eeda:	f000 fe59 	bl	800fb90 <_sbrk_r>
 800eede:	1c43      	adds	r3, r0, #1
 800eee0:	d00a      	beq.n	800eef8 <sbrk_aligned+0x34>
 800eee2:	1cc4      	adds	r4, r0, #3
 800eee4:	f024 0403 	bic.w	r4, r4, #3
 800eee8:	42a0      	cmp	r0, r4
 800eeea:	d007      	beq.n	800eefc <sbrk_aligned+0x38>
 800eeec:	1a21      	subs	r1, r4, r0
 800eeee:	4628      	mov	r0, r5
 800eef0:	f000 fe4e 	bl	800fb90 <_sbrk_r>
 800eef4:	3001      	adds	r0, #1
 800eef6:	d101      	bne.n	800eefc <sbrk_aligned+0x38>
 800eef8:	f04f 34ff 	mov.w	r4, #4294967295
 800eefc:	4620      	mov	r0, r4
 800eefe:	bd70      	pop	{r4, r5, r6, pc}
 800ef00:	20001548 	.word	0x20001548

0800ef04 <_malloc_r>:
 800ef04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef08:	1ccd      	adds	r5, r1, #3
 800ef0a:	f025 0503 	bic.w	r5, r5, #3
 800ef0e:	3508      	adds	r5, #8
 800ef10:	2d0c      	cmp	r5, #12
 800ef12:	bf38      	it	cc
 800ef14:	250c      	movcc	r5, #12
 800ef16:	2d00      	cmp	r5, #0
 800ef18:	4607      	mov	r7, r0
 800ef1a:	db01      	blt.n	800ef20 <_malloc_r+0x1c>
 800ef1c:	42a9      	cmp	r1, r5
 800ef1e:	d905      	bls.n	800ef2c <_malloc_r+0x28>
 800ef20:	230c      	movs	r3, #12
 800ef22:	603b      	str	r3, [r7, #0]
 800ef24:	2600      	movs	r6, #0
 800ef26:	4630      	mov	r0, r6
 800ef28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f000 <_malloc_r+0xfc>
 800ef30:	f000 f868 	bl	800f004 <__malloc_lock>
 800ef34:	f8d8 3000 	ldr.w	r3, [r8]
 800ef38:	461c      	mov	r4, r3
 800ef3a:	bb5c      	cbnz	r4, 800ef94 <_malloc_r+0x90>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4638      	mov	r0, r7
 800ef40:	f7ff ffc0 	bl	800eec4 <sbrk_aligned>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	4604      	mov	r4, r0
 800ef48:	d155      	bne.n	800eff6 <_malloc_r+0xf2>
 800ef4a:	f8d8 4000 	ldr.w	r4, [r8]
 800ef4e:	4626      	mov	r6, r4
 800ef50:	2e00      	cmp	r6, #0
 800ef52:	d145      	bne.n	800efe0 <_malloc_r+0xdc>
 800ef54:	2c00      	cmp	r4, #0
 800ef56:	d048      	beq.n	800efea <_malloc_r+0xe6>
 800ef58:	6823      	ldr	r3, [r4, #0]
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	eb04 0903 	add.w	r9, r4, r3
 800ef62:	f000 fe15 	bl	800fb90 <_sbrk_r>
 800ef66:	4581      	cmp	r9, r0
 800ef68:	d13f      	bne.n	800efea <_malloc_r+0xe6>
 800ef6a:	6821      	ldr	r1, [r4, #0]
 800ef6c:	1a6d      	subs	r5, r5, r1
 800ef6e:	4629      	mov	r1, r5
 800ef70:	4638      	mov	r0, r7
 800ef72:	f7ff ffa7 	bl	800eec4 <sbrk_aligned>
 800ef76:	3001      	adds	r0, #1
 800ef78:	d037      	beq.n	800efea <_malloc_r+0xe6>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	442b      	add	r3, r5
 800ef7e:	6023      	str	r3, [r4, #0]
 800ef80:	f8d8 3000 	ldr.w	r3, [r8]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d038      	beq.n	800effa <_malloc_r+0xf6>
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	42a2      	cmp	r2, r4
 800ef8c:	d12b      	bne.n	800efe6 <_malloc_r+0xe2>
 800ef8e:	2200      	movs	r2, #0
 800ef90:	605a      	str	r2, [r3, #4]
 800ef92:	e00f      	b.n	800efb4 <_malloc_r+0xb0>
 800ef94:	6822      	ldr	r2, [r4, #0]
 800ef96:	1b52      	subs	r2, r2, r5
 800ef98:	d41f      	bmi.n	800efda <_malloc_r+0xd6>
 800ef9a:	2a0b      	cmp	r2, #11
 800ef9c:	d917      	bls.n	800efce <_malloc_r+0xca>
 800ef9e:	1961      	adds	r1, r4, r5
 800efa0:	42a3      	cmp	r3, r4
 800efa2:	6025      	str	r5, [r4, #0]
 800efa4:	bf18      	it	ne
 800efa6:	6059      	strne	r1, [r3, #4]
 800efa8:	6863      	ldr	r3, [r4, #4]
 800efaa:	bf08      	it	eq
 800efac:	f8c8 1000 	streq.w	r1, [r8]
 800efb0:	5162      	str	r2, [r4, r5]
 800efb2:	604b      	str	r3, [r1, #4]
 800efb4:	4638      	mov	r0, r7
 800efb6:	f104 060b 	add.w	r6, r4, #11
 800efba:	f000 f829 	bl	800f010 <__malloc_unlock>
 800efbe:	f026 0607 	bic.w	r6, r6, #7
 800efc2:	1d23      	adds	r3, r4, #4
 800efc4:	1af2      	subs	r2, r6, r3
 800efc6:	d0ae      	beq.n	800ef26 <_malloc_r+0x22>
 800efc8:	1b9b      	subs	r3, r3, r6
 800efca:	50a3      	str	r3, [r4, r2]
 800efcc:	e7ab      	b.n	800ef26 <_malloc_r+0x22>
 800efce:	42a3      	cmp	r3, r4
 800efd0:	6862      	ldr	r2, [r4, #4]
 800efd2:	d1dd      	bne.n	800ef90 <_malloc_r+0x8c>
 800efd4:	f8c8 2000 	str.w	r2, [r8]
 800efd8:	e7ec      	b.n	800efb4 <_malloc_r+0xb0>
 800efda:	4623      	mov	r3, r4
 800efdc:	6864      	ldr	r4, [r4, #4]
 800efde:	e7ac      	b.n	800ef3a <_malloc_r+0x36>
 800efe0:	4634      	mov	r4, r6
 800efe2:	6876      	ldr	r6, [r6, #4]
 800efe4:	e7b4      	b.n	800ef50 <_malloc_r+0x4c>
 800efe6:	4613      	mov	r3, r2
 800efe8:	e7cc      	b.n	800ef84 <_malloc_r+0x80>
 800efea:	230c      	movs	r3, #12
 800efec:	603b      	str	r3, [r7, #0]
 800efee:	4638      	mov	r0, r7
 800eff0:	f000 f80e 	bl	800f010 <__malloc_unlock>
 800eff4:	e797      	b.n	800ef26 <_malloc_r+0x22>
 800eff6:	6025      	str	r5, [r4, #0]
 800eff8:	e7dc      	b.n	800efb4 <_malloc_r+0xb0>
 800effa:	605b      	str	r3, [r3, #4]
 800effc:	deff      	udf	#255	; 0xff
 800effe:	bf00      	nop
 800f000:	20001544 	.word	0x20001544

0800f004 <__malloc_lock>:
 800f004:	4801      	ldr	r0, [pc, #4]	; (800f00c <__malloc_lock+0x8>)
 800f006:	f000 be0f 	b.w	800fc28 <__retarget_lock_acquire_recursive>
 800f00a:	bf00      	nop
 800f00c:	2000168c 	.word	0x2000168c

0800f010 <__malloc_unlock>:
 800f010:	4801      	ldr	r0, [pc, #4]	; (800f018 <__malloc_unlock+0x8>)
 800f012:	f000 be0a 	b.w	800fc2a <__retarget_lock_release_recursive>
 800f016:	bf00      	nop
 800f018:	2000168c 	.word	0x2000168c

0800f01c <__cvt>:
 800f01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f020:	ec55 4b10 	vmov	r4, r5, d0
 800f024:	2d00      	cmp	r5, #0
 800f026:	460e      	mov	r6, r1
 800f028:	4619      	mov	r1, r3
 800f02a:	462b      	mov	r3, r5
 800f02c:	bfbb      	ittet	lt
 800f02e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f032:	461d      	movlt	r5, r3
 800f034:	2300      	movge	r3, #0
 800f036:	232d      	movlt	r3, #45	; 0x2d
 800f038:	700b      	strb	r3, [r1, #0]
 800f03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f03c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f040:	4691      	mov	r9, r2
 800f042:	f023 0820 	bic.w	r8, r3, #32
 800f046:	bfbc      	itt	lt
 800f048:	4622      	movlt	r2, r4
 800f04a:	4614      	movlt	r4, r2
 800f04c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f050:	d005      	beq.n	800f05e <__cvt+0x42>
 800f052:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f056:	d100      	bne.n	800f05a <__cvt+0x3e>
 800f058:	3601      	adds	r6, #1
 800f05a:	2102      	movs	r1, #2
 800f05c:	e000      	b.n	800f060 <__cvt+0x44>
 800f05e:	2103      	movs	r1, #3
 800f060:	ab03      	add	r3, sp, #12
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	ab02      	add	r3, sp, #8
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	ec45 4b10 	vmov	d0, r4, r5
 800f06c:	4653      	mov	r3, sl
 800f06e:	4632      	mov	r2, r6
 800f070:	f000 fe72 	bl	800fd58 <_dtoa_r>
 800f074:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f078:	4607      	mov	r7, r0
 800f07a:	d102      	bne.n	800f082 <__cvt+0x66>
 800f07c:	f019 0f01 	tst.w	r9, #1
 800f080:	d022      	beq.n	800f0c8 <__cvt+0xac>
 800f082:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f086:	eb07 0906 	add.w	r9, r7, r6
 800f08a:	d110      	bne.n	800f0ae <__cvt+0x92>
 800f08c:	783b      	ldrb	r3, [r7, #0]
 800f08e:	2b30      	cmp	r3, #48	; 0x30
 800f090:	d10a      	bne.n	800f0a8 <__cvt+0x8c>
 800f092:	2200      	movs	r2, #0
 800f094:	2300      	movs	r3, #0
 800f096:	4620      	mov	r0, r4
 800f098:	4629      	mov	r1, r5
 800f09a:	f7f1 fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800f09e:	b918      	cbnz	r0, 800f0a8 <__cvt+0x8c>
 800f0a0:	f1c6 0601 	rsb	r6, r6, #1
 800f0a4:	f8ca 6000 	str.w	r6, [sl]
 800f0a8:	f8da 3000 	ldr.w	r3, [sl]
 800f0ac:	4499      	add	r9, r3
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f7f1 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0ba:	b108      	cbz	r0, 800f0c0 <__cvt+0xa4>
 800f0bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0c0:	2230      	movs	r2, #48	; 0x30
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	454b      	cmp	r3, r9
 800f0c6:	d307      	bcc.n	800f0d8 <__cvt+0xbc>
 800f0c8:	9b03      	ldr	r3, [sp, #12]
 800f0ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0cc:	1bdb      	subs	r3, r3, r7
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	b004      	add	sp, #16
 800f0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d8:	1c59      	adds	r1, r3, #1
 800f0da:	9103      	str	r1, [sp, #12]
 800f0dc:	701a      	strb	r2, [r3, #0]
 800f0de:	e7f0      	b.n	800f0c2 <__cvt+0xa6>

0800f0e0 <__exponent>:
 800f0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	bfb8      	it	lt
 800f0e8:	4249      	neglt	r1, r1
 800f0ea:	f803 2b02 	strb.w	r2, [r3], #2
 800f0ee:	bfb4      	ite	lt
 800f0f0:	222d      	movlt	r2, #45	; 0x2d
 800f0f2:	222b      	movge	r2, #43	; 0x2b
 800f0f4:	2909      	cmp	r1, #9
 800f0f6:	7042      	strb	r2, [r0, #1]
 800f0f8:	dd2a      	ble.n	800f150 <__exponent+0x70>
 800f0fa:	f10d 0207 	add.w	r2, sp, #7
 800f0fe:	4617      	mov	r7, r2
 800f100:	260a      	movs	r6, #10
 800f102:	4694      	mov	ip, r2
 800f104:	fb91 f5f6 	sdiv	r5, r1, r6
 800f108:	fb06 1415 	mls	r4, r6, r5, r1
 800f10c:	3430      	adds	r4, #48	; 0x30
 800f10e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f112:	460c      	mov	r4, r1
 800f114:	2c63      	cmp	r4, #99	; 0x63
 800f116:	f102 32ff 	add.w	r2, r2, #4294967295
 800f11a:	4629      	mov	r1, r5
 800f11c:	dcf1      	bgt.n	800f102 <__exponent+0x22>
 800f11e:	3130      	adds	r1, #48	; 0x30
 800f120:	f1ac 0402 	sub.w	r4, ip, #2
 800f124:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f128:	1c41      	adds	r1, r0, #1
 800f12a:	4622      	mov	r2, r4
 800f12c:	42ba      	cmp	r2, r7
 800f12e:	d30a      	bcc.n	800f146 <__exponent+0x66>
 800f130:	f10d 0209 	add.w	r2, sp, #9
 800f134:	eba2 020c 	sub.w	r2, r2, ip
 800f138:	42bc      	cmp	r4, r7
 800f13a:	bf88      	it	hi
 800f13c:	2200      	movhi	r2, #0
 800f13e:	4413      	add	r3, r2
 800f140:	1a18      	subs	r0, r3, r0
 800f142:	b003      	add	sp, #12
 800f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f146:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f14a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f14e:	e7ed      	b.n	800f12c <__exponent+0x4c>
 800f150:	2330      	movs	r3, #48	; 0x30
 800f152:	3130      	adds	r1, #48	; 0x30
 800f154:	7083      	strb	r3, [r0, #2]
 800f156:	70c1      	strb	r1, [r0, #3]
 800f158:	1d03      	adds	r3, r0, #4
 800f15a:	e7f1      	b.n	800f140 <__exponent+0x60>

0800f15c <_printf_float>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	ed2d 8b02 	vpush	{d8}
 800f164:	b08d      	sub	sp, #52	; 0x34
 800f166:	460c      	mov	r4, r1
 800f168:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f16c:	4616      	mov	r6, r2
 800f16e:	461f      	mov	r7, r3
 800f170:	4605      	mov	r5, r0
 800f172:	f000 fcd5 	bl	800fb20 <_localeconv_r>
 800f176:	f8d0 a000 	ldr.w	sl, [r0]
 800f17a:	4650      	mov	r0, sl
 800f17c:	f7f1 f878 	bl	8000270 <strlen>
 800f180:	2300      	movs	r3, #0
 800f182:	930a      	str	r3, [sp, #40]	; 0x28
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	f8d8 3000 	ldr.w	r3, [r8]
 800f18c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f190:	3307      	adds	r3, #7
 800f192:	f023 0307 	bic.w	r3, r3, #7
 800f196:	f103 0208 	add.w	r2, r3, #8
 800f19a:	f8c8 2000 	str.w	r2, [r8]
 800f19e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1a6:	9307      	str	r3, [sp, #28]
 800f1a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1ac:	ee08 0a10 	vmov	s16, r0
 800f1b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f1b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1b8:	4b9e      	ldr	r3, [pc, #632]	; (800f434 <_printf_float+0x2d8>)
 800f1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f1be:	f7f1 fcb5 	bl	8000b2c <__aeabi_dcmpun>
 800f1c2:	bb88      	cbnz	r0, 800f228 <_printf_float+0xcc>
 800f1c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1c8:	4b9a      	ldr	r3, [pc, #616]	; (800f434 <_printf_float+0x2d8>)
 800f1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ce:	f7f1 fc8f 	bl	8000af0 <__aeabi_dcmple>
 800f1d2:	bb48      	cbnz	r0, 800f228 <_printf_float+0xcc>
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	4640      	mov	r0, r8
 800f1da:	4649      	mov	r1, r9
 800f1dc:	f7f1 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800f1e0:	b110      	cbz	r0, 800f1e8 <_printf_float+0x8c>
 800f1e2:	232d      	movs	r3, #45	; 0x2d
 800f1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1e8:	4a93      	ldr	r2, [pc, #588]	; (800f438 <_printf_float+0x2dc>)
 800f1ea:	4b94      	ldr	r3, [pc, #592]	; (800f43c <_printf_float+0x2e0>)
 800f1ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1f0:	bf94      	ite	ls
 800f1f2:	4690      	movls	r8, r2
 800f1f4:	4698      	movhi	r8, r3
 800f1f6:	2303      	movs	r3, #3
 800f1f8:	6123      	str	r3, [r4, #16]
 800f1fa:	9b05      	ldr	r3, [sp, #20]
 800f1fc:	f023 0304 	bic.w	r3, r3, #4
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	f04f 0900 	mov.w	r9, #0
 800f206:	9700      	str	r7, [sp, #0]
 800f208:	4633      	mov	r3, r6
 800f20a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f9da 	bl	800f5c8 <_printf_common>
 800f214:	3001      	adds	r0, #1
 800f216:	f040 8090 	bne.w	800f33a <_printf_float+0x1de>
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295
 800f21e:	b00d      	add	sp, #52	; 0x34
 800f220:	ecbd 8b02 	vpop	{d8}
 800f224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f228:	4642      	mov	r2, r8
 800f22a:	464b      	mov	r3, r9
 800f22c:	4640      	mov	r0, r8
 800f22e:	4649      	mov	r1, r9
 800f230:	f7f1 fc7c 	bl	8000b2c <__aeabi_dcmpun>
 800f234:	b140      	cbz	r0, 800f248 <_printf_float+0xec>
 800f236:	464b      	mov	r3, r9
 800f238:	2b00      	cmp	r3, #0
 800f23a:	bfbc      	itt	lt
 800f23c:	232d      	movlt	r3, #45	; 0x2d
 800f23e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f242:	4a7f      	ldr	r2, [pc, #508]	; (800f440 <_printf_float+0x2e4>)
 800f244:	4b7f      	ldr	r3, [pc, #508]	; (800f444 <_printf_float+0x2e8>)
 800f246:	e7d1      	b.n	800f1ec <_printf_float+0x90>
 800f248:	6863      	ldr	r3, [r4, #4]
 800f24a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f24e:	9206      	str	r2, [sp, #24]
 800f250:	1c5a      	adds	r2, r3, #1
 800f252:	d13f      	bne.n	800f2d4 <_printf_float+0x178>
 800f254:	2306      	movs	r3, #6
 800f256:	6063      	str	r3, [r4, #4]
 800f258:	9b05      	ldr	r3, [sp, #20]
 800f25a:	6861      	ldr	r1, [r4, #4]
 800f25c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f260:	2300      	movs	r3, #0
 800f262:	9303      	str	r3, [sp, #12]
 800f264:	ab0a      	add	r3, sp, #40	; 0x28
 800f266:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f26a:	ab09      	add	r3, sp, #36	; 0x24
 800f26c:	ec49 8b10 	vmov	d0, r8, r9
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	6022      	str	r2, [r4, #0]
 800f274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f278:	4628      	mov	r0, r5
 800f27a:	f7ff fecf 	bl	800f01c <__cvt>
 800f27e:	9b06      	ldr	r3, [sp, #24]
 800f280:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f282:	2b47      	cmp	r3, #71	; 0x47
 800f284:	4680      	mov	r8, r0
 800f286:	d108      	bne.n	800f29a <_printf_float+0x13e>
 800f288:	1cc8      	adds	r0, r1, #3
 800f28a:	db02      	blt.n	800f292 <_printf_float+0x136>
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	4299      	cmp	r1, r3
 800f290:	dd41      	ble.n	800f316 <_printf_float+0x1ba>
 800f292:	f1ab 0302 	sub.w	r3, fp, #2
 800f296:	fa5f fb83 	uxtb.w	fp, r3
 800f29a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f29e:	d820      	bhi.n	800f2e2 <_printf_float+0x186>
 800f2a0:	3901      	subs	r1, #1
 800f2a2:	465a      	mov	r2, fp
 800f2a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2a8:	9109      	str	r1, [sp, #36]	; 0x24
 800f2aa:	f7ff ff19 	bl	800f0e0 <__exponent>
 800f2ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2b0:	1813      	adds	r3, r2, r0
 800f2b2:	2a01      	cmp	r2, #1
 800f2b4:	4681      	mov	r9, r0
 800f2b6:	6123      	str	r3, [r4, #16]
 800f2b8:	dc02      	bgt.n	800f2c0 <_printf_float+0x164>
 800f2ba:	6822      	ldr	r2, [r4, #0]
 800f2bc:	07d2      	lsls	r2, r2, #31
 800f2be:	d501      	bpl.n	800f2c4 <_printf_float+0x168>
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	6123      	str	r3, [r4, #16]
 800f2c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d09c      	beq.n	800f206 <_printf_float+0xaa>
 800f2cc:	232d      	movs	r3, #45	; 0x2d
 800f2ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2d2:	e798      	b.n	800f206 <_printf_float+0xaa>
 800f2d4:	9a06      	ldr	r2, [sp, #24]
 800f2d6:	2a47      	cmp	r2, #71	; 0x47
 800f2d8:	d1be      	bne.n	800f258 <_printf_float+0xfc>
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1bc      	bne.n	800f258 <_printf_float+0xfc>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e7b9      	b.n	800f256 <_printf_float+0xfa>
 800f2e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2e6:	d118      	bne.n	800f31a <_printf_float+0x1be>
 800f2e8:	2900      	cmp	r1, #0
 800f2ea:	6863      	ldr	r3, [r4, #4]
 800f2ec:	dd0b      	ble.n	800f306 <_printf_float+0x1aa>
 800f2ee:	6121      	str	r1, [r4, #16]
 800f2f0:	b913      	cbnz	r3, 800f2f8 <_printf_float+0x19c>
 800f2f2:	6822      	ldr	r2, [r4, #0]
 800f2f4:	07d0      	lsls	r0, r2, #31
 800f2f6:	d502      	bpl.n	800f2fe <_printf_float+0x1a2>
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	440b      	add	r3, r1
 800f2fc:	6123      	str	r3, [r4, #16]
 800f2fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800f300:	f04f 0900 	mov.w	r9, #0
 800f304:	e7de      	b.n	800f2c4 <_printf_float+0x168>
 800f306:	b913      	cbnz	r3, 800f30e <_printf_float+0x1b2>
 800f308:	6822      	ldr	r2, [r4, #0]
 800f30a:	07d2      	lsls	r2, r2, #31
 800f30c:	d501      	bpl.n	800f312 <_printf_float+0x1b6>
 800f30e:	3302      	adds	r3, #2
 800f310:	e7f4      	b.n	800f2fc <_printf_float+0x1a0>
 800f312:	2301      	movs	r3, #1
 800f314:	e7f2      	b.n	800f2fc <_printf_float+0x1a0>
 800f316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f31c:	4299      	cmp	r1, r3
 800f31e:	db05      	blt.n	800f32c <_printf_float+0x1d0>
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	6121      	str	r1, [r4, #16]
 800f324:	07d8      	lsls	r0, r3, #31
 800f326:	d5ea      	bpl.n	800f2fe <_printf_float+0x1a2>
 800f328:	1c4b      	adds	r3, r1, #1
 800f32a:	e7e7      	b.n	800f2fc <_printf_float+0x1a0>
 800f32c:	2900      	cmp	r1, #0
 800f32e:	bfd4      	ite	le
 800f330:	f1c1 0202 	rsble	r2, r1, #2
 800f334:	2201      	movgt	r2, #1
 800f336:	4413      	add	r3, r2
 800f338:	e7e0      	b.n	800f2fc <_printf_float+0x1a0>
 800f33a:	6823      	ldr	r3, [r4, #0]
 800f33c:	055a      	lsls	r2, r3, #21
 800f33e:	d407      	bmi.n	800f350 <_printf_float+0x1f4>
 800f340:	6923      	ldr	r3, [r4, #16]
 800f342:	4642      	mov	r2, r8
 800f344:	4631      	mov	r1, r6
 800f346:	4628      	mov	r0, r5
 800f348:	47b8      	blx	r7
 800f34a:	3001      	adds	r0, #1
 800f34c:	d12c      	bne.n	800f3a8 <_printf_float+0x24c>
 800f34e:	e764      	b.n	800f21a <_printf_float+0xbe>
 800f350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f354:	f240 80e0 	bls.w	800f518 <_printf_float+0x3bc>
 800f358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f35c:	2200      	movs	r2, #0
 800f35e:	2300      	movs	r3, #0
 800f360:	f7f1 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f364:	2800      	cmp	r0, #0
 800f366:	d034      	beq.n	800f3d2 <_printf_float+0x276>
 800f368:	4a37      	ldr	r2, [pc, #220]	; (800f448 <_printf_float+0x2ec>)
 800f36a:	2301      	movs	r3, #1
 800f36c:	4631      	mov	r1, r6
 800f36e:	4628      	mov	r0, r5
 800f370:	47b8      	blx	r7
 800f372:	3001      	adds	r0, #1
 800f374:	f43f af51 	beq.w	800f21a <_printf_float+0xbe>
 800f378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f37c:	429a      	cmp	r2, r3
 800f37e:	db02      	blt.n	800f386 <_printf_float+0x22a>
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	07d8      	lsls	r0, r3, #31
 800f384:	d510      	bpl.n	800f3a8 <_printf_float+0x24c>
 800f386:	ee18 3a10 	vmov	r3, s16
 800f38a:	4652      	mov	r2, sl
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	f43f af41 	beq.w	800f21a <_printf_float+0xbe>
 800f398:	f04f 0800 	mov.w	r8, #0
 800f39c:	f104 091a 	add.w	r9, r4, #26
 800f3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	4543      	cmp	r3, r8
 800f3a6:	dc09      	bgt.n	800f3bc <_printf_float+0x260>
 800f3a8:	6823      	ldr	r3, [r4, #0]
 800f3aa:	079b      	lsls	r3, r3, #30
 800f3ac:	f100 8107 	bmi.w	800f5be <_printf_float+0x462>
 800f3b0:	68e0      	ldr	r0, [r4, #12]
 800f3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3b4:	4298      	cmp	r0, r3
 800f3b6:	bfb8      	it	lt
 800f3b8:	4618      	movlt	r0, r3
 800f3ba:	e730      	b.n	800f21e <_printf_float+0xc2>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	464a      	mov	r2, r9
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	47b8      	blx	r7
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	f43f af27 	beq.w	800f21a <_printf_float+0xbe>
 800f3cc:	f108 0801 	add.w	r8, r8, #1
 800f3d0:	e7e6      	b.n	800f3a0 <_printf_float+0x244>
 800f3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	dc39      	bgt.n	800f44c <_printf_float+0x2f0>
 800f3d8:	4a1b      	ldr	r2, [pc, #108]	; (800f448 <_printf_float+0x2ec>)
 800f3da:	2301      	movs	r3, #1
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b8      	blx	r7
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	f43f af19 	beq.w	800f21a <_printf_float+0xbe>
 800f3e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	d102      	bne.n	800f3f6 <_printf_float+0x29a>
 800f3f0:	6823      	ldr	r3, [r4, #0]
 800f3f2:	07d9      	lsls	r1, r3, #31
 800f3f4:	d5d8      	bpl.n	800f3a8 <_printf_float+0x24c>
 800f3f6:	ee18 3a10 	vmov	r3, s16
 800f3fa:	4652      	mov	r2, sl
 800f3fc:	4631      	mov	r1, r6
 800f3fe:	4628      	mov	r0, r5
 800f400:	47b8      	blx	r7
 800f402:	3001      	adds	r0, #1
 800f404:	f43f af09 	beq.w	800f21a <_printf_float+0xbe>
 800f408:	f04f 0900 	mov.w	r9, #0
 800f40c:	f104 0a1a 	add.w	sl, r4, #26
 800f410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f412:	425b      	negs	r3, r3
 800f414:	454b      	cmp	r3, r9
 800f416:	dc01      	bgt.n	800f41c <_printf_float+0x2c0>
 800f418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f41a:	e792      	b.n	800f342 <_printf_float+0x1e6>
 800f41c:	2301      	movs	r3, #1
 800f41e:	4652      	mov	r2, sl
 800f420:	4631      	mov	r1, r6
 800f422:	4628      	mov	r0, r5
 800f424:	47b8      	blx	r7
 800f426:	3001      	adds	r0, #1
 800f428:	f43f aef7 	beq.w	800f21a <_printf_float+0xbe>
 800f42c:	f109 0901 	add.w	r9, r9, #1
 800f430:	e7ee      	b.n	800f410 <_printf_float+0x2b4>
 800f432:	bf00      	nop
 800f434:	7fefffff 	.word	0x7fefffff
 800f438:	0801248c 	.word	0x0801248c
 800f43c:	08012490 	.word	0x08012490
 800f440:	08012494 	.word	0x08012494
 800f444:	08012498 	.word	0x08012498
 800f448:	0801249c 	.word	0x0801249c
 800f44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f44e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f450:	429a      	cmp	r2, r3
 800f452:	bfa8      	it	ge
 800f454:	461a      	movge	r2, r3
 800f456:	2a00      	cmp	r2, #0
 800f458:	4691      	mov	r9, r2
 800f45a:	dc37      	bgt.n	800f4cc <_printf_float+0x370>
 800f45c:	f04f 0b00 	mov.w	fp, #0
 800f460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f464:	f104 021a 	add.w	r2, r4, #26
 800f468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f46a:	9305      	str	r3, [sp, #20]
 800f46c:	eba3 0309 	sub.w	r3, r3, r9
 800f470:	455b      	cmp	r3, fp
 800f472:	dc33      	bgt.n	800f4dc <_printf_float+0x380>
 800f474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f478:	429a      	cmp	r2, r3
 800f47a:	db3b      	blt.n	800f4f4 <_printf_float+0x398>
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	07da      	lsls	r2, r3, #31
 800f480:	d438      	bmi.n	800f4f4 <_printf_float+0x398>
 800f482:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f486:	eba2 0903 	sub.w	r9, r2, r3
 800f48a:	9b05      	ldr	r3, [sp, #20]
 800f48c:	1ad2      	subs	r2, r2, r3
 800f48e:	4591      	cmp	r9, r2
 800f490:	bfa8      	it	ge
 800f492:	4691      	movge	r9, r2
 800f494:	f1b9 0f00 	cmp.w	r9, #0
 800f498:	dc35      	bgt.n	800f506 <_printf_float+0x3aa>
 800f49a:	f04f 0800 	mov.w	r8, #0
 800f49e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4a2:	f104 0a1a 	add.w	sl, r4, #26
 800f4a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4aa:	1a9b      	subs	r3, r3, r2
 800f4ac:	eba3 0309 	sub.w	r3, r3, r9
 800f4b0:	4543      	cmp	r3, r8
 800f4b2:	f77f af79 	ble.w	800f3a8 <_printf_float+0x24c>
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4628      	mov	r0, r5
 800f4be:	47b8      	blx	r7
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	f43f aeaa 	beq.w	800f21a <_printf_float+0xbe>
 800f4c6:	f108 0801 	add.w	r8, r8, #1
 800f4ca:	e7ec      	b.n	800f4a6 <_printf_float+0x34a>
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	4642      	mov	r2, r8
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	47b8      	blx	r7
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	d1c0      	bne.n	800f45c <_printf_float+0x300>
 800f4da:	e69e      	b.n	800f21a <_printf_float+0xbe>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	4631      	mov	r1, r6
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	9205      	str	r2, [sp, #20]
 800f4e4:	47b8      	blx	r7
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	f43f ae97 	beq.w	800f21a <_printf_float+0xbe>
 800f4ec:	9a05      	ldr	r2, [sp, #20]
 800f4ee:	f10b 0b01 	add.w	fp, fp, #1
 800f4f2:	e7b9      	b.n	800f468 <_printf_float+0x30c>
 800f4f4:	ee18 3a10 	vmov	r3, s16
 800f4f8:	4652      	mov	r2, sl
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	d1be      	bne.n	800f482 <_printf_float+0x326>
 800f504:	e689      	b.n	800f21a <_printf_float+0xbe>
 800f506:	9a05      	ldr	r2, [sp, #20]
 800f508:	464b      	mov	r3, r9
 800f50a:	4442      	add	r2, r8
 800f50c:	4631      	mov	r1, r6
 800f50e:	4628      	mov	r0, r5
 800f510:	47b8      	blx	r7
 800f512:	3001      	adds	r0, #1
 800f514:	d1c1      	bne.n	800f49a <_printf_float+0x33e>
 800f516:	e680      	b.n	800f21a <_printf_float+0xbe>
 800f518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f51a:	2a01      	cmp	r2, #1
 800f51c:	dc01      	bgt.n	800f522 <_printf_float+0x3c6>
 800f51e:	07db      	lsls	r3, r3, #31
 800f520:	d53a      	bpl.n	800f598 <_printf_float+0x43c>
 800f522:	2301      	movs	r3, #1
 800f524:	4642      	mov	r2, r8
 800f526:	4631      	mov	r1, r6
 800f528:	4628      	mov	r0, r5
 800f52a:	47b8      	blx	r7
 800f52c:	3001      	adds	r0, #1
 800f52e:	f43f ae74 	beq.w	800f21a <_printf_float+0xbe>
 800f532:	ee18 3a10 	vmov	r3, s16
 800f536:	4652      	mov	r2, sl
 800f538:	4631      	mov	r1, r6
 800f53a:	4628      	mov	r0, r5
 800f53c:	47b8      	blx	r7
 800f53e:	3001      	adds	r0, #1
 800f540:	f43f ae6b 	beq.w	800f21a <_printf_float+0xbe>
 800f544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f548:	2200      	movs	r2, #0
 800f54a:	2300      	movs	r3, #0
 800f54c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f550:	f7f1 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 800f554:	b9d8      	cbnz	r0, 800f58e <_printf_float+0x432>
 800f556:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f55a:	f108 0201 	add.w	r2, r8, #1
 800f55e:	4631      	mov	r1, r6
 800f560:	4628      	mov	r0, r5
 800f562:	47b8      	blx	r7
 800f564:	3001      	adds	r0, #1
 800f566:	d10e      	bne.n	800f586 <_printf_float+0x42a>
 800f568:	e657      	b.n	800f21a <_printf_float+0xbe>
 800f56a:	2301      	movs	r3, #1
 800f56c:	4652      	mov	r2, sl
 800f56e:	4631      	mov	r1, r6
 800f570:	4628      	mov	r0, r5
 800f572:	47b8      	blx	r7
 800f574:	3001      	adds	r0, #1
 800f576:	f43f ae50 	beq.w	800f21a <_printf_float+0xbe>
 800f57a:	f108 0801 	add.w	r8, r8, #1
 800f57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f580:	3b01      	subs	r3, #1
 800f582:	4543      	cmp	r3, r8
 800f584:	dcf1      	bgt.n	800f56a <_printf_float+0x40e>
 800f586:	464b      	mov	r3, r9
 800f588:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f58c:	e6da      	b.n	800f344 <_printf_float+0x1e8>
 800f58e:	f04f 0800 	mov.w	r8, #0
 800f592:	f104 0a1a 	add.w	sl, r4, #26
 800f596:	e7f2      	b.n	800f57e <_printf_float+0x422>
 800f598:	2301      	movs	r3, #1
 800f59a:	4642      	mov	r2, r8
 800f59c:	e7df      	b.n	800f55e <_printf_float+0x402>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	464a      	mov	r2, r9
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b8      	blx	r7
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	f43f ae36 	beq.w	800f21a <_printf_float+0xbe>
 800f5ae:	f108 0801 	add.w	r8, r8, #1
 800f5b2:	68e3      	ldr	r3, [r4, #12]
 800f5b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5b6:	1a5b      	subs	r3, r3, r1
 800f5b8:	4543      	cmp	r3, r8
 800f5ba:	dcf0      	bgt.n	800f59e <_printf_float+0x442>
 800f5bc:	e6f8      	b.n	800f3b0 <_printf_float+0x254>
 800f5be:	f04f 0800 	mov.w	r8, #0
 800f5c2:	f104 0919 	add.w	r9, r4, #25
 800f5c6:	e7f4      	b.n	800f5b2 <_printf_float+0x456>

0800f5c8 <_printf_common>:
 800f5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5cc:	4616      	mov	r6, r2
 800f5ce:	4699      	mov	r9, r3
 800f5d0:	688a      	ldr	r2, [r1, #8]
 800f5d2:	690b      	ldr	r3, [r1, #16]
 800f5d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	bfb8      	it	lt
 800f5dc:	4613      	movlt	r3, r2
 800f5de:	6033      	str	r3, [r6, #0]
 800f5e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	b10a      	cbz	r2, 800f5ee <_printf_common+0x26>
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	6033      	str	r3, [r6, #0]
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	0699      	lsls	r1, r3, #26
 800f5f2:	bf42      	ittt	mi
 800f5f4:	6833      	ldrmi	r3, [r6, #0]
 800f5f6:	3302      	addmi	r3, #2
 800f5f8:	6033      	strmi	r3, [r6, #0]
 800f5fa:	6825      	ldr	r5, [r4, #0]
 800f5fc:	f015 0506 	ands.w	r5, r5, #6
 800f600:	d106      	bne.n	800f610 <_printf_common+0x48>
 800f602:	f104 0a19 	add.w	sl, r4, #25
 800f606:	68e3      	ldr	r3, [r4, #12]
 800f608:	6832      	ldr	r2, [r6, #0]
 800f60a:	1a9b      	subs	r3, r3, r2
 800f60c:	42ab      	cmp	r3, r5
 800f60e:	dc26      	bgt.n	800f65e <_printf_common+0x96>
 800f610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f614:	1e13      	subs	r3, r2, #0
 800f616:	6822      	ldr	r2, [r4, #0]
 800f618:	bf18      	it	ne
 800f61a:	2301      	movne	r3, #1
 800f61c:	0692      	lsls	r2, r2, #26
 800f61e:	d42b      	bmi.n	800f678 <_printf_common+0xb0>
 800f620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f624:	4649      	mov	r1, r9
 800f626:	4638      	mov	r0, r7
 800f628:	47c0      	blx	r8
 800f62a:	3001      	adds	r0, #1
 800f62c:	d01e      	beq.n	800f66c <_printf_common+0xa4>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	6922      	ldr	r2, [r4, #16]
 800f632:	f003 0306 	and.w	r3, r3, #6
 800f636:	2b04      	cmp	r3, #4
 800f638:	bf02      	ittt	eq
 800f63a:	68e5      	ldreq	r5, [r4, #12]
 800f63c:	6833      	ldreq	r3, [r6, #0]
 800f63e:	1aed      	subeq	r5, r5, r3
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	bf0c      	ite	eq
 800f644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f648:	2500      	movne	r5, #0
 800f64a:	4293      	cmp	r3, r2
 800f64c:	bfc4      	itt	gt
 800f64e:	1a9b      	subgt	r3, r3, r2
 800f650:	18ed      	addgt	r5, r5, r3
 800f652:	2600      	movs	r6, #0
 800f654:	341a      	adds	r4, #26
 800f656:	42b5      	cmp	r5, r6
 800f658:	d11a      	bne.n	800f690 <_printf_common+0xc8>
 800f65a:	2000      	movs	r0, #0
 800f65c:	e008      	b.n	800f670 <_printf_common+0xa8>
 800f65e:	2301      	movs	r3, #1
 800f660:	4652      	mov	r2, sl
 800f662:	4649      	mov	r1, r9
 800f664:	4638      	mov	r0, r7
 800f666:	47c0      	blx	r8
 800f668:	3001      	adds	r0, #1
 800f66a:	d103      	bne.n	800f674 <_printf_common+0xac>
 800f66c:	f04f 30ff 	mov.w	r0, #4294967295
 800f670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f674:	3501      	adds	r5, #1
 800f676:	e7c6      	b.n	800f606 <_printf_common+0x3e>
 800f678:	18e1      	adds	r1, r4, r3
 800f67a:	1c5a      	adds	r2, r3, #1
 800f67c:	2030      	movs	r0, #48	; 0x30
 800f67e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f682:	4422      	add	r2, r4
 800f684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f68c:	3302      	adds	r3, #2
 800f68e:	e7c7      	b.n	800f620 <_printf_common+0x58>
 800f690:	2301      	movs	r3, #1
 800f692:	4622      	mov	r2, r4
 800f694:	4649      	mov	r1, r9
 800f696:	4638      	mov	r0, r7
 800f698:	47c0      	blx	r8
 800f69a:	3001      	adds	r0, #1
 800f69c:	d0e6      	beq.n	800f66c <_printf_common+0xa4>
 800f69e:	3601      	adds	r6, #1
 800f6a0:	e7d9      	b.n	800f656 <_printf_common+0x8e>
	...

0800f6a4 <_printf_i>:
 800f6a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a8:	7e0f      	ldrb	r7, [r1, #24]
 800f6aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6ac:	2f78      	cmp	r7, #120	; 0x78
 800f6ae:	4691      	mov	r9, r2
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	469a      	mov	sl, r3
 800f6b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6ba:	d807      	bhi.n	800f6cc <_printf_i+0x28>
 800f6bc:	2f62      	cmp	r7, #98	; 0x62
 800f6be:	d80a      	bhi.n	800f6d6 <_printf_i+0x32>
 800f6c0:	2f00      	cmp	r7, #0
 800f6c2:	f000 80d4 	beq.w	800f86e <_printf_i+0x1ca>
 800f6c6:	2f58      	cmp	r7, #88	; 0x58
 800f6c8:	f000 80c0 	beq.w	800f84c <_printf_i+0x1a8>
 800f6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6d4:	e03a      	b.n	800f74c <_printf_i+0xa8>
 800f6d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6da:	2b15      	cmp	r3, #21
 800f6dc:	d8f6      	bhi.n	800f6cc <_printf_i+0x28>
 800f6de:	a101      	add	r1, pc, #4	; (adr r1, 800f6e4 <_printf_i+0x40>)
 800f6e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6e4:	0800f73d 	.word	0x0800f73d
 800f6e8:	0800f751 	.word	0x0800f751
 800f6ec:	0800f6cd 	.word	0x0800f6cd
 800f6f0:	0800f6cd 	.word	0x0800f6cd
 800f6f4:	0800f6cd 	.word	0x0800f6cd
 800f6f8:	0800f6cd 	.word	0x0800f6cd
 800f6fc:	0800f751 	.word	0x0800f751
 800f700:	0800f6cd 	.word	0x0800f6cd
 800f704:	0800f6cd 	.word	0x0800f6cd
 800f708:	0800f6cd 	.word	0x0800f6cd
 800f70c:	0800f6cd 	.word	0x0800f6cd
 800f710:	0800f855 	.word	0x0800f855
 800f714:	0800f77d 	.word	0x0800f77d
 800f718:	0800f80f 	.word	0x0800f80f
 800f71c:	0800f6cd 	.word	0x0800f6cd
 800f720:	0800f6cd 	.word	0x0800f6cd
 800f724:	0800f877 	.word	0x0800f877
 800f728:	0800f6cd 	.word	0x0800f6cd
 800f72c:	0800f77d 	.word	0x0800f77d
 800f730:	0800f6cd 	.word	0x0800f6cd
 800f734:	0800f6cd 	.word	0x0800f6cd
 800f738:	0800f817 	.word	0x0800f817
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	1d1a      	adds	r2, r3, #4
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	602a      	str	r2, [r5, #0]
 800f744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f74c:	2301      	movs	r3, #1
 800f74e:	e09f      	b.n	800f890 <_printf_i+0x1ec>
 800f750:	6820      	ldr	r0, [r4, #0]
 800f752:	682b      	ldr	r3, [r5, #0]
 800f754:	0607      	lsls	r7, r0, #24
 800f756:	f103 0104 	add.w	r1, r3, #4
 800f75a:	6029      	str	r1, [r5, #0]
 800f75c:	d501      	bpl.n	800f762 <_printf_i+0xbe>
 800f75e:	681e      	ldr	r6, [r3, #0]
 800f760:	e003      	b.n	800f76a <_printf_i+0xc6>
 800f762:	0646      	lsls	r6, r0, #25
 800f764:	d5fb      	bpl.n	800f75e <_printf_i+0xba>
 800f766:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f76a:	2e00      	cmp	r6, #0
 800f76c:	da03      	bge.n	800f776 <_printf_i+0xd2>
 800f76e:	232d      	movs	r3, #45	; 0x2d
 800f770:	4276      	negs	r6, r6
 800f772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f776:	485a      	ldr	r0, [pc, #360]	; (800f8e0 <_printf_i+0x23c>)
 800f778:	230a      	movs	r3, #10
 800f77a:	e012      	b.n	800f7a2 <_printf_i+0xfe>
 800f77c:	682b      	ldr	r3, [r5, #0]
 800f77e:	6820      	ldr	r0, [r4, #0]
 800f780:	1d19      	adds	r1, r3, #4
 800f782:	6029      	str	r1, [r5, #0]
 800f784:	0605      	lsls	r5, r0, #24
 800f786:	d501      	bpl.n	800f78c <_printf_i+0xe8>
 800f788:	681e      	ldr	r6, [r3, #0]
 800f78a:	e002      	b.n	800f792 <_printf_i+0xee>
 800f78c:	0641      	lsls	r1, r0, #25
 800f78e:	d5fb      	bpl.n	800f788 <_printf_i+0xe4>
 800f790:	881e      	ldrh	r6, [r3, #0]
 800f792:	4853      	ldr	r0, [pc, #332]	; (800f8e0 <_printf_i+0x23c>)
 800f794:	2f6f      	cmp	r7, #111	; 0x6f
 800f796:	bf0c      	ite	eq
 800f798:	2308      	moveq	r3, #8
 800f79a:	230a      	movne	r3, #10
 800f79c:	2100      	movs	r1, #0
 800f79e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7a2:	6865      	ldr	r5, [r4, #4]
 800f7a4:	60a5      	str	r5, [r4, #8]
 800f7a6:	2d00      	cmp	r5, #0
 800f7a8:	bfa2      	ittt	ge
 800f7aa:	6821      	ldrge	r1, [r4, #0]
 800f7ac:	f021 0104 	bicge.w	r1, r1, #4
 800f7b0:	6021      	strge	r1, [r4, #0]
 800f7b2:	b90e      	cbnz	r6, 800f7b8 <_printf_i+0x114>
 800f7b4:	2d00      	cmp	r5, #0
 800f7b6:	d04b      	beq.n	800f850 <_printf_i+0x1ac>
 800f7b8:	4615      	mov	r5, r2
 800f7ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7be:	fb03 6711 	mls	r7, r3, r1, r6
 800f7c2:	5dc7      	ldrb	r7, [r0, r7]
 800f7c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7c8:	4637      	mov	r7, r6
 800f7ca:	42bb      	cmp	r3, r7
 800f7cc:	460e      	mov	r6, r1
 800f7ce:	d9f4      	bls.n	800f7ba <_printf_i+0x116>
 800f7d0:	2b08      	cmp	r3, #8
 800f7d2:	d10b      	bne.n	800f7ec <_printf_i+0x148>
 800f7d4:	6823      	ldr	r3, [r4, #0]
 800f7d6:	07de      	lsls	r6, r3, #31
 800f7d8:	d508      	bpl.n	800f7ec <_printf_i+0x148>
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	6861      	ldr	r1, [r4, #4]
 800f7de:	4299      	cmp	r1, r3
 800f7e0:	bfde      	ittt	le
 800f7e2:	2330      	movle	r3, #48	; 0x30
 800f7e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7ec:	1b52      	subs	r2, r2, r5
 800f7ee:	6122      	str	r2, [r4, #16]
 800f7f0:	f8cd a000 	str.w	sl, [sp]
 800f7f4:	464b      	mov	r3, r9
 800f7f6:	aa03      	add	r2, sp, #12
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	4640      	mov	r0, r8
 800f7fc:	f7ff fee4 	bl	800f5c8 <_printf_common>
 800f800:	3001      	adds	r0, #1
 800f802:	d14a      	bne.n	800f89a <_printf_i+0x1f6>
 800f804:	f04f 30ff 	mov.w	r0, #4294967295
 800f808:	b004      	add	sp, #16
 800f80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f80e:	6823      	ldr	r3, [r4, #0]
 800f810:	f043 0320 	orr.w	r3, r3, #32
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	4833      	ldr	r0, [pc, #204]	; (800f8e4 <_printf_i+0x240>)
 800f818:	2778      	movs	r7, #120	; 0x78
 800f81a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f81e:	6823      	ldr	r3, [r4, #0]
 800f820:	6829      	ldr	r1, [r5, #0]
 800f822:	061f      	lsls	r7, r3, #24
 800f824:	f851 6b04 	ldr.w	r6, [r1], #4
 800f828:	d402      	bmi.n	800f830 <_printf_i+0x18c>
 800f82a:	065f      	lsls	r7, r3, #25
 800f82c:	bf48      	it	mi
 800f82e:	b2b6      	uxthmi	r6, r6
 800f830:	07df      	lsls	r7, r3, #31
 800f832:	bf48      	it	mi
 800f834:	f043 0320 	orrmi.w	r3, r3, #32
 800f838:	6029      	str	r1, [r5, #0]
 800f83a:	bf48      	it	mi
 800f83c:	6023      	strmi	r3, [r4, #0]
 800f83e:	b91e      	cbnz	r6, 800f848 <_printf_i+0x1a4>
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	f023 0320 	bic.w	r3, r3, #32
 800f846:	6023      	str	r3, [r4, #0]
 800f848:	2310      	movs	r3, #16
 800f84a:	e7a7      	b.n	800f79c <_printf_i+0xf8>
 800f84c:	4824      	ldr	r0, [pc, #144]	; (800f8e0 <_printf_i+0x23c>)
 800f84e:	e7e4      	b.n	800f81a <_printf_i+0x176>
 800f850:	4615      	mov	r5, r2
 800f852:	e7bd      	b.n	800f7d0 <_printf_i+0x12c>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	6826      	ldr	r6, [r4, #0]
 800f858:	6961      	ldr	r1, [r4, #20]
 800f85a:	1d18      	adds	r0, r3, #4
 800f85c:	6028      	str	r0, [r5, #0]
 800f85e:	0635      	lsls	r5, r6, #24
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	d501      	bpl.n	800f868 <_printf_i+0x1c4>
 800f864:	6019      	str	r1, [r3, #0]
 800f866:	e002      	b.n	800f86e <_printf_i+0x1ca>
 800f868:	0670      	lsls	r0, r6, #25
 800f86a:	d5fb      	bpl.n	800f864 <_printf_i+0x1c0>
 800f86c:	8019      	strh	r1, [r3, #0]
 800f86e:	2300      	movs	r3, #0
 800f870:	6123      	str	r3, [r4, #16]
 800f872:	4615      	mov	r5, r2
 800f874:	e7bc      	b.n	800f7f0 <_printf_i+0x14c>
 800f876:	682b      	ldr	r3, [r5, #0]
 800f878:	1d1a      	adds	r2, r3, #4
 800f87a:	602a      	str	r2, [r5, #0]
 800f87c:	681d      	ldr	r5, [r3, #0]
 800f87e:	6862      	ldr	r2, [r4, #4]
 800f880:	2100      	movs	r1, #0
 800f882:	4628      	mov	r0, r5
 800f884:	f7f0 fca4 	bl	80001d0 <memchr>
 800f888:	b108      	cbz	r0, 800f88e <_printf_i+0x1ea>
 800f88a:	1b40      	subs	r0, r0, r5
 800f88c:	6060      	str	r0, [r4, #4]
 800f88e:	6863      	ldr	r3, [r4, #4]
 800f890:	6123      	str	r3, [r4, #16]
 800f892:	2300      	movs	r3, #0
 800f894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f898:	e7aa      	b.n	800f7f0 <_printf_i+0x14c>
 800f89a:	6923      	ldr	r3, [r4, #16]
 800f89c:	462a      	mov	r2, r5
 800f89e:	4649      	mov	r1, r9
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	47d0      	blx	sl
 800f8a4:	3001      	adds	r0, #1
 800f8a6:	d0ad      	beq.n	800f804 <_printf_i+0x160>
 800f8a8:	6823      	ldr	r3, [r4, #0]
 800f8aa:	079b      	lsls	r3, r3, #30
 800f8ac:	d413      	bmi.n	800f8d6 <_printf_i+0x232>
 800f8ae:	68e0      	ldr	r0, [r4, #12]
 800f8b0:	9b03      	ldr	r3, [sp, #12]
 800f8b2:	4298      	cmp	r0, r3
 800f8b4:	bfb8      	it	lt
 800f8b6:	4618      	movlt	r0, r3
 800f8b8:	e7a6      	b.n	800f808 <_printf_i+0x164>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	4632      	mov	r2, r6
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	47d0      	blx	sl
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d09d      	beq.n	800f804 <_printf_i+0x160>
 800f8c8:	3501      	adds	r5, #1
 800f8ca:	68e3      	ldr	r3, [r4, #12]
 800f8cc:	9903      	ldr	r1, [sp, #12]
 800f8ce:	1a5b      	subs	r3, r3, r1
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	dcf2      	bgt.n	800f8ba <_printf_i+0x216>
 800f8d4:	e7eb      	b.n	800f8ae <_printf_i+0x20a>
 800f8d6:	2500      	movs	r5, #0
 800f8d8:	f104 0619 	add.w	r6, r4, #25
 800f8dc:	e7f5      	b.n	800f8ca <_printf_i+0x226>
 800f8de:	bf00      	nop
 800f8e0:	0801249e 	.word	0x0801249e
 800f8e4:	080124af 	.word	0x080124af

0800f8e8 <std>:
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	b510      	push	{r4, lr}
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	e9c0 3300 	strd	r3, r3, [r0]
 800f8f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8f6:	6083      	str	r3, [r0, #8]
 800f8f8:	8181      	strh	r1, [r0, #12]
 800f8fa:	6643      	str	r3, [r0, #100]	; 0x64
 800f8fc:	81c2      	strh	r2, [r0, #14]
 800f8fe:	6183      	str	r3, [r0, #24]
 800f900:	4619      	mov	r1, r3
 800f902:	2208      	movs	r2, #8
 800f904:	305c      	adds	r0, #92	; 0x5c
 800f906:	f000 f902 	bl	800fb0e <memset>
 800f90a:	4b05      	ldr	r3, [pc, #20]	; (800f920 <std+0x38>)
 800f90c:	6263      	str	r3, [r4, #36]	; 0x24
 800f90e:	4b05      	ldr	r3, [pc, #20]	; (800f924 <std+0x3c>)
 800f910:	62a3      	str	r3, [r4, #40]	; 0x28
 800f912:	4b05      	ldr	r3, [pc, #20]	; (800f928 <std+0x40>)
 800f914:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f916:	4b05      	ldr	r3, [pc, #20]	; (800f92c <std+0x44>)
 800f918:	6224      	str	r4, [r4, #32]
 800f91a:	6323      	str	r3, [r4, #48]	; 0x30
 800f91c:	bd10      	pop	{r4, pc}
 800f91e:	bf00      	nop
 800f920:	0800fa89 	.word	0x0800fa89
 800f924:	0800faab 	.word	0x0800faab
 800f928:	0800fae3 	.word	0x0800fae3
 800f92c:	0800fb07 	.word	0x0800fb07

0800f930 <stdio_exit_handler>:
 800f930:	4a02      	ldr	r2, [pc, #8]	; (800f93c <stdio_exit_handler+0xc>)
 800f932:	4903      	ldr	r1, [pc, #12]	; (800f940 <stdio_exit_handler+0x10>)
 800f934:	4803      	ldr	r0, [pc, #12]	; (800f944 <stdio_exit_handler+0x14>)
 800f936:	f000 b869 	b.w	800fa0c <_fwalk_sglue>
 800f93a:	bf00      	nop
 800f93c:	2000032c 	.word	0x2000032c
 800f940:	08011489 	.word	0x08011489
 800f944:	20000338 	.word	0x20000338

0800f948 <cleanup_stdio>:
 800f948:	6841      	ldr	r1, [r0, #4]
 800f94a:	4b0c      	ldr	r3, [pc, #48]	; (800f97c <cleanup_stdio+0x34>)
 800f94c:	4299      	cmp	r1, r3
 800f94e:	b510      	push	{r4, lr}
 800f950:	4604      	mov	r4, r0
 800f952:	d001      	beq.n	800f958 <cleanup_stdio+0x10>
 800f954:	f001 fd98 	bl	8011488 <_fflush_r>
 800f958:	68a1      	ldr	r1, [r4, #8]
 800f95a:	4b09      	ldr	r3, [pc, #36]	; (800f980 <cleanup_stdio+0x38>)
 800f95c:	4299      	cmp	r1, r3
 800f95e:	d002      	beq.n	800f966 <cleanup_stdio+0x1e>
 800f960:	4620      	mov	r0, r4
 800f962:	f001 fd91 	bl	8011488 <_fflush_r>
 800f966:	68e1      	ldr	r1, [r4, #12]
 800f968:	4b06      	ldr	r3, [pc, #24]	; (800f984 <cleanup_stdio+0x3c>)
 800f96a:	4299      	cmp	r1, r3
 800f96c:	d004      	beq.n	800f978 <cleanup_stdio+0x30>
 800f96e:	4620      	mov	r0, r4
 800f970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f974:	f001 bd88 	b.w	8011488 <_fflush_r>
 800f978:	bd10      	pop	{r4, pc}
 800f97a:	bf00      	nop
 800f97c:	2000154c 	.word	0x2000154c
 800f980:	200015b4 	.word	0x200015b4
 800f984:	2000161c 	.word	0x2000161c

0800f988 <global_stdio_init.part.0>:
 800f988:	b510      	push	{r4, lr}
 800f98a:	4b0b      	ldr	r3, [pc, #44]	; (800f9b8 <global_stdio_init.part.0+0x30>)
 800f98c:	4c0b      	ldr	r4, [pc, #44]	; (800f9bc <global_stdio_init.part.0+0x34>)
 800f98e:	4a0c      	ldr	r2, [pc, #48]	; (800f9c0 <global_stdio_init.part.0+0x38>)
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	4620      	mov	r0, r4
 800f994:	2200      	movs	r2, #0
 800f996:	2104      	movs	r1, #4
 800f998:	f7ff ffa6 	bl	800f8e8 <std>
 800f99c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	2109      	movs	r1, #9
 800f9a4:	f7ff ffa0 	bl	800f8e8 <std>
 800f9a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f9ac:	2202      	movs	r2, #2
 800f9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b2:	2112      	movs	r1, #18
 800f9b4:	f7ff bf98 	b.w	800f8e8 <std>
 800f9b8:	20001684 	.word	0x20001684
 800f9bc:	2000154c 	.word	0x2000154c
 800f9c0:	0800f931 	.word	0x0800f931

0800f9c4 <__sfp_lock_acquire>:
 800f9c4:	4801      	ldr	r0, [pc, #4]	; (800f9cc <__sfp_lock_acquire+0x8>)
 800f9c6:	f000 b92f 	b.w	800fc28 <__retarget_lock_acquire_recursive>
 800f9ca:	bf00      	nop
 800f9cc:	2000168d 	.word	0x2000168d

0800f9d0 <__sfp_lock_release>:
 800f9d0:	4801      	ldr	r0, [pc, #4]	; (800f9d8 <__sfp_lock_release+0x8>)
 800f9d2:	f000 b92a 	b.w	800fc2a <__retarget_lock_release_recursive>
 800f9d6:	bf00      	nop
 800f9d8:	2000168d 	.word	0x2000168d

0800f9dc <__sinit>:
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	4604      	mov	r4, r0
 800f9e0:	f7ff fff0 	bl	800f9c4 <__sfp_lock_acquire>
 800f9e4:	6a23      	ldr	r3, [r4, #32]
 800f9e6:	b11b      	cbz	r3, 800f9f0 <__sinit+0x14>
 800f9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9ec:	f7ff bff0 	b.w	800f9d0 <__sfp_lock_release>
 800f9f0:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <__sinit+0x28>)
 800f9f2:	6223      	str	r3, [r4, #32]
 800f9f4:	4b04      	ldr	r3, [pc, #16]	; (800fa08 <__sinit+0x2c>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d1f5      	bne.n	800f9e8 <__sinit+0xc>
 800f9fc:	f7ff ffc4 	bl	800f988 <global_stdio_init.part.0>
 800fa00:	e7f2      	b.n	800f9e8 <__sinit+0xc>
 800fa02:	bf00      	nop
 800fa04:	0800f949 	.word	0x0800f949
 800fa08:	20001684 	.word	0x20001684

0800fa0c <_fwalk_sglue>:
 800fa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa10:	4607      	mov	r7, r0
 800fa12:	4688      	mov	r8, r1
 800fa14:	4614      	mov	r4, r2
 800fa16:	2600      	movs	r6, #0
 800fa18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa1c:	f1b9 0901 	subs.w	r9, r9, #1
 800fa20:	d505      	bpl.n	800fa2e <_fwalk_sglue+0x22>
 800fa22:	6824      	ldr	r4, [r4, #0]
 800fa24:	2c00      	cmp	r4, #0
 800fa26:	d1f7      	bne.n	800fa18 <_fwalk_sglue+0xc>
 800fa28:	4630      	mov	r0, r6
 800fa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa2e:	89ab      	ldrh	r3, [r5, #12]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d907      	bls.n	800fa44 <_fwalk_sglue+0x38>
 800fa34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	d003      	beq.n	800fa44 <_fwalk_sglue+0x38>
 800fa3c:	4629      	mov	r1, r5
 800fa3e:	4638      	mov	r0, r7
 800fa40:	47c0      	blx	r8
 800fa42:	4306      	orrs	r6, r0
 800fa44:	3568      	adds	r5, #104	; 0x68
 800fa46:	e7e9      	b.n	800fa1c <_fwalk_sglue+0x10>

0800fa48 <siprintf>:
 800fa48:	b40e      	push	{r1, r2, r3}
 800fa4a:	b500      	push	{lr}
 800fa4c:	b09c      	sub	sp, #112	; 0x70
 800fa4e:	ab1d      	add	r3, sp, #116	; 0x74
 800fa50:	9002      	str	r0, [sp, #8]
 800fa52:	9006      	str	r0, [sp, #24]
 800fa54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa58:	4809      	ldr	r0, [pc, #36]	; (800fa80 <siprintf+0x38>)
 800fa5a:	9107      	str	r1, [sp, #28]
 800fa5c:	9104      	str	r1, [sp, #16]
 800fa5e:	4909      	ldr	r1, [pc, #36]	; (800fa84 <siprintf+0x3c>)
 800fa60:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa64:	9105      	str	r1, [sp, #20]
 800fa66:	6800      	ldr	r0, [r0, #0]
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	a902      	add	r1, sp, #8
 800fa6c:	f001 fb88 	bl	8011180 <_svfiprintf_r>
 800fa70:	9b02      	ldr	r3, [sp, #8]
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]
 800fa76:	b01c      	add	sp, #112	; 0x70
 800fa78:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa7c:	b003      	add	sp, #12
 800fa7e:	4770      	bx	lr
 800fa80:	20000384 	.word	0x20000384
 800fa84:	ffff0208 	.word	0xffff0208

0800fa88 <__sread>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	f000 f86c 	bl	800fb6c <_read_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	bfab      	itete	ge
 800fa98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa9a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa9c:	181b      	addge	r3, r3, r0
 800fa9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800faa2:	bfac      	ite	ge
 800faa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800faa6:	81a3      	strhlt	r3, [r4, #12]
 800faa8:	bd10      	pop	{r4, pc}

0800faaa <__swrite>:
 800faaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faae:	461f      	mov	r7, r3
 800fab0:	898b      	ldrh	r3, [r1, #12]
 800fab2:	05db      	lsls	r3, r3, #23
 800fab4:	4605      	mov	r5, r0
 800fab6:	460c      	mov	r4, r1
 800fab8:	4616      	mov	r6, r2
 800faba:	d505      	bpl.n	800fac8 <__swrite+0x1e>
 800fabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac0:	2302      	movs	r3, #2
 800fac2:	2200      	movs	r2, #0
 800fac4:	f000 f840 	bl	800fb48 <_lseek_r>
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800face:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fad2:	81a3      	strh	r3, [r4, #12]
 800fad4:	4632      	mov	r2, r6
 800fad6:	463b      	mov	r3, r7
 800fad8:	4628      	mov	r0, r5
 800fada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fade:	f000 b867 	b.w	800fbb0 <_write_r>

0800fae2 <__sseek>:
 800fae2:	b510      	push	{r4, lr}
 800fae4:	460c      	mov	r4, r1
 800fae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faea:	f000 f82d 	bl	800fb48 <_lseek_r>
 800faee:	1c43      	adds	r3, r0, #1
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	bf15      	itete	ne
 800faf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800faf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fafa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fafe:	81a3      	strheq	r3, [r4, #12]
 800fb00:	bf18      	it	ne
 800fb02:	81a3      	strhne	r3, [r4, #12]
 800fb04:	bd10      	pop	{r4, pc}

0800fb06 <__sclose>:
 800fb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb0a:	f000 b80d 	b.w	800fb28 <_close_r>

0800fb0e <memset>:
 800fb0e:	4402      	add	r2, r0
 800fb10:	4603      	mov	r3, r0
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d100      	bne.n	800fb18 <memset+0xa>
 800fb16:	4770      	bx	lr
 800fb18:	f803 1b01 	strb.w	r1, [r3], #1
 800fb1c:	e7f9      	b.n	800fb12 <memset+0x4>
	...

0800fb20 <_localeconv_r>:
 800fb20:	4800      	ldr	r0, [pc, #0]	; (800fb24 <_localeconv_r+0x4>)
 800fb22:	4770      	bx	lr
 800fb24:	20000478 	.word	0x20000478

0800fb28 <_close_r>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	4d06      	ldr	r5, [pc, #24]	; (800fb44 <_close_r+0x1c>)
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	4604      	mov	r4, r0
 800fb30:	4608      	mov	r0, r1
 800fb32:	602b      	str	r3, [r5, #0]
 800fb34:	f7f6 fac8 	bl	80060c8 <_close>
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	d102      	bne.n	800fb42 <_close_r+0x1a>
 800fb3c:	682b      	ldr	r3, [r5, #0]
 800fb3e:	b103      	cbz	r3, 800fb42 <_close_r+0x1a>
 800fb40:	6023      	str	r3, [r4, #0]
 800fb42:	bd38      	pop	{r3, r4, r5, pc}
 800fb44:	20001688 	.word	0x20001688

0800fb48 <_lseek_r>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	4d07      	ldr	r5, [pc, #28]	; (800fb68 <_lseek_r+0x20>)
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	4608      	mov	r0, r1
 800fb50:	4611      	mov	r1, r2
 800fb52:	2200      	movs	r2, #0
 800fb54:	602a      	str	r2, [r5, #0]
 800fb56:	461a      	mov	r2, r3
 800fb58:	f7f6 fadd 	bl	8006116 <_lseek>
 800fb5c:	1c43      	adds	r3, r0, #1
 800fb5e:	d102      	bne.n	800fb66 <_lseek_r+0x1e>
 800fb60:	682b      	ldr	r3, [r5, #0]
 800fb62:	b103      	cbz	r3, 800fb66 <_lseek_r+0x1e>
 800fb64:	6023      	str	r3, [r4, #0]
 800fb66:	bd38      	pop	{r3, r4, r5, pc}
 800fb68:	20001688 	.word	0x20001688

0800fb6c <_read_r>:
 800fb6c:	b538      	push	{r3, r4, r5, lr}
 800fb6e:	4d07      	ldr	r5, [pc, #28]	; (800fb8c <_read_r+0x20>)
 800fb70:	4604      	mov	r4, r0
 800fb72:	4608      	mov	r0, r1
 800fb74:	4611      	mov	r1, r2
 800fb76:	2200      	movs	r2, #0
 800fb78:	602a      	str	r2, [r5, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	f7f6 fa6b 	bl	8006056 <_read>
 800fb80:	1c43      	adds	r3, r0, #1
 800fb82:	d102      	bne.n	800fb8a <_read_r+0x1e>
 800fb84:	682b      	ldr	r3, [r5, #0]
 800fb86:	b103      	cbz	r3, 800fb8a <_read_r+0x1e>
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	20001688 	.word	0x20001688

0800fb90 <_sbrk_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4d06      	ldr	r5, [pc, #24]	; (800fbac <_sbrk_r+0x1c>)
 800fb94:	2300      	movs	r3, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	4608      	mov	r0, r1
 800fb9a:	602b      	str	r3, [r5, #0]
 800fb9c:	f7f6 fac8 	bl	8006130 <_sbrk>
 800fba0:	1c43      	adds	r3, r0, #1
 800fba2:	d102      	bne.n	800fbaa <_sbrk_r+0x1a>
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	b103      	cbz	r3, 800fbaa <_sbrk_r+0x1a>
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	20001688 	.word	0x20001688

0800fbb0 <_write_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4d07      	ldr	r5, [pc, #28]	; (800fbd0 <_write_r+0x20>)
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	4608      	mov	r0, r1
 800fbb8:	4611      	mov	r1, r2
 800fbba:	2200      	movs	r2, #0
 800fbbc:	602a      	str	r2, [r5, #0]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	f7f6 fa66 	bl	8006090 <_write>
 800fbc4:	1c43      	adds	r3, r0, #1
 800fbc6:	d102      	bne.n	800fbce <_write_r+0x1e>
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	b103      	cbz	r3, 800fbce <_write_r+0x1e>
 800fbcc:	6023      	str	r3, [r4, #0]
 800fbce:	bd38      	pop	{r3, r4, r5, pc}
 800fbd0:	20001688 	.word	0x20001688

0800fbd4 <__errno>:
 800fbd4:	4b01      	ldr	r3, [pc, #4]	; (800fbdc <__errno+0x8>)
 800fbd6:	6818      	ldr	r0, [r3, #0]
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	20000384 	.word	0x20000384

0800fbe0 <__libc_init_array>:
 800fbe0:	b570      	push	{r4, r5, r6, lr}
 800fbe2:	4d0d      	ldr	r5, [pc, #52]	; (800fc18 <__libc_init_array+0x38>)
 800fbe4:	4c0d      	ldr	r4, [pc, #52]	; (800fc1c <__libc_init_array+0x3c>)
 800fbe6:	1b64      	subs	r4, r4, r5
 800fbe8:	10a4      	asrs	r4, r4, #2
 800fbea:	2600      	movs	r6, #0
 800fbec:	42a6      	cmp	r6, r4
 800fbee:	d109      	bne.n	800fc04 <__libc_init_array+0x24>
 800fbf0:	4d0b      	ldr	r5, [pc, #44]	; (800fc20 <__libc_init_array+0x40>)
 800fbf2:	4c0c      	ldr	r4, [pc, #48]	; (800fc24 <__libc_init_array+0x44>)
 800fbf4:	f002 f9d6 	bl	8011fa4 <_init>
 800fbf8:	1b64      	subs	r4, r4, r5
 800fbfa:	10a4      	asrs	r4, r4, #2
 800fbfc:	2600      	movs	r6, #0
 800fbfe:	42a6      	cmp	r6, r4
 800fc00:	d105      	bne.n	800fc0e <__libc_init_array+0x2e>
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
 800fc04:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc08:	4798      	blx	r3
 800fc0a:	3601      	adds	r6, #1
 800fc0c:	e7ee      	b.n	800fbec <__libc_init_array+0xc>
 800fc0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc12:	4798      	blx	r3
 800fc14:	3601      	adds	r6, #1
 800fc16:	e7f2      	b.n	800fbfe <__libc_init_array+0x1e>
 800fc18:	08012838 	.word	0x08012838
 800fc1c:	08012838 	.word	0x08012838
 800fc20:	08012838 	.word	0x08012838
 800fc24:	0801283c 	.word	0x0801283c

0800fc28 <__retarget_lock_acquire_recursive>:
 800fc28:	4770      	bx	lr

0800fc2a <__retarget_lock_release_recursive>:
 800fc2a:	4770      	bx	lr

0800fc2c <memcpy>:
 800fc2c:	440a      	add	r2, r1
 800fc2e:	4291      	cmp	r1, r2
 800fc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc34:	d100      	bne.n	800fc38 <memcpy+0xc>
 800fc36:	4770      	bx	lr
 800fc38:	b510      	push	{r4, lr}
 800fc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc42:	4291      	cmp	r1, r2
 800fc44:	d1f9      	bne.n	800fc3a <memcpy+0xe>
 800fc46:	bd10      	pop	{r4, pc}

0800fc48 <quorem>:
 800fc48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4c:	6903      	ldr	r3, [r0, #16]
 800fc4e:	690c      	ldr	r4, [r1, #16]
 800fc50:	42a3      	cmp	r3, r4
 800fc52:	4607      	mov	r7, r0
 800fc54:	db7e      	blt.n	800fd54 <quorem+0x10c>
 800fc56:	3c01      	subs	r4, #1
 800fc58:	f101 0814 	add.w	r8, r1, #20
 800fc5c:	f100 0514 	add.w	r5, r0, #20
 800fc60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc64:	9301      	str	r3, [sp, #4]
 800fc66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	429a      	cmp	r2, r3
 800fc72:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc7a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc7e:	d331      	bcc.n	800fce4 <quorem+0x9c>
 800fc80:	f04f 0e00 	mov.w	lr, #0
 800fc84:	4640      	mov	r0, r8
 800fc86:	46ac      	mov	ip, r5
 800fc88:	46f2      	mov	sl, lr
 800fc8a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc8e:	b293      	uxth	r3, r2
 800fc90:	fb06 e303 	mla	r3, r6, r3, lr
 800fc94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc98:	0c1a      	lsrs	r2, r3, #16
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	ebaa 0303 	sub.w	r3, sl, r3
 800fca0:	f8dc a000 	ldr.w	sl, [ip]
 800fca4:	fa13 f38a 	uxtah	r3, r3, sl
 800fca8:	fb06 220e 	mla	r2, r6, lr, r2
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	9b00      	ldr	r3, [sp, #0]
 800fcb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fcb4:	b292      	uxth	r2, r2
 800fcb6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fcba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcbe:	f8bd 3000 	ldrh.w	r3, [sp]
 800fcc2:	4581      	cmp	r9, r0
 800fcc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcc8:	f84c 3b04 	str.w	r3, [ip], #4
 800fccc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fcd0:	d2db      	bcs.n	800fc8a <quorem+0x42>
 800fcd2:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcd6:	b92b      	cbnz	r3, 800fce4 <quorem+0x9c>
 800fcd8:	9b01      	ldr	r3, [sp, #4]
 800fcda:	3b04      	subs	r3, #4
 800fcdc:	429d      	cmp	r5, r3
 800fcde:	461a      	mov	r2, r3
 800fce0:	d32c      	bcc.n	800fd3c <quorem+0xf4>
 800fce2:	613c      	str	r4, [r7, #16]
 800fce4:	4638      	mov	r0, r7
 800fce6:	f001 f8f1 	bl	8010ecc <__mcmp>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	db22      	blt.n	800fd34 <quorem+0xec>
 800fcee:	3601      	adds	r6, #1
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fcf8:	f8d1 c000 	ldr.w	ip, [r1]
 800fcfc:	b293      	uxth	r3, r2
 800fcfe:	1ac3      	subs	r3, r0, r3
 800fd00:	0c12      	lsrs	r2, r2, #16
 800fd02:	fa13 f38c 	uxtah	r3, r3, ip
 800fd06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fd0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd14:	45c1      	cmp	r9, r8
 800fd16:	f841 3b04 	str.w	r3, [r1], #4
 800fd1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd1e:	d2e9      	bcs.n	800fcf4 <quorem+0xac>
 800fd20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd28:	b922      	cbnz	r2, 800fd34 <quorem+0xec>
 800fd2a:	3b04      	subs	r3, #4
 800fd2c:	429d      	cmp	r5, r3
 800fd2e:	461a      	mov	r2, r3
 800fd30:	d30a      	bcc.n	800fd48 <quorem+0x100>
 800fd32:	613c      	str	r4, [r7, #16]
 800fd34:	4630      	mov	r0, r6
 800fd36:	b003      	add	sp, #12
 800fd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3c:	6812      	ldr	r2, [r2, #0]
 800fd3e:	3b04      	subs	r3, #4
 800fd40:	2a00      	cmp	r2, #0
 800fd42:	d1ce      	bne.n	800fce2 <quorem+0x9a>
 800fd44:	3c01      	subs	r4, #1
 800fd46:	e7c9      	b.n	800fcdc <quorem+0x94>
 800fd48:	6812      	ldr	r2, [r2, #0]
 800fd4a:	3b04      	subs	r3, #4
 800fd4c:	2a00      	cmp	r2, #0
 800fd4e:	d1f0      	bne.n	800fd32 <quorem+0xea>
 800fd50:	3c01      	subs	r4, #1
 800fd52:	e7eb      	b.n	800fd2c <quorem+0xe4>
 800fd54:	2000      	movs	r0, #0
 800fd56:	e7ee      	b.n	800fd36 <quorem+0xee>

0800fd58 <_dtoa_r>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	ed2d 8b04 	vpush	{d8-d9}
 800fd60:	69c5      	ldr	r5, [r0, #28]
 800fd62:	b093      	sub	sp, #76	; 0x4c
 800fd64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd68:	ec57 6b10 	vmov	r6, r7, d0
 800fd6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd70:	9107      	str	r1, [sp, #28]
 800fd72:	4604      	mov	r4, r0
 800fd74:	920a      	str	r2, [sp, #40]	; 0x28
 800fd76:	930d      	str	r3, [sp, #52]	; 0x34
 800fd78:	b975      	cbnz	r5, 800fd98 <_dtoa_r+0x40>
 800fd7a:	2010      	movs	r0, #16
 800fd7c:	f7ff f892 	bl	800eea4 <malloc>
 800fd80:	4602      	mov	r2, r0
 800fd82:	61e0      	str	r0, [r4, #28]
 800fd84:	b920      	cbnz	r0, 800fd90 <_dtoa_r+0x38>
 800fd86:	4bae      	ldr	r3, [pc, #696]	; (8010040 <_dtoa_r+0x2e8>)
 800fd88:	21ef      	movs	r1, #239	; 0xef
 800fd8a:	48ae      	ldr	r0, [pc, #696]	; (8010044 <_dtoa_r+0x2ec>)
 800fd8c:	f001 fbbe 	bl	801150c <__assert_func>
 800fd90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd94:	6005      	str	r5, [r0, #0]
 800fd96:	60c5      	str	r5, [r0, #12]
 800fd98:	69e3      	ldr	r3, [r4, #28]
 800fd9a:	6819      	ldr	r1, [r3, #0]
 800fd9c:	b151      	cbz	r1, 800fdb4 <_dtoa_r+0x5c>
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	604a      	str	r2, [r1, #4]
 800fda2:	2301      	movs	r3, #1
 800fda4:	4093      	lsls	r3, r2
 800fda6:	608b      	str	r3, [r1, #8]
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 fe53 	bl	8010a54 <_Bfree>
 800fdae:	69e3      	ldr	r3, [r4, #28]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	1e3b      	subs	r3, r7, #0
 800fdb6:	bfbb      	ittet	lt
 800fdb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fdbc:	9303      	strlt	r3, [sp, #12]
 800fdbe:	2300      	movge	r3, #0
 800fdc0:	2201      	movlt	r2, #1
 800fdc2:	bfac      	ite	ge
 800fdc4:	f8c8 3000 	strge.w	r3, [r8]
 800fdc8:	f8c8 2000 	strlt.w	r2, [r8]
 800fdcc:	4b9e      	ldr	r3, [pc, #632]	; (8010048 <_dtoa_r+0x2f0>)
 800fdce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fdd2:	ea33 0308 	bics.w	r3, r3, r8
 800fdd6:	d11b      	bne.n	800fe10 <_dtoa_r+0xb8>
 800fdd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdda:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fde4:	4333      	orrs	r3, r6
 800fde6:	f000 8593 	beq.w	8010910 <_dtoa_r+0xbb8>
 800fdea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdec:	b963      	cbnz	r3, 800fe08 <_dtoa_r+0xb0>
 800fdee:	4b97      	ldr	r3, [pc, #604]	; (801004c <_dtoa_r+0x2f4>)
 800fdf0:	e027      	b.n	800fe42 <_dtoa_r+0xea>
 800fdf2:	4b97      	ldr	r3, [pc, #604]	; (8010050 <_dtoa_r+0x2f8>)
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdfa:	6013      	str	r3, [r2, #0]
 800fdfc:	9800      	ldr	r0, [sp, #0]
 800fdfe:	b013      	add	sp, #76	; 0x4c
 800fe00:	ecbd 8b04 	vpop	{d8-d9}
 800fe04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe08:	4b90      	ldr	r3, [pc, #576]	; (801004c <_dtoa_r+0x2f4>)
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	3303      	adds	r3, #3
 800fe0e:	e7f3      	b.n	800fdf8 <_dtoa_r+0xa0>
 800fe10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe14:	2200      	movs	r2, #0
 800fe16:	ec51 0b17 	vmov	r0, r1, d7
 800fe1a:	eeb0 8a47 	vmov.f32	s16, s14
 800fe1e:	eef0 8a67 	vmov.f32	s17, s15
 800fe22:	2300      	movs	r3, #0
 800fe24:	f7f0 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe28:	4681      	mov	r9, r0
 800fe2a:	b160      	cbz	r0, 800fe46 <_dtoa_r+0xee>
 800fe2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe2e:	2301      	movs	r3, #1
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 8568 	beq.w	801090a <_dtoa_r+0xbb2>
 800fe3a:	4b86      	ldr	r3, [pc, #536]	; (8010054 <_dtoa_r+0x2fc>)
 800fe3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	e7da      	b.n	800fdfc <_dtoa_r+0xa4>
 800fe46:	aa10      	add	r2, sp, #64	; 0x40
 800fe48:	a911      	add	r1, sp, #68	; 0x44
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe50:	eef0 0a68 	vmov.f32	s1, s17
 800fe54:	f001 f8e0 	bl	8011018 <__d2b>
 800fe58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fe5c:	4682      	mov	sl, r0
 800fe5e:	2d00      	cmp	r5, #0
 800fe60:	d07f      	beq.n	800ff62 <_dtoa_r+0x20a>
 800fe62:	ee18 3a90 	vmov	r3, s17
 800fe66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fe6e:	ec51 0b18 	vmov	r0, r1, d8
 800fe72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fe7e:	4619      	mov	r1, r3
 800fe80:	2200      	movs	r2, #0
 800fe82:	4b75      	ldr	r3, [pc, #468]	; (8010058 <_dtoa_r+0x300>)
 800fe84:	f7f0 fa00 	bl	8000288 <__aeabi_dsub>
 800fe88:	a367      	add	r3, pc, #412	; (adr r3, 8010028 <_dtoa_r+0x2d0>)
 800fe8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8e:	f7f0 fbb3 	bl	80005f8 <__aeabi_dmul>
 800fe92:	a367      	add	r3, pc, #412	; (adr r3, 8010030 <_dtoa_r+0x2d8>)
 800fe94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe98:	f7f0 f9f8 	bl	800028c <__adddf3>
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	4628      	mov	r0, r5
 800fea0:	460f      	mov	r7, r1
 800fea2:	f7f0 fb3f 	bl	8000524 <__aeabi_i2d>
 800fea6:	a364      	add	r3, pc, #400	; (adr r3, 8010038 <_dtoa_r+0x2e0>)
 800fea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feac:	f7f0 fba4 	bl	80005f8 <__aeabi_dmul>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	4630      	mov	r0, r6
 800feb6:	4639      	mov	r1, r7
 800feb8:	f7f0 f9e8 	bl	800028c <__adddf3>
 800febc:	4606      	mov	r6, r0
 800febe:	460f      	mov	r7, r1
 800fec0:	f7f0 fe4a 	bl	8000b58 <__aeabi_d2iz>
 800fec4:	2200      	movs	r2, #0
 800fec6:	4683      	mov	fp, r0
 800fec8:	2300      	movs	r3, #0
 800feca:	4630      	mov	r0, r6
 800fecc:	4639      	mov	r1, r7
 800fece:	f7f0 fe05 	bl	8000adc <__aeabi_dcmplt>
 800fed2:	b148      	cbz	r0, 800fee8 <_dtoa_r+0x190>
 800fed4:	4658      	mov	r0, fp
 800fed6:	f7f0 fb25 	bl	8000524 <__aeabi_i2d>
 800feda:	4632      	mov	r2, r6
 800fedc:	463b      	mov	r3, r7
 800fede:	f7f0 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fee2:	b908      	cbnz	r0, 800fee8 <_dtoa_r+0x190>
 800fee4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fee8:	f1bb 0f16 	cmp.w	fp, #22
 800feec:	d857      	bhi.n	800ff9e <_dtoa_r+0x246>
 800feee:	4b5b      	ldr	r3, [pc, #364]	; (801005c <_dtoa_r+0x304>)
 800fef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	ec51 0b18 	vmov	r0, r1, d8
 800fefc:	f7f0 fdee 	bl	8000adc <__aeabi_dcmplt>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d04e      	beq.n	800ffa2 <_dtoa_r+0x24a>
 800ff04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff08:	2300      	movs	r3, #0
 800ff0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ff0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff0e:	1b5b      	subs	r3, r3, r5
 800ff10:	1e5a      	subs	r2, r3, #1
 800ff12:	bf45      	ittet	mi
 800ff14:	f1c3 0301 	rsbmi	r3, r3, #1
 800ff18:	9305      	strmi	r3, [sp, #20]
 800ff1a:	2300      	movpl	r3, #0
 800ff1c:	2300      	movmi	r3, #0
 800ff1e:	9206      	str	r2, [sp, #24]
 800ff20:	bf54      	ite	pl
 800ff22:	9305      	strpl	r3, [sp, #20]
 800ff24:	9306      	strmi	r3, [sp, #24]
 800ff26:	f1bb 0f00 	cmp.w	fp, #0
 800ff2a:	db3c      	blt.n	800ffa6 <_dtoa_r+0x24e>
 800ff2c:	9b06      	ldr	r3, [sp, #24]
 800ff2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ff32:	445b      	add	r3, fp
 800ff34:	9306      	str	r3, [sp, #24]
 800ff36:	2300      	movs	r3, #0
 800ff38:	9308      	str	r3, [sp, #32]
 800ff3a:	9b07      	ldr	r3, [sp, #28]
 800ff3c:	2b09      	cmp	r3, #9
 800ff3e:	d868      	bhi.n	8010012 <_dtoa_r+0x2ba>
 800ff40:	2b05      	cmp	r3, #5
 800ff42:	bfc4      	itt	gt
 800ff44:	3b04      	subgt	r3, #4
 800ff46:	9307      	strgt	r3, [sp, #28]
 800ff48:	9b07      	ldr	r3, [sp, #28]
 800ff4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ff4e:	bfcc      	ite	gt
 800ff50:	2500      	movgt	r5, #0
 800ff52:	2501      	movle	r5, #1
 800ff54:	2b03      	cmp	r3, #3
 800ff56:	f200 8085 	bhi.w	8010064 <_dtoa_r+0x30c>
 800ff5a:	e8df f003 	tbb	[pc, r3]
 800ff5e:	3b2e      	.short	0x3b2e
 800ff60:	5839      	.short	0x5839
 800ff62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ff66:	441d      	add	r5, r3
 800ff68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff6c:	2b20      	cmp	r3, #32
 800ff6e:	bfc1      	itttt	gt
 800ff70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff74:	fa08 f803 	lslgt.w	r8, r8, r3
 800ff78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ff7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ff80:	bfd6      	itet	le
 800ff82:	f1c3 0320 	rsble	r3, r3, #32
 800ff86:	ea48 0003 	orrgt.w	r0, r8, r3
 800ff8a:	fa06 f003 	lslle.w	r0, r6, r3
 800ff8e:	f7f0 fab9 	bl	8000504 <__aeabi_ui2d>
 800ff92:	2201      	movs	r2, #1
 800ff94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ff98:	3d01      	subs	r5, #1
 800ff9a:	920e      	str	r2, [sp, #56]	; 0x38
 800ff9c:	e76f      	b.n	800fe7e <_dtoa_r+0x126>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e7b3      	b.n	800ff0a <_dtoa_r+0x1b2>
 800ffa2:	900c      	str	r0, [sp, #48]	; 0x30
 800ffa4:	e7b2      	b.n	800ff0c <_dtoa_r+0x1b4>
 800ffa6:	9b05      	ldr	r3, [sp, #20]
 800ffa8:	eba3 030b 	sub.w	r3, r3, fp
 800ffac:	9305      	str	r3, [sp, #20]
 800ffae:	f1cb 0300 	rsb	r3, fp, #0
 800ffb2:	9308      	str	r3, [sp, #32]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb8:	e7bf      	b.n	800ff3a <_dtoa_r+0x1e2>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ffbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	dc52      	bgt.n	801006a <_dtoa_r+0x312>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	9301      	str	r3, [sp, #4]
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	920a      	str	r2, [sp, #40]	; 0x28
 800ffce:	e00b      	b.n	800ffe8 <_dtoa_r+0x290>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e7f3      	b.n	800ffbc <_dtoa_r+0x264>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffda:	445b      	add	r3, fp
 800ffdc:	9301      	str	r3, [sp, #4]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	9304      	str	r3, [sp, #16]
 800ffe4:	bfb8      	it	lt
 800ffe6:	2301      	movlt	r3, #1
 800ffe8:	69e0      	ldr	r0, [r4, #28]
 800ffea:	2100      	movs	r1, #0
 800ffec:	2204      	movs	r2, #4
 800ffee:	f102 0614 	add.w	r6, r2, #20
 800fff2:	429e      	cmp	r6, r3
 800fff4:	d93d      	bls.n	8010072 <_dtoa_r+0x31a>
 800fff6:	6041      	str	r1, [r0, #4]
 800fff8:	4620      	mov	r0, r4
 800fffa:	f000 fceb 	bl	80109d4 <_Balloc>
 800fffe:	9000      	str	r0, [sp, #0]
 8010000:	2800      	cmp	r0, #0
 8010002:	d139      	bne.n	8010078 <_dtoa_r+0x320>
 8010004:	4b16      	ldr	r3, [pc, #88]	; (8010060 <_dtoa_r+0x308>)
 8010006:	4602      	mov	r2, r0
 8010008:	f240 11af 	movw	r1, #431	; 0x1af
 801000c:	e6bd      	b.n	800fd8a <_dtoa_r+0x32>
 801000e:	2301      	movs	r3, #1
 8010010:	e7e1      	b.n	800ffd6 <_dtoa_r+0x27e>
 8010012:	2501      	movs	r5, #1
 8010014:	2300      	movs	r3, #0
 8010016:	9307      	str	r3, [sp, #28]
 8010018:	9509      	str	r5, [sp, #36]	; 0x24
 801001a:	f04f 33ff 	mov.w	r3, #4294967295
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	9304      	str	r3, [sp, #16]
 8010022:	2200      	movs	r2, #0
 8010024:	2312      	movs	r3, #18
 8010026:	e7d1      	b.n	800ffcc <_dtoa_r+0x274>
 8010028:	636f4361 	.word	0x636f4361
 801002c:	3fd287a7 	.word	0x3fd287a7
 8010030:	8b60c8b3 	.word	0x8b60c8b3
 8010034:	3fc68a28 	.word	0x3fc68a28
 8010038:	509f79fb 	.word	0x509f79fb
 801003c:	3fd34413 	.word	0x3fd34413
 8010040:	080124cd 	.word	0x080124cd
 8010044:	080124e4 	.word	0x080124e4
 8010048:	7ff00000 	.word	0x7ff00000
 801004c:	080124c9 	.word	0x080124c9
 8010050:	080124c0 	.word	0x080124c0
 8010054:	0801249d 	.word	0x0801249d
 8010058:	3ff80000 	.word	0x3ff80000
 801005c:	080125d0 	.word	0x080125d0
 8010060:	0801253c 	.word	0x0801253c
 8010064:	2301      	movs	r3, #1
 8010066:	9309      	str	r3, [sp, #36]	; 0x24
 8010068:	e7d7      	b.n	801001a <_dtoa_r+0x2c2>
 801006a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	9304      	str	r3, [sp, #16]
 8010070:	e7ba      	b.n	800ffe8 <_dtoa_r+0x290>
 8010072:	3101      	adds	r1, #1
 8010074:	0052      	lsls	r2, r2, #1
 8010076:	e7ba      	b.n	800ffee <_dtoa_r+0x296>
 8010078:	69e3      	ldr	r3, [r4, #28]
 801007a:	9a00      	ldr	r2, [sp, #0]
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	9b04      	ldr	r3, [sp, #16]
 8010080:	2b0e      	cmp	r3, #14
 8010082:	f200 80a8 	bhi.w	80101d6 <_dtoa_r+0x47e>
 8010086:	2d00      	cmp	r5, #0
 8010088:	f000 80a5 	beq.w	80101d6 <_dtoa_r+0x47e>
 801008c:	f1bb 0f00 	cmp.w	fp, #0
 8010090:	dd38      	ble.n	8010104 <_dtoa_r+0x3ac>
 8010092:	4bc0      	ldr	r3, [pc, #768]	; (8010394 <_dtoa_r+0x63c>)
 8010094:	f00b 020f 	and.w	r2, fp, #15
 8010098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801009c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80100a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80100a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80100a8:	d019      	beq.n	80100de <_dtoa_r+0x386>
 80100aa:	4bbb      	ldr	r3, [pc, #748]	; (8010398 <_dtoa_r+0x640>)
 80100ac:	ec51 0b18 	vmov	r0, r1, d8
 80100b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100b4:	f7f0 fbca 	bl	800084c <__aeabi_ddiv>
 80100b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100bc:	f008 080f 	and.w	r8, r8, #15
 80100c0:	2503      	movs	r5, #3
 80100c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010398 <_dtoa_r+0x640>
 80100c6:	f1b8 0f00 	cmp.w	r8, #0
 80100ca:	d10a      	bne.n	80100e2 <_dtoa_r+0x38a>
 80100cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100d0:	4632      	mov	r2, r6
 80100d2:	463b      	mov	r3, r7
 80100d4:	f7f0 fbba 	bl	800084c <__aeabi_ddiv>
 80100d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100dc:	e02b      	b.n	8010136 <_dtoa_r+0x3de>
 80100de:	2502      	movs	r5, #2
 80100e0:	e7ef      	b.n	80100c2 <_dtoa_r+0x36a>
 80100e2:	f018 0f01 	tst.w	r8, #1
 80100e6:	d008      	beq.n	80100fa <_dtoa_r+0x3a2>
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80100f0:	f7f0 fa82 	bl	80005f8 <__aeabi_dmul>
 80100f4:	3501      	adds	r5, #1
 80100f6:	4606      	mov	r6, r0
 80100f8:	460f      	mov	r7, r1
 80100fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80100fe:	f109 0908 	add.w	r9, r9, #8
 8010102:	e7e0      	b.n	80100c6 <_dtoa_r+0x36e>
 8010104:	f000 809f 	beq.w	8010246 <_dtoa_r+0x4ee>
 8010108:	f1cb 0600 	rsb	r6, fp, #0
 801010c:	4ba1      	ldr	r3, [pc, #644]	; (8010394 <_dtoa_r+0x63c>)
 801010e:	4fa2      	ldr	r7, [pc, #648]	; (8010398 <_dtoa_r+0x640>)
 8010110:	f006 020f 	and.w	r2, r6, #15
 8010114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	ec51 0b18 	vmov	r0, r1, d8
 8010120:	f7f0 fa6a 	bl	80005f8 <__aeabi_dmul>
 8010124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010128:	1136      	asrs	r6, r6, #4
 801012a:	2300      	movs	r3, #0
 801012c:	2502      	movs	r5, #2
 801012e:	2e00      	cmp	r6, #0
 8010130:	d17e      	bne.n	8010230 <_dtoa_r+0x4d8>
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1d0      	bne.n	80100d8 <_dtoa_r+0x380>
 8010136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010138:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 8084 	beq.w	801024a <_dtoa_r+0x4f2>
 8010142:	4b96      	ldr	r3, [pc, #600]	; (801039c <_dtoa_r+0x644>)
 8010144:	2200      	movs	r2, #0
 8010146:	4640      	mov	r0, r8
 8010148:	4649      	mov	r1, r9
 801014a:	f7f0 fcc7 	bl	8000adc <__aeabi_dcmplt>
 801014e:	2800      	cmp	r0, #0
 8010150:	d07b      	beq.n	801024a <_dtoa_r+0x4f2>
 8010152:	9b04      	ldr	r3, [sp, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d078      	beq.n	801024a <_dtoa_r+0x4f2>
 8010158:	9b01      	ldr	r3, [sp, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	dd39      	ble.n	80101d2 <_dtoa_r+0x47a>
 801015e:	4b90      	ldr	r3, [pc, #576]	; (80103a0 <_dtoa_r+0x648>)
 8010160:	2200      	movs	r2, #0
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 fa47 	bl	80005f8 <__aeabi_dmul>
 801016a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801016e:	9e01      	ldr	r6, [sp, #4]
 8010170:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010174:	3501      	adds	r5, #1
 8010176:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801017a:	4628      	mov	r0, r5
 801017c:	f7f0 f9d2 	bl	8000524 <__aeabi_i2d>
 8010180:	4642      	mov	r2, r8
 8010182:	464b      	mov	r3, r9
 8010184:	f7f0 fa38 	bl	80005f8 <__aeabi_dmul>
 8010188:	4b86      	ldr	r3, [pc, #536]	; (80103a4 <_dtoa_r+0x64c>)
 801018a:	2200      	movs	r2, #0
 801018c:	f7f0 f87e 	bl	800028c <__adddf3>
 8010190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010198:	9303      	str	r3, [sp, #12]
 801019a:	2e00      	cmp	r6, #0
 801019c:	d158      	bne.n	8010250 <_dtoa_r+0x4f8>
 801019e:	4b82      	ldr	r3, [pc, #520]	; (80103a8 <_dtoa_r+0x650>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	f7f0 f86f 	bl	8000288 <__aeabi_dsub>
 80101aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ae:	4680      	mov	r8, r0
 80101b0:	4689      	mov	r9, r1
 80101b2:	f7f0 fcb1 	bl	8000b18 <__aeabi_dcmpgt>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	f040 8296 	bne.w	80106e8 <_dtoa_r+0x990>
 80101bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80101c0:	4640      	mov	r0, r8
 80101c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101c6:	4649      	mov	r1, r9
 80101c8:	f7f0 fc88 	bl	8000adc <__aeabi_dcmplt>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	f040 8289 	bne.w	80106e4 <_dtoa_r+0x98c>
 80101d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80101d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f2c0 814e 	blt.w	801047a <_dtoa_r+0x722>
 80101de:	f1bb 0f0e 	cmp.w	fp, #14
 80101e2:	f300 814a 	bgt.w	801047a <_dtoa_r+0x722>
 80101e6:	4b6b      	ldr	r3, [pc, #428]	; (8010394 <_dtoa_r+0x63c>)
 80101e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80101ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f280 80dc 	bge.w	80103b0 <_dtoa_r+0x658>
 80101f8:	9b04      	ldr	r3, [sp, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f300 80d8 	bgt.w	80103b0 <_dtoa_r+0x658>
 8010200:	f040 826f 	bne.w	80106e2 <_dtoa_r+0x98a>
 8010204:	4b68      	ldr	r3, [pc, #416]	; (80103a8 <_dtoa_r+0x650>)
 8010206:	2200      	movs	r2, #0
 8010208:	4640      	mov	r0, r8
 801020a:	4649      	mov	r1, r9
 801020c:	f7f0 f9f4 	bl	80005f8 <__aeabi_dmul>
 8010210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010214:	f7f0 fc76 	bl	8000b04 <__aeabi_dcmpge>
 8010218:	9e04      	ldr	r6, [sp, #16]
 801021a:	4637      	mov	r7, r6
 801021c:	2800      	cmp	r0, #0
 801021e:	f040 8245 	bne.w	80106ac <_dtoa_r+0x954>
 8010222:	9d00      	ldr	r5, [sp, #0]
 8010224:	2331      	movs	r3, #49	; 0x31
 8010226:	f805 3b01 	strb.w	r3, [r5], #1
 801022a:	f10b 0b01 	add.w	fp, fp, #1
 801022e:	e241      	b.n	80106b4 <_dtoa_r+0x95c>
 8010230:	07f2      	lsls	r2, r6, #31
 8010232:	d505      	bpl.n	8010240 <_dtoa_r+0x4e8>
 8010234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010238:	f7f0 f9de 	bl	80005f8 <__aeabi_dmul>
 801023c:	3501      	adds	r5, #1
 801023e:	2301      	movs	r3, #1
 8010240:	1076      	asrs	r6, r6, #1
 8010242:	3708      	adds	r7, #8
 8010244:	e773      	b.n	801012e <_dtoa_r+0x3d6>
 8010246:	2502      	movs	r5, #2
 8010248:	e775      	b.n	8010136 <_dtoa_r+0x3de>
 801024a:	9e04      	ldr	r6, [sp, #16]
 801024c:	465f      	mov	r7, fp
 801024e:	e792      	b.n	8010176 <_dtoa_r+0x41e>
 8010250:	9900      	ldr	r1, [sp, #0]
 8010252:	4b50      	ldr	r3, [pc, #320]	; (8010394 <_dtoa_r+0x63c>)
 8010254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010258:	4431      	add	r1, r6
 801025a:	9102      	str	r1, [sp, #8]
 801025c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801025e:	eeb0 9a47 	vmov.f32	s18, s14
 8010262:	eef0 9a67 	vmov.f32	s19, s15
 8010266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801026a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801026e:	2900      	cmp	r1, #0
 8010270:	d044      	beq.n	80102fc <_dtoa_r+0x5a4>
 8010272:	494e      	ldr	r1, [pc, #312]	; (80103ac <_dtoa_r+0x654>)
 8010274:	2000      	movs	r0, #0
 8010276:	f7f0 fae9 	bl	800084c <__aeabi_ddiv>
 801027a:	ec53 2b19 	vmov	r2, r3, d9
 801027e:	f7f0 f803 	bl	8000288 <__aeabi_dsub>
 8010282:	9d00      	ldr	r5, [sp, #0]
 8010284:	ec41 0b19 	vmov	d9, r0, r1
 8010288:	4649      	mov	r1, r9
 801028a:	4640      	mov	r0, r8
 801028c:	f7f0 fc64 	bl	8000b58 <__aeabi_d2iz>
 8010290:	4606      	mov	r6, r0
 8010292:	f7f0 f947 	bl	8000524 <__aeabi_i2d>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7ef fff3 	bl	8000288 <__aeabi_dsub>
 80102a2:	3630      	adds	r6, #48	; 0x30
 80102a4:	f805 6b01 	strb.w	r6, [r5], #1
 80102a8:	ec53 2b19 	vmov	r2, r3, d9
 80102ac:	4680      	mov	r8, r0
 80102ae:	4689      	mov	r9, r1
 80102b0:	f7f0 fc14 	bl	8000adc <__aeabi_dcmplt>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d164      	bne.n	8010382 <_dtoa_r+0x62a>
 80102b8:	4642      	mov	r2, r8
 80102ba:	464b      	mov	r3, r9
 80102bc:	4937      	ldr	r1, [pc, #220]	; (801039c <_dtoa_r+0x644>)
 80102be:	2000      	movs	r0, #0
 80102c0:	f7ef ffe2 	bl	8000288 <__aeabi_dsub>
 80102c4:	ec53 2b19 	vmov	r2, r3, d9
 80102c8:	f7f0 fc08 	bl	8000adc <__aeabi_dcmplt>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	f040 80b6 	bne.w	801043e <_dtoa_r+0x6e6>
 80102d2:	9b02      	ldr	r3, [sp, #8]
 80102d4:	429d      	cmp	r5, r3
 80102d6:	f43f af7c 	beq.w	80101d2 <_dtoa_r+0x47a>
 80102da:	4b31      	ldr	r3, [pc, #196]	; (80103a0 <_dtoa_r+0x648>)
 80102dc:	ec51 0b19 	vmov	r0, r1, d9
 80102e0:	2200      	movs	r2, #0
 80102e2:	f7f0 f989 	bl	80005f8 <__aeabi_dmul>
 80102e6:	4b2e      	ldr	r3, [pc, #184]	; (80103a0 <_dtoa_r+0x648>)
 80102e8:	ec41 0b19 	vmov	d9, r0, r1
 80102ec:	2200      	movs	r2, #0
 80102ee:	4640      	mov	r0, r8
 80102f0:	4649      	mov	r1, r9
 80102f2:	f7f0 f981 	bl	80005f8 <__aeabi_dmul>
 80102f6:	4680      	mov	r8, r0
 80102f8:	4689      	mov	r9, r1
 80102fa:	e7c5      	b.n	8010288 <_dtoa_r+0x530>
 80102fc:	ec51 0b17 	vmov	r0, r1, d7
 8010300:	f7f0 f97a 	bl	80005f8 <__aeabi_dmul>
 8010304:	9b02      	ldr	r3, [sp, #8]
 8010306:	9d00      	ldr	r5, [sp, #0]
 8010308:	930f      	str	r3, [sp, #60]	; 0x3c
 801030a:	ec41 0b19 	vmov	d9, r0, r1
 801030e:	4649      	mov	r1, r9
 8010310:	4640      	mov	r0, r8
 8010312:	f7f0 fc21 	bl	8000b58 <__aeabi_d2iz>
 8010316:	4606      	mov	r6, r0
 8010318:	f7f0 f904 	bl	8000524 <__aeabi_i2d>
 801031c:	3630      	adds	r6, #48	; 0x30
 801031e:	4602      	mov	r2, r0
 8010320:	460b      	mov	r3, r1
 8010322:	4640      	mov	r0, r8
 8010324:	4649      	mov	r1, r9
 8010326:	f7ef ffaf 	bl	8000288 <__aeabi_dsub>
 801032a:	f805 6b01 	strb.w	r6, [r5], #1
 801032e:	9b02      	ldr	r3, [sp, #8]
 8010330:	429d      	cmp	r5, r3
 8010332:	4680      	mov	r8, r0
 8010334:	4689      	mov	r9, r1
 8010336:	f04f 0200 	mov.w	r2, #0
 801033a:	d124      	bne.n	8010386 <_dtoa_r+0x62e>
 801033c:	4b1b      	ldr	r3, [pc, #108]	; (80103ac <_dtoa_r+0x654>)
 801033e:	ec51 0b19 	vmov	r0, r1, d9
 8010342:	f7ef ffa3 	bl	800028c <__adddf3>
 8010346:	4602      	mov	r2, r0
 8010348:	460b      	mov	r3, r1
 801034a:	4640      	mov	r0, r8
 801034c:	4649      	mov	r1, r9
 801034e:	f7f0 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8010352:	2800      	cmp	r0, #0
 8010354:	d173      	bne.n	801043e <_dtoa_r+0x6e6>
 8010356:	ec53 2b19 	vmov	r2, r3, d9
 801035a:	4914      	ldr	r1, [pc, #80]	; (80103ac <_dtoa_r+0x654>)
 801035c:	2000      	movs	r0, #0
 801035e:	f7ef ff93 	bl	8000288 <__aeabi_dsub>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	4640      	mov	r0, r8
 8010368:	4649      	mov	r1, r9
 801036a:	f7f0 fbb7 	bl	8000adc <__aeabi_dcmplt>
 801036e:	2800      	cmp	r0, #0
 8010370:	f43f af2f 	beq.w	80101d2 <_dtoa_r+0x47a>
 8010374:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010376:	1e6b      	subs	r3, r5, #1
 8010378:	930f      	str	r3, [sp, #60]	; 0x3c
 801037a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801037e:	2b30      	cmp	r3, #48	; 0x30
 8010380:	d0f8      	beq.n	8010374 <_dtoa_r+0x61c>
 8010382:	46bb      	mov	fp, r7
 8010384:	e04a      	b.n	801041c <_dtoa_r+0x6c4>
 8010386:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <_dtoa_r+0x648>)
 8010388:	f7f0 f936 	bl	80005f8 <__aeabi_dmul>
 801038c:	4680      	mov	r8, r0
 801038e:	4689      	mov	r9, r1
 8010390:	e7bd      	b.n	801030e <_dtoa_r+0x5b6>
 8010392:	bf00      	nop
 8010394:	080125d0 	.word	0x080125d0
 8010398:	080125a8 	.word	0x080125a8
 801039c:	3ff00000 	.word	0x3ff00000
 80103a0:	40240000 	.word	0x40240000
 80103a4:	401c0000 	.word	0x401c0000
 80103a8:	40140000 	.word	0x40140000
 80103ac:	3fe00000 	.word	0x3fe00000
 80103b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80103b4:	9d00      	ldr	r5, [sp, #0]
 80103b6:	4642      	mov	r2, r8
 80103b8:	464b      	mov	r3, r9
 80103ba:	4630      	mov	r0, r6
 80103bc:	4639      	mov	r1, r7
 80103be:	f7f0 fa45 	bl	800084c <__aeabi_ddiv>
 80103c2:	f7f0 fbc9 	bl	8000b58 <__aeabi_d2iz>
 80103c6:	9001      	str	r0, [sp, #4]
 80103c8:	f7f0 f8ac 	bl	8000524 <__aeabi_i2d>
 80103cc:	4642      	mov	r2, r8
 80103ce:	464b      	mov	r3, r9
 80103d0:	f7f0 f912 	bl	80005f8 <__aeabi_dmul>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	f7ef ff54 	bl	8000288 <__aeabi_dsub>
 80103e0:	9e01      	ldr	r6, [sp, #4]
 80103e2:	9f04      	ldr	r7, [sp, #16]
 80103e4:	3630      	adds	r6, #48	; 0x30
 80103e6:	f805 6b01 	strb.w	r6, [r5], #1
 80103ea:	9e00      	ldr	r6, [sp, #0]
 80103ec:	1bae      	subs	r6, r5, r6
 80103ee:	42b7      	cmp	r7, r6
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	d134      	bne.n	8010460 <_dtoa_r+0x708>
 80103f6:	f7ef ff49 	bl	800028c <__adddf3>
 80103fa:	4642      	mov	r2, r8
 80103fc:	464b      	mov	r3, r9
 80103fe:	4606      	mov	r6, r0
 8010400:	460f      	mov	r7, r1
 8010402:	f7f0 fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8010406:	b9c8      	cbnz	r0, 801043c <_dtoa_r+0x6e4>
 8010408:	4642      	mov	r2, r8
 801040a:	464b      	mov	r3, r9
 801040c:	4630      	mov	r0, r6
 801040e:	4639      	mov	r1, r7
 8010410:	f7f0 fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010414:	b110      	cbz	r0, 801041c <_dtoa_r+0x6c4>
 8010416:	9b01      	ldr	r3, [sp, #4]
 8010418:	07db      	lsls	r3, r3, #31
 801041a:	d40f      	bmi.n	801043c <_dtoa_r+0x6e4>
 801041c:	4651      	mov	r1, sl
 801041e:	4620      	mov	r0, r4
 8010420:	f000 fb18 	bl	8010a54 <_Bfree>
 8010424:	2300      	movs	r3, #0
 8010426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010428:	702b      	strb	r3, [r5, #0]
 801042a:	f10b 0301 	add.w	r3, fp, #1
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010432:	2b00      	cmp	r3, #0
 8010434:	f43f ace2 	beq.w	800fdfc <_dtoa_r+0xa4>
 8010438:	601d      	str	r5, [r3, #0]
 801043a:	e4df      	b.n	800fdfc <_dtoa_r+0xa4>
 801043c:	465f      	mov	r7, fp
 801043e:	462b      	mov	r3, r5
 8010440:	461d      	mov	r5, r3
 8010442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010446:	2a39      	cmp	r2, #57	; 0x39
 8010448:	d106      	bne.n	8010458 <_dtoa_r+0x700>
 801044a:	9a00      	ldr	r2, [sp, #0]
 801044c:	429a      	cmp	r2, r3
 801044e:	d1f7      	bne.n	8010440 <_dtoa_r+0x6e8>
 8010450:	9900      	ldr	r1, [sp, #0]
 8010452:	2230      	movs	r2, #48	; 0x30
 8010454:	3701      	adds	r7, #1
 8010456:	700a      	strb	r2, [r1, #0]
 8010458:	781a      	ldrb	r2, [r3, #0]
 801045a:	3201      	adds	r2, #1
 801045c:	701a      	strb	r2, [r3, #0]
 801045e:	e790      	b.n	8010382 <_dtoa_r+0x62a>
 8010460:	4ba3      	ldr	r3, [pc, #652]	; (80106f0 <_dtoa_r+0x998>)
 8010462:	2200      	movs	r2, #0
 8010464:	f7f0 f8c8 	bl	80005f8 <__aeabi_dmul>
 8010468:	2200      	movs	r2, #0
 801046a:	2300      	movs	r3, #0
 801046c:	4606      	mov	r6, r0
 801046e:	460f      	mov	r7, r1
 8010470:	f7f0 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010474:	2800      	cmp	r0, #0
 8010476:	d09e      	beq.n	80103b6 <_dtoa_r+0x65e>
 8010478:	e7d0      	b.n	801041c <_dtoa_r+0x6c4>
 801047a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801047c:	2a00      	cmp	r2, #0
 801047e:	f000 80ca 	beq.w	8010616 <_dtoa_r+0x8be>
 8010482:	9a07      	ldr	r2, [sp, #28]
 8010484:	2a01      	cmp	r2, #1
 8010486:	f300 80ad 	bgt.w	80105e4 <_dtoa_r+0x88c>
 801048a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801048c:	2a00      	cmp	r2, #0
 801048e:	f000 80a5 	beq.w	80105dc <_dtoa_r+0x884>
 8010492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010496:	9e08      	ldr	r6, [sp, #32]
 8010498:	9d05      	ldr	r5, [sp, #20]
 801049a:	9a05      	ldr	r2, [sp, #20]
 801049c:	441a      	add	r2, r3
 801049e:	9205      	str	r2, [sp, #20]
 80104a0:	9a06      	ldr	r2, [sp, #24]
 80104a2:	2101      	movs	r1, #1
 80104a4:	441a      	add	r2, r3
 80104a6:	4620      	mov	r0, r4
 80104a8:	9206      	str	r2, [sp, #24]
 80104aa:	f000 fb89 	bl	8010bc0 <__i2b>
 80104ae:	4607      	mov	r7, r0
 80104b0:	b165      	cbz	r5, 80104cc <_dtoa_r+0x774>
 80104b2:	9b06      	ldr	r3, [sp, #24]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dd09      	ble.n	80104cc <_dtoa_r+0x774>
 80104b8:	42ab      	cmp	r3, r5
 80104ba:	9a05      	ldr	r2, [sp, #20]
 80104bc:	bfa8      	it	ge
 80104be:	462b      	movge	r3, r5
 80104c0:	1ad2      	subs	r2, r2, r3
 80104c2:	9205      	str	r2, [sp, #20]
 80104c4:	9a06      	ldr	r2, [sp, #24]
 80104c6:	1aed      	subs	r5, r5, r3
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	9306      	str	r3, [sp, #24]
 80104cc:	9b08      	ldr	r3, [sp, #32]
 80104ce:	b1f3      	cbz	r3, 801050e <_dtoa_r+0x7b6>
 80104d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 80a3 	beq.w	801061e <_dtoa_r+0x8c6>
 80104d8:	2e00      	cmp	r6, #0
 80104da:	dd10      	ble.n	80104fe <_dtoa_r+0x7a6>
 80104dc:	4639      	mov	r1, r7
 80104de:	4632      	mov	r2, r6
 80104e0:	4620      	mov	r0, r4
 80104e2:	f000 fc2d 	bl	8010d40 <__pow5mult>
 80104e6:	4652      	mov	r2, sl
 80104e8:	4601      	mov	r1, r0
 80104ea:	4607      	mov	r7, r0
 80104ec:	4620      	mov	r0, r4
 80104ee:	f000 fb7d 	bl	8010bec <__multiply>
 80104f2:	4651      	mov	r1, sl
 80104f4:	4680      	mov	r8, r0
 80104f6:	4620      	mov	r0, r4
 80104f8:	f000 faac 	bl	8010a54 <_Bfree>
 80104fc:	46c2      	mov	sl, r8
 80104fe:	9b08      	ldr	r3, [sp, #32]
 8010500:	1b9a      	subs	r2, r3, r6
 8010502:	d004      	beq.n	801050e <_dtoa_r+0x7b6>
 8010504:	4651      	mov	r1, sl
 8010506:	4620      	mov	r0, r4
 8010508:	f000 fc1a 	bl	8010d40 <__pow5mult>
 801050c:	4682      	mov	sl, r0
 801050e:	2101      	movs	r1, #1
 8010510:	4620      	mov	r0, r4
 8010512:	f000 fb55 	bl	8010bc0 <__i2b>
 8010516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010518:	2b00      	cmp	r3, #0
 801051a:	4606      	mov	r6, r0
 801051c:	f340 8081 	ble.w	8010622 <_dtoa_r+0x8ca>
 8010520:	461a      	mov	r2, r3
 8010522:	4601      	mov	r1, r0
 8010524:	4620      	mov	r0, r4
 8010526:	f000 fc0b 	bl	8010d40 <__pow5mult>
 801052a:	9b07      	ldr	r3, [sp, #28]
 801052c:	2b01      	cmp	r3, #1
 801052e:	4606      	mov	r6, r0
 8010530:	dd7a      	ble.n	8010628 <_dtoa_r+0x8d0>
 8010532:	f04f 0800 	mov.w	r8, #0
 8010536:	6933      	ldr	r3, [r6, #16]
 8010538:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801053c:	6918      	ldr	r0, [r3, #16]
 801053e:	f000 faf1 	bl	8010b24 <__hi0bits>
 8010542:	f1c0 0020 	rsb	r0, r0, #32
 8010546:	9b06      	ldr	r3, [sp, #24]
 8010548:	4418      	add	r0, r3
 801054a:	f010 001f 	ands.w	r0, r0, #31
 801054e:	f000 8094 	beq.w	801067a <_dtoa_r+0x922>
 8010552:	f1c0 0320 	rsb	r3, r0, #32
 8010556:	2b04      	cmp	r3, #4
 8010558:	f340 8085 	ble.w	8010666 <_dtoa_r+0x90e>
 801055c:	9b05      	ldr	r3, [sp, #20]
 801055e:	f1c0 001c 	rsb	r0, r0, #28
 8010562:	4403      	add	r3, r0
 8010564:	9305      	str	r3, [sp, #20]
 8010566:	9b06      	ldr	r3, [sp, #24]
 8010568:	4403      	add	r3, r0
 801056a:	4405      	add	r5, r0
 801056c:	9306      	str	r3, [sp, #24]
 801056e:	9b05      	ldr	r3, [sp, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	dd05      	ble.n	8010580 <_dtoa_r+0x828>
 8010574:	4651      	mov	r1, sl
 8010576:	461a      	mov	r2, r3
 8010578:	4620      	mov	r0, r4
 801057a:	f000 fc3b 	bl	8010df4 <__lshift>
 801057e:	4682      	mov	sl, r0
 8010580:	9b06      	ldr	r3, [sp, #24]
 8010582:	2b00      	cmp	r3, #0
 8010584:	dd05      	ble.n	8010592 <_dtoa_r+0x83a>
 8010586:	4631      	mov	r1, r6
 8010588:	461a      	mov	r2, r3
 801058a:	4620      	mov	r0, r4
 801058c:	f000 fc32 	bl	8010df4 <__lshift>
 8010590:	4606      	mov	r6, r0
 8010592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010594:	2b00      	cmp	r3, #0
 8010596:	d072      	beq.n	801067e <_dtoa_r+0x926>
 8010598:	4631      	mov	r1, r6
 801059a:	4650      	mov	r0, sl
 801059c:	f000 fc96 	bl	8010ecc <__mcmp>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	da6c      	bge.n	801067e <_dtoa_r+0x926>
 80105a4:	2300      	movs	r3, #0
 80105a6:	4651      	mov	r1, sl
 80105a8:	220a      	movs	r2, #10
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 fa74 	bl	8010a98 <__multadd>
 80105b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80105b6:	4682      	mov	sl, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f000 81b0 	beq.w	801091e <_dtoa_r+0xbc6>
 80105be:	2300      	movs	r3, #0
 80105c0:	4639      	mov	r1, r7
 80105c2:	220a      	movs	r2, #10
 80105c4:	4620      	mov	r0, r4
 80105c6:	f000 fa67 	bl	8010a98 <__multadd>
 80105ca:	9b01      	ldr	r3, [sp, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	4607      	mov	r7, r0
 80105d0:	f300 8096 	bgt.w	8010700 <_dtoa_r+0x9a8>
 80105d4:	9b07      	ldr	r3, [sp, #28]
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	dc59      	bgt.n	801068e <_dtoa_r+0x936>
 80105da:	e091      	b.n	8010700 <_dtoa_r+0x9a8>
 80105dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105e2:	e758      	b.n	8010496 <_dtoa_r+0x73e>
 80105e4:	9b04      	ldr	r3, [sp, #16]
 80105e6:	1e5e      	subs	r6, r3, #1
 80105e8:	9b08      	ldr	r3, [sp, #32]
 80105ea:	42b3      	cmp	r3, r6
 80105ec:	bfbf      	itttt	lt
 80105ee:	9b08      	ldrlt	r3, [sp, #32]
 80105f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80105f2:	9608      	strlt	r6, [sp, #32]
 80105f4:	1af3      	sublt	r3, r6, r3
 80105f6:	bfb4      	ite	lt
 80105f8:	18d2      	addlt	r2, r2, r3
 80105fa:	1b9e      	subge	r6, r3, r6
 80105fc:	9b04      	ldr	r3, [sp, #16]
 80105fe:	bfbc      	itt	lt
 8010600:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010602:	2600      	movlt	r6, #0
 8010604:	2b00      	cmp	r3, #0
 8010606:	bfb7      	itett	lt
 8010608:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801060c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010610:	1a9d      	sublt	r5, r3, r2
 8010612:	2300      	movlt	r3, #0
 8010614:	e741      	b.n	801049a <_dtoa_r+0x742>
 8010616:	9e08      	ldr	r6, [sp, #32]
 8010618:	9d05      	ldr	r5, [sp, #20]
 801061a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801061c:	e748      	b.n	80104b0 <_dtoa_r+0x758>
 801061e:	9a08      	ldr	r2, [sp, #32]
 8010620:	e770      	b.n	8010504 <_dtoa_r+0x7ac>
 8010622:	9b07      	ldr	r3, [sp, #28]
 8010624:	2b01      	cmp	r3, #1
 8010626:	dc19      	bgt.n	801065c <_dtoa_r+0x904>
 8010628:	9b02      	ldr	r3, [sp, #8]
 801062a:	b9bb      	cbnz	r3, 801065c <_dtoa_r+0x904>
 801062c:	9b03      	ldr	r3, [sp, #12]
 801062e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010632:	b99b      	cbnz	r3, 801065c <_dtoa_r+0x904>
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801063a:	0d1b      	lsrs	r3, r3, #20
 801063c:	051b      	lsls	r3, r3, #20
 801063e:	b183      	cbz	r3, 8010662 <_dtoa_r+0x90a>
 8010640:	9b05      	ldr	r3, [sp, #20]
 8010642:	3301      	adds	r3, #1
 8010644:	9305      	str	r3, [sp, #20]
 8010646:	9b06      	ldr	r3, [sp, #24]
 8010648:	3301      	adds	r3, #1
 801064a:	9306      	str	r3, [sp, #24]
 801064c:	f04f 0801 	mov.w	r8, #1
 8010650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010652:	2b00      	cmp	r3, #0
 8010654:	f47f af6f 	bne.w	8010536 <_dtoa_r+0x7de>
 8010658:	2001      	movs	r0, #1
 801065a:	e774      	b.n	8010546 <_dtoa_r+0x7ee>
 801065c:	f04f 0800 	mov.w	r8, #0
 8010660:	e7f6      	b.n	8010650 <_dtoa_r+0x8f8>
 8010662:	4698      	mov	r8, r3
 8010664:	e7f4      	b.n	8010650 <_dtoa_r+0x8f8>
 8010666:	d082      	beq.n	801056e <_dtoa_r+0x816>
 8010668:	9a05      	ldr	r2, [sp, #20]
 801066a:	331c      	adds	r3, #28
 801066c:	441a      	add	r2, r3
 801066e:	9205      	str	r2, [sp, #20]
 8010670:	9a06      	ldr	r2, [sp, #24]
 8010672:	441a      	add	r2, r3
 8010674:	441d      	add	r5, r3
 8010676:	9206      	str	r2, [sp, #24]
 8010678:	e779      	b.n	801056e <_dtoa_r+0x816>
 801067a:	4603      	mov	r3, r0
 801067c:	e7f4      	b.n	8010668 <_dtoa_r+0x910>
 801067e:	9b04      	ldr	r3, [sp, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	dc37      	bgt.n	80106f4 <_dtoa_r+0x99c>
 8010684:	9b07      	ldr	r3, [sp, #28]
 8010686:	2b02      	cmp	r3, #2
 8010688:	dd34      	ble.n	80106f4 <_dtoa_r+0x99c>
 801068a:	9b04      	ldr	r3, [sp, #16]
 801068c:	9301      	str	r3, [sp, #4]
 801068e:	9b01      	ldr	r3, [sp, #4]
 8010690:	b963      	cbnz	r3, 80106ac <_dtoa_r+0x954>
 8010692:	4631      	mov	r1, r6
 8010694:	2205      	movs	r2, #5
 8010696:	4620      	mov	r0, r4
 8010698:	f000 f9fe 	bl	8010a98 <__multadd>
 801069c:	4601      	mov	r1, r0
 801069e:	4606      	mov	r6, r0
 80106a0:	4650      	mov	r0, sl
 80106a2:	f000 fc13 	bl	8010ecc <__mcmp>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	f73f adbb 	bgt.w	8010222 <_dtoa_r+0x4ca>
 80106ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ae:	9d00      	ldr	r5, [sp, #0]
 80106b0:	ea6f 0b03 	mvn.w	fp, r3
 80106b4:	f04f 0800 	mov.w	r8, #0
 80106b8:	4631      	mov	r1, r6
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 f9ca 	bl	8010a54 <_Bfree>
 80106c0:	2f00      	cmp	r7, #0
 80106c2:	f43f aeab 	beq.w	801041c <_dtoa_r+0x6c4>
 80106c6:	f1b8 0f00 	cmp.w	r8, #0
 80106ca:	d005      	beq.n	80106d8 <_dtoa_r+0x980>
 80106cc:	45b8      	cmp	r8, r7
 80106ce:	d003      	beq.n	80106d8 <_dtoa_r+0x980>
 80106d0:	4641      	mov	r1, r8
 80106d2:	4620      	mov	r0, r4
 80106d4:	f000 f9be 	bl	8010a54 <_Bfree>
 80106d8:	4639      	mov	r1, r7
 80106da:	4620      	mov	r0, r4
 80106dc:	f000 f9ba 	bl	8010a54 <_Bfree>
 80106e0:	e69c      	b.n	801041c <_dtoa_r+0x6c4>
 80106e2:	2600      	movs	r6, #0
 80106e4:	4637      	mov	r7, r6
 80106e6:	e7e1      	b.n	80106ac <_dtoa_r+0x954>
 80106e8:	46bb      	mov	fp, r7
 80106ea:	4637      	mov	r7, r6
 80106ec:	e599      	b.n	8010222 <_dtoa_r+0x4ca>
 80106ee:	bf00      	nop
 80106f0:	40240000 	.word	0x40240000
 80106f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 80c8 	beq.w	801088c <_dtoa_r+0xb34>
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	9301      	str	r3, [sp, #4]
 8010700:	2d00      	cmp	r5, #0
 8010702:	dd05      	ble.n	8010710 <_dtoa_r+0x9b8>
 8010704:	4639      	mov	r1, r7
 8010706:	462a      	mov	r2, r5
 8010708:	4620      	mov	r0, r4
 801070a:	f000 fb73 	bl	8010df4 <__lshift>
 801070e:	4607      	mov	r7, r0
 8010710:	f1b8 0f00 	cmp.w	r8, #0
 8010714:	d05b      	beq.n	80107ce <_dtoa_r+0xa76>
 8010716:	6879      	ldr	r1, [r7, #4]
 8010718:	4620      	mov	r0, r4
 801071a:	f000 f95b 	bl	80109d4 <_Balloc>
 801071e:	4605      	mov	r5, r0
 8010720:	b928      	cbnz	r0, 801072e <_dtoa_r+0x9d6>
 8010722:	4b83      	ldr	r3, [pc, #524]	; (8010930 <_dtoa_r+0xbd8>)
 8010724:	4602      	mov	r2, r0
 8010726:	f240 21ef 	movw	r1, #751	; 0x2ef
 801072a:	f7ff bb2e 	b.w	800fd8a <_dtoa_r+0x32>
 801072e:	693a      	ldr	r2, [r7, #16]
 8010730:	3202      	adds	r2, #2
 8010732:	0092      	lsls	r2, r2, #2
 8010734:	f107 010c 	add.w	r1, r7, #12
 8010738:	300c      	adds	r0, #12
 801073a:	f7ff fa77 	bl	800fc2c <memcpy>
 801073e:	2201      	movs	r2, #1
 8010740:	4629      	mov	r1, r5
 8010742:	4620      	mov	r0, r4
 8010744:	f000 fb56 	bl	8010df4 <__lshift>
 8010748:	9b00      	ldr	r3, [sp, #0]
 801074a:	3301      	adds	r3, #1
 801074c:	9304      	str	r3, [sp, #16]
 801074e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010752:	4413      	add	r3, r2
 8010754:	9308      	str	r3, [sp, #32]
 8010756:	9b02      	ldr	r3, [sp, #8]
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	46b8      	mov	r8, r7
 801075e:	9306      	str	r3, [sp, #24]
 8010760:	4607      	mov	r7, r0
 8010762:	9b04      	ldr	r3, [sp, #16]
 8010764:	4631      	mov	r1, r6
 8010766:	3b01      	subs	r3, #1
 8010768:	4650      	mov	r0, sl
 801076a:	9301      	str	r3, [sp, #4]
 801076c:	f7ff fa6c 	bl	800fc48 <quorem>
 8010770:	4641      	mov	r1, r8
 8010772:	9002      	str	r0, [sp, #8]
 8010774:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010778:	4650      	mov	r0, sl
 801077a:	f000 fba7 	bl	8010ecc <__mcmp>
 801077e:	463a      	mov	r2, r7
 8010780:	9005      	str	r0, [sp, #20]
 8010782:	4631      	mov	r1, r6
 8010784:	4620      	mov	r0, r4
 8010786:	f000 fbbd 	bl	8010f04 <__mdiff>
 801078a:	68c2      	ldr	r2, [r0, #12]
 801078c:	4605      	mov	r5, r0
 801078e:	bb02      	cbnz	r2, 80107d2 <_dtoa_r+0xa7a>
 8010790:	4601      	mov	r1, r0
 8010792:	4650      	mov	r0, sl
 8010794:	f000 fb9a 	bl	8010ecc <__mcmp>
 8010798:	4602      	mov	r2, r0
 801079a:	4629      	mov	r1, r5
 801079c:	4620      	mov	r0, r4
 801079e:	9209      	str	r2, [sp, #36]	; 0x24
 80107a0:	f000 f958 	bl	8010a54 <_Bfree>
 80107a4:	9b07      	ldr	r3, [sp, #28]
 80107a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107a8:	9d04      	ldr	r5, [sp, #16]
 80107aa:	ea43 0102 	orr.w	r1, r3, r2
 80107ae:	9b06      	ldr	r3, [sp, #24]
 80107b0:	4319      	orrs	r1, r3
 80107b2:	d110      	bne.n	80107d6 <_dtoa_r+0xa7e>
 80107b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80107b8:	d029      	beq.n	801080e <_dtoa_r+0xab6>
 80107ba:	9b05      	ldr	r3, [sp, #20]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dd02      	ble.n	80107c6 <_dtoa_r+0xa6e>
 80107c0:	9b02      	ldr	r3, [sp, #8]
 80107c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80107c6:	9b01      	ldr	r3, [sp, #4]
 80107c8:	f883 9000 	strb.w	r9, [r3]
 80107cc:	e774      	b.n	80106b8 <_dtoa_r+0x960>
 80107ce:	4638      	mov	r0, r7
 80107d0:	e7ba      	b.n	8010748 <_dtoa_r+0x9f0>
 80107d2:	2201      	movs	r2, #1
 80107d4:	e7e1      	b.n	801079a <_dtoa_r+0xa42>
 80107d6:	9b05      	ldr	r3, [sp, #20]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	db04      	blt.n	80107e6 <_dtoa_r+0xa8e>
 80107dc:	9907      	ldr	r1, [sp, #28]
 80107de:	430b      	orrs	r3, r1
 80107e0:	9906      	ldr	r1, [sp, #24]
 80107e2:	430b      	orrs	r3, r1
 80107e4:	d120      	bne.n	8010828 <_dtoa_r+0xad0>
 80107e6:	2a00      	cmp	r2, #0
 80107e8:	dded      	ble.n	80107c6 <_dtoa_r+0xa6e>
 80107ea:	4651      	mov	r1, sl
 80107ec:	2201      	movs	r2, #1
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 fb00 	bl	8010df4 <__lshift>
 80107f4:	4631      	mov	r1, r6
 80107f6:	4682      	mov	sl, r0
 80107f8:	f000 fb68 	bl	8010ecc <__mcmp>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	dc03      	bgt.n	8010808 <_dtoa_r+0xab0>
 8010800:	d1e1      	bne.n	80107c6 <_dtoa_r+0xa6e>
 8010802:	f019 0f01 	tst.w	r9, #1
 8010806:	d0de      	beq.n	80107c6 <_dtoa_r+0xa6e>
 8010808:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801080c:	d1d8      	bne.n	80107c0 <_dtoa_r+0xa68>
 801080e:	9a01      	ldr	r2, [sp, #4]
 8010810:	2339      	movs	r3, #57	; 0x39
 8010812:	7013      	strb	r3, [r2, #0]
 8010814:	462b      	mov	r3, r5
 8010816:	461d      	mov	r5, r3
 8010818:	3b01      	subs	r3, #1
 801081a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801081e:	2a39      	cmp	r2, #57	; 0x39
 8010820:	d06c      	beq.n	80108fc <_dtoa_r+0xba4>
 8010822:	3201      	adds	r2, #1
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	e747      	b.n	80106b8 <_dtoa_r+0x960>
 8010828:	2a00      	cmp	r2, #0
 801082a:	dd07      	ble.n	801083c <_dtoa_r+0xae4>
 801082c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010830:	d0ed      	beq.n	801080e <_dtoa_r+0xab6>
 8010832:	9a01      	ldr	r2, [sp, #4]
 8010834:	f109 0301 	add.w	r3, r9, #1
 8010838:	7013      	strb	r3, [r2, #0]
 801083a:	e73d      	b.n	80106b8 <_dtoa_r+0x960>
 801083c:	9b04      	ldr	r3, [sp, #16]
 801083e:	9a08      	ldr	r2, [sp, #32]
 8010840:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010844:	4293      	cmp	r3, r2
 8010846:	d043      	beq.n	80108d0 <_dtoa_r+0xb78>
 8010848:	4651      	mov	r1, sl
 801084a:	2300      	movs	r3, #0
 801084c:	220a      	movs	r2, #10
 801084e:	4620      	mov	r0, r4
 8010850:	f000 f922 	bl	8010a98 <__multadd>
 8010854:	45b8      	cmp	r8, r7
 8010856:	4682      	mov	sl, r0
 8010858:	f04f 0300 	mov.w	r3, #0
 801085c:	f04f 020a 	mov.w	r2, #10
 8010860:	4641      	mov	r1, r8
 8010862:	4620      	mov	r0, r4
 8010864:	d107      	bne.n	8010876 <_dtoa_r+0xb1e>
 8010866:	f000 f917 	bl	8010a98 <__multadd>
 801086a:	4680      	mov	r8, r0
 801086c:	4607      	mov	r7, r0
 801086e:	9b04      	ldr	r3, [sp, #16]
 8010870:	3301      	adds	r3, #1
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	e775      	b.n	8010762 <_dtoa_r+0xa0a>
 8010876:	f000 f90f 	bl	8010a98 <__multadd>
 801087a:	4639      	mov	r1, r7
 801087c:	4680      	mov	r8, r0
 801087e:	2300      	movs	r3, #0
 8010880:	220a      	movs	r2, #10
 8010882:	4620      	mov	r0, r4
 8010884:	f000 f908 	bl	8010a98 <__multadd>
 8010888:	4607      	mov	r7, r0
 801088a:	e7f0      	b.n	801086e <_dtoa_r+0xb16>
 801088c:	9b04      	ldr	r3, [sp, #16]
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	9d00      	ldr	r5, [sp, #0]
 8010892:	4631      	mov	r1, r6
 8010894:	4650      	mov	r0, sl
 8010896:	f7ff f9d7 	bl	800fc48 <quorem>
 801089a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801089e:	9b00      	ldr	r3, [sp, #0]
 80108a0:	f805 9b01 	strb.w	r9, [r5], #1
 80108a4:	1aea      	subs	r2, r5, r3
 80108a6:	9b01      	ldr	r3, [sp, #4]
 80108a8:	4293      	cmp	r3, r2
 80108aa:	dd07      	ble.n	80108bc <_dtoa_r+0xb64>
 80108ac:	4651      	mov	r1, sl
 80108ae:	2300      	movs	r3, #0
 80108b0:	220a      	movs	r2, #10
 80108b2:	4620      	mov	r0, r4
 80108b4:	f000 f8f0 	bl	8010a98 <__multadd>
 80108b8:	4682      	mov	sl, r0
 80108ba:	e7ea      	b.n	8010892 <_dtoa_r+0xb3a>
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	bfc8      	it	gt
 80108c2:	461d      	movgt	r5, r3
 80108c4:	9b00      	ldr	r3, [sp, #0]
 80108c6:	bfd8      	it	le
 80108c8:	2501      	movle	r5, #1
 80108ca:	441d      	add	r5, r3
 80108cc:	f04f 0800 	mov.w	r8, #0
 80108d0:	4651      	mov	r1, sl
 80108d2:	2201      	movs	r2, #1
 80108d4:	4620      	mov	r0, r4
 80108d6:	f000 fa8d 	bl	8010df4 <__lshift>
 80108da:	4631      	mov	r1, r6
 80108dc:	4682      	mov	sl, r0
 80108de:	f000 faf5 	bl	8010ecc <__mcmp>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	dc96      	bgt.n	8010814 <_dtoa_r+0xabc>
 80108e6:	d102      	bne.n	80108ee <_dtoa_r+0xb96>
 80108e8:	f019 0f01 	tst.w	r9, #1
 80108ec:	d192      	bne.n	8010814 <_dtoa_r+0xabc>
 80108ee:	462b      	mov	r3, r5
 80108f0:	461d      	mov	r5, r3
 80108f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108f6:	2a30      	cmp	r2, #48	; 0x30
 80108f8:	d0fa      	beq.n	80108f0 <_dtoa_r+0xb98>
 80108fa:	e6dd      	b.n	80106b8 <_dtoa_r+0x960>
 80108fc:	9a00      	ldr	r2, [sp, #0]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d189      	bne.n	8010816 <_dtoa_r+0xabe>
 8010902:	f10b 0b01 	add.w	fp, fp, #1
 8010906:	2331      	movs	r3, #49	; 0x31
 8010908:	e796      	b.n	8010838 <_dtoa_r+0xae0>
 801090a:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <_dtoa_r+0xbdc>)
 801090c:	f7ff ba99 	b.w	800fe42 <_dtoa_r+0xea>
 8010910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010912:	2b00      	cmp	r3, #0
 8010914:	f47f aa6d 	bne.w	800fdf2 <_dtoa_r+0x9a>
 8010918:	4b07      	ldr	r3, [pc, #28]	; (8010938 <_dtoa_r+0xbe0>)
 801091a:	f7ff ba92 	b.w	800fe42 <_dtoa_r+0xea>
 801091e:	9b01      	ldr	r3, [sp, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	dcb5      	bgt.n	8010890 <_dtoa_r+0xb38>
 8010924:	9b07      	ldr	r3, [sp, #28]
 8010926:	2b02      	cmp	r3, #2
 8010928:	f73f aeb1 	bgt.w	801068e <_dtoa_r+0x936>
 801092c:	e7b0      	b.n	8010890 <_dtoa_r+0xb38>
 801092e:	bf00      	nop
 8010930:	0801253c 	.word	0x0801253c
 8010934:	0801249c 	.word	0x0801249c
 8010938:	080124c0 	.word	0x080124c0

0801093c <_free_r>:
 801093c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801093e:	2900      	cmp	r1, #0
 8010940:	d044      	beq.n	80109cc <_free_r+0x90>
 8010942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010946:	9001      	str	r0, [sp, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	f1a1 0404 	sub.w	r4, r1, #4
 801094e:	bfb8      	it	lt
 8010950:	18e4      	addlt	r4, r4, r3
 8010952:	f7fe fb57 	bl	800f004 <__malloc_lock>
 8010956:	4a1e      	ldr	r2, [pc, #120]	; (80109d0 <_free_r+0x94>)
 8010958:	9801      	ldr	r0, [sp, #4]
 801095a:	6813      	ldr	r3, [r2, #0]
 801095c:	b933      	cbnz	r3, 801096c <_free_r+0x30>
 801095e:	6063      	str	r3, [r4, #4]
 8010960:	6014      	str	r4, [r2, #0]
 8010962:	b003      	add	sp, #12
 8010964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010968:	f7fe bb52 	b.w	800f010 <__malloc_unlock>
 801096c:	42a3      	cmp	r3, r4
 801096e:	d908      	bls.n	8010982 <_free_r+0x46>
 8010970:	6825      	ldr	r5, [r4, #0]
 8010972:	1961      	adds	r1, r4, r5
 8010974:	428b      	cmp	r3, r1
 8010976:	bf01      	itttt	eq
 8010978:	6819      	ldreq	r1, [r3, #0]
 801097a:	685b      	ldreq	r3, [r3, #4]
 801097c:	1949      	addeq	r1, r1, r5
 801097e:	6021      	streq	r1, [r4, #0]
 8010980:	e7ed      	b.n	801095e <_free_r+0x22>
 8010982:	461a      	mov	r2, r3
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	b10b      	cbz	r3, 801098c <_free_r+0x50>
 8010988:	42a3      	cmp	r3, r4
 801098a:	d9fa      	bls.n	8010982 <_free_r+0x46>
 801098c:	6811      	ldr	r1, [r2, #0]
 801098e:	1855      	adds	r5, r2, r1
 8010990:	42a5      	cmp	r5, r4
 8010992:	d10b      	bne.n	80109ac <_free_r+0x70>
 8010994:	6824      	ldr	r4, [r4, #0]
 8010996:	4421      	add	r1, r4
 8010998:	1854      	adds	r4, r2, r1
 801099a:	42a3      	cmp	r3, r4
 801099c:	6011      	str	r1, [r2, #0]
 801099e:	d1e0      	bne.n	8010962 <_free_r+0x26>
 80109a0:	681c      	ldr	r4, [r3, #0]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	6053      	str	r3, [r2, #4]
 80109a6:	440c      	add	r4, r1
 80109a8:	6014      	str	r4, [r2, #0]
 80109aa:	e7da      	b.n	8010962 <_free_r+0x26>
 80109ac:	d902      	bls.n	80109b4 <_free_r+0x78>
 80109ae:	230c      	movs	r3, #12
 80109b0:	6003      	str	r3, [r0, #0]
 80109b2:	e7d6      	b.n	8010962 <_free_r+0x26>
 80109b4:	6825      	ldr	r5, [r4, #0]
 80109b6:	1961      	adds	r1, r4, r5
 80109b8:	428b      	cmp	r3, r1
 80109ba:	bf04      	itt	eq
 80109bc:	6819      	ldreq	r1, [r3, #0]
 80109be:	685b      	ldreq	r3, [r3, #4]
 80109c0:	6063      	str	r3, [r4, #4]
 80109c2:	bf04      	itt	eq
 80109c4:	1949      	addeq	r1, r1, r5
 80109c6:	6021      	streq	r1, [r4, #0]
 80109c8:	6054      	str	r4, [r2, #4]
 80109ca:	e7ca      	b.n	8010962 <_free_r+0x26>
 80109cc:	b003      	add	sp, #12
 80109ce:	bd30      	pop	{r4, r5, pc}
 80109d0:	20001544 	.word	0x20001544

080109d4 <_Balloc>:
 80109d4:	b570      	push	{r4, r5, r6, lr}
 80109d6:	69c6      	ldr	r6, [r0, #28]
 80109d8:	4604      	mov	r4, r0
 80109da:	460d      	mov	r5, r1
 80109dc:	b976      	cbnz	r6, 80109fc <_Balloc+0x28>
 80109de:	2010      	movs	r0, #16
 80109e0:	f7fe fa60 	bl	800eea4 <malloc>
 80109e4:	4602      	mov	r2, r0
 80109e6:	61e0      	str	r0, [r4, #28]
 80109e8:	b920      	cbnz	r0, 80109f4 <_Balloc+0x20>
 80109ea:	4b18      	ldr	r3, [pc, #96]	; (8010a4c <_Balloc+0x78>)
 80109ec:	4818      	ldr	r0, [pc, #96]	; (8010a50 <_Balloc+0x7c>)
 80109ee:	216b      	movs	r1, #107	; 0x6b
 80109f0:	f000 fd8c 	bl	801150c <__assert_func>
 80109f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109f8:	6006      	str	r6, [r0, #0]
 80109fa:	60c6      	str	r6, [r0, #12]
 80109fc:	69e6      	ldr	r6, [r4, #28]
 80109fe:	68f3      	ldr	r3, [r6, #12]
 8010a00:	b183      	cbz	r3, 8010a24 <_Balloc+0x50>
 8010a02:	69e3      	ldr	r3, [r4, #28]
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a0a:	b9b8      	cbnz	r0, 8010a3c <_Balloc+0x68>
 8010a0c:	2101      	movs	r1, #1
 8010a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8010a12:	1d72      	adds	r2, r6, #5
 8010a14:	0092      	lsls	r2, r2, #2
 8010a16:	4620      	mov	r0, r4
 8010a18:	f000 fd96 	bl	8011548 <_calloc_r>
 8010a1c:	b160      	cbz	r0, 8010a38 <_Balloc+0x64>
 8010a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a22:	e00e      	b.n	8010a42 <_Balloc+0x6e>
 8010a24:	2221      	movs	r2, #33	; 0x21
 8010a26:	2104      	movs	r1, #4
 8010a28:	4620      	mov	r0, r4
 8010a2a:	f000 fd8d 	bl	8011548 <_calloc_r>
 8010a2e:	69e3      	ldr	r3, [r4, #28]
 8010a30:	60f0      	str	r0, [r6, #12]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1e4      	bne.n	8010a02 <_Balloc+0x2e>
 8010a38:	2000      	movs	r0, #0
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	6802      	ldr	r2, [r0, #0]
 8010a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a42:	2300      	movs	r3, #0
 8010a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a48:	e7f7      	b.n	8010a3a <_Balloc+0x66>
 8010a4a:	bf00      	nop
 8010a4c:	080124cd 	.word	0x080124cd
 8010a50:	0801254d 	.word	0x0801254d

08010a54 <_Bfree>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	69c6      	ldr	r6, [r0, #28]
 8010a58:	4605      	mov	r5, r0
 8010a5a:	460c      	mov	r4, r1
 8010a5c:	b976      	cbnz	r6, 8010a7c <_Bfree+0x28>
 8010a5e:	2010      	movs	r0, #16
 8010a60:	f7fe fa20 	bl	800eea4 <malloc>
 8010a64:	4602      	mov	r2, r0
 8010a66:	61e8      	str	r0, [r5, #28]
 8010a68:	b920      	cbnz	r0, 8010a74 <_Bfree+0x20>
 8010a6a:	4b09      	ldr	r3, [pc, #36]	; (8010a90 <_Bfree+0x3c>)
 8010a6c:	4809      	ldr	r0, [pc, #36]	; (8010a94 <_Bfree+0x40>)
 8010a6e:	218f      	movs	r1, #143	; 0x8f
 8010a70:	f000 fd4c 	bl	801150c <__assert_func>
 8010a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a78:	6006      	str	r6, [r0, #0]
 8010a7a:	60c6      	str	r6, [r0, #12]
 8010a7c:	b13c      	cbz	r4, 8010a8e <_Bfree+0x3a>
 8010a7e:	69eb      	ldr	r3, [r5, #28]
 8010a80:	6862      	ldr	r2, [r4, #4]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a88:	6021      	str	r1, [r4, #0]
 8010a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a8e:	bd70      	pop	{r4, r5, r6, pc}
 8010a90:	080124cd 	.word	0x080124cd
 8010a94:	0801254d 	.word	0x0801254d

08010a98 <__multadd>:
 8010a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a9c:	690d      	ldr	r5, [r1, #16]
 8010a9e:	4607      	mov	r7, r0
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	461e      	mov	r6, r3
 8010aa4:	f101 0c14 	add.w	ip, r1, #20
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8010aae:	b299      	uxth	r1, r3
 8010ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8010ab4:	0c1e      	lsrs	r6, r3, #16
 8010ab6:	0c0b      	lsrs	r3, r1, #16
 8010ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8010abc:	b289      	uxth	r1, r1
 8010abe:	3001      	adds	r0, #1
 8010ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ac4:	4285      	cmp	r5, r0
 8010ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8010aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ace:	dcec      	bgt.n	8010aaa <__multadd+0x12>
 8010ad0:	b30e      	cbz	r6, 8010b16 <__multadd+0x7e>
 8010ad2:	68a3      	ldr	r3, [r4, #8]
 8010ad4:	42ab      	cmp	r3, r5
 8010ad6:	dc19      	bgt.n	8010b0c <__multadd+0x74>
 8010ad8:	6861      	ldr	r1, [r4, #4]
 8010ada:	4638      	mov	r0, r7
 8010adc:	3101      	adds	r1, #1
 8010ade:	f7ff ff79 	bl	80109d4 <_Balloc>
 8010ae2:	4680      	mov	r8, r0
 8010ae4:	b928      	cbnz	r0, 8010af2 <__multadd+0x5a>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <__multadd+0x84>)
 8010aea:	480d      	ldr	r0, [pc, #52]	; (8010b20 <__multadd+0x88>)
 8010aec:	21ba      	movs	r1, #186	; 0xba
 8010aee:	f000 fd0d 	bl	801150c <__assert_func>
 8010af2:	6922      	ldr	r2, [r4, #16]
 8010af4:	3202      	adds	r2, #2
 8010af6:	f104 010c 	add.w	r1, r4, #12
 8010afa:	0092      	lsls	r2, r2, #2
 8010afc:	300c      	adds	r0, #12
 8010afe:	f7ff f895 	bl	800fc2c <memcpy>
 8010b02:	4621      	mov	r1, r4
 8010b04:	4638      	mov	r0, r7
 8010b06:	f7ff ffa5 	bl	8010a54 <_Bfree>
 8010b0a:	4644      	mov	r4, r8
 8010b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b10:	3501      	adds	r5, #1
 8010b12:	615e      	str	r6, [r3, #20]
 8010b14:	6125      	str	r5, [r4, #16]
 8010b16:	4620      	mov	r0, r4
 8010b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b1c:	0801253c 	.word	0x0801253c
 8010b20:	0801254d 	.word	0x0801254d

08010b24 <__hi0bits>:
 8010b24:	0c03      	lsrs	r3, r0, #16
 8010b26:	041b      	lsls	r3, r3, #16
 8010b28:	b9d3      	cbnz	r3, 8010b60 <__hi0bits+0x3c>
 8010b2a:	0400      	lsls	r0, r0, #16
 8010b2c:	2310      	movs	r3, #16
 8010b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b32:	bf04      	itt	eq
 8010b34:	0200      	lsleq	r0, r0, #8
 8010b36:	3308      	addeq	r3, #8
 8010b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b3c:	bf04      	itt	eq
 8010b3e:	0100      	lsleq	r0, r0, #4
 8010b40:	3304      	addeq	r3, #4
 8010b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b46:	bf04      	itt	eq
 8010b48:	0080      	lsleq	r0, r0, #2
 8010b4a:	3302      	addeq	r3, #2
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	db05      	blt.n	8010b5c <__hi0bits+0x38>
 8010b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b54:	f103 0301 	add.w	r3, r3, #1
 8010b58:	bf08      	it	eq
 8010b5a:	2320      	moveq	r3, #32
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	4770      	bx	lr
 8010b60:	2300      	movs	r3, #0
 8010b62:	e7e4      	b.n	8010b2e <__hi0bits+0xa>

08010b64 <__lo0bits>:
 8010b64:	6803      	ldr	r3, [r0, #0]
 8010b66:	f013 0207 	ands.w	r2, r3, #7
 8010b6a:	d00c      	beq.n	8010b86 <__lo0bits+0x22>
 8010b6c:	07d9      	lsls	r1, r3, #31
 8010b6e:	d422      	bmi.n	8010bb6 <__lo0bits+0x52>
 8010b70:	079a      	lsls	r2, r3, #30
 8010b72:	bf49      	itett	mi
 8010b74:	085b      	lsrmi	r3, r3, #1
 8010b76:	089b      	lsrpl	r3, r3, #2
 8010b78:	6003      	strmi	r3, [r0, #0]
 8010b7a:	2201      	movmi	r2, #1
 8010b7c:	bf5c      	itt	pl
 8010b7e:	6003      	strpl	r3, [r0, #0]
 8010b80:	2202      	movpl	r2, #2
 8010b82:	4610      	mov	r0, r2
 8010b84:	4770      	bx	lr
 8010b86:	b299      	uxth	r1, r3
 8010b88:	b909      	cbnz	r1, 8010b8e <__lo0bits+0x2a>
 8010b8a:	0c1b      	lsrs	r3, r3, #16
 8010b8c:	2210      	movs	r2, #16
 8010b8e:	b2d9      	uxtb	r1, r3
 8010b90:	b909      	cbnz	r1, 8010b96 <__lo0bits+0x32>
 8010b92:	3208      	adds	r2, #8
 8010b94:	0a1b      	lsrs	r3, r3, #8
 8010b96:	0719      	lsls	r1, r3, #28
 8010b98:	bf04      	itt	eq
 8010b9a:	091b      	lsreq	r3, r3, #4
 8010b9c:	3204      	addeq	r2, #4
 8010b9e:	0799      	lsls	r1, r3, #30
 8010ba0:	bf04      	itt	eq
 8010ba2:	089b      	lsreq	r3, r3, #2
 8010ba4:	3202      	addeq	r2, #2
 8010ba6:	07d9      	lsls	r1, r3, #31
 8010ba8:	d403      	bmi.n	8010bb2 <__lo0bits+0x4e>
 8010baa:	085b      	lsrs	r3, r3, #1
 8010bac:	f102 0201 	add.w	r2, r2, #1
 8010bb0:	d003      	beq.n	8010bba <__lo0bits+0x56>
 8010bb2:	6003      	str	r3, [r0, #0]
 8010bb4:	e7e5      	b.n	8010b82 <__lo0bits+0x1e>
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	e7e3      	b.n	8010b82 <__lo0bits+0x1e>
 8010bba:	2220      	movs	r2, #32
 8010bbc:	e7e1      	b.n	8010b82 <__lo0bits+0x1e>
	...

08010bc0 <__i2b>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	460c      	mov	r4, r1
 8010bc4:	2101      	movs	r1, #1
 8010bc6:	f7ff ff05 	bl	80109d4 <_Balloc>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	b928      	cbnz	r0, 8010bda <__i2b+0x1a>
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <__i2b+0x24>)
 8010bd0:	4805      	ldr	r0, [pc, #20]	; (8010be8 <__i2b+0x28>)
 8010bd2:	f240 1145 	movw	r1, #325	; 0x145
 8010bd6:	f000 fc99 	bl	801150c <__assert_func>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	6144      	str	r4, [r0, #20]
 8010bde:	6103      	str	r3, [r0, #16]
 8010be0:	bd10      	pop	{r4, pc}
 8010be2:	bf00      	nop
 8010be4:	0801253c 	.word	0x0801253c
 8010be8:	0801254d 	.word	0x0801254d

08010bec <__multiply>:
 8010bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf0:	4691      	mov	r9, r2
 8010bf2:	690a      	ldr	r2, [r1, #16]
 8010bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	bfb8      	it	lt
 8010bfc:	460b      	movlt	r3, r1
 8010bfe:	460c      	mov	r4, r1
 8010c00:	bfbc      	itt	lt
 8010c02:	464c      	movlt	r4, r9
 8010c04:	4699      	movlt	r9, r3
 8010c06:	6927      	ldr	r7, [r4, #16]
 8010c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c0c:	68a3      	ldr	r3, [r4, #8]
 8010c0e:	6861      	ldr	r1, [r4, #4]
 8010c10:	eb07 060a 	add.w	r6, r7, sl
 8010c14:	42b3      	cmp	r3, r6
 8010c16:	b085      	sub	sp, #20
 8010c18:	bfb8      	it	lt
 8010c1a:	3101      	addlt	r1, #1
 8010c1c:	f7ff feda 	bl	80109d4 <_Balloc>
 8010c20:	b930      	cbnz	r0, 8010c30 <__multiply+0x44>
 8010c22:	4602      	mov	r2, r0
 8010c24:	4b44      	ldr	r3, [pc, #272]	; (8010d38 <__multiply+0x14c>)
 8010c26:	4845      	ldr	r0, [pc, #276]	; (8010d3c <__multiply+0x150>)
 8010c28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010c2c:	f000 fc6e 	bl	801150c <__assert_func>
 8010c30:	f100 0514 	add.w	r5, r0, #20
 8010c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c38:	462b      	mov	r3, r5
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4543      	cmp	r3, r8
 8010c3e:	d321      	bcc.n	8010c84 <__multiply+0x98>
 8010c40:	f104 0314 	add.w	r3, r4, #20
 8010c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010c48:	f109 0314 	add.w	r3, r9, #20
 8010c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010c50:	9202      	str	r2, [sp, #8]
 8010c52:	1b3a      	subs	r2, r7, r4
 8010c54:	3a15      	subs	r2, #21
 8010c56:	f022 0203 	bic.w	r2, r2, #3
 8010c5a:	3204      	adds	r2, #4
 8010c5c:	f104 0115 	add.w	r1, r4, #21
 8010c60:	428f      	cmp	r7, r1
 8010c62:	bf38      	it	cc
 8010c64:	2204      	movcc	r2, #4
 8010c66:	9201      	str	r2, [sp, #4]
 8010c68:	9a02      	ldr	r2, [sp, #8]
 8010c6a:	9303      	str	r3, [sp, #12]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d80c      	bhi.n	8010c8a <__multiply+0x9e>
 8010c70:	2e00      	cmp	r6, #0
 8010c72:	dd03      	ble.n	8010c7c <__multiply+0x90>
 8010c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d05b      	beq.n	8010d34 <__multiply+0x148>
 8010c7c:	6106      	str	r6, [r0, #16]
 8010c7e:	b005      	add	sp, #20
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	f843 2b04 	str.w	r2, [r3], #4
 8010c88:	e7d8      	b.n	8010c3c <__multiply+0x50>
 8010c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c8e:	f1ba 0f00 	cmp.w	sl, #0
 8010c92:	d024      	beq.n	8010cde <__multiply+0xf2>
 8010c94:	f104 0e14 	add.w	lr, r4, #20
 8010c98:	46a9      	mov	r9, r5
 8010c9a:	f04f 0c00 	mov.w	ip, #0
 8010c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8010ca6:	fa1f fb82 	uxth.w	fp, r2
 8010caa:	b289      	uxth	r1, r1
 8010cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8010cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8010cb8:	4461      	add	r1, ip
 8010cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8010cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010cc6:	b289      	uxth	r1, r1
 8010cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ccc:	4577      	cmp	r7, lr
 8010cce:	f849 1b04 	str.w	r1, [r9], #4
 8010cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cd6:	d8e2      	bhi.n	8010c9e <__multiply+0xb2>
 8010cd8:	9a01      	ldr	r2, [sp, #4]
 8010cda:	f845 c002 	str.w	ip, [r5, r2]
 8010cde:	9a03      	ldr	r2, [sp, #12]
 8010ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	f1b9 0f00 	cmp.w	r9, #0
 8010cea:	d021      	beq.n	8010d30 <__multiply+0x144>
 8010cec:	6829      	ldr	r1, [r5, #0]
 8010cee:	f104 0c14 	add.w	ip, r4, #20
 8010cf2:	46ae      	mov	lr, r5
 8010cf4:	f04f 0a00 	mov.w	sl, #0
 8010cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8010cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d00:	fb09 220b 	mla	r2, r9, fp, r2
 8010d04:	4452      	add	r2, sl
 8010d06:	b289      	uxth	r1, r1
 8010d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8010d10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d18:	f8be 1000 	ldrh.w	r1, [lr]
 8010d1c:	fb09 110a 	mla	r1, r9, sl, r1
 8010d20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010d24:	4567      	cmp	r7, ip
 8010d26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d2a:	d8e5      	bhi.n	8010cf8 <__multiply+0x10c>
 8010d2c:	9a01      	ldr	r2, [sp, #4]
 8010d2e:	50a9      	str	r1, [r5, r2]
 8010d30:	3504      	adds	r5, #4
 8010d32:	e799      	b.n	8010c68 <__multiply+0x7c>
 8010d34:	3e01      	subs	r6, #1
 8010d36:	e79b      	b.n	8010c70 <__multiply+0x84>
 8010d38:	0801253c 	.word	0x0801253c
 8010d3c:	0801254d 	.word	0x0801254d

08010d40 <__pow5mult>:
 8010d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d44:	4615      	mov	r5, r2
 8010d46:	f012 0203 	ands.w	r2, r2, #3
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460f      	mov	r7, r1
 8010d4e:	d007      	beq.n	8010d60 <__pow5mult+0x20>
 8010d50:	4c25      	ldr	r4, [pc, #148]	; (8010de8 <__pow5mult+0xa8>)
 8010d52:	3a01      	subs	r2, #1
 8010d54:	2300      	movs	r3, #0
 8010d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d5a:	f7ff fe9d 	bl	8010a98 <__multadd>
 8010d5e:	4607      	mov	r7, r0
 8010d60:	10ad      	asrs	r5, r5, #2
 8010d62:	d03d      	beq.n	8010de0 <__pow5mult+0xa0>
 8010d64:	69f4      	ldr	r4, [r6, #28]
 8010d66:	b97c      	cbnz	r4, 8010d88 <__pow5mult+0x48>
 8010d68:	2010      	movs	r0, #16
 8010d6a:	f7fe f89b 	bl	800eea4 <malloc>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	61f0      	str	r0, [r6, #28]
 8010d72:	b928      	cbnz	r0, 8010d80 <__pow5mult+0x40>
 8010d74:	4b1d      	ldr	r3, [pc, #116]	; (8010dec <__pow5mult+0xac>)
 8010d76:	481e      	ldr	r0, [pc, #120]	; (8010df0 <__pow5mult+0xb0>)
 8010d78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010d7c:	f000 fbc6 	bl	801150c <__assert_func>
 8010d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d84:	6004      	str	r4, [r0, #0]
 8010d86:	60c4      	str	r4, [r0, #12]
 8010d88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d90:	b94c      	cbnz	r4, 8010da6 <__pow5mult+0x66>
 8010d92:	f240 2171 	movw	r1, #625	; 0x271
 8010d96:	4630      	mov	r0, r6
 8010d98:	f7ff ff12 	bl	8010bc0 <__i2b>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010da2:	4604      	mov	r4, r0
 8010da4:	6003      	str	r3, [r0, #0]
 8010da6:	f04f 0900 	mov.w	r9, #0
 8010daa:	07eb      	lsls	r3, r5, #31
 8010dac:	d50a      	bpl.n	8010dc4 <__pow5mult+0x84>
 8010dae:	4639      	mov	r1, r7
 8010db0:	4622      	mov	r2, r4
 8010db2:	4630      	mov	r0, r6
 8010db4:	f7ff ff1a 	bl	8010bec <__multiply>
 8010db8:	4639      	mov	r1, r7
 8010dba:	4680      	mov	r8, r0
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f7ff fe49 	bl	8010a54 <_Bfree>
 8010dc2:	4647      	mov	r7, r8
 8010dc4:	106d      	asrs	r5, r5, #1
 8010dc6:	d00b      	beq.n	8010de0 <__pow5mult+0xa0>
 8010dc8:	6820      	ldr	r0, [r4, #0]
 8010dca:	b938      	cbnz	r0, 8010ddc <__pow5mult+0x9c>
 8010dcc:	4622      	mov	r2, r4
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f7ff ff0b 	bl	8010bec <__multiply>
 8010dd6:	6020      	str	r0, [r4, #0]
 8010dd8:	f8c0 9000 	str.w	r9, [r0]
 8010ddc:	4604      	mov	r4, r0
 8010dde:	e7e4      	b.n	8010daa <__pow5mult+0x6a>
 8010de0:	4638      	mov	r0, r7
 8010de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010de6:	bf00      	nop
 8010de8:	08012698 	.word	0x08012698
 8010dec:	080124cd 	.word	0x080124cd
 8010df0:	0801254d 	.word	0x0801254d

08010df4 <__lshift>:
 8010df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df8:	460c      	mov	r4, r1
 8010dfa:	6849      	ldr	r1, [r1, #4]
 8010dfc:	6923      	ldr	r3, [r4, #16]
 8010dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e02:	68a3      	ldr	r3, [r4, #8]
 8010e04:	4607      	mov	r7, r0
 8010e06:	4691      	mov	r9, r2
 8010e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e0c:	f108 0601 	add.w	r6, r8, #1
 8010e10:	42b3      	cmp	r3, r6
 8010e12:	db0b      	blt.n	8010e2c <__lshift+0x38>
 8010e14:	4638      	mov	r0, r7
 8010e16:	f7ff fddd 	bl	80109d4 <_Balloc>
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	b948      	cbnz	r0, 8010e32 <__lshift+0x3e>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	4b28      	ldr	r3, [pc, #160]	; (8010ec4 <__lshift+0xd0>)
 8010e22:	4829      	ldr	r0, [pc, #164]	; (8010ec8 <__lshift+0xd4>)
 8010e24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010e28:	f000 fb70 	bl	801150c <__assert_func>
 8010e2c:	3101      	adds	r1, #1
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	e7ee      	b.n	8010e10 <__lshift+0x1c>
 8010e32:	2300      	movs	r3, #0
 8010e34:	f100 0114 	add.w	r1, r0, #20
 8010e38:	f100 0210 	add.w	r2, r0, #16
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	4553      	cmp	r3, sl
 8010e40:	db33      	blt.n	8010eaa <__lshift+0xb6>
 8010e42:	6920      	ldr	r0, [r4, #16]
 8010e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e48:	f104 0314 	add.w	r3, r4, #20
 8010e4c:	f019 091f 	ands.w	r9, r9, #31
 8010e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e58:	d02b      	beq.n	8010eb2 <__lshift+0xbe>
 8010e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010e5e:	468a      	mov	sl, r1
 8010e60:	2200      	movs	r2, #0
 8010e62:	6818      	ldr	r0, [r3, #0]
 8010e64:	fa00 f009 	lsl.w	r0, r0, r9
 8010e68:	4310      	orrs	r0, r2
 8010e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8010e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e72:	459c      	cmp	ip, r3
 8010e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e78:	d8f3      	bhi.n	8010e62 <__lshift+0x6e>
 8010e7a:	ebac 0304 	sub.w	r3, ip, r4
 8010e7e:	3b15      	subs	r3, #21
 8010e80:	f023 0303 	bic.w	r3, r3, #3
 8010e84:	3304      	adds	r3, #4
 8010e86:	f104 0015 	add.w	r0, r4, #21
 8010e8a:	4584      	cmp	ip, r0
 8010e8c:	bf38      	it	cc
 8010e8e:	2304      	movcc	r3, #4
 8010e90:	50ca      	str	r2, [r1, r3]
 8010e92:	b10a      	cbz	r2, 8010e98 <__lshift+0xa4>
 8010e94:	f108 0602 	add.w	r6, r8, #2
 8010e98:	3e01      	subs	r6, #1
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	612e      	str	r6, [r5, #16]
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	f7ff fdd8 	bl	8010a54 <_Bfree>
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eae:	3301      	adds	r3, #1
 8010eb0:	e7c5      	b.n	8010e3e <__lshift+0x4a>
 8010eb2:	3904      	subs	r1, #4
 8010eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ebc:	459c      	cmp	ip, r3
 8010ebe:	d8f9      	bhi.n	8010eb4 <__lshift+0xc0>
 8010ec0:	e7ea      	b.n	8010e98 <__lshift+0xa4>
 8010ec2:	bf00      	nop
 8010ec4:	0801253c 	.word	0x0801253c
 8010ec8:	0801254d 	.word	0x0801254d

08010ecc <__mcmp>:
 8010ecc:	b530      	push	{r4, r5, lr}
 8010ece:	6902      	ldr	r2, [r0, #16]
 8010ed0:	690c      	ldr	r4, [r1, #16]
 8010ed2:	1b12      	subs	r2, r2, r4
 8010ed4:	d10e      	bne.n	8010ef4 <__mcmp+0x28>
 8010ed6:	f100 0314 	add.w	r3, r0, #20
 8010eda:	3114      	adds	r1, #20
 8010edc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010ee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010eec:	42a5      	cmp	r5, r4
 8010eee:	d003      	beq.n	8010ef8 <__mcmp+0x2c>
 8010ef0:	d305      	bcc.n	8010efe <__mcmp+0x32>
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	bd30      	pop	{r4, r5, pc}
 8010ef8:	4283      	cmp	r3, r0
 8010efa:	d3f3      	bcc.n	8010ee4 <__mcmp+0x18>
 8010efc:	e7fa      	b.n	8010ef4 <__mcmp+0x28>
 8010efe:	f04f 32ff 	mov.w	r2, #4294967295
 8010f02:	e7f7      	b.n	8010ef4 <__mcmp+0x28>

08010f04 <__mdiff>:
 8010f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f08:	460c      	mov	r4, r1
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4620      	mov	r0, r4
 8010f10:	4690      	mov	r8, r2
 8010f12:	f7ff ffdb 	bl	8010ecc <__mcmp>
 8010f16:	1e05      	subs	r5, r0, #0
 8010f18:	d110      	bne.n	8010f3c <__mdiff+0x38>
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f7ff fd59 	bl	80109d4 <_Balloc>
 8010f22:	b930      	cbnz	r0, 8010f32 <__mdiff+0x2e>
 8010f24:	4b3a      	ldr	r3, [pc, #232]	; (8011010 <__mdiff+0x10c>)
 8010f26:	4602      	mov	r2, r0
 8010f28:	f240 2137 	movw	r1, #567	; 0x237
 8010f2c:	4839      	ldr	r0, [pc, #228]	; (8011014 <__mdiff+0x110>)
 8010f2e:	f000 faed 	bl	801150c <__assert_func>
 8010f32:	2301      	movs	r3, #1
 8010f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3c:	bfa4      	itt	ge
 8010f3e:	4643      	movge	r3, r8
 8010f40:	46a0      	movge	r8, r4
 8010f42:	4630      	mov	r0, r6
 8010f44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f48:	bfa6      	itte	ge
 8010f4a:	461c      	movge	r4, r3
 8010f4c:	2500      	movge	r5, #0
 8010f4e:	2501      	movlt	r5, #1
 8010f50:	f7ff fd40 	bl	80109d4 <_Balloc>
 8010f54:	b920      	cbnz	r0, 8010f60 <__mdiff+0x5c>
 8010f56:	4b2e      	ldr	r3, [pc, #184]	; (8011010 <__mdiff+0x10c>)
 8010f58:	4602      	mov	r2, r0
 8010f5a:	f240 2145 	movw	r1, #581	; 0x245
 8010f5e:	e7e5      	b.n	8010f2c <__mdiff+0x28>
 8010f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010f64:	6926      	ldr	r6, [r4, #16]
 8010f66:	60c5      	str	r5, [r0, #12]
 8010f68:	f104 0914 	add.w	r9, r4, #20
 8010f6c:	f108 0514 	add.w	r5, r8, #20
 8010f70:	f100 0e14 	add.w	lr, r0, #20
 8010f74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010f78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010f7c:	f108 0210 	add.w	r2, r8, #16
 8010f80:	46f2      	mov	sl, lr
 8010f82:	2100      	movs	r1, #0
 8010f84:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f8c:	fa11 f88b 	uxtah	r8, r1, fp
 8010f90:	b299      	uxth	r1, r3
 8010f92:	0c1b      	lsrs	r3, r3, #16
 8010f94:	eba8 0801 	sub.w	r8, r8, r1
 8010f98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010fa0:	fa1f f888 	uxth.w	r8, r8
 8010fa4:	1419      	asrs	r1, r3, #16
 8010fa6:	454e      	cmp	r6, r9
 8010fa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010fac:	f84a 3b04 	str.w	r3, [sl], #4
 8010fb0:	d8e8      	bhi.n	8010f84 <__mdiff+0x80>
 8010fb2:	1b33      	subs	r3, r6, r4
 8010fb4:	3b15      	subs	r3, #21
 8010fb6:	f023 0303 	bic.w	r3, r3, #3
 8010fba:	3304      	adds	r3, #4
 8010fbc:	3415      	adds	r4, #21
 8010fbe:	42a6      	cmp	r6, r4
 8010fc0:	bf38      	it	cc
 8010fc2:	2304      	movcc	r3, #4
 8010fc4:	441d      	add	r5, r3
 8010fc6:	4473      	add	r3, lr
 8010fc8:	469e      	mov	lr, r3
 8010fca:	462e      	mov	r6, r5
 8010fcc:	4566      	cmp	r6, ip
 8010fce:	d30e      	bcc.n	8010fee <__mdiff+0xea>
 8010fd0:	f10c 0203 	add.w	r2, ip, #3
 8010fd4:	1b52      	subs	r2, r2, r5
 8010fd6:	f022 0203 	bic.w	r2, r2, #3
 8010fda:	3d03      	subs	r5, #3
 8010fdc:	45ac      	cmp	ip, r5
 8010fde:	bf38      	it	cc
 8010fe0:	2200      	movcc	r2, #0
 8010fe2:	4413      	add	r3, r2
 8010fe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010fe8:	b17a      	cbz	r2, 801100a <__mdiff+0x106>
 8010fea:	6107      	str	r7, [r0, #16]
 8010fec:	e7a4      	b.n	8010f38 <__mdiff+0x34>
 8010fee:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ff2:	fa11 f288 	uxtah	r2, r1, r8
 8010ff6:	1414      	asrs	r4, r2, #16
 8010ff8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010ffc:	b292      	uxth	r2, r2
 8010ffe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011002:	f84e 2b04 	str.w	r2, [lr], #4
 8011006:	1421      	asrs	r1, r4, #16
 8011008:	e7e0      	b.n	8010fcc <__mdiff+0xc8>
 801100a:	3f01      	subs	r7, #1
 801100c:	e7ea      	b.n	8010fe4 <__mdiff+0xe0>
 801100e:	bf00      	nop
 8011010:	0801253c 	.word	0x0801253c
 8011014:	0801254d 	.word	0x0801254d

08011018 <__d2b>:
 8011018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801101c:	460f      	mov	r7, r1
 801101e:	2101      	movs	r1, #1
 8011020:	ec59 8b10 	vmov	r8, r9, d0
 8011024:	4616      	mov	r6, r2
 8011026:	f7ff fcd5 	bl	80109d4 <_Balloc>
 801102a:	4604      	mov	r4, r0
 801102c:	b930      	cbnz	r0, 801103c <__d2b+0x24>
 801102e:	4602      	mov	r2, r0
 8011030:	4b24      	ldr	r3, [pc, #144]	; (80110c4 <__d2b+0xac>)
 8011032:	4825      	ldr	r0, [pc, #148]	; (80110c8 <__d2b+0xb0>)
 8011034:	f240 310f 	movw	r1, #783	; 0x30f
 8011038:	f000 fa68 	bl	801150c <__assert_func>
 801103c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011044:	bb2d      	cbnz	r5, 8011092 <__d2b+0x7a>
 8011046:	9301      	str	r3, [sp, #4]
 8011048:	f1b8 0300 	subs.w	r3, r8, #0
 801104c:	d026      	beq.n	801109c <__d2b+0x84>
 801104e:	4668      	mov	r0, sp
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	f7ff fd87 	bl	8010b64 <__lo0bits>
 8011056:	e9dd 1200 	ldrd	r1, r2, [sp]
 801105a:	b1e8      	cbz	r0, 8011098 <__d2b+0x80>
 801105c:	f1c0 0320 	rsb	r3, r0, #32
 8011060:	fa02 f303 	lsl.w	r3, r2, r3
 8011064:	430b      	orrs	r3, r1
 8011066:	40c2      	lsrs	r2, r0
 8011068:	6163      	str	r3, [r4, #20]
 801106a:	9201      	str	r2, [sp, #4]
 801106c:	9b01      	ldr	r3, [sp, #4]
 801106e:	61a3      	str	r3, [r4, #24]
 8011070:	2b00      	cmp	r3, #0
 8011072:	bf14      	ite	ne
 8011074:	2202      	movne	r2, #2
 8011076:	2201      	moveq	r2, #1
 8011078:	6122      	str	r2, [r4, #16]
 801107a:	b1bd      	cbz	r5, 80110ac <__d2b+0x94>
 801107c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011080:	4405      	add	r5, r0
 8011082:	603d      	str	r5, [r7, #0]
 8011084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011088:	6030      	str	r0, [r6, #0]
 801108a:	4620      	mov	r0, r4
 801108c:	b003      	add	sp, #12
 801108e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011096:	e7d6      	b.n	8011046 <__d2b+0x2e>
 8011098:	6161      	str	r1, [r4, #20]
 801109a:	e7e7      	b.n	801106c <__d2b+0x54>
 801109c:	a801      	add	r0, sp, #4
 801109e:	f7ff fd61 	bl	8010b64 <__lo0bits>
 80110a2:	9b01      	ldr	r3, [sp, #4]
 80110a4:	6163      	str	r3, [r4, #20]
 80110a6:	3020      	adds	r0, #32
 80110a8:	2201      	movs	r2, #1
 80110aa:	e7e5      	b.n	8011078 <__d2b+0x60>
 80110ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80110b4:	6038      	str	r0, [r7, #0]
 80110b6:	6918      	ldr	r0, [r3, #16]
 80110b8:	f7ff fd34 	bl	8010b24 <__hi0bits>
 80110bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80110c0:	e7e2      	b.n	8011088 <__d2b+0x70>
 80110c2:	bf00      	nop
 80110c4:	0801253c 	.word	0x0801253c
 80110c8:	0801254d 	.word	0x0801254d

080110cc <__ssputs_r>:
 80110cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d0:	688e      	ldr	r6, [r1, #8]
 80110d2:	461f      	mov	r7, r3
 80110d4:	42be      	cmp	r6, r7
 80110d6:	680b      	ldr	r3, [r1, #0]
 80110d8:	4682      	mov	sl, r0
 80110da:	460c      	mov	r4, r1
 80110dc:	4690      	mov	r8, r2
 80110de:	d82c      	bhi.n	801113a <__ssputs_r+0x6e>
 80110e0:	898a      	ldrh	r2, [r1, #12]
 80110e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110e6:	d026      	beq.n	8011136 <__ssputs_r+0x6a>
 80110e8:	6965      	ldr	r5, [r4, #20]
 80110ea:	6909      	ldr	r1, [r1, #16]
 80110ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110f0:	eba3 0901 	sub.w	r9, r3, r1
 80110f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110f8:	1c7b      	adds	r3, r7, #1
 80110fa:	444b      	add	r3, r9
 80110fc:	106d      	asrs	r5, r5, #1
 80110fe:	429d      	cmp	r5, r3
 8011100:	bf38      	it	cc
 8011102:	461d      	movcc	r5, r3
 8011104:	0553      	lsls	r3, r2, #21
 8011106:	d527      	bpl.n	8011158 <__ssputs_r+0x8c>
 8011108:	4629      	mov	r1, r5
 801110a:	f7fd fefb 	bl	800ef04 <_malloc_r>
 801110e:	4606      	mov	r6, r0
 8011110:	b360      	cbz	r0, 801116c <__ssputs_r+0xa0>
 8011112:	6921      	ldr	r1, [r4, #16]
 8011114:	464a      	mov	r2, r9
 8011116:	f7fe fd89 	bl	800fc2c <memcpy>
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011124:	81a3      	strh	r3, [r4, #12]
 8011126:	6126      	str	r6, [r4, #16]
 8011128:	6165      	str	r5, [r4, #20]
 801112a:	444e      	add	r6, r9
 801112c:	eba5 0509 	sub.w	r5, r5, r9
 8011130:	6026      	str	r6, [r4, #0]
 8011132:	60a5      	str	r5, [r4, #8]
 8011134:	463e      	mov	r6, r7
 8011136:	42be      	cmp	r6, r7
 8011138:	d900      	bls.n	801113c <__ssputs_r+0x70>
 801113a:	463e      	mov	r6, r7
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	4632      	mov	r2, r6
 8011140:	4641      	mov	r1, r8
 8011142:	f000 f9c9 	bl	80114d8 <memmove>
 8011146:	68a3      	ldr	r3, [r4, #8]
 8011148:	1b9b      	subs	r3, r3, r6
 801114a:	60a3      	str	r3, [r4, #8]
 801114c:	6823      	ldr	r3, [r4, #0]
 801114e:	4433      	add	r3, r6
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	2000      	movs	r0, #0
 8011154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011158:	462a      	mov	r2, r5
 801115a:	f000 fa1d 	bl	8011598 <_realloc_r>
 801115e:	4606      	mov	r6, r0
 8011160:	2800      	cmp	r0, #0
 8011162:	d1e0      	bne.n	8011126 <__ssputs_r+0x5a>
 8011164:	6921      	ldr	r1, [r4, #16]
 8011166:	4650      	mov	r0, sl
 8011168:	f7ff fbe8 	bl	801093c <_free_r>
 801116c:	230c      	movs	r3, #12
 801116e:	f8ca 3000 	str.w	r3, [sl]
 8011172:	89a3      	ldrh	r3, [r4, #12]
 8011174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011178:	81a3      	strh	r3, [r4, #12]
 801117a:	f04f 30ff 	mov.w	r0, #4294967295
 801117e:	e7e9      	b.n	8011154 <__ssputs_r+0x88>

08011180 <_svfiprintf_r>:
 8011180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011184:	4698      	mov	r8, r3
 8011186:	898b      	ldrh	r3, [r1, #12]
 8011188:	061b      	lsls	r3, r3, #24
 801118a:	b09d      	sub	sp, #116	; 0x74
 801118c:	4607      	mov	r7, r0
 801118e:	460d      	mov	r5, r1
 8011190:	4614      	mov	r4, r2
 8011192:	d50e      	bpl.n	80111b2 <_svfiprintf_r+0x32>
 8011194:	690b      	ldr	r3, [r1, #16]
 8011196:	b963      	cbnz	r3, 80111b2 <_svfiprintf_r+0x32>
 8011198:	2140      	movs	r1, #64	; 0x40
 801119a:	f7fd feb3 	bl	800ef04 <_malloc_r>
 801119e:	6028      	str	r0, [r5, #0]
 80111a0:	6128      	str	r0, [r5, #16]
 80111a2:	b920      	cbnz	r0, 80111ae <_svfiprintf_r+0x2e>
 80111a4:	230c      	movs	r3, #12
 80111a6:	603b      	str	r3, [r7, #0]
 80111a8:	f04f 30ff 	mov.w	r0, #4294967295
 80111ac:	e0d0      	b.n	8011350 <_svfiprintf_r+0x1d0>
 80111ae:	2340      	movs	r3, #64	; 0x40
 80111b0:	616b      	str	r3, [r5, #20]
 80111b2:	2300      	movs	r3, #0
 80111b4:	9309      	str	r3, [sp, #36]	; 0x24
 80111b6:	2320      	movs	r3, #32
 80111b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80111c0:	2330      	movs	r3, #48	; 0x30
 80111c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011368 <_svfiprintf_r+0x1e8>
 80111c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111ca:	f04f 0901 	mov.w	r9, #1
 80111ce:	4623      	mov	r3, r4
 80111d0:	469a      	mov	sl, r3
 80111d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111d6:	b10a      	cbz	r2, 80111dc <_svfiprintf_r+0x5c>
 80111d8:	2a25      	cmp	r2, #37	; 0x25
 80111da:	d1f9      	bne.n	80111d0 <_svfiprintf_r+0x50>
 80111dc:	ebba 0b04 	subs.w	fp, sl, r4
 80111e0:	d00b      	beq.n	80111fa <_svfiprintf_r+0x7a>
 80111e2:	465b      	mov	r3, fp
 80111e4:	4622      	mov	r2, r4
 80111e6:	4629      	mov	r1, r5
 80111e8:	4638      	mov	r0, r7
 80111ea:	f7ff ff6f 	bl	80110cc <__ssputs_r>
 80111ee:	3001      	adds	r0, #1
 80111f0:	f000 80a9 	beq.w	8011346 <_svfiprintf_r+0x1c6>
 80111f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111f6:	445a      	add	r2, fp
 80111f8:	9209      	str	r2, [sp, #36]	; 0x24
 80111fa:	f89a 3000 	ldrb.w	r3, [sl]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f000 80a1 	beq.w	8011346 <_svfiprintf_r+0x1c6>
 8011204:	2300      	movs	r3, #0
 8011206:	f04f 32ff 	mov.w	r2, #4294967295
 801120a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801120e:	f10a 0a01 	add.w	sl, sl, #1
 8011212:	9304      	str	r3, [sp, #16]
 8011214:	9307      	str	r3, [sp, #28]
 8011216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801121a:	931a      	str	r3, [sp, #104]	; 0x68
 801121c:	4654      	mov	r4, sl
 801121e:	2205      	movs	r2, #5
 8011220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011224:	4850      	ldr	r0, [pc, #320]	; (8011368 <_svfiprintf_r+0x1e8>)
 8011226:	f7ee ffd3 	bl	80001d0 <memchr>
 801122a:	9a04      	ldr	r2, [sp, #16]
 801122c:	b9d8      	cbnz	r0, 8011266 <_svfiprintf_r+0xe6>
 801122e:	06d0      	lsls	r0, r2, #27
 8011230:	bf44      	itt	mi
 8011232:	2320      	movmi	r3, #32
 8011234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011238:	0711      	lsls	r1, r2, #28
 801123a:	bf44      	itt	mi
 801123c:	232b      	movmi	r3, #43	; 0x2b
 801123e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011242:	f89a 3000 	ldrb.w	r3, [sl]
 8011246:	2b2a      	cmp	r3, #42	; 0x2a
 8011248:	d015      	beq.n	8011276 <_svfiprintf_r+0xf6>
 801124a:	9a07      	ldr	r2, [sp, #28]
 801124c:	4654      	mov	r4, sl
 801124e:	2000      	movs	r0, #0
 8011250:	f04f 0c0a 	mov.w	ip, #10
 8011254:	4621      	mov	r1, r4
 8011256:	f811 3b01 	ldrb.w	r3, [r1], #1
 801125a:	3b30      	subs	r3, #48	; 0x30
 801125c:	2b09      	cmp	r3, #9
 801125e:	d94d      	bls.n	80112fc <_svfiprintf_r+0x17c>
 8011260:	b1b0      	cbz	r0, 8011290 <_svfiprintf_r+0x110>
 8011262:	9207      	str	r2, [sp, #28]
 8011264:	e014      	b.n	8011290 <_svfiprintf_r+0x110>
 8011266:	eba0 0308 	sub.w	r3, r0, r8
 801126a:	fa09 f303 	lsl.w	r3, r9, r3
 801126e:	4313      	orrs	r3, r2
 8011270:	9304      	str	r3, [sp, #16]
 8011272:	46a2      	mov	sl, r4
 8011274:	e7d2      	b.n	801121c <_svfiprintf_r+0x9c>
 8011276:	9b03      	ldr	r3, [sp, #12]
 8011278:	1d19      	adds	r1, r3, #4
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	9103      	str	r1, [sp, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	bfbb      	ittet	lt
 8011282:	425b      	neglt	r3, r3
 8011284:	f042 0202 	orrlt.w	r2, r2, #2
 8011288:	9307      	strge	r3, [sp, #28]
 801128a:	9307      	strlt	r3, [sp, #28]
 801128c:	bfb8      	it	lt
 801128e:	9204      	strlt	r2, [sp, #16]
 8011290:	7823      	ldrb	r3, [r4, #0]
 8011292:	2b2e      	cmp	r3, #46	; 0x2e
 8011294:	d10c      	bne.n	80112b0 <_svfiprintf_r+0x130>
 8011296:	7863      	ldrb	r3, [r4, #1]
 8011298:	2b2a      	cmp	r3, #42	; 0x2a
 801129a:	d134      	bne.n	8011306 <_svfiprintf_r+0x186>
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	1d1a      	adds	r2, r3, #4
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	9203      	str	r2, [sp, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	bfb8      	it	lt
 80112a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80112ac:	3402      	adds	r4, #2
 80112ae:	9305      	str	r3, [sp, #20]
 80112b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011378 <_svfiprintf_r+0x1f8>
 80112b4:	7821      	ldrb	r1, [r4, #0]
 80112b6:	2203      	movs	r2, #3
 80112b8:	4650      	mov	r0, sl
 80112ba:	f7ee ff89 	bl	80001d0 <memchr>
 80112be:	b138      	cbz	r0, 80112d0 <_svfiprintf_r+0x150>
 80112c0:	9b04      	ldr	r3, [sp, #16]
 80112c2:	eba0 000a 	sub.w	r0, r0, sl
 80112c6:	2240      	movs	r2, #64	; 0x40
 80112c8:	4082      	lsls	r2, r0
 80112ca:	4313      	orrs	r3, r2
 80112cc:	3401      	adds	r4, #1
 80112ce:	9304      	str	r3, [sp, #16]
 80112d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d4:	4825      	ldr	r0, [pc, #148]	; (801136c <_svfiprintf_r+0x1ec>)
 80112d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112da:	2206      	movs	r2, #6
 80112dc:	f7ee ff78 	bl	80001d0 <memchr>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d038      	beq.n	8011356 <_svfiprintf_r+0x1d6>
 80112e4:	4b22      	ldr	r3, [pc, #136]	; (8011370 <_svfiprintf_r+0x1f0>)
 80112e6:	bb1b      	cbnz	r3, 8011330 <_svfiprintf_r+0x1b0>
 80112e8:	9b03      	ldr	r3, [sp, #12]
 80112ea:	3307      	adds	r3, #7
 80112ec:	f023 0307 	bic.w	r3, r3, #7
 80112f0:	3308      	adds	r3, #8
 80112f2:	9303      	str	r3, [sp, #12]
 80112f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f6:	4433      	add	r3, r6
 80112f8:	9309      	str	r3, [sp, #36]	; 0x24
 80112fa:	e768      	b.n	80111ce <_svfiprintf_r+0x4e>
 80112fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011300:	460c      	mov	r4, r1
 8011302:	2001      	movs	r0, #1
 8011304:	e7a6      	b.n	8011254 <_svfiprintf_r+0xd4>
 8011306:	2300      	movs	r3, #0
 8011308:	3401      	adds	r4, #1
 801130a:	9305      	str	r3, [sp, #20]
 801130c:	4619      	mov	r1, r3
 801130e:	f04f 0c0a 	mov.w	ip, #10
 8011312:	4620      	mov	r0, r4
 8011314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011318:	3a30      	subs	r2, #48	; 0x30
 801131a:	2a09      	cmp	r2, #9
 801131c:	d903      	bls.n	8011326 <_svfiprintf_r+0x1a6>
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0c6      	beq.n	80112b0 <_svfiprintf_r+0x130>
 8011322:	9105      	str	r1, [sp, #20]
 8011324:	e7c4      	b.n	80112b0 <_svfiprintf_r+0x130>
 8011326:	fb0c 2101 	mla	r1, ip, r1, r2
 801132a:	4604      	mov	r4, r0
 801132c:	2301      	movs	r3, #1
 801132e:	e7f0      	b.n	8011312 <_svfiprintf_r+0x192>
 8011330:	ab03      	add	r3, sp, #12
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	462a      	mov	r2, r5
 8011336:	4b0f      	ldr	r3, [pc, #60]	; (8011374 <_svfiprintf_r+0x1f4>)
 8011338:	a904      	add	r1, sp, #16
 801133a:	4638      	mov	r0, r7
 801133c:	f7fd ff0e 	bl	800f15c <_printf_float>
 8011340:	1c42      	adds	r2, r0, #1
 8011342:	4606      	mov	r6, r0
 8011344:	d1d6      	bne.n	80112f4 <_svfiprintf_r+0x174>
 8011346:	89ab      	ldrh	r3, [r5, #12]
 8011348:	065b      	lsls	r3, r3, #25
 801134a:	f53f af2d 	bmi.w	80111a8 <_svfiprintf_r+0x28>
 801134e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011350:	b01d      	add	sp, #116	; 0x74
 8011352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011356:	ab03      	add	r3, sp, #12
 8011358:	9300      	str	r3, [sp, #0]
 801135a:	462a      	mov	r2, r5
 801135c:	4b05      	ldr	r3, [pc, #20]	; (8011374 <_svfiprintf_r+0x1f4>)
 801135e:	a904      	add	r1, sp, #16
 8011360:	4638      	mov	r0, r7
 8011362:	f7fe f99f 	bl	800f6a4 <_printf_i>
 8011366:	e7eb      	b.n	8011340 <_svfiprintf_r+0x1c0>
 8011368:	080126a4 	.word	0x080126a4
 801136c:	080126ae 	.word	0x080126ae
 8011370:	0800f15d 	.word	0x0800f15d
 8011374:	080110cd 	.word	0x080110cd
 8011378:	080126aa 	.word	0x080126aa

0801137c <__sflush_r>:
 801137c:	898a      	ldrh	r2, [r1, #12]
 801137e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011382:	4605      	mov	r5, r0
 8011384:	0710      	lsls	r0, r2, #28
 8011386:	460c      	mov	r4, r1
 8011388:	d458      	bmi.n	801143c <__sflush_r+0xc0>
 801138a:	684b      	ldr	r3, [r1, #4]
 801138c:	2b00      	cmp	r3, #0
 801138e:	dc05      	bgt.n	801139c <__sflush_r+0x20>
 8011390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011392:	2b00      	cmp	r3, #0
 8011394:	dc02      	bgt.n	801139c <__sflush_r+0x20>
 8011396:	2000      	movs	r0, #0
 8011398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801139e:	2e00      	cmp	r6, #0
 80113a0:	d0f9      	beq.n	8011396 <__sflush_r+0x1a>
 80113a2:	2300      	movs	r3, #0
 80113a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113a8:	682f      	ldr	r7, [r5, #0]
 80113aa:	6a21      	ldr	r1, [r4, #32]
 80113ac:	602b      	str	r3, [r5, #0]
 80113ae:	d032      	beq.n	8011416 <__sflush_r+0x9a>
 80113b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	075a      	lsls	r2, r3, #29
 80113b6:	d505      	bpl.n	80113c4 <__sflush_r+0x48>
 80113b8:	6863      	ldr	r3, [r4, #4]
 80113ba:	1ac0      	subs	r0, r0, r3
 80113bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113be:	b10b      	cbz	r3, 80113c4 <__sflush_r+0x48>
 80113c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113c2:	1ac0      	subs	r0, r0, r3
 80113c4:	2300      	movs	r3, #0
 80113c6:	4602      	mov	r2, r0
 80113c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113ca:	6a21      	ldr	r1, [r4, #32]
 80113cc:	4628      	mov	r0, r5
 80113ce:	47b0      	blx	r6
 80113d0:	1c43      	adds	r3, r0, #1
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	d106      	bne.n	80113e4 <__sflush_r+0x68>
 80113d6:	6829      	ldr	r1, [r5, #0]
 80113d8:	291d      	cmp	r1, #29
 80113da:	d82b      	bhi.n	8011434 <__sflush_r+0xb8>
 80113dc:	4a29      	ldr	r2, [pc, #164]	; (8011484 <__sflush_r+0x108>)
 80113de:	410a      	asrs	r2, r1
 80113e0:	07d6      	lsls	r6, r2, #31
 80113e2:	d427      	bmi.n	8011434 <__sflush_r+0xb8>
 80113e4:	2200      	movs	r2, #0
 80113e6:	6062      	str	r2, [r4, #4]
 80113e8:	04d9      	lsls	r1, r3, #19
 80113ea:	6922      	ldr	r2, [r4, #16]
 80113ec:	6022      	str	r2, [r4, #0]
 80113ee:	d504      	bpl.n	80113fa <__sflush_r+0x7e>
 80113f0:	1c42      	adds	r2, r0, #1
 80113f2:	d101      	bne.n	80113f8 <__sflush_r+0x7c>
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	b903      	cbnz	r3, 80113fa <__sflush_r+0x7e>
 80113f8:	6560      	str	r0, [r4, #84]	; 0x54
 80113fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113fc:	602f      	str	r7, [r5, #0]
 80113fe:	2900      	cmp	r1, #0
 8011400:	d0c9      	beq.n	8011396 <__sflush_r+0x1a>
 8011402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011406:	4299      	cmp	r1, r3
 8011408:	d002      	beq.n	8011410 <__sflush_r+0x94>
 801140a:	4628      	mov	r0, r5
 801140c:	f7ff fa96 	bl	801093c <_free_r>
 8011410:	2000      	movs	r0, #0
 8011412:	6360      	str	r0, [r4, #52]	; 0x34
 8011414:	e7c0      	b.n	8011398 <__sflush_r+0x1c>
 8011416:	2301      	movs	r3, #1
 8011418:	4628      	mov	r0, r5
 801141a:	47b0      	blx	r6
 801141c:	1c41      	adds	r1, r0, #1
 801141e:	d1c8      	bne.n	80113b2 <__sflush_r+0x36>
 8011420:	682b      	ldr	r3, [r5, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d0c5      	beq.n	80113b2 <__sflush_r+0x36>
 8011426:	2b1d      	cmp	r3, #29
 8011428:	d001      	beq.n	801142e <__sflush_r+0xb2>
 801142a:	2b16      	cmp	r3, #22
 801142c:	d101      	bne.n	8011432 <__sflush_r+0xb6>
 801142e:	602f      	str	r7, [r5, #0]
 8011430:	e7b1      	b.n	8011396 <__sflush_r+0x1a>
 8011432:	89a3      	ldrh	r3, [r4, #12]
 8011434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011438:	81a3      	strh	r3, [r4, #12]
 801143a:	e7ad      	b.n	8011398 <__sflush_r+0x1c>
 801143c:	690f      	ldr	r7, [r1, #16]
 801143e:	2f00      	cmp	r7, #0
 8011440:	d0a9      	beq.n	8011396 <__sflush_r+0x1a>
 8011442:	0793      	lsls	r3, r2, #30
 8011444:	680e      	ldr	r6, [r1, #0]
 8011446:	bf08      	it	eq
 8011448:	694b      	ldreq	r3, [r1, #20]
 801144a:	600f      	str	r7, [r1, #0]
 801144c:	bf18      	it	ne
 801144e:	2300      	movne	r3, #0
 8011450:	eba6 0807 	sub.w	r8, r6, r7
 8011454:	608b      	str	r3, [r1, #8]
 8011456:	f1b8 0f00 	cmp.w	r8, #0
 801145a:	dd9c      	ble.n	8011396 <__sflush_r+0x1a>
 801145c:	6a21      	ldr	r1, [r4, #32]
 801145e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011460:	4643      	mov	r3, r8
 8011462:	463a      	mov	r2, r7
 8011464:	4628      	mov	r0, r5
 8011466:	47b0      	blx	r6
 8011468:	2800      	cmp	r0, #0
 801146a:	dc06      	bgt.n	801147a <__sflush_r+0xfe>
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011472:	81a3      	strh	r3, [r4, #12]
 8011474:	f04f 30ff 	mov.w	r0, #4294967295
 8011478:	e78e      	b.n	8011398 <__sflush_r+0x1c>
 801147a:	4407      	add	r7, r0
 801147c:	eba8 0800 	sub.w	r8, r8, r0
 8011480:	e7e9      	b.n	8011456 <__sflush_r+0xda>
 8011482:	bf00      	nop
 8011484:	dfbffffe 	.word	0xdfbffffe

08011488 <_fflush_r>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	690b      	ldr	r3, [r1, #16]
 801148c:	4605      	mov	r5, r0
 801148e:	460c      	mov	r4, r1
 8011490:	b913      	cbnz	r3, 8011498 <_fflush_r+0x10>
 8011492:	2500      	movs	r5, #0
 8011494:	4628      	mov	r0, r5
 8011496:	bd38      	pop	{r3, r4, r5, pc}
 8011498:	b118      	cbz	r0, 80114a2 <_fflush_r+0x1a>
 801149a:	6a03      	ldr	r3, [r0, #32]
 801149c:	b90b      	cbnz	r3, 80114a2 <_fflush_r+0x1a>
 801149e:	f7fe fa9d 	bl	800f9dc <__sinit>
 80114a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d0f3      	beq.n	8011492 <_fflush_r+0xa>
 80114aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114ac:	07d0      	lsls	r0, r2, #31
 80114ae:	d404      	bmi.n	80114ba <_fflush_r+0x32>
 80114b0:	0599      	lsls	r1, r3, #22
 80114b2:	d402      	bmi.n	80114ba <_fflush_r+0x32>
 80114b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114b6:	f7fe fbb7 	bl	800fc28 <__retarget_lock_acquire_recursive>
 80114ba:	4628      	mov	r0, r5
 80114bc:	4621      	mov	r1, r4
 80114be:	f7ff ff5d 	bl	801137c <__sflush_r>
 80114c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114c4:	07da      	lsls	r2, r3, #31
 80114c6:	4605      	mov	r5, r0
 80114c8:	d4e4      	bmi.n	8011494 <_fflush_r+0xc>
 80114ca:	89a3      	ldrh	r3, [r4, #12]
 80114cc:	059b      	lsls	r3, r3, #22
 80114ce:	d4e1      	bmi.n	8011494 <_fflush_r+0xc>
 80114d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114d2:	f7fe fbaa 	bl	800fc2a <__retarget_lock_release_recursive>
 80114d6:	e7dd      	b.n	8011494 <_fflush_r+0xc>

080114d8 <memmove>:
 80114d8:	4288      	cmp	r0, r1
 80114da:	b510      	push	{r4, lr}
 80114dc:	eb01 0402 	add.w	r4, r1, r2
 80114e0:	d902      	bls.n	80114e8 <memmove+0x10>
 80114e2:	4284      	cmp	r4, r0
 80114e4:	4623      	mov	r3, r4
 80114e6:	d807      	bhi.n	80114f8 <memmove+0x20>
 80114e8:	1e43      	subs	r3, r0, #1
 80114ea:	42a1      	cmp	r1, r4
 80114ec:	d008      	beq.n	8011500 <memmove+0x28>
 80114ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114f6:	e7f8      	b.n	80114ea <memmove+0x12>
 80114f8:	4402      	add	r2, r0
 80114fa:	4601      	mov	r1, r0
 80114fc:	428a      	cmp	r2, r1
 80114fe:	d100      	bne.n	8011502 <memmove+0x2a>
 8011500:	bd10      	pop	{r4, pc}
 8011502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801150a:	e7f7      	b.n	80114fc <memmove+0x24>

0801150c <__assert_func>:
 801150c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801150e:	4614      	mov	r4, r2
 8011510:	461a      	mov	r2, r3
 8011512:	4b09      	ldr	r3, [pc, #36]	; (8011538 <__assert_func+0x2c>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4605      	mov	r5, r0
 8011518:	68d8      	ldr	r0, [r3, #12]
 801151a:	b14c      	cbz	r4, 8011530 <__assert_func+0x24>
 801151c:	4b07      	ldr	r3, [pc, #28]	; (801153c <__assert_func+0x30>)
 801151e:	9100      	str	r1, [sp, #0]
 8011520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011524:	4906      	ldr	r1, [pc, #24]	; (8011540 <__assert_func+0x34>)
 8011526:	462b      	mov	r3, r5
 8011528:	f000 f872 	bl	8011610 <fiprintf>
 801152c:	f000 f882 	bl	8011634 <abort>
 8011530:	4b04      	ldr	r3, [pc, #16]	; (8011544 <__assert_func+0x38>)
 8011532:	461c      	mov	r4, r3
 8011534:	e7f3      	b.n	801151e <__assert_func+0x12>
 8011536:	bf00      	nop
 8011538:	20000384 	.word	0x20000384
 801153c:	080126bf 	.word	0x080126bf
 8011540:	080126cc 	.word	0x080126cc
 8011544:	080126fa 	.word	0x080126fa

08011548 <_calloc_r>:
 8011548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801154a:	fba1 2402 	umull	r2, r4, r1, r2
 801154e:	b94c      	cbnz	r4, 8011564 <_calloc_r+0x1c>
 8011550:	4611      	mov	r1, r2
 8011552:	9201      	str	r2, [sp, #4]
 8011554:	f7fd fcd6 	bl	800ef04 <_malloc_r>
 8011558:	9a01      	ldr	r2, [sp, #4]
 801155a:	4605      	mov	r5, r0
 801155c:	b930      	cbnz	r0, 801156c <_calloc_r+0x24>
 801155e:	4628      	mov	r0, r5
 8011560:	b003      	add	sp, #12
 8011562:	bd30      	pop	{r4, r5, pc}
 8011564:	220c      	movs	r2, #12
 8011566:	6002      	str	r2, [r0, #0]
 8011568:	2500      	movs	r5, #0
 801156a:	e7f8      	b.n	801155e <_calloc_r+0x16>
 801156c:	4621      	mov	r1, r4
 801156e:	f7fe face 	bl	800fb0e <memset>
 8011572:	e7f4      	b.n	801155e <_calloc_r+0x16>

08011574 <__ascii_mbtowc>:
 8011574:	b082      	sub	sp, #8
 8011576:	b901      	cbnz	r1, 801157a <__ascii_mbtowc+0x6>
 8011578:	a901      	add	r1, sp, #4
 801157a:	b142      	cbz	r2, 801158e <__ascii_mbtowc+0x1a>
 801157c:	b14b      	cbz	r3, 8011592 <__ascii_mbtowc+0x1e>
 801157e:	7813      	ldrb	r3, [r2, #0]
 8011580:	600b      	str	r3, [r1, #0]
 8011582:	7812      	ldrb	r2, [r2, #0]
 8011584:	1e10      	subs	r0, r2, #0
 8011586:	bf18      	it	ne
 8011588:	2001      	movne	r0, #1
 801158a:	b002      	add	sp, #8
 801158c:	4770      	bx	lr
 801158e:	4610      	mov	r0, r2
 8011590:	e7fb      	b.n	801158a <__ascii_mbtowc+0x16>
 8011592:	f06f 0001 	mvn.w	r0, #1
 8011596:	e7f8      	b.n	801158a <__ascii_mbtowc+0x16>

08011598 <_realloc_r>:
 8011598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801159c:	4680      	mov	r8, r0
 801159e:	4614      	mov	r4, r2
 80115a0:	460e      	mov	r6, r1
 80115a2:	b921      	cbnz	r1, 80115ae <_realloc_r+0x16>
 80115a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	4611      	mov	r1, r2
 80115aa:	f7fd bcab 	b.w	800ef04 <_malloc_r>
 80115ae:	b92a      	cbnz	r2, 80115bc <_realloc_r+0x24>
 80115b0:	f7ff f9c4 	bl	801093c <_free_r>
 80115b4:	4625      	mov	r5, r4
 80115b6:	4628      	mov	r0, r5
 80115b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115bc:	f000 f841 	bl	8011642 <_malloc_usable_size_r>
 80115c0:	4284      	cmp	r4, r0
 80115c2:	4607      	mov	r7, r0
 80115c4:	d802      	bhi.n	80115cc <_realloc_r+0x34>
 80115c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80115ca:	d812      	bhi.n	80115f2 <_realloc_r+0x5a>
 80115cc:	4621      	mov	r1, r4
 80115ce:	4640      	mov	r0, r8
 80115d0:	f7fd fc98 	bl	800ef04 <_malloc_r>
 80115d4:	4605      	mov	r5, r0
 80115d6:	2800      	cmp	r0, #0
 80115d8:	d0ed      	beq.n	80115b6 <_realloc_r+0x1e>
 80115da:	42bc      	cmp	r4, r7
 80115dc:	4622      	mov	r2, r4
 80115de:	4631      	mov	r1, r6
 80115e0:	bf28      	it	cs
 80115e2:	463a      	movcs	r2, r7
 80115e4:	f7fe fb22 	bl	800fc2c <memcpy>
 80115e8:	4631      	mov	r1, r6
 80115ea:	4640      	mov	r0, r8
 80115ec:	f7ff f9a6 	bl	801093c <_free_r>
 80115f0:	e7e1      	b.n	80115b6 <_realloc_r+0x1e>
 80115f2:	4635      	mov	r5, r6
 80115f4:	e7df      	b.n	80115b6 <_realloc_r+0x1e>

080115f6 <__ascii_wctomb>:
 80115f6:	b149      	cbz	r1, 801160c <__ascii_wctomb+0x16>
 80115f8:	2aff      	cmp	r2, #255	; 0xff
 80115fa:	bf85      	ittet	hi
 80115fc:	238a      	movhi	r3, #138	; 0x8a
 80115fe:	6003      	strhi	r3, [r0, #0]
 8011600:	700a      	strbls	r2, [r1, #0]
 8011602:	f04f 30ff 	movhi.w	r0, #4294967295
 8011606:	bf98      	it	ls
 8011608:	2001      	movls	r0, #1
 801160a:	4770      	bx	lr
 801160c:	4608      	mov	r0, r1
 801160e:	4770      	bx	lr

08011610 <fiprintf>:
 8011610:	b40e      	push	{r1, r2, r3}
 8011612:	b503      	push	{r0, r1, lr}
 8011614:	4601      	mov	r1, r0
 8011616:	ab03      	add	r3, sp, #12
 8011618:	4805      	ldr	r0, [pc, #20]	; (8011630 <fiprintf+0x20>)
 801161a:	f853 2b04 	ldr.w	r2, [r3], #4
 801161e:	6800      	ldr	r0, [r0, #0]
 8011620:	9301      	str	r3, [sp, #4]
 8011622:	f000 f83f 	bl	80116a4 <_vfiprintf_r>
 8011626:	b002      	add	sp, #8
 8011628:	f85d eb04 	ldr.w	lr, [sp], #4
 801162c:	b003      	add	sp, #12
 801162e:	4770      	bx	lr
 8011630:	20000384 	.word	0x20000384

08011634 <abort>:
 8011634:	b508      	push	{r3, lr}
 8011636:	2006      	movs	r0, #6
 8011638:	f000 fa0c 	bl	8011a54 <raise>
 801163c:	2001      	movs	r0, #1
 801163e:	f7f4 fd00 	bl	8006042 <_exit>

08011642 <_malloc_usable_size_r>:
 8011642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011646:	1f18      	subs	r0, r3, #4
 8011648:	2b00      	cmp	r3, #0
 801164a:	bfbc      	itt	lt
 801164c:	580b      	ldrlt	r3, [r1, r0]
 801164e:	18c0      	addlt	r0, r0, r3
 8011650:	4770      	bx	lr

08011652 <__sfputc_r>:
 8011652:	6893      	ldr	r3, [r2, #8]
 8011654:	3b01      	subs	r3, #1
 8011656:	2b00      	cmp	r3, #0
 8011658:	b410      	push	{r4}
 801165a:	6093      	str	r3, [r2, #8]
 801165c:	da08      	bge.n	8011670 <__sfputc_r+0x1e>
 801165e:	6994      	ldr	r4, [r2, #24]
 8011660:	42a3      	cmp	r3, r4
 8011662:	db01      	blt.n	8011668 <__sfputc_r+0x16>
 8011664:	290a      	cmp	r1, #10
 8011666:	d103      	bne.n	8011670 <__sfputc_r+0x1e>
 8011668:	f85d 4b04 	ldr.w	r4, [sp], #4
 801166c:	f000 b934 	b.w	80118d8 <__swbuf_r>
 8011670:	6813      	ldr	r3, [r2, #0]
 8011672:	1c58      	adds	r0, r3, #1
 8011674:	6010      	str	r0, [r2, #0]
 8011676:	7019      	strb	r1, [r3, #0]
 8011678:	4608      	mov	r0, r1
 801167a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801167e:	4770      	bx	lr

08011680 <__sfputs_r>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	4606      	mov	r6, r0
 8011684:	460f      	mov	r7, r1
 8011686:	4614      	mov	r4, r2
 8011688:	18d5      	adds	r5, r2, r3
 801168a:	42ac      	cmp	r4, r5
 801168c:	d101      	bne.n	8011692 <__sfputs_r+0x12>
 801168e:	2000      	movs	r0, #0
 8011690:	e007      	b.n	80116a2 <__sfputs_r+0x22>
 8011692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011696:	463a      	mov	r2, r7
 8011698:	4630      	mov	r0, r6
 801169a:	f7ff ffda 	bl	8011652 <__sfputc_r>
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	d1f3      	bne.n	801168a <__sfputs_r+0xa>
 80116a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116a4 <_vfiprintf_r>:
 80116a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a8:	460d      	mov	r5, r1
 80116aa:	b09d      	sub	sp, #116	; 0x74
 80116ac:	4614      	mov	r4, r2
 80116ae:	4698      	mov	r8, r3
 80116b0:	4606      	mov	r6, r0
 80116b2:	b118      	cbz	r0, 80116bc <_vfiprintf_r+0x18>
 80116b4:	6a03      	ldr	r3, [r0, #32]
 80116b6:	b90b      	cbnz	r3, 80116bc <_vfiprintf_r+0x18>
 80116b8:	f7fe f990 	bl	800f9dc <__sinit>
 80116bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116be:	07d9      	lsls	r1, r3, #31
 80116c0:	d405      	bmi.n	80116ce <_vfiprintf_r+0x2a>
 80116c2:	89ab      	ldrh	r3, [r5, #12]
 80116c4:	059a      	lsls	r2, r3, #22
 80116c6:	d402      	bmi.n	80116ce <_vfiprintf_r+0x2a>
 80116c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116ca:	f7fe faad 	bl	800fc28 <__retarget_lock_acquire_recursive>
 80116ce:	89ab      	ldrh	r3, [r5, #12]
 80116d0:	071b      	lsls	r3, r3, #28
 80116d2:	d501      	bpl.n	80116d8 <_vfiprintf_r+0x34>
 80116d4:	692b      	ldr	r3, [r5, #16]
 80116d6:	b99b      	cbnz	r3, 8011700 <_vfiprintf_r+0x5c>
 80116d8:	4629      	mov	r1, r5
 80116da:	4630      	mov	r0, r6
 80116dc:	f000 f93a 	bl	8011954 <__swsetup_r>
 80116e0:	b170      	cbz	r0, 8011700 <_vfiprintf_r+0x5c>
 80116e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116e4:	07dc      	lsls	r4, r3, #31
 80116e6:	d504      	bpl.n	80116f2 <_vfiprintf_r+0x4e>
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ec:	b01d      	add	sp, #116	; 0x74
 80116ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f2:	89ab      	ldrh	r3, [r5, #12]
 80116f4:	0598      	lsls	r0, r3, #22
 80116f6:	d4f7      	bmi.n	80116e8 <_vfiprintf_r+0x44>
 80116f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116fa:	f7fe fa96 	bl	800fc2a <__retarget_lock_release_recursive>
 80116fe:	e7f3      	b.n	80116e8 <_vfiprintf_r+0x44>
 8011700:	2300      	movs	r3, #0
 8011702:	9309      	str	r3, [sp, #36]	; 0x24
 8011704:	2320      	movs	r3, #32
 8011706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801170a:	f8cd 800c 	str.w	r8, [sp, #12]
 801170e:	2330      	movs	r3, #48	; 0x30
 8011710:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80118c4 <_vfiprintf_r+0x220>
 8011714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011718:	f04f 0901 	mov.w	r9, #1
 801171c:	4623      	mov	r3, r4
 801171e:	469a      	mov	sl, r3
 8011720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011724:	b10a      	cbz	r2, 801172a <_vfiprintf_r+0x86>
 8011726:	2a25      	cmp	r2, #37	; 0x25
 8011728:	d1f9      	bne.n	801171e <_vfiprintf_r+0x7a>
 801172a:	ebba 0b04 	subs.w	fp, sl, r4
 801172e:	d00b      	beq.n	8011748 <_vfiprintf_r+0xa4>
 8011730:	465b      	mov	r3, fp
 8011732:	4622      	mov	r2, r4
 8011734:	4629      	mov	r1, r5
 8011736:	4630      	mov	r0, r6
 8011738:	f7ff ffa2 	bl	8011680 <__sfputs_r>
 801173c:	3001      	adds	r0, #1
 801173e:	f000 80a9 	beq.w	8011894 <_vfiprintf_r+0x1f0>
 8011742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011744:	445a      	add	r2, fp
 8011746:	9209      	str	r2, [sp, #36]	; 0x24
 8011748:	f89a 3000 	ldrb.w	r3, [sl]
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 80a1 	beq.w	8011894 <_vfiprintf_r+0x1f0>
 8011752:	2300      	movs	r3, #0
 8011754:	f04f 32ff 	mov.w	r2, #4294967295
 8011758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801175c:	f10a 0a01 	add.w	sl, sl, #1
 8011760:	9304      	str	r3, [sp, #16]
 8011762:	9307      	str	r3, [sp, #28]
 8011764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011768:	931a      	str	r3, [sp, #104]	; 0x68
 801176a:	4654      	mov	r4, sl
 801176c:	2205      	movs	r2, #5
 801176e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011772:	4854      	ldr	r0, [pc, #336]	; (80118c4 <_vfiprintf_r+0x220>)
 8011774:	f7ee fd2c 	bl	80001d0 <memchr>
 8011778:	9a04      	ldr	r2, [sp, #16]
 801177a:	b9d8      	cbnz	r0, 80117b4 <_vfiprintf_r+0x110>
 801177c:	06d1      	lsls	r1, r2, #27
 801177e:	bf44      	itt	mi
 8011780:	2320      	movmi	r3, #32
 8011782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011786:	0713      	lsls	r3, r2, #28
 8011788:	bf44      	itt	mi
 801178a:	232b      	movmi	r3, #43	; 0x2b
 801178c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011790:	f89a 3000 	ldrb.w	r3, [sl]
 8011794:	2b2a      	cmp	r3, #42	; 0x2a
 8011796:	d015      	beq.n	80117c4 <_vfiprintf_r+0x120>
 8011798:	9a07      	ldr	r2, [sp, #28]
 801179a:	4654      	mov	r4, sl
 801179c:	2000      	movs	r0, #0
 801179e:	f04f 0c0a 	mov.w	ip, #10
 80117a2:	4621      	mov	r1, r4
 80117a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117a8:	3b30      	subs	r3, #48	; 0x30
 80117aa:	2b09      	cmp	r3, #9
 80117ac:	d94d      	bls.n	801184a <_vfiprintf_r+0x1a6>
 80117ae:	b1b0      	cbz	r0, 80117de <_vfiprintf_r+0x13a>
 80117b0:	9207      	str	r2, [sp, #28]
 80117b2:	e014      	b.n	80117de <_vfiprintf_r+0x13a>
 80117b4:	eba0 0308 	sub.w	r3, r0, r8
 80117b8:	fa09 f303 	lsl.w	r3, r9, r3
 80117bc:	4313      	orrs	r3, r2
 80117be:	9304      	str	r3, [sp, #16]
 80117c0:	46a2      	mov	sl, r4
 80117c2:	e7d2      	b.n	801176a <_vfiprintf_r+0xc6>
 80117c4:	9b03      	ldr	r3, [sp, #12]
 80117c6:	1d19      	adds	r1, r3, #4
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	9103      	str	r1, [sp, #12]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	bfbb      	ittet	lt
 80117d0:	425b      	neglt	r3, r3
 80117d2:	f042 0202 	orrlt.w	r2, r2, #2
 80117d6:	9307      	strge	r3, [sp, #28]
 80117d8:	9307      	strlt	r3, [sp, #28]
 80117da:	bfb8      	it	lt
 80117dc:	9204      	strlt	r2, [sp, #16]
 80117de:	7823      	ldrb	r3, [r4, #0]
 80117e0:	2b2e      	cmp	r3, #46	; 0x2e
 80117e2:	d10c      	bne.n	80117fe <_vfiprintf_r+0x15a>
 80117e4:	7863      	ldrb	r3, [r4, #1]
 80117e6:	2b2a      	cmp	r3, #42	; 0x2a
 80117e8:	d134      	bne.n	8011854 <_vfiprintf_r+0x1b0>
 80117ea:	9b03      	ldr	r3, [sp, #12]
 80117ec:	1d1a      	adds	r2, r3, #4
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	9203      	str	r2, [sp, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	bfb8      	it	lt
 80117f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80117fa:	3402      	adds	r4, #2
 80117fc:	9305      	str	r3, [sp, #20]
 80117fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80118d4 <_vfiprintf_r+0x230>
 8011802:	7821      	ldrb	r1, [r4, #0]
 8011804:	2203      	movs	r2, #3
 8011806:	4650      	mov	r0, sl
 8011808:	f7ee fce2 	bl	80001d0 <memchr>
 801180c:	b138      	cbz	r0, 801181e <_vfiprintf_r+0x17a>
 801180e:	9b04      	ldr	r3, [sp, #16]
 8011810:	eba0 000a 	sub.w	r0, r0, sl
 8011814:	2240      	movs	r2, #64	; 0x40
 8011816:	4082      	lsls	r2, r0
 8011818:	4313      	orrs	r3, r2
 801181a:	3401      	adds	r4, #1
 801181c:	9304      	str	r3, [sp, #16]
 801181e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011822:	4829      	ldr	r0, [pc, #164]	; (80118c8 <_vfiprintf_r+0x224>)
 8011824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011828:	2206      	movs	r2, #6
 801182a:	f7ee fcd1 	bl	80001d0 <memchr>
 801182e:	2800      	cmp	r0, #0
 8011830:	d03f      	beq.n	80118b2 <_vfiprintf_r+0x20e>
 8011832:	4b26      	ldr	r3, [pc, #152]	; (80118cc <_vfiprintf_r+0x228>)
 8011834:	bb1b      	cbnz	r3, 801187e <_vfiprintf_r+0x1da>
 8011836:	9b03      	ldr	r3, [sp, #12]
 8011838:	3307      	adds	r3, #7
 801183a:	f023 0307 	bic.w	r3, r3, #7
 801183e:	3308      	adds	r3, #8
 8011840:	9303      	str	r3, [sp, #12]
 8011842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011844:	443b      	add	r3, r7
 8011846:	9309      	str	r3, [sp, #36]	; 0x24
 8011848:	e768      	b.n	801171c <_vfiprintf_r+0x78>
 801184a:	fb0c 3202 	mla	r2, ip, r2, r3
 801184e:	460c      	mov	r4, r1
 8011850:	2001      	movs	r0, #1
 8011852:	e7a6      	b.n	80117a2 <_vfiprintf_r+0xfe>
 8011854:	2300      	movs	r3, #0
 8011856:	3401      	adds	r4, #1
 8011858:	9305      	str	r3, [sp, #20]
 801185a:	4619      	mov	r1, r3
 801185c:	f04f 0c0a 	mov.w	ip, #10
 8011860:	4620      	mov	r0, r4
 8011862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011866:	3a30      	subs	r2, #48	; 0x30
 8011868:	2a09      	cmp	r2, #9
 801186a:	d903      	bls.n	8011874 <_vfiprintf_r+0x1d0>
 801186c:	2b00      	cmp	r3, #0
 801186e:	d0c6      	beq.n	80117fe <_vfiprintf_r+0x15a>
 8011870:	9105      	str	r1, [sp, #20]
 8011872:	e7c4      	b.n	80117fe <_vfiprintf_r+0x15a>
 8011874:	fb0c 2101 	mla	r1, ip, r1, r2
 8011878:	4604      	mov	r4, r0
 801187a:	2301      	movs	r3, #1
 801187c:	e7f0      	b.n	8011860 <_vfiprintf_r+0x1bc>
 801187e:	ab03      	add	r3, sp, #12
 8011880:	9300      	str	r3, [sp, #0]
 8011882:	462a      	mov	r2, r5
 8011884:	4b12      	ldr	r3, [pc, #72]	; (80118d0 <_vfiprintf_r+0x22c>)
 8011886:	a904      	add	r1, sp, #16
 8011888:	4630      	mov	r0, r6
 801188a:	f7fd fc67 	bl	800f15c <_printf_float>
 801188e:	4607      	mov	r7, r0
 8011890:	1c78      	adds	r0, r7, #1
 8011892:	d1d6      	bne.n	8011842 <_vfiprintf_r+0x19e>
 8011894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011896:	07d9      	lsls	r1, r3, #31
 8011898:	d405      	bmi.n	80118a6 <_vfiprintf_r+0x202>
 801189a:	89ab      	ldrh	r3, [r5, #12]
 801189c:	059a      	lsls	r2, r3, #22
 801189e:	d402      	bmi.n	80118a6 <_vfiprintf_r+0x202>
 80118a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118a2:	f7fe f9c2 	bl	800fc2a <__retarget_lock_release_recursive>
 80118a6:	89ab      	ldrh	r3, [r5, #12]
 80118a8:	065b      	lsls	r3, r3, #25
 80118aa:	f53f af1d 	bmi.w	80116e8 <_vfiprintf_r+0x44>
 80118ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118b0:	e71c      	b.n	80116ec <_vfiprintf_r+0x48>
 80118b2:	ab03      	add	r3, sp, #12
 80118b4:	9300      	str	r3, [sp, #0]
 80118b6:	462a      	mov	r2, r5
 80118b8:	4b05      	ldr	r3, [pc, #20]	; (80118d0 <_vfiprintf_r+0x22c>)
 80118ba:	a904      	add	r1, sp, #16
 80118bc:	4630      	mov	r0, r6
 80118be:	f7fd fef1 	bl	800f6a4 <_printf_i>
 80118c2:	e7e4      	b.n	801188e <_vfiprintf_r+0x1ea>
 80118c4:	080126a4 	.word	0x080126a4
 80118c8:	080126ae 	.word	0x080126ae
 80118cc:	0800f15d 	.word	0x0800f15d
 80118d0:	08011681 	.word	0x08011681
 80118d4:	080126aa 	.word	0x080126aa

080118d8 <__swbuf_r>:
 80118d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118da:	460e      	mov	r6, r1
 80118dc:	4614      	mov	r4, r2
 80118de:	4605      	mov	r5, r0
 80118e0:	b118      	cbz	r0, 80118ea <__swbuf_r+0x12>
 80118e2:	6a03      	ldr	r3, [r0, #32]
 80118e4:	b90b      	cbnz	r3, 80118ea <__swbuf_r+0x12>
 80118e6:	f7fe f879 	bl	800f9dc <__sinit>
 80118ea:	69a3      	ldr	r3, [r4, #24]
 80118ec:	60a3      	str	r3, [r4, #8]
 80118ee:	89a3      	ldrh	r3, [r4, #12]
 80118f0:	071a      	lsls	r2, r3, #28
 80118f2:	d525      	bpl.n	8011940 <__swbuf_r+0x68>
 80118f4:	6923      	ldr	r3, [r4, #16]
 80118f6:	b31b      	cbz	r3, 8011940 <__swbuf_r+0x68>
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	6922      	ldr	r2, [r4, #16]
 80118fc:	1a98      	subs	r0, r3, r2
 80118fe:	6963      	ldr	r3, [r4, #20]
 8011900:	b2f6      	uxtb	r6, r6
 8011902:	4283      	cmp	r3, r0
 8011904:	4637      	mov	r7, r6
 8011906:	dc04      	bgt.n	8011912 <__swbuf_r+0x3a>
 8011908:	4621      	mov	r1, r4
 801190a:	4628      	mov	r0, r5
 801190c:	f7ff fdbc 	bl	8011488 <_fflush_r>
 8011910:	b9e0      	cbnz	r0, 801194c <__swbuf_r+0x74>
 8011912:	68a3      	ldr	r3, [r4, #8]
 8011914:	3b01      	subs	r3, #1
 8011916:	60a3      	str	r3, [r4, #8]
 8011918:	6823      	ldr	r3, [r4, #0]
 801191a:	1c5a      	adds	r2, r3, #1
 801191c:	6022      	str	r2, [r4, #0]
 801191e:	701e      	strb	r6, [r3, #0]
 8011920:	6962      	ldr	r2, [r4, #20]
 8011922:	1c43      	adds	r3, r0, #1
 8011924:	429a      	cmp	r2, r3
 8011926:	d004      	beq.n	8011932 <__swbuf_r+0x5a>
 8011928:	89a3      	ldrh	r3, [r4, #12]
 801192a:	07db      	lsls	r3, r3, #31
 801192c:	d506      	bpl.n	801193c <__swbuf_r+0x64>
 801192e:	2e0a      	cmp	r6, #10
 8011930:	d104      	bne.n	801193c <__swbuf_r+0x64>
 8011932:	4621      	mov	r1, r4
 8011934:	4628      	mov	r0, r5
 8011936:	f7ff fda7 	bl	8011488 <_fflush_r>
 801193a:	b938      	cbnz	r0, 801194c <__swbuf_r+0x74>
 801193c:	4638      	mov	r0, r7
 801193e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011940:	4621      	mov	r1, r4
 8011942:	4628      	mov	r0, r5
 8011944:	f000 f806 	bl	8011954 <__swsetup_r>
 8011948:	2800      	cmp	r0, #0
 801194a:	d0d5      	beq.n	80118f8 <__swbuf_r+0x20>
 801194c:	f04f 37ff 	mov.w	r7, #4294967295
 8011950:	e7f4      	b.n	801193c <__swbuf_r+0x64>
	...

08011954 <__swsetup_r>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	4b2a      	ldr	r3, [pc, #168]	; (8011a00 <__swsetup_r+0xac>)
 8011958:	4605      	mov	r5, r0
 801195a:	6818      	ldr	r0, [r3, #0]
 801195c:	460c      	mov	r4, r1
 801195e:	b118      	cbz	r0, 8011968 <__swsetup_r+0x14>
 8011960:	6a03      	ldr	r3, [r0, #32]
 8011962:	b90b      	cbnz	r3, 8011968 <__swsetup_r+0x14>
 8011964:	f7fe f83a 	bl	800f9dc <__sinit>
 8011968:	89a3      	ldrh	r3, [r4, #12]
 801196a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801196e:	0718      	lsls	r0, r3, #28
 8011970:	d422      	bmi.n	80119b8 <__swsetup_r+0x64>
 8011972:	06d9      	lsls	r1, r3, #27
 8011974:	d407      	bmi.n	8011986 <__swsetup_r+0x32>
 8011976:	2309      	movs	r3, #9
 8011978:	602b      	str	r3, [r5, #0]
 801197a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801197e:	81a3      	strh	r3, [r4, #12]
 8011980:	f04f 30ff 	mov.w	r0, #4294967295
 8011984:	e034      	b.n	80119f0 <__swsetup_r+0x9c>
 8011986:	0758      	lsls	r0, r3, #29
 8011988:	d512      	bpl.n	80119b0 <__swsetup_r+0x5c>
 801198a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801198c:	b141      	cbz	r1, 80119a0 <__swsetup_r+0x4c>
 801198e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011992:	4299      	cmp	r1, r3
 8011994:	d002      	beq.n	801199c <__swsetup_r+0x48>
 8011996:	4628      	mov	r0, r5
 8011998:	f7fe ffd0 	bl	801093c <_free_r>
 801199c:	2300      	movs	r3, #0
 801199e:	6363      	str	r3, [r4, #52]	; 0x34
 80119a0:	89a3      	ldrh	r3, [r4, #12]
 80119a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119a6:	81a3      	strh	r3, [r4, #12]
 80119a8:	2300      	movs	r3, #0
 80119aa:	6063      	str	r3, [r4, #4]
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	6023      	str	r3, [r4, #0]
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	f043 0308 	orr.w	r3, r3, #8
 80119b6:	81a3      	strh	r3, [r4, #12]
 80119b8:	6923      	ldr	r3, [r4, #16]
 80119ba:	b94b      	cbnz	r3, 80119d0 <__swsetup_r+0x7c>
 80119bc:	89a3      	ldrh	r3, [r4, #12]
 80119be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119c6:	d003      	beq.n	80119d0 <__swsetup_r+0x7c>
 80119c8:	4621      	mov	r1, r4
 80119ca:	4628      	mov	r0, r5
 80119cc:	f000 f884 	bl	8011ad8 <__smakebuf_r>
 80119d0:	89a0      	ldrh	r0, [r4, #12]
 80119d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119d6:	f010 0301 	ands.w	r3, r0, #1
 80119da:	d00a      	beq.n	80119f2 <__swsetup_r+0x9e>
 80119dc:	2300      	movs	r3, #0
 80119de:	60a3      	str	r3, [r4, #8]
 80119e0:	6963      	ldr	r3, [r4, #20]
 80119e2:	425b      	negs	r3, r3
 80119e4:	61a3      	str	r3, [r4, #24]
 80119e6:	6923      	ldr	r3, [r4, #16]
 80119e8:	b943      	cbnz	r3, 80119fc <__swsetup_r+0xa8>
 80119ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119ee:	d1c4      	bne.n	801197a <__swsetup_r+0x26>
 80119f0:	bd38      	pop	{r3, r4, r5, pc}
 80119f2:	0781      	lsls	r1, r0, #30
 80119f4:	bf58      	it	pl
 80119f6:	6963      	ldrpl	r3, [r4, #20]
 80119f8:	60a3      	str	r3, [r4, #8]
 80119fa:	e7f4      	b.n	80119e6 <__swsetup_r+0x92>
 80119fc:	2000      	movs	r0, #0
 80119fe:	e7f7      	b.n	80119f0 <__swsetup_r+0x9c>
 8011a00:	20000384 	.word	0x20000384

08011a04 <_raise_r>:
 8011a04:	291f      	cmp	r1, #31
 8011a06:	b538      	push	{r3, r4, r5, lr}
 8011a08:	4604      	mov	r4, r0
 8011a0a:	460d      	mov	r5, r1
 8011a0c:	d904      	bls.n	8011a18 <_raise_r+0x14>
 8011a0e:	2316      	movs	r3, #22
 8011a10:	6003      	str	r3, [r0, #0]
 8011a12:	f04f 30ff 	mov.w	r0, #4294967295
 8011a16:	bd38      	pop	{r3, r4, r5, pc}
 8011a18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011a1a:	b112      	cbz	r2, 8011a22 <_raise_r+0x1e>
 8011a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a20:	b94b      	cbnz	r3, 8011a36 <_raise_r+0x32>
 8011a22:	4620      	mov	r0, r4
 8011a24:	f000 f830 	bl	8011a88 <_getpid_r>
 8011a28:	462a      	mov	r2, r5
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a32:	f000 b817 	b.w	8011a64 <_kill_r>
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d00a      	beq.n	8011a50 <_raise_r+0x4c>
 8011a3a:	1c59      	adds	r1, r3, #1
 8011a3c:	d103      	bne.n	8011a46 <_raise_r+0x42>
 8011a3e:	2316      	movs	r3, #22
 8011a40:	6003      	str	r3, [r0, #0]
 8011a42:	2001      	movs	r0, #1
 8011a44:	e7e7      	b.n	8011a16 <_raise_r+0x12>
 8011a46:	2400      	movs	r4, #0
 8011a48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	4798      	blx	r3
 8011a50:	2000      	movs	r0, #0
 8011a52:	e7e0      	b.n	8011a16 <_raise_r+0x12>

08011a54 <raise>:
 8011a54:	4b02      	ldr	r3, [pc, #8]	; (8011a60 <raise+0xc>)
 8011a56:	4601      	mov	r1, r0
 8011a58:	6818      	ldr	r0, [r3, #0]
 8011a5a:	f7ff bfd3 	b.w	8011a04 <_raise_r>
 8011a5e:	bf00      	nop
 8011a60:	20000384 	.word	0x20000384

08011a64 <_kill_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4d07      	ldr	r5, [pc, #28]	; (8011a84 <_kill_r+0x20>)
 8011a68:	2300      	movs	r3, #0
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	4611      	mov	r1, r2
 8011a70:	602b      	str	r3, [r5, #0]
 8011a72:	f7f4 fad6 	bl	8006022 <_kill>
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	d102      	bne.n	8011a80 <_kill_r+0x1c>
 8011a7a:	682b      	ldr	r3, [r5, #0]
 8011a7c:	b103      	cbz	r3, 8011a80 <_kill_r+0x1c>
 8011a7e:	6023      	str	r3, [r4, #0]
 8011a80:	bd38      	pop	{r3, r4, r5, pc}
 8011a82:	bf00      	nop
 8011a84:	20001688 	.word	0x20001688

08011a88 <_getpid_r>:
 8011a88:	f7f4 bac3 	b.w	8006012 <_getpid>

08011a8c <__swhatbuf_r>:
 8011a8c:	b570      	push	{r4, r5, r6, lr}
 8011a8e:	460c      	mov	r4, r1
 8011a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a94:	2900      	cmp	r1, #0
 8011a96:	b096      	sub	sp, #88	; 0x58
 8011a98:	4615      	mov	r5, r2
 8011a9a:	461e      	mov	r6, r3
 8011a9c:	da0d      	bge.n	8011aba <__swhatbuf_r+0x2e>
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011aa4:	f04f 0100 	mov.w	r1, #0
 8011aa8:	bf0c      	ite	eq
 8011aaa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011aae:	2340      	movne	r3, #64	; 0x40
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	6031      	str	r1, [r6, #0]
 8011ab4:	602b      	str	r3, [r5, #0]
 8011ab6:	b016      	add	sp, #88	; 0x58
 8011ab8:	bd70      	pop	{r4, r5, r6, pc}
 8011aba:	466a      	mov	r2, sp
 8011abc:	f000 f848 	bl	8011b50 <_fstat_r>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	dbec      	blt.n	8011a9e <__swhatbuf_r+0x12>
 8011ac4:	9901      	ldr	r1, [sp, #4]
 8011ac6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011aca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011ace:	4259      	negs	r1, r3
 8011ad0:	4159      	adcs	r1, r3
 8011ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ad6:	e7eb      	b.n	8011ab0 <__swhatbuf_r+0x24>

08011ad8 <__smakebuf_r>:
 8011ad8:	898b      	ldrh	r3, [r1, #12]
 8011ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011adc:	079d      	lsls	r5, r3, #30
 8011ade:	4606      	mov	r6, r0
 8011ae0:	460c      	mov	r4, r1
 8011ae2:	d507      	bpl.n	8011af4 <__smakebuf_r+0x1c>
 8011ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	6123      	str	r3, [r4, #16]
 8011aec:	2301      	movs	r3, #1
 8011aee:	6163      	str	r3, [r4, #20]
 8011af0:	b002      	add	sp, #8
 8011af2:	bd70      	pop	{r4, r5, r6, pc}
 8011af4:	ab01      	add	r3, sp, #4
 8011af6:	466a      	mov	r2, sp
 8011af8:	f7ff ffc8 	bl	8011a8c <__swhatbuf_r>
 8011afc:	9900      	ldr	r1, [sp, #0]
 8011afe:	4605      	mov	r5, r0
 8011b00:	4630      	mov	r0, r6
 8011b02:	f7fd f9ff 	bl	800ef04 <_malloc_r>
 8011b06:	b948      	cbnz	r0, 8011b1c <__smakebuf_r+0x44>
 8011b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b0c:	059a      	lsls	r2, r3, #22
 8011b0e:	d4ef      	bmi.n	8011af0 <__smakebuf_r+0x18>
 8011b10:	f023 0303 	bic.w	r3, r3, #3
 8011b14:	f043 0302 	orr.w	r3, r3, #2
 8011b18:	81a3      	strh	r3, [r4, #12]
 8011b1a:	e7e3      	b.n	8011ae4 <__smakebuf_r+0xc>
 8011b1c:	89a3      	ldrh	r3, [r4, #12]
 8011b1e:	6020      	str	r0, [r4, #0]
 8011b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b24:	81a3      	strh	r3, [r4, #12]
 8011b26:	9b00      	ldr	r3, [sp, #0]
 8011b28:	6163      	str	r3, [r4, #20]
 8011b2a:	9b01      	ldr	r3, [sp, #4]
 8011b2c:	6120      	str	r0, [r4, #16]
 8011b2e:	b15b      	cbz	r3, 8011b48 <__smakebuf_r+0x70>
 8011b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b34:	4630      	mov	r0, r6
 8011b36:	f000 f81d 	bl	8011b74 <_isatty_r>
 8011b3a:	b128      	cbz	r0, 8011b48 <__smakebuf_r+0x70>
 8011b3c:	89a3      	ldrh	r3, [r4, #12]
 8011b3e:	f023 0303 	bic.w	r3, r3, #3
 8011b42:	f043 0301 	orr.w	r3, r3, #1
 8011b46:	81a3      	strh	r3, [r4, #12]
 8011b48:	89a3      	ldrh	r3, [r4, #12]
 8011b4a:	431d      	orrs	r5, r3
 8011b4c:	81a5      	strh	r5, [r4, #12]
 8011b4e:	e7cf      	b.n	8011af0 <__smakebuf_r+0x18>

08011b50 <_fstat_r>:
 8011b50:	b538      	push	{r3, r4, r5, lr}
 8011b52:	4d07      	ldr	r5, [pc, #28]	; (8011b70 <_fstat_r+0x20>)
 8011b54:	2300      	movs	r3, #0
 8011b56:	4604      	mov	r4, r0
 8011b58:	4608      	mov	r0, r1
 8011b5a:	4611      	mov	r1, r2
 8011b5c:	602b      	str	r3, [r5, #0]
 8011b5e:	f7f4 fabf 	bl	80060e0 <_fstat>
 8011b62:	1c43      	adds	r3, r0, #1
 8011b64:	d102      	bne.n	8011b6c <_fstat_r+0x1c>
 8011b66:	682b      	ldr	r3, [r5, #0]
 8011b68:	b103      	cbz	r3, 8011b6c <_fstat_r+0x1c>
 8011b6a:	6023      	str	r3, [r4, #0]
 8011b6c:	bd38      	pop	{r3, r4, r5, pc}
 8011b6e:	bf00      	nop
 8011b70:	20001688 	.word	0x20001688

08011b74 <_isatty_r>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4d06      	ldr	r5, [pc, #24]	; (8011b90 <_isatty_r+0x1c>)
 8011b78:	2300      	movs	r3, #0
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	4608      	mov	r0, r1
 8011b7e:	602b      	str	r3, [r5, #0]
 8011b80:	f7f4 fabe 	bl	8006100 <_isatty>
 8011b84:	1c43      	adds	r3, r0, #1
 8011b86:	d102      	bne.n	8011b8e <_isatty_r+0x1a>
 8011b88:	682b      	ldr	r3, [r5, #0]
 8011b8a:	b103      	cbz	r3, 8011b8e <_isatty_r+0x1a>
 8011b8c:	6023      	str	r3, [r4, #0]
 8011b8e:	bd38      	pop	{r3, r4, r5, pc}
 8011b90:	20001688 	.word	0x20001688
 8011b94:	00000000 	.word	0x00000000

08011b98 <exp>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	ed2d 8b02 	vpush	{d8}
 8011b9e:	ec55 4b10 	vmov	r4, r5, d0
 8011ba2:	f000 f84d 	bl	8011c40 <__ieee754_exp>
 8011ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8011baa:	eef0 8a60 	vmov.f32	s17, s1
 8011bae:	ec45 4b10 	vmov	d0, r4, r5
 8011bb2:	f000 f839 	bl	8011c28 <finite>
 8011bb6:	b168      	cbz	r0, 8011bd4 <exp+0x3c>
 8011bb8:	a317      	add	r3, pc, #92	; (adr r3, 8011c18 <exp+0x80>)
 8011bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	f7ee ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8011bc6:	b160      	cbz	r0, 8011be2 <exp+0x4a>
 8011bc8:	f7fe f804 	bl	800fbd4 <__errno>
 8011bcc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8011c08 <exp+0x70>
 8011bd0:	2322      	movs	r3, #34	; 0x22
 8011bd2:	6003      	str	r3, [r0, #0]
 8011bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8011bd8:	eef0 0a68 	vmov.f32	s1, s17
 8011bdc:	ecbd 8b02 	vpop	{d8}
 8011be0:	bd38      	pop	{r3, r4, r5, pc}
 8011be2:	a30f      	add	r3, pc, #60	; (adr r3, 8011c20 <exp+0x88>)
 8011be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be8:	4620      	mov	r0, r4
 8011bea:	4629      	mov	r1, r5
 8011bec:	f7ee ff76 	bl	8000adc <__aeabi_dcmplt>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d0ef      	beq.n	8011bd4 <exp+0x3c>
 8011bf4:	f7fd ffee 	bl	800fbd4 <__errno>
 8011bf8:	2322      	movs	r3, #34	; 0x22
 8011bfa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8011c10 <exp+0x78>
 8011bfe:	6003      	str	r3, [r0, #0]
 8011c00:	e7e8      	b.n	8011bd4 <exp+0x3c>
 8011c02:	bf00      	nop
 8011c04:	f3af 8000 	nop.w
 8011c08:	00000000 	.word	0x00000000
 8011c0c:	7ff00000 	.word	0x7ff00000
	...
 8011c18:	fefa39ef 	.word	0xfefa39ef
 8011c1c:	40862e42 	.word	0x40862e42
 8011c20:	d52d3051 	.word	0xd52d3051
 8011c24:	c0874910 	.word	0xc0874910

08011c28 <finite>:
 8011c28:	b082      	sub	sp, #8
 8011c2a:	ed8d 0b00 	vstr	d0, [sp]
 8011c2e:	9801      	ldr	r0, [sp, #4]
 8011c30:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011c34:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011c38:	0fc0      	lsrs	r0, r0, #31
 8011c3a:	b002      	add	sp, #8
 8011c3c:	4770      	bx	lr
	...

08011c40 <__ieee754_exp>:
 8011c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c44:	ec55 4b10 	vmov	r4, r5, d0
 8011c48:	49b5      	ldr	r1, [pc, #724]	; (8011f20 <__ieee754_exp+0x2e0>)
 8011c4a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011c4e:	428a      	cmp	r2, r1
 8011c50:	ed2d 8b04 	vpush	{d8-d9}
 8011c54:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011c58:	d93b      	bls.n	8011cd2 <__ieee754_exp+0x92>
 8011c5a:	49b2      	ldr	r1, [pc, #712]	; (8011f24 <__ieee754_exp+0x2e4>)
 8011c5c:	428a      	cmp	r2, r1
 8011c5e:	d916      	bls.n	8011c8e <__ieee754_exp+0x4e>
 8011c60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011c64:	4323      	orrs	r3, r4
 8011c66:	ee10 2a10 	vmov	r2, s0
 8011c6a:	d007      	beq.n	8011c7c <__ieee754_exp+0x3c>
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	4620      	mov	r0, r4
 8011c70:	4629      	mov	r1, r5
 8011c72:	f7ee fb0b 	bl	800028c <__adddf3>
 8011c76:	4604      	mov	r4, r0
 8011c78:	460d      	mov	r5, r1
 8011c7a:	e002      	b.n	8011c82 <__ieee754_exp+0x42>
 8011c7c:	b10e      	cbz	r6, 8011c82 <__ieee754_exp+0x42>
 8011c7e:	2400      	movs	r4, #0
 8011c80:	2500      	movs	r5, #0
 8011c82:	ecbd 8b04 	vpop	{d8-d9}
 8011c86:	ec45 4b10 	vmov	d0, r4, r5
 8011c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c8e:	a38e      	add	r3, pc, #568	; (adr r3, 8011ec8 <__ieee754_exp+0x288>)
 8011c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c94:	ee10 0a10 	vmov	r0, s0
 8011c98:	4629      	mov	r1, r5
 8011c9a:	f7ee ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	b130      	cbz	r0, 8011cb0 <__ieee754_exp+0x70>
 8011ca2:	ecbd 8b04 	vpop	{d8-d9}
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cac:	f000 b971 	b.w	8011f92 <__math_oflow>
 8011cb0:	a387      	add	r3, pc, #540	; (adr r3, 8011ed0 <__ieee754_exp+0x290>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	4629      	mov	r1, r5
 8011cba:	f7ee ff0f 	bl	8000adc <__aeabi_dcmplt>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	f000 808b 	beq.w	8011dda <__ieee754_exp+0x19a>
 8011cc4:	ecbd 8b04 	vpop	{d8-d9}
 8011cc8:	4638      	mov	r0, r7
 8011cca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cce:	f000 b957 	b.w	8011f80 <__math_uflow>
 8011cd2:	4b95      	ldr	r3, [pc, #596]	; (8011f28 <__ieee754_exp+0x2e8>)
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	f240 80ac 	bls.w	8011e32 <__ieee754_exp+0x1f2>
 8011cda:	4b94      	ldr	r3, [pc, #592]	; (8011f2c <__ieee754_exp+0x2ec>)
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d87c      	bhi.n	8011dda <__ieee754_exp+0x19a>
 8011ce0:	4b93      	ldr	r3, [pc, #588]	; (8011f30 <__ieee754_exp+0x2f0>)
 8011ce2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	ee10 0a10 	vmov	r0, s0
 8011cee:	4629      	mov	r1, r5
 8011cf0:	f7ee faca 	bl	8000288 <__aeabi_dsub>
 8011cf4:	4b8f      	ldr	r3, [pc, #572]	; (8011f34 <__ieee754_exp+0x2f4>)
 8011cf6:	00f7      	lsls	r7, r6, #3
 8011cf8:	443b      	add	r3, r7
 8011cfa:	ed93 7b00 	vldr	d7, [r3]
 8011cfe:	f1c6 0a01 	rsb	sl, r6, #1
 8011d02:	4680      	mov	r8, r0
 8011d04:	4689      	mov	r9, r1
 8011d06:	ebaa 0a06 	sub.w	sl, sl, r6
 8011d0a:	eeb0 8a47 	vmov.f32	s16, s14
 8011d0e:	eef0 8a67 	vmov.f32	s17, s15
 8011d12:	ec53 2b18 	vmov	r2, r3, d8
 8011d16:	4640      	mov	r0, r8
 8011d18:	4649      	mov	r1, r9
 8011d1a:	f7ee fab5 	bl	8000288 <__aeabi_dsub>
 8011d1e:	4604      	mov	r4, r0
 8011d20:	460d      	mov	r5, r1
 8011d22:	4622      	mov	r2, r4
 8011d24:	462b      	mov	r3, r5
 8011d26:	4620      	mov	r0, r4
 8011d28:	4629      	mov	r1, r5
 8011d2a:	f7ee fc65 	bl	80005f8 <__aeabi_dmul>
 8011d2e:	a36a      	add	r3, pc, #424	; (adr r3, 8011ed8 <__ieee754_exp+0x298>)
 8011d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d34:	4606      	mov	r6, r0
 8011d36:	460f      	mov	r7, r1
 8011d38:	f7ee fc5e 	bl	80005f8 <__aeabi_dmul>
 8011d3c:	a368      	add	r3, pc, #416	; (adr r3, 8011ee0 <__ieee754_exp+0x2a0>)
 8011d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d42:	f7ee faa1 	bl	8000288 <__aeabi_dsub>
 8011d46:	4632      	mov	r2, r6
 8011d48:	463b      	mov	r3, r7
 8011d4a:	f7ee fc55 	bl	80005f8 <__aeabi_dmul>
 8011d4e:	a366      	add	r3, pc, #408	; (adr r3, 8011ee8 <__ieee754_exp+0x2a8>)
 8011d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d54:	f7ee fa9a 	bl	800028c <__adddf3>
 8011d58:	4632      	mov	r2, r6
 8011d5a:	463b      	mov	r3, r7
 8011d5c:	f7ee fc4c 	bl	80005f8 <__aeabi_dmul>
 8011d60:	a363      	add	r3, pc, #396	; (adr r3, 8011ef0 <__ieee754_exp+0x2b0>)
 8011d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d66:	f7ee fa8f 	bl	8000288 <__aeabi_dsub>
 8011d6a:	4632      	mov	r2, r6
 8011d6c:	463b      	mov	r3, r7
 8011d6e:	f7ee fc43 	bl	80005f8 <__aeabi_dmul>
 8011d72:	a361      	add	r3, pc, #388	; (adr r3, 8011ef8 <__ieee754_exp+0x2b8>)
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	f7ee fa88 	bl	800028c <__adddf3>
 8011d7c:	4632      	mov	r2, r6
 8011d7e:	463b      	mov	r3, r7
 8011d80:	f7ee fc3a 	bl	80005f8 <__aeabi_dmul>
 8011d84:	4602      	mov	r2, r0
 8011d86:	460b      	mov	r3, r1
 8011d88:	4620      	mov	r0, r4
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	f7ee fa7c 	bl	8000288 <__aeabi_dsub>
 8011d90:	4602      	mov	r2, r0
 8011d92:	460b      	mov	r3, r1
 8011d94:	4606      	mov	r6, r0
 8011d96:	460f      	mov	r7, r1
 8011d98:	4620      	mov	r0, r4
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	f7ee fc2c 	bl	80005f8 <__aeabi_dmul>
 8011da0:	ec41 0b19 	vmov	d9, r0, r1
 8011da4:	f1ba 0f00 	cmp.w	sl, #0
 8011da8:	d15d      	bne.n	8011e66 <__ieee754_exp+0x226>
 8011daa:	2200      	movs	r2, #0
 8011dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011db0:	4630      	mov	r0, r6
 8011db2:	4639      	mov	r1, r7
 8011db4:	f7ee fa68 	bl	8000288 <__aeabi_dsub>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	ec51 0b19 	vmov	r0, r1, d9
 8011dc0:	f7ee fd44 	bl	800084c <__aeabi_ddiv>
 8011dc4:	4622      	mov	r2, r4
 8011dc6:	462b      	mov	r3, r5
 8011dc8:	f7ee fa5e 	bl	8000288 <__aeabi_dsub>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	4959      	ldr	r1, [pc, #356]	; (8011f38 <__ieee754_exp+0x2f8>)
 8011dd4:	f7ee fa58 	bl	8000288 <__aeabi_dsub>
 8011dd8:	e74d      	b.n	8011c76 <__ieee754_exp+0x36>
 8011dda:	4b58      	ldr	r3, [pc, #352]	; (8011f3c <__ieee754_exp+0x2fc>)
 8011ddc:	4620      	mov	r0, r4
 8011dde:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011de2:	4629      	mov	r1, r5
 8011de4:	a346      	add	r3, pc, #280	; (adr r3, 8011f00 <__ieee754_exp+0x2c0>)
 8011de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dea:	f7ee fc05 	bl	80005f8 <__aeabi_dmul>
 8011dee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011df2:	f7ee fa4b 	bl	800028c <__adddf3>
 8011df6:	f7ee feaf 	bl	8000b58 <__aeabi_d2iz>
 8011dfa:	4682      	mov	sl, r0
 8011dfc:	f7ee fb92 	bl	8000524 <__aeabi_i2d>
 8011e00:	a341      	add	r3, pc, #260	; (adr r3, 8011f08 <__ieee754_exp+0x2c8>)
 8011e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e06:	4606      	mov	r6, r0
 8011e08:	460f      	mov	r7, r1
 8011e0a:	f7ee fbf5 	bl	80005f8 <__aeabi_dmul>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	460b      	mov	r3, r1
 8011e12:	4620      	mov	r0, r4
 8011e14:	4629      	mov	r1, r5
 8011e16:	f7ee fa37 	bl	8000288 <__aeabi_dsub>
 8011e1a:	a33d      	add	r3, pc, #244	; (adr r3, 8011f10 <__ieee754_exp+0x2d0>)
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	4680      	mov	r8, r0
 8011e22:	4689      	mov	r9, r1
 8011e24:	4630      	mov	r0, r6
 8011e26:	4639      	mov	r1, r7
 8011e28:	f7ee fbe6 	bl	80005f8 <__aeabi_dmul>
 8011e2c:	ec41 0b18 	vmov	d8, r0, r1
 8011e30:	e76f      	b.n	8011d12 <__ieee754_exp+0xd2>
 8011e32:	4b43      	ldr	r3, [pc, #268]	; (8011f40 <__ieee754_exp+0x300>)
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d811      	bhi.n	8011e5c <__ieee754_exp+0x21c>
 8011e38:	a337      	add	r3, pc, #220	; (adr r3, 8011f18 <__ieee754_exp+0x2d8>)
 8011e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3e:	ee10 0a10 	vmov	r0, s0
 8011e42:	4629      	mov	r1, r5
 8011e44:	f7ee fa22 	bl	800028c <__adddf3>
 8011e48:	4b3b      	ldr	r3, [pc, #236]	; (8011f38 <__ieee754_exp+0x2f8>)
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f7ee fe64 	bl	8000b18 <__aeabi_dcmpgt>
 8011e50:	b138      	cbz	r0, 8011e62 <__ieee754_exp+0x222>
 8011e52:	4b39      	ldr	r3, [pc, #228]	; (8011f38 <__ieee754_exp+0x2f8>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	4620      	mov	r0, r4
 8011e58:	4629      	mov	r1, r5
 8011e5a:	e70a      	b.n	8011c72 <__ieee754_exp+0x32>
 8011e5c:	f04f 0a00 	mov.w	sl, #0
 8011e60:	e75f      	b.n	8011d22 <__ieee754_exp+0xe2>
 8011e62:	4682      	mov	sl, r0
 8011e64:	e75d      	b.n	8011d22 <__ieee754_exp+0xe2>
 8011e66:	4632      	mov	r2, r6
 8011e68:	463b      	mov	r3, r7
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011e70:	f7ee fa0a 	bl	8000288 <__aeabi_dsub>
 8011e74:	4602      	mov	r2, r0
 8011e76:	460b      	mov	r3, r1
 8011e78:	ec51 0b19 	vmov	r0, r1, d9
 8011e7c:	f7ee fce6 	bl	800084c <__aeabi_ddiv>
 8011e80:	4602      	mov	r2, r0
 8011e82:	460b      	mov	r3, r1
 8011e84:	ec51 0b18 	vmov	r0, r1, d8
 8011e88:	f7ee f9fe 	bl	8000288 <__aeabi_dsub>
 8011e8c:	4642      	mov	r2, r8
 8011e8e:	464b      	mov	r3, r9
 8011e90:	f7ee f9fa 	bl	8000288 <__aeabi_dsub>
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	2000      	movs	r0, #0
 8011e9a:	4927      	ldr	r1, [pc, #156]	; (8011f38 <__ieee754_exp+0x2f8>)
 8011e9c:	f7ee f9f4 	bl	8000288 <__aeabi_dsub>
 8011ea0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011ea4:	4592      	cmp	sl, r2
 8011ea6:	db02      	blt.n	8011eae <__ieee754_exp+0x26e>
 8011ea8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011eac:	e6e3      	b.n	8011c76 <__ieee754_exp+0x36>
 8011eae:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011eb2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8011ebc:	f7ee fb9c 	bl	80005f8 <__aeabi_dmul>
 8011ec0:	e6d9      	b.n	8011c76 <__ieee754_exp+0x36>
 8011ec2:	bf00      	nop
 8011ec4:	f3af 8000 	nop.w
 8011ec8:	fefa39ef 	.word	0xfefa39ef
 8011ecc:	40862e42 	.word	0x40862e42
 8011ed0:	d52d3051 	.word	0xd52d3051
 8011ed4:	c0874910 	.word	0xc0874910
 8011ed8:	72bea4d0 	.word	0x72bea4d0
 8011edc:	3e663769 	.word	0x3e663769
 8011ee0:	c5d26bf1 	.word	0xc5d26bf1
 8011ee4:	3ebbbd41 	.word	0x3ebbbd41
 8011ee8:	af25de2c 	.word	0xaf25de2c
 8011eec:	3f11566a 	.word	0x3f11566a
 8011ef0:	16bebd93 	.word	0x16bebd93
 8011ef4:	3f66c16c 	.word	0x3f66c16c
 8011ef8:	5555553e 	.word	0x5555553e
 8011efc:	3fc55555 	.word	0x3fc55555
 8011f00:	652b82fe 	.word	0x652b82fe
 8011f04:	3ff71547 	.word	0x3ff71547
 8011f08:	fee00000 	.word	0xfee00000
 8011f0c:	3fe62e42 	.word	0x3fe62e42
 8011f10:	35793c76 	.word	0x35793c76
 8011f14:	3dea39ef 	.word	0x3dea39ef
 8011f18:	8800759c 	.word	0x8800759c
 8011f1c:	7e37e43c 	.word	0x7e37e43c
 8011f20:	40862e41 	.word	0x40862e41
 8011f24:	7fefffff 	.word	0x7fefffff
 8011f28:	3fd62e42 	.word	0x3fd62e42
 8011f2c:	3ff0a2b1 	.word	0x3ff0a2b1
 8011f30:	08012810 	.word	0x08012810
 8011f34:	08012820 	.word	0x08012820
 8011f38:	3ff00000 	.word	0x3ff00000
 8011f3c:	08012800 	.word	0x08012800
 8011f40:	3defffff 	.word	0x3defffff

08011f44 <with_errno>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	4604      	mov	r4, r0
 8011f48:	460d      	mov	r5, r1
 8011f4a:	4616      	mov	r6, r2
 8011f4c:	f7fd fe42 	bl	800fbd4 <__errno>
 8011f50:	4629      	mov	r1, r5
 8011f52:	6006      	str	r6, [r0, #0]
 8011f54:	4620      	mov	r0, r4
 8011f56:	bd70      	pop	{r4, r5, r6, pc}

08011f58 <xflow>:
 8011f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f5a:	4614      	mov	r4, r2
 8011f5c:	461d      	mov	r5, r3
 8011f5e:	b108      	cbz	r0, 8011f64 <xflow+0xc>
 8011f60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f64:	e9cd 2300 	strd	r2, r3, [sp]
 8011f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	4629      	mov	r1, r5
 8011f70:	f7ee fb42 	bl	80005f8 <__aeabi_dmul>
 8011f74:	2222      	movs	r2, #34	; 0x22
 8011f76:	b003      	add	sp, #12
 8011f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f7c:	f7ff bfe2 	b.w	8011f44 <with_errno>

08011f80 <__math_uflow>:
 8011f80:	b508      	push	{r3, lr}
 8011f82:	2200      	movs	r2, #0
 8011f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011f88:	f7ff ffe6 	bl	8011f58 <xflow>
 8011f8c:	ec41 0b10 	vmov	d0, r0, r1
 8011f90:	bd08      	pop	{r3, pc}

08011f92 <__math_oflow>:
 8011f92:	b508      	push	{r3, lr}
 8011f94:	2200      	movs	r2, #0
 8011f96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011f9a:	f7ff ffdd 	bl	8011f58 <xflow>
 8011f9e:	ec41 0b10 	vmov	d0, r0, r1
 8011fa2:	bd08      	pop	{r3, pc}

08011fa4 <_init>:
 8011fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa6:	bf00      	nop
 8011fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011faa:	bc08      	pop	{r3}
 8011fac:	469e      	mov	lr, r3
 8011fae:	4770      	bx	lr

08011fb0 <_fini>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	bf00      	nop
 8011fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fb6:	bc08      	pop	{r3}
 8011fb8:	469e      	mov	lr, r3
 8011fba:	4770      	bx	lr
