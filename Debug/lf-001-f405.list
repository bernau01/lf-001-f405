
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08011f60  08011f60  00021f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127d0  080127d0  000304f4  2**0
                  CONTENTS
  4 .ARM          00000008  080127d0  080127d0  000227d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127d8  080127d8  000304f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127d8  080127d8  000227d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127dc  080127dc  000227dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f4  20000000  080127e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304f4  2**0
                  CONTENTS
 10 .bss          000011e4  200004f4  200004f4  000304f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200016d8  200016d8  000304f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030524  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e3a8  00000000  00000000  00030567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004e19  00000000  00000000  0004e90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a60  00000000  00000000  00053728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000148f  00000000  00000000  00055188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000229af  00000000  00000000  00056617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026b06  00000000  00000000  00078fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001319d9  00000000  00000000  0009facc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000081e0  00000000  00000000  001d14a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001d9688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f4 	.word	0x200004f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f44 	.word	0x08011f44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	08011f44 	.word	0x08011f44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000f98:	4a7e      	ldr	r2, [pc, #504]	; (8001194 <MX_ADC1_Init+0x210>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f9c:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa8:	4b79      	ldr	r3, [pc, #484]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbc:	4b74      	ldr	r3, [pc, #464]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fc4:	4a74      	ldr	r2, [pc, #464]	; (8001198 <MX_ADC1_Init+0x214>)
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b71      	ldr	r3, [pc, #452]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fce:	4b70      	ldr	r3, [pc, #448]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe2:	486b      	ldr	r0, [pc, #428]	; (8001190 <MX_ADC1_Init+0x20c>)
 8000fe4:	f008 feaa 	bl	8009d3c <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f001 f99e 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4863      	ldr	r0, [pc, #396]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001004:	f009 f91c 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100e:	f001 f98e 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001012:	230a      	movs	r3, #10
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	485c      	ldr	r0, [pc, #368]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001020:	f009 f90e 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102a:	f001 f980 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800102e:	230e      	movs	r3, #14
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001032:	2303      	movs	r3, #3
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4855      	ldr	r0, [pc, #340]	; (8001190 <MX_ADC1_Init+0x20c>)
 800103c:	f009 f900 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001046:	f001 f972 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800104a:	230b      	movs	r3, #11
 800104c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	484e      	ldr	r0, [pc, #312]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001058:	f009 f8f2 	bl	800a240 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001062:	f001 f964 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001066:	2307      	movs	r3, #7
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800106a:	2305      	movs	r3, #5
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4847      	ldr	r0, [pc, #284]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001074:	f009 f8e4 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107e:	f001 f956 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001082:	230c      	movs	r3, #12
 8001084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001086:	2306      	movs	r3, #6
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001090:	f009 f8d6 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800109a:	f001 f948 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800109e:	2306      	movs	r3, #6
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4838      	ldr	r0, [pc, #224]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010b0:	f009 f8c6 	bl	800a240 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010ba:	f001 f938 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010be:	230d      	movs	r3, #13
 80010c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010c2:	2308      	movs	r3, #8
 80010c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4830      	ldr	r0, [pc, #192]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010d0:	f009 f8b6 	bl	800a240 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010da:	f001 f928 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010de:	2305      	movs	r3, #5
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010e2:	2309      	movs	r3, #9
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4829      	ldr	r0, [pc, #164]	; (8001190 <MX_ADC1_Init+0x20c>)
 80010ec:	f009 f8a8 	bl	800a240 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010f6:	f001 f91a 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001108:	f009 f89a 	bl	800a240 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8001112:	f001 f90c 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001116:	2304      	movs	r3, #4
 8001118:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800111a:	230b      	movs	r3, #11
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001124:	f009 f88c 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800112e:	f001 f8fe 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001132:	2301      	movs	r3, #1
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001136:	230c      	movs	r3, #12
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001140:	f009 f87e 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800114a:	f001 f8f0 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800114e:	2303      	movs	r3, #3
 8001150:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001152:	230d      	movs	r3, #13
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_ADC1_Init+0x20c>)
 800115c:	f009 f870 	bl	800a240 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 8001166:	f001 f8e2 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800116a:	2302      	movs	r3, #2
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800116e:	230e      	movs	r3, #14
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_ADC1_Init+0x20c>)
 8001178:	f009 f862 	bl	800a240 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 8001182:	f001 f8d4 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000510 	.word	0x20000510
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_ADC_MspInit+0x11c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d178      	bne.n	80012b0 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a36      	ldr	r2, [pc, #216]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_ADC_MspInit+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <HAL_ADC_MspInit+0x120>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_ADC_MspInit+0x120>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001212:	233f      	movs	r3, #63	; 0x3f
 8001214:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <HAL_ADC_MspInit+0x124>)
 8001226:	f009 ff51 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <HAL_ADC_MspInit+0x128>)
 800123e:	f009 ff45 	bl	800b0cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x130>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800125c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001268:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001286:	f009 fbb1 	bl	800a9ec <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001290:	f001 f84d 	bl	800232e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_ADC_MspInit+0x12c>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2012      	movs	r0, #18
 80012a6:	f009 fb66 	bl	800a976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f009 fb7f 	bl	800a9ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	20000558 	.word	0x20000558
 80012cc:	40026410 	.word	0x40026410

080012d0 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d8:	2100      	movs	r1, #0
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DISP_ClearBuff+0x14>)
 80012dc:	f00e fbe7 	bl	800faae <memset>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200005b8 	.word	0x200005b8

080012e8 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	460b      	mov	r3, r1
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d03a      	beq.n	8001384 <DISP_DrawPixel+0x9c>
 800130e:	2b02      	cmp	r3, #2
 8001310:	dc39      	bgt.n	8001386 <DISP_DrawPixel+0x9e>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <DISP_DrawPixel+0x34>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d019      	beq.n	800134e <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 800131a:	e034      	b.n	8001386 <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	491c      	ldr	r1, [pc, #112]	; (8001394 <DISP_DrawPixel+0xac>)
 8001322:	01d2      	lsls	r2, r2, #7
 8001324:	440a      	add	r2, r1
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25a      	sxtb	r2, r3
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b259      	sxtb	r1, r3
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	b2c8      	uxtb	r0, r1
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <DISP_DrawPixel+0xac>)
 8001342:	01d2      	lsls	r2, r2, #7
 8001344:	440a      	add	r2, r1
 8001346:	4413      	add	r3, r2
 8001348:	4602      	mov	r2, r0
 800134a:	701a      	strb	r2, [r3, #0]
		break;
 800134c:	e01b      	b.n	8001386 <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4910      	ldr	r1, [pc, #64]	; (8001394 <DISP_DrawPixel+0xac>)
 8001354:	01d2      	lsls	r2, r2, #7
 8001356:	440a      	add	r2, r1
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	b25b      	sxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b259      	sxtb	r1, r3
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	b2c8      	uxtb	r0, r1
 8001376:	4907      	ldr	r1, [pc, #28]	; (8001394 <DISP_DrawPixel+0xac>)
 8001378:	01d2      	lsls	r2, r2, #7
 800137a:	440a      	add	r2, r1
 800137c:	4413      	add	r3, r2
 800137e:	4602      	mov	r2, r0
 8001380:	701a      	strb	r2, [r3, #0]
		break;
 8001382:	e000      	b.n	8001386 <DISP_DrawPixel+0x9e>
		break;
 8001384:	bf00      	nop
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200005b8 	.word	0x200005b8

08001398 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001398:	b490      	push	{r4, r7}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	4603      	mov	r3, r0
 80013ac:	71bb      	strb	r3, [r7, #6]
 80013ae:	460b      	mov	r3, r1
 80013b0:	717b      	strb	r3, [r7, #5]
 80013b2:	4613      	mov	r3, r2
 80013b4:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e08d      	b.n	80014ec <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	dd01      	ble.n	80013de <DISP_DrawChar+0x46>
 80013da:	2301      	movs	r3, #1
 80013dc:	e08b      	b.n	80014f6 <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f1a3 0220 	sub.w	r2, r3, #32
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	441a      	add	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a44      	ldr	r2, [pc, #272]	; (8001500 <DISP_DrawChar+0x168>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	461a      	mov	r2, r3
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f1a3 0220 	sub.w	r2, r3, #32
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4413      	add	r3, r2
 800140e:	4a3c      	ldr	r2, [pc, #240]	; (8001500 <DISP_DrawChar+0x168>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	461a      	mov	r2, r3
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	f1c3 0308 	rsb	r3, r3, #8
 800141a:	fa42 f303 	asr.w	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	e050      	b.n	80014ca <DISP_DrawChar+0x132>
			switch(color) {
 8001428:	793b      	ldrb	r3, [r7, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d049      	beq.n	80014c2 <DISP_DrawChar+0x12a>
 800142e:	2b02      	cmp	r3, #2
 8001430:	dc48      	bgt.n	80014c4 <DISP_DrawChar+0x12c>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <DISP_DrawChar+0xa4>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d01f      	beq.n	800147a <DISP_DrawChar+0xe2>
 800143a:	e043      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	441a      	add	r2, r3
 8001442:	79b9      	ldrb	r1, [r7, #6]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	440b      	add	r3, r1
 8001448:	492e      	ldr	r1, [pc, #184]	; (8001504 <DISP_DrawChar+0x16c>)
 800144a:	01d2      	lsls	r2, r2, #7
 800144c:	440a      	add	r2, r1
 800144e:	4413      	add	r3, r2
 8001450:	7818      	ldrb	r0, [r3, #0]
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	441a      	add	r2, r3
 8001462:	79bc      	ldrb	r4, [r7, #6]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4423      	add	r3, r4
 8001468:	4301      	orrs	r1, r0
 800146a:	b2c8      	uxtb	r0, r1
 800146c:	4925      	ldr	r1, [pc, #148]	; (8001504 <DISP_DrawChar+0x16c>)
 800146e:	01d2      	lsls	r2, r2, #7
 8001470:	440a      	add	r2, r1
 8001472:	4413      	add	r3, r2
 8001474:	4602      	mov	r2, r0
 8001476:	701a      	strb	r2, [r3, #0]
				break;
 8001478:	e024      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	441a      	add	r2, r3
 8001480:	79b9      	ldrb	r1, [r7, #6]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	440b      	add	r3, r1
 8001486:	491f      	ldr	r1, [pc, #124]	; (8001504 <DISP_DrawChar+0x16c>)
 8001488:	01d2      	lsls	r2, r2, #7
 800148a:	440a      	add	r2, r1
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25a      	sxtb	r2, r3
 8001492:	f107 010c 	add.w	r1, r7, #12
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b258      	sxtb	r0, r3
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	441a      	add	r2, r3
 80014ac:	79b9      	ldrb	r1, [r7, #6]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	440b      	add	r3, r1
 80014b2:	b2c0      	uxtb	r0, r0
 80014b4:	4913      	ldr	r1, [pc, #76]	; (8001504 <DISP_DrawChar+0x16c>)
 80014b6:	01d2      	lsls	r2, r2, #7
 80014b8:	440a      	add	r2, r1
 80014ba:	4413      	add	r3, r2
 80014bc:	4602      	mov	r2, r0
 80014be:	701a      	strb	r2, [r3, #0]
				break;
 80014c0:	e000      	b.n	80014c4 <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014c2:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <DISP_DrawChar+0x13c>
 80014d0:	2202      	movs	r2, #2
 80014d2:	e000      	b.n	80014d6 <DISP_DrawChar+0x13e>
 80014d4:	2201      	movs	r2, #1
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dd04      	ble.n	80014e6 <DISP_DrawChar+0x14e>
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	dda0      	ble.n	8001428 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	f77f af6e 	ble.w	80013d0 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc90      	pop	{r4, r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000
 8001504:	200005b8 	.word	0x200005b8

08001508 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4603      	mov	r3, r0
 8001518:	70fb      	strb	r3, [r7, #3]
 800151a:	460b      	mov	r3, r1
 800151c:	70bb      	strb	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
	while(*text)
 8001526:	e015      	b.n	8001554 <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	7818      	ldrb	r0, [r3, #0]
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	73fa      	strb	r2, [r7, #15]
 8001536:	461a      	mov	r2, r3
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	4413      	add	r3, r2
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	787b      	ldrb	r3, [r7, #1]
 8001548:	78ba      	ldrb	r2, [r7, #2]
 800154a:	f7ff ff25 	bl	8001398 <DISP_DrawChar>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <DISP_DrawText+0x56>
	while(*text)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e5      	bne.n	8001528 <DISP_DrawText+0x20>
}
 800155c:	e000      	b.n	8001560 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 800155e:	bf00      	nop
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4603      	mov	r3, r0
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	717b      	strb	r3, [r7, #5]
 8001582:	4613      	mov	r3, r2
 8001584:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 8001586:	793a      	ldrb	r2, [r7, #4]
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	429a      	cmp	r2, r3
 800158c:	d104      	bne.n	8001598 <DISP_DrawLineSimple+0x30>
 800158e:	797a      	ldrb	r2, [r7, #5]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	429a      	cmp	r2, r3
 8001594:	f000 8086 	beq.w	80016a4 <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 8001598:	797a      	ldrb	r2, [r7, #5]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	1ad2      	subs	r2, r2, r3
 800159e:	7939      	ldrb	r1, [r7, #4]
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	1acb      	subs	r3, r1, r3
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db3e      	blt.n	8001626 <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015a8:	793a      	ldrb	r2, [r7, #4]
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015b6:	797a      	ldrb	r2, [r7, #5]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c8:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e022      	b.n	8001618 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4413      	add	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	ee07 2a90 	vmov	s15, r2
 80015e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	ee07 2a90 	vmov	s15, r2
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001600:	edc7 7a00 	vstr	s15, [r7]
 8001604:	783a      	ldrb	r2, [r7, #0]
 8001606:	b2d1      	uxtb	r1, r2
 8001608:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe6b 	bl	80012e8 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	797a      	ldrb	r2, [r7, #5]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	ddd6      	ble.n	80015d2 <DISP_DrawLineSimple+0x6a>
 8001624:	e03f      	b.n	80016a6 <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 8001626:	797a      	ldrb	r2, [r7, #5]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001634:	793a      	ldrb	r2, [r7, #4]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e022      	b.n	8001696 <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	edd7 7a03 	vldr	s15, [r7, #12]
 800165e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	edc7 7a00 	vstr	s15, [r7]
 8001678:	783b      	ldrb	r3, [r7, #0]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fe2c 	bl	80012e8 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3301      	adds	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	793a      	ldrb	r2, [r7, #4]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	429a      	cmp	r2, r3
 80016a0:	ddd6      	ble.n	8001650 <DISP_DrawLineSimple+0xe8>
 80016a2:	e000      	b.n	80016a6 <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016a4:	bf00      	nop
		}
	}
}
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}

080016ac <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	4603      	mov	r3, r0
 80016c0:	71bb      	strb	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	717b      	strb	r3, [r7, #5]
 80016c6:	4613      	mov	r3, r2
 80016c8:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016ca:	79bc      	ldrb	r4, [r7, #6]
 80016cc:	797a      	ldrb	r2, [r7, #5]
 80016ce:	79b9      	ldrb	r1, [r7, #6]
 80016d0:	79f8      	ldrb	r0, [r7, #7]
 80016d2:	7e3b      	ldrb	r3, [r7, #24]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7ff ff46 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016dc:	793c      	ldrb	r4, [r7, #4]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	79b9      	ldrb	r1, [r7, #6]
 80016e2:	79f8      	ldrb	r0, [r7, #7]
 80016e4:	7e3b      	ldrb	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	f7ff ff3d 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016ee:	793c      	ldrb	r4, [r7, #4]
 80016f0:	797a      	ldrb	r2, [r7, #5]
 80016f2:	79b9      	ldrb	r1, [r7, #6]
 80016f4:	7978      	ldrb	r0, [r7, #5]
 80016f6:	7e3b      	ldrb	r3, [r7, #24]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4623      	mov	r3, r4
 80016fc:	f7ff ff34 	bl	8001568 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001700:	793c      	ldrb	r4, [r7, #4]
 8001702:	797a      	ldrb	r2, [r7, #5]
 8001704:	7939      	ldrb	r1, [r7, #4]
 8001706:	79f8      	ldrb	r0, [r7, #7]
 8001708:	7e3b      	ldrb	r3, [r7, #24]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4623      	mov	r3, r4
 800170e:	f7ff ff2b 	bl	8001568 <DISP_DrawLineSimple>
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
	...

0800171c <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 800171c:	b490      	push	{r4, r7}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4603      	mov	r3, r0
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	460b      	mov	r3, r1
 8001734:	717b      	strb	r3, [r7, #5]
 8001736:	4613      	mov	r3, r2
 8001738:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001748:	793b      	ldrb	r3, [r7, #4]
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e074      	b.n	8001846 <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e06a      	b.n	8001838 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	429a      	cmp	r2, r3
 8001768:	d109      	bne.n	800177e <DISP_FillRect+0x62>
 800176a:	7b3b      	ldrb	r3, [r7, #12]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d005      	beq.n	800177e <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	22ff      	movs	r2, #255	; 0xff
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e022      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 800177e:	7bba      	ldrb	r2, [r7, #14]
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	429a      	cmp	r2, r3
 8001784:	d110      	bne.n	80017a8 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	f1c3 0307 	rsb	r3, r3, #7
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	fa42 f303 	asr.w	r3, r2, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	7b7b      	ldrb	r3, [r7, #13]
 8001796:	f1c3 0308 	rsb	r3, r3, #8
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	fa41 f303 	asr.w	r3, r1, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e00d      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	fa42 f303 	asr.w	r3, r2, r3
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e001      	b.n	80017c4 <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c0:	23ff      	movs	r3, #255	; 0xff
 80017c2:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d031      	beq.n	8001830 <DISP_FillRect+0x114>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	dc30      	bgt.n	8001832 <DISP_FillRect+0x116>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <DISP_FillRect+0xbe>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d013      	beq.n	8001800 <DISP_FillRect+0xe4>
 80017d8:	e02b      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017da:	4a20      	ldr	r2, [pc, #128]	; (800185c <DISP_FillRect+0x140>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	01db      	lsls	r3, r3, #7
 80017e0:	441a      	add	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4413      	add	r3, r2
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b2d9      	uxtb	r1, r3
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <DISP_FillRect+0x140>)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	441a      	add	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	460a      	mov	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
				break;
 80017fe:	e018      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <DISP_FillRect+0x140>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	01db      	lsls	r3, r3, #7
 8001806:	441a      	add	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25a      	sxtb	r2, r3
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	43db      	mvns	r3, r3
 8001816:	b25b      	sxtb	r3, r3
 8001818:	4013      	ands	r3, r2
 800181a:	b25b      	sxtb	r3, r3
 800181c:	b2d9      	uxtb	r1, r3
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <DISP_FillRect+0x140>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	441a      	add	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4413      	add	r3, r2
 800182a:	460a      	mov	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
				break;
 800182e:	e000      	b.n	8001832 <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001830:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	dd90      	ble.n	8001762 <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	429a      	cmp	r2, r3
 800184c:	dd86      	ble.n	800175c <DISP_FillRect+0x40>
			}
		}
	}
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bc90      	pop	{r4, r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200005b8 	.word	0x200005b8

08001860 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e002      	b.n	8001874 <DISP_CountCharString+0x14>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f6      	bne.n	800186e <DISP_CountCharString+0xe>
	return ct;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f7ff ffe0 	bl	8001860 <DISP_CountCharString>
 80018a0:	4603      	mov	r3, r0
 80018a2:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	461a      	mov	r2, r3
 80018a8:	0052      	lsls	r2, r2, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	78db      	ldrb	r3, [r3, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	757b      	strb	r3, [r7, #21]
 80018ca:	e005      	b.n	80018d8 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	4413      	add	r3, r2
 80018d6:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d804      	bhi.n	80018ea <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	3308      	adds	r3, #8
 80018e6:	753b      	strb	r3, [r7, #20]
 80018e8:	e005      	b.n	80018f6 <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	785a      	ldrb	r2, [r3, #1]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7818      	ldrb	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 8001902:	2b01      	cmp	r3, #1
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461c      	mov	r4, r3
 800190e:	7d3b      	ldrb	r3, [r7, #20]
 8001910:	7d7a      	ldrb	r2, [r7, #21]
 8001912:	9400      	str	r4, [sp, #0]
 8001914:	f7ff ff02 	bl	800171c <DISP_FillRect>

	switch(s->align_x) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	795b      	ldrb	r3, [r3, #5]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d010      	beq.n	8001942 <DISP_DisplayText+0xb2>
 8001920:	2b02      	cmp	r3, #2
 8001922:	dc20      	bgt.n	8001966 <DISP_DisplayText+0xd6>
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <DISP_DisplayText+0x9e>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <DISP_DisplayText+0xa8>
 800192c:	e01b      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
		break;
 8001936:	e016      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001938:	7d7a      	ldrb	r2, [r7, #21]
 800193a:	7abb      	ldrb	r3, [r7, #10]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	75fb      	strb	r3, [r7, #23]
		break;
 8001940:	e011      	b.n	8001966 <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	7809      	ldrb	r1, [r1, #0]
 800194c:	1a5b      	subs	r3, r3, r1
 800194e:	0fd9      	lsrs	r1, r3, #31
 8001950:	440b      	add	r3, r1
 8001952:	105b      	asrs	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b2da      	uxtb	r2, r3
 800195a:	7abb      	ldrb	r3, [r7, #10]
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	75fb      	strb	r3, [r7, #23]
		break;
 8001964:	bf00      	nop
	}

	switch(s->align_y) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	799b      	ldrb	r3, [r3, #6]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d00f      	beq.n	800198e <DISP_DisplayText+0xfe>
 800196e:	2b02      	cmp	r3, #2
 8001970:	dc1c      	bgt.n	80019ac <DISP_DisplayText+0x11c>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <DISP_DisplayText+0xec>
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <DISP_DisplayText+0xf6>
 800197a:	e017      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	3301      	adds	r3, #1
 8001982:	75bb      	strb	r3, [r7, #22]
		break;
 8001984:	e012      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 8001986:	7d3b      	ldrb	r3, [r7, #20]
 8001988:	3b07      	subs	r3, #7
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e00e      	b.n	80019ac <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	7d3b      	ldrb	r3, [r7, #20]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	7849      	ldrb	r1, [r1, #1]
 8001998:	1a5b      	subs	r3, r3, r1
 800199a:	0fd9      	lsrs	r1, r3, #31
 800199c:	440b      	add	r3, r1
 800199e:	105b      	asrs	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b03      	subs	r3, #3
 80019a8:	75bb      	strb	r3, [r7, #22]
		break;
 80019aa:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	7dba      	ldrb	r2, [r7, #22]
 80019b2:	7df9      	ldrb	r1, [r7, #23]
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff fda7 	bl	8001508 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	08db      	lsrs	r3, r3, #3
 80019c0:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019c2:	7d3b      	ldrb	r3, [r7, #20]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019c8:	7a7b      	ldrb	r3, [r7, #9]
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e024      	b.n	8001a18 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fee0 	bl	8002798 <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fef0 	bl	80027c2 <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e00c      	b.n	8001a04 <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <DISP_DisplayText+0x1a0>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	441a      	add	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 feb5 	bl	8002768 <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dc02      	bgt.n	8001a12 <DISP_DisplayText+0x182>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	ddeb      	ble.n	80019ea <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	7a3b      	ldrb	r3, [r7, #8]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dc02      	bgt.n	8001a26 <DISP_DisplayText+0x196>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	ddd3      	ble.n	80019ce <DISP_DisplayText+0x13e>
		}
	}

}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005b8 	.word	0x200005b8

08001a34 <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	4603      	mov	r3, r0
 8001a48:	71bb      	strb	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	717b      	strb	r3, [r7, #5]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a58:	793b      	ldrb	r3, [r7, #4]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e022      	b.n	8001aaa <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fe95 	bl	8002798 <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fea6 	bl	80027c2 <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00c      	b.n	8001a96 <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a7c:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <DISP_OLEDUpdate+0x8c>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	441a      	add	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fe6c 	bl	8002768 <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	3301      	adds	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dc02      	bgt.n	8001aa4 <DISP_OLEDUpdate+0x70>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa2:	ddeb      	ble.n	8001a7c <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dc02      	bgt.n	8001ab8 <DISP_OLEDUpdate+0x84>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b07      	cmp	r3, #7
 8001ab6:	ddd5      	ble.n	8001a64 <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	200005b8 	.word	0x200005b8

08001ac4 <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7818      	ldrb	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001adc:	4413      	add	r3, r2
 8001ade:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	785a      	ldrb	r2, [r3, #1]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	4622      	mov	r2, r4
 8001af6:	f7ff fe11 	bl	800171c <DISP_FillRect>
			s->color);
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
	...

08001b04 <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	483e      	ldr	r0, [pc, #248]	; (8001c0c <DISP_Test+0x108>)
 8001b12:	f7ff fcf9 	bl	8001508 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b16:	2300      	movs	r3, #0
 8001b18:	2208      	movs	r2, #8
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	483c      	ldr	r0, [pc, #240]	; (8001c10 <DISP_Test+0x10c>)
 8001b1e:	f7ff fcf3 	bl	8001508 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b22:	2300      	movs	r3, #0
 8001b24:	2210      	movs	r2, #16
 8001b26:	2100      	movs	r1, #0
 8001b28:	483a      	ldr	r0, [pc, #232]	; (8001c14 <DISP_Test+0x110>)
 8001b2a:	f7ff fced 	bl	8001508 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	233e      	movs	r3, #62	; 0x3e
 8001b34:	227a      	movs	r2, #122	; 0x7a
 8001b36:	211e      	movs	r1, #30
 8001b38:	203e      	movs	r0, #62	; 0x3e
 8001b3a:	f7ff fdb7 	bl	80016ac <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	233c      	movs	r3, #60	; 0x3c
 8001b44:	2278      	movs	r2, #120	; 0x78
 8001b46:	2120      	movs	r1, #32
 8001b48:	2040      	movs	r0, #64	; 0x40
 8001b4a:	f7ff fde7 	bl	800171c <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b4e:	2301      	movs	r3, #1
 8001b50:	222a      	movs	r2, #42	; 0x2a
 8001b52:	2151      	movs	r1, #81	; 0x51
 8001b54:	4830      	ldr	r0, [pc, #192]	; (8001c18 <DISP_Test+0x114>)
 8001b56:	f7ff fcd7 	bl	8001508 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e01d      	b.n	8001b9c <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fe17 	bl	8002798 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 fe29 	bl	80027c2 <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	e00c      	b.n	8001b90 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <DISP_Test+0x118>)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	441a      	add	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fdef 	bl	8002768 <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b7f      	cmp	r3, #127	; 0x7f
 8001b94:	ddef      	ble.n	8001b76 <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	ddde      	ble.n	8001b60 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e022      	b.n	8001bee <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	3304      	adds	r3, #4
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fdf1 	bl	8002798 <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f000 fe03 	bl	80027c2 <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	e00f      	b.n	8001be2 <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <DISP_Test+0x11c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fdc6 	bl	8002768 <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b27      	cmp	r3, #39	; 0x27
 8001be6:	ddec      	ble.n	8001bc2 <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	ddd9      	ble.n	8001ba8 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf8:	f008 f87c 	bl	8009cf4 <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001bfc:	f000 fdfb 	bl	80027f6 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c00:	f7ff fb66 	bl	80012d0 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	08011f60 	.word	0x08011f60
 8001c10:	08011f74 	.word	0x08011f74
 8001c14:	08011f88 	.word	0x08011f88
 8001c18:	08011f90 	.word	0x08011f90
 8001c1c:	200005b8 	.word	0x200005b8
 8001c20:	200001e8 	.word	0x200001e8

08001c24 <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c28:	f000 fde5 	bl	80027f6 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c2c:	f7ff fb50 	bl	80012d0 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c30:	20af      	movs	r0, #175	; 0xaf
 8001c32:	f000 fd6d 	bl	8002710 <OLED_Command>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_DMA_Init+0x3c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2038      	movs	r0, #56	; 0x38
 8001c64:	f008 fe87 	bl	800a976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f008 fea0 	bl	800a9ae <HAL_NVIC_EnableIRQ>

}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <EEP_Init+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200009b8 	.word	0x200009b8

08001c9c <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <EEP_WritePage+0x40>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	21a0      	movs	r1, #160	; 0xa0
 8001cc4:	f009 fd14 	bl	800b6f0 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cc8:	f008 f808 	bl	8009cdc <HAL_GetTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <EEP_WritePage+0x44>)
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200009b8 	.word	0x200009b8
 8001ce0:	200009bc 	.word	0x200009bc

08001ce4 <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	80fb      	strh	r3, [r7, #6]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <EEP_WriteMem+0x40>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	2164      	movs	r1, #100	; 0x64
 8001d00:	9102      	str	r1, [sp, #8]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	21a0      	movs	r1, #160	; 0xa0
 8001d0c:	f009 fcf0 	bl	800b6f0 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d10:	f007 ffe4 	bl	8009cdc <HAL_GetTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <EEP_WriteMem+0x44>)
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200009b8 	.word	0x200009b8
 8001d28:	200009bc 	.word	0x200009bc

08001d2c <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af04      	add	r7, sp, #16
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <EEP_ReadPage+0x40>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	89fa      	ldrh	r2, [r7, #14]
 8001d44:	2364      	movs	r3, #100	; 0x64
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2340      	movs	r3, #64	; 0x40
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	21a0      	movs	r1, #160	; 0xa0
 8001d54:	f009 fdc6 	bl	800b8e4 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <EEP_ReadPage+0x44>)
 8001d60:	801a      	strh	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200009b8 	.word	0x200009b8
 8001d70:	200009c0 	.word	0x200009c0

08001d74 <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <EEP_ReadMem+0x44>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	797b      	ldrb	r3, [r7, #5]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	9102      	str	r1, [sp, #8]
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	21a0      	movs	r1, #160	; 0xa0
 8001d9c:	f009 fda2 	bl	800b8e4 <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4413      	add	r3, r2
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <EEP_ReadMem+0x48>)
 8001dac:	801a      	strh	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200009b8 	.word	0x200009b8
 8001dbc:	200009c0 	.word	0x200009c0

08001dc0 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dc4:	f007 ff8a 	bl	8009cdc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <EEP_ReadyToWrite+0x20>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d901      	bls.n	8001dd8 <EEP_ReadyToWrite+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <EEP_ReadyToWrite+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009bc 	.word	0x200009bc

08001de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3e      	ldr	r2, [pc, #248]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a37      	ldr	r2, [pc, #220]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e70:	482a      	ldr	r0, [pc, #168]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e72:	f009 fadf 	bl	800b434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001e7e:	f009 fad9 	bl	800b434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4821      	ldr	r0, [pc, #132]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e98:	f009 f918 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4819      	ldr	r0, [pc, #100]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001eb6:	f009 f909 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ec0:	2311      	movs	r3, #17
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001ed4:	f009 f8fa 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ed8:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001edc:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001eee:	f009 f8ed 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001f0c:	f009 f8de 	bl	800b0cc <HAL_GPIO_Init>

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400

08001f24 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <MX_I2C1_Init+0x58>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x5c>)
 8001f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f64:	f009 fa80 	bl	800b468 <HAL_I2C_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f6e:	f000 f9de 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200009c4 	.word	0x200009c4
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	00061a80 	.word	0x00061a80

08001f84 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <MX_I2C2_Init+0x54>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x58>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_I2C2_Init+0x50>)
 8001fc2:	f009 fa51 	bl	800b468 <HAL_I2C_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fcc:	f000 f9af 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000a18 	.word	0x20000a18
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	000186a0 	.word	0x000186a0

08001fe0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_I2C_MspInit+0xec>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12d      	bne.n	800205e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002024:	2312      	movs	r3, #18
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002030:	2304      	movs	r3, #4
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4826      	ldr	r0, [pc, #152]	; (80020d4 <HAL_I2C_MspInit+0xf4>)
 800203c:	f009 f846 	bl	800b0cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800205c:	e031      	b.n	80020c2 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_I2C_MspInit+0xf8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12c      	bne.n	80020c2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002084:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002096:	2304      	movs	r3, #4
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <HAL_I2C_MspInit+0xf4>)
 80020a2:	f009 f813 	bl	800b0cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_I2C_MspInit+0xf0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
}
 80020c2:	bf00      	nop
 80020c4:	3730      	adds	r7, #48	; 0x30
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40005800 	.word	0x40005800

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f007 fd96 	bl	8009c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f868 	bl	80021b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f7ff fe7c 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ec:	f7ff fda6 	bl	8001c3c <MX_DMA_Init>
  MX_ADC1_Init();
 80020f0:	f7fe ff48 	bl	8000f84 <MX_ADC1_Init>
  MX_I2C1_Init();
 80020f4:	f7ff ff16 	bl	8001f24 <MX_I2C1_Init>
  MX_I2C2_Init();
 80020f8:	f7ff ff44 	bl	8001f84 <MX_I2C2_Init>
  MX_TIM1_Init();
 80020fc:	f004 f830 	bl	8006160 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002100:	f004 f8e6 	bl	80062d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002104:	f004 f938 	bl	8006378 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002108:	f004 f9b0 	bl	800646c <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800210c:	f007 fcdc 	bl	8009ac8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002110:	f007 fc68 	bl	80099e4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002114:	f004 f9fe 	bl	8006514 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <main+0xb8>)
 800211a:	f7ff fdaf 	bl	8001c7c <EEP_Init>
  SEN_Init(&hadc1);
 800211e:	481e      	ldr	r0, [pc, #120]	; (8002198 <main+0xbc>)
 8002120:	f002 febc 	bl	8004e9c <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002124:	213c      	movs	r1, #60	; 0x3c
 8002126:	481d      	ldr	r0, [pc, #116]	; (800219c <main+0xc0>)
 8002128:	f00b f98e 	bl	800d448 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	481c      	ldr	r0, [pc, #112]	; (80021a0 <main+0xc4>)
 8002130:	f00b f98a 	bl	800d448 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002134:	2100      	movs	r1, #0
 8002136:	481b      	ldr	r0, [pc, #108]	; (80021a4 <main+0xc8>)
 8002138:	f00b f818 	bl	800d16c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800213c:	2104      	movs	r1, #4
 800213e:	4819      	ldr	r0, [pc, #100]	; (80021a4 <main+0xc8>)
 8002140:	f00b f814 	bl	800d16c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002144:	2108      	movs	r1, #8
 8002146:	4817      	ldr	r0, [pc, #92]	; (80021a4 <main+0xc8>)
 8002148:	f00b f810 	bl	800d16c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800214c:	210c      	movs	r1, #12
 800214e:	4815      	ldr	r0, [pc, #84]	; (80021a4 <main+0xc8>)
 8002150:	f00b f80c 	bl	800d16c <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8002154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002158:	f007 fdcc 	bl	8009cf4 <HAL_Delay>
  Run_Init();
 800215c:	f001 fe0e 	bl	8003d7c <Run_Init>
  OLED_Init(&hi2c1);
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <main+0xcc>)
 8002162:	f000 fb6d 	bl	8002840 <OLED_Init>
  DISP_Test();
 8002166:	f7ff fccd 	bl	8001b04 <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <main+0xd0>)
 8002172:	f009 f95f 	bl	800b434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <main+0xd4>)
 800217e:	f009 f959 	bl	800b434 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <main+0xd8>)
 8002184:	f00a ff32 	bl	800cfec <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002188:	f007 fba0 	bl	80098cc <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 800218c:	f007 fbac 	bl	80098e8 <UI_Main>
 8002190:	e7fc      	b.n	800218c <main+0xb0>
 8002192:	bf00      	nop
 8002194:	20000a18 	.word	0x20000a18
 8002198:	20000510 	.word	0x20000510
 800219c:	20000e24 	.word	0x20000e24
 80021a0:	20000eb4 	.word	0x20000eb4
 80021a4:	20000e6c 	.word	0x20000e6c
 80021a8:	200009c4 	.word	0x200009c4
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020400 	.word	0x40020400
 80021b4:	20000efc 	.word	0x20000efc

080021b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	; 0x50
 80021bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	2230      	movs	r2, #48	; 0x30
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00d fc71 	bl	800faae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <SystemClock_Config+0xcc>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <SystemClock_Config+0xcc>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <SystemClock_Config+0xcc>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <SystemClock_Config+0xd0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <SystemClock_Config+0xd0>)
 8002202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <SystemClock_Config+0xd0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221e:	2302      	movs	r3, #2
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002228:	2308      	movs	r3, #8
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800222c:	23a8      	movs	r3, #168	; 0xa8
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002230:	2302      	movs	r3, #2
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002234:	2307      	movs	r3, #7
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f00a f9ef 	bl	800c620 <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002248:	f000 f871 	bl	800232e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224c:	230f      	movs	r3, #15
 800224e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800225e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2105      	movs	r1, #5
 800226a:	4618      	mov	r0, r3
 800226c:	f00a fc50 	bl	800cb10 <HAL_RCC_ClockConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002276:	f000 f85a 	bl	800232e <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3750      	adds	r7, #80	; 0x50
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12d      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a6:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		Run_MotorRoutine(0.001);
 80022a8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022ac:	f001 fdd4 	bl	8003e58 <Run_MotorRoutine>
		if(counter >= 10) {
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	dd09      	ble.n	80022cc <HAL_TIM_PeriodElapsedCallback+0x40>
			main_flag |= MAIN_FLAG_DISP;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022c4:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
		}
		Plan_Main(0.001);
 80022cc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022d0:	f001 fb7c 	bl	80039cc <Plan_Main>
		Run_MotorRoutine2(0.001);
 80022d4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800230c <HAL_TIM_PeriodElapsedCallback+0x80>
 80022d8:	f001 fe22 	bl	8003f20 <Run_MotorRoutine2>
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022e8:	f002 fe6a 	bl	8004fc0 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022f8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40001000 	.word	0x40001000
 8002308:	20000a70 	.word	0x20000a70
 800230c:	3a83126f 	.word	0x3a83126f
 8002310:	20000a6c 	.word	0x20000a6c
 8002314:	20000cc9 	.word	0x20000cc9

08002318 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f002 fe5d 	bl	8004fe0 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002332:	b672      	cpsid	i
}
 8002334:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002336:	e7fe      	b.n	8002336 <Error_Handler+0x8>

08002338 <Motor_SetPWM>:

//void Motor_SetAccl(Motor_typedef* hmot, float value) {
//	hmot->acc = value;
//}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002344:	edd7 7a00 	vldr	s15, [r7]
 8002348:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002384 <Motor_SetPWM+0x4c>
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	dd02      	ble.n	800235c <Motor_SetPWM+0x24>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <Motor_SetPWM+0x50>)
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	e00a      	b.n	8002372 <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 800235c:	edd7 7a00 	vldr	s15, [r7]
 8002360:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800238c <Motor_SetPWM+0x54>
 8002364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d501      	bpl.n	8002372 <Motor_SetPWM+0x3a>
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <Motor_SetPWM+0x58>)
 8002370:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	621a      	str	r2, [r3, #32]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	42c60000 	.word	0x42c60000
 8002388:	42c60000 	.word	0x42c60000
 800238c:	c2c60000 	.word	0xc2c60000
 8002390:	c2c60000 	.word	0xc2c60000

08002394 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023a6:	ed97 7a00 	vldr	s14, [r7]
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023b2:	edd7 7a00 	vldr	s15, [r7]
 80023b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <Motor_SetPoint+0x1a>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d006      	beq.n	80023f6 <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023e8:	e00b      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023ea:	ed97 0a00 	vldr	s0, [r7]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <Motor_SetPWM>
		break;
 80023f4:	e005      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 80023f6:	ed97 0a00 	vldr	s0, [r7]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffca 	bl	8002394 <Motor_SetVel>
		break;
 8002400:	bf00      	nop
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <Motor_GetPoint>:

float Motor_GetPoint(Motor_typedef* hmot) {
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	switch(hmot->mode) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10c      	bne.n	8002434 <Motor_GetPoint+0x2a>
	case MOTOR_MODE_CLOSE:
		return (hmot->vel_sp/hmot->vel_factor);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800242e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002432:	e002      	b.n	800243a <Motor_GetPoint+0x30>
		break;
	case MOTOR_MODE_OPEN:
	default:
		return hmot->pwm;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edd3 7a08 	vldr	s15, [r3, #32]
		break;
	}
}
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
//	range /= hmot->acc;
//
//	if(hmot->acc_last_val < hmot->pwm) hmot->acc_last_val = hmot->pwm + range;
//	else if(hmot->acc_last_val > hmot->pwm) hmot->acc_last_val = hmot->pwm - range;

	int16_t tim_period = (hmot->pwm * hmot->pwm_factor) * hmot->pwm_htim->Init.Period;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	ed93 7a08 	vldr	s14, [r3, #32]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800245c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	0bdb      	lsrs	r3, r3, #15
 8002480:	b2db      	uxtb	r3, r3
 8002482:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002484:	7b7b      	ldrb	r3, [r7, #13]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <Motor_ApplyPWM+0x4a>
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	425b      	negs	r3, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002492:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	429a      	cmp	r2, r3
 800249e:	d903      	bls.n	80024a8 <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 80024a8:	7b7b      	ldrb	r3, [r7, #13]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d04a      	beq.n	8002544 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	891b      	ldrh	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <Motor_ApplyPWM+0x7a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
 80024c0:	e018      	b.n	80024f4 <Motor_ApplyPWM+0xac>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	891b      	ldrh	r3, [r3, #8]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d105      	bne.n	80024d6 <Motor_ApplyPWM+0x8e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	6393      	str	r3, [r2, #56]	; 0x38
 80024d4:	e00e      	b.n	80024f4 <Motor_ApplyPWM+0xac>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	891b      	ldrh	r3, [r3, #8]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d105      	bne.n	80024ea <Motor_ApplyPWM+0xa2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024e8:	e004      	b.n	80024f4 <Motor_ApplyPWM+0xac>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	895b      	ldrh	r3, [r3, #10]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <Motor_ApplyPWM+0xc2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 8002508:	e067      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	895b      	ldrh	r3, [r3, #10]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d106      	bne.n	8002520 <Motor_ApplyPWM+0xd8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251c:	6393      	str	r3, [r2, #56]	; 0x38
 800251e:	e05c      	b.n	80025da <Motor_ApplyPWM+0x192>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	895b      	ldrh	r3, [r3, #10]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d106      	bne.n	8002536 <Motor_ApplyPWM+0xee>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002532:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002534:	e051      	b.n	80025da <Motor_ApplyPWM+0x192>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002542:	e04a      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	891b      	ldrh	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <Motor_ApplyPWM+0x112>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002556:	635a      	str	r2, [r3, #52]	; 0x34
 8002558:	e01b      	b.n	8002592 <Motor_ApplyPWM+0x14a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	891b      	ldrh	r3, [r3, #8]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d106      	bne.n	8002570 <Motor_ApplyPWM+0x128>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256c:	6393      	str	r3, [r2, #56]	; 0x38
 800256e:	e010      	b.n	8002592 <Motor_ApplyPWM+0x14a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	891b      	ldrh	r3, [r3, #8]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d106      	bne.n	8002586 <Motor_ApplyPWM+0x13e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002582:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002584:	e005      	b.n	8002592 <Motor_ApplyPWM+0x14a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	895b      	ldrh	r3, [r3, #10]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <Motor_ApplyPWM+0x15e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025a4:	e019      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d105      	bne.n	80025ba <Motor_ApplyPWM+0x172>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025b8:	e00f      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	895b      	ldrh	r3, [r3, #10]
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d105      	bne.n	80025ce <Motor_ApplyPWM+0x186>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80025cc:	e005      	b.n	80025da <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80025d8:	e7ff      	b.n	80025da <Motor_ApplyPWM+0x192>
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = (int16_t)__HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002602:	b29b      	uxth	r3, r3
 8002604:	fb12 f303 	smulbb	r3, r2, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  (int16_t)(tim_cnt_now - hmot->enc_last_cnt);
 800260c:	89fa      	ldrh	r2, [r7, #14]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002614:	b29b      	uxth	r3, r3
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	b21b      	sxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	61da      	str	r2, [r3, #28]
	hmot->enc_last_cnt = tim_cnt_now;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	89fa      	ldrh	r2, [r7, #14]
 8002626:	829a      	strh	r2, [r3, #20]
	hmot->enc_cnt += hmot->enc_vel;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d050      	beq.n	80026fa <Motor_ControlRoutine+0xb6>
 8002658:	2b01      	cmp	r3, #1
 800265a:	d151      	bne.n	8002700 <Motor_ControlRoutine+0xbc>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002662:	461a      	mov	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	edc7 7a03 	vstr	s15, [r7, #12]
		if(hmot->vel_sp == 0) hmot->sum_error=0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <Motor_ControlRoutine+0x44>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c
//		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800268e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026a6:	edd7 7a00 	vldr	s15, [r7]
 80026aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90 || mv<-90) {
 80026b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002708 <Motor_ControlRoutine+0xc4>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	dc12      	bgt.n	80026ee <Motor_ControlRoutine+0xaa>
 80026c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800270c <Motor_ControlRoutine+0xc8>
 80026d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	d409      	bmi.n	80026ee <Motor_ControlRoutine+0xaa>
//			hmot->sum_error*=0.9;
		}
		else {
			hmot->sum_error += error;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80026e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
		hmot->pwm = mv;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	621a      	str	r2, [r3, #32]
		hmot->last_error = error;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38

//		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
//		hmot->pwm = hmot->filter;

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fea4 	bl	8002448 <Motor_ApplyPWM>
	}
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	42b40000 	.word	0x42b40000
 800270c:	c2b40000 	.word	0xc2b40000

08002710 <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af04      	add	r7, sp, #16
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <OLED_Command+0x2c>)
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	230a      	movs	r3, #10
 8002720:	9302      	str	r3, [sp, #8]
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	1dfb      	adds	r3, r7, #7
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2301      	movs	r3, #1
 800272c:	2200      	movs	r2, #0
 800272e:	2178      	movs	r1, #120	; 0x78
 8002730:	f008 ffde 	bl	800b6f0 <HAL_I2C_Mem_Write>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000a74 	.word	0x20000a74

08002740 <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	460a      	mov	r2, r1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	4613      	mov	r3, r2
 800274e:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ffdc 	bl	8002710 <OLED_Command>
	OLED_Command(byte2);
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ffd8 	bl	8002710 <OLED_Command>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af04      	add	r7, sp, #16
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <OLED_Data+0x2c>)
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	230a      	movs	r3, #10
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2301      	movs	r3, #1
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2301      	movs	r3, #1
 8002784:	2240      	movs	r2, #64	; 0x40
 8002786:	2178      	movs	r1, #120	; 0x78
 8002788:	f008 ffb2 	bl	800b6f0 <HAL_I2C_Mem_Write>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000a74 	.word	0x20000a74

08002798 <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ffab 	bl	8002710 <OLED_Command>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	3302      	adds	r3, #2
 80027d0:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0310 	orr.w	r3, r3, #16
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7ff ffa9 	bl	8002740 <OLED_DoubleCommand>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	e016      	b.n	8002830 <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffc6 	bl	8002798 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff ffd8 	bl	80027c2 <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	e005      	b.n	8002824 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff ffa5 	bl	8002768 <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b7f      	cmp	r3, #127	; 0x7f
 8002828:	ddf6      	ble.n	8002818 <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3301      	adds	r3, #1
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b07      	cmp	r3, #7
 8002834:	dde5      	ble.n	8002802 <OLED_ClearRAM+0xc>
			}
		}
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 8002848:	4a18      	ldr	r2, [pc, #96]	; (80028ac <OLED_Init+0x6c>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 800284e:	20ae      	movs	r0, #174	; 0xae
 8002850:	f7ff ff5e 	bl	8002710 <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 8002854:	213f      	movs	r1, #63	; 0x3f
 8002856:	20a8      	movs	r0, #168	; 0xa8
 8002858:	f7ff ff72 	bl	8002740 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 800285c:	2100      	movs	r1, #0
 800285e:	20d3      	movs	r0, #211	; 0xd3
 8002860:	f7ff ff6e 	bl	8002740 <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 8002864:	2040      	movs	r0, #64	; 0x40
 8002866:	f7ff ff53 	bl	8002710 <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 800286a:	20a1      	movs	r0, #161	; 0xa1
 800286c:	f7ff ff50 	bl	8002710 <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 8002870:	20c8      	movs	r0, #200	; 0xc8
 8002872:	f7ff ff4d 	bl	8002710 <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 8002876:	2112      	movs	r1, #18
 8002878:	20da      	movs	r0, #218	; 0xda
 800287a:	f7ff ff61 	bl	8002740 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 800287e:	2160      	movs	r1, #96	; 0x60
 8002880:	2081      	movs	r0, #129	; 0x81
 8002882:	f7ff ff5d 	bl	8002740 <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 8002886:	20a4      	movs	r0, #164	; 0xa4
 8002888:	f7ff ff42 	bl	8002710 <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 800288c:	20a6      	movs	r0, #166	; 0xa6
 800288e:	f7ff ff3f 	bl	8002710 <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 8002892:	21f0      	movs	r1, #240	; 0xf0
 8002894:	20d5      	movs	r0, #213	; 0xd5
 8002896:	f7ff ff53 	bl	8002740 <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 800289a:	f7ff ffac 	bl	80027f6 <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 800289e:	20af      	movs	r0, #175	; 0xaf
 80028a0:	f7ff ff36 	bl	8002710 <OLED_Command>
//	OLED_Load();
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000a74 	.word	0x20000a74

080028b0 <Plan_SetCounter>:
uint8_t action_status = 0;
//uint8_t acc_status = 0;
uint8_t autoturn_stat = 0;
uint8_t speed_now;

void Plan_SetCounter() {
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <Plan_SetCounter+0x18>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <Plan_SetCounter+0x1c>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000a78 	.word	0x20000a78
 80028cc:	20000a7c 	.word	0x20000a7c

080028d0 <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <Plan_CheckCounterValue+0x34>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <Plan_CheckCounterValue+0x38>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad1      	subs	r1, r2, r3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4299      	cmp	r1, r3
 80028ee:	bf2c      	ite	cs
 80028f0:	2301      	movcs	r3, #1
 80028f2:	2300      	movcc	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000a78 	.word	0x20000a78
 8002908:	20000a7c 	.word	0x20000a7c

0800290c <Plan_CheckSensor>:
PlanCounter_t duration_counter;


/**************************************CHECK SENSOR****************************************/

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	460a      	mov	r2, r1
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	4613      	mov	r3, r2
 800291a:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <Plan_CheckSensor+0x1a>
 8002922:	2301      	movs	r3, #1
 8002924:	e02c      	b.n	8002980 <Plan_CheckSensor+0x74>
	else {
		s-=1;
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	3b01      	subs	r3, #1
 800292a:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 800292c:	79bb      	ldrb	r3, [r7, #6]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d002      	beq.n	8002938 <Plan_CheckSensor+0x2c>
 8002932:	2b02      	cmp	r3, #2
 8002934:	d009      	beq.n	800294a <Plan_CheckSensor+0x3e>
 8002936:	e019      	b.n	800296c <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <Plan_CheckSensor+0x80>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e01a      	b.n	8002980 <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <Plan_CheckSensor+0x80>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <Plan_CheckSensor+0x56>
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f1c3 030d 	rsb	r3, r3, #13
 800295a:	4a0c      	ldr	r2, [pc, #48]	; (800298c <Plan_CheckSensor+0x80>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <Plan_CheckSensor+0x5a>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <Plan_CheckSensor+0x5c>
 8002966:	2300      	movs	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e009      	b.n	8002980 <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f1c3 030d 	rsb	r3, r3, #13
 8002972:	4a06      	ldr	r2, [pc, #24]	; (800298c <Plan_CheckSensor+0x80>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
		}
	}
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	20000b9c 	.word	0x20000b9c

08002990 <Plan_Left>:
	case ACTION_STATUS_EXECUTE_1 :

	}
}

uint8_t Plan_Left(Action_typedef a) {
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 800299c:	797b      	ldrb	r3, [r7, #5]
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ffb3 	bl	800290c <Plan_CheckSensor>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <Plan_Left+0x3e>
 80029ac:	4b7c      	ldr	r3, [pc, #496]	; (8002ba0 <Plan_Left+0x210>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <Plan_Left+0x3e>
			Plan_SetCounter();
 80029b4:	f7ff ff7c 	bl	80028b0 <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 80029b8:	4b7a      	ldr	r3, [pc, #488]	; (8002ba4 <Plan_Left+0x214>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a7a      	ldr	r2, [pc, #488]	; (8002ba8 <Plan_Left+0x218>)
 80029be:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 80029c0:	4b77      	ldr	r3, [pc, #476]	; (8002ba0 <Plan_Left+0x210>)
 80029c2:	2208      	movs	r2, #8
 80029c4:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 80029c6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80029ca:	f002 fa39 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 80029ce:	4b74      	ldr	r3, [pc, #464]	; (8002ba0 <Plan_Left+0x210>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d111      	bne.n	80029fa <Plan_Left+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 80029d6:	7a3b      	ldrb	r3, [r7, #8]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	bf28      	it	cs
 80029dc:	2303      	movcs	r3, #3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff75 	bl	80028d0 <Plan_CheckCounterValue>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <Plan_Left+0x66>
			Plan_SetCounter();
 80029ec:	f7ff ff60 	bl	80028b0 <Plan_SetCounter>
			counter_status = 1;
 80029f0:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <Plan_Left+0x210>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0c6      	b.n	8002b88 <Plan_Left+0x1f8>
	}
	else if(counter_status == 1) {
 80029fa:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <Plan_Left+0x210>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d10d      	bne.n	8002a1e <Plan_Left+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002a02:	7a3b      	ldrb	r3, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff63 	bl	80028d0 <Plan_CheckCounterValue>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <Plan_Left+0x8a>
			Plan_SetCounter();
 8002a10:	f7ff ff4e 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 8002a14:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <Plan_Left+0x210>)
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0b4      	b.n	8002b88 <Plan_Left+0x1f8>
	}
	else if(counter_status == 2) {
 8002a1e:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <Plan_Left+0x210>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	f040 80af 	bne.w	8002b86 <Plan_Left+0x1f6>
		if(autoturn_stat == 0) {
 8002a28:	4b60      	ldr	r3, [pc, #384]	; (8002bac <Plan_Left+0x21c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d132      	bne.n	8002a96 <Plan_Left+0x106>
			Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002a30:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <Plan_Left+0x220>)
 8002a38:	7ddb      	ldrb	r3, [r3, #23]
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fd70 	bl	8000524 <__aeabi_i2d>
 8002a44:	a352      	add	r3, pc, #328	; (adr r3, 8002b90 <Plan_Left+0x200>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fdd5 	bl	80005f8 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f8c7 	bl	8000be8 <__aeabi_d2f>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <Plan_Left+0x220>)
 8002a64:	7ddb      	ldrb	r3, [r3, #23]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd5a 	bl	8000524 <__aeabi_i2d>
 8002a70:	a347      	add	r3, pc, #284	; (adr r3, 8002b90 <Plan_Left+0x200>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fdbf 	bl	80005f8 <__aeabi_dmul>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f8b1 	bl	8000be8 <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	ee00 3a90 	vmov	s1, r3
 8002a8c:	ee00 4a10 	vmov	s0, r4
 8002a90:	f002 f9bc 	bl	8004e0c <Run_SetMotorSpeed>
 8002a94:	e031      	b.n	8002afa <Plan_Left+0x16a>
		}
		else {
			Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, a.forward_speed*plan.turn_speed*0.05);
 8002a96:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b44      	ldr	r3, [pc, #272]	; (8002bb0 <Plan_Left+0x220>)
 8002a9e:	7ddb      	ldrb	r3, [r3, #23]
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd3d 	bl	8000524 <__aeabi_i2d>
 8002aaa:	a33b      	add	r3, pc, #236	; (adr r3, 8002b98 <Plan_Left+0x208>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fda2 	bl	80005f8 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f894 	bl	8000be8 <__aeabi_d2f>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <Plan_Left+0x220>)
 8002aca:	7ddb      	ldrb	r3, [r3, #23]
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fd27 	bl	8000524 <__aeabi_i2d>
 8002ad6:	a330      	add	r3, pc, #192	; (adr r3, 8002b98 <Plan_Left+0x208>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fd fd8c 	bl	80005f8 <__aeabi_dmul>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7fe f87e 	bl	8000be8 <__aeabi_d2f>
 8002aec:	4603      	mov	r3, r0
 8002aee:	ee00 3a90 	vmov	s1, r3
 8002af2:	ee00 4a10 	vmov	s0, r4
 8002af6:	f002 f989 	bl	8004e0c <Run_SetMotorSpeed>
		}
		switch(a.act_mode) {
 8002afa:	79bb      	ldrb	r3, [r7, #6]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d02c      	beq.n	8002b5a <Plan_Left+0x1ca>
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	dc3e      	bgt.n	8002b82 <Plan_Left+0x1f2>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <Plan_Left+0x17e>
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d009      	beq.n	8002b20 <Plan_Left+0x190>
 8002b0c:	e039      	b.n	8002b82 <Plan_Left+0x1f2>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fedd 	bl	80028d0 <Plan_CheckCounterValue>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d02d      	beq.n	8002b78 <Plan_Left+0x1e8>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e033      	b.n	8002b88 <Plan_Left+0x1f8>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value)) {
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fed4 	bl	80028d0 <Plan_CheckCounterValue>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d026      	beq.n	8002b7c <Plan_Left+0x1ec>
				if(Plan_CheckSensor(3, LEFT_ALIGN_SEN)) {autoturn_stat = 1;}
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2003      	movs	r0, #3
 8002b32:	f7ff feeb 	bl	800290c <Plan_CheckSensor>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <Plan_Left+0x1b2>
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <Plan_Left+0x21c>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) {autoturn_stat = 0; return 2;}
 8002b42:	2100      	movs	r1, #0
 8002b44:	2005      	movs	r0, #5
 8002b46:	f7ff fee1 	bl	800290c <Plan_CheckSensor>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <Plan_Left+0x1ec>
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <Plan_Left+0x21c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	2302      	movs	r3, #2
 8002b58:	e016      	b.n	8002b88 <Plan_Left+0x1f8>
			}
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <Plan_Left+0x214>)
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <Plan_Left+0x218>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1ad2      	subs	r2, r2, r3
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	429a      	cmp	r2, r3
 8002b72:	dd05      	ble.n	8002b80 <Plan_Left+0x1f0>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e007      	b.n	8002b88 <Plan_Left+0x1f8>
			break;
 8002b78:	bf00      	nop
 8002b7a:	e002      	b.n	8002b82 <Plan_Left+0x1f2>
			break;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <Plan_Left+0x1f2>
			break;
 8002b80:	bf00      	nop
		}
		return 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <Plan_Left+0x1f8>
	}
	return 0;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	9999999a 	.word	0x9999999a
 8002b94:	3fb99999 	.word	0x3fb99999
 8002b98:	9999999a 	.word	0x9999999a
 8002b9c:	3fa99999 	.word	0x3fa99999
 8002ba0:	20000a84 	.word	0x20000a84
 8002ba4:	20000a8c 	.word	0x20000a8c
 8002ba8:	20000a80 	.word	0x20000a80
 8002bac:	20000a86 	.word	0x20000a86
 8002bb0:	20000da8 	.word	0x20000da8
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002bc4:	797b      	ldrb	r3, [r7, #5]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe9f 	bl	800290c <Plan_CheckSensor>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <Plan_Right+0x3e>
 8002bd4:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <Plan_Right+0x210>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <Plan_Right+0x3e>
			Plan_SetCounter();
 8002bdc:	f7ff fe68 	bl	80028b0 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002be0:	4b7a      	ldr	r3, [pc, #488]	; (8002dcc <Plan_Right+0x214>)
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	4a7a      	ldr	r2, [pc, #488]	; (8002dd0 <Plan_Right+0x218>)
 8002be6:	6013      	str	r3, [r2, #0]
			counter_status = 8;
 8002be8:	4b77      	ldr	r3, [pc, #476]	; (8002dc8 <Plan_Right+0x210>)
 8002bea:	2208      	movs	r2, #8
 8002bec:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002bee:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002bf2:	f002 f925 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002bf6:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <Plan_Right+0x210>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d111      	bne.n	8002c22 <Plan_Right+0x6a>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002bfe:	7a3b      	ldrb	r3, [r7, #8]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	bf28      	it	cs
 8002c04:	2303      	movcs	r3, #3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fe61 	bl	80028d0 <Plan_CheckCounterValue>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <Plan_Right+0x66>
			Plan_SetCounter();
 8002c14:	f7ff fe4c 	bl	80028b0 <Plan_SetCounter>
			counter_status = 1;
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <Plan_Right+0x210>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0c6      	b.n	8002db0 <Plan_Right+0x1f8>
	}
	else if(counter_status == 1) {
 8002c22:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <Plan_Right+0x210>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10d      	bne.n	8002c46 <Plan_Right+0x8e>
		if(Plan_CheckCounterValue(a.brake)) {
 8002c2a:	7a3b      	ldrb	r3, [r7, #8]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fe4f 	bl	80028d0 <Plan_CheckCounterValue>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <Plan_Right+0x8a>
			Plan_SetCounter();
 8002c38:	f7ff fe3a 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 8002c3c:	4b62      	ldr	r3, [pc, #392]	; (8002dc8 <Plan_Right+0x210>)
 8002c3e:	2202      	movs	r2, #2
 8002c40:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0b4      	b.n	8002db0 <Plan_Right+0x1f8>
	}
	if(counter_status == 2) {
 8002c46:	4b60      	ldr	r3, [pc, #384]	; (8002dc8 <Plan_Right+0x210>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f040 80af 	bne.w	8002dae <Plan_Right+0x1f6>
		if(autoturn_stat == 0) {
 8002c50:	4b60      	ldr	r3, [pc, #384]	; (8002dd4 <Plan_Right+0x21c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d132      	bne.n	8002cbe <Plan_Right+0x106>
			Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002c58:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <Plan_Right+0x220>)
 8002c60:	7ddb      	ldrb	r3, [r3, #23]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fc5c 	bl	8000524 <__aeabi_i2d>
 8002c6c:	a352      	add	r3, pc, #328	; (adr r3, 8002db8 <Plan_Right+0x200>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fcc1 	bl	80005f8 <__aeabi_dmul>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ffb3 	bl	8000be8 <__aeabi_d2f>
 8002c82:	4604      	mov	r4, r0
 8002c84:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <Plan_Right+0x220>)
 8002c8c:	7ddb      	ldrb	r3, [r3, #23]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc46 	bl	8000524 <__aeabi_i2d>
 8002c98:	a347      	add	r3, pc, #284	; (adr r3, 8002db8 <Plan_Right+0x200>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fcab 	bl	80005f8 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff9d 	bl	8000be8 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	ee00 3a90 	vmov	s1, r3
 8002cb4:	ee00 4a10 	vmov	s0, r4
 8002cb8:	f002 f8a8 	bl	8004e0c <Run_SetMotorSpeed>
 8002cbc:	e031      	b.n	8002d22 <Plan_Right+0x16a>
		}
		else {
			Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.05, a.reverse_speed*plan.turn_speed*0.05);
 8002cbe:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <Plan_Right+0x220>)
 8002cc6:	7ddb      	ldrb	r3, [r3, #23]
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc29 	bl	8000524 <__aeabi_i2d>
 8002cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8002dc0 <Plan_Right+0x208>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fc8e 	bl	80005f8 <__aeabi_dmul>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ff80 	bl	8000be8 <__aeabi_d2f>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <Plan_Right+0x220>)
 8002cf2:	7ddb      	ldrb	r3, [r3, #23]
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc13 	bl	8000524 <__aeabi_i2d>
 8002cfe:	a330      	add	r3, pc, #192	; (adr r3, 8002dc0 <Plan_Right+0x208>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fc78 	bl	80005f8 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd ff6a 	bl	8000be8 <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	ee00 3a90 	vmov	s1, r3
 8002d1a:	ee00 4a10 	vmov	s0, r4
 8002d1e:	f002 f875 	bl	8004e0c <Run_SetMotorSpeed>
		}
		switch(a.act_mode) {
 8002d22:	79bb      	ldrb	r3, [r7, #6]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d02c      	beq.n	8002d82 <Plan_Right+0x1ca>
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	dc3e      	bgt.n	8002daa <Plan_Right+0x1f2>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <Plan_Right+0x17e>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d009      	beq.n	8002d48 <Plan_Right+0x190>
 8002d34:	e039      	b.n	8002daa <Plan_Right+0x1f2>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fdc9 	bl	80028d0 <Plan_CheckCounterValue>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02d      	beq.n	8002da0 <Plan_Right+0x1e8>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e033      	b.n	8002db0 <Plan_Right+0x1f8>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value)) {
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fdc0 	bl	80028d0 <Plan_CheckCounterValue>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d026      	beq.n	8002da4 <Plan_Right+0x1ec>
				if(Plan_CheckSensor(3, RIGHT_ALIGN_SEN)) {autoturn_stat = 1;}
 8002d56:	2101      	movs	r1, #1
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f7ff fdd7 	bl	800290c <Plan_CheckSensor>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <Plan_Right+0x1b2>
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <Plan_Right+0x21c>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) {autoturn_stat = 0; return 2;}
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2005      	movs	r0, #5
 8002d6e:	f7ff fdcd 	bl	800290c <Plan_CheckSensor>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <Plan_Right+0x1ec>
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <Plan_Right+0x21c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e016      	b.n	8002db0 <Plan_Right+0x1f8>
			}
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <Plan_Right+0x214>)
 8002d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <Plan_Right+0x218>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dd05      	ble.n	8002da8 <Plan_Right+0x1f0>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e007      	b.n	8002db0 <Plan_Right+0x1f8>
			break;
 8002da0:	bf00      	nop
 8002da2:	e002      	b.n	8002daa <Plan_Right+0x1f2>
			break;
 8002da4:	bf00      	nop
 8002da6:	e000      	b.n	8002daa <Plan_Right+0x1f2>
			break;
 8002da8:	bf00      	nop
		}
		return 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <Plan_Right+0x1f8>
	}
	return 0;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}
 8002db8:	9999999a 	.word	0x9999999a
 8002dbc:	3fb99999 	.word	0x3fb99999
 8002dc0:	9999999a 	.word	0x9999999a
 8002dc4:	3fa99999 	.word	0x3fa99999
 8002dc8:	20000a84 	.word	0x20000a84
 8002dcc:	20000a8c 	.word	0x20000a8c
 8002dd0:	20000a80 	.word	0x20000a80
 8002dd4:	20000a86 	.word	0x20000a86
 8002dd8:	20000da8 	.word	0x20000da8

08002ddc <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	1d3c      	adds	r4, r7, #4
 8002de4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002de8:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002dea:	797b      	ldrb	r3, [r7, #5]
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fd8c 	bl	800290c <Plan_CheckSensor>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <Plan_Forward+0x4a>
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <Plan_Forward+0x158>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d111      	bne.n	8002e26 <Plan_Forward+0x4a>
			Plan_SetCounter();
 8002e02:	f7ff fd55 	bl	80028b0 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002e06:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <Plan_Forward+0x15c>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e10:	ee17 2a90 	vmov	r2, s15
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <Plan_Forward+0x160>)
 8002e16:	601a      	str	r2, [r3, #0]
			counter_status = 8;
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <Plan_Forward+0x158>)
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002e1e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e22:	f002 f80d 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <Plan_Forward+0x158>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d111      	bne.n	8002e52 <Plan_Forward+0x76>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002e2e:	7a3b      	ldrb	r3, [r7, #8]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	bf28      	it	cs
 8002e34:	2303      	movcs	r3, #3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fd49 	bl	80028d0 <Plan_CheckCounterValue>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <Plan_Forward+0x72>
			Plan_SetCounter();
 8002e44:	f7ff fd34 	bl	80028b0 <Plan_SetCounter>
			counter_status = 1;
 8002e48:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <Plan_Forward+0x158>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06b      	b.n	8002f2a <Plan_Forward+0x14e>
	}
	else if(counter_status == 1) {
 8002e52:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <Plan_Forward+0x158>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10d      	bne.n	8002e76 <Plan_Forward+0x9a>
		if(Plan_CheckCounterValue(a.brake)) {
 8002e5a:	7a3b      	ldrb	r3, [r7, #8]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fd37 	bl	80028d0 <Plan_CheckCounterValue>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <Plan_Forward+0x96>
			Plan_SetCounter();
 8002e68:	f7ff fd22 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <Plan_Forward+0x158>)
 8002e6e:	2202      	movs	r2, #2
 8002e70:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e059      	b.n	8002f2a <Plan_Forward+0x14e>
	}
	if(counter_status == 2) {
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <Plan_Forward+0x158>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d154      	bne.n	8002f28 <Plan_Forward+0x14c>
		Run_SetMotorSpeed(_speed, _speed);
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	ee07 3a10 	vmov	s14, r3
 8002e8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002e92:	eef0 0a47 	vmov.f32	s1, s14
 8002e96:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9a:	f001 ffb7 	bl	8004e0c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002e9e:	79bb      	ldrb	r3, [r7, #6]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d01f      	beq.n	8002ee4 <Plan_Forward+0x108>
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	dc3d      	bgt.n	8002f24 <Plan_Forward+0x148>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <Plan_Forward+0xd6>
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d009      	beq.n	8002ec4 <Plan_Forward+0xe8>
 8002eb0:	e038      	b.n	8002f24 <Plan_Forward+0x148>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fd0b 	bl	80028d0 <Plan_CheckCounterValue>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02e      	beq.n	8002f1e <Plan_Forward+0x142>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e032      	b.n	8002f2a <Plan_Forward+0x14e>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fd02 	bl	80028d0 <Plan_CheckCounterValue>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d027      	beq.n	8002f22 <Plan_Forward+0x146>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	2007      	movs	r0, #7
 8002ed6:	f7ff fd19 	bl	800290c <Plan_CheckSensor>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <Plan_Forward+0x146>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e022      	b.n	8002f2a <Plan_Forward+0x14e>
			break;
		case 2:
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <Plan_Forward+0x15c>)
 8002ee6:	ed93 7a00 	vldr	s14, [r3]
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <Plan_Forward+0x160>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	dc00      	bgt.n	8002f1a <Plan_Forward+0x13e>
			break;
 8002f18:	e004      	b.n	8002f24 <Plan_Forward+0x148>
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e005      	b.n	8002f2a <Plan_Forward+0x14e>
			break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <Plan_Forward+0x148>
			break;
 8002f22:	bf00      	nop
		}
		return 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <Plan_Forward+0x14e>
	}
	return 0;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000a84 	.word	0x20000a84
 8002f38:	20000b1c 	.word	0x20000b1c
 8002f3c:	20000a80 	.word	0x20000a80

08002f40 <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	1d3c      	adds	r4, r7, #4
 8002f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f4c:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002f4e:	797b      	ldrb	r3, [r7, #5]
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fcda 	bl	800290c <Plan_CheckSensor>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d015      	beq.n	8002f8a <Plan_Backward+0x4a>
 8002f5e:	4b4f      	ldr	r3, [pc, #316]	; (800309c <Plan_Backward+0x15c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d111      	bne.n	8002f8a <Plan_Backward+0x4a>
			Plan_SetCounter();
 8002f66:	f7ff fca3 	bl	80028b0 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002f6a:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <Plan_Backward+0x160>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f74:	ee17 2a90 	vmov	r2, s15
 8002f78:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <Plan_Backward+0x164>)
 8002f7a:	601a      	str	r2, [r3, #0]
			counter_status = 8;
 8002f7c:	4b47      	ldr	r3, [pc, #284]	; (800309c <Plan_Backward+0x15c>)
 8002f7e:	2208      	movs	r2, #8
 8002f80:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 8002f82:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002f86:	f001 ff5b 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <Plan_Backward+0x15c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d111      	bne.n	8002fb6 <Plan_Backward+0x76>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 8002f92:	7a3b      	ldrb	r3, [r7, #8]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	bf28      	it	cs
 8002f98:	2303      	movcs	r3, #3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fc97 	bl	80028d0 <Plan_CheckCounterValue>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <Plan_Backward+0x72>
			Plan_SetCounter();
 8002fa8:	f7ff fc82 	bl	80028b0 <Plan_SetCounter>
			counter_status = 1;
 8002fac:	4b3b      	ldr	r3, [pc, #236]	; (800309c <Plan_Backward+0x15c>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06d      	b.n	8003092 <Plan_Backward+0x152>
	}
	else if(counter_status == 1) {
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <Plan_Backward+0x15c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10d      	bne.n	8002fda <Plan_Backward+0x9a>
		if(Plan_CheckCounterValue(a.brake)) {
 8002fbe:	7a3b      	ldrb	r3, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fc85 	bl	80028d0 <Plan_CheckCounterValue>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <Plan_Backward+0x96>
			Plan_SetCounter();
 8002fcc:	f7ff fc70 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <Plan_Backward+0x15c>)
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e05b      	b.n	8003092 <Plan_Backward+0x152>
	}
	if(counter_status == 2) {
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <Plan_Backward+0x15c>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d156      	bne.n	8003090 <Plan_Backward+0x150>
		Run_SetMotorSpeed(-_speed, -_speed);
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	425b      	negs	r3, r3
 8002ff2:	ee07 3a10 	vmov	s14, r3
 8002ff6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ffa:	eef0 0a47 	vmov.f32	s1, s14
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	f001 ff03 	bl	8004e0c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8003006:	79bb      	ldrb	r3, [r7, #6]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d01f      	beq.n	800304c <Plan_Backward+0x10c>
 800300c:	2b02      	cmp	r3, #2
 800300e:	dc3d      	bgt.n	800308c <Plan_Backward+0x14c>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <Plan_Backward+0xda>
 8003014:	2b01      	cmp	r3, #1
 8003016:	d009      	beq.n	800302c <Plan_Backward+0xec>
 8003018:	e038      	b.n	800308c <Plan_Backward+0x14c>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fc57 	bl	80028d0 <Plan_CheckCounterValue>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02e      	beq.n	8003086 <Plan_Backward+0x146>
 8003028:	2302      	movs	r3, #2
 800302a:	e032      	b.n	8003092 <Plan_Backward+0x152>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fc4e 	bl	80028d0 <Plan_CheckCounterValue>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d027      	beq.n	800308a <Plan_Backward+0x14a>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 800303a:	2102      	movs	r1, #2
 800303c:	2007      	movs	r0, #7
 800303e:	f7ff fc65 	bl	800290c <Plan_CheckSensor>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <Plan_Backward+0x14a>
 8003048:	2302      	movs	r3, #2
 800304a:	e022      	b.n	8003092 <Plan_Backward+0x152>
			break;
		case 2:
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <Plan_Backward+0x164>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <Plan_Backward+0x160>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	461a      	mov	r2, r3
 8003066:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	dc00      	bgt.n	8003082 <Plan_Backward+0x142>
			break;
 8003080:	e004      	b.n	800308c <Plan_Backward+0x14c>
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003082:	2302      	movs	r3, #2
 8003084:	e005      	b.n	8003092 <Plan_Backward+0x152>
			break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <Plan_Backward+0x14c>
			break;
 800308a:	bf00      	nop
		}
		return 1;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <Plan_Backward+0x152>
	}
	return 0;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop
 800309c:	20000a84 	.word	0x20000a84
 80030a0:	20000b1c 	.word	0x20000b1c
 80030a4:	20000a80 	.word	0x20000a80

080030a8 <Plan_Idle>:

uint8_t Plan_Idle(Action_typedef a) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 80030b4:	797b      	ldrb	r3, [r7, #5]
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fc27 	bl	800290c <Plan_CheckSensor>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <Plan_Idle+0x48>
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <Plan_Idle+0xd4>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <Plan_Idle+0x48>
			Plan_SetCounter();
 80030cc:	f7ff fbf0 	bl	80028b0 <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <Plan_Idle+0xd8>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030da:	ee17 2a90 	vmov	r2, s15
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <Plan_Idle+0xdc>)
 80030e0:	601a      	str	r2, [r3, #0]
			counter_status = 8;
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <Plan_Idle+0xd4>)
 80030e4:	2208      	movs	r2, #8
 80030e6:	701a      	strb	r2, [r3, #0]
			Run_SetReverseSpeed(0.5);
 80030e8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80030ec:	f001 fea8 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 8) {
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <Plan_Idle+0xd4>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d111      	bne.n	800311c <Plan_Idle+0x74>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 80030f8:	7a3b      	ldrb	r3, [r7, #8]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	bf28      	it	cs
 80030fe:	2303      	movcs	r3, #3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fbe4 	bl	80028d0 <Plan_CheckCounterValue>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <Plan_Idle+0x70>
			Plan_SetCounter();
 800310e:	f7ff fbcf 	bl	80028b0 <Plan_SetCounter>
			counter_status = 1;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <Plan_Idle+0xd4>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003118:	2301      	movs	r3, #1
 800311a:	e02b      	b.n	8003174 <Plan_Idle+0xcc>
	}
	else if(counter_status == 1) {
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <Plan_Idle+0xd4>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10d      	bne.n	8003140 <Plan_Idle+0x98>
		if(Plan_CheckCounterValue(a.brake)) {
 8003124:	7a3b      	ldrb	r3, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fbd2 	bl	80028d0 <Plan_CheckCounterValue>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <Plan_Idle+0x94>
			Plan_SetCounter();
 8003132:	f7ff fbbd 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <Plan_Idle+0xd4>)
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800313c:	2301      	movs	r3, #1
 800313e:	e019      	b.n	8003174 <Plan_Idle+0xcc>
	}
	if(counter_status == 2) {
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <Plan_Idle+0xd4>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d114      	bne.n	8003172 <Plan_Idle+0xca>
		Run_SetMotorSpeed(0, 0);
 8003148:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8003188 <Plan_Idle+0xe0>
 800314c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003188 <Plan_Idle+0xe0>
 8003150:	f001 fe5c 	bl	8004e0c <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <Plan_Idle+0xc6>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fbb7 	bl	80028d0 <Plan_CheckCounterValue>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <Plan_Idle+0xc4>
 8003168:	2302      	movs	r3, #2
 800316a:	e003      	b.n	8003174 <Plan_Idle+0xcc>
			break;
 800316c:	bf00      	nop
//			break;
//		case 2:
//			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
//			break;
		}
		return 1;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <Plan_Idle+0xcc>
	}
	return 0;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000a84 	.word	0x20000a84
 8003180:	20000b1c 	.word	0x20000b1c
 8003184:	20000a80 	.word	0x20000a80
 8003188:	00000000 	.word	0x00000000

0800318c <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <Plan_Follow+0xa0>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <Plan_Follow+0x30>
		Plan_SetCounter();
 80031a0:	f7ff fb86 	bl	80028b0 <Plan_SetCounter>
		robot_enc_pos = MOTOR_L.enc_cnt;
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <Plan_Follow+0xa4>)
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <Plan_Follow+0xa8>)
 80031b2:	edc3 7a00 	vstr	s15, [r3]
		counter_status = 1;
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <Plan_Follow+0xa0>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 80031bc:	79bb      	ldrb	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <Plan_Follow+0x3c>
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d00c      	beq.n	80031e0 <Plan_Follow+0x54>
 80031c6:	e028      	b.n	800321a <Plan_Follow+0x8e>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fb80 	bl	80028d0 <Plan_CheckCounterValue>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d023      	beq.n	800321e <Plan_Follow+0x92>
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <Plan_Follow+0x92>
 80031dc:	2302      	movs	r3, #2
 80031de:	e020      	b.n	8003222 <Plan_Follow+0x96>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <Plan_Follow+0xa8>)
 80031e2:	ed93 7a00 	vldr	s14, [r3]
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <Plan_Follow+0xac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	dc00      	bgt.n	8003216 <Plan_Follow+0x8a>
		break;
 8003214:	e004      	b.n	8003220 <Plan_Follow+0x94>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003216:	2302      	movs	r3, #2
 8003218:	e003      	b.n	8003222 <Plan_Follow+0x96>
	default: return 2;
 800321a:	2302      	movs	r3, #2
 800321c:	e001      	b.n	8003222 <Plan_Follow+0x96>
		break;
 800321e:	bf00      	nop
	}
	return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000a84 	.word	0x20000a84
 8003230:	20000a8c 	.word	0x20000a8c
 8003234:	20000b1c 	.word	0x20000b1c
 8003238:	20000a80 	.word	0x20000a80
 800323c:	00000000 	.word	0x00000000

08003240 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 800324c:	4b7e      	ldr	r3, [pc, #504]	; (8003448 <Plan_FollowLeft+0x208>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <Plan_FollowLeft+0x30>
		Plan_SetCounter();
 8003254:	f7ff fb2c 	bl	80028b0 <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8003258:	4b7c      	ldr	r3, [pc, #496]	; (800344c <Plan_FollowLeft+0x20c>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003262:	ee17 2a90 	vmov	r2, s15
 8003266:	4b7a      	ldr	r3, [pc, #488]	; (8003450 <Plan_FollowLeft+0x210>)
 8003268:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 800326a:	4b77      	ldr	r3, [pc, #476]	; (8003448 <Plan_FollowLeft+0x208>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 8003270:	797b      	ldrb	r3, [r7, #5]
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fb49 	bl	800290c <Plan_CheckSensor>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <Plan_FollowLeft+0x56>
 8003280:	4b71      	ldr	r3, [pc, #452]	; (8003448 <Plan_FollowLeft+0x208>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <Plan_FollowLeft+0x56>
		counter_status = 3;
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <Plan_FollowLeft+0x208>)
 800328a:	2203      	movs	r2, #3
 800328c:	701a      	strb	r2, [r3, #0]
		Run_SetReverseSpeed(0.5);
 800328e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003292:	f001 fdd5 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 3) {
 8003296:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <Plan_FollowLeft+0x208>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d111      	bne.n	80032c2 <Plan_FollowLeft+0x82>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 800329e:	7a3b      	ldrb	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	bf28      	it	cs
 80032a4:	2303      	movcs	r3, #3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fb11 	bl	80028d0 <Plan_CheckCounterValue>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <Plan_FollowLeft+0x7e>
			Plan_SetCounter();
 80032b4:	f7ff fafc 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <Plan_FollowLeft+0x208>)
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0b6      	b.n	8003430 <Plan_FollowLeft+0x1f0>
	}
	else if(counter_status == 2) {
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <Plan_FollowLeft+0x208>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d13d      	bne.n	8003346 <Plan_FollowLeft+0x106>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 80032ca:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b60      	ldr	r3, [pc, #384]	; (8003454 <Plan_FollowLeft+0x214>)
 80032d2:	7ddb      	ldrb	r3, [r3, #23]
 80032d4:	fb02 f303 	mul.w	r3, r2, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f923 	bl	8000524 <__aeabi_i2d>
 80032de:	a356      	add	r3, pc, #344	; (adr r3, 8003438 <Plan_FollowLeft+0x1f8>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f7fd f988 	bl	80005f8 <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd fc7a 	bl	8000be8 <__aeabi_d2f>
 80032f4:	4604      	mov	r4, r0
 80032f6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b55      	ldr	r3, [pc, #340]	; (8003454 <Plan_FollowLeft+0x214>)
 80032fe:	7ddb      	ldrb	r3, [r3, #23]
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f90d 	bl	8000524 <__aeabi_i2d>
 800330a:	a34b      	add	r3, pc, #300	; (adr r3, 8003438 <Plan_FollowLeft+0x1f8>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f972 	bl	80005f8 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	f7fd fc64 	bl	8000be8 <__aeabi_d2f>
 8003320:	4603      	mov	r3, r0
 8003322:	ee00 3a90 	vmov	s1, r3
 8003326:	ee00 4a10 	vmov	s0, r4
 800332a:	f001 fd6f 	bl	8004e0c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(3, LEFT_ALIGN_SEN) > 0) {
 800332e:	2100      	movs	r1, #0
 8003330:	2003      	movs	r0, #3
 8003332:	f7ff faeb 	bl	800290c <Plan_CheckSensor>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <Plan_FollowLeft+0x102>
			counter_status = 4;
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <Plan_FollowLeft+0x208>)
 800333e:	2204      	movs	r2, #4
 8003340:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003342:	2301      	movs	r3, #1
 8003344:	e074      	b.n	8003430 <Plan_FollowLeft+0x1f0>
	}
	else if(counter_status == 4) {
 8003346:	4b40      	ldr	r3, [pc, #256]	; (8003448 <Plan_FollowLeft+0x208>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b04      	cmp	r3, #4
 800334c:	d13d      	bne.n	80033ca <Plan_FollowLeft+0x18a>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.05, a.forward_speed*plan.turn_speed*0.05);
 800334e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003352:	461a      	mov	r2, r3
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <Plan_FollowLeft+0x214>)
 8003356:	7ddb      	ldrb	r3, [r3, #23]
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f8e1 	bl	8000524 <__aeabi_i2d>
 8003362:	a337      	add	r3, pc, #220	; (adr r3, 8003440 <Plan_FollowLeft+0x200>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd f946 	bl	80005f8 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	f7fd fc38 	bl	8000be8 <__aeabi_d2f>
 8003378:	4604      	mov	r4, r0
 800337a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800337e:	461a      	mov	r2, r3
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <Plan_FollowLeft+0x214>)
 8003382:	7ddb      	ldrb	r3, [r3, #23]
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8cb 	bl	8000524 <__aeabi_i2d>
 800338e:	a32c      	add	r3, pc, #176	; (adr r3, 8003440 <Plan_FollowLeft+0x200>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f930 	bl	80005f8 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f7fd fc22 	bl	8000be8 <__aeabi_d2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	ee00 3a90 	vmov	s1, r3
 80033aa:	ee00 4a10 	vmov	s0, r4
 80033ae:	f001 fd2d 	bl	8004e0c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 80033b2:	2100      	movs	r1, #0
 80033b4:	2005      	movs	r0, #5
 80033b6:	f7ff faa9 	bl	800290c <Plan_CheckSensor>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <Plan_FollowLeft+0x186>
			counter_status = 1;
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <Plan_FollowLeft+0x208>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e032      	b.n	8003430 <Plan_FollowLeft+0x1f0>
	}
	switch(a.act_mode) {
 80033ca:	79bb      	ldrb	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <Plan_FollowLeft+0x196>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d00c      	beq.n	80033ee <Plan_FollowLeft+0x1ae>
 80033d4:	e028      	b.n	8003428 <Plan_FollowLeft+0x1e8>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fa79 	bl	80028d0 <Plan_CheckCounterValue>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <Plan_FollowLeft+0x1ec>
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d020      	beq.n	800342c <Plan_FollowLeft+0x1ec>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e020      	b.n	8003430 <Plan_FollowLeft+0x1f0>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <Plan_FollowLeft+0x20c>)
 80033f0:	ed93 7a00 	vldr	s14, [r3]
 80033f4:	4b16      	ldr	r3, [pc, #88]	; (8003450 <Plan_FollowLeft+0x210>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	461a      	mov	r2, r3
 8003408:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003420:	dc00      	bgt.n	8003424 <Plan_FollowLeft+0x1e4>
		break;
 8003422:	e004      	b.n	800342e <Plan_FollowLeft+0x1ee>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003424:	2302      	movs	r3, #2
 8003426:	e003      	b.n	8003430 <Plan_FollowLeft+0x1f0>
	default: return 2;
 8003428:	2302      	movs	r3, #2
 800342a:	e001      	b.n	8003430 <Plan_FollowLeft+0x1f0>
		break;
 800342c:	bf00      	nop
	}
	return 0;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	9999999a 	.word	0x9999999a
 800343c:	3fb99999 	.word	0x3fb99999
 8003440:	9999999a 	.word	0x9999999a
 8003444:	3fa99999 	.word	0x3fa99999
 8003448:	20000a84 	.word	0x20000a84
 800344c:	20000b1c 	.word	0x20000b1c
 8003450:	20000a80 	.word	0x20000a80
 8003454:	20000da8 	.word	0x20000da8

08003458 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8003464:	4b7e      	ldr	r3, [pc, #504]	; (8003660 <Plan_FollowRight+0x208>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <Plan_FollowRight+0x30>
		Plan_SetCounter();
 800346c:	f7ff fa20 	bl	80028b0 <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8003470:	4b7c      	ldr	r3, [pc, #496]	; (8003664 <Plan_FollowRight+0x20c>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800347a:	ee17 2a90 	vmov	r2, s15
 800347e:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <Plan_FollowRight+0x210>)
 8003480:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 8003482:	4b77      	ldr	r3, [pc, #476]	; (8003660 <Plan_FollowRight+0x208>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 8003488:	797b      	ldrb	r3, [r7, #5]
 800348a:	2101      	movs	r1, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa3d 	bl	800290c <Plan_CheckSensor>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <Plan_FollowRight+0x56>
 8003498:	4b71      	ldr	r3, [pc, #452]	; (8003660 <Plan_FollowRight+0x208>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <Plan_FollowRight+0x56>
		counter_status = 3;
 80034a0:	4b6f      	ldr	r3, [pc, #444]	; (8003660 <Plan_FollowRight+0x208>)
 80034a2:	2203      	movs	r2, #3
 80034a4:	701a      	strb	r2, [r3, #0]
		Run_SetReverseSpeed(0.5);
 80034a6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80034aa:	f001 fcc9 	bl	8004e40 <Run_SetReverseSpeed>
	}
	if(counter_status == 3) {
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <Plan_FollowRight+0x208>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d111      	bne.n	80034da <Plan_FollowRight+0x82>
		if(Plan_CheckCounterValue((a.brake<BRAKE_MAX_DELAY)?a.brake:BRAKE_MAX_DELAY)) {
 80034b6:	7a3b      	ldrb	r3, [r7, #8]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	bf28      	it	cs
 80034bc:	2303      	movcs	r3, #3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fa05 	bl	80028d0 <Plan_CheckCounterValue>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <Plan_FollowRight+0x7e>
			Plan_SetCounter();
 80034cc:	f7ff f9f0 	bl	80028b0 <Plan_SetCounter>
			counter_status = 2;
 80034d0:	4b63      	ldr	r3, [pc, #396]	; (8003660 <Plan_FollowRight+0x208>)
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0b6      	b.n	8003648 <Plan_FollowRight+0x1f0>
	}
	else if(counter_status == 2) {
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <Plan_FollowRight+0x208>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d13d      	bne.n	800355e <Plan_FollowRight+0x106>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 80034e2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b60      	ldr	r3, [pc, #384]	; (800366c <Plan_FollowRight+0x214>)
 80034ea:	7ddb      	ldrb	r3, [r3, #23]
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd f817 	bl	8000524 <__aeabi_i2d>
 80034f6:	a356      	add	r3, pc, #344	; (adr r3, 8003650 <Plan_FollowRight+0x1f8>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f87c 	bl	80005f8 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fb6e 	bl	8000be8 <__aeabi_d2f>
 800350c:	4604      	mov	r4, r0
 800350e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003512:	461a      	mov	r2, r3
 8003514:	4b55      	ldr	r3, [pc, #340]	; (800366c <Plan_FollowRight+0x214>)
 8003516:	7ddb      	ldrb	r3, [r3, #23]
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f801 	bl	8000524 <__aeabi_i2d>
 8003522:	a34b      	add	r3, pc, #300	; (adr r3, 8003650 <Plan_FollowRight+0x1f8>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f7fd f866 	bl	80005f8 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb58 	bl	8000be8 <__aeabi_d2f>
 8003538:	4603      	mov	r3, r0
 800353a:	ee00 3a90 	vmov	s1, r3
 800353e:	ee00 4a10 	vmov	s0, r4
 8003542:	f001 fc63 	bl	8004e0c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(3, RIGHT_ALIGN_SEN) > 0) {
 8003546:	2101      	movs	r1, #1
 8003548:	2003      	movs	r0, #3
 800354a:	f7ff f9df 	bl	800290c <Plan_CheckSensor>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <Plan_FollowRight+0x102>
			counter_status = 4;
 8003554:	4b42      	ldr	r3, [pc, #264]	; (8003660 <Plan_FollowRight+0x208>)
 8003556:	2204      	movs	r2, #4
 8003558:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800355a:	2301      	movs	r3, #1
 800355c:	e074      	b.n	8003648 <Plan_FollowRight+0x1f0>
	}
	else if(counter_status == 4) {
 800355e:	4b40      	ldr	r3, [pc, #256]	; (8003660 <Plan_FollowRight+0x208>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b04      	cmp	r3, #4
 8003564:	d13d      	bne.n	80035e2 <Plan_FollowRight+0x18a>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.05, a.reverse_speed*plan.turn_speed*0.05);
 8003566:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800356a:	461a      	mov	r2, r3
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <Plan_FollowRight+0x214>)
 800356e:	7ddb      	ldrb	r3, [r3, #23]
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc ffd5 	bl	8000524 <__aeabi_i2d>
 800357a:	a337      	add	r3, pc, #220	; (adr r3, 8003658 <Plan_FollowRight+0x200>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd f83a 	bl	80005f8 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f7fd fb2c 	bl	8000be8 <__aeabi_d2f>
 8003590:	4604      	mov	r4, r0
 8003592:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003596:	461a      	mov	r2, r3
 8003598:	4b34      	ldr	r3, [pc, #208]	; (800366c <Plan_FollowRight+0x214>)
 800359a:	7ddb      	ldrb	r3, [r3, #23]
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffbf 	bl	8000524 <__aeabi_i2d>
 80035a6:	a32c      	add	r3, pc, #176	; (adr r3, 8003658 <Plan_FollowRight+0x200>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fd f824 	bl	80005f8 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7fd fb16 	bl	8000be8 <__aeabi_d2f>
 80035bc:	4603      	mov	r3, r0
 80035be:	ee00 3a90 	vmov	s1, r3
 80035c2:	ee00 4a10 	vmov	s0, r4
 80035c6:	f001 fc21 	bl	8004e0c <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 80035ca:	2101      	movs	r1, #1
 80035cc:	2005      	movs	r0, #5
 80035ce:	f7ff f99d 	bl	800290c <Plan_CheckSensor>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <Plan_FollowRight+0x186>
			counter_status = 1;
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <Plan_FollowRight+0x208>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	e032      	b.n	8003648 <Plan_FollowRight+0x1f0>
	}
	switch(a.act_mode) {
 80035e2:	79bb      	ldrb	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <Plan_FollowRight+0x196>
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d00c      	beq.n	8003606 <Plan_FollowRight+0x1ae>
 80035ec:	e028      	b.n	8003640 <Plan_FollowRight+0x1e8>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f96d 	bl	80028d0 <Plan_CheckCounterValue>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d023      	beq.n	8003644 <Plan_FollowRight+0x1ec>
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <Plan_FollowRight+0x1ec>
 8003602:	2302      	movs	r3, #2
 8003604:	e020      	b.n	8003648 <Plan_FollowRight+0x1f0>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <Plan_FollowRight+0x20c>)
 8003608:	ed93 7a00 	vldr	s14, [r3]
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <Plan_FollowRight+0x210>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	461a      	mov	r2, r3
 8003620:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003638:	dc00      	bgt.n	800363c <Plan_FollowRight+0x1e4>
		break;
 800363a:	e004      	b.n	8003646 <Plan_FollowRight+0x1ee>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 800363c:	2302      	movs	r3, #2
 800363e:	e003      	b.n	8003648 <Plan_FollowRight+0x1f0>
	default: return 2;
 8003640:	2302      	movs	r3, #2
 8003642:	e001      	b.n	8003648 <Plan_FollowRight+0x1f0>
		break;
 8003644:	bf00      	nop
	}
	return 0;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	9999999a 	.word	0x9999999a
 8003654:	3fb99999 	.word	0x3fb99999
 8003658:	9999999a 	.word	0x9999999a
 800365c:	3fa99999 	.word	0x3fa99999
 8003660:	20000a84 	.word	0x20000a84
 8003664:	20000b1c 	.word	0x20000b1c
 8003668:	20000a80 	.word	0x20000a80
 800366c:	20000da8 	.word	0x20000da8

08003670 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 800367c:	797b      	ldrb	r3, [r7, #5]
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f943 	bl	800290c <Plan_CheckSensor>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <Plan_Invert+0x24>
		SEN_Invert();
 800368c:	f001 fea0 	bl	80053d0 <SEN_Invert>
		return 2;
 8003690:	2302      	movs	r3, #2
 8003692:	e000      	b.n	8003696 <Plan_Invert+0x26>
	}
	return 0;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 80036aa:	2302      	movs	r3, #2
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 80036c4:	2302      	movs	r3, #2
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <Plan_Jump>:

uint8_t Plan_Jump(Action_typedef a) {
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(a.act_value > 0) num_index = a.act_value-1;
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <Plan_Jump+0x1c>
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <Plan_Jump+0x2c>)
 80036ee:	701a      	strb	r2, [r3, #0]
	return 2;
 80036f0:	2302      	movs	r3, #2
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000cd9 	.word	0x20000cd9

08003704 <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	f107 040c 	add.w	r4, r7, #12
 800370e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003712:	ed87 0a02 	vstr	s0, [r7, #8]
 8003716:	71fb      	strb	r3, [r7, #7]
	static uint8_t stat = 0;
	static uint8_t _speed = 0;
	if(counter_status == 0) {
 8003718:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <Plan_ActionInit+0x154>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <Plan_ActionInit+0x26>
		Plan_SetCounter();
 8003720:	f7ff f8c6 	bl	80028b0 <Plan_SetCounter>
		counter_status = 1;
 8003724:	4b4c      	ldr	r3, [pc, #304]	; (8003858 <Plan_ActionInit+0x154>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f8cf 	bl	80028d0 <Plan_CheckCounterValue>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <Plan_ActionInit+0x52>
 8003738:	4b48      	ldr	r3, [pc, #288]	; (800385c <Plan_ActionInit+0x158>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <Plan_ActionInit+0x52>
		counter_status = 0;
 8003740:	4b45      	ldr	r3, [pc, #276]	; (8003858 <Plan_ActionInit+0x154>)
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
		stat = 1;
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <Plan_ActionInit+0x158>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
		_speed = sp;
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <Plan_ActionInit+0x15c>)
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	7013      	strb	r3, [r2, #0]
		return 0;
 8003752:	2300      	movs	r3, #0
 8003754:	e07c      	b.n	8003850 <Plan_ActionInit+0x14c>
	}

	if(stat == 0) return 0;
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <Plan_ActionInit+0x158>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <Plan_ActionInit+0x5e>
 800375e:	2300      	movs	r3, #0
 8003760:	e076      	b.n	8003850 <Plan_ActionInit+0x14c>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 8003762:	7d3b      	ldrb	r3, [r7, #20]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f8b3 	bl	80028d0 <Plan_CheckCounterValue>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <Plan_ActionInit+0x84>
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <Plan_ActionInit+0x158>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <Plan_ActionInit+0x84>
		counter_status = 0;
 8003778:	4b37      	ldr	r3, [pc, #220]	; (8003858 <Plan_ActionInit+0x154>)
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
//		acc_status = 0;
		stat = 0;
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <Plan_ActionInit+0x158>)
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
		return 3;
 8003784:	2303      	movs	r3, #3
 8003786:	e063      	b.n	8003850 <Plan_ActionInit+0x14c>
//		}
//	}
//	else if(acc_status == 2) {

		float range;
		if(fabsf(a.boost_speed - _speed) < plan.acc) range = fabsf(a.boost_speed - _speed);
 8003788:	7d7b      	ldrb	r3, [r7, #21]
 800378a:	461a      	mov	r2, r3
 800378c:	4b34      	ldr	r3, [pc, #208]	; (8003860 <Plan_ActionInit+0x15c>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800379a:	eeb0 7ae7 	vabs.f32	s14, s15
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <Plan_ActionInit+0x160>)
 80037a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80037a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	d50d      	bpl.n	80037ca <Plan_ActionInit+0xc6>
 80037ae:	7d7b      	ldrb	r3, [r7, #21]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <Plan_ActionInit+0x15c>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c0:	eef0 7ae7 	vabs.f32	s15, s15
 80037c4:	edc7 7a07 	vstr	s15, [r7, #28]
 80037c8:	e002      	b.n	80037d0 <Plan_ActionInit+0xcc>
		else range = plan.acc;
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <Plan_ActionInit+0x160>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	61fb      	str	r3, [r7, #28]

		if(a.boost_speed > _speed) _speed += range;
 80037d0:	7d7a      	ldrb	r2, [r7, #21]
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <Plan_ActionInit+0x15c>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d912      	bls.n	8003800 <Plan_ActionInit+0xfc>
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <Plan_ActionInit+0x15c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f2:	edc7 7a00 	vstr	s15, [r7]
 80037f6:	783b      	ldrb	r3, [r7, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <Plan_ActionInit+0x15c>)
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e016      	b.n	800382e <Plan_ActionInit+0x12a>
		else if(a.boost_speed < _speed) _speed -= range;
 8003800:	7d7a      	ldrb	r2, [r7, #21]
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <Plan_ActionInit+0x15c>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d211      	bcs.n	800382e <Plan_ActionInit+0x12a>
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <Plan_ActionInit+0x15c>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003816:	edd7 7a07 	vldr	s15, [r7, #28]
 800381a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003822:	edc7 7a00 	vstr	s15, [r7]
 8003826:	783b      	ldrb	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <Plan_ActionInit+0x15c>)
 800382c:	701a      	strb	r2, [r3, #0]

//		_speed = a.boost_speed;
//	}
	Run_LineTracing(_speed, period, plan.status_pid);
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <Plan_ActionInit+0x15c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <Plan_ActionInit+0x160>)
 800383c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003840:	4618      	mov	r0, r3
 8003842:	edd7 0a02 	vldr	s1, [r7, #8]
 8003846:	eeb0 0a67 	vmov.f32	s0, s15
 800384a:	f001 fa51 	bl	8004cf0 <Run_LineTracing>
//	Run_LineTracing(a.boost_speed, period, 0);
	return 1;
 800384e:	2301      	movs	r3, #1
}
 8003850:	4618      	mov	r0, r3
 8003852:	3724      	adds	r7, #36	; 0x24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}
 8003858:	20000a84 	.word	0x20000a84
 800385c:	20000a89 	.word	0x20000a89
 8003860:	20000a8a 	.word	0x20000a8a
 8003864:	20000da8 	.word	0x20000da8

08003868 <Plan_Stop>:
	}
	return 0;
}


uint8_t Plan_Stop() {
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 800386c:	eddf 0a14 	vldr	s1, [pc, #80]	; 80038c0 <Plan_Stop+0x58>
 8003870:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80038c0 <Plan_Stop+0x58>
 8003874:	f001 faca 	bl	8004e0c <Run_SetMotorSpeed>
	SEN_BlackLine();
 8003878:	f001 fd92 	bl	80053a0 <SEN_BlackLine>
	num_checkpoint = 0;
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <Plan_Stop+0x5c>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <Plan_Stop+0x5c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <Plan_Stop+0x60>)
 800388a:	4413      	add	r3, r2
 800388c:	789a      	ldrb	r2, [r3, #2]
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <Plan_Stop+0x64>)
 8003890:	701a      	strb	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <Plan_Stop+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <Plan_Stop+0x68>)
 800389e:	701a      	strb	r2, [r3, #0]
	run_counter++;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <Plan_Stop+0x6c>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <Plan_Stop+0x6c>)
 80038aa:	701a      	strb	r2, [r3, #0]
	if(run_counter > 30) {
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <Plan_Stop+0x6c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b1e      	cmp	r3, #30
 80038b2:	d901      	bls.n	80038b8 <Plan_Stop+0x50>
		HAL_NVIC_SystemReset();
 80038b4:	f007 f889 	bl	800a9ca <HAL_NVIC_SystemReset>
	}
	return 1;
 80038b8:	2301      	movs	r3, #1
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	00000000 	.word	0x00000000
 80038c4:	20000cd8 	.word	0x20000cd8
 80038c8:	20000da8 	.word	0x20000da8
 80038cc:	20000cd9 	.word	0x20000cd9
 80038d0:	20000a6c 	.word	0x20000a6c
 80038d4:	20000a6d 	.word	0x20000a6d

080038d8 <Plan_Start>:

void Plan_Start() {
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <Plan_Start+0x70>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <Plan_Start+0x74>)
 80038e4:	4413      	add	r3, r2
 80038e6:	789a      	ldrb	r2, [r3, #2]
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <Plan_Start+0x78>)
 80038ea:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 80038ec:	4b18      	ldr	r3, [pc, #96]	; (8003950 <Plan_Start+0x78>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f002 fa73 	bl	8005ddc <GetActionSequenceInit>
	action_status = 0;
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <Plan_Start+0x7c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 80038fc:	4b16      	ldr	r3, [pc, #88]	; (8003958 <Plan_Start+0x80>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <Plan_Start+0x84>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
	sum_error = 0;
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <Plan_Start+0x88>)
 800390a:	2200      	movs	r2, #0
 800390c:	801a      	strh	r2, [r3, #0]
	kp = plan.kpid[0];
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <Plan_Start+0x74>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	4a14      	ldr	r2, [pc, #80]	; (8003964 <Plan_Start+0x8c>)
 8003914:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <Plan_Start+0x74>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <Plan_Start+0x90>)
 800391c:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <Plan_Start+0x74>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <Plan_Start+0x94>)
 8003924:	6013      	str	r3, [r2, #0]
	alpha = plan.alpha;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <Plan_Start+0x74>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <Plan_Start+0x98>)
 800392c:	6013      	str	r3, [r2, #0]
//	Run_SetMotorAccl(100);
	speed_now = plan.speed;
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <Plan_Start+0x74>)
 8003930:	7d9a      	ldrb	r2, [r3, #22]
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <Plan_Start+0x9c>)
 8003934:	701a      	strb	r2, [r3, #0]
	main_flag |= MAIN_FLAG_RUN;
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <Plan_Start+0xa0>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <Plan_Start+0xa0>)
 8003942:	701a      	strb	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000cd8 	.word	0x20000cd8
 800394c:	20000da8 	.word	0x20000da8
 8003950:	20000cd9 	.word	0x20000cd9
 8003954:	20000a85 	.word	0x20000a85
 8003958:	20000a78 	.word	0x20000a78
 800395c:	20000a7c 	.word	0x20000a7c
 8003960:	20000b3c 	.word	0x20000b3c
 8003964:	20000b2c 	.word	0x20000b2c
 8003968:	20000b30 	.word	0x20000b30
 800396c:	20000b34 	.word	0x20000b34
 8003970:	20000b38 	.word	0x20000b38
 8003974:	20000a87 	.word	0x20000a87
 8003978:	20000a6c 	.word	0x20000a6c

0800397c <Plan_UIRoutine>:

void Plan_UIRoutine() {
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <Plan_UIRoutine+0x48>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <Plan_UIRoutine+0x48>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00e      	beq.n	80039b8 <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <Plan_UIRoutine+0x4c>)
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	463b      	mov	r3, r7
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 fd98 	bl	80054d8 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <Plan_UIRoutine+0x48>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	f023 0302 	bic.w	r3, r3, #2
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <Plan_UIRoutine+0x48>)
 80039b4:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 80039b6:	e001      	b.n	80039bc <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 80039b8:	f002 f984 	bl	8005cc4 <GetActionSequenceRoutine>
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000a6c 	.word	0x20000a6c
 80039c8:	20000cd9 	.word	0x20000cd9

080039cc <Plan_Main>:

uint8_t retval;
void Plan_Main(float period) {
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 80039d6:	4bb2      	ldr	r3, [pc, #712]	; (8003ca0 <Plan_Main+0x2d4>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 81c1 	beq.w	8003d66 <Plan_Main+0x39a>
		if(main_flag & MAIN_FLAG_NEXT) {
 80039e4:	4bae      	ldr	r3, [pc, #696]	; (8003ca0 <Plan_Main+0x2d4>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 81b5 	bne.w	8003d5c <Plan_Main+0x390>
//			Run_LineTracing(speed_now, period, plan.status_pid);

		}
		else {

			if(retval == 0) {
 80039f2:	4bac      	ldr	r3, [pc, #688]	; (8003ca4 <Plan_Main+0x2d8>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d110      	bne.n	8003a1c <Plan_Main+0x50>
				Run_LineTracing(speed_now, period, plan.status_pid);
 80039fa:	4bab      	ldr	r3, [pc, #684]	; (8003ca8 <Plan_Main+0x2dc>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	4ba9      	ldr	r3, [pc, #676]	; (8003cac <Plan_Main+0x2e0>)
 8003a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003a12:	eeb0 0a67 	vmov.f32	s0, s15
 8003a16:	f001 f96b 	bl	8004cf0 <Run_LineTracing>
 8003a1a:	e049      	b.n	8003ab0 <Plan_Main+0xe4>
			}
			else if(retval == 2){
 8003a1c:	4ba1      	ldr	r3, [pc, #644]	; (8003ca4 <Plan_Main+0x2d8>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d13b      	bne.n	8003a9c <Plan_Main+0xd0>
				sum_error = 0;
 8003a24:	4ba2      	ldr	r3, [pc, #648]	; (8003cb0 <Plan_Main+0x2e4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	801a      	strh	r2, [r3, #0]
				counter_status = 0;
 8003a2a:	4ba2      	ldr	r3, [pc, #648]	; (8003cb4 <Plan_Main+0x2e8>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 8003a30:	4ba1      	ldr	r3, [pc, #644]	; (8003cb8 <Plan_Main+0x2ec>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
				autoturn_stat = 0;
 8003a36:	4ba1      	ldr	r3, [pc, #644]	; (8003cbc <Plan_Main+0x2f0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
				speed_now = plan.speed;
 8003a3c:	4b9b      	ldr	r3, [pc, #620]	; (8003cac <Plan_Main+0x2e0>)
 8003a3e:	7d9a      	ldrb	r2, [r3, #22]
 8003a40:	4b99      	ldr	r3, [pc, #612]	; (8003ca8 <Plan_Main+0x2dc>)
 8003a42:	701a      	strb	r2, [r3, #0]
				num_index++;
 8003a44:	4b9e      	ldr	r3, [pc, #632]	; (8003cc0 <Plan_Main+0x2f4>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b9c      	ldr	r3, [pc, #624]	; (8003cc0 <Plan_Main+0x2f4>)
 8003a4e:	701a      	strb	r2, [r3, #0]
				if(num_index == plan.num_action) {
 8003a50:	4b96      	ldr	r3, [pc, #600]	; (8003cac <Plan_Main+0x2e0>)
 8003a52:	785a      	ldrb	r2, [r3, #1]
 8003a54:	4b9a      	ldr	r3, [pc, #616]	; (8003cc0 <Plan_Main+0x2f4>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d102      	bne.n	8003a62 <Plan_Main+0x96>
					Plan_Stop();
 8003a5c:	f7ff ff04 	bl	8003868 <Plan_Stop>
					return;
 8003a60:	e181      	b.n	8003d66 <Plan_Main+0x39a>
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 8003a62:	4b98      	ldr	r3, [pc, #608]	; (8003cc4 <Plan_Main+0x2f8>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	4a90      	ldr	r2, [pc, #576]	; (8003cac <Plan_Main+0x2e0>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	789a      	ldrb	r2, [r3, #2]
 8003a6e:	4b94      	ldr	r3, [pc, #592]	; (8003cc0 <Plan_Main+0x2f4>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d805      	bhi.n	8003a82 <Plan_Main+0xb6>
					num_checkpoint++;
 8003a76:	4b93      	ldr	r3, [pc, #588]	; (8003cc4 <Plan_Main+0x2f8>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b91      	ldr	r3, [pc, #580]	; (8003cc4 <Plan_Main+0x2f8>)
 8003a80:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 8003a82:	f002 f8cf 	bl	8005c24 <GetActionSequence>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d111      	bne.n	8003ab0 <Plan_Main+0xe4>
					main_flag |= MAIN_FLAG_NEXT;
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <Plan_Main+0x2d4>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4b82      	ldr	r3, [pc, #520]	; (8003ca0 <Plan_Main+0x2d4>)
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e009      	b.n	8003ab0 <Plan_Main+0xe4>
			}
			else if(retval == 3){
 8003a9c:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <Plan_Main+0x2d8>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d105      	bne.n	8003ab0 <Plan_Main+0xe4>
				counter_status = 0;
 8003aa4:	4b83      	ldr	r3, [pc, #524]	; (8003cb4 <Plan_Main+0x2e8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
				action_status = 2;
 8003aaa:	4b83      	ldr	r3, [pc, #524]	; (8003cb8 <Plan_Main+0x2ec>)
 8003aac:	2202      	movs	r2, #2
 8003aae:	701a      	strb	r2, [r3, #0]
			}

			speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
 8003ab0:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <Plan_Main+0x2fc>)
 8003ab2:	7a9b      	ldrb	r3, [r3, #10]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <Plan_Main+0xf2>
 8003ab8:	4b7c      	ldr	r3, [pc, #496]	; (8003cac <Plan_Main+0x2e0>)
 8003aba:	7d9b      	ldrb	r3, [r3, #22]
 8003abc:	e001      	b.n	8003ac2 <Plan_Main+0xf6>
 8003abe:	4b82      	ldr	r3, [pc, #520]	; (8003cc8 <Plan_Main+0x2fc>)
 8003ac0:	7a9b      	ldrb	r3, [r3, #10]
 8003ac2:	4a79      	ldr	r2, [pc, #484]	; (8003ca8 <Plan_Main+0x2dc>)
 8003ac4:	7013      	strb	r3, [r2, #0]
			if(action_status == 0) {
 8003ac6:	4b7c      	ldr	r3, [pc, #496]	; (8003cb8 <Plan_Main+0x2ec>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d111      	bne.n	8003af2 <Plan_Main+0x126>
				switch(GET_LINE_COLOR_STAT(plan_active.status)) {
 8003ace:	4b7e      	ldr	r3, [pc, #504]	; (8003cc8 <Plan_Main+0x2fc>)
 8003ad0:	7adb      	ldrb	r3, [r3, #11]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d002      	beq.n	8003ae0 <Plan_Main+0x114>
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d003      	beq.n	8003ae6 <Plan_Main+0x11a>
 8003ade:	e005      	b.n	8003aec <Plan_Main+0x120>
				case LINE_COLOR_STAT_BLACK: SEN_BlackLine(); break;
 8003ae0:	f001 fc5e 	bl	80053a0 <SEN_BlackLine>
 8003ae4:	e002      	b.n	8003aec <Plan_Main+0x120>
				case LINE_COLOR_STAT_WHITE: SEN_WhiteLine(); break;
 8003ae6:	f001 fc67 	bl	80053b8 <SEN_WhiteLine>
 8003aea:	bf00      	nop
				}
				action_status = 1;
 8003aec:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <Plan_Main+0x2ec>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
			}

			if(action_status <= 1 && 				 \
 8003af2:	4b71      	ldr	r3, [pc, #452]	; (8003cb8 <Plan_Main+0x2ec>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d81f      	bhi.n	8003b3a <Plan_Main+0x16e>
					(plan_active.act != PLAN_STOP && \
 8003afa:	4b73      	ldr	r3, [pc, #460]	; (8003cc8 <Plan_Main+0x2fc>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
			if(action_status <= 1 && 				 \
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01b      	beq.n	8003b3a <Plan_Main+0x16e>
					 plan_active.act != PLAN_NULL && \
 8003b02:	4b71      	ldr	r3, [pc, #452]	; (8003cc8 <Plan_Main+0x2fc>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
					(plan_active.act != PLAN_STOP && \
 8003b06:	2b09      	cmp	r3, #9
 8003b08:	d017      	beq.n	8003b3a <Plan_Main+0x16e>
					 plan_active.act != PLAN_JUMP)) {
 8003b0a:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <Plan_Main+0x2fc>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_NULL && \
 8003b0e:	2b0b      	cmp	r3, #11
 8003b10:	d013      	beq.n	8003b3a <Plan_Main+0x16e>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 8003b12:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <Plan_Main+0x2dc>)
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <Plan_Main+0x2fc>)
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	685c      	ldr	r4, [r3, #4]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	461c      	mov	r4, r3
 8003b24:	4613      	mov	r3, r2
 8003b26:	ed97 0a01 	vldr	s0, [r7, #4]
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	f7ff fdea 	bl	8003704 <Plan_ActionInit>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <Plan_Main+0x2d8>)
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e110      	b.n	8003d5c <Plan_Main+0x390>
			}
			else {
				switch(plan_active.act) {
 8003b3a:	4b63      	ldr	r3, [pc, #396]	; (8003cc8 <Plan_Main+0x2fc>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	f200 8109 	bhi.w	8003d56 <Plan_Main+0x38a>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <Plan_Main+0x180>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003bb1 	.word	0x08003bb1
 8003b58:	08003bd3 	.word	0x08003bd3
 8003b5c:	08003bf7 	.word	0x08003bf7
 8003b60:	08003c19 	.word	0x08003c19
 8003b64:	08003c3b 	.word	0x08003c3b
 8003b68:	08003c5d 	.word	0x08003c5d
 8003b6c:	08003c7f 	.word	0x08003c7f
 8003b70:	08003ccd 	.word	0x08003ccd
 8003b74:	08003cef 	.word	0x08003cef
 8003b78:	08003d13 	.word	0x08003d13
 8003b7c:	08003d35 	.word	0x08003d35
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 8003b80:	f7ff fe72 	bl	8003868 <Plan_Stop>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <Plan_Main+0x2d8>)
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e0e6      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	; (8003cc8 <Plan_Main+0x2fc>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4611      	mov	r1, r2
 8003b94:	6858      	ldr	r0, [r3, #4]
 8003b96:	4602      	mov	r2, r0
 8003b98:	6898      	ldr	r0, [r3, #8]
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f7fe fef5 	bl	8002990 <Plan_Left>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <Plan_Main+0x2d8>)
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e0d5      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 8003bb0:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <Plan_Main+0x2fc>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	6858      	ldr	r0, [r3, #4]
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6898      	ldr	r0, [r3, #8]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4608      	mov	r0, r1
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7fe fff8 	bl	8002bb8 <Plan_Right>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <Plan_Main+0x2d8>)
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e0c4      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <Plan_Main+0x2dc>)
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	4b3c      	ldr	r3, [pc, #240]	; (8003cc8 <Plan_Main+0x2fc>)
 8003bd8:	6819      	ldr	r1, [r3, #0]
 8003bda:	4608      	mov	r0, r1
 8003bdc:	685c      	ldr	r4, [r3, #4]
 8003bde:	4621      	mov	r1, r4
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	461c      	mov	r4, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	4622      	mov	r2, r4
 8003be8:	f7ff f8f8 	bl	8002ddc <Plan_Forward>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <Plan_Main+0x2d8>)
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e0b2      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <Plan_Main+0x2fc>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	6858      	ldr	r0, [r3, #4]
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6898      	ldr	r0, [r3, #8]
 8003c02:	4603      	mov	r3, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f7ff fabf 	bl	800318c <Plan_Follow>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <Plan_Main+0x2d8>)
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e0a1      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <Plan_Main+0x2fc>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	6858      	ldr	r0, [r3, #4]
 8003c20:	4602      	mov	r2, r0
 8003c22:	6898      	ldr	r0, [r3, #8]
 8003c24:	4603      	mov	r3, r0
 8003c26:	4608      	mov	r0, r1
 8003c28:	4611      	mov	r1, r2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7ff fb08 	bl	8003240 <Plan_FollowLeft>
 8003c30:	4603      	mov	r3, r0
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <Plan_Main+0x2d8>)
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e090      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 8003c3a:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <Plan_Main+0x2fc>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	6858      	ldr	r0, [r3, #4]
 8003c42:	4602      	mov	r2, r0
 8003c44:	6898      	ldr	r0, [r3, #8]
 8003c46:	4603      	mov	r3, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f7ff fc03 	bl	8003458 <Plan_FollowRight>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <Plan_Main+0x2d8>)
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e07f      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <Plan_Main+0x2fc>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4611      	mov	r1, r2
 8003c62:	6858      	ldr	r0, [r3, #4]
 8003c64:	4602      	mov	r2, r0
 8003c66:	6898      	ldr	r0, [r3, #8]
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7ff fcfe 	bl	8003670 <Plan_Invert>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <Plan_Main+0x2d8>)
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e06e      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <Plan_Main+0x2fc>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4611      	mov	r1, r2
 8003c84:	6858      	ldr	r0, [r3, #4]
 8003c86:	4602      	mov	r2, r0
 8003c88:	6898      	ldr	r0, [r3, #8]
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	f7ff fd04 	bl	800369e <Plan_NextPlan>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <Plan_Main+0x2d8>)
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e05d      	b.n	8003d5c <Plan_Main+0x390>
 8003ca0:	20000a6c 	.word	0x20000a6c
 8003ca4:	20000a88 	.word	0x20000a88
 8003ca8:	20000a87 	.word	0x20000a87
 8003cac:	20000da8 	.word	0x20000da8
 8003cb0:	20000b3c 	.word	0x20000b3c
 8003cb4:	20000a84 	.word	0x20000a84
 8003cb8:	20000a85 	.word	0x20000a85
 8003cbc:	20000a86 	.word	0x20000a86
 8003cc0:	20000cd9 	.word	0x20000cd9
 8003cc4:	20000cd8 	.word	0x20000cd8
 8003cc8:	20000d98 	.word	0x20000d98
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <Plan_Main+0x3a0>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	6858      	ldr	r0, [r3, #4]
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6898      	ldr	r0, [r3, #8]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7ff fcea 	bl	80036b8 <Plan_Null>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <Plan_Main+0x3a4>)
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e036      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <Plan_Main+0x3a8>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <Plan_Main+0x3a0>)
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	685c      	ldr	r4, [r3, #4]
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	461c      	mov	r4, r3
 8003d00:	4613      	mov	r3, r2
 8003d02:	4622      	mov	r2, r4
 8003d04:	f7ff f91c 	bl	8002f40 <Plan_Backward>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <Plan_Main+0x3a4>)
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e024      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_JUMP: 	retval = Plan_Jump(plan_active); 		break;
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <Plan_Main+0x3a0>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4611      	mov	r1, r2
 8003d18:	6858      	ldr	r0, [r3, #4]
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6898      	ldr	r0, [r3, #8]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	f7ff fcd5 	bl	80036d4 <Plan_Jump>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <Plan_Main+0x3a4>)
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e013      	b.n	8003d5c <Plan_Main+0x390>
				case PLAN_IDLE: 	retval = Plan_Idle(plan_active); 		break;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <Plan_Main+0x3a0>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	6858      	ldr	r0, [r3, #4]
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6898      	ldr	r0, [r3, #8]
 8003d40:	4603      	mov	r3, r0
 8003d42:	4608      	mov	r0, r1
 8003d44:	4611      	mov	r1, r2
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7ff f9ae 	bl	80030a8 <Plan_Idle>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <Plan_Main+0x3a4>)
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e002      	b.n	8003d5c <Plan_Main+0x390>
				default: retval = 2;
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <Plan_Main+0x3a4>)
 8003d58:	2202      	movs	r2, #2
 8003d5a:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		plan_counter++;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <Plan_Main+0x3ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <Plan_Main+0x3ac>)
 8003d64:	6013      	str	r3, [r2, #0]
	}
}
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd90      	pop	{r4, r7, pc}
 8003d6c:	20000d98 	.word	0x20000d98
 8003d70:	20000a88 	.word	0x20000a88
 8003d74:	20000a87 	.word	0x20000a87
 8003d78:	20000a78 	.word	0x20000a78

08003d7c <Run_Init>:
float robot_enc_pos = 0;
float robot_enc_yawpos = 0;

float temp_yaw_speed;

void Run_Init() {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8003d80:	2290      	movs	r2, #144	; 0x90
 8003d82:	2100      	movs	r1, #0
 8003d84:	4829      	ldr	r0, [pc, #164]	; (8003e2c <Run_Init+0xb0>)
 8003d86:	f00b fe92 	bl	800faae <memset>

	motor[0].mode = MOTOR_MODE_CLOSE;
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <Run_Init+0xb0>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <Run_Init+0xb0>)
 8003d92:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <Run_Init+0xb4>)
 8003d94:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <Run_Init+0xb0>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <Run_Init+0xb0>)
 8003d9e:	2204      	movs	r2, #4
 8003da0:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <Run_Init+0xb0>)
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <Run_Init+0xb8>)
 8003da6:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <Run_Init+0xb0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.01;
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <Run_Init+0xb0>)
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <Run_Init+0xbc>)
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].vel_factor = 20;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <Run_Init+0xb0>)
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <Run_Init+0xc0>)
 8003db8:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].kp = 0.2;
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <Run_Init+0xb0>)
 8003dbc:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <Run_Init+0xc4>)
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
	motor[0].ki = 15;
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <Run_Init+0xb0>)
 8003dc2:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <Run_Init+0xc8>)
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34
	motor[0].filter_alpha = 0.5;
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <Run_Init+0xb0>)
 8003dc8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44

	motor[1].mode = motor[0].mode;
 8003dce:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <Run_Init+0xb0>)
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <Run_Init+0xb0>)
 8003dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	motor[1].pwm_htim = &htim3;
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <Run_Init+0xb0>)
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <Run_Init+0xb4>)
 8003ddc:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[1].ch1 = TIM_CHANNEL_3;
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <Run_Init+0xb0>)
 8003de0:	2208      	movs	r2, #8
 8003de2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	motor[1].ch2 = TIM_CHANNEL_4;
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <Run_Init+0xb0>)
 8003de8:	220c      	movs	r2, #12
 8003dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	motor[1].enc_htim = &htim4;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <Run_Init+0xb0>)
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <Run_Init+0xcc>)
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58
	motor[1].dir = -1;
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <Run_Init+0xb0>)
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	motor[1].pwm_factor = 0.0097;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <Run_Init+0xb0>)
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <Run_Init+0xd0>)
 8003e00:	66da      	str	r2, [r3, #108]	; 0x6c
	motor[1].vel_factor = 20;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <Run_Init+0xb0>)
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <Run_Init+0xc0>)
 8003e06:	675a      	str	r2, [r3, #116]	; 0x74
	motor[1].kp = 0.1;
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <Run_Init+0xb0>)
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <Run_Init+0xd4>)
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78
	motor[1].ki = motor[0].ki;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <Run_Init+0xb0>)
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <Run_Init+0xb0>)
 8003e14:	67d3      	str	r3, [r2, #124]	; 0x7c
	motor[1].filter_alpha = motor[0].filter_alpha;
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <Run_Init+0xb0>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <Run_Init+0xb0>)
 8003e1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	robot_enc_pos = 0;
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <Run_Init+0xd8>)
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000a8c 	.word	0x20000a8c
 8003e30:	20000e6c 	.word	0x20000e6c
 8003e34:	20000e24 	.word	0x20000e24
 8003e38:	3c23d70a 	.word	0x3c23d70a
 8003e3c:	41a00000 	.word	0x41a00000
 8003e40:	3e4ccccd 	.word	0x3e4ccccd
 8003e44:	41700000 	.word	0x41700000
 8003e48:	20000eb4 	.word	0x20000eb4
 8003e4c:	3c1eecc0 	.word	0x3c1eecc0
 8003e50:	3dcccccd 	.word	0x3dcccccd
 8003e54:	20000b1c 	.word	0x20000b1c

08003e58 <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 8003e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 8003e64:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e68:	4828      	ldr	r0, [pc, #160]	; (8003f0c <Run_MotorRoutine+0xb4>)
 8003e6a:	f7fe fbbc 	bl	80025e6 <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 8003e6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e72:	4827      	ldr	r0, [pc, #156]	; (8003f10 <Run_MotorRoutine+0xb8>)
 8003e74:	f7fe fbb7 	bl	80025e6 <Motor_EnocderRoutine>
	robot_enc_pos += (motor[0].enc_vel*0.5) + (motor[1].enc_vel*0.5);
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <Run_MotorRoutine+0xbc>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fb63 	bl	8000548 <__aeabi_f2d>
 8003e82:	4604      	mov	r4, r0
 8003e84:	460d      	mov	r5, r1
 8003e86:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <Run_MotorRoutine+0xb4>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fb4a 	bl	8000524 <__aeabi_i2d>
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <Run_MotorRoutine+0xc0>)
 8003e96:	f7fc fbaf 	bl	80005f8 <__aeabi_dmul>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4690      	mov	r8, r2
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <Run_MotorRoutine+0xb4>)
 8003ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc fb3c 	bl	8000524 <__aeabi_i2d>
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <Run_MotorRoutine+0xc0>)
 8003eb2:	f7fc fba1 	bl	80005f8 <__aeabi_dmul>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4640      	mov	r0, r8
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	f7fc f9e5 	bl	800028c <__adddf3>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fc f9df 	bl	800028c <__adddf3>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7fc fe87 	bl	8000be8 <__aeabi_d2f>
 8003eda:	4603      	mov	r3, r0
 8003edc:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <Run_MotorRoutine+0xbc>)
 8003ede:	6013      	str	r3, [r2, #0]
	robot_enc_yawpos += (motor[1].enc_vel - motor[0].enc_vel);
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <Run_MotorRoutine+0xb4>)
 8003ee2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <Run_MotorRoutine+0xb4>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <Run_MotorRoutine+0xc4>)
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <Run_MotorRoutine+0xc4>)
 8003efe:	edc3 7a00 	vstr	s15, [r3]
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f0c:	20000a8c 	.word	0x20000a8c
 8003f10:	20000ad4 	.word	0x20000ad4
 8003f14:	20000b1c 	.word	0x20000b1c
 8003f18:	3fe00000 	.word	0x3fe00000
 8003f1c:	20000b20 	.word	0x20000b20

08003f20 <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 8003f2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f2e:	4806      	ldr	r0, [pc, #24]	; (8003f48 <Run_MotorRoutine2+0x28>)
 8003f30:	f7fe fb88 	bl	8002644 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 8003f34:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f38:	4804      	ldr	r0, [pc, #16]	; (8003f4c <Run_MotorRoutine2+0x2c>)
 8003f3a:	f7fe fb83 	bl	8002644 <Motor_ControlRoutine>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000a8c 	.word	0x20000a8c
 8003f4c:	20000ad4 	.word	0x20000ad4

08003f50 <Run_YawSpeed>:
float ki;
float kd;
float alpha;
int16_t sum_error;

float Run_YawSpeed(float period, float _speed, uint8_t flag) {
 8003f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f54:	b08c      	sub	sp, #48	; 0x30
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f5c:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
	static int16_t last_error = 0;
	static int16_t last_div_error = 0;
	static float last_mv = 0;
	int16_t error = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pr_sensor_bin = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	83fb      	strh	r3, [r7, #30]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 8003f6c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003f70:	83bb      	strh	r3, [r7, #28]
	if((flag&0x01)==0x01) {
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <Run_YawSpeed+0x48>
		pr_sensor_bin = (~sensor_binary) & mask;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <Run_YawSpeed+0x44>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	b21a      	sxth	r2, r3
 8003f86:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	83fb      	strh	r3, [r7, #30]
 8003f90:	e007      	b.n	8003fa2 <Run_YawSpeed+0x52>
 8003f92:	bf00      	nop
 8003f94:	20000baa 	.word	0x20000baa
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 8003f98:	4bca      	ldr	r3, [pc, #808]	; (80042c4 <Run_YawSpeed+0x374>)
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	8bbb      	ldrh	r3, [r7, #28]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	83fb      	strh	r3, [r7, #30]
	}

	switch(sensor_binary) {
 8003fa2:	4bc8      	ldr	r3, [pc, #800]	; (80042c4 <Run_YawSpeed+0x374>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003faa:	4293      	cmp	r3, r2
 8003fac:	f000 844c 	beq.w	8004848 <Run_YawSpeed+0x8f8>
 8003fb0:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	f300 84fd 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8003fba:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	f000 844a 	beq.w	8004858 <Run_YawSpeed+0x908>
 8003fc4:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f300 84f3 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8003fce:	f5b3 5f67 	cmp.w	r3, #14784	; 0x39c0
 8003fd2:	f000 848e 	beq.w	80048f2 <Run_YawSpeed+0x9a2>
 8003fd6:	f5b3 5f67 	cmp.w	r3, #14784	; 0x39c0
 8003fda:	f300 84eb 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8003fde:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 8003fe2:	f000 8492 	beq.w	800490a <Run_YawSpeed+0x9ba>
 8003fe6:	f5b3 5f66 	cmp.w	r3, #14720	; 0x3980
 8003fea:	f300 84e3 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8003fee:	f643 02e0 	movw	r2, #14560	; 0x38e0
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f000 8466 	beq.w	80048c4 <Run_YawSpeed+0x974>
 8003ff8:	f643 02e0 	movw	r2, #14560	; 0x38e0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	f300 84d9 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004002:	f5b3 5f63 	cmp.w	r3, #14528	; 0x38c0
 8004006:	f000 8468 	beq.w	80048da <Run_YawSpeed+0x98a>
 800400a:	f5b3 5f63 	cmp.w	r3, #14528	; 0x38c0
 800400e:	f300 84d1 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004012:	f643 0260 	movw	r2, #14432	; 0x3860
 8004016:	4293      	cmp	r3, r2
 8004018:	f000 8448 	beq.w	80048ac <Run_YawSpeed+0x95c>
 800401c:	f643 0260 	movw	r2, #14432	; 0x3860
 8004020:	4293      	cmp	r3, r2
 8004022:	f300 84c7 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004026:	f643 0207 	movw	r2, #14343	; 0x3807
 800402a:	4293      	cmp	r3, r2
 800402c:	f000 841e 	beq.w	800486c <Run_YawSpeed+0x91c>
 8004030:	f643 0207 	movw	r2, #14343	; 0x3807
 8004034:	4293      	cmp	r3, r2
 8004036:	f300 84bd 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800403a:	f643 0201 	movw	r2, #14337	; 0x3801
 800403e:	4293      	cmp	r3, r2
 8004040:	f000 8406 	beq.w	8004850 <Run_YawSpeed+0x900>
 8004044:	f643 0201 	movw	r2, #14337	; 0x3801
 8004048:	4293      	cmp	r3, r2
 800404a:	f300 84b3 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800404e:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8004052:	f000 83c8 	beq.w	80047e6 <Run_YawSpeed+0x896>
 8004056:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 800405a:	f300 84ab 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800405e:	f5b3 5f47 	cmp.w	r3, #12736	; 0x31c0
 8004062:	f000 8449 	beq.w	80048f8 <Run_YawSpeed+0x9a8>
 8004066:	f5b3 5f47 	cmp.w	r3, #12736	; 0x31c0
 800406a:	f300 84a3 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800406e:	f5b3 5f46 	cmp.w	r3, #12672	; 0x3180
 8004072:	f000 844d 	beq.w	8004910 <Run_YawSpeed+0x9c0>
 8004076:	f5b3 5f46 	cmp.w	r3, #12672	; 0x3180
 800407a:	f300 849b 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800407e:	f243 02e0 	movw	r2, #12512	; 0x30e0
 8004082:	4293      	cmp	r3, r2
 8004084:	f000 8422 	beq.w	80048cc <Run_YawSpeed+0x97c>
 8004088:	f243 02e0 	movw	r2, #12512	; 0x30e0
 800408c:	4293      	cmp	r3, r2
 800408e:	f300 8491 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004092:	f5b3 5f43 	cmp.w	r3, #12480	; 0x30c0
 8004096:	f000 8423 	beq.w	80048e0 <Run_YawSpeed+0x990>
 800409a:	f5b3 5f43 	cmp.w	r3, #12480	; 0x30c0
 800409e:	f300 8489 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80040a2:	f243 0260 	movw	r2, #12384	; 0x3060
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f000 83ef 	beq.w	800488a <Run_YawSpeed+0x93a>
 80040ac:	f243 0260 	movw	r2, #12384	; 0x3060
 80040b0:	4293      	cmp	r3, r2
 80040b2:	f300 847f 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80040b6:	f243 020f 	movw	r2, #12303	; 0x300f
 80040ba:	4293      	cmp	r3, r2
 80040bc:	f000 83dd 	beq.w	800487a <Run_YawSpeed+0x92a>
 80040c0:	f243 020f 	movw	r2, #12303	; 0x300f
 80040c4:	4293      	cmp	r3, r2
 80040c6:	f300 8475 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80040ca:	f243 0203 	movw	r2, #12291	; 0x3003
 80040ce:	4293      	cmp	r3, r2
 80040d0:	f000 83c9 	beq.w	8004866 <Run_YawSpeed+0x916>
 80040d4:	f243 0203 	movw	r2, #12291	; 0x3003
 80040d8:	4293      	cmp	r3, r2
 80040da:	f300 846b 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80040de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040e2:	f000 8383 	beq.w	80047ec <Run_YawSpeed+0x89c>
 80040e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ea:	f300 8463 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80040ee:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 80040f2:	f000 8413 	beq.w	800491c <Run_YawSpeed+0x9cc>
 80040f6:	f5b3 5f0e 	cmp.w	r3, #9088	; 0x2380
 80040fa:	f300 845b 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80040fe:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8004102:	f000 840e 	beq.w	8004922 <Run_YawSpeed+0x9d2>
 8004106:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800410a:	f300 8453 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800410e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8004112:	f000 83f4 	beq.w	80048fe <Run_YawSpeed+0x9ae>
 8004116:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 800411a:	f300 844b 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800411e:	f242 1283 	movw	r2, #8579	; 0x2183
 8004122:	4293      	cmp	r3, r2
 8004124:	f000 83bf 	beq.w	80048a6 <Run_YawSpeed+0x956>
 8004128:	f242 1283 	movw	r2, #8579	; 0x2183
 800412c:	4293      	cmp	r3, r2
 800412e:	f300 8441 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004132:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 8004136:	f000 83ee 	beq.w	8004916 <Run_YawSpeed+0x9c6>
 800413a:	f5b3 5f06 	cmp.w	r3, #8576	; 0x2180
 800413e:	f300 8439 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004142:	f242 02e0 	movw	r2, #8416	; 0x20e0
 8004146:	4293      	cmp	r3, r2
 8004148:	f000 83a3 	beq.w	8004892 <Run_YawSpeed+0x942>
 800414c:	f242 02e0 	movw	r2, #8416	; 0x20e0
 8004150:	4293      	cmp	r3, r2
 8004152:	f300 842f 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004156:	f242 02c1 	movw	r2, #8385	; 0x20c1
 800415a:	4293      	cmp	r3, r2
 800415c:	f000 839d 	beq.w	800489a <Run_YawSpeed+0x94a>
 8004160:	f242 02c1 	movw	r2, #8385	; 0x20c1
 8004164:	4293      	cmp	r3, r2
 8004166:	f300 8425 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800416a:	f5b3 5f03 	cmp.w	r3, #8384	; 0x20c0
 800416e:	f000 83ba 	beq.w	80048e6 <Run_YawSpeed+0x996>
 8004172:	f5b3 5f03 	cmp.w	r3, #8384	; 0x20c0
 8004176:	f300 841d 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800417a:	f242 0260 	movw	r2, #8288	; 0x2060
 800417e:	4293      	cmp	r3, r2
 8004180:	f000 839c 	beq.w	80048bc <Run_YawSpeed+0x96c>
 8004184:	f242 0260 	movw	r2, #8288	; 0x2060
 8004188:	4293      	cmp	r3, r2
 800418a:	f300 8413 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800418e:	f242 021f 	movw	r2, #8223	; 0x201f
 8004192:	4293      	cmp	r3, r2
 8004194:	f300 840e 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004198:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 800419c:	4293      	cmp	r3, r2
 800419e:	f280 80bd 	bge.w	800431c <Run_YawSpeed+0x3cc>
 80041a2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80041a6:	f000 831b 	beq.w	80047e0 <Run_YawSpeed+0x890>
 80041aa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80041ae:	f300 8401 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80041b2:	f5b3 5fce 	cmp.w	r3, #6592	; 0x19c0
 80041b6:	f000 8399 	beq.w	80048ec <Run_YawSpeed+0x99c>
 80041ba:	f5b3 5fce 	cmp.w	r3, #6592	; 0x19c0
 80041be:	f300 83f9 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80041c2:	f5b3 5fcc 	cmp.w	r3, #6528	; 0x1980
 80041c6:	f000 839d 	beq.w	8004904 <Run_YawSpeed+0x9b4>
 80041ca:	f5b3 5fcc 	cmp.w	r3, #6528	; 0x1980
 80041ce:	f300 83f1 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80041d2:	f5b3 5fc6 	cmp.w	r3, #6336	; 0x18c0
 80041d6:	f000 837d 	beq.w	80048d4 <Run_YawSpeed+0x984>
 80041da:	f5b3 5fc6 	cmp.w	r3, #6336	; 0x18c0
 80041de:	f300 83e9 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80041e2:	f5b3 5fc3 	cmp.w	r3, #6240	; 0x1860
 80041e6:	f000 8365 	beq.w	80048b4 <Run_YawSpeed+0x964>
 80041ea:	f5b3 5fc3 	cmp.w	r3, #6240	; 0x1860
 80041ee:	f300 83e1 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80041f2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f000 8317 	beq.w	800482a <Run_YawSpeed+0x8da>
 80041fc:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004200:	4293      	cmp	r3, r2
 8004202:	f300 83d7 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004206:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800420a:	f000 8317 	beq.w	800483c <Run_YawSpeed+0x8ec>
 800420e:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8004212:	f300 83cf 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004216:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800421a:	f000 82db 	beq.w	80047d4 <Run_YawSpeed+0x884>
 800421e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004222:	f300 83c7 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422a:	f000 82d6 	beq.w	80047da <Run_YawSpeed+0x88a>
 800422e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004232:	f300 83bf 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004236:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800423a:	4293      	cmp	r3, r2
 800423c:	f000 82e8 	beq.w	8004810 <Run_YawSpeed+0x8c0>
 8004240:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004244:	4293      	cmp	r3, r2
 8004246:	f300 83b5 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800424a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800424e:	f000 82e9 	beq.w	8004824 <Run_YawSpeed+0x8d4>
 8004252:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8004256:	f300 83ad 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800425a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800425e:	f000 82ea 	beq.w	8004836 <Run_YawSpeed+0x8e6>
 8004262:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8004266:	f300 83a5 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800426a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800426e:	f000 82ab 	beq.w	80047c8 <Run_YawSpeed+0x878>
 8004272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004276:	f300 839d 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800427a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800427e:	f000 82a6 	beq.w	80047ce <Run_YawSpeed+0x87e>
 8004282:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004286:	f300 8395 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800428a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800428e:	f000 82bb 	beq.w	8004808 <Run_YawSpeed+0x8b8>
 8004292:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8004296:	f300 838d 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 800429a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 800429e:	f000 82be 	beq.w	800481e <Run_YawSpeed+0x8ce>
 80042a2:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80042a6:	f300 8385 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80042aa:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80042ae:	f000 82bf 	beq.w	8004830 <Run_YawSpeed+0x8e0>
 80042b2:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80042b6:	f300 837d 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80042ba:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80042be:	f000 827d 	beq.w	80047bc <Run_YawSpeed+0x86c>
 80042c2:	e001      	b.n	80042c8 <Run_YawSpeed+0x378>
 80042c4:	20000baa 	.word	0x20000baa
 80042c8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80042cc:	f300 8372 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80042d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d4:	f000 8275 	beq.w	80047c2 <Run_YawSpeed+0x872>
 80042d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042dc:	f300 836a 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80042e0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80042e4:	f000 828c 	beq.w	8004800 <Run_YawSpeed+0x8b0>
 80042e8:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80042ec:	f300 8362 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80042f0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80042f4:	f300 835e 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 80042f8:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80042fc:	da68      	bge.n	80043d0 <Run_YawSpeed+0x480>
 80042fe:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8004302:	f280 8357 	bge.w	80049b4 <Run_YawSpeed+0xa64>
 8004306:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800430a:	f280 80ab 	bge.w	8004464 <Run_YawSpeed+0x514>
 800430e:	2b71      	cmp	r3, #113	; 0x71
 8004310:	f300 8214 	bgt.w	800473c <Run_YawSpeed+0x7ec>
 8004314:	2b00      	cmp	r3, #0
 8004316:	f300 8127 	bgt.w	8004568 <Run_YawSpeed+0x618>
 800431a:	e34b      	b.n	80049b4 <Run_YawSpeed+0xa64>
 800431c:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8004320:	3b18      	subs	r3, #24
 8004322:	2b27      	cmp	r3, #39	; 0x27
 8004324:	f200 8346 	bhi.w	80049b4 <Run_YawSpeed+0xa64>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <Run_YawSpeed+0x3e0>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004843 	.word	0x08004843
 8004334:	080049b5 	.word	0x080049b5
 8004338:	080049b5 	.word	0x080049b5
 800433c:	080049b5 	.word	0x080049b5
 8004340:	080049b5 	.word	0x080049b5
 8004344:	080049b5 	.word	0x080049b5
 8004348:	080049b5 	.word	0x080049b5
 800434c:	080049b5 	.word	0x080049b5
 8004350:	080047f3 	.word	0x080047f3
 8004354:	08004861 	.word	0x08004861
 8004358:	080049b5 	.word	0x080049b5
 800435c:	080049b5 	.word	0x080049b5
 8004360:	080049b5 	.word	0x080049b5
 8004364:	080049b5 	.word	0x080049b5
 8004368:	080049b5 	.word	0x080049b5
 800436c:	08004873 	.word	0x08004873
 8004370:	080049b5 	.word	0x080049b5
 8004374:	080049b5 	.word	0x080049b5
 8004378:	080049b5 	.word	0x080049b5
 800437c:	080049b5 	.word	0x080049b5
 8004380:	080049b5 	.word	0x080049b5
 8004384:	080049b5 	.word	0x080049b5
 8004388:	080049b5 	.word	0x080049b5
 800438c:	080049b5 	.word	0x080049b5
 8004390:	080049b5 	.word	0x080049b5
 8004394:	080049b5 	.word	0x080049b5
 8004398:	080049b5 	.word	0x080049b5
 800439c:	080049b5 	.word	0x080049b5
 80043a0:	080049b5 	.word	0x080049b5
 80043a4:	080049b5 	.word	0x080049b5
 80043a8:	080049b5 	.word	0x080049b5
 80043ac:	080049b5 	.word	0x080049b5
 80043b0:	080049b5 	.word	0x080049b5
 80043b4:	080049b5 	.word	0x080049b5
 80043b8:	080049b5 	.word	0x080049b5
 80043bc:	080049b5 	.word	0x080049b5
 80043c0:	080049b5 	.word	0x080049b5
 80043c4:	080049b5 	.word	0x080049b5
 80043c8:	080049b5 	.word	0x080049b5
 80043cc:	08004883 	.word	0x08004883
 80043d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	f200 82ed 	bhi.w	80049b4 <Run_YawSpeed+0xa64>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <Run_YawSpeed+0x490>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080047b1 	.word	0x080047b1
 80043e4:	080048a1 	.word	0x080048a1
 80043e8:	080049b5 	.word	0x080049b5
 80043ec:	08004947 	.word	0x08004947
 80043f0:	080049b5 	.word	0x080049b5
 80043f4:	080049b5 	.word	0x080049b5
 80043f8:	080049b5 	.word	0x080049b5
 80043fc:	08004941 	.word	0x08004941
 8004400:	080049b5 	.word	0x080049b5
 8004404:	080049b5 	.word	0x080049b5
 8004408:	080049b5 	.word	0x080049b5
 800440c:	080049b5 	.word	0x080049b5
 8004410:	080049b5 	.word	0x080049b5
 8004414:	080049b5 	.word	0x080049b5
 8004418:	080049b5 	.word	0x080049b5
 800441c:	080049b5 	.word	0x080049b5
 8004420:	080049b5 	.word	0x080049b5
 8004424:	080049b5 	.word	0x080049b5
 8004428:	080049b5 	.word	0x080049b5
 800442c:	080049b5 	.word	0x080049b5
 8004430:	080049b5 	.word	0x080049b5
 8004434:	080049b5 	.word	0x080049b5
 8004438:	080049b5 	.word	0x080049b5
 800443c:	080049b5 	.word	0x080049b5
 8004440:	080049b5 	.word	0x080049b5
 8004444:	080049b5 	.word	0x080049b5
 8004448:	080049b5 	.word	0x080049b5
 800444c:	080049b5 	.word	0x080049b5
 8004450:	080049b5 	.word	0x080049b5
 8004454:	080049b5 	.word	0x080049b5
 8004458:	080049b5 	.word	0x080049b5
 800445c:	080049b5 	.word	0x080049b5
 8004460:	08004819 	.word	0x08004819
 8004464:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004468:	2b07      	cmp	r3, #7
 800446a:	f200 82a3 	bhi.w	80049b4 <Run_YawSpeed+0xa64>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <Run_YawSpeed+0x524>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080047b7 	.word	0x080047b7
 8004478:	0800493b 	.word	0x0800493b
 800447c:	080049b5 	.word	0x080049b5
 8004480:	08004935 	.word	0x08004935
 8004484:	080049b5 	.word	0x080049b5
 8004488:	080049b5 	.word	0x080049b5
 800448c:	08004929 	.word	0x08004929
 8004490:	0800492f 	.word	0x0800492f
 8004494:	3bc0      	subs	r3, #192	; 0xc0
 8004496:	2b30      	cmp	r3, #48	; 0x30
 8004498:	f200 828c 	bhi.w	80049b4 <Run_YawSpeed+0xa64>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <Run_YawSpeed+0x554>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080047ab 	.word	0x080047ab
 80044a8:	0800495f 	.word	0x0800495f
 80044ac:	080049b5 	.word	0x080049b5
 80044b0:	08004959 	.word	0x08004959
 80044b4:	080049b5 	.word	0x080049b5
 80044b8:	080049b5 	.word	0x080049b5
 80044bc:	0800494d 	.word	0x0800494d
 80044c0:	08004953 	.word	0x08004953
 80044c4:	080049b5 	.word	0x080049b5
 80044c8:	080049b5 	.word	0x080049b5
 80044cc:	080049b5 	.word	0x080049b5
 80044d0:	080049b5 	.word	0x080049b5
 80044d4:	080049b5 	.word	0x080049b5
 80044d8:	080049b5 	.word	0x080049b5
 80044dc:	080049b5 	.word	0x080049b5
 80044e0:	080049b5 	.word	0x080049b5
 80044e4:	080049b5 	.word	0x080049b5
 80044e8:	080049b5 	.word	0x080049b5
 80044ec:	080049b5 	.word	0x080049b5
 80044f0:	080049b5 	.word	0x080049b5
 80044f4:	080049b5 	.word	0x080049b5
 80044f8:	080049b5 	.word	0x080049b5
 80044fc:	080049b5 	.word	0x080049b5
 8004500:	080049b5 	.word	0x080049b5
 8004504:	080049b5 	.word	0x080049b5
 8004508:	080049b5 	.word	0x080049b5
 800450c:	080049b5 	.word	0x080049b5
 8004510:	080049b5 	.word	0x080049b5
 8004514:	080049b5 	.word	0x080049b5
 8004518:	080049b5 	.word	0x080049b5
 800451c:	080049b5 	.word	0x080049b5
 8004520:	080049b5 	.word	0x080049b5
 8004524:	080047a3 	.word	0x080047a3
 8004528:	0800497d 	.word	0x0800497d
 800452c:	080049b5 	.word	0x080049b5
 8004530:	08004975 	.word	0x08004975
 8004534:	080049b5 	.word	0x080049b5
 8004538:	080049b5 	.word	0x080049b5
 800453c:	08004965 	.word	0x08004965
 8004540:	0800496d 	.word	0x0800496d
 8004544:	080049b5 	.word	0x080049b5
 8004548:	080049b5 	.word	0x080049b5
 800454c:	080049b5 	.word	0x080049b5
 8004550:	080049b5 	.word	0x080049b5
 8004554:	080049b5 	.word	0x080049b5
 8004558:	080049b5 	.word	0x080049b5
 800455c:	080049b5 	.word	0x080049b5
 8004560:	080049b5 	.word	0x080049b5
 8004564:	080047f9 	.word	0x080047f9
 8004568:	3b01      	subs	r3, #1
 800456a:	2b70      	cmp	r3, #112	; 0x70
 800456c:	f200 8222 	bhi.w	80049b4 <Run_YawSpeed+0xa64>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <Run_YawSpeed+0x628>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	0800474b 	.word	0x0800474b
 800457c:	080049b5 	.word	0x080049b5
 8004580:	08004753 	.word	0x08004753
 8004584:	080049b5 	.word	0x080049b5
 8004588:	080049b5 	.word	0x080049b5
 800458c:	080049b5 	.word	0x080049b5
 8004590:	0800475b 	.word	0x0800475b
 8004594:	080049b5 	.word	0x080049b5
 8004598:	080049b5 	.word	0x080049b5
 800459c:	080049b5 	.word	0x080049b5
 80045a0:	080049b5 	.word	0x080049b5
 80045a4:	0800476b 	.word	0x0800476b
 80045a8:	080049b5 	.word	0x080049b5
 80045ac:	08004763 	.word	0x08004763
 80045b0:	080049b5 	.word	0x080049b5
 80045b4:	080049b5 	.word	0x080049b5
 80045b8:	080049b5 	.word	0x080049b5
 80045bc:	080049b5 	.word	0x080049b5
 80045c0:	080049b5 	.word	0x080049b5
 80045c4:	080049b5 	.word	0x080049b5
 80045c8:	080049b5 	.word	0x080049b5
 80045cc:	080049b5 	.word	0x080049b5
 80045d0:	080049b5 	.word	0x080049b5
 80045d4:	0800477b 	.word	0x0800477b
 80045d8:	080049b5 	.word	0x080049b5
 80045dc:	080049b5 	.word	0x080049b5
 80045e0:	080049b5 	.word	0x080049b5
 80045e4:	08004773 	.word	0x08004773
 80045e8:	080049b5 	.word	0x080049b5
 80045ec:	080049b5 	.word	0x080049b5
 80045f0:	080049b5 	.word	0x080049b5
 80045f4:	080049b5 	.word	0x080049b5
 80045f8:	080049b5 	.word	0x080049b5
 80045fc:	080049b5 	.word	0x080049b5
 8004600:	080049b5 	.word	0x080049b5
 8004604:	080049b5 	.word	0x080049b5
 8004608:	080049b5 	.word	0x080049b5
 800460c:	080049b5 	.word	0x080049b5
 8004610:	080049b5 	.word	0x080049b5
 8004614:	080049b5 	.word	0x080049b5
 8004618:	080049b5 	.word	0x080049b5
 800461c:	080049b5 	.word	0x080049b5
 8004620:	080049b5 	.word	0x080049b5
 8004624:	080049b5 	.word	0x080049b5
 8004628:	080049b5 	.word	0x080049b5
 800462c:	080049b5 	.word	0x080049b5
 8004630:	080049b5 	.word	0x080049b5
 8004634:	0800478b 	.word	0x0800478b
 8004638:	080049ad 	.word	0x080049ad
 800463c:	080049b5 	.word	0x080049b5
 8004640:	080049b5 	.word	0x080049b5
 8004644:	080049b5 	.word	0x080049b5
 8004648:	080049b5 	.word	0x080049b5
 800464c:	080049b5 	.word	0x080049b5
 8004650:	080049b5 	.word	0x080049b5
 8004654:	08004783 	.word	0x08004783
 8004658:	080049b5 	.word	0x080049b5
 800465c:	080049b5 	.word	0x080049b5
 8004660:	080049b5 	.word	0x080049b5
 8004664:	080049b5 	.word	0x080049b5
 8004668:	080049b5 	.word	0x080049b5
 800466c:	080049b5 	.word	0x080049b5
 8004670:	080049b5 	.word	0x080049b5
 8004674:	080049b5 	.word	0x080049b5
 8004678:	080049b5 	.word	0x080049b5
 800467c:	080049b5 	.word	0x080049b5
 8004680:	080049b5 	.word	0x080049b5
 8004684:	080049b5 	.word	0x080049b5
 8004688:	080049b5 	.word	0x080049b5
 800468c:	080049b5 	.word	0x080049b5
 8004690:	080049b5 	.word	0x080049b5
 8004694:	080049b5 	.word	0x080049b5
 8004698:	080049b5 	.word	0x080049b5
 800469c:	080049b5 	.word	0x080049b5
 80046a0:	080049b5 	.word	0x080049b5
 80046a4:	080049b5 	.word	0x080049b5
 80046a8:	080049b5 	.word	0x080049b5
 80046ac:	080049b5 	.word	0x080049b5
 80046b0:	080049b5 	.word	0x080049b5
 80046b4:	080049b5 	.word	0x080049b5
 80046b8:	080049b5 	.word	0x080049b5
 80046bc:	080049b5 	.word	0x080049b5
 80046c0:	080049b5 	.word	0x080049b5
 80046c4:	080049b5 	.word	0x080049b5
 80046c8:	080049b5 	.word	0x080049b5
 80046cc:	080049b5 	.word	0x080049b5
 80046d0:	080049b5 	.word	0x080049b5
 80046d4:	080049b5 	.word	0x080049b5
 80046d8:	080049b5 	.word	0x080049b5
 80046dc:	080049b5 	.word	0x080049b5
 80046e0:	080049b5 	.word	0x080049b5
 80046e4:	080049b5 	.word	0x080049b5
 80046e8:	080049b5 	.word	0x080049b5
 80046ec:	080049b5 	.word	0x080049b5
 80046f0:	080049b5 	.word	0x080049b5
 80046f4:	0800479b 	.word	0x0800479b
 80046f8:	0800499d 	.word	0x0800499d
 80046fc:	080049b5 	.word	0x080049b5
 8004700:	08004995 	.word	0x08004995
 8004704:	080049b5 	.word	0x080049b5
 8004708:	080049b5 	.word	0x080049b5
 800470c:	08004985 	.word	0x08004985
 8004710:	0800498d 	.word	0x0800498d
 8004714:	080049b5 	.word	0x080049b5
 8004718:	080049b5 	.word	0x080049b5
 800471c:	080049b5 	.word	0x080049b5
 8004720:	080049b5 	.word	0x080049b5
 8004724:	080049b5 	.word	0x080049b5
 8004728:	080049b5 	.word	0x080049b5
 800472c:	080049b5 	.word	0x080049b5
 8004730:	080049b5 	.word	0x080049b5
 8004734:	08004793 	.word	0x08004793
 8004738:	080049a5 	.word	0x080049a5
 800473c:	2bf0      	cmp	r3, #240	; 0xf0
 800473e:	f300 8139 	bgt.w	80049b4 <Run_YawSpeed+0xa64>
 8004742:	2bc0      	cmp	r3, #192	; 0xc0
 8004744:	f6bf aea6 	bge.w	8004494 <Run_YawSpeed+0x544>
 8004748:	e134      	b.n	80049b4 <Run_YawSpeed+0xa64>
	case B00000000000001: error = -12; break;
 800474a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800474e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004750:	e133      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000000011: error = -11; break;
 8004752:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8004756:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004758:	e12f      	b.n	80049ba <Run_YawSpeed+0xa6a>
//	case B00000000000011: error = -11; break;
	case B00000000000111: error = -10; break;
 800475a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800475e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004760:	e12b      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000001110: error = -9; break;
 8004762:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8004766:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004768:	e127      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000001100: error = -8; break;
 800476a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800476e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004770:	e123      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000011100: error = -7; break;
 8004772:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8004776:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004778:	e11f      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000011000: error = -6; break;
 800477a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800477e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004780:	e11b      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000111000: error = -5; break;
 8004782:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8004786:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004788:	e117      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000000110000: error = -4; break;
 800478a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800478e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004790:	e113      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000001110000: error = -3; break;
 8004792:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004796:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004798:	e10f      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000001100000: error = -2; break;
 800479a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800479e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047a0:	e10b      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011100000: error = -1; break;
 80047a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047a8:	e107      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000011000000: error = 0; break;
 80047aa:	2300      	movs	r3, #0
 80047ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047ae:	e104      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000111000000: error = 1; break;
 80047b0:	2301      	movs	r3, #1
 80047b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047b4:	e101      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000110000000: error = 2; break;
 80047b6:	2302      	movs	r3, #2
 80047b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047ba:	e0fe      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00001110000000: error = 3; break;
 80047bc:	2303      	movs	r3, #3
 80047be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047c0:	e0fb      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00001100000000: error = 4; break;
 80047c2:	2304      	movs	r3, #4
 80047c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047c6:	e0f8      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00011100000000: error = 5; break;
 80047c8:	2305      	movs	r3, #5
 80047ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047cc:	e0f5      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00011000000000: error = 6; break;
 80047ce:	2306      	movs	r3, #6
 80047d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047d2:	e0f2      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00111000000000: error = 7; break;
 80047d4:	2307      	movs	r3, #7
 80047d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047d8:	e0ef      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00110000000000: error = 8; break;
 80047da:	2308      	movs	r3, #8
 80047dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047de:	e0ec      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B01110000000000: error = 9; break;
 80047e0:	2309      	movs	r3, #9
 80047e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047e4:	e0e9      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11100000000000: error = 10; break;
 80047e6:	230a      	movs	r3, #10
 80047e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047ea:	e0e6      	b.n	80049ba <Run_YawSpeed+0xa6a>
//	case B11000000000000: error = 11; break;
	case B11000000000000: error = 11; break;
 80047ec:	230b      	movs	r3, #11
 80047ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047f0:	e0e3      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000000000000: error = 12; break;
 80047f2:	230c      	movs	r3, #12
 80047f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047f6:	e0e0      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000011110000: error = -1; break;
 80047f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047fe:	e0dc      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000111111000: error = -1; break;
 8004800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004804:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004806:	e0d8      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00001111111100: error = -1; break;
 8004808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800480c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800480e:	e0d4      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00011111111110: error = -1; break;
 8004810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004814:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004816:	e0d0      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000111100000: error = 0; break;
 8004818:	2300      	movs	r3, #0
 800481a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800481c:	e0cd      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00001111110000: error = 0; break;
 800481e:	2300      	movs	r3, #0
 8004820:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004822:	e0ca      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00011111111000: error = 0; break;
 8004824:	2300      	movs	r3, #0
 8004826:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004828:	e0c7      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00111111111100: error = 0; break;
 800482a:	2300      	movs	r3, #0
 800482c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800482e:	e0c4      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00001111000000: error = 1; break;
 8004830:	2301      	movs	r3, #1
 8004832:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004834:	e0c1      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00011111100000: error = 1; break;
 8004836:	2301      	movs	r3, #1
 8004838:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800483a:	e0be      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00111111110000: error = 1; break;
 800483c:	2301      	movs	r3, #1
 800483e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004840:	e0bb      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B01111111111000: error = 1; break;
 8004842:	2301      	movs	r3, #1
 8004844:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004846:	e0b8      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B11111000000001: error = -2; break;
 8004848:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800484c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800484e:	e0b4      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B11100000000001: error = -1; break;
 8004850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004854:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004856:	e0b0      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11110000000011: error = -1; break;
 8004858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800485c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800485e:	e0ac      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B10000000000001: error = 0; break;
 8004860:	2300      	movs	r3, #0
 8004862:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004864:	e0a9      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11000000000011: error = 0; break;
 8004866:	2300      	movs	r3, #0
 8004868:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800486a:	e0a6      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11100000000111: error = 0; break;
 800486c:	2300      	movs	r3, #0
 800486e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004870:	e0a3      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B10000000000111: error = -1; break;
 8004872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004876:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004878:	e09f      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11000000001111: error = -1; break;
 800487a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800487e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004880:	e09b      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B10000000011111: error = -2; break;
 8004882:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004886:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004888:	e097      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B11000001100000: error = -2; break;
 800488a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800488e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004890:	e093      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000011100000: error = -1; break;
 8004892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004896:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004898:	e08f      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000011000001: error = 0; break;
 800489a:	2300      	movs	r3, #0
 800489c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800489e:	e08c      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000111000001: error = 1; break;
 80048a0:	2301      	movs	r3, #1
 80048a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048a4:	e089      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000110000011: error = 2; break;
 80048a6:	2302      	movs	r3, #2
 80048a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048aa:	e086      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B11100001100000: error = -2; break;
 80048ac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048b2:	e082      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B01100001100000: error = -2; break;
 80048b4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048ba:	e07e      	b.n	80049ba <Run_YawSpeed+0xa6a>
//	case B11000011110000: error = -2; break;
	case B10000001100000: error = -2; break;
 80048bc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048c2:	e07a      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B11100011100000: error = -1; break;
 80048c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048ca:	e076      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11000011100000: error = -1; break;
 80048cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048d2:	e072      	b.n	80049ba <Run_YawSpeed+0xa6a>
//	case B10000111110000: error = -1; break;

	case B01100011000000: error = 0; break;
 80048d4:	2300      	movs	r3, #0
 80048d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048d8:	e06f      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11100011000000: error = 0; break;
 80048da:	2300      	movs	r3, #0
 80048dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048de:	e06c      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11000011000000: error = 0; break;
 80048e0:	2300      	movs	r3, #0
 80048e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048e4:	e069      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000011000000: error = 0; break;
 80048e6:	2300      	movs	r3, #0
 80048e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048ea:	e066      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B01100111000000: error = 1; break;
 80048ec:	2301      	movs	r3, #1
 80048ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048f0:	e063      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11100111000000: error = 1; break;
 80048f2:	2301      	movs	r3, #1
 80048f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048f6:	e060      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11000111000000: error = 1; break;
 80048f8:	2301      	movs	r3, #1
 80048fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048fc:	e05d      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000111000000: error = 1; break;
 80048fe:	2301      	movs	r3, #1
 8004900:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004902:	e05a      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B01100110000000: error = 2; break;
 8004904:	2302      	movs	r3, #2
 8004906:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004908:	e057      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11100110000000: error = 2; break;
 800490a:	2302      	movs	r3, #2
 800490c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800490e:	e054      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B11000110000000: error = 2; break;
 8004910:	2302      	movs	r3, #2
 8004912:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004914:	e051      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B10000110000000: error = 2; break;
 8004916:	2302      	movs	r3, #2
 8004918:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800491a:	e04e      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B10001110000000: error = 3; break;
 800491c:	2303      	movs	r3, #3
 800491e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004920:	e04b      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B10001100000000: error = 4; break;
 8004922:	2304      	movs	r3, #4
 8004924:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004926:	e048      	b.n	80049ba <Run_YawSpeed+0xa6a>



	case B00000110000110: error = 2; break;
 8004928:	2302      	movs	r3, #2
 800492a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800492c:	e045      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000110000111: error = 2; break;
 800492e:	2302      	movs	r3, #2
 8004930:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004932:	e042      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000110000011: error = 2; break;
 8004934:	2302      	movs	r3, #2
 8004936:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004938:	e03f      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000110000001: error = 2; break;
 800493a:	2302      	movs	r3, #2
 800493c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800493e:	e03c      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000111000111: error = 1; break;
 8004940:	2301      	movs	r3, #1
 8004942:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004944:	e039      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000111000011: error = 1; break;
 8004946:	2301      	movs	r3, #1
 8004948:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800494a:	e036      	b.n	80049ba <Run_YawSpeed+0xa6a>
//	case B00001111100001: error = 1; break;

	case B00000011000110: error = 0; break;
 800494c:	2300      	movs	r3, #0
 800494e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004950:	e033      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011000111: error = 0; break;
 8004952:	2300      	movs	r3, #0
 8004954:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004956:	e030      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011000011: error = 0; break;
 8004958:	2300      	movs	r3, #0
 800495a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800495c:	e02d      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011000001: error = 0; break;
 800495e:	2300      	movs	r3, #0
 8004960:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004962:	e02a      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000011100110: error = -1; break;
 8004964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004968:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800496a:	e026      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011100111: error = -1; break;
 800496c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004970:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004972:	e022      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011100011: error = -1; break;
 8004974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004978:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800497a:	e01e      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000011100001: error = -1; break;
 800497c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004980:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004982:	e01a      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000001100110: error = -2; break;
 8004984:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004988:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800498a:	e016      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000001100111: error = -2; break;
 800498c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004990:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004992:	e012      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000001100011: error = -2; break;
 8004994:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004998:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800499a:	e00e      	b.n	80049ba <Run_YawSpeed+0xa6a>
	case B00000001100001: error = -2; break;
 800499c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80049a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049a2:	e00a      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000001110001: error = -3; break;
 80049a4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80049a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049aa:	e006      	b.n	80049ba <Run_YawSpeed+0xa6a>

	case B00000000110001: error = -4; break;
 80049ac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80049b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049b2:	e002      	b.n	80049ba <Run_YawSpeed+0xa6a>

	default: error = last_error;
 80049b4:	4bc2      	ldr	r3, [pc, #776]	; (8004cc0 <Run_YawSpeed+0xd70>)
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	float div_error = error - last_error;
 80049ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80049be:	4ac0      	ldr	r2, [pc, #768]	; (8004cc0 <Run_YawSpeed+0xd70>)
 80049c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ce:	edc7 7a06 	vstr	s15, [r7, #24]
	if(last_mv < 90 && last_mv > -90)
 80049d2:	4bbc      	ldr	r3, [pc, #752]	; (8004cc4 <Run_YawSpeed+0xd74>)
 80049d4:	edd3 7a00 	vldr	s15, [r3]
 80049d8:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8004cc8 <Run_YawSpeed+0xd78>
 80049dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	d527      	bpl.n	8004a36 <Run_YawSpeed+0xae6>
 80049e6:	4bb7      	ldr	r3, [pc, #732]	; (8004cc4 <Run_YawSpeed+0xd74>)
 80049e8:	edd3 7a00 	vldr	s15, [r3]
 80049ec:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004ccc <Run_YawSpeed+0xd7c>
 80049f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	dd1d      	ble.n	8004a36 <Run_YawSpeed+0xae6>
		if(!(sum_error < -32000 && error < 0) && !(sum_error > 32000 && error > 0) ) sum_error += error;
 80049fa:	4bb5      	ldr	r3, [pc, #724]	; (8004cd0 <Run_YawSpeed+0xd80>)
 80049fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a00:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 8004a04:	da03      	bge.n	8004a0e <Run_YawSpeed+0xabe>
 8004a06:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db13      	blt.n	8004a36 <Run_YawSpeed+0xae6>
 8004a0e:	4bb0      	ldr	r3, [pc, #704]	; (8004cd0 <Run_YawSpeed+0xd80>)
 8004a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a14:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004a18:	dd03      	ble.n	8004a22 <Run_YawSpeed+0xad2>
 8004a1a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dc09      	bgt.n	8004a36 <Run_YawSpeed+0xae6>
 8004a22:	4bab      	ldr	r3, [pc, #684]	; (8004cd0 <Run_YawSpeed+0xd80>)
 8004a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a2c:	4413      	add	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	b21a      	sxth	r2, r3
 8004a32:	4ba7      	ldr	r3, [pc, #668]	; (8004cd0 <Run_YawSpeed+0xd80>)
 8004a34:	801a      	strh	r2, [r3, #0]
	temp_yaw_speed = last_mv;
 8004a36:	4ba3      	ldr	r3, [pc, #652]	; (8004cc4 <Run_YawSpeed+0xd74>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4aa6      	ldr	r2, [pc, #664]	; (8004cd4 <Run_YawSpeed+0xd84>)
 8004a3c:	6013      	str	r3, [r2, #0]
	float p, i, d;
	if(flag == 1) {
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 80a4 	bne.w	8004b8e <Run_YawSpeed+0xc3e>
//		p = _speed * PID_KKP * (float)error;
//		i = 0;
//		d = _speed * PID_KKD * (float)div_error / period;
		p = (0.09*_speed + 0.8833) * (float)error;
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f7fb fd7e 	bl	8000548 <__aeabi_f2d>
 8004a4c:	a390      	add	r3, pc, #576	; (adr r3, 8004c90 <Run_YawSpeed+0xd40>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fdd1 	bl	80005f8 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	a38e      	add	r3, pc, #568	; (adr r3, 8004c98 <Run_YawSpeed+0xd48>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fb fc12 	bl	800028c <__adddf3>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4614      	mov	r4, r2
 8004a6e:	461d      	mov	r5, r3
 8004a70:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7c:	ee17 0a90 	vmov	r0, s15
 8004a80:	f7fb fd62 	bl	8000548 <__aeabi_f2d>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4620      	mov	r0, r4
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f7fb fdb4 	bl	80005f8 <__aeabi_dmul>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7fc f8a6 	bl	8000be8 <__aeabi_d2f>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
		i = (0.03*_speed + 0.6833) * (float)sum_error * period;
 8004aa0:	68b8      	ldr	r0, [r7, #8]
 8004aa2:	f7fb fd51 	bl	8000548 <__aeabi_f2d>
 8004aa6:	a37e      	add	r3, pc, #504	; (adr r3, 8004ca0 <Run_YawSpeed+0xd50>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fda4 	bl	80005f8 <__aeabi_dmul>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	a37b      	add	r3, pc, #492	; (adr r3, 8004ca8 <Run_YawSpeed+0xd58>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fbe5 	bl	800028c <__adddf3>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4614      	mov	r4, r2
 8004ac8:	461d      	mov	r5, r3
 8004aca:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <Run_YawSpeed+0xd80>)
 8004acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad8:	ee17 0a90 	vmov	r0, s15
 8004adc:	f7fb fd34 	bl	8000548 <__aeabi_f2d>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb fd86 	bl	80005f8 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4614      	mov	r4, r2
 8004af2:	461d      	mov	r5, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7fb fd27 	bl	8000548 <__aeabi_f2d>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb fd79 	bl	80005f8 <__aeabi_dmul>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7fc f86b 	bl	8000be8 <__aeabi_d2f>
 8004b12:	4603      	mov	r3, r0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
		d = (0.7433*exp(0.1099*_speed)) * (float)div_error / period;
 8004b16:	68b8      	ldr	r0, [r7, #8]
 8004b18:	f7fb fd16 	bl	8000548 <__aeabi_f2d>
 8004b1c:	a364      	add	r3, pc, #400	; (adr r3, 8004cb0 <Run_YawSpeed+0xd60>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fd69 	bl	80005f8 <__aeabi_dmul>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	ec43 2b17 	vmov	d7, r2, r3
 8004b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b32:	eef0 0a67 	vmov.f32	s1, s15
 8004b36:	f00c ffff 	bl	8011b38 <exp>
 8004b3a:	ec51 0b10 	vmov	r0, r1, d0
 8004b3e:	a35e      	add	r3, pc, #376	; (adr r3, 8004cb8 <Run_YawSpeed+0xd68>)
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f7fb fd58 	bl	80005f8 <__aeabi_dmul>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	69b8      	ldr	r0, [r7, #24]
 8004b52:	f7fb fcf9 	bl	8000548 <__aeabi_f2d>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fd4b 	bl	80005f8 <__aeabi_dmul>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4614      	mov	r4, r2
 8004b68:	461d      	mov	r5, r3
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7fb fcec 	bl	8000548 <__aeabi_f2d>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fe68 	bl	800084c <__aeabi_ddiv>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7fc f830 	bl	8000be8 <__aeabi_d2f>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	e02b      	b.n	8004be6 <Run_YawSpeed+0xc96>
	}
	else {
		p = kp * (float)error;
 8004b8e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b9a:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <Run_YawSpeed+0xd88>)
 8004b9c:	edd3 7a00 	vldr	s15, [r3]
 8004ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i = ki * (float)sum_error * period;
 8004ba8:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <Run_YawSpeed+0xd80>)
 8004baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bb6:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <Run_YawSpeed+0xd8c>)
 8004bb8:	edd3 7a00 	vldr	s15, [r3]
 8004bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		d = kd * (float)div_error / period;
 8004bcc:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <Run_YawSpeed+0xd90>)
 8004bce:	ed93 7a00 	vldr	s14, [r3]
 8004bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bd6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004bda:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be2:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	d = alpha*d + (1.00-alpha)*last_d;
 8004be6:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <Run_YawSpeed+0xd94>)
 8004be8:	ed93 7a00 	vldr	s14, [r3]
 8004bec:	edd7 7a08 	vldr	s15, [r7, #32]
 8004bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf4:	ee17 0a90 	vmov	r0, s15
 8004bf8:	f7fb fca6 	bl	8000548 <__aeabi_f2d>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	460d      	mov	r5, r1
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <Run_YawSpeed+0xd94>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fc9f 	bl	8000548 <__aeabi_f2d>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	4935      	ldr	r1, [pc, #212]	; (8004ce8 <Run_YawSpeed+0xd98>)
 8004c14:	f7fb fb38 	bl	8000288 <__aeabi_dsub>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4690      	mov	r8, r2
 8004c1e:	4699      	mov	r9, r3
 8004c20:	4b32      	ldr	r3, [pc, #200]	; (8004cec <Run_YawSpeed+0xd9c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fb fc8f 	bl	8000548 <__aeabi_f2d>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4640      	mov	r0, r8
 8004c30:	4649      	mov	r1, r9
 8004c32:	f7fb fce1 	bl	80005f8 <__aeabi_dmul>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f7fb fb25 	bl	800028c <__adddf3>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f7fb ffcd 	bl	8000be8 <__aeabi_d2f>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	623b      	str	r3, [r7, #32]
	last_d = d;
 8004c52:	4a26      	ldr	r2, [pc, #152]	; (8004cec <Run_YawSpeed+0xd9c>)
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	6013      	str	r3, [r2, #0]
	float mv = p + i + d;
 8004c58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004c5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c64:	ed97 7a08 	vldr	s14, [r7, #32]
 8004c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c6c:	edc7 7a05 	vstr	s15, [r7, #20]
	last_error = error;
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <Run_YawSpeed+0xd70>)
 8004c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c74:	8013      	strh	r3, [r2, #0]
	last_mv = mv;
 8004c76:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <Run_YawSpeed+0xd74>)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	6013      	str	r3, [r2, #0]
	return mv;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
}
 8004c82:	eeb0 0a67 	vmov.f32	s0, s15
 8004c86:	3730      	adds	r7, #48	; 0x30
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c8e:	bf00      	nop
 8004c90:	70a3d70a 	.word	0x70a3d70a
 8004c94:	3fb70a3d 	.word	0x3fb70a3d
 8004c98:	5c91d14e 	.word	0x5c91d14e
 8004c9c:	3fec43fe 	.word	0x3fec43fe
 8004ca0:	eb851eb8 	.word	0xeb851eb8
 8004ca4:	3f9eb851 	.word	0x3f9eb851
 8004ca8:	f62b6ae8 	.word	0xf62b6ae8
 8004cac:	3fe5dd97 	.word	0x3fe5dd97
 8004cb0:	09d49518 	.word	0x09d49518
 8004cb4:	3fbc2268 	.word	0x3fbc2268
 8004cb8:	14e3bcd3 	.word	0x14e3bcd3
 8004cbc:	3fe7c91d 	.word	0x3fe7c91d
 8004cc0:	20000b3e 	.word	0x20000b3e
 8004cc4:	20000b40 	.word	0x20000b40
 8004cc8:	42b40000 	.word	0x42b40000
 8004ccc:	c2b40000 	.word	0xc2b40000
 8004cd0:	20000b3c 	.word	0x20000b3c
 8004cd4:	20000b24 	.word	0x20000b24
 8004cd8:	20000b2c 	.word	0x20000b2c
 8004cdc:	20000b30 	.word	0x20000b30
 8004ce0:	20000b34 	.word	0x20000b34
 8004ce4:	20000b38 	.word	0x20000b38
 8004ce8:	3ff00000 	.word	0x3ff00000
 8004cec:	20000b28 	.word	0x20000b28

08004cf0 <Run_LineTracing>:


void Run_LineTracing(float speed, float period, uint8_t flag) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, speed, flag);
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	4618      	mov	r0, r3
 8004d06:	edd7 0a03 	vldr	s1, [r7, #12]
 8004d0a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d0e:	f7ff f91f 	bl	8003f50 <Run_YawSpeed>
 8004d12:	ed87 0a05 	vstr	s0, [r7, #20]
	float temp_speed = speed;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	613b      	str	r3, [r7, #16]
	if(yaw_speed > 99) yaw_speed = 99;
 8004d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d1e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004df4 <Run_LineTracing+0x104>
 8004d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2a:	dd02      	ble.n	8004d32 <Run_LineTracing+0x42>
 8004d2c:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <Run_LineTracing+0x108>)
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e00a      	b.n	8004d48 <Run_LineTracing+0x58>
	else if(yaw_speed < -99) yaw_speed = -99;
 8004d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d36:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004dfc <Run_LineTracing+0x10c>
 8004d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	d501      	bpl.n	8004d48 <Run_LineTracing+0x58>
 8004d44:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <Run_LineTracing+0x110>)
 8004d46:	617b      	str	r3, [r7, #20]
	if(speed+yaw_speed > 99) {
 8004d48:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d54:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004df4 <Run_LineTracing+0x104>
 8004d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	dd10      	ble.n	8004d84 <Run_LineTracing+0x94>
		temp_speed-=(speed+yaw_speed-99);
 8004d62:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004df4 <Run_LineTracing+0x104>
 8004d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d76:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d7e:	edc7 7a04 	vstr	s15, [r7, #16]
 8004d82:	e01c      	b.n	8004dbe <Run_LineTracing+0xce>
	}
	else if(speed-yaw_speed < -99) {
 8004d84:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d90:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004dfc <Run_LineTracing+0x10c>
 8004d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9c:	d50f      	bpl.n	8004dbe <Run_LineTracing+0xce>
		temp_speed+=(speed-yaw_speed+99);
 8004d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004daa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004df4 <Run_LineTracing+0x104>
 8004dae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004db2:	ed97 7a04 	vldr	s14, [r7, #16]
 8004db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dba:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	Motor_SetPoint(&MOTOR_R, temp_speed-yaw_speed);
 8004dbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8004dc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dca:	eeb0 0a67 	vmov.f32	s0, s15
 8004dce:	480d      	ldr	r0, [pc, #52]	; (8004e04 <Run_LineTracing+0x114>)
 8004dd0:	f7fd fafe 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, temp_speed+yaw_speed);
 8004dd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004de0:	eeb0 0a67 	vmov.f32	s0, s15
 8004de4:	4808      	ldr	r0, [pc, #32]	; (8004e08 <Run_LineTracing+0x118>)
 8004de6:	f7fd faf3 	bl	80023d0 <Motor_SetPoint>
}
 8004dea:	bf00      	nop
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	42c60000 	.word	0x42c60000
 8004df8:	42c60000 	.word	0x42c60000
 8004dfc:	c2c60000 	.word	0xc2c60000
 8004e00:	c2c60000 	.word	0xc2c60000
 8004e04:	20000a8c 	.word	0x20000a8c
 8004e08:	20000ad4 	.word	0x20000ad4

08004e0c <Run_SetMotorSpeed>:
uint8_t Run_MotorNotOver() {
	return (Motor_GetPoint(&MOTOR_R) < 99) && (Motor_GetPoint(&MOTOR_R) > -99)
		&& (Motor_GetPoint(&MOTOR_L) < 99) && (Motor_GetPoint(&MOTOR_L) > -99) ;
}

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e16:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 8004e1a:	ed97 0a00 	vldr	s0, [r7]
 8004e1e:	4806      	ldr	r0, [pc, #24]	; (8004e38 <Run_SetMotorSpeed+0x2c>)
 8004e20:	f7fd fad6 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8004e24:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e28:	4804      	ldr	r0, [pc, #16]	; (8004e3c <Run_SetMotorSpeed+0x30>)
 8004e2a:	f7fd fad1 	bl	80023d0 <Motor_SetPoint>
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000a8c 	.word	0x20000a8c
 8004e3c:	20000ad4 	.word	0x20000ad4

08004e40 <Run_SetReverseSpeed>:
void Run_SetMotorAccl(float accl) {
	Motor_SetAccl(&MOTOR_R, accl);
	Motor_SetAccl(&MOTOR_L, accl);
}

void Run_SetReverseSpeed(float factor) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_SetPoint(&MOTOR_R, -Motor_GetPoint(&MOTOR_R)*factor);
 8004e4a:	4812      	ldr	r0, [pc, #72]	; (8004e94 <Run_SetReverseSpeed+0x54>)
 8004e4c:	f7fd fadd 	bl	800240a <Motor_GetPoint>
 8004e50:	eef0 7a40 	vmov.f32	s15, s0
 8004e54:	eeb1 7a67 	vneg.f32	s14, s15
 8004e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e60:	eeb0 0a67 	vmov.f32	s0, s15
 8004e64:	480b      	ldr	r0, [pc, #44]	; (8004e94 <Run_SetReverseSpeed+0x54>)
 8004e66:	f7fd fab3 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, -Motor_GetPoint(&MOTOR_L)*factor);
 8004e6a:	480b      	ldr	r0, [pc, #44]	; (8004e98 <Run_SetReverseSpeed+0x58>)
 8004e6c:	f7fd facd 	bl	800240a <Motor_GetPoint>
 8004e70:	eef0 7a40 	vmov.f32	s15, s0
 8004e74:	eeb1 7a67 	vneg.f32	s14, s15
 8004e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e80:	eeb0 0a67 	vmov.f32	s0, s15
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <Run_SetReverseSpeed+0x58>)
 8004e86:	f7fd faa3 	bl	80023d0 <Motor_SetPoint>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000a8c 	.word	0x20000a8c
 8004e98:	20000ad4 	.word	0x20000ad4

08004e9c <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 8004ea4:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <SEN_Init+0x3c>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e008      	b.n	8004ec2 <SEN_Init+0x26>
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <SEN_Init+0x40>)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004eb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b0d      	cmp	r3, #13
 8004ec6:	ddf3      	ble.n	8004eb0 <SEN_Init+0x14>
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000b44 	.word	0x20000b44
 8004edc:	20000b80 	.word	0x20000b80

08004ee0 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b08d      	sub	sp, #52	; 0x34
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eec:	e05a      	b.n	8004fa4 <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <SEN_Filter+0xd4>)
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	4614      	mov	r4, r2
 8004efc:	8818      	ldrh	r0, [r3, #0]
 8004efe:	492e      	ldr	r1, [pc, #184]	; (8004fb8 <SEN_Filter+0xd8>)
 8004f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4423      	add	r3, r4
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 8004f12:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <SEN_Filter+0xd4>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d806      	bhi.n	8004f28 <SEN_Filter+0x48>
 8004f1a:	4b26      	ldr	r3, [pc, #152]	; (8004fb4 <SEN_Filter+0xd4>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <SEN_Filter+0xd4>)
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <SEN_Filter+0x4e>
 8004f28:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <SEN_Filter+0xd4>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	221c      	movs	r2, #28
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f00a fdb9 	bl	800faae <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f40:	e01f      	b.n	8004f82 <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	3330      	adds	r3, #48	; 0x30
 8004f48:	443b      	add	r3, r7
 8004f4a:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004f4e:	481a      	ldr	r0, [pc, #104]	; (8004fb8 <SEN_Filter+0xd8>)
 8004f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <SEN_Filter+0xdc>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	440b      	add	r3, r1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	3330      	adds	r3, #48	; 0x30
 8004f76:	443b      	add	r3, r7
 8004f78:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	3301      	adds	r3, #1
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	2b09      	cmp	r3, #9
 8004f86:	dddc      	ble.n	8004f42 <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	441a      	add	r2, r3
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	3330      	adds	r3, #48	; 0x30
 8004f96:	443b      	add	r3, r7
 8004f98:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f9c:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2b0d      	cmp	r3, #13
 8004fa8:	dda1      	ble.n	8004eee <SEN_Filter+0xe>
	}
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	3734      	adds	r7, #52	; 0x34
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd90      	pop	{r4, r7, pc}
 8004fb4:	20000cc8 	.word	0x20000cc8
 8004fb8:	20000bb0 	.word	0x20000bb0
 8004fbc:	cccccccd 	.word	0xcccccccd

08004fc0 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <SEN_StartReadSensor+0x18>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	220e      	movs	r2, #14
 8004fca:	4904      	ldr	r1, [pc, #16]	; (8004fdc <SEN_StartReadSensor+0x1c>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f005 f809 	bl	8009fe4 <HAL_ADC_Start_DMA>
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000b44 	.word	0x20000b44
 8004fdc:	20000b48 	.word	0x20000b48

08004fe0 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b5b      	ldr	r3, [pc, #364]	; (800515c <SEN_CallbackRoutine+0x17c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	f040 80ad 	bne.w	8005152 <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 8004ff8:	4859      	ldr	r0, [pc, #356]	; (8005160 <SEN_CallbackRoutine+0x180>)
 8004ffa:	f7ff ff71 	bl	8004ee0 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e017      	b.n	8005034 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005a      	lsls	r2, r3, #1
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f1c3 030d 	rsb	r3, r3, #13
 800500e:	4954      	ldr	r1, [pc, #336]	; (8005160 <SEN_CallbackRoutine+0x180>)
 8005010:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005014:	4a53      	ldr	r2, [pc, #332]	; (8005164 <SEN_CallbackRoutine+0x184>)
 8005016:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	3301      	adds	r3, #1
 8005020:	4a4f      	ldr	r2, [pc, #316]	; (8005160 <SEN_CallbackRoutine+0x180>)
 8005022:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005026:	4a4f      	ldr	r2, [pc, #316]	; (8005164 <SEN_CallbackRoutine+0x184>)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3301      	adds	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b06      	cmp	r3, #6
 8005038:	dde4      	ble.n	8005004 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 800503a:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <SEN_CallbackRoutine+0x188>)
 800503c:	2200      	movs	r2, #0
 800503e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	e06c      	b.n	8005120 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 800504a:	4b48      	ldr	r3, [pc, #288]	; (800516c <SEN_CallbackRoutine+0x18c>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d12a      	bne.n	80050a8 <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 8005052:	4a44      	ldr	r2, [pc, #272]	; (8005164 <SEN_CallbackRoutine+0x184>)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800505a:	4945      	ldr	r1, [pc, #276]	; (8005170 <SEN_CallbackRoutine+0x190>)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005062:	429a      	cmp	r2, r3
 8005064:	d91a      	bls.n	800509c <SEN_CallbackRoutine+0xbc>
				bit = 1;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 800506a:	4a3e      	ldr	r2, [pc, #248]	; (8005164 <SEN_CallbackRoutine+0x184>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005072:	4619      	mov	r1, r3
 8005074:	4a3e      	ldr	r2, [pc, #248]	; (8005170 <SEN_CallbackRoutine+0x190>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800507c:	1acb      	subs	r3, r1, r3
 800507e:	4a3d      	ldr	r2, [pc, #244]	; (8005174 <SEN_CallbackRoutine+0x194>)
 8005080:	fb82 1203 	smull	r1, r2, r2, r3
 8005084:	1092      	asrs	r2, r2, #2
 8005086:	17db      	asrs	r3, r3, #31
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3301      	adds	r3, #1
 800508e:	b2d9      	uxtb	r1, r3
 8005090:	4a39      	ldr	r2, [pc, #228]	; (8005178 <SEN_CallbackRoutine+0x198>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	460a      	mov	r2, r1
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e02f      	b.n	80050fc <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 800509c:	4a36      	ldr	r2, [pc, #216]	; (8005178 <SEN_CallbackRoutine+0x198>)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4413      	add	r3, r2
 80050a2:	2200      	movs	r2, #0
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e029      	b.n	80050fc <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 80050a8:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <SEN_CallbackRoutine+0x184>)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80050b0:	492f      	ldr	r1, [pc, #188]	; (8005170 <SEN_CallbackRoutine+0x190>)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d21a      	bcs.n	80050f2 <SEN_CallbackRoutine+0x112>
				bit = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 80050c0:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <SEN_CallbackRoutine+0x190>)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c8:	4619      	mov	r1, r3
 80050ca:	4a26      	ldr	r2, [pc, #152]	; (8005164 <SEN_CallbackRoutine+0x184>)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d2:	1acb      	subs	r3, r1, r3
 80050d4:	4a27      	ldr	r2, [pc, #156]	; (8005174 <SEN_CallbackRoutine+0x194>)
 80050d6:	fb82 1203 	smull	r1, r2, r2, r3
 80050da:	1092      	asrs	r2, r2, #2
 80050dc:	17db      	asrs	r3, r3, #31
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3301      	adds	r3, #1
 80050e4:	b2d9      	uxtb	r1, r3
 80050e6:	4a24      	ldr	r2, [pc, #144]	; (8005178 <SEN_CallbackRoutine+0x198>)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	460a      	mov	r2, r1
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e004      	b.n	80050fc <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <SEN_CallbackRoutine+0x198>)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 80050fc:	7bfa      	ldrb	r2, [r7, #15]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f1c3 030d 	rsb	r3, r3, #13
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	b21a      	sxth	r2, r3
 800510a:	4b17      	ldr	r3, [pc, #92]	; (8005168 <SEN_CallbackRoutine+0x188>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b21b      	sxth	r3, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	b21b      	sxth	r3, r3
 8005114:	b29a      	uxth	r2, r3
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <SEN_CallbackRoutine+0x188>)
 8005118:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3301      	adds	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b0d      	cmp	r3, #13
 8005124:	dd8f      	ble.n	8005046 <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <SEN_CallbackRoutine+0x19c>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d102      	bne.n	8005134 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 800512e:	2000      	movs	r0, #0
 8005130:	f000 f870 	bl	8005214 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <SEN_CallbackRoutine+0x1a0>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <SEN_CallbackRoutine+0x1a0>)
 8005140:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <SEN_CallbackRoutine+0x1a0>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f023 0302 	bic.w	r3, r3, #2
 800514a:	b2da      	uxtb	r2, r3
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <SEN_CallbackRoutine+0x1a0>)
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e000      	b.n	8005154 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 8005152:	bf00      	nop
}
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000b44 	.word	0x20000b44
 8005160:	20000b48 	.word	0x20000b48
 8005164:	20000b64 	.word	0x20000b64
 8005168:	20000baa 	.word	0x20000baa
 800516c:	20000bac 	.word	0x20000bac
 8005170:	20000b80 	.word	0x20000b80
 8005174:	66666667 	.word	0x66666667
 8005178:	20000b9c 	.word	0x20000b9c
 800517c:	20000cd4 	.word	0x20000cd4
 8005180:	20000cc9 	.word	0x20000cc9

08005184 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 800518a:	4b1f      	ldr	r3, [pc, #124]	; (8005208 <SEN_StartAutoCalibration+0x84>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d035      	beq.n	80051fe <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8005192:	201c      	movs	r0, #28
 8005194:	f009 fe56 	bl	800ee44 <malloc>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	4b1b      	ldr	r3, [pc, #108]	; (800520c <SEN_StartAutoCalibration+0x88>)
 800519e:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80051a0:	201c      	movs	r0, #28
 80051a2:	f009 fe4f 	bl	800ee44 <malloc>
 80051a6:	4603      	mov	r3, r0
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b19      	ldr	r3, [pc, #100]	; (8005210 <SEN_StartAutoCalibration+0x8c>)
 80051ac:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <SEN_StartAutoCalibration+0x88>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <SEN_StartAutoCalibration+0x3a>
 80051b6:	4b16      	ldr	r3, [pc, #88]	; (8005210 <SEN_StartAutoCalibration+0x8c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01b      	beq.n	80051f6 <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	e011      	b.n	80051e8 <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <SEN_StartAutoCalibration+0x88>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <SEN_StartAutoCalibration+0x8c>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4413      	add	r3, r2
 80051dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80051e0:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3301      	adds	r3, #1
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b0d      	cmp	r3, #13
 80051ec:	ddea      	ble.n	80051c4 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <SEN_StartAutoCalibration+0x84>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e004      	b.n	8005200 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 80051f6:	4b04      	ldr	r3, [pc, #16]	; (8005208 <SEN_StartAutoCalibration+0x84>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e000      	b.n	8005200 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 80051fe:	bf00      	nop
}
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000cd4 	.word	0x20000cd4
 800520c:	20000ccc 	.word	0x20000ccc
 8005210:	20000cd0 	.word	0x20000cd0

08005214 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e02f      	b.n	8005284 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 8005224:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <SEN_AutoCalibrationRoutine+0x84>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	881a      	ldrh	r2, [r3, #0]
 8005230:	491a      	ldr	r1, [pc, #104]	; (800529c <SEN_AutoCalibrationRoutine+0x88>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005238:	429a      	cmp	r2, r3
 800523a:	d20a      	bcs.n	8005252 <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 800523c:	4b16      	ldr	r3, [pc, #88]	; (8005298 <SEN_AutoCalibrationRoutine+0x84>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	4915      	ldr	r1, [pc, #84]	; (800529c <SEN_AutoCalibrationRoutine+0x88>)
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e015      	b.n	800527e <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <SEN_AutoCalibrationRoutine+0x8c>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	881a      	ldrh	r2, [r3, #0]
 800525e:	490f      	ldr	r1, [pc, #60]	; (800529c <SEN_AutoCalibrationRoutine+0x88>)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005266:	429a      	cmp	r2, r3
 8005268:	d909      	bls.n	800527e <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 800526a:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <SEN_AutoCalibrationRoutine+0x8c>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	4909      	ldr	r1, [pc, #36]	; (800529c <SEN_AutoCalibrationRoutine+0x88>)
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800527c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b0d      	cmp	r3, #13
 8005288:	ddcc      	ble.n	8005224 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000ccc 	.word	0x20000ccc
 800529c:	20000b64 	.word	0x20000b64
 80052a0:	20000cd0 	.word	0x20000cd0
 80052a4:	00000000 	.word	0x00000000

080052a8 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 80052a8:	b5b0      	push	{r4, r5, r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 80052b2:	4b37      	ldr	r3, [pc, #220]	; (8005390 <SEN_EndAutoCalibration+0xe8>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d060      	beq.n	800537c <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d04d      	beq.n	8005360 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e047      	b.n	800535a <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 80052ca:	4b32      	ldr	r3, [pc, #200]	; (8005394 <SEN_EndAutoCalibration+0xec>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4413      	add	r3, r2
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <SEN_EndAutoCalibration+0xf0>)
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	440b      	add	r3, r1
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d335      	bcc.n	8005352 <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 80052e6:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <SEN_EndAutoCalibration+0xec>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	4619      	mov	r1, r3
 80052f4:	4b28      	ldr	r3, [pc, #160]	; (8005398 <SEN_EndAutoCalibration+0xf0>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	1acb      	subs	r3, r1, r3
 8005302:	4618      	mov	r0, r3
 8005304:	f7fb f90e 	bl	8000524 <__aeabi_i2d>
 8005308:	a31f      	add	r3, pc, #124	; (adr r3, 8005388 <SEN_EndAutoCalibration+0xe0>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f973 	bl	80005f8 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4614      	mov	r4, r2
 8005318:	461d      	mov	r5, r3
 800531a:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <SEN_EndAutoCalibration+0xf0>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fb f8fc 	bl	8000524 <__aeabi_i2d>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	f7fa ffaa 	bl	800028c <__adddf3>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	f7fb fc32 	bl	8000ba8 <__aeabi_d2uiz>
 8005344:	4603      	mov	r3, r0
 8005346:	b299      	uxth	r1, r3
 8005348:	4a14      	ldr	r2, [pc, #80]	; (800539c <SEN_EndAutoCalibration+0xf4>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005350:	e000      	b.n	8005354 <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 8005352:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b0d      	cmp	r3, #13
 800535e:	ddb4      	ble.n	80052ca <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <SEN_EndAutoCalibration+0xec>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f009 fd75 	bl	800ee54 <free>
	free(calib_lower_adc);
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <SEN_EndAutoCalibration+0xf0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f009 fd70 	bl	800ee54 <free>
	autocalib_status = 0;
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <SEN_EndAutoCalibration+0xe8>)
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e000      	b.n	800537e <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 800537c:	bf00      	nop
}
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bdb0      	pop	{r4, r5, r7, pc}
 8005384:	f3af 8000 	nop.w
 8005388:	9999999a 	.word	0x9999999a
 800538c:	3fd99999 	.word	0x3fd99999
 8005390:	20000cd4 	.word	0x20000cd4
 8005394:	20000ccc 	.word	0x20000ccc
 8005398:	20000cd0 	.word	0x20000cd0
 800539c:	20000b80 	.word	0x20000b80

080053a0 <SEN_BlackLine>:

void SEN_BlackLine() {
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <SEN_BlackLine+0x14>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
}
 80053aa:	bf00      	nop
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	20000bac 	.word	0x20000bac

080053b8 <SEN_WhiteLine>:

void SEN_WhiteLine() {
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
	sensor_invert = 1;
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <SEN_WhiteLine+0x14>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000bac 	.word	0x20000bac

080053d0 <SEN_Invert>:

void SEN_Invert() {
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <SEN_Invert+0x24>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <SEN_Invert+0x24>)
 80053e6:	701a      	strb	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000bac 	.word	0x20000bac

080053f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_MspInit+0x4c>)
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	4a0f      	ldr	r2, [pc, #60]	; (8005444 <HAL_MspInit+0x4c>)
 8005408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800540c:	6453      	str	r3, [r2, #68]	; 0x44
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <HAL_MspInit+0x4c>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	603b      	str	r3, [r7, #0]
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_MspInit+0x4c>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	4a08      	ldr	r2, [pc, #32]	; (8005444 <HAL_MspInit+0x4c>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6413      	str	r3, [r2, #64]	; 0x40
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_MspInit+0x4c>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800

08005448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800544c:	e7fe      	b.n	800544c <NMI_Handler+0x4>

0800544e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800544e:	b480      	push	{r7}
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005452:	e7fe      	b.n	8005452 <HardFault_Handler+0x4>

08005454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005458:	e7fe      	b.n	8005458 <MemManage_Handler+0x4>

0800545a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800545e:	e7fe      	b.n	800545e <BusFault_Handler+0x4>

08005460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005464:	e7fe      	b.n	8005464 <UsageFault_Handler+0x4>

08005466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005482:	b480      	push	{r7}
 8005484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005494:	f004 fc0e 	bl	8009cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005498:	bf00      	nop
 800549a:	bd80      	pop	{r7, pc}

0800549c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80054a0:	4802      	ldr	r0, [pc, #8]	; (80054ac <ADC_IRQHandler+0x10>)
 80054a2:	f004 fc8e 	bl	8009dc2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000510 	.word	0x20000510

080054b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054b4:	4802      	ldr	r0, [pc, #8]	; (80054c0 <TIM6_DAC_IRQHandler+0x10>)
 80054b6:	f008 f855 	bl	800d564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000efc 	.word	0x20000efc

080054c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054c8:	4802      	ldr	r0, [pc, #8]	; (80054d4 <DMA2_Stream0_IRQHandler+0x10>)
 80054ca:	f005 fb95 	bl	800abf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000558 	.word	0x20000558

080054d8 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <GetAction+0x78>)
 80054e8:	fba2 1203 	umull	r1, r2, r2, r3
 80054ec:	0952      	lsrs	r2, r2, #5
 80054ee:	2164      	movs	r1, #100	; 0x64
 80054f0:	fb01 f202 	mul.w	r2, r1, r2
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	b29a      	uxth	r2, r3
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <GetAction+0x7c>)
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	4413      	add	r3, r2
 8005506:	b29b      	uxth	r3, r3
 8005508:	3340      	adds	r3, #64	; 0x40
 800550a:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 800550c:	bf00      	nop
 800550e:	f7fc fc57 	bl	8001dc0 <EEP_ReadyToWrite>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0fa      	beq.n	800550e <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005518:	f107 010c 	add.w	r1, r7, #12
 800551c:	8bfb      	ldrh	r3, [r7, #30]
 800551e:	2210      	movs	r2, #16
 8005520:	4618      	mov	r0, r3
 8005522:	f7fc fc27 	bl	8001d74 <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <GetAction+0x80>)
 8005528:	461c      	mov	r4, r3
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return plan_active;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a07      	ldr	r2, [pc, #28]	; (8005558 <GetAction+0x80>)
 800553a:	461c      	mov	r4, r3
 800553c:	4613      	mov	r3, r2
 800553e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005540:	6020      	str	r0, [r4, #0]
 8005542:	6061      	str	r1, [r4, #4]
 8005544:	60a2      	str	r2, [r4, #8]
}
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	51eb851f 	.word	0x51eb851f
 8005554:	20000cd6 	.word	0x20000cd6
 8005558:	20000d98 	.word	0x20000d98

0800555c <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b08b      	sub	sp, #44	; 0x2c
 8005560:	af00      	add	r7, sp, #0
 8005562:	1d3c      	adds	r4, r7, #4
 8005564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005568:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <SetAction+0x74>)
 800556e:	fba2 1203 	umull	r1, r2, r2, r3
 8005572:	0952      	lsrs	r2, r2, #5
 8005574:	2164      	movs	r1, #100	; 0x64
 8005576:	fb01 f202 	mul.w	r2, r1, r2
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <SetAction+0x78>)
 8005580:	461c      	mov	r4, r3
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	b29b      	uxth	r3, r3
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	b29a      	uxth	r2, r3
 8005594:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <SetAction+0x7c>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	4413      	add	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	3340      	adds	r3, #64	; 0x40
 800559e:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 80055a0:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <SetAction+0x78>)
 80055a2:	f107 0314 	add.w	r3, r7, #20
 80055a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80055a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 80055ac:	bf00      	nop
 80055ae:	f7fc fc07 	bl	8001dc0 <EEP_ReadyToWrite>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0fa      	beq.n	80055ae <SetAction+0x52>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 80055b8:	f107 0114 	add.w	r1, r7, #20
 80055bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055be:	2210      	movs	r2, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fc fb8f 	bl	8001ce4 <EEP_WriteMem>
}
 80055c6:	bf00      	nop
 80055c8:	372c      	adds	r7, #44	; 0x2c
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}
 80055ce:	bf00      	nop
 80055d0:	51eb851f 	.word	0x51eb851f
 80055d4:	20000d98 	.word	0x20000d98
 80055d8:	20000cd6 	.word	0x20000cd6

080055dc <Storage_ResetPlan>:

void Storage_ResetPlan() {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b0b2      	sub	sp, #200	; 0xc8
 80055e0:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <Storage_ResetPlan+0xe4>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 80055f0:	2328      	movs	r3, #40	; 0x28
 80055f2:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 80055f6:	2364      	movs	r3, #100	; 0x64
 80055f8:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 10;
 80055fc:	230a      	movs	r3, #10
 80055fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 8005602:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005606:	3302      	adds	r3, #2
 8005608:	2214      	movs	r2, #20
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f00a fa4e 	bl	800faae <memset>
	temp.kpid[0] = 4.71428;
 8005612:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <Storage_ResetPlan+0xe8>)
 8005614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 0;
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	temp.status_pid = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
	temp.alpha = 1;
 800562e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005632:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	temp.acc = 100;
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <Storage_ResetPlan+0xec>)
 8005638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 800563c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005640:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005644:	2230      	movs	r2, #48	; 0x30
 8005646:	4618      	mov	r0, r3
 8005648:	f00a fac0 	bl	800fbcc <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 800564c:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <Storage_ResetPlan+0xf0>)
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	099b      	lsrs	r3, r3, #6
 8005652:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 8005656:	bf00      	nop
 8005658:	f7fc fbb2 	bl	8001dc0 <EEP_ReadyToWrite>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0fa      	beq.n	8005658 <Storage_ResetPlan+0x7c>
	EEP_WritePage(page_plan, buff);
 8005662:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005666:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f7fc fb15 	bl	8001c9c <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005678:	e018      	b.n	80056ac <Storage_ResetPlan+0xd0>

		action_temp = plan_default;
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <Storage_ResetPlan+0xf4>)
 800567c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005680:	ca07      	ldmia	r2, {r0, r1, r2}
 8005682:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800568c:	ca07      	ldmia	r2, {r0, r1, r2}
 800568e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		SetAction(action_temp, i);
 8005692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800569c:	ca07      	ldmia	r2, {r0, r1, r2}
 800569e:	f7ff ff5d 	bl	800555c <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 80056a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056a6:	3301      	adds	r3, #1
 80056a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056b0:	2b63      	cmp	r3, #99	; 0x63
 80056b2:	dde2      	ble.n	800567a <Storage_ResetPlan+0x9e>
	}
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	37c8      	adds	r7, #200	; 0xc8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000cd5 	.word	0x20000cd5
 80056c4:	4096db62 	.word	0x4096db62
 80056c8:	42c80000 	.word	0x42c80000
 80056cc:	20000cd6 	.word	0x20000cd6
 80056d0:	08012400 	.word	0x08012400

080056d4 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b094      	sub	sp, #80	; 0x50
 80056d8:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	2240      	movs	r2, #64	; 0x40
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f00a f9e4 	bl	800faae <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 80056e6:	23ab      	movs	r3, #171	; 0xab
 80056e8:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 80056ea:	230f      	movs	r3, #15
 80056ec:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	3310      	adds	r3, #16
 80056f6:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 80056f8:	2300      	movs	r3, #0
 80056fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056fc:	e012      	b.n	8005724 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	0052      	lsls	r2, r2, #1
 8005706:	441a      	add	r2, r3
 8005708:	0092      	lsls	r2, r2, #2
 800570a:	4413      	add	r3, r2
 800570c:	01db      	lsls	r3, r3, #7
 800570e:	b29a      	uxth	r2, r3
 8005710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005716:	440b      	add	r3, r1
 8005718:	3240      	adds	r2, #64	; 0x40
 800571a:	b292      	uxth	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	3301      	adds	r3, #1
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	2b0e      	cmp	r3, #14
 8005728:	dde9      	ble.n	80056fe <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	3320      	adds	r3, #32
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 8005730:	2300      	movs	r3, #0
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
 8005734:	e009      	b.n	800574a <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 8005736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800573c:	4413      	add	r3, r2
 800573e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005742:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8005744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005746:	3301      	adds	r3, #1
 8005748:	64bb      	str	r3, [r7, #72]	; 0x48
 800574a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574c:	2b0d      	cmp	r3, #13
 800574e:	ddf2      	ble.n	8005736 <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 8005750:	bf00      	nop
 8005752:	f7fc fb35 	bl	8001dc0 <EEP_ReadyToWrite>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0fa      	beq.n	8005752 <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	4619      	mov	r1, r3
 8005760:	2000      	movs	r0, #0
 8005762:	f7fc fa9b 	bl	8001c9c <EEP_WritePage>
}
 8005766:	bf00      	nop
 8005768:	3750      	adds	r7, #80	; 0x50
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <Storage_Init>:

uint8_t Storage_Init() {
 8005770:	b5b0      	push	{r4, r5, r7, lr}
 8005772:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8005774:	bf00      	nop
 8005776:	f7fc fb23 	bl	8001dc0 <EEP_ReadyToWrite>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0fa      	beq.n	8005776 <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 8005780:	4913      	ldr	r1, [pc, #76]	; (80057d0 <Storage_Init+0x60>)
 8005782:	2000      	movs	r0, #0
 8005784:	f7fc fad2 	bl	8001d2c <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <Storage_Init+0x60>)
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2bab      	cmp	r3, #171	; 0xab
 800578e:	d001      	beq.n	8005794 <Storage_Init+0x24>
 8005790:	2300      	movs	r3, #0
 8005792:	e01b      	b.n	80057cc <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <Storage_Init+0x60>)
 8005796:	791a      	ldrb	r2, [r3, #4]
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <Storage_Init+0x64>)
 800579a:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <Storage_Init+0x64>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <Storage_Init+0x60>)
 80057a6:	4413      	add	r3, r2
 80057a8:	881a      	ldrh	r2, [r3, #0]
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <Storage_Init+0x68>)
 80057ac:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80057ae:	4a0b      	ldr	r2, [pc, #44]	; (80057dc <Storage_Init+0x6c>)
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <Storage_Init+0x60>)
 80057b2:	4615      	mov	r5, r2
 80057b4:	f103 0420 	add.w	r4, r3, #32
 80057b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ba:	6028      	str	r0, [r5, #0]
 80057bc:	6069      	str	r1, [r5, #4]
 80057be:	60aa      	str	r2, [r5, #8]
 80057c0:	60eb      	str	r3, [r5, #12]
 80057c2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80057c4:	6128      	str	r0, [r5, #16]
 80057c6:	6169      	str	r1, [r5, #20]
 80057c8:	61aa      	str	r2, [r5, #24]
	return 1;
 80057ca:	2301      	movs	r3, #1
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	bdb0      	pop	{r4, r5, r7, pc}
 80057d0:	20000cdc 	.word	0x20000cdc
 80057d4:	20000cd5 	.word	0x20000cd5
 80057d8:	20000cd6 	.word	0x20000cd6
 80057dc:	20000b80 	.word	0x20000b80

080057e0 <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b092      	sub	sp, #72	; 0x48
 80057e4:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 80057e6:	4b13      	ldr	r3, [pc, #76]	; (8005834 <Storage_PlanInit+0x54>)
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	099b      	lsrs	r3, r3, #6
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 80057f2:	bf00      	nop
 80057f4:	f7fc fae4 	bl	8001dc0 <EEP_ReadyToWrite>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0fa      	beq.n	80057f4 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 80057fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005802:	b29b      	uxth	r3, r3
 8005804:	1d3a      	adds	r2, r7, #4
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7fc fa8f 	bl	8001d2c <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	2230      	movs	r2, #48	; 0x30
 8005812:	4619      	mov	r1, r3
 8005814:	4808      	ldr	r0, [pc, #32]	; (8005838 <Storage_PlanInit+0x58>)
 8005816:	f00a f9d9 	bl	800fbcc <memcpy>
	if(plan.id>>7 != 1) return 0;
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <Storage_PlanInit+0x58>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	09db      	lsrs	r3, r3, #7
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <Storage_PlanInit+0x4a>
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <Storage_PlanInit+0x4c>
	return 1;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3748      	adds	r7, #72	; 0x48
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000cd6 	.word	0x20000cd6
 8005838:	20000da8 	.word	0x20000da8

0800583c <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 800583c:	b5b0      	push	{r4, r5, r7, lr}
 800583e:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8005840:	bf00      	nop
 8005842:	f7fc fabd 	bl	8001dc0 <EEP_ReadyToWrite>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0fa      	beq.n	8005842 <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 800584c:	221c      	movs	r2, #28
 800584e:	490a      	ldr	r1, [pc, #40]	; (8005878 <Storage_GetADCThreshold+0x3c>)
 8005850:	2020      	movs	r0, #32
 8005852:	f7fc fa8f 	bl	8001d74 <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <Storage_GetADCThreshold+0x40>)
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <Storage_GetADCThreshold+0x44>)
 800585a:	4615      	mov	r5, r2
 800585c:	f103 0420 	add.w	r4, r3, #32
 8005860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005862:	6028      	str	r0, [r5, #0]
 8005864:	6069      	str	r1, [r5, #4]
 8005866:	60aa      	str	r2, [r5, #8]
 8005868:	60eb      	str	r3, [r5, #12]
 800586a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800586c:	6128      	str	r0, [r5, #16]
 800586e:	6169      	str	r1, [r5, #20]
 8005870:	61aa      	str	r2, [r5, #24]
}
 8005872:	bf00      	nop
 8005874:	bdb0      	pop	{r4, r5, r7, pc}
 8005876:	bf00      	nop
 8005878:	20000cfc 	.word	0x20000cfc
 800587c:	20000b80 	.word	0x20000b80
 8005880:	20000cdc 	.word	0x20000cdc

08005884 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 8005884:	b5b0      	push	{r4, r5, r7, lr}
 8005886:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <Storage_SetADCThreshold+0x3c>)
 800588a:	4a0e      	ldr	r2, [pc, #56]	; (80058c4 <Storage_SetADCThreshold+0x40>)
 800588c:	f103 0420 	add.w	r4, r3, #32
 8005890:	4615      	mov	r5, r2
 8005892:	6828      	ldr	r0, [r5, #0]
 8005894:	6869      	ldr	r1, [r5, #4]
 8005896:	68aa      	ldr	r2, [r5, #8]
 8005898:	68eb      	ldr	r3, [r5, #12]
 800589a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800589c:	6928      	ldr	r0, [r5, #16]
 800589e:	6969      	ldr	r1, [r5, #20]
 80058a0:	69aa      	ldr	r2, [r5, #24]
 80058a2:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 80058a4:	bf00      	nop
 80058a6:	f7fc fa8b 	bl	8001dc0 <EEP_ReadyToWrite>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0fa      	beq.n	80058a6 <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80058b0:	221c      	movs	r2, #28
 80058b2:	4905      	ldr	r1, [pc, #20]	; (80058c8 <Storage_SetADCThreshold+0x44>)
 80058b4:	2020      	movs	r0, #32
 80058b6:	f7fc fa15 	bl	8001ce4 <EEP_WriteMem>
}
 80058ba:	bf00      	nop
 80058bc:	bdb0      	pop	{r4, r5, r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000cdc 	.word	0x20000cdc
 80058c4:	20000b80 	.word	0x20000b80
 80058c8:	20000cfc 	.word	0x20000cfc

080058cc <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b094      	sub	sp, #80	; 0x50
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 80058d6:	4a22      	ldr	r2, [pc, #136]	; (8005960 <Storage_GetPlan+0x94>)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <Storage_GetPlan+0x94>)
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <Storage_GetPlan+0x98>)
 80058e2:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 80058e4:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <Storage_GetPlan+0x94>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <Storage_GetPlan+0x98>)
 80058ee:	4413      	add	r3, r2
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <Storage_GetPlan+0x9c>)
 80058f4:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 80058f6:	bf00      	nop
 80058f8:	f7fc fa62 	bl	8001dc0 <EEP_ReadyToWrite>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0fa      	beq.n	80058f8 <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8005902:	2201      	movs	r2, #1
 8005904:	4916      	ldr	r1, [pc, #88]	; (8005960 <Storage_GetPlan+0x94>)
 8005906:	2004      	movs	r0, #4
 8005908:	f7fc f9ec 	bl	8001ce4 <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 800590c:	4b16      	ldr	r3, [pc, #88]	; (8005968 <Storage_GetPlan+0x9c>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	b29b      	uxth	r3, r3
 8005914:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8005918:	bf00      	nop
 800591a:	f7fc fa51 	bl	8001dc0 <EEP_ReadyToWrite>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0fa      	beq.n	800591a <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8005924:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005928:	b29b      	uxth	r3, r3
 800592a:	f107 020c 	add.w	r2, r7, #12
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f7fc f9fb 	bl	8001d2c <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8005936:	f107 030c 	add.w	r3, r7, #12
 800593a:	2230      	movs	r2, #48	; 0x30
 800593c:	4619      	mov	r1, r3
 800593e:	480b      	ldr	r0, [pc, #44]	; (800596c <Storage_GetPlan+0xa0>)
 8005940:	f00a f944 	bl	800fbcc <memcpy>
	if(plan.id>>7 != 1) return 0;
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <Storage_GetPlan+0xa0>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	09db      	lsrs	r3, r3, #7
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	d001      	beq.n	8005954 <Storage_GetPlan+0x88>
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <Storage_GetPlan+0x8a>
	return 1;
 8005954:	2301      	movs	r3, #1
}
 8005956:	4618      	mov	r0, r3
 8005958:	3750      	adds	r7, #80	; 0x50
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000cd5 	.word	0x20000cd5
 8005964:	20000cdc 	.word	0x20000cdc
 8005968:	20000cd6 	.word	0x20000cd6
 800596c:	20000da8 	.word	0x20000da8

08005970 <Storage_SetPlanOther>:

void Storage_SetPlanOther(Plan_typedef* ptr_plan, uint8_t n_plan) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b094      	sub	sp, #80	; 0x50
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	3308      	adds	r3, #8
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4a12      	ldr	r2, [pc, #72]	; (80059cc <Storage_SetPlanOther+0x5c>)
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t plan_page = (n_plan_addr)/PAGE_SIZE;
 800598c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	b29b      	uxth	r3, r3
 8005994:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)ptr_plan, sizeof(Plan_typedef));
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	2230      	movs	r2, #48	; 0x30
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f00a f913 	bl	800fbcc <memcpy>
	while(!EEP_ReadyToWrite());
 80059a6:	bf00      	nop
 80059a8:	f7fc fa0a 	bl	8001dc0 <EEP_ReadyToWrite>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0fa      	beq.n	80059a8 <Storage_SetPlanOther+0x38>
	EEP_WritePage(plan_page, buff);
 80059b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f107 020c 	add.w	r2, r7, #12
 80059bc:	4611      	mov	r1, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fc f96c 	bl	8001c9c <EEP_WritePage>
}
 80059c4:	bf00      	nop
 80059c6:	3750      	adds	r7, #80	; 0x50
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000cdc 	.word	0x20000cdc

080059d0 <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 80059d6:	2302      	movs	r3, #2
 80059d8:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 80059da:	bf00      	nop
 80059dc:	f7fc f9f0 	bl	8001dc0 <EEP_ReadyToWrite>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0fa      	beq.n	80059dc <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <Storage_SetCheckpoint+0x34>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	4413      	add	r3, r2
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2214      	movs	r2, #20
 80059f4:	4904      	ldr	r1, [pc, #16]	; (8005a08 <Storage_SetCheckpoint+0x38>)
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fc f974 	bl	8001ce4 <EEP_WriteMem>
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000cd6 	.word	0x20000cd6
 8005a08:	20000daa 	.word	0x20000daa

08005a0c <Storage_SetPID>:

void Storage_SetPID() {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8005a12:	2318      	movs	r3, #24
 8005a14:	71fb      	strb	r3, [r7, #7]
	uint8_t size = ((uint8_t*)&plan.alpha - (uint8_t*)&plan.kpid) + sizeof(float);
 8005a16:	2314      	movs	r3, #20
 8005a18:	71bb      	strb	r3, [r7, #6]
//	uint8_t buff[size];
//	memcpy(buff, (uint8_t*)plan.kpid, 3*sizeof(float));
//	buff[3*sizeof(float)] = plan.status_pid;
//	memcpy(buff+(3*sizeof(float))+1, (uint8_t*)&plan.alpha, sizeof(float));
	while(!EEP_ReadyToWrite());
 8005a1a:	bf00      	nop
 8005a1c:	f7fc f9d0 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0fa      	beq.n	8005a1c <Storage_SetPID+0x10>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, size);
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <Storage_SetPID+0x38>)
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	4413      	add	r3, r2
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	79ba      	ldrb	r2, [r7, #6]
 8005a34:	4904      	ldr	r1, [pc, #16]	; (8005a48 <Storage_SetPID+0x3c>)
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fc f954 	bl	8001ce4 <EEP_WriteMem>

//	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
//	while(!EEP_ReadyToWrite());
//	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20000cd6 	.word	0x20000cd6
 8005a48:	20000dc0 	.word	0x20000dc0

08005a4c <Storage_SetSpeed>:

void Storage_SetSpeed() {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8005a52:	2316      	movs	r3, #22
 8005a54:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005a56:	bf00      	nop
 8005a58:	f7fc f9b2 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0fa      	beq.n	8005a58 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <Storage_SetSpeed+0x5c>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2202      	movs	r2, #2
 8005a70:	490e      	ldr	r1, [pc, #56]	; (8005aac <Storage_SetSpeed+0x60>)
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fc f936 	bl	8001ce4 <EEP_WriteMem>

	offset = (uint8_t*)&plan.acc - (uint8_t*)&plan;
 8005a78:	232c      	movs	r3, #44	; 0x2c
 8005a7a:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8005a7c:	bf00      	nop
 8005a7e:	f7fc f99f 	bl	8001dc0 <EEP_ReadyToWrite>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0fa      	beq.n	8005a7e <Storage_SetSpeed+0x32>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.acc, sizeof(float));
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <Storage_SetSpeed+0x5c>)
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	4413      	add	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2204      	movs	r2, #4
 8005a96:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <Storage_SetSpeed+0x64>)
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fc f923 	bl	8001ce4 <EEP_WriteMem>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000cd6 	.word	0x20000cd6
 8005aac:	20000dbe 	.word	0x20000dbe
 8005ab0:	20000dd4 	.word	0x20000dd4

08005ab4 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, uint8_t index) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	70bb      	strb	r3, [r7, #2]
	index = index%DEF_ACTION_PER_PLAN;
 8005ac4:	78bb      	ldrb	r3, [r7, #2]
 8005ac6:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <GetActionOther+0x78>)
 8005ac8:	fba2 1203 	umull	r1, r2, r2, r3
 8005acc:	0952      	lsrs	r2, r2, #5
 8005ace:	2164      	movs	r1, #100	; 0x64
 8005ad0:	fb01 f202 	mul.w	r2, r1, r2
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	70bb      	strb	r3, [r7, #2]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	3308      	adds	r3, #8
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <GetActionOther+0x7c>)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	83fb      	strh	r3, [r7, #30]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8005ae6:	78bb      	ldrb	r3, [r7, #2]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	8bfb      	ldrh	r3, [r7, #30]
 8005af0:	4413      	add	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3340      	adds	r3, #64	; 0x40
 8005af6:	83bb      	strh	r3, [r7, #28]
	while(!EEP_ReadyToWrite());
 8005af8:	bf00      	nop
 8005afa:	f7fc f961 	bl	8001dc0 <EEP_ReadyToWrite>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0fa      	beq.n	8005afa <GetActionOther+0x46>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8005b04:	f107 010c 	add.w	r1, r7, #12
 8005b08:	8bbb      	ldrh	r3, [r7, #28]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fc f931 	bl	8001d74 <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 8005b12:	f107 020c 	add.w	r2, r7, #12
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6810      	ldr	r0, [r2, #0]
 8005b1a:	6851      	ldr	r1, [r2, #4]
 8005b1c:	6892      	ldr	r2, [r2, #8]
 8005b1e:	6018      	str	r0, [r3, #0]
 8005b20:	6059      	str	r1, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	51eb851f 	.word	0x51eb851f
 8005b30:	20000cdc 	.word	0x20000cdc

08005b34 <SetActionOther>:

void SetActionOther(Action_typedef act, uint8_t index) {
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b08b      	sub	sp, #44	; 0x2c
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	1d3c      	adds	r4, r7, #4
 8005b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b40:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <SetActionOther+0x64>)
 8005b46:	fba2 1203 	umull	r1, r2, r2, r3
 8005b4a:	0952      	lsrs	r2, r2, #5
 8005b4c:	2164      	movs	r1, #100	; 0x64
 8005b4e:	fb01 f202 	mul.w	r2, r1, r2
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <SetActionOther+0x68>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	4413      	add	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3340      	adds	r3, #64	; 0x40
 8005b68:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005b6a:	f107 0314 	add.w	r3, r7, #20
 8005b6e:	1d3a      	adds	r2, r7, #4
 8005b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8005b76:	bf00      	nop
 8005b78:	f7fc f922 	bl	8001dc0 <EEP_ReadyToWrite>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0fa      	beq.n	8005b78 <SetActionOther+0x44>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005b82:	f107 0114 	add.w	r1, r7, #20
 8005b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b88:	2210      	movs	r2, #16
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fc f8aa 	bl	8001ce4 <EEP_WriteMem>
}
 8005b90:	bf00      	nop
 8005b92:	372c      	adds	r7, #44	; 0x2c
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd90      	pop	{r4, r7, pc}
 8005b98:	51eb851f 	.word	0x51eb851f
 8005b9c:	20000cd6 	.word	0x20000cd6

08005ba0 <SetActionOther2>:

void SetActionOther2(uint8_t n_plan, Action_typedef act, uint8_t index) {
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4638      	mov	r0, r7
 8005baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005bae:	4623      	mov	r3, r4
 8005bb0:	73fb      	strb	r3, [r7, #15]
	index = index%DEF_ACTION_PER_PLAN;
 8005bb2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <SetActionOther2+0x7c>)
 8005bb8:	fba2 1203 	umull	r1, r2, r2, r3
 8005bbc:	0952      	lsrs	r2, r2, #5
 8005bbe:	2164      	movs	r1, #100	; 0x64
 8005bc0:	fb01 f202 	mul.w	r2, r1, r2
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <SetActionOther2+0x80>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t act_addr = n_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8005bd8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005be4:	4413      	add	r3, r2
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3340      	adds	r3, #64	; 0x40
 8005bea:	84bb      	strh	r3, [r7, #36]	; 0x24
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8005bf8:	bf00      	nop
 8005bfa:	f7fc f8e1 	bl	8001dc0 <EEP_ReadyToWrite>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0fa      	beq.n	8005bfa <SetActionOther2+0x5a>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8005c04:	f107 0114 	add.w	r1, r7, #20
 8005c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fc f869 	bl	8001ce4 <EEP_WriteMem>
}
 8005c12:	bf00      	nop
 8005c14:	372c      	adds	r7, #44	; 0x2c
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd90      	pop	{r4, r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	51eb851f 	.word	0x51eb851f
 8005c20:	20000cdc 	.word	0x20000cdc

08005c24 <GetActionSequence>:

uint8_t GetActionSequence() {
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
//	return 0; //temporary disable
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 8005c2a:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <GetActionSequence+0x8c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d132      	bne.n	8005c9c <GetActionSequence+0x78>

		if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 8005c36:	4b1f      	ldr	r3, [pc, #124]	; (8005cb4 <GetActionSequence+0x90>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d903      	bls.n	8005c46 <GetActionSequence+0x22>
 8005c3e:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <GetActionSequence+0x90>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e005      	b.n	8005c52 <GetActionSequence+0x2e>
 8005c46:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <GetActionSequence+0x90>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <GetActionSequence+0x90>)
 8005c50:	701a      	strb	r2, [r3, #0]

		plan_active = plan_buffer[plan_buffer_i];
 8005c52:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <GetActionSequence+0x90>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	4817      	ldr	r0, [pc, #92]	; (8005cb8 <GetActionSequence+0x94>)
 8005c5a:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <GetActionSequence+0x98>)
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	440b      	add	r3, r1
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if(plan_buffer_i == plan_buffer_f) {
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <GetActionSequence+0x90>)
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <GetActionSequence+0x9c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d106      	bne.n	8005c88 <GetActionSequence+0x64>
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <GetActionSequence+0x8c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f043 0302 	orr.w	r3, r3, #2
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <GetActionSequence+0x8c>)
 8005c86:	701a      	strb	r2, [r3, #0]
		}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <GetActionSequence+0x8c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <GetActionSequence+0x8c>)
 8005c94:	701a      	strb	r2, [r3, #0]
		retval = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	71fb      	strb	r3, [r7, #7]
 8005c9a:	e001      	b.n	8005ca0 <GetActionSequence+0x7c>
	} else {
		retval = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000da4 	.word	0x20000da4
 8005cb4:	20000d96 	.word	0x20000d96
 8005cb8:	20000d98 	.word	0x20000d98
 8005cbc:	20000d1c 	.word	0x20000d1c
 8005cc0:	20000d95 	.word	0x20000d95

08005cc4 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8005cca:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <GetActionSequenceRoutine+0xfc>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <GetActionSequenceRoutine+0x1e>
 8005cd2:	4b3c      	ldr	r3, [pc, #240]	; (8005dc4 <GetActionSequenceRoutine+0x100>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4b39      	ldr	r3, [pc, #228]	; (8005dc0 <GetActionSequenceRoutine+0xfc>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d107      	bne.n	8005cf2 <GetActionSequenceRoutine+0x2e>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005ce2:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <GetActionSequenceRoutine+0xfc>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d15d      	bne.n	8005da6 <GetActionSequenceRoutine+0xe2>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 8005cea:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <GetActionSequenceRoutine+0x100>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d059      	beq.n	8005da6 <GetActionSequenceRoutine+0xe2>
		if(buff_index < plan.num_action-2) {
 8005cf2:	4b35      	ldr	r3, [pc, #212]	; (8005dc8 <GetActionSequenceRoutine+0x104>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4b34      	ldr	r3, [pc, #208]	; (8005dcc <GetActionSequenceRoutine+0x108>)
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	3b02      	subs	r3, #2
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	da49      	bge.n	8005d96 <GetActionSequenceRoutine+0xd2>
			buff_index++;
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <GetActionSequenceRoutine+0x104>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	; (8005dc8 <GetActionSequenceRoutine+0x104>)
 8005d0c:	701a      	strb	r2, [r3, #0]
			uint8_t index_f = plan_buffer_f;
 8005d0e:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <GetActionSequenceRoutine+0x100>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	75fb      	strb	r3, [r7, #23]
			if(index_f>=BUFFER_SIZE-1) index_f=0; else index_f++;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d902      	bls.n	8005d20 <GetActionSequenceRoutine+0x5c>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	75fb      	strb	r3, [r7, #23]
 8005d1e:	e002      	b.n	8005d26 <GetActionSequenceRoutine+0x62>
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	3301      	adds	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
			plan_buffer[index_f] = GetActionOther(num_plan, buff_index);
 8005d26:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <GetActionSequenceRoutine+0x10c>)
 8005d28:	7819      	ldrb	r1, [r3, #0]
 8005d2a:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <GetActionSequenceRoutine+0x104>)
 8005d2c:	7818      	ldrb	r0, [r3, #0]
 8005d2e:	7dfa      	ldrb	r2, [r7, #23]
 8005d30:	4c28      	ldr	r4, [pc, #160]	; (8005dd4 <GetActionSequenceRoutine+0x110>)
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441c      	add	r4, r3
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff feb7 	bl	8005ab4 <GetActionOther>
 8005d46:	4623      	mov	r3, r4
 8005d48:	463a      	mov	r2, r7
 8005d4a:	6810      	ldr	r0, [r2, #0]
 8005d4c:	6851      	ldr	r1, [r2, #4]
 8005d4e:	6892      	ldr	r2, [r2, #8]
 8005d50:	c307      	stmia	r3!, {r0, r1, r2}
			if(plan_buffer[index_f].act == 11) {
 8005d52:	7dfa      	ldrb	r2, [r7, #23]
 8005d54:	491f      	ldr	r1, [pc, #124]	; (8005dd4 <GetActionSequenceRoutine+0x110>)
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b0b      	cmp	r3, #11
 8005d64:	d10c      	bne.n	8005d80 <GetActionSequenceRoutine+0xbc>
				buff_index = plan_buffer[index_f].act_value-1;
 8005d66:	7dfa      	ldrb	r2, [r7, #23]
 8005d68:	491a      	ldr	r1, [pc, #104]	; (8005dd4 <GetActionSequenceRoutine+0x110>)
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	3303      	adds	r3, #3
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <GetActionSequenceRoutine+0x104>)
 8005d7e:	701a      	strb	r2, [r3, #0]
			}
			plan_buffer_f = index_f;
 8005d80:	4a10      	ldr	r2, [pc, #64]	; (8005dc4 <GetActionSequenceRoutine+0x100>)
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	7013      	strb	r3, [r2, #0]
			storage_flag &=~STO_FLAG_BUFF_EMPTY;
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <GetActionSequenceRoutine+0x114>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f023 0302 	bic.w	r3, r3, #2
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <GetActionSequenceRoutine+0x114>)
 8005d92:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005d94:	e00f      	b.n	8005db6 <GetActionSequenceRoutine+0xf2>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <GetActionSequenceRoutine+0x114>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <GetActionSequenceRoutine+0x114>)
 8005da2:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005da4:	e007      	b.n	8005db6 <GetActionSequenceRoutine+0xf2>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <GetActionSequenceRoutine+0x114>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <GetActionSequenceRoutine+0x114>)
 8005db2:	701a      	strb	r2, [r3, #0]
	}
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd90      	pop	{r4, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000d96 	.word	0x20000d96
 8005dc4:	20000d95 	.word	0x20000d95
 8005dc8:	20000d94 	.word	0x20000d94
 8005dcc:	20000da8 	.word	0x20000da8
 8005dd0:	20000cd5 	.word	0x20000cd5
 8005dd4:	20000d1c 	.word	0x20000d1c
 8005dd8:	20000da4 	.word	0x20000da4

08005ddc <GetActionSequenceInit>:

void GetActionSequenceInit(uint8_t num) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 8005de6:	463b      	mov	r3, r7
 8005de8:	7dfa      	ldrb	r2, [r7, #23]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fb73 	bl	80054d8 <GetAction>
	buff_index = num;
 8005df2:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <GetActionSequenceInit+0x50>)
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	7013      	strb	r3, [r2, #0]
	plan_buffer_i = 0;
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <GetActionSequenceInit+0x54>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
	plan_buffer_f = 0;
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <GetActionSequenceInit+0x58>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
	storage_flag = 0;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <GetActionSequenceInit+0x5c>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
	memset((uint8_t*)&plan_buffer, 0, sizeof(Action_typedef)*BUFFER_SIZE);
 8005e0a:	2278      	movs	r2, #120	; 0x78
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	480b      	ldr	r0, [pc, #44]	; (8005e3c <GetActionSequenceInit+0x60>)
 8005e10:	f009 fe4d 	bl	800faae <memset>
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <GetActionSequenceInit+0x5c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f043 0302 	orr.w	r3, r3, #2
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <GetActionSequenceInit+0x5c>)
 8005e20:	701a      	strb	r2, [r3, #0]
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000d94 	.word	0x20000d94
 8005e30:	20000d96 	.word	0x20000d96
 8005e34:	20000d95 	.word	0x20000d95
 8005e38:	20000da4 	.word	0x20000da4
 8005e3c:	20000d1c 	.word	0x20000d1c

08005e40 <Storage_InsertAction>:

void Storage_InsertAction(uint8_t index) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=plan.num_action-1; i>index; i--) {
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <Storage_InsertAction+0x50>)
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e014      	b.n	8005e7e <Storage_InsertAction+0x3e>
		temp = GetActionOther(num_plan, i-1);
 8005e54:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <Storage_InsertAction+0x54>)
 8005e56:	7819      	ldrb	r1, [r3, #0]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	f107 0308 	add.w	r3, r7, #8
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fe25 	bl	8005ab4 <GetActionOther>
		SetActionOther(temp, i);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f107 0208 	add.w	r2, r7, #8
 8005e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e74:	f7ff fe5e 	bl	8005b34 <SetActionOther>
	for(int i=plan.num_action-1; i>index; i--) {
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	dce6      	bgt.n	8005e54 <Storage_InsertAction+0x14>
	}
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000da8 	.word	0x20000da8
 8005e94:	20000cd5 	.word	0x20000cd5

08005e98 <Storage_DeleteAction>:

void Storage_DeleteAction(uint8_t index) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=index; i<plan.num_action-1; i++) {
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e014      	b.n	8005ed2 <Storage_DeleteAction+0x3a>
		temp = GetActionOther(num_plan, i+1);
 8005ea8:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <Storage_DeleteAction+0x60>)
 8005eaa:	7819      	ldrb	r1, [r3, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	f107 0308 	add.w	r3, r7, #8
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff fdfb 	bl	8005ab4 <GetActionOther>
		SetActionOther(temp, i);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f107 0208 	add.w	r2, r7, #8
 8005ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ec8:	f7ff fe34 	bl	8005b34 <SetActionOther>
	for(int i=index; i<plan.num_action-1; i++) {
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <Storage_DeleteAction+0x64>)
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	dbe4      	blt.n	8005ea8 <Storage_DeleteAction+0x10>
	}
	SetActionOther(plan_default, plan.num_action-1);
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <Storage_DeleteAction+0x64>)
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <Storage_DeleteAction+0x68>)
 8005ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eea:	f7ff fe23 	bl	8005b34 <SetActionOther>
}
 8005eee:	bf00      	nop
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000cd5 	.word	0x20000cd5
 8005efc:	20000da8 	.word	0x20000da8
 8005f00:	08012400 	.word	0x08012400

08005f04 <Storage_CopyPlan>:

void Storage_CopyPlan(uint8_t plan_dest) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
	Storage_SetPlanOther(&plan, plan_dest);
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	4619      	mov	r1, r3
 8005f12:	4813      	ldr	r0, [pc, #76]	; (8005f60 <Storage_CopyPlan+0x5c>)
 8005f14:	f7ff fd2c 	bl	8005970 <Storage_SetPlanOther>
	Action_typedef temp;
	for(int i=0; i<plan.num_action; i++) {
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e014      	b.n	8005f48 <Storage_CopyPlan+0x44>
		temp = GetActionOther(num_plan, i);
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <Storage_CopyPlan+0x60>)
 8005f20:	7819      	ldrb	r1, [r3, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fdc2 	bl	8005ab4 <GetActionOther>
		SetActionOther2(plan_dest, temp, i);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	79f8      	ldrb	r0, [r7, #7]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f3e:	f7ff fe2f 	bl	8005ba0 <SetActionOther2>
	for(int i=0; i<plan.num_action; i++) {
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	3301      	adds	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <Storage_CopyPlan+0x5c>)
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	dbe4      	blt.n	8005f1e <Storage_CopyPlan+0x1a>
	}
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000da8 	.word	0x20000da8
 8005f64:	20000cd5 	.word	0x20000cd5

08005f68 <Storage_CleanInit>:

void Storage_CleanInit() {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b092      	sub	sp, #72	; 0x48
 8005f6c:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	2240      	movs	r2, #64	; 0x40
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f009 fd9a 	bl	800faae <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7e:	e00f      	b.n	8005fa0 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8005f80:	bf00      	nop
 8005f82:	f7fb ff1d 	bl	8001dc0 <EEP_ReadyToWrite>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0fa      	beq.n	8005f82 <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	1d3a      	adds	r2, r7, #4
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fb fe81 	bl	8001c9c <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa6:	dbeb      	blt.n	8005f80 <Storage_CleanInit+0x18>
	}
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3748      	adds	r7, #72	; 0x48
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	af00      	add	r7, sp, #0
  return 1;
 8005fb6:	2301      	movs	r3, #1
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <_kill>:

int _kill(int pid, int sig)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005fcc:	f009 fdd2 	bl	800fb74 <__errno>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2216      	movs	r2, #22
 8005fd4:	601a      	str	r2, [r3, #0]
  return -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <_exit>:

void _exit (int status)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005fea:	f04f 31ff 	mov.w	r1, #4294967295
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff ffe7 	bl	8005fc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005ff4:	e7fe      	b.n	8005ff4 <_exit+0x12>

08005ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e00a      	b.n	800601e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006008:	f3af 8000 	nop.w
 800600c:	4601      	mov	r1, r0
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	60ba      	str	r2, [r7, #8]
 8006014:	b2ca      	uxtb	r2, r1
 8006016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	dbf0      	blt.n	8006008 <_read+0x12>
  }

  return len;
 8006026:	687b      	ldr	r3, [r7, #4]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e009      	b.n	8006056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	60ba      	str	r2, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3301      	adds	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	dbf1      	blt.n	8006042 <_write+0x12>
  }
  return len;
 800605e:	687b      	ldr	r3, [r7, #4]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_close>:

int _close(int file)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006090:	605a      	str	r2, [r3, #4]
  return 0;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <_isatty>:

int _isatty(int file)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80060a8:	2301      	movs	r3, #1
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060d8:	4a14      	ldr	r2, [pc, #80]	; (800612c <_sbrk+0x5c>)
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <_sbrk+0x60>)
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <_sbrk+0x64>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <_sbrk+0x64>)
 80060ee:	4a12      	ldr	r2, [pc, #72]	; (8006138 <_sbrk+0x68>)
 80060f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060f2:	4b10      	ldr	r3, [pc, #64]	; (8006134 <_sbrk+0x64>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d207      	bcs.n	8006110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006100:	f009 fd38 	bl	800fb74 <__errno>
 8006104:	4603      	mov	r3, r0
 8006106:	220c      	movs	r2, #12
 8006108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	e009      	b.n	8006124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <_sbrk+0x64>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <_sbrk+0x64>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	4a05      	ldr	r2, [pc, #20]	; (8006134 <_sbrk+0x64>)
 8006120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20020000 	.word	0x20020000
 8006130:	00000400 	.word	0x00000400
 8006134:	20000dd8 	.word	0x20000dd8
 8006138:	200016d8 	.word	0x200016d8

0800613c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <SystemInit+0x20>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006146:	4a05      	ldr	r2, [pc, #20]	; (800615c <SystemInit+0x20>)
 8006148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800614c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b096      	sub	sp, #88	; 0x58
 8006164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	605a      	str	r2, [r3, #4]
 8006170:	609a      	str	r2, [r3, #8]
 8006172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006174:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800617e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	609a      	str	r2, [r3, #8]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	611a      	str	r2, [r3, #16]
 800618e:	615a      	str	r2, [r3, #20]
 8006190:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	2220      	movs	r2, #32
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f009 fc88 	bl	800faae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800619e:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061a0:	4a4a      	ldr	r2, [pc, #296]	; (80062cc <MX_TIM1_Init+0x16c>)
 80061a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80061a4:	4b48      	ldr	r3, [pc, #288]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061a6:	2253      	movs	r2, #83	; 0x53
 80061a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061aa:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80061b0:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061b2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80061b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80061be:	4b42      	ldr	r3, [pc, #264]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061c4:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80061ca:	483f      	ldr	r0, [pc, #252]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061cc:	f006 febe 	bl	800cf4c <HAL_TIM_Base_Init>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061d6:	f7fc f8aa 	bl	800232e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80061e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061e4:	4619      	mov	r1, r3
 80061e6:	4838      	ldr	r0, [pc, #224]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061e8:	f007 fb86 	bl	800d8f8 <HAL_TIM_ConfigClockSource>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80061f2:	f7fc f89c 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80061f6:	4834      	ldr	r0, [pc, #208]	; (80062c8 <MX_TIM1_Init+0x168>)
 80061f8:	f006 ff68 	bl	800d0cc <HAL_TIM_PWM_Init>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006202:	f7fc f894 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800620a:	2300      	movs	r3, #0
 800620c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800620e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006212:	4619      	mov	r1, r3
 8006214:	482c      	ldr	r0, [pc, #176]	; (80062c8 <MX_TIM1_Init+0x168>)
 8006216:	f007 ff6f 	bl	800e0f8 <HAL_TIMEx_MasterConfigSynchronization>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006220:	f7fc f885 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006224:	2360      	movs	r3, #96	; 0x60
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800622c:	2300      	movs	r3, #0
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006230:	2300      	movs	r3, #0
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006234:	2300      	movs	r3, #0
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006238:	2300      	movs	r3, #0
 800623a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800623c:	2300      	movs	r3, #0
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006244:	2200      	movs	r2, #0
 8006246:	4619      	mov	r1, r3
 8006248:	481f      	ldr	r0, [pc, #124]	; (80062c8 <MX_TIM1_Init+0x168>)
 800624a:	f007 fa93 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006254:	f7fc f86b 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800625c:	2204      	movs	r2, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4819      	ldr	r0, [pc, #100]	; (80062c8 <MX_TIM1_Init+0x168>)
 8006262:	f007 fa87 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800626c:	f7fc f85f 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006274:	2208      	movs	r2, #8
 8006276:	4619      	mov	r1, r3
 8006278:	4813      	ldr	r0, [pc, #76]	; (80062c8 <MX_TIM1_Init+0x168>)
 800627a:	f007 fa7b 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006284:	f7fc f853 	bl	800232e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006288:	2300      	movs	r3, #0
 800628a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800628c:	2300      	movs	r3, #0
 800628e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800629c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4807      	ldr	r0, [pc, #28]	; (80062c8 <MX_TIM1_Init+0x168>)
 80062ac:	f007 ffa0 	bl	800e1f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80062b6:	f7fc f83a 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80062ba:	4803      	ldr	r0, [pc, #12]	; (80062c8 <MX_TIM1_Init+0x168>)
 80062bc:	f000 fa5a 	bl	8006774 <HAL_TIM_MspPostInit>

}
 80062c0:	bf00      	nop
 80062c2:	3758      	adds	r7, #88	; 0x58
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000ddc 	.word	0x20000ddc
 80062cc:	40010000 	.word	0x40010000

080062d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	2224      	movs	r2, #36	; 0x24
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f009 fbe5 	bl	800faae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062e4:	1d3b      	adds	r3, r7, #4
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <MX_TIM2_Init+0xa4>)
 80062ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80062f4:	4b1f      	ldr	r3, [pc, #124]	; (8006374 <MX_TIM2_Init+0xa4>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <MX_TIM2_Init+0xa4>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006300:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <MX_TIM2_Init+0xa4>)
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <MX_TIM2_Init+0xa4>)
 800630a:	2200      	movs	r2, #0
 800630c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <MX_TIM2_Init+0xa4>)
 8006310:	2200      	movs	r2, #0
 8006312:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006314:	2303      	movs	r3, #3
 8006316:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006320:	2300      	movs	r3, #0
 8006322:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006328:	2300      	movs	r3, #0
 800632a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800632c:	2301      	movs	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006330:	2300      	movs	r3, #0
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	4619      	mov	r1, r3
 800633e:	480d      	ldr	r0, [pc, #52]	; (8006374 <MX_TIM2_Init+0xa4>)
 8006340:	f006 ffdc 	bl	800d2fc <HAL_TIM_Encoder_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800634a:	f7fb fff0 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4806      	ldr	r0, [pc, #24]	; (8006374 <MX_TIM2_Init+0xa4>)
 800635c:	f007 fecc 	bl	800e0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8006366:	f7fb ffe2 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800636a:	bf00      	nop
 800636c:	3730      	adds	r7, #48	; 0x30
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000e24 	.word	0x20000e24

08006378 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800637e:	f107 0320 	add.w	r3, r7, #32
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006388:	1d3b      	adds	r3, r7, #4
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
 8006390:	609a      	str	r2, [r3, #8]
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	611a      	str	r2, [r3, #16]
 8006396:	615a      	str	r2, [r3, #20]
 8006398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800639a:	4b32      	ldr	r3, [pc, #200]	; (8006464 <MX_TIM3_Init+0xec>)
 800639c:	4a32      	ldr	r2, [pc, #200]	; (8006468 <MX_TIM3_Init+0xf0>)
 800639e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80063a0:	4b30      	ldr	r3, [pc, #192]	; (8006464 <MX_TIM3_Init+0xec>)
 80063a2:	2207      	movs	r2, #7
 80063a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063a6:	4b2f      	ldr	r3, [pc, #188]	; (8006464 <MX_TIM3_Init+0xec>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80063ac:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <MX_TIM3_Init+0xec>)
 80063ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80063b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063b4:	4b2b      	ldr	r3, [pc, #172]	; (8006464 <MX_TIM3_Init+0xec>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063ba:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <MX_TIM3_Init+0xec>)
 80063bc:	2200      	movs	r2, #0
 80063be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80063c0:	4828      	ldr	r0, [pc, #160]	; (8006464 <MX_TIM3_Init+0xec>)
 80063c2:	f006 fe83 	bl	800d0cc <HAL_TIM_PWM_Init>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80063cc:	f7fb ffaf 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063d0:	2300      	movs	r3, #0
 80063d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80063d8:	f107 0320 	add.w	r3, r7, #32
 80063dc:	4619      	mov	r1, r3
 80063de:	4821      	ldr	r0, [pc, #132]	; (8006464 <MX_TIM3_Init+0xec>)
 80063e0:	f007 fe8a 	bl	800e0f8 <HAL_TIMEx_MasterConfigSynchronization>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80063ea:	f7fb ffa0 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063ee:	2360      	movs	r3, #96	; 0x60
 80063f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	2200      	movs	r2, #0
 8006402:	4619      	mov	r1, r3
 8006404:	4817      	ldr	r0, [pc, #92]	; (8006464 <MX_TIM3_Init+0xec>)
 8006406:	f007 f9b5 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006410:	f7fb ff8d 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006414:	1d3b      	adds	r3, r7, #4
 8006416:	2204      	movs	r2, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4812      	ldr	r0, [pc, #72]	; (8006464 <MX_TIM3_Init+0xec>)
 800641c:	f007 f9aa 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006426:	f7fb ff82 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	2208      	movs	r2, #8
 800642e:	4619      	mov	r1, r3
 8006430:	480c      	ldr	r0, [pc, #48]	; (8006464 <MX_TIM3_Init+0xec>)
 8006432:	f007 f99f 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800643c:	f7fb ff77 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	220c      	movs	r2, #12
 8006444:	4619      	mov	r1, r3
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <MX_TIM3_Init+0xec>)
 8006448:	f007 f994 	bl	800d774 <HAL_TIM_PWM_ConfigChannel>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8006452:	f7fb ff6c 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006456:	4803      	ldr	r0, [pc, #12]	; (8006464 <MX_TIM3_Init+0xec>)
 8006458:	f000 f98c 	bl	8006774 <HAL_TIM_MspPostInit>

}
 800645c:	bf00      	nop
 800645e:	3728      	adds	r7, #40	; 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000e6c 	.word	0x20000e6c
 8006468:	40000400 	.word	0x40000400

0800646c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006472:	f107 030c 	add.w	r3, r7, #12
 8006476:	2224      	movs	r2, #36	; 0x24
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f009 fb17 	bl	800faae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006488:	4b20      	ldr	r3, [pc, #128]	; (800650c <MX_TIM4_Init+0xa0>)
 800648a:	4a21      	ldr	r2, [pc, #132]	; (8006510 <MX_TIM4_Init+0xa4>)
 800648c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800648e:	4b1f      	ldr	r3, [pc, #124]	; (800650c <MX_TIM4_Init+0xa0>)
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006494:	4b1d      	ldr	r3, [pc, #116]	; (800650c <MX_TIM4_Init+0xa0>)
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800649a:	4b1c      	ldr	r3, [pc, #112]	; (800650c <MX_TIM4_Init+0xa0>)
 800649c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <MX_TIM4_Init+0xa0>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064a8:	4b18      	ldr	r3, [pc, #96]	; (800650c <MX_TIM4_Init+0xa0>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064ae:	2303      	movs	r3, #3
 80064b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064b6:	2301      	movs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80064c6:	2301      	movs	r3, #1
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80064d2:	f107 030c 	add.w	r3, r7, #12
 80064d6:	4619      	mov	r1, r3
 80064d8:	480c      	ldr	r0, [pc, #48]	; (800650c <MX_TIM4_Init+0xa0>)
 80064da:	f006 ff0f 	bl	800d2fc <HAL_TIM_Encoder_Init>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80064e4:	f7fb ff23 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064e8:	2300      	movs	r3, #0
 80064ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	4805      	ldr	r0, [pc, #20]	; (800650c <MX_TIM4_Init+0xa0>)
 80064f6:	f007 fdff 	bl	800e0f8 <HAL_TIMEx_MasterConfigSynchronization>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006500:	f7fb ff15 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006504:	bf00      	nop
 8006506:	3730      	adds	r7, #48	; 0x30
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000eb4 	.word	0x20000eb4
 8006510:	40000800 	.word	0x40000800

08006514 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800651a:	463b      	mov	r3, r7
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <MX_TIM6_Init+0x64>)
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <MX_TIM6_Init+0x68>)
 8006526:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8006528:	4b13      	ldr	r3, [pc, #76]	; (8006578 <MX_TIM6_Init+0x64>)
 800652a:	2253      	movs	r2, #83	; 0x53
 800652c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <MX_TIM6_Init+0x64>)
 8006530:	2200      	movs	r2, #0
 8006532:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006534:	4b10      	ldr	r3, [pc, #64]	; (8006578 <MX_TIM6_Init+0x64>)
 8006536:	f240 32e7 	movw	r2, #999	; 0x3e7
 800653a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <MX_TIM6_Init+0x64>)
 800653e:	2200      	movs	r2, #0
 8006540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006542:	480d      	ldr	r0, [pc, #52]	; (8006578 <MX_TIM6_Init+0x64>)
 8006544:	f006 fd02 	bl	800cf4c <HAL_TIM_Base_Init>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800654e:	f7fb feee 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006552:	2300      	movs	r3, #0
 8006554:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800655a:	463b      	mov	r3, r7
 800655c:	4619      	mov	r1, r3
 800655e:	4806      	ldr	r0, [pc, #24]	; (8006578 <MX_TIM6_Init+0x64>)
 8006560:	f007 fdca 	bl	800e0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800656a:	f7fb fee0 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000efc 	.word	0x20000efc
 800657c:	40001000 	.word	0x40001000

08006580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a18      	ldr	r2, [pc, #96]	; (80065f0 <HAL_TIM_Base_MspInit+0x70>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <HAL_TIM_Base_MspInit+0x74>)
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	4a16      	ldr	r2, [pc, #88]	; (80065f4 <HAL_TIM_Base_MspInit+0x74>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6453      	str	r3, [r2, #68]	; 0x44
 80065a2:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <HAL_TIM_Base_MspInit+0x74>)
 80065a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80065ae:	e01a      	b.n	80065e6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <HAL_TIM_Base_MspInit+0x78>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d115      	bne.n	80065e6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <HAL_TIM_Base_MspInit+0x74>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	4a0c      	ldr	r2, [pc, #48]	; (80065f4 <HAL_TIM_Base_MspInit+0x74>)
 80065c4:	f043 0310 	orr.w	r3, r3, #16
 80065c8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <HAL_TIM_Base_MspInit+0x74>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	2036      	movs	r0, #54	; 0x36
 80065dc:	f004 f9cb 	bl	800a976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80065e0:	2036      	movs	r0, #54	; 0x36
 80065e2:	f004 f9e4 	bl	800a9ae <HAL_NVIC_EnableIRQ>
}
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40023800 	.word	0x40023800
 80065f8:	40001000 	.word	0x40001000

080065fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08c      	sub	sp, #48	; 0x30
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006604:	f107 031c 	add.w	r3, r7, #28
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	609a      	str	r2, [r3, #8]
 8006610:	60da      	str	r2, [r3, #12]
 8006612:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661c:	d14b      	bne.n	80066b6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800661e:	2300      	movs	r3, #0
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	4a3e      	ldr	r2, [pc, #248]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	6413      	str	r3, [r2, #64]	; 0x40
 800662e:	4b3c      	ldr	r3, [pc, #240]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	4b38      	ldr	r3, [pc, #224]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	4a37      	ldr	r2, [pc, #220]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6313      	str	r3, [r2, #48]	; 0x30
 800664a:	4b35      	ldr	r3, [pc, #212]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	4b31      	ldr	r3, [pc, #196]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	4a30      	ldr	r2, [pc, #192]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	6313      	str	r3, [r2, #48]	; 0x30
 8006666:	4b2e      	ldr	r3, [pc, #184]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006678:	2302      	movs	r3, #2
 800667a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667c:	2300      	movs	r3, #0
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006680:	2300      	movs	r3, #0
 8006682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006684:	2301      	movs	r3, #1
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006688:	f107 031c 	add.w	r3, r7, #28
 800668c:	4619      	mov	r1, r3
 800668e:	4825      	ldr	r0, [pc, #148]	; (8006724 <HAL_TIM_Encoder_MspInit+0x128>)
 8006690:	f004 fd1c 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006694:	2308      	movs	r3, #8
 8006696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006698:	2302      	movs	r3, #2
 800669a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80066a4:	2301      	movs	r3, #1
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066a8:	f107 031c 	add.w	r3, r7, #28
 80066ac:	4619      	mov	r1, r3
 80066ae:	481e      	ldr	r0, [pc, #120]	; (8006728 <HAL_TIM_Encoder_MspInit+0x12c>)
 80066b0:	f004 fd0c 	bl	800b0cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80066b4:	e030      	b.n	8006718 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIM_Encoder_MspInit+0x130>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d12b      	bne.n	8006718 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	4b16      	ldr	r3, [pc, #88]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 80066ca:	f043 0304 	orr.w	r3, r3, #4
 80066ce:	6413      	str	r3, [r2, #64]	; 0x40
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066dc:	2300      	movs	r3, #0
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	4a0e      	ldr	r2, [pc, #56]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 80066e6:	f043 0302 	orr.w	r3, r3, #2
 80066ea:	6313      	str	r3, [r2, #48]	; 0x30
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <HAL_TIM_Encoder_MspInit+0x124>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066f8:	23c0      	movs	r3, #192	; 0xc0
 80066fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fc:	2302      	movs	r3, #2
 80066fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006704:	2300      	movs	r3, #0
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006708:	2302      	movs	r3, #2
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800670c:	f107 031c 	add.w	r3, r7, #28
 8006710:	4619      	mov	r1, r3
 8006712:	4805      	ldr	r0, [pc, #20]	; (8006728 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006714:	f004 fcda 	bl	800b0cc <HAL_GPIO_Init>
}
 8006718:	bf00      	nop
 800671a:	3730      	adds	r7, #48	; 0x30
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40023800 	.word	0x40023800
 8006724:	40020000 	.word	0x40020000
 8006728:	40020400 	.word	0x40020400
 800672c:	40000800 	.word	0x40000800

08006730 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a0b      	ldr	r2, [pc, #44]	; (800676c <HAL_TIM_PWM_MspInit+0x3c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10d      	bne.n	800675e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <HAL_TIM_PWM_MspInit+0x40>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	4a09      	ldr	r2, [pc, #36]	; (8006770 <HAL_TIM_PWM_MspInit+0x40>)
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	6413      	str	r3, [r2, #64]	; 0x40
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <HAL_TIM_PWM_MspInit+0x40>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40000400 	.word	0x40000400
 8006770:	40023800 	.word	0x40023800

08006774 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	609a      	str	r2, [r3, #8]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a25      	ldr	r2, [pc, #148]	; (8006828 <HAL_TIM_MspPostInit+0xb4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d11f      	bne.n	80067d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	4b24      	ldr	r3, [pc, #144]	; (800682c <HAL_TIM_MspPostInit+0xb8>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	4a23      	ldr	r2, [pc, #140]	; (800682c <HAL_TIM_MspPostInit+0xb8>)
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	6313      	str	r3, [r2, #48]	; 0x30
 80067a6:	4b21      	ldr	r3, [pc, #132]	; (800682c <HAL_TIM_MspPostInit+0xb8>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80067b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80067b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b8:	2302      	movs	r3, #2
 80067ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c0:	2300      	movs	r3, #0
 80067c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80067c4:	2301      	movs	r3, #1
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	4619      	mov	r1, r3
 80067ce:	4818      	ldr	r0, [pc, #96]	; (8006830 <HAL_TIM_MspPostInit+0xbc>)
 80067d0:	f004 fc7c 	bl	800b0cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80067d4:	e023      	b.n	800681e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a16      	ldr	r2, [pc, #88]	; (8006834 <HAL_TIM_MspPostInit+0xc0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d11e      	bne.n	800681e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	4b11      	ldr	r3, [pc, #68]	; (800682c <HAL_TIM_MspPostInit+0xb8>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	4a10      	ldr	r2, [pc, #64]	; (800682c <HAL_TIM_MspPostInit+0xb8>)
 80067ea:	f043 0304 	orr.w	r3, r3, #4
 80067ee:	6313      	str	r3, [r2, #48]	; 0x30
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <HAL_TIM_MspPostInit+0xb8>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80067fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006802:	2302      	movs	r3, #2
 8006804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800680a:	2300      	movs	r3, #0
 800680c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800680e:	2302      	movs	r3, #2
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	4619      	mov	r1, r3
 8006818:	4807      	ldr	r0, [pc, #28]	; (8006838 <HAL_TIM_MspPostInit+0xc4>)
 800681a:	f004 fc57 	bl	800b0cc <HAL_GPIO_Init>
}
 800681e:	bf00      	nop
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40023800 	.word	0x40023800
 8006830:	40020000 	.word	0x40020000
 8006834:	40000400 	.word	0x40000400
 8006838:	40020800 	.word	0x40020800

0800683c <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 8006842:	4b39      	ldr	r3, [pc, #228]	; (8006928 <UI_ShowSensor+0xec>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <UI_ShowSensor+0x16>
 800684e:	2300      	movs	r3, #0
 8006850:	e065      	b.n	800691e <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 8006852:	4b36      	ldr	r3, [pc, #216]	; (800692c <UI_ShowSensor+0xf0>)
 8006854:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <UI_ShowSensor+0xf4>)
 8006858:	7818      	ldrb	r0, [r3, #0]
 800685a:	4b35      	ldr	r3, [pc, #212]	; (8006930 <UI_ShowSensor+0xf4>)
 800685c:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 800685e:	4b34      	ldr	r3, [pc, #208]	; (8006930 <UI_ShowSensor+0xf4>)
 8006860:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 8006862:	3362      	adds	r3, #98	; 0x62
 8006864:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 8006866:	4b32      	ldr	r3, [pc, #200]	; (8006930 <UI_ShowSensor+0xf4>)
 8006868:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 800686a:	330f      	adds	r3, #15
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2401      	movs	r4, #1
 8006870:	9400      	str	r4, [sp, #0]
 8006872:	f7fa ff53 	bl	800171c <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 8006876:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <UI_ShowSensor+0xf8>)
 8006878:	1d3b      	adds	r3, r7, #4
 800687a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800687e:	6018      	str	r0, [r3, #0]
 8006880:	3304      	adds	r3, #4
 8006882:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e03e      	b.n	8006908 <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f1c3 030d 	rsb	r3, r3, #13
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	2b0e      	cmp	r3, #14
 800689c:	d902      	bls.n	80068a4 <UI_ShowSensor+0x68>
 800689e:	230e      	movs	r3, #14
 80068a0:	74fb      	strb	r3, [r7, #19]
 80068a2:	e007      	b.n	80068b4 <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d002      	beq.n	80068b0 <UI_ShowSensor+0x74>
 80068aa:	7cfb      	ldrb	r3, [r7, #19]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d101      	bne.n	80068b4 <UI_ShowSensor+0x78>
 80068b0:	2303      	movs	r3, #3
 80068b2:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 80068b4:	7cfb      	ldrb	r3, [r7, #19]
 80068b6:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	00d2      	lsls	r2, r2, #3
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <UI_ShowSensor+0xf4>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4413      	add	r3, r2
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 80068ce:	4b18      	ldr	r3, [pc, #96]	; (8006930 <UI_ShowSensor+0xf4>)
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	330f      	adds	r3, #15
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fb f8ed 	bl	8001ac4 <DISP_FillRect2>
		DISP_OLEDUpdate(
 80068ea:	7938      	ldrb	r0, [r7, #4]
 80068ec:	4b10      	ldr	r3, [pc, #64]	; (8006930 <UI_ShowSensor+0xf4>)
 80068ee:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 80068f0:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 80068f2:	3306      	adds	r3, #6
 80068f4:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <UI_ShowSensor+0xf4>)
 80068f8:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 80068fa:	330f      	adds	r3, #15
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	f7fb f899 	bl	8001a34 <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	3301      	adds	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b0d      	cmp	r3, #13
 800690c:	ddbd      	ble.n	800688a <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <UI_ShowSensor+0xec>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	4b03      	ldr	r3, [pc, #12]	; (8006928 <UI_ShowSensor+0xec>)
 800691a:	701a      	strb	r2, [r3, #0]
	return 1;
 800691c:	2301      	movs	r3, #1
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	bd90      	pop	{r4, r7, pc}
 8006926:	bf00      	nop
 8006928:	20000cc9 	.word	0x20000cc9
 800692c:	20000b9c 	.word	0x20000b9c
 8006930:	20000290 	.word	0x20000290
 8006934:	08011f98 	.word	0x08011f98

08006938 <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 8006942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006946:	483c      	ldr	r0, [pc, #240]	; (8006a38 <UI_ReadButton+0x100>)
 8006948:	f004 fd5c 	bl	800b404 <HAL_GPIO_ReadPin>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	b25a      	sxtb	r2, r3
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	4313      	orrs	r3, r2
 8006960:	b25b      	sxtb	r3, r3
 8006962:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 8006964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006968:	4833      	ldr	r0, [pc, #204]	; (8006a38 <UI_ReadButton+0x100>)
 800696a:	f004 fd4b 	bl	800b404 <HAL_GPIO_ReadPin>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <UI_ReadButton+0x40>
 8006974:	2302      	movs	r3, #2
 8006976:	e000      	b.n	800697a <UI_ReadButton+0x42>
 8006978:	2300      	movs	r3, #0
 800697a:	b25a      	sxtb	r2, r3
 800697c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006980:	4313      	orrs	r3, r2
 8006982:	b25b      	sxtb	r3, r3
 8006984:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 8006986:	2110      	movs	r1, #16
 8006988:	482c      	ldr	r0, [pc, #176]	; (8006a3c <UI_ReadButton+0x104>)
 800698a:	f004 fd3b 	bl	800b404 <HAL_GPIO_ReadPin>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <UI_ReadButton+0x60>
 8006994:	2304      	movs	r3, #4
 8006996:	e000      	b.n	800699a <UI_ReadButton+0x62>
 8006998:	2300      	movs	r3, #0
 800699a:	b25a      	sxtb	r2, r3
 800699c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b25b      	sxtb	r3, r3
 80069a4:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 80069a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069aa:	4824      	ldr	r0, [pc, #144]	; (8006a3c <UI_ReadButton+0x104>)
 80069ac:	f004 fd2a 	bl	800b404 <HAL_GPIO_ReadPin>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <UI_ReadButton+0x82>
 80069b6:	2308      	movs	r3, #8
 80069b8:	e000      	b.n	80069bc <UI_ReadButton+0x84>
 80069ba:	2300      	movs	r3, #0
 80069bc:	b25a      	sxtb	r2, r3
 80069be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 80069c8:	2120      	movs	r1, #32
 80069ca:	481c      	ldr	r0, [pc, #112]	; (8006a3c <UI_ReadButton+0x104>)
 80069cc:	f004 fd1a 	bl	800b404 <HAL_GPIO_ReadPin>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <UI_ReadButton+0xa2>
 80069d6:	2310      	movs	r3, #16
 80069d8:	e000      	b.n	80069dc <UI_ReadButton+0xa4>
 80069da:	2300      	movs	r3, #0
 80069dc:	b25a      	sxtb	r2, r3
 80069de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 80069e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069ec:	4813      	ldr	r0, [pc, #76]	; (8006a3c <UI_ReadButton+0x104>)
 80069ee:	f004 fd09 	bl	800b404 <HAL_GPIO_ReadPin>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <UI_ReadButton+0xc4>
 80069f8:	2320      	movs	r3, #32
 80069fa:	e000      	b.n	80069fe <UI_ReadButton+0xc6>
 80069fc:	2300      	movs	r3, #0
 80069fe:	b25a      	sxtb	r2, r3
 8006a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b25b      	sxtb	r3, r3
 8006a08:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 8006a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a0e:	480b      	ldr	r0, [pc, #44]	; (8006a3c <UI_ReadButton+0x104>)
 8006a10:	f004 fcf8 	bl	800b404 <HAL_GPIO_ReadPin>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <UI_ReadButton+0xe6>
 8006a1a:	2340      	movs	r3, #64	; 0x40
 8006a1c:	e000      	b.n	8006a20 <UI_ReadButton+0xe8>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	b25a      	sxtb	r2, r3
 8006a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	71fb      	strb	r3, [r7, #7]
	return temp;
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40020800 	.word	0x40020800
 8006a3c:	40020400 	.word	0x40020400

08006a40 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 8006a4a:	4b3a      	ldr	r3, [pc, #232]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a4c:	221b      	movs	r2, #27
 8006a4e:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 8006a50:	4b38      	ldr	r3, [pc, #224]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 8006a56:	4b37      	ldr	r3, [pc, #220]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a58:	227f      	movs	r2, #127	; 0x7f
 8006a5a:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 8006a5c:	4b35      	ldr	r3, [pc, #212]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a5e:	220a      	movs	r2, #10
 8006a60:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 8006a62:	4b34      	ldr	r3, [pc, #208]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a64:	2202      	movs	r2, #2
 8006a66:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 8006a68:	4b32      	ldr	r3, [pc, #200]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	719a      	strb	r2, [r3, #6]

	short_message_white = short_message;
 8006a6e:	4b32      	ldr	r3, [pc, #200]	; (8006b38 <UI_HomeScreenInit+0xf8>)
 8006a70:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <UI_HomeScreenInit+0xf4>)
 8006a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a76:	6018      	str	r0, [r3, #0]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	8019      	strh	r1, [r3, #0]
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	0c0a      	lsrs	r2, r1, #16
 8006a80:	701a      	strb	r2, [r3, #0]
	short_message_white.color = DISP_COLOR_WHITE;
 8006a82:	4b2d      	ldr	r3, [pc, #180]	; (8006b38 <UI_HomeScreenInit+0xf8>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	709a      	strb	r2, [r3, #2]

	home_menu[0].origin_x = 14;
 8006a88:	4b2c      	ldr	r3, [pc, #176]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006a8a:	220e      	movs	r2, #14
 8006a8c:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8006a8e:	4b2b      	ldr	r3, [pc, #172]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006a90:	2226      	movs	r2, #38	; 0x26
 8006a92:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8006a94:	4b29      	ldr	r3, [pc, #164]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 8006a9a:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006a9c:	2228      	movs	r2, #40	; 0x28
 8006a9e:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8006aa0:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8006aa6:	4b25      	ldr	r3, [pc, #148]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006aa8:	220e      	movs	r2, #14
 8006aaa:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8006aac:	4b23      	ldr	r3, [pc, #140]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006aae:	2233      	movs	r2, #51	; 0x33
 8006ab0:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8006ab2:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8006ab8:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006aba:	2228      	movs	r2, #40	; 0x28
 8006abc:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8006abe:	4b1f      	ldr	r3, [pc, #124]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8006ac4:	4b1d      	ldr	r3, [pc, #116]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ac6:	2249      	movs	r2, #73	; 0x49
 8006ac8:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006acc:	2226      	movs	r2, #38	; 0x26
 8006ace:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8006ad6:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ad8:	2228      	movs	r2, #40	; 0x28
 8006ada:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8006adc:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ade:	2202      	movs	r2, #2
 8006ae0:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8006ae2:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006ae4:	2249      	movs	r2, #73	; 0x49
 8006ae6:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8006ae8:	4b14      	ldr	r3, [pc, #80]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006aea:	2233      	movs	r2, #51	; 0x33
 8006aec:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8006af4:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006af6:	2228      	movs	r2, #40	; 0x28
 8006af8:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <UI_HomeScreenInit+0xfc>)
 8006afc:	2202      	movs	r2, #2
 8006afe:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8006b00:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8006b06:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b0e:	227f      	movs	r2, #127	; 0x7f
 8006b10:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b14:	220a      	movs	r2, #10
 8006b16:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8006b18:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b20:	2202      	movs	r2, #2
 8006b22:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <UI_HomeScreenInit+0x100>)
 8006b26:	2202      	movs	r2, #2
 8006b28:	719a      	strb	r2, [r3, #6]
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000f44 	.word	0x20000f44
 8006b38:	20000f4c 	.word	0x20000f4c
 8006b3c:	20000f54 	.word	0x20000f54
 8006b40:	20000f70 	.word	0x20000f70

08006b44 <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08c      	sub	sp, #48	; 0x30
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	460a      	mov	r2, r1
 8006b4e:	71fb      	strb	r3, [r7, #7]
 8006b50:	4613      	mov	r3, r2
 8006b52:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 8006b54:	79bb      	ldrb	r3, [r7, #6]
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <UI_HomeScreenDisplay+0xa0>)
 8006b58:	4413      	add	r3, r2
 8006b5a:	789b      	ldrb	r3, [r3, #2]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	79bb      	ldrb	r3, [r7, #6]
 8006b60:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <UI_HomeScreenDisplay+0xa4>)
 8006b62:	7812      	ldrb	r2, [r2, #0]
 8006b64:	f107 000c 	add.w	r0, r7, #12
 8006b68:	9200      	str	r2, [sp, #0]
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	491f      	ldr	r1, [pc, #124]	; (8006bec <UI_HomeScreenDisplay+0xa8>)
 8006b6e:	f008 ff3b 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	4619      	mov	r1, r3
 8006b78:	481d      	ldr	r0, [pc, #116]	; (8006bf0 <UI_HomeScreenDisplay+0xac>)
 8006b7a:	f7fa fe89 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006b7e:	2300      	movs	r3, #0
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
 8006b82:	e027      	b.n	8006bd4 <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d109      	bne.n	8006ba0 <UI_HomeScreenDisplay+0x5c>
 8006b8c:	4919      	ldr	r1, [pc, #100]	; (8006bf4 <UI_HomeScreenDisplay+0xb0>)
 8006b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b90:	4613      	mov	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	440b      	add	r3, r1
 8006b98:	3302      	adds	r3, #2
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e008      	b.n	8006bb2 <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 8006ba0:	4914      	ldr	r1, [pc, #80]	; (8006bf4 <UI_HomeScreenDisplay+0xb0>)
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	440b      	add	r3, r1
 8006bac:	3302      	adds	r3, #2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8006bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	1a9b      	subs	r3, r3, r2
 8006bba:	4a0e      	ldr	r2, [pc, #56]	; (8006bf4 <UI_HomeScreenDisplay+0xb0>)
 8006bbc:	441a      	add	r2, r3
 8006bbe:	490e      	ldr	r1, [pc, #56]	; (8006bf8 <UI_HomeScreenDisplay+0xb4>)
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fa fe61 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	ddd4      	ble.n	8006b84 <UI_HomeScreenDisplay+0x40>
	}
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	3728      	adds	r7, #40	; 0x28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20000da8 	.word	0x20000da8
 8006be8:	20000cd5 	.word	0x20000cd5
 8006bec:	08011fb8 	.word	0x08011fb8
 8006bf0:	20000f70 	.word	0x20000f70
 8006bf4:	20000f54 	.word	0x20000f54
 8006bf8:	20000294 	.word	0x20000294

08006bfc <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8006c02:	4b60      	ldr	r3, [pc, #384]	; (8006d84 <UI_HomeScreen+0x188>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8006c08:	4b5f      	ldr	r3, [pc, #380]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	79fa      	ldrb	r2, [r7, #7]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff ff97 	bl	8006b44 <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8006c16:	f003 f861 	bl	8009cdc <HAL_GetTick>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4a5b      	ldr	r2, [pc, #364]	; (8006d8c <UI_HomeScreen+0x190>)
 8006c1e:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 8006c20:	f7ff fe0c 	bl	800683c <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006c24:	f003 f85a 	bl	8009cdc <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4b58      	ldr	r3, [pc, #352]	; (8006d8c <UI_HomeScreen+0x190>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b45      	cmp	r3, #69	; 0x45
 8006c32:	f240 8097 	bls.w	8006d64 <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 8006c36:	f7ff fe7f 	bl	8006938 <UI_ReadButton>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4b54      	ldr	r3, [pc, #336]	; (8006d90 <UI_HomeScreen+0x194>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	f000 8090 	beq.w	8006d68 <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 8006c48:	f7ff fe76 	bl	8006938 <UI_ReadButton>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4b4f      	ldr	r3, [pc, #316]	; (8006d90 <UI_HomeScreen+0x194>)
 8006c52:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 8006c54:	4b4e      	ldr	r3, [pc, #312]	; (8006d90 <UI_HomeScreen+0x194>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 8006c60:	4b49      	ldr	r3, [pc, #292]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0cf      	beq.n	8006c08 <UI_HomeScreen+0xc>
 8006c68:	4b47      	ldr	r3, [pc, #284]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	4b45      	ldr	r3, [pc, #276]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c72:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006c74:	e7c8      	b.n	8006c08 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 8006c76:	4b46      	ldr	r3, [pc, #280]	; (8006d90 <UI_HomeScreen+0x194>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00c      	beq.n	8006c9c <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006c82:	4b41      	ldr	r3, [pc, #260]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d806      	bhi.n	8006c98 <UI_HomeScreen+0x9c>
 8006c8a:	4b3f      	ldr	r3, [pc, #252]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b3d      	ldr	r3, [pc, #244]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006c94:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006c96:	e7b7      	b.n	8006c08 <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e06f      	b.n	8006d7c <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8006c9c:	4b3c      	ldr	r3, [pc, #240]	; (8006d90 <UI_HomeScreen+0x194>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	2b12      	cmp	r3, #18
 8006cac:	d803      	bhi.n	8006cb6 <UI_HomeScreen+0xba>
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	71fb      	strb	r3, [r7, #7]
 8006cb4:	e7a8      	b.n	8006c08 <UI_HomeScreen+0xc>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8006cba:	e7a5      	b.n	8006c08 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 8006cbc:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <UI_HomeScreen+0x194>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <UI_HomeScreen+0xda>
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	71fb      	strb	r3, [r7, #7]
 8006cd4:	e798      	b.n	8006c08 <UI_HomeScreen+0xc>
 8006cd6:	2313      	movs	r3, #19
 8006cd8:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 8006cda:	e795      	b.n	8006c08 <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 8006cdc:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <UI_HomeScreen+0x194>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <UI_HomeScreen+0xf4>
			num_menu = 0;
 8006ce8:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006cee:	e78b      	b.n	8006c08 <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 8006cf0:	4b25      	ldr	r3, [pc, #148]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d831      	bhi.n	8006d5c <UI_HomeScreen+0x160>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UI_HomeScreen+0x104>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d27 	.word	0x08006d27
 8006d08:	08006d3d 	.word	0x08006d3d
 8006d0c:	08006d4d 	.word	0x08006d4d
		case 0:
			if(bt & SW_OK_PRESS) {
 8006d10:	4b1f      	ldr	r3, [pc, #124]	; (8006d90 <UI_HomeScreen+0x194>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d027      	beq.n	8006d6c <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 8006d1c:	4a19      	ldr	r2, [pc, #100]	; (8006d84 <UI_HomeScreen+0x188>)
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8006d22:	2304      	movs	r3, #4
 8006d24:	e02a      	b.n	8006d7c <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8006d26:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <UI_HomeScreen+0x194>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01e      	beq.n	8006d70 <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 8006d32:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <UI_HomeScreen+0x188>)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 8006d38:	2305      	movs	r3, #5
 8006d3a:	e01f      	b.n	8006d7c <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <UI_HomeScreen+0x194>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 8006d48:	2306      	movs	r3, #6
 8006d4a:	e017      	b.n	8006d7c <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8006d4c:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <UI_HomeScreen+0x194>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00f      	beq.n	8006d78 <UI_HomeScreen+0x17c>
				return UI_SET;
 8006d58:	2307      	movs	r3, #7
 8006d5a:	e00f      	b.n	8006d7c <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <UI_HomeScreen+0x18c>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	e75d      	b.n	8006c20 <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006d64:	bf00      	nop
 8006d66:	e75b      	b.n	8006c20 <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 8006d68:	bf00      	nop
 8006d6a:	e759      	b.n	8006c20 <UI_HomeScreen+0x24>
			break;
 8006d6c:	bf00      	nop
 8006d6e:	e757      	b.n	8006c20 <UI_HomeScreen+0x24>
			break;
 8006d70:	bf00      	nop
 8006d72:	e755      	b.n	8006c20 <UI_HomeScreen+0x24>
			break;
 8006d74:	bf00      	nop
 8006d76:	e753      	b.n	8006c20 <UI_HomeScreen+0x24>
			break;
 8006d78:	bf00      	nop
	while(1) {
 8006d7a:	e751      	b.n	8006c20 <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000cd8 	.word	0x20000cd8
 8006d88:	20001027 	.word	0x20001027
 8006d8c:	20001028 	.word	0x20001028
 8006d90:	2000102c 	.word	0x2000102c

08006d94 <UI_MirroringPlan>:



void UI_MirroringPlan() {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
	for(int i=0; i<plan.num_action; i++) {
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e032      	b.n	8006e06 <UI_MirroringPlan+0x72>
		Action_typedef temp;
		temp = GetActionOther(num_plan, i);
 8006da0:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <UI_MirroringPlan+0x88>)
 8006da2:	7819      	ldrb	r1, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	463b      	mov	r3, r7
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fe82 	bl	8005ab4 <GetActionOther>
		switch(temp.act) {
 8006db0:	783b      	ldrb	r3, [r7, #0]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	d822      	bhi.n	8006dfe <UI_MirroringPlan+0x6a>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UI_MirroringPlan+0x2c>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006dd9 	.word	0x08006dd9
 8006dc4:	08006ddf 	.word	0x08006ddf
 8006dc8:	08006dff 	.word	0x08006dff
 8006dcc:	08006dff 	.word	0x08006dff
 8006dd0:	08006de5 	.word	0x08006de5
 8006dd4:	08006deb 	.word	0x08006deb
		case 1: temp.act = 2; break;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	703b      	strb	r3, [r7, #0]
 8006ddc:	e008      	b.n	8006df0 <UI_MirroringPlan+0x5c>
		case 2: temp.act = 1; break;
 8006dde:	2301      	movs	r3, #1
 8006de0:	703b      	strb	r3, [r7, #0]
 8006de2:	e005      	b.n	8006df0 <UI_MirroringPlan+0x5c>
		case 5: temp.act = 6; break;
 8006de4:	2306      	movs	r3, #6
 8006de6:	703b      	strb	r3, [r7, #0]
 8006de8:	e002      	b.n	8006df0 <UI_MirroringPlan+0x5c>
		case 6: temp.act = 5; break;
 8006dea:	2305      	movs	r3, #5
 8006dec:	703b      	strb	r3, [r7, #0]
 8006dee:	bf00      	nop
		default: continue;
		}
		SetActionOther(temp, i);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	463a      	mov	r2, r7
 8006df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006df8:	f7fe fe9c 	bl	8005b34 <SetActionOther>
 8006dfc:	e000      	b.n	8006e00 <UI_MirroringPlan+0x6c>
		default: continue;
 8006dfe:	bf00      	nop
	for(int i=0; i<plan.num_action; i++) {
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <UI_MirroringPlan+0x8c>)
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	dbc6      	blt.n	8006da0 <UI_MirroringPlan+0xc>
	}
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000cd5 	.word	0x20000cd5
 8006e20:	20000da8 	.word	0x20000da8

08006e24 <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 8006e2a:	4b42      	ldr	r3, [pc, #264]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 8006e30:	4b40      	ldr	r3, [pc, #256]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e32:	220d      	movs	r2, #13
 8006e34:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 8006e36:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e38:	2278      	movs	r2, #120	; 0x78
 8006e3a:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 8006e3c:	4b3d      	ldr	r3, [pc, #244]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e3e:	220b      	movs	r2, #11
 8006e40:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 8006e42:	4b3c      	ldr	r3, [pc, #240]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 8006e48:	4b3a      	ldr	r3, [pc, #232]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8006e4e:	2301      	movs	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	e050      	b.n	8006ef6 <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 8006e54:	4b37      	ldr	r3, [pc, #220]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e56:	7818      	ldrb	r0, [r3, #0]
 8006e58:	4936      	ldr	r1, [pc, #216]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	440b      	add	r3, r1
 8006e64:	4602      	mov	r2, r0
 8006e66:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	4931      	ldr	r1, [pc, #196]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e6e:	4613      	mov	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	440b      	add	r3, r1
 8006e76:	3301      	adds	r3, #1
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e7c:	791b      	ldrb	r3, [r3, #4]
 8006e7e:	4413      	add	r3, r2
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	3302      	adds	r3, #2
 8006e84:	b2d8      	uxtb	r0, r3
 8006e86:	492b      	ldr	r1, [pc, #172]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	440b      	add	r3, r1
 8006e92:	3301      	adds	r3, #1
 8006e94:	4602      	mov	r2, r0
 8006e96:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 8006e98:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e9a:	78d8      	ldrb	r0, [r3, #3]
 8006e9c:	4925      	ldr	r1, [pc, #148]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	4602      	mov	r2, r0
 8006eac:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8006eae:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006eb0:	7918      	ldrb	r0, [r3, #4]
 8006eb2:	4920      	ldr	r1, [pc, #128]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 8006ec4:	4b1b      	ldr	r3, [pc, #108]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006ec6:	7898      	ldrb	r0, [r3, #2]
 8006ec8:	491a      	ldr	r1, [pc, #104]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 8006eda:	4b16      	ldr	r3, [pc, #88]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006edc:	7998      	ldrb	r0, [r3, #6]
 8006ede:	4915      	ldr	r1, [pc, #84]	; (8006f34 <UI_SettingDisplayInit+0x110>)
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	440b      	add	r3, r1
 8006eea:	3306      	adds	r3, #6
 8006eec:	4602      	mov	r2, r0
 8006eee:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	ddab      	ble.n	8006e54 <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 8006efc:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006f0a:	227f      	movs	r2, #127	; 0x7f
 8006f0c:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006f10:	220a      	movs	r2, #10
 8006f12:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <UI_SettingDisplayInit+0x114>)
 8006f22:	2202      	movs	r2, #2
 8006f24:	719a      	strb	r2, [r3, #6]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000f78 	.word	0x20000f78
 8006f38:	20000f94 	.word	0x20000f94

08006f3c <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	4a29      	ldr	r2, [pc, #164]	; (8006ff0 <UI_SettingDisplay+0xb4>)
 8006f4a:	f992 2000 	ldrsb.w	r2, [r2]
 8006f4e:	1a9b      	subs	r3, r3, r2
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	dd06      	ble.n	8006f62 <UI_SettingDisplay+0x26>
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	3b03      	subs	r3, #3
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	b25a      	sxtb	r2, r3
 8006f5c:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <UI_SettingDisplay+0xb4>)
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e009      	b.n	8006f76 <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <UI_SettingDisplay+0xb4>)
 8006f66:	f992 2000 	ldrsb.w	r2, [r2]
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	da03      	bge.n	8006f76 <UI_SettingDisplay+0x3a>
 8006f6e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006f72:	4b1f      	ldr	r3, [pc, #124]	; (8006ff0 <UI_SettingDisplay+0xb4>)
 8006f74:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e031      	b.n	8006fe0 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <UI_SettingDisplay+0xb4>)
 8006f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8006f82:	461a      	mov	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	441a      	add	r2, r3
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d109      	bne.n	8006fa2 <UI_SettingDisplay+0x66>
 8006f8e:	4919      	ldr	r1, [pc, #100]	; (8006ff4 <UI_SettingDisplay+0xb8>)
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4613      	mov	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	440b      	add	r3, r1
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e008      	b.n	8006fb4 <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8006fa2:	4914      	ldr	r1, [pc, #80]	; (8006ff4 <UI_SettingDisplay+0xb8>)
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	440b      	add	r3, r1
 8006fae:	3302      	adds	r3, #2
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <UI_SettingDisplay+0xb8>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <UI_SettingDisplay+0xb4>)
 8006fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	440b      	add	r3, r1
 8006fcc:	490a      	ldr	r1, [pc, #40]	; (8006ff8 <UI_SettingDisplay+0xbc>)
 8006fce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7fa fc5b 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	ddca      	ble.n	8006f7c <UI_SettingDisplay+0x40>
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	2000102d 	.word	0x2000102d
 8006ff4:	20000f78 	.word	0x20000f78
 8006ff8:	200002a4 	.word	0x200002a4

08006ffc <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 8007006:	4964      	ldr	r1, [pc, #400]	; (8007198 <UI_Setting+0x19c>)
 8007008:	4864      	ldr	r0, [pc, #400]	; (800719c <UI_Setting+0x1a0>)
 800700a:	f7fa fc41 	bl	8001890 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 800700e:	4b64      	ldr	r3, [pc, #400]	; (80071a0 <UI_Setting+0x1a4>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ff92 	bl	8006f3c <UI_SettingDisplay>
	tick = HAL_GetTick();
 8007018:	f002 fe60 	bl	8009cdc <HAL_GetTick>
 800701c:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800701e:	f002 fe5d 	bl	8009cdc <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b45      	cmp	r3, #69	; 0x45
 800702a:	f240 80a0 	bls.w	800716e <UI_Setting+0x172>
		if(bt == UI_ReadButton()) continue;
 800702e:	f7ff fc83 	bl	8006938 <UI_ReadButton>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	4293      	cmp	r3, r2
 800703a:	f000 809a 	beq.w	8007172 <UI_Setting+0x176>
		bt = UI_ReadButton();
 800703e:	f7ff fc7b 	bl	8006938 <UI_ReadButton>
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00e      	beq.n	800706e <UI_Setting+0x72>
			if(num_menu==7) num_menu = 0; else num_menu++;
 8007050:	4b53      	ldr	r3, [pc, #332]	; (80071a0 <UI_Setting+0x1a4>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b07      	cmp	r3, #7
 8007056:	d103      	bne.n	8007060 <UI_Setting+0x64>
 8007058:	4b51      	ldr	r3, [pc, #324]	; (80071a0 <UI_Setting+0x1a4>)
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e7d6      	b.n	800700e <UI_Setting+0x12>
 8007060:	4b4f      	ldr	r3, [pc, #316]	; (80071a0 <UI_Setting+0x1a4>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	b2da      	uxtb	r2, r3
 8007068:	4b4d      	ldr	r3, [pc, #308]	; (80071a0 <UI_Setting+0x1a4>)
 800706a:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 800706c:	e7cf      	b.n	800700e <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00e      	beq.n	8007096 <UI_Setting+0x9a>
			if(num_menu==0) num_menu = 7; else num_menu--;
 8007078:	4b49      	ldr	r3, [pc, #292]	; (80071a0 <UI_Setting+0x1a4>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <UI_Setting+0x8c>
 8007080:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <UI_Setting+0x1a4>)
 8007082:	2207      	movs	r2, #7
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	e7c2      	b.n	800700e <UI_Setting+0x12>
 8007088:	4b45      	ldr	r3, [pc, #276]	; (80071a0 <UI_Setting+0x1a4>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	3b01      	subs	r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	4b43      	ldr	r3, [pc, #268]	; (80071a0 <UI_Setting+0x1a4>)
 8007092:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8007094:	e7bb      	b.n	800700e <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 0348 	and.w	r3, r3, #72	; 0x48
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <UI_Setting+0xae>
			num_menu = 0;
 80070a0:	4b3f      	ldr	r3, [pc, #252]	; (80071a0 <UI_Setting+0x1a4>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 80070a6:	2302      	movs	r3, #2
 80070a8:	e071      	b.n	800718e <UI_Setting+0x192>
		}
		switch(num_menu) {
 80070aa:	4b3d      	ldr	r3, [pc, #244]	; (80071a0 <UI_Setting+0x1a4>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d8b5      	bhi.n	800701e <UI_Setting+0x22>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <UI_Setting+0xbc>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070d1 	.word	0x080070d1
 80070bc:	080070df 	.word	0x080070df
 80070c0:	080070ed 	.word	0x080070ed
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007161 	.word	0x08007161
		case 0:
			if(bt & SW_OK_PRESS) {
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04d      	beq.n	8007176 <UI_Setting+0x17a>
				return UI_SET_ADC;
 80070da:	2308      	movs	r3, #8
 80070dc:	e057      	b.n	800718e <UI_Setting+0x192>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d048      	beq.n	800717a <UI_Setting+0x17e>
				return UI_SET_CALIB;
 80070e8:	2309      	movs	r3, #9
 80070ea:	e050      	b.n	800718e <UI_Setting+0x192>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d043      	beq.n	800717e <UI_Setting+0x182>
				return UI_SET_CP;
 80070f6:	230a      	movs	r3, #10
 80070f8:	e049      	b.n	800718e <UI_Setting+0x192>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d03e      	beq.n	8007182 <UI_Setting+0x186>
				return UI_SET_PID;
 8007104:	230b      	movs	r3, #11
 8007106:	e042      	b.n	800718e <UI_Setting+0x192>
			}
			break;
		case 4:
			if(bt & SW_OK_PRESS) {
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d039      	beq.n	8007186 <UI_Setting+0x18a>
				DISP_DisplayText(&short_message, "Are You Sure?");
 8007112:	4924      	ldr	r1, [pc, #144]	; (80071a4 <UI_Setting+0x1a8>)
 8007114:	4824      	ldr	r0, [pc, #144]	; (80071a8 <UI_Setting+0x1ac>)
 8007116:	f7fa fbbb 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 800711a:	f7ff fc0d 	bl	8006938 <UI_ReadButton>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	4293      	cmp	r3, r2
 8007126:	d019      	beq.n	800715c <UI_Setting+0x160>
					bt = UI_ReadButton();
 8007128:	f7ff fc06 	bl	8006938 <UI_ReadButton>
 800712c:	4603      	mov	r3, r0
 800712e:	71fb      	strb	r3, [r7, #7]
					if(bt & SW_OK_PRESS) {
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <UI_Setting+0x154>
						DISP_DisplayText(&short_message, "Mirroring...");
 800713a:	491c      	ldr	r1, [pc, #112]	; (80071ac <UI_Setting+0x1b0>)
 800713c:	481a      	ldr	r0, [pc, #104]	; (80071a8 <UI_Setting+0x1ac>)
 800713e:	f7fa fba7 	bl	8001890 <DISP_DisplayText>
						UI_MirroringPlan();
 8007142:	f7ff fe27 	bl	8006d94 <UI_MirroringPlan>
						DISP_DisplayText(&short_message, "Mirroring Done!");
 8007146:	491a      	ldr	r1, [pc, #104]	; (80071b0 <UI_Setting+0x1b4>)
 8007148:	4817      	ldr	r0, [pc, #92]	; (80071a8 <UI_Setting+0x1ac>)
 800714a:	f7fa fba1 	bl	8001890 <DISP_DisplayText>
						goto ui_setting;
 800714e:	e75e      	b.n	800700e <UI_Setting+0x12>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0df      	beq.n	800711a <UI_Setting+0x11e>
						goto ui_setting;
 800715a:	e758      	b.n	800700e <UI_Setting+0x12>
					if(bt == UI_ReadButton()) continue;
 800715c:	bf00      	nop
 800715e:	e7dc      	b.n	800711a <UI_Setting+0x11e>
					}
				}
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00f      	beq.n	800718a <UI_Setting+0x18e>
				return UI_SET_MEM;
 800716a:	230d      	movs	r3, #13
 800716c:	e00f      	b.n	800718e <UI_Setting+0x192>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800716e:	bf00      	nop
 8007170:	e755      	b.n	800701e <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 8007172:	bf00      	nop
 8007174:	e753      	b.n	800701e <UI_Setting+0x22>
			break;
 8007176:	bf00      	nop
 8007178:	e751      	b.n	800701e <UI_Setting+0x22>
			break;
 800717a:	bf00      	nop
 800717c:	e74f      	b.n	800701e <UI_Setting+0x22>
			break;
 800717e:	bf00      	nop
 8007180:	e74d      	b.n	800701e <UI_Setting+0x22>
			break;
 8007182:	bf00      	nop
 8007184:	e74b      	b.n	800701e <UI_Setting+0x22>
			break;
 8007186:	bf00      	nop
 8007188:	e749      	b.n	800701e <UI_Setting+0x22>
			}
			break;
 800718a:	bf00      	nop
 800718c:	e747      	b.n	800701e <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	08012038 	.word	0x08012038
 800719c:	20000f70 	.word	0x20000f70
 80071a0:	2000102e 	.word	0x2000102e
 80071a4:	08012040 	.word	0x08012040
 80071a8:	20000f44 	.word	0x20000f44
 80071ac:	08012050 	.word	0x08012050
 80071b0:	08012060 	.word	0x08012060

080071b4 <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 80071ba:	4b49      	ldr	r3, [pc, #292]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071bc:	2206      	movs	r2, #6
 80071be:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 80071c0:	4b47      	ldr	r3, [pc, #284]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071c2:	2210      	movs	r2, #16
 80071c4:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 80071c6:	4b46      	ldr	r3, [pc, #280]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071c8:	2236      	movs	r2, #54	; 0x36
 80071ca:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 80071cc:	4b44      	ldr	r3, [pc, #272]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071ce:	220b      	movs	r2, #11
 80071d0:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 80071d2:	4b43      	ldr	r3, [pc, #268]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 80071d8:	4b41      	ldr	r3, [pc, #260]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071da:	2202      	movs	r2, #2
 80071dc:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 80071de:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 80071e0:	4a3f      	ldr	r2, [pc, #252]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 80071e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071e6:	6018      	str	r0, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	8019      	strh	r1, [r3, #0]
 80071ec:	3302      	adds	r3, #2
 80071ee:	0c0a      	lsrs	r2, r1, #16
 80071f0:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 80071f2:	4b3c      	ldr	r3, [pc, #240]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 80071f4:	223e      	movs	r2, #62	; 0x3e
 80071f6:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 80071f8:	4b3a      	ldr	r3, [pc, #232]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 80071fa:	223a      	movs	r2, #58	; 0x3a
 80071fc:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 80071fe:	4b39      	ldr	r3, [pc, #228]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 8007200:	2202      	movs	r2, #2
 8007202:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 8007204:	2301      	movs	r3, #1
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	e04c      	b.n	80072a4 <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 800720a:	4935      	ldr	r1, [pc, #212]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	440b      	add	r3, r1
 8007216:	4a32      	ldr	r2, [pc, #200]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 8007218:	6810      	ldr	r0, [r2, #0]
 800721a:	6018      	str	r0, [r3, #0]
 800721c:	8891      	ldrh	r1, [r2, #4]
 800721e:	7992      	ldrb	r2, [r2, #6]
 8007220:	8099      	strh	r1, [r3, #4]
 8007222:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	492d      	ldr	r1, [pc, #180]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	440b      	add	r3, r1
 8007232:	3301      	adds	r3, #1
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	4b2a      	ldr	r3, [pc, #168]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 8007238:	791b      	ldrb	r3, [r3, #4]
 800723a:	4413      	add	r3, r2
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3301      	adds	r3, #1
 8007240:	b2d8      	uxtb	r0, r3
 8007242:	4927      	ldr	r1, [pc, #156]	; (80072e0 <UI_PlanSetDisplayInit+0x12c>)
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	440b      	add	r3, r1
 800724e:	3301      	adds	r3, #1
 8007250:	4602      	mov	r2, r0
 8007252:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 8007254:	4923      	ldr	r1, [pc, #140]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	1a9b      	subs	r3, r3, r2
 800725e:	440b      	add	r3, r1
 8007260:	4a20      	ldr	r2, [pc, #128]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 8007262:	6810      	ldr	r0, [r2, #0]
 8007264:	6018      	str	r0, [r3, #0]
 8007266:	8891      	ldrh	r1, [r2, #4]
 8007268:	7992      	ldrb	r2, [r2, #6]
 800726a:	8099      	strh	r1, [r3, #4]
 800726c:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	1e5a      	subs	r2, r3, #1
 8007272:	491c      	ldr	r1, [pc, #112]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 8007274:	4613      	mov	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	1a9b      	subs	r3, r3, r2
 800727a:	440b      	add	r3, r1
 800727c:	3301      	adds	r3, #1
 800727e:	781a      	ldrb	r2, [r3, #0]
 8007280:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 8007282:	791b      	ldrb	r3, [r3, #4]
 8007284:	4413      	add	r3, r2
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3301      	adds	r3, #1
 800728a:	b2d8      	uxtb	r0, r3
 800728c:	4915      	ldr	r1, [pc, #84]	; (80072e4 <UI_PlanSetDisplayInit+0x130>)
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	440b      	add	r3, r1
 8007298:	3301      	adds	r3, #1
 800729a:	4602      	mov	r2, r0
 800729c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3301      	adds	r3, #1
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	ddaf      	ble.n	800720a <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072b8:	227f      	movs	r2, #127	; 0x7f
 80072ba:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072be:	220d      	movs	r2, #13
 80072c0:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <UI_PlanSetDisplayInit+0x134>)
 80072d0:	2202      	movs	r2, #2
 80072d2:	719a      	strb	r2, [r3, #6]
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000f9c 	.word	0x20000f9c
 80072e4:	20000fb8 	.word	0x20000fb8
 80072e8:	20000fd4 	.word	0x20000fd4

080072ec <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08c      	sub	sp, #48	; 0x30
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	4603      	mov	r3, r0
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	71fb      	strb	r3, [r7, #7]
 80072f8:	4613      	mov	r3, r2
 80072fa:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 80072fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	bf0c      	ite	eq
 8007306:	2301      	moveq	r3, #1
 8007308:	2300      	movne	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 8007310:	79ba      	ldrb	r2, [r7, #6]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4619      	mov	r1, r3
 8007318:	4bba      	ldr	r3, [pc, #744]	; (8007604 <UI_PlanSetDisplay+0x318>)
 800731a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800731e:	f107 000c 	add.w	r0, r7, #12
 8007322:	49b9      	ldr	r1, [pc, #740]	; (8007608 <UI_PlanSetDisplay+0x31c>)
 8007324:	f008 fb60 	bl	800f9e8 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 8007328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <UI_PlanSetDisplay+0x4c>
 8007330:	4bb6      	ldr	r3, [pc, #728]	; (800760c <UI_PlanSetDisplay+0x320>)
 8007332:	2201      	movs	r2, #1
 8007334:	709a      	strb	r2, [r3, #2]
 8007336:	e002      	b.n	800733e <UI_PlanSetDisplay+0x52>
 8007338:	4bb4      	ldr	r3, [pc, #720]	; (800760c <UI_PlanSetDisplay+0x320>)
 800733a:	2200      	movs	r2, #0
 800733c:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	4619      	mov	r1, r3
 8007344:	48b1      	ldr	r0, [pc, #708]	; (800760c <UI_PlanSetDisplay+0x320>)
 8007346:	f7fa faa3 	bl	8001890 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 800734a:	2300      	movs	r3, #0
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	230e      	movs	r3, #14
 8007350:	227f      	movs	r2, #127	; 0x7f
 8007352:	210e      	movs	r1, #14
 8007354:	2000      	movs	r0, #0
 8007356:	f7fa f907 	bl	8001568 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 800735a:	230d      	movs	r3, #13
 800735c:	227f      	movs	r2, #127	; 0x7f
 800735e:	210d      	movs	r1, #13
 8007360:	2000      	movs	r0, #0
 8007362:	f7fa fb67 	bl	8001a34 <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 8007366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d101      	bne.n	8007374 <UI_PlanSetDisplay+0x88>
 8007370:	2300      	movs	r3, #0
 8007372:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 8007374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007378:	4aa5      	ldr	r2, [pc, #660]	; (8007610 <UI_PlanSetDisplay+0x324>)
 800737a:	f992 2000 	ldrsb.w	r2, [r2]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	2b03      	cmp	r3, #3
 8007382:	dd06      	ble.n	8007392 <UI_PlanSetDisplay+0xa6>
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	3b03      	subs	r3, #3
 8007388:	b2db      	uxtb	r3, r3
 800738a:	b25a      	sxtb	r2, r3
 800738c:	4ba0      	ldr	r3, [pc, #640]	; (8007610 <UI_PlanSetDisplay+0x324>)
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e009      	b.n	80073a6 <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 8007392:	4b9f      	ldr	r3, [pc, #636]	; (8007610 <UI_PlanSetDisplay+0x324>)
 8007394:	f993 3000 	ldrsb.w	r3, [r3]
 8007398:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800739c:	429a      	cmp	r2, r3
 800739e:	da02      	bge.n	80073a6 <UI_PlanSetDisplay+0xba>
 80073a0:	4a9b      	ldr	r2, [pc, #620]	; (8007610 <UI_PlanSetDisplay+0x324>)
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	e23d      	b.n	8007828 <UI_PlanSetDisplay+0x53c>
		if(i + first_list == num && !temp) {
 80073ac:	4b98      	ldr	r3, [pc, #608]	; (8007610 <UI_PlanSetDisplay+0x324>)
 80073ae:	f993 3000 	ldrsb.w	r3, [r3]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	441a      	add	r2, r3
 80073b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d116      	bne.n	80073ee <UI_PlanSetDisplay+0x102>
 80073c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d112      	bne.n	80073ee <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 80073c8:	4992      	ldr	r1, [pc, #584]	; (8007614 <UI_PlanSetDisplay+0x328>)
 80073ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	440b      	add	r3, r1
 80073d4:	3302      	adds	r3, #2
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 80073da:	498f      	ldr	r1, [pc, #572]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	440b      	add	r3, r1
 80073e6:	3302      	adds	r3, #2
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e011      	b.n	8007412 <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 80073ee:	4989      	ldr	r1, [pc, #548]	; (8007614 <UI_PlanSetDisplay+0x328>)
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	4613      	mov	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	440b      	add	r3, r1
 80073fa:	3302      	adds	r3, #2
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 8007400:	4985      	ldr	r1, [pc, #532]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 8007402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007404:	4613      	mov	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	440b      	add	r3, r1
 800740c:	3302      	adds	r3, #2
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 8007412:	4b7f      	ldr	r3, [pc, #508]	; (8007610 <UI_PlanSetDisplay+0x324>)
 8007414:	f993 3000 	ldrsb.w	r3, [r3]
 8007418:	461a      	mov	r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	4413      	add	r3, r2
 800741e:	2b0c      	cmp	r3, #12
 8007420:	f200 81ff 	bhi.w	8007822 <UI_PlanSetDisplay+0x536>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UI_PlanSetDisplay+0x140>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007461 	.word	0x08007461
 8007430:	080074a1 	.word	0x080074a1
 8007434:	080074d7 	.word	0x080074d7
 8007438:	08007541 	.word	0x08007541
 800743c:	08007581 	.word	0x08007581
 8007440:	080075c3 	.word	0x080075c3
 8007444:	08007641 	.word	0x08007641
 8007448:	08007681 	.word	0x08007681
 800744c:	080076c1 	.word	0x080076c1
 8007450:	08007701 	.word	0x08007701
 8007454:	0800775f 	.word	0x0800775f
 8007458:	080077cd 	.word	0x080077cd
 800745c:	080077f7 	.word	0x080077f7
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	4613      	mov	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	4a6a      	ldr	r2, [pc, #424]	; (8007614 <UI_PlanSetDisplay+0x328>)
 800746a:	4413      	add	r3, r2
 800746c:	496b      	ldr	r1, [pc, #428]	; (800761c <UI_PlanSetDisplay+0x330>)
 800746e:	4618      	mov	r0, r3
 8007470:	f7fa fa0e 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	461a      	mov	r2, r3
 800747a:	f107 030c 	add.w	r3, r7, #12
 800747e:	4968      	ldr	r1, [pc, #416]	; (8007620 <UI_PlanSetDisplay+0x334>)
 8007480:	4618      	mov	r0, r3
 8007482:	f008 fab1 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007488:	4613      	mov	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	4a62      	ldr	r2, [pc, #392]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 8007490:	4413      	add	r3, r2
 8007492:	f107 020c 	add.w	r2, r7, #12
 8007496:	4611      	mov	r1, r2
 8007498:	4618      	mov	r0, r3
 800749a:	f7fa f9f9 	bl	8001890 <DISP_DisplayText>
			break;
 800749e:	e1c0      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 80074a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a2:	4613      	mov	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	4a5a      	ldr	r2, [pc, #360]	; (8007614 <UI_PlanSetDisplay+0x328>)
 80074aa:	4413      	add	r3, r2
 80074ac:	495d      	ldr	r1, [pc, #372]	; (8007624 <UI_PlanSetDisplay+0x338>)
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fa f9ee 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 80074b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	4a56      	ldr	r2, [pc, #344]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 80074be:	441a      	add	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	789b      	ldrb	r3, [r3, #2]
 80074c4:	4619      	mov	r1, r3
 80074c6:	4b58      	ldr	r3, [pc, #352]	; (8007628 <UI_PlanSetDisplay+0x33c>)
 80074c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7fa f9de 	bl	8001890 <DISP_DisplayText>
			break;
 80074d4:	e1a5      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 2:
			if(plan->act != PLAN_JUMP) {
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b0b      	cmp	r3, #11
 80074dc:	d010      	beq.n	8007500 <UI_PlanSetDisplay+0x214>
				DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 80074de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e0:	4613      	mov	r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	4a4b      	ldr	r2, [pc, #300]	; (8007614 <UI_PlanSetDisplay+0x328>)
 80074e8:	441a      	add	r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	789b      	ldrb	r3, [r3, #2]
 80074ee:	4619      	mov	r1, r3
 80074f0:	4b4e      	ldr	r3, [pc, #312]	; (800762c <UI_PlanSetDisplay+0x340>)
 80074f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7fa f9c9 	bl	8001890 <DISP_DisplayText>
 80074fe:	e009      	b.n	8007514 <UI_PlanSetDisplay+0x228>
			}
			else {
				DISP_DisplayText(&planset_list_name[i], "Index");
 8007500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007502:	4613      	mov	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	4a42      	ldr	r2, [pc, #264]	; (8007614 <UI_PlanSetDisplay+0x328>)
 800750a:	4413      	add	r3, r2
 800750c:	4948      	ldr	r1, [pc, #288]	; (8007630 <UI_PlanSetDisplay+0x344>)
 800750e:	4618      	mov	r0, r3
 8007510:	f7fa f9be 	bl	8001890 <DISP_DisplayText>
			}
			sprintf(buff, "%i", plan->act_value);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	78db      	ldrb	r3, [r3, #3]
 8007518:	461a      	mov	r2, r3
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	4940      	ldr	r1, [pc, #256]	; (8007620 <UI_PlanSetDisplay+0x334>)
 8007520:	4618      	mov	r0, r3
 8007522:	f008 fa61 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	4a3a      	ldr	r2, [pc, #232]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 8007530:	4413      	add	r3, r2
 8007532:	f107 020c 	add.w	r2, r7, #12
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7fa f9a9 	bl	8001890 <DISP_DisplayText>
			break;
 800753e:	e170      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 8007540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	4a32      	ldr	r2, [pc, #200]	; (8007614 <UI_PlanSetDisplay+0x328>)
 800754a:	4413      	add	r3, r2
 800754c:	4939      	ldr	r1, [pc, #228]	; (8007634 <UI_PlanSetDisplay+0x348>)
 800754e:	4618      	mov	r0, r3
 8007550:	f7fa f99e 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	791b      	ldrb	r3, [r3, #4]
 8007558:	461a      	mov	r2, r3
 800755a:	f107 030c 	add.w	r3, r7, #12
 800755e:	4930      	ldr	r1, [pc, #192]	; (8007620 <UI_PlanSetDisplay+0x334>)
 8007560:	4618      	mov	r0, r3
 8007562:	f008 fa41 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	4a2a      	ldr	r2, [pc, #168]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 8007570:	4413      	add	r3, r2
 8007572:	f107 020c 	add.w	r2, r7, #12
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7fa f989 	bl	8001890 <DISP_DisplayText>
			break;
 800757e:	e150      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 8007580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007582:	4613      	mov	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	4a22      	ldr	r2, [pc, #136]	; (8007614 <UI_PlanSetDisplay+0x328>)
 800758a:	4413      	add	r3, r2
 800758c:	492a      	ldr	r1, [pc, #168]	; (8007638 <UI_PlanSetDisplay+0x34c>)
 800758e:	4618      	mov	r0, r3
 8007590:	f7fa f97e 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800759a:	461a      	mov	r2, r3
 800759c:	f107 030c 	add.w	r3, r7, #12
 80075a0:	491f      	ldr	r1, [pc, #124]	; (8007620 <UI_PlanSetDisplay+0x334>)
 80075a2:	4618      	mov	r0, r3
 80075a4:	f008 fa20 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80075a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075aa:	4613      	mov	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	4a19      	ldr	r2, [pc, #100]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 80075b2:	4413      	add	r3, r2
 80075b4:	f107 020c 	add.w	r2, r7, #12
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa f968 	bl	8001890 <DISP_DisplayText>
			break;
 80075c0:	e12f      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 80075c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c4:	4613      	mov	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	4a12      	ldr	r2, [pc, #72]	; (8007614 <UI_PlanSetDisplay+0x328>)
 80075cc:	4413      	add	r3, r2
 80075ce:	491b      	ldr	r1, [pc, #108]	; (800763c <UI_PlanSetDisplay+0x350>)
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fa f95d 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80075dc:	461a      	mov	r2, r3
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	490f      	ldr	r1, [pc, #60]	; (8007620 <UI_PlanSetDisplay+0x334>)
 80075e4:	4618      	mov	r0, r3
 80075e6:	f008 f9ff 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80075ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ec:	4613      	mov	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	4a09      	ldr	r2, [pc, #36]	; (8007618 <UI_PlanSetDisplay+0x32c>)
 80075f4:	4413      	add	r3, r2
 80075f6:	f107 020c 	add.w	r2, r7, #12
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fa f947 	bl	8001890 <DISP_DisplayText>
			break;
 8007602:	e10e      	b.n	8007822 <UI_PlanSetDisplay+0x536>
 8007604:	200002c4 	.word	0x200002c4
 8007608:	0801210c 	.word	0x0801210c
 800760c:	20000fd4 	.word	0x20000fd4
 8007610:	2000102f 	.word	0x2000102f
 8007614:	20000f9c 	.word	0x20000f9c
 8007618:	20000fb8 	.word	0x20000fb8
 800761c:	08012118 	.word	0x08012118
 8007620:	08012120 	.word	0x08012120
 8007624:	08012124 	.word	0x08012124
 8007628:	200002f8 	.word	0x200002f8
 800762c:	20000304 	.word	0x20000304
 8007630:	0801212c 	.word	0x0801212c
 8007634:	08012134 	.word	0x08012134
 8007638:	0801213c 	.word	0x0801213c
 800763c:	08012144 	.word	0x08012144
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	4613      	mov	r3, r2
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	4a7c      	ldr	r2, [pc, #496]	; (800783c <UI_PlanSetDisplay+0x550>)
 800764a:	4413      	add	r3, r2
 800764c:	497c      	ldr	r1, [pc, #496]	; (8007840 <UI_PlanSetDisplay+0x554>)
 800764e:	4618      	mov	r0, r3
 8007650:	f7fa f91e 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	79db      	ldrb	r3, [r3, #7]
 8007658:	461a      	mov	r2, r3
 800765a:	f107 030c 	add.w	r3, r7, #12
 800765e:	4979      	ldr	r1, [pc, #484]	; (8007844 <UI_PlanSetDisplay+0x558>)
 8007660:	4618      	mov	r0, r3
 8007662:	f008 f9c1 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8007666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007668:	4613      	mov	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	4a76      	ldr	r2, [pc, #472]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 8007670:	4413      	add	r3, r2
 8007672:	f107 020c 	add.w	r2, r7, #12
 8007676:	4611      	mov	r1, r2
 8007678:	4618      	mov	r0, r3
 800767a:	f7fa f909 	bl	8001890 <DISP_DisplayText>
			break;
 800767e:	e0d0      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	4613      	mov	r3, r2
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	4a6c      	ldr	r2, [pc, #432]	; (800783c <UI_PlanSetDisplay+0x550>)
 800768a:	4413      	add	r3, r2
 800768c:	496f      	ldr	r1, [pc, #444]	; (800784c <UI_PlanSetDisplay+0x560>)
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa f8fe 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	7a1b      	ldrb	r3, [r3, #8]
 8007698:	461a      	mov	r2, r3
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	4969      	ldr	r1, [pc, #420]	; (8007844 <UI_PlanSetDisplay+0x558>)
 80076a0:	4618      	mov	r0, r3
 80076a2:	f008 f9a1 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80076a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	4a66      	ldr	r2, [pc, #408]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 80076b0:	4413      	add	r3, r2
 80076b2:	f107 020c 	add.w	r2, r7, #12
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fa f8e9 	bl	8001890 <DISP_DisplayText>
			break;
 80076be:	e0b0      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	4a5c      	ldr	r2, [pc, #368]	; (800783c <UI_PlanSetDisplay+0x550>)
 80076ca:	4413      	add	r3, r2
 80076cc:	4960      	ldr	r1, [pc, #384]	; (8007850 <UI_PlanSetDisplay+0x564>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fa f8de 	bl	8001890 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	7a5b      	ldrb	r3, [r3, #9]
 80076d8:	461a      	mov	r2, r3
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	4959      	ldr	r1, [pc, #356]	; (8007844 <UI_PlanSetDisplay+0x558>)
 80076e0:	4618      	mov	r0, r3
 80076e2:	f008 f981 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80076e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	4a56      	ldr	r2, [pc, #344]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 80076f0:	4413      	add	r3, r2
 80076f2:	f107 020c 	add.w	r2, r7, #12
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fa f8c9 	bl	8001890 <DISP_DisplayText>
			break;
 80076fe:	e090      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 8007700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007702:	4613      	mov	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	4a4c      	ldr	r2, [pc, #304]	; (800783c <UI_PlanSetDisplay+0x550>)
 800770a:	4413      	add	r3, r2
 800770c:	4951      	ldr	r1, [pc, #324]	; (8007854 <UI_PlanSetDisplay+0x568>)
 800770e:	4618      	mov	r0, r3
 8007710:	f7fa f8be 	bl	8001890 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	7a9b      	ldrb	r3, [r3, #10]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <UI_PlanSetDisplay+0x446>
				DISP_DisplayText(&planset_list_value[i], "Default");
 800771c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	4a48      	ldr	r2, [pc, #288]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 8007726:	4413      	add	r3, r2
 8007728:	494b      	ldr	r1, [pc, #300]	; (8007858 <UI_PlanSetDisplay+0x56c>)
 800772a:	4618      	mov	r0, r3
 800772c:	f7fa f8b0 	bl	8001890 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 8007730:	e077      	b.n	8007822 <UI_PlanSetDisplay+0x536>
				sprintf(buff, "%i", plan->unit_speed);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	7a9b      	ldrb	r3, [r3, #10]
 8007736:	461a      	mov	r2, r3
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	4941      	ldr	r1, [pc, #260]	; (8007844 <UI_PlanSetDisplay+0x558>)
 800773e:	4618      	mov	r0, r3
 8007740:	f008 f952 	bl	800f9e8 <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 8007744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	4a3e      	ldr	r2, [pc, #248]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 800774e:	4413      	add	r3, r2
 8007750:	f107 020c 	add.w	r2, r7, #12
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7fa f89a 	bl	8001890 <DISP_DisplayText>
			break;
 800775c:	e061      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	4613      	mov	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	4a35      	ldr	r2, [pc, #212]	; (800783c <UI_PlanSetDisplay+0x550>)
 8007768:	4413      	add	r3, r2
 800776a:	493c      	ldr	r1, [pc, #240]	; (800785c <UI_PlanSetDisplay+0x570>)
 800776c:	4618      	mov	r0, r3
 800776e:	f7fa f88f 	bl	8001890 <DISP_DisplayText>
			switch(plan->status) {
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	7adb      	ldrb	r3, [r3, #11]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d01c      	beq.n	80077b4 <UI_PlanSetDisplay+0x4c8>
 800777a:	2b02      	cmp	r3, #2
 800777c:	dc50      	bgt.n	8007820 <UI_PlanSetDisplay+0x534>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <UI_PlanSetDisplay+0x49c>
 8007782:	2b01      	cmp	r3, #1
 8007784:	d00b      	beq.n	800779e <UI_PlanSetDisplay+0x4b2>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 8007786:	e04b      	b.n	8007820 <UI_PlanSetDisplay+0x534>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 8007788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778a:	4613      	mov	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	4a2d      	ldr	r2, [pc, #180]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 8007792:	4413      	add	r3, r2
 8007794:	4932      	ldr	r1, [pc, #200]	; (8007860 <UI_PlanSetDisplay+0x574>)
 8007796:	4618      	mov	r0, r3
 8007798:	f7fa f87a 	bl	8001890 <DISP_DisplayText>
 800779c:	e015      	b.n	80077ca <UI_PlanSetDisplay+0x4de>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 800779e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	4a28      	ldr	r2, [pc, #160]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 80077a8:	4413      	add	r3, r2
 80077aa:	492e      	ldr	r1, [pc, #184]	; (8007864 <UI_PlanSetDisplay+0x578>)
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fa f86f 	bl	8001890 <DISP_DisplayText>
 80077b2:	e00a      	b.n	80077ca <UI_PlanSetDisplay+0x4de>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	4613      	mov	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	4a22      	ldr	r2, [pc, #136]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 80077be:	4413      	add	r3, r2
 80077c0:	4929      	ldr	r1, [pc, #164]	; (8007868 <UI_PlanSetDisplay+0x57c>)
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fa f864 	bl	8001890 <DISP_DisplayText>
 80077c8:	bf00      	nop
			break;
 80077ca:	e029      	b.n	8007820 <UI_PlanSetDisplay+0x534>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	4613      	mov	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	4a19      	ldr	r2, [pc, #100]	; (800783c <UI_PlanSetDisplay+0x550>)
 80077d6:	4413      	add	r3, r2
 80077d8:	4924      	ldr	r1, [pc, #144]	; (800786c <UI_PlanSetDisplay+0x580>)
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fa f858 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	4613      	mov	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	4a17      	ldr	r2, [pc, #92]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 80077ea:	4413      	add	r3, r2
 80077ec:	4920      	ldr	r1, [pc, #128]	; (8007870 <UI_PlanSetDisplay+0x584>)
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fa f84e 	bl	8001890 <DISP_DisplayText>
			break;
 80077f4:	e015      	b.n	8007822 <UI_PlanSetDisplay+0x536>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 80077f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f8:	4613      	mov	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	4a0f      	ldr	r2, [pc, #60]	; (800783c <UI_PlanSetDisplay+0x550>)
 8007800:	4413      	add	r3, r2
 8007802:	491c      	ldr	r1, [pc, #112]	; (8007874 <UI_PlanSetDisplay+0x588>)
 8007804:	4618      	mov	r0, r3
 8007806:	f7fa f843 	bl	8001890 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 800780a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <UI_PlanSetDisplay+0x55c>)
 8007814:	4413      	add	r3, r2
 8007816:	4916      	ldr	r1, [pc, #88]	; (8007870 <UI_PlanSetDisplay+0x584>)
 8007818:	4618      	mov	r0, r3
 800781a:	f7fa f839 	bl	8001890 <DISP_DisplayText>
			break;
 800781e:	e000      	b.n	8007822 <UI_PlanSetDisplay+0x536>
			break;
 8007820:	bf00      	nop
	for(int i=0; i<4; i++) {
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	3301      	adds	r3, #1
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2b03      	cmp	r3, #3
 800782c:	f77f adbe 	ble.w	80073ac <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3728      	adds	r7, #40	; 0x28
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000f9c 	.word	0x20000f9c
 8007840:	0801214c 	.word	0x0801214c
 8007844:	08012120 	.word	0x08012120
 8007848:	20000fb8 	.word	0x20000fb8
 800784c:	08012154 	.word	0x08012154
 8007850:	08012160 	.word	0x08012160
 8007854:	08012168 	.word	0x08012168
 8007858:	08012170 	.word	0x08012170
 800785c:	08012178 	.word	0x08012178
 8007860:	08012180 	.word	0x08012180
 8007864:	08012188 	.word	0x08012188
 8007868:	08012190 	.word	0x08012190
 800786c:	08012198 	.word	0x08012198
 8007870:	080121a0 	.word	0x080121a0
 8007874:	080121a4 	.word	0x080121a4

08007878 <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 8007878:	b580      	push	{r7, lr}
 800787a:	b08c      	sub	sp, #48	; 0x30
 800787c:	af00      	add	r7, sp, #0
	uint8_t num_index = plan.checkpoint[num_checkpoint];
 800787e:	4bc6      	ldr	r3, [pc, #792]	; (8007b98 <UI_PlanSet+0x320>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	4bc5      	ldr	r3, [pc, #788]	; (8007b9c <UI_PlanSet+0x324>)
 8007886:	4413      	add	r3, r2
 8007888:	789b      	ldrb	r3, [r3, #2]
 800788a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Action_typedef plan_set = GetAction(num_index);
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd fe1d 	bl	80054d8 <GetAction>
	int8_t num = -1;
 800789e:	23ff      	movs	r3, #255	; 0xff
 80078a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t change_status = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 80078b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80078b4:	f107 0114 	add.w	r1, r7, #20
 80078b8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fd15 	bl	80072ec <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 80078c2:	f002 fa0b 	bl	8009cdc <HAL_GetTick>
 80078c6:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 80078c8:	f002 fa08 	bl	8009cdc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80078d6:	2a01      	cmp	r2, #1
 80078d8:	d101      	bne.n	80078de <UI_PlanSet+0x66>
 80078da:	2219      	movs	r2, #25
 80078dc:	e000      	b.n	80078e0 <UI_PlanSet+0x68>
 80078de:	2246      	movs	r2, #70	; 0x46
 80078e0:	429a      	cmp	r2, r3
 80078e2:	f200 8406 	bhi.w	80080f2 <UI_PlanSet+0x87a>

		bt2 = UI_ReadButton();
 80078e6:	f7ff f827 	bl	8006938 <UI_ReadButton>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 80078f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80078f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d104      	bne.n	8007906 <UI_PlanSet+0x8e>
 80078fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 83f9 	beq.w	80080f8 <UI_PlanSet+0x880>
		bt = bt2;
 8007906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800790a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 800790e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <UI_PlanSet+0xae>
			num = -1;
 800791a:	23ff      	movs	r3, #255	; 0xff
 800791c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return UI_HOMESCREEN;
 8007920:	2302      	movs	r3, #2
 8007922:	f000 bc16 	b.w	8008152 <UI_PlanSet+0x8da>
		}
		if(num != -1) {
 8007926:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d03e      	beq.n	80079ae <UI_PlanSet+0x136>
			if(bt & SW_UP_PRESS) {
 8007930:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d012      	beq.n	8007962 <UI_PlanSet+0xea>
				if(num != 0) num--; else num=12;
 800793c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <UI_PlanSet+0xdc>
 8007944:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8007948:	b2db      	uxtb	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b2db      	uxtb	r3, r3
 800794e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007952:	e002      	b.n	800795a <UI_PlanSet+0xe2>
 8007954:	230c      	movs	r3, #12
 8007956:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007960:	e7a6      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			else if(bt & SW_DW_PRESS) {
 8007962:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d012      	beq.n	8007994 <UI_PlanSet+0x11c>
				if(num != 12) num++; else num=0;
 800796e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8007972:	2b0c      	cmp	r3, #12
 8007974:	d007      	beq.n	8007986 <UI_PlanSet+0x10e>
 8007976:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800797a:	b2db      	uxtb	r3, r3
 800797c:	3301      	adds	r3, #1
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007984:	e002      	b.n	800798c <UI_PlanSet+0x114>
 8007986:	2300      	movs	r3, #0
 8007988:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007992:	e78d      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8007994:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d006      	beq.n	80079ae <UI_PlanSet+0x136>
				bt_status = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				num = -1;
 80079a6:	23ff      	movs	r3, #255	; 0xff
 80079a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				goto plan_set;
 80079ac:	e780      	b.n	80078b0 <UI_PlanSet+0x38>
			}
		}
		switch(num) {
 80079ae:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80079b2:	3301      	adds	r3, #1
 80079b4:	2b0d      	cmp	r3, #13
 80079b6:	d887      	bhi.n	80078c8 <UI_PlanSet+0x50>
 80079b8:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UI_PlanSet+0x148>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079f9 	.word	0x080079f9
 80079c4:	08007b69 	.word	0x08007b69
 80079c8:	08007bd5 	.word	0x08007bd5
 80079cc:	08007c33 	.word	0x08007c33
 80079d0:	08007c91 	.word	0x08007c91
 80079d4:	08007cef 	.word	0x08007cef
 80079d8:	08007d5f 	.word	0x08007d5f
 80079dc:	08007dcf 	.word	0x08007dcf
 80079e0:	08007e2d 	.word	0x08007e2d
 80079e4:	08007e8b 	.word	0x08007e8b
 80079e8:	08007ee9 	.word	0x08007ee9
 80079ec:	08007f47 	.word	0x08007f47
 80079f0:	08007fd3 	.word	0x08007fd3
 80079f4:	08008055 	.word	0x08008055
		case -1:
			if(bt & SW_DW_PRESS) {
 80079f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d010      	beq.n	8007a26 <UI_PlanSet+0x1ae>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8007a04:	7d3b      	ldrb	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <UI_PlanSet+0x19c>
 8007a0a:	7d3b      	ldrb	r3, [r7, #20]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	753b      	strb	r3, [r7, #20]
 8007a12:	e001      	b.n	8007a18 <UI_PlanSet+0x1a0>
 8007a14:	230c      	movs	r3, #12
 8007a16:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007a24:	e744      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			else if(bt & SW_UP_PRESS) {
 8007a26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d010      	beq.n	8007a54 <UI_PlanSet+0x1dc>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8007a32:	7d3b      	ldrb	r3, [r7, #20]
 8007a34:	2b0c      	cmp	r3, #12
 8007a36:	d004      	beq.n	8007a42 <UI_PlanSet+0x1ca>
 8007a38:	7d3b      	ldrb	r3, [r7, #20]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	753b      	strb	r3, [r7, #20]
 8007a40:	e001      	b.n	8007a46 <UI_PlanSet+0x1ce>
 8007a42:	2300      	movs	r3, #0
 8007a44:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007a52:	e72d      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			else if(bt & SW_OK_PRESS) {
 8007a54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d006      	beq.n	8007a6e <UI_PlanSet+0x1f6>
				num = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007a6c:	e720      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8007a6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d012      	beq.n	8007aa0 <UI_PlanSet+0x228>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d106      	bne.n	8007a90 <UI_PlanSet+0x218>
 8007a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a86:	f107 0214 	add.w	r2, r7, #20
 8007a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a8c:	f7fd fd66 	bl	800555c <SetAction>
				num = -1;
 8007a90:	23ff      	movs	r3, #255	; 0xff
 8007a92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				return UI_HOMESCREEN;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e358      	b.n	8008152 <UI_PlanSet+0x8da>
			}
			else if(bt2 & SW_RG_PRESS) {
 8007aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d02b      	beq.n	8007b04 <UI_PlanSet+0x28c>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007aac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d106      	bne.n	8007ac2 <UI_PlanSet+0x24a>
 8007ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ab8:	f107 0214 	add.w	r2, r7, #20
 8007abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8007abe:	f7fd fd4d 	bl	800555c <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8007ac2:	4b37      	ldr	r3, [pc, #220]	; (8007ba0 <UI_PlanSet+0x328>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d005      	beq.n	8007ada <UI_PlanSet+0x262>
 8007ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ad8:	e002      	b.n	8007ae0 <UI_PlanSet+0x268>
 8007ada:	2300      	movs	r3, #0
 8007adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fd fcf5 	bl	80054d8 <GetAction>
 8007aee:	f107 0314 	add.w	r3, r7, #20
 8007af2:	463a      	mov	r2, r7
 8007af4:	6810      	ldr	r0, [r2, #0]
 8007af6:	6851      	ldr	r1, [r2, #4]
 8007af8:	6892      	ldr	r2, [r2, #8]
 8007afa:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007b02:	e6d5      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			else if(bt2 & SW_LF_PRESS) {
 8007b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 82f6 	beq.w	80080fe <UI_PlanSet+0x886>
				if(change_status == 1) SetAction(plan_set, num_index);
 8007b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d106      	bne.n	8007b28 <UI_PlanSet+0x2b0>
 8007b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b1e:	f107 0214 	add.w	r2, r7, #20
 8007b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b24:	f7fd fd1a 	bl	800555c <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8007b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <UI_PlanSet+0x2c4>
 8007b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b34:	3b01      	subs	r3, #1
 8007b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b3a:	e003      	b.n	8007b44 <UI_PlanSet+0x2cc>
 8007b3c:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <UI_PlanSet+0x328>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8007b44:	463b      	mov	r3, r7
 8007b46:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fcc3 	bl	80054d8 <GetAction>
 8007b52:	f107 0314 	add.w	r3, r7, #20
 8007b56:	463a      	mov	r2, r7
 8007b58:	6810      	ldr	r0, [r2, #0]
 8007b5a:	6851      	ldr	r1, [r2, #4]
 8007b5c:	6892      	ldr	r2, [r2, #8]
 8007b5e:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8007b66:	e6a3      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8007b68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d017      	beq.n	8007ba4 <UI_PlanSet+0x32c>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8007b74:	7d7b      	ldrb	r3, [r7, #21]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <UI_PlanSet+0x30c>
 8007b7a:	7d7b      	ldrb	r3, [r7, #21]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	757b      	strb	r3, [r7, #21]
 8007b82:	e001      	b.n	8007b88 <UI_PlanSet+0x310>
 8007b84:	230e      	movs	r3, #14
 8007b86:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007b94:	e68c      	b.n	80078b0 <UI_PlanSet+0x38>
 8007b96:	bf00      	nop
 8007b98:	20000cd8 	.word	0x20000cd8
 8007b9c:	20000da8 	.word	0x20000da8
 8007ba0:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8007ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 82a9 	beq.w	8008104 <UI_PlanSet+0x88c>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8007bb2:	7d7b      	ldrb	r3, [r7, #21]
 8007bb4:	2b0e      	cmp	r3, #14
 8007bb6:	d004      	beq.n	8007bc2 <UI_PlanSet+0x34a>
 8007bb8:	7d7b      	ldrb	r3, [r7, #21]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	757b      	strb	r3, [r7, #21]
 8007bc0:	e001      	b.n	8007bc6 <UI_PlanSet+0x34e>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007bd2:	e66d      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8007bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <UI_PlanSet+0x38a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8007be0:	7dbb      	ldrb	r3, [r7, #22]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <UI_PlanSet+0x378>
 8007be6:	7dbb      	ldrb	r3, [r7, #22]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	75bb      	strb	r3, [r7, #22]
 8007bee:	e001      	b.n	8007bf4 <UI_PlanSet+0x37c>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c00:	e656      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 827d 	beq.w	800810a <UI_PlanSet+0x892>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d004      	beq.n	8007c20 <UI_PlanSet+0x3a8>
 8007c16:	7dbb      	ldrb	r3, [r7, #22]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	75bb      	strb	r3, [r7, #22]
 8007c1e:	e001      	b.n	8007c24 <UI_PlanSet+0x3ac>
 8007c20:	2300      	movs	r3, #0
 8007c22:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c30:	e63e      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8007c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d010      	beq.n	8007c60 <UI_PlanSet+0x3e8>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <UI_PlanSet+0x3d6>
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	e001      	b.n	8007c52 <UI_PlanSet+0x3da>
 8007c4e:	23ff      	movs	r3, #255	; 0xff
 8007c50:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c5e:	e627      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007c60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8251 	beq.w	8008110 <UI_PlanSet+0x898>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2bff      	cmp	r3, #255	; 0xff
 8007c72:	d004      	beq.n	8007c7e <UI_PlanSet+0x406>
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	3301      	adds	r3, #1
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	75fb      	strb	r3, [r7, #23]
 8007c7c:	e001      	b.n	8007c82 <UI_PlanSet+0x40a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007c8e:	e60f      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8007c90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <UI_PlanSet+0x446>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8007c9c:	7e3b      	ldrb	r3, [r7, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d004      	beq.n	8007cac <UI_PlanSet+0x434>
 8007ca2:	7e3b      	ldrb	r3, [r7, #24]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	763b      	strb	r3, [r7, #24]
 8007caa:	e001      	b.n	8007cb0 <UI_PlanSet+0x438>
 8007cac:	23ff      	movs	r3, #255	; 0xff
 8007cae:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007cbc:	e5f8      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007cbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8225 	beq.w	8008116 <UI_PlanSet+0x89e>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 8007ccc:	7e3b      	ldrb	r3, [r7, #24]
 8007cce:	2bff      	cmp	r3, #255	; 0xff
 8007cd0:	d004      	beq.n	8007cdc <UI_PlanSet+0x464>
 8007cd2:	7e3b      	ldrb	r3, [r7, #24]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	763b      	strb	r3, [r7, #24]
 8007cda:	e001      	b.n	8007ce0 <UI_PlanSet+0x468>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007cec:	e5e0      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8007cee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d015      	beq.n	8007d26 <UI_PlanSet+0x4ae>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 8007cfa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007cfe:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007d02:	d007      	beq.n	8007d14 <UI_PlanSet+0x49c>
 8007d04:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	b25b      	sxtb	r3, r3
 8007d10:	767b      	strb	r3, [r7, #25]
 8007d12:	e001      	b.n	8007d18 <UI_PlanSet+0x4a0>
 8007d14:	2363      	movs	r3, #99	; 0x63
 8007d16:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d24:	e5c4      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007d26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 81f4 	beq.w	800811c <UI_PlanSet+0x8a4>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8007d34:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007d38:	2b63      	cmp	r3, #99	; 0x63
 8007d3a:	d007      	beq.n	8007d4c <UI_PlanSet+0x4d4>
 8007d3c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	3301      	adds	r3, #1
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	767b      	strb	r3, [r7, #25]
 8007d4a:	e001      	b.n	8007d50 <UI_PlanSet+0x4d8>
 8007d4c:	239d      	movs	r3, #157	; 0x9d
 8007d4e:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d5c:	e5a8      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 8007d5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d62:	f003 0310 	and.w	r3, r3, #16
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d015      	beq.n	8007d96 <UI_PlanSet+0x51e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 8007d6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007d6e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007d72:	d007      	beq.n	8007d84 <UI_PlanSet+0x50c>
 8007d74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	b25b      	sxtb	r3, r3
 8007d80:	76bb      	strb	r3, [r7, #26]
 8007d82:	e001      	b.n	8007d88 <UI_PlanSet+0x510>
 8007d84:	2363      	movs	r3, #99	; 0x63
 8007d86:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007d94:	e58c      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007d96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 81bf 	beq.w	8008122 <UI_PlanSet+0x8aa>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8007da4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007da8:	2b63      	cmp	r3, #99	; 0x63
 8007daa:	d007      	beq.n	8007dbc <UI_PlanSet+0x544>
 8007dac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	3301      	adds	r3, #1
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	76bb      	strb	r3, [r7, #26]
 8007dba:	e001      	b.n	8007dc0 <UI_PlanSet+0x548>
 8007dbc:	239d      	movs	r3, #157	; 0x9d
 8007dbe:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007dcc:	e570      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 8007dce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d010      	beq.n	8007dfc <UI_PlanSet+0x584>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 8007dda:	7efb      	ldrb	r3, [r7, #27]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <UI_PlanSet+0x572>
 8007de0:	7efb      	ldrb	r3, [r7, #27]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	76fb      	strb	r3, [r7, #27]
 8007de8:	e001      	b.n	8007dee <UI_PlanSet+0x576>
 8007dea:	23ff      	movs	r3, #255	; 0xff
 8007dec:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007dfa:	e559      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007dfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 818f 	beq.w	8008128 <UI_PlanSet+0x8b0>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 8007e0a:	7efb      	ldrb	r3, [r7, #27]
 8007e0c:	2bff      	cmp	r3, #255	; 0xff
 8007e0e:	d004      	beq.n	8007e1a <UI_PlanSet+0x5a2>
 8007e10:	7efb      	ldrb	r3, [r7, #27]
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	76fb      	strb	r3, [r7, #27]
 8007e18:	e001      	b.n	8007e1e <UI_PlanSet+0x5a6>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e2a:	e541      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 8007e2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <UI_PlanSet+0x5e2>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 8007e38:	7f3b      	ldrb	r3, [r7, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <UI_PlanSet+0x5d0>
 8007e3e:	7f3b      	ldrb	r3, [r7, #28]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	773b      	strb	r3, [r7, #28]
 8007e46:	e001      	b.n	8007e4c <UI_PlanSet+0x5d4>
 8007e48:	23ff      	movs	r3, #255	; 0xff
 8007e4a:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e58:	e52a      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007e5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8163 	beq.w	800812e <UI_PlanSet+0x8b6>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 8007e68:	7f3b      	ldrb	r3, [r7, #28]
 8007e6a:	2bff      	cmp	r3, #255	; 0xff
 8007e6c:	d004      	beq.n	8007e78 <UI_PlanSet+0x600>
 8007e6e:	7f3b      	ldrb	r3, [r7, #28]
 8007e70:	3301      	adds	r3, #1
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	773b      	strb	r3, [r7, #28]
 8007e76:	e001      	b.n	8007e7c <UI_PlanSet+0x604>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007e82:	2301      	movs	r3, #1
 8007e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007e88:	e512      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 8007e8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d010      	beq.n	8007eb8 <UI_PlanSet+0x640>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 8007e96:	7f7b      	ldrb	r3, [r7, #29]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d004      	beq.n	8007ea6 <UI_PlanSet+0x62e>
 8007e9c:	7f7b      	ldrb	r3, [r7, #29]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	777b      	strb	r3, [r7, #29]
 8007ea4:	e001      	b.n	8007eaa <UI_PlanSet+0x632>
 8007ea6:	23ff      	movs	r3, #255	; 0xff
 8007ea8:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007eb6:	e4fb      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007eb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8137 	beq.w	8008134 <UI_PlanSet+0x8bc>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 8007ec6:	7f7b      	ldrb	r3, [r7, #29]
 8007ec8:	2bff      	cmp	r3, #255	; 0xff
 8007eca:	d004      	beq.n	8007ed6 <UI_PlanSet+0x65e>
 8007ecc:	7f7b      	ldrb	r3, [r7, #29]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	777b      	strb	r3, [r7, #29]
 8007ed4:	e001      	b.n	8007eda <UI_PlanSet+0x662>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007ee6:	e4e3      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 8007ee8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d010      	beq.n	8007f16 <UI_PlanSet+0x69e>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 8007ef4:	7fbb      	ldrb	r3, [r7, #30]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <UI_PlanSet+0x68c>
 8007efa:	7fbb      	ldrb	r3, [r7, #30]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	77bb      	strb	r3, [r7, #30]
 8007f02:	e001      	b.n	8007f08 <UI_PlanSet+0x690>
 8007f04:	23ff      	movs	r3, #255	; 0xff
 8007f06:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007f14:	e4cc      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007f16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 810b 	beq.w	800813a <UI_PlanSet+0x8c2>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 8007f24:	7fbb      	ldrb	r3, [r7, #30]
 8007f26:	2bff      	cmp	r3, #255	; 0xff
 8007f28:	d004      	beq.n	8007f34 <UI_PlanSet+0x6bc>
 8007f2a:	7fbb      	ldrb	r3, [r7, #30]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	77bb      	strb	r3, [r7, #30]
 8007f32:	e001      	b.n	8007f38 <UI_PlanSet+0x6c0>
 8007f34:	2300      	movs	r3, #0
 8007f36:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007f44:	e4b4      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 8007f46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d01d      	beq.n	8007f8e <UI_PlanSet+0x716>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 8007f52:	7ffb      	ldrb	r3, [r7, #31]
 8007f54:	f003 0303 	and.w	r3, r3, #3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <UI_PlanSet+0x6f4>
 8007f5c:	7ffb      	ldrb	r3, [r7, #31]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	77fb      	strb	r3, [r7, #31]
 8007f6a:	e009      	b.n	8007f80 <UI_PlanSet+0x708>
 8007f6c:	7ffb      	ldrb	r3, [r7, #31]
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	77fb      	strb	r3, [r7, #31]
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
 8007f78:	f043 0302 	orr.w	r3, r3, #2
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007f8c:	e490      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007f8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80d2 	beq.w	8008140 <UI_PlanSet+0x8c8>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8007f9c:	7ffb      	ldrb	r3, [r7, #31]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d007      	beq.n	8007fb6 <UI_PlanSet+0x73e>
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e006      	b.n	8007fc4 <UI_PlanSet+0x74c>
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
 8007fb8:	f023 0303 	bic.w	r3, r3, #3
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	7ffb      	ldrb	r3, [r7, #31]
 8007fc2:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007fd0:	e46e      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 11:
			if(bt & SW_OK_PRESS) {
 8007fd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 80b3 	beq.w	8008146 <UI_PlanSet+0x8ce>
				DISP_DisplayText(&short_message, "Insert action?");
 8007fe0:	495e      	ldr	r1, [pc, #376]	; (800815c <UI_PlanSet+0x8e4>)
 8007fe2:	485f      	ldr	r0, [pc, #380]	; (8008160 <UI_PlanSet+0x8e8>)
 8007fe4:	f7f9 fc54 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 8007fe8:	f7fe fca6 	bl	8006938 <UI_ReadButton>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d01f      	beq.n	8008038 <UI_PlanSet+0x7c0>
					bt = UI_ReadButton();
 8007ff8:	f7fe fc9e 	bl	8006938 <UI_ReadButton>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8008002:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00d      	beq.n	800802a <UI_PlanSet+0x7b2>
						DISP_DisplayText(&short_message, "Inserting");
 800800e:	4955      	ldr	r1, [pc, #340]	; (8008164 <UI_PlanSet+0x8ec>)
 8008010:	4853      	ldr	r0, [pc, #332]	; (8008160 <UI_PlanSet+0x8e8>)
 8008012:	f7f9 fc3d 	bl	8001890 <DISP_DisplayText>
						Storage_InsertAction(num_index);
 8008016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd ff10 	bl	8005e40 <Storage_InsertAction>
						DISP_DisplayText(&short_message, "Insert Done!");
 8008020:	4951      	ldr	r1, [pc, #324]	; (8008168 <UI_PlanSet+0x8f0>)
 8008022:	484f      	ldr	r0, [pc, #316]	; (8008160 <UI_PlanSet+0x8e8>)
 8008024:	f7f9 fc34 	bl	8001890 <DISP_DisplayText>
						break;
 8008028:	e009      	b.n	800803e <UI_PlanSet+0x7c6>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 800802a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <UI_PlanSet+0x7c4>
 8008036:	e7d7      	b.n	8007fe8 <UI_PlanSet+0x770>
					if(bt == UI_ReadButton()) continue;
 8008038:	bf00      	nop
 800803a:	e7d5      	b.n	8007fe8 <UI_PlanSet+0x770>
						break;
 800803c:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 800803e:	494b      	ldr	r1, [pc, #300]	; (800816c <UI_PlanSet+0x8f4>)
 8008040:	484b      	ldr	r0, [pc, #300]	; (8008170 <UI_PlanSet+0x8f8>)
 8008042:	f7f9 fc25 	bl	8001890 <DISP_DisplayText>
				bt_status = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8008052:	e42d      	b.n	80078b0 <UI_PlanSet+0x38>
			}
			break;
		case 12:
			if(bt & SW_OK_PRESS) {
 8008054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d075      	beq.n	800814c <UI_PlanSet+0x8d4>
				DISP_DisplayText(&short_message, "Delete this action?");
 8008060:	4944      	ldr	r1, [pc, #272]	; (8008174 <UI_PlanSet+0x8fc>)
 8008062:	483f      	ldr	r0, [pc, #252]	; (8008160 <UI_PlanSet+0x8e8>)
 8008064:	f7f9 fc14 	bl	8001890 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 8008068:	f7fe fc66 	bl	8006938 <UI_ReadButton>
 800806c:	4603      	mov	r3, r0
 800806e:	461a      	mov	r2, r3
 8008070:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008074:	4293      	cmp	r3, r2
 8008076:	d02d      	beq.n	80080d4 <UI_PlanSet+0x85c>
					bt = UI_ReadButton();
 8008078:	f7fe fc5e 	bl	8006938 <UI_ReadButton>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8008082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <UI_PlanSet+0x84e>
						DISP_DisplayText(&short_message, "Deleting");
 800808e:	493a      	ldr	r1, [pc, #232]	; (8008178 <UI_PlanSet+0x900>)
 8008090:	4833      	ldr	r0, [pc, #204]	; (8008160 <UI_PlanSet+0x8e8>)
 8008092:	f7f9 fbfd 	bl	8001890 <DISP_DisplayText>
						Storage_DeleteAction(num_index);
 8008096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd fefc 	bl	8005e98 <Storage_DeleteAction>
						DISP_DisplayText(&short_message, "Delete Done!");
 80080a0:	4936      	ldr	r1, [pc, #216]	; (800817c <UI_PlanSet+0x904>)
 80080a2:	482f      	ldr	r0, [pc, #188]	; (8008160 <UI_PlanSet+0x8e8>)
 80080a4:	f7f9 fbf4 	bl	8001890 <DISP_DisplayText>
						plan_set = GetAction(num_index);
 80080a8:	463b      	mov	r3, r7
 80080aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fd fa11 	bl	80054d8 <GetAction>
 80080b6:	f107 0314 	add.w	r3, r7, #20
 80080ba:	463a      	mov	r2, r7
 80080bc:	6810      	ldr	r0, [r2, #0]
 80080be:	6851      	ldr	r1, [r2, #4]
 80080c0:	6892      	ldr	r2, [r2, #8]
 80080c2:	c307      	stmia	r3!, {r0, r1, r2}
						break;
 80080c4:	e009      	b.n	80080da <UI_PlanSet+0x862>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80080c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <UI_PlanSet+0x860>
 80080d2:	e7c9      	b.n	8008068 <UI_PlanSet+0x7f0>
					if(bt == UI_ReadButton()) continue;
 80080d4:	bf00      	nop
 80080d6:	e7c7      	b.n	8008068 <UI_PlanSet+0x7f0>
						break;
 80080d8:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 80080da:	4924      	ldr	r1, [pc, #144]	; (800816c <UI_PlanSet+0x8f4>)
 80080dc:	4824      	ldr	r0, [pc, #144]	; (8008170 <UI_PlanSet+0x8f8>)
 80080de:	f7f9 fbd7 	bl	8001890 <DISP_DisplayText>
				bt_status = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80080ee:	f7ff bbdf 	b.w	80078b0 <UI_PlanSet+0x38>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 80080f2:	bf00      	nop
 80080f4:	f7ff bbe8 	b.w	80078c8 <UI_PlanSet+0x50>
		if(bt == bt2 && bt_status == 0) continue;
 80080f8:	bf00      	nop
 80080fa:	f7ff bbe5 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 80080fe:	bf00      	nop
 8008100:	f7ff bbe2 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008104:	bf00      	nop
 8008106:	f7ff bbdf 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 800810a:	bf00      	nop
 800810c:	f7ff bbdc 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008110:	bf00      	nop
 8008112:	f7ff bbd9 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008116:	bf00      	nop
 8008118:	f7ff bbd6 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 800811c:	bf00      	nop
 800811e:	f7ff bbd3 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008122:	bf00      	nop
 8008124:	f7ff bbd0 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008128:	bf00      	nop
 800812a:	f7ff bbcd 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 800812e:	bf00      	nop
 8008130:	f7ff bbca 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008134:	bf00      	nop
 8008136:	f7ff bbc7 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 800813a:	bf00      	nop
 800813c:	f7ff bbc4 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008140:	bf00      	nop
 8008142:	f7ff bbc1 	b.w	80078c8 <UI_PlanSet+0x50>
			break;
 8008146:	bf00      	nop
 8008148:	f7ff bbbe 	b.w	80078c8 <UI_PlanSet+0x50>
			}
			break;
 800814c:	bf00      	nop
 800814e:	f7ff bbbb 	b.w	80078c8 <UI_PlanSet+0x50>
		}
	}
	return UI_IDLE;
}
 8008152:	4618      	mov	r0, r3
 8008154:	3730      	adds	r7, #48	; 0x30
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	080121ac 	.word	0x080121ac
 8008160:	20000f44 	.word	0x20000f44
 8008164:	080121bc 	.word	0x080121bc
 8008168:	080121c8 	.word	0x080121c8
 800816c:	080121a0 	.word	0x080121a0
 8008170:	20000f4c 	.word	0x20000f4c
 8008174:	080121d8 	.word	0x080121d8
 8008178:	080121ec 	.word	0x080121ec
 800817c:	080121f8 	.word	0x080121f8

08008180 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 8008186:	2204      	movs	r2, #4
 8008188:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 800818a:	4b23      	ldr	r3, [pc, #140]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 800818c:	2232      	movs	r2, #50	; 0x32
 800818e:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 8008192:	223a      	movs	r2, #58	; 0x3a
 8008194:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 8008196:	4b20      	ldr	r3, [pc, #128]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 8008198:	220b      	movs	r2, #11
 800819a:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 800819c:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 800819e:	2201      	movs	r2, #1
 80081a0:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 80081a2:	4b1d      	ldr	r3, [pc, #116]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081a4:	2202      	movs	r2, #2
 80081a6:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081aa:	2202      	movs	r2, #2
 80081ac:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 80081ae:	4b1a      	ldr	r3, [pc, #104]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081b0:	4a19      	ldr	r2, [pc, #100]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081b2:	3307      	adds	r3, #7
 80081b4:	6810      	ldr	r0, [r2, #0]
 80081b6:	6018      	str	r0, [r3, #0]
 80081b8:	8891      	ldrh	r1, [r2, #4]
 80081ba:	7992      	ldrb	r2, [r2, #6]
 80081bc:	8099      	strh	r1, [r3, #4]
 80081be:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 80081c0:	4b15      	ldr	r3, [pc, #84]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081c2:	223f      	movs	r2, #63	; 0x3f
 80081c4:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081c8:	223c      	movs	r2, #60	; 0x3c
 80081ca:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <UI_ADCThresholdDisplayInit+0x98>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 80081d8:	4b10      	ldr	r3, [pc, #64]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081da:	2200      	movs	r2, #0
 80081dc:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081e0:	227f      	movs	r2, #127	; 0x7f
 80081e2:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081e6:	220a      	movs	r2, #10
 80081e8:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 80081ea:	4b0c      	ldr	r3, [pc, #48]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081f2:	2202      	movs	r2, #2
 80081f4:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <UI_ADCThresholdDisplayInit+0x9c>)
 80081f8:	2202      	movs	r2, #2
 80081fa:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 80081fc:	4b08      	ldr	r3, [pc, #32]	; (8008220 <UI_ADCThresholdDisplayInit+0xa0>)
 80081fe:	2220      	movs	r2, #32
 8008200:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 8008202:	4b07      	ldr	r3, [pc, #28]	; (8008220 <UI_ADCThresholdDisplayInit+0xa0>)
 8008204:	2206      	movs	r2, #6
 8008206:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <UI_ADCThresholdDisplayInit+0xa0>)
 800820a:	2202      	movs	r2, #2
 800820c:	715a      	strb	r2, [r3, #5]

}
 800820e:	bf00      	nop
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	20000fdc 	.word	0x20000fdc
 800821c:	20000fec 	.word	0x20000fec
 8008220:	20000ff4 	.word	0x20000ff4

08008224 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 800822e:	4b2d      	ldr	r3, [pc, #180]	; (80082e4 <UI_ADCThresholdDisplay+0xc0>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	79fa      	ldrb	r2, [r7, #7]
 8008234:	429a      	cmp	r2, r3
 8008236:	d03e      	beq.n	80082b6 <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	f107 0310 	add.w	r3, r7, #16
 8008240:	4929      	ldr	r1, [pc, #164]	; (80082e8 <UI_ADCThresholdDisplay+0xc4>)
 8008242:	4618      	mov	r0, r3
 8008244:	f007 fbd0 	bl	800f9e8 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 8008248:	f107 0310 	add.w	r3, r7, #16
 800824c:	4619      	mov	r1, r3
 800824e:	4827      	ldr	r0, [pc, #156]	; (80082ec <UI_ADCThresholdDisplay+0xc8>)
 8008250:	f7f9 fb1e 	bl	8001890 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 8008254:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <UI_ADCThresholdDisplay+0xc0>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	00d2      	lsls	r2, r2, #3
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	b2da      	uxtb	r2, r3
 8008260:	4b23      	ldr	r3, [pc, #140]	; (80082f0 <UI_ADCThresholdDisplay+0xcc>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	4413      	add	r3, r2
 8008266:	b2db      	uxtb	r3, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 800826e:	2320      	movs	r3, #32
 8008270:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 8008272:	4a20      	ldr	r2, [pc, #128]	; (80082f4 <UI_ADCThresholdDisplay+0xd0>)
 8008274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008278:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	4619      	mov	r1, r3
 8008280:	481c      	ldr	r0, [pc, #112]	; (80082f4 <UI_ADCThresholdDisplay+0xd0>)
 8008282:	f7f9 fb05 	bl	8001890 <DISP_DisplayText>

		point[0] = '~'+2;
 8008286:	2380      	movs	r3, #128	; 0x80
 8008288:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	461a      	mov	r2, r3
 800828e:	00d2      	lsls	r2, r2, #3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	b2da      	uxtb	r2, r3
 8008294:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <UI_ADCThresholdDisplay+0xcc>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	4413      	add	r3, r2
 800829a:	b2db      	uxtb	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <UI_ADCThresholdDisplay+0xd0>)
 80082a2:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4619      	mov	r1, r3
 80082aa:	4812      	ldr	r0, [pc, #72]	; (80082f4 <UI_ADCThresholdDisplay+0xd0>)
 80082ac:	f7f9 faf0 	bl	8001890 <DISP_DisplayText>

		last_num = num;
 80082b0:	4a0c      	ldr	r2, [pc, #48]	; (80082e4 <UI_ADCThresholdDisplay+0xc0>)
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	f1c3 030d 	rsb	r3, r3, #13
 80082bc:	4a0e      	ldr	r2, [pc, #56]	; (80082f8 <UI_ADCThresholdDisplay+0xd4>)
 80082be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f107 0310 	add.w	r3, r7, #16
 80082c8:	490c      	ldr	r1, [pc, #48]	; (80082fc <UI_ADCThresholdDisplay+0xd8>)
 80082ca:	4618      	mov	r0, r3
 80082cc:	f007 fb8c 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 80082d0:	f107 0310 	add.w	r3, r7, #16
 80082d4:	4619      	mov	r1, r3
 80082d6:	480a      	ldr	r0, [pc, #40]	; (8008300 <UI_ADCThresholdDisplay+0xdc>)
 80082d8:	f7f9 fada 	bl	8001890 <DISP_DisplayText>

}
 80082dc:	bf00      	nop
 80082de:	3728      	adds	r7, #40	; 0x28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000320 	.word	0x20000320
 80082e8:	08012208 	.word	0x08012208
 80082ec:	20000fec 	.word	0x20000fec
 80082f0:	20000290 	.word	0x20000290
 80082f4:	20000ff4 	.word	0x20000ff4
 80082f8:	20000b80 	.word	0x20000b80
 80082fc:	08012214 	.word	0x08012214
 8008300:	20000fdc 	.word	0x20000fdc

08008304 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 8008316:	f7fd fa91 	bl	800583c <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 800831a:	7f7b      	ldrb	r3, [r7, #29]
 800831c:	3301      	adds	r3, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff ff7f 	bl	8008224 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 8008326:	7f7b      	ldrb	r3, [r7, #29]
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff ff7b 	bl	8008224 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 800832e:	f001 fcd5 	bl	8009cdc <HAL_GetTick>
 8008332:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8008334:	7f7b      	ldrb	r3, [r7, #29]
 8008336:	f1c3 030d 	rsb	r3, r3, #13
 800833a:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 800833c:	f7fe fa7e 	bl	800683c <UI_ShowSensor>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00e      	beq.n	8008364 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 8008346:	7f3b      	ldrb	r3, [r7, #28]
 8008348:	4a52      	ldr	r2, [pc, #328]	; (8008494 <UI_ADCThreshold+0x190>)
 800834a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800834e:	461a      	mov	r2, r3
 8008350:	463b      	mov	r3, r7
 8008352:	4951      	ldr	r1, [pc, #324]	; (8008498 <UI_ADCThreshold+0x194>)
 8008354:	4618      	mov	r0, r3
 8008356:	f007 fb47 	bl	800f9e8 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 800835a:	463b      	mov	r3, r7
 800835c:	4619      	mov	r1, r3
 800835e:	484f      	ldr	r0, [pc, #316]	; (800849c <UI_ADCThreshold+0x198>)
 8008360:	f7f9 fa96 	bl	8001890 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8008364:	f001 fcba 	bl	8009cdc <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	7fba      	ldrb	r2, [r7, #30]
 8008370:	2a01      	cmp	r2, #1
 8008372:	d101      	bne.n	8008378 <UI_ADCThreshold+0x74>
 8008374:	2214      	movs	r2, #20
 8008376:	e000      	b.n	800837a <UI_ADCThreshold+0x76>
 8008378:	2246      	movs	r2, #70	; 0x46
 800837a:	429a      	cmp	r2, r3
 800837c:	f200 8081 	bhi.w	8008482 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 8008380:	f7fe fada 	bl	8006938 <UI_ReadButton>
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 8008388:	7ffa      	ldrb	r2, [r7, #31]
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	429a      	cmp	r2, r3
 800838e:	d102      	bne.n	8008396 <UI_ADCThreshold+0x92>
 8008390:	7fbb      	ldrb	r3, [r7, #30]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d077      	beq.n	8008486 <UI_ADCThreshold+0x182>
		bt = bt2;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 800839a:	7ffb      	ldrb	r3, [r7, #31]
 800839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <UI_ADCThreshold+0xa8>
			num_sen = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 80083a8:	2302      	movs	r3, #2
 80083aa:	e06e      	b.n	800848a <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 80083ac:	7ffb      	ldrb	r3, [r7, #31]
 80083ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 80083b6:	f7fd fa65 	bl	8005884 <Storage_SetADCThreshold>
			num_sen = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 80083be:	2307      	movs	r3, #7
 80083c0:	e063      	b.n	800848a <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 80083c2:	7ffb      	ldrb	r3, [r7, #31]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 80083cc:	7f7b      	ldrb	r3, [r7, #29]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <UI_ADCThreshold+0xd6>
 80083d2:	7f7b      	ldrb	r3, [r7, #29]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	777b      	strb	r3, [r7, #29]
 80083d8:	e001      	b.n	80083de <UI_ADCThreshold+0xda>
 80083da:	230d      	movs	r3, #13
 80083dc:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80083e2:	e7a0      	b.n	8008326 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 80083e4:	7ffb      	ldrb	r3, [r7, #31]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 80083ee:	7f7b      	ldrb	r3, [r7, #29]
 80083f0:	2b0d      	cmp	r3, #13
 80083f2:	d003      	beq.n	80083fc <UI_ADCThreshold+0xf8>
 80083f4:	7f7b      	ldrb	r3, [r7, #29]
 80083f6:	3301      	adds	r3, #1
 80083f8:	777b      	strb	r3, [r7, #29]
 80083fa:	e001      	b.n	8008400 <UI_ADCThreshold+0xfc>
 80083fc:	2300      	movs	r3, #0
 80083fe:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008404:	e78f      	b.n	8008326 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 8008406:	7ffb      	ldrb	r3, [r7, #31]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 8008410:	7f3b      	ldrb	r3, [r7, #28]
 8008412:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <UI_ADCThreshold+0x19c>)
 8008414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <UI_ADCThreshold+0x12c>
 800841c:	7f3b      	ldrb	r3, [r7, #28]
 800841e:	4a20      	ldr	r2, [pc, #128]	; (80084a0 <UI_ADCThreshold+0x19c>)
 8008420:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008424:	3a01      	subs	r2, #1
 8008426:	b291      	uxth	r1, r2
 8008428:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <UI_ADCThreshold+0x19c>)
 800842a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800842e:	e005      	b.n	800843c <UI_ADCThreshold+0x138>
 8008430:	7f3b      	ldrb	r3, [r7, #28]
 8008432:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <UI_ADCThreshold+0x19c>)
 8008434:	f640 71ff 	movw	r1, #4095	; 0xfff
 8008438:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 800843c:	2301      	movs	r3, #1
 800843e:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008440:	e771      	b.n	8008326 <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 8008442:	7ffb      	ldrb	r3, [r7, #31]
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	f43f af73 	beq.w	8008334 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 800844e:	7f3b      	ldrb	r3, [r7, #28]
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <UI_ADCThreshold+0x19c>)
 8008452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008456:	f640 72ff 	movw	r2, #4095	; 0xfff
 800845a:	4293      	cmp	r3, r2
 800845c:	d009      	beq.n	8008472 <UI_ADCThreshold+0x16e>
 800845e:	7f3b      	ldrb	r3, [r7, #28]
 8008460:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <UI_ADCThreshold+0x19c>)
 8008462:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008466:	3201      	adds	r2, #1
 8008468:	b291      	uxth	r1, r2
 800846a:	4a0d      	ldr	r2, [pc, #52]	; (80084a0 <UI_ADCThreshold+0x19c>)
 800846c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008470:	e004      	b.n	800847c <UI_ADCThreshold+0x178>
 8008472:	7f3b      	ldrb	r3, [r7, #28]
 8008474:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <UI_ADCThreshold+0x19c>)
 8008476:	2100      	movs	r1, #0
 8008478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 800847c:	2301      	movs	r3, #1
 800847e:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8008480:	e751      	b.n	8008326 <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8008482:	bf00      	nop
 8008484:	e756      	b.n	8008334 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 8008486:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8008488:	e754      	b.n	8008334 <UI_ADCThreshold+0x30>
		}
	}
}
 800848a:	4618      	mov	r0, r3
 800848c:	3720      	adds	r7, #32
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000b64 	.word	0x20000b64
 8008498:	0801221c 	.word	0x0801221c
 800849c:	20000fe3 	.word	0x20000fe3
 80084a0:	20000b80 	.word	0x20000b80

080084a4 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 80084aa:	f7fe fa45 	bl	8006938 <UI_ReadButton>
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 80084b2:	f7fc fe67 	bl	8005184 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 80084b6:	f7fe f9c1 	bl	800683c <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 80084ba:	f7fe fa3d 	bl	8006938 <UI_ReadButton>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d02a      	beq.n	800851e <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 80084c8:	f7fe fa36 	bl	8006938 <UI_ReadButton>
 80084cc:	4603      	mov	r3, r0
 80084ce:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 80084da:	2000      	movs	r0, #0
 80084dc:	f7fc fee4 	bl	80052a8 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 80084e0:	2302      	movs	r3, #2
 80084e2:	e01e      	b.n	8008522 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 80084ee:	2000      	movs	r0, #0
 80084f0:	f7fc feda 	bl	80052a8 <SEN_EndAutoCalibration>
			return UI_SET;
 80084f4:	2307      	movs	r3, #7
 80084f6:	e014      	b.n	8008522 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0d9      	beq.n	80084b6 <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 8008502:	2001      	movs	r0, #1
 8008504:	f7fc fed0 	bl	80052a8 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 8008508:	4908      	ldr	r1, [pc, #32]	; (800852c <UI_AutoCalib+0x88>)
 800850a:	4809      	ldr	r0, [pc, #36]	; (8008530 <UI_AutoCalib+0x8c>)
 800850c:	f7f9 f9c0 	bl	8001890 <DISP_DisplayText>
			Storage_SetADCThreshold();
 8008510:	f7fd f9b8 	bl	8005884 <Storage_SetADCThreshold>
			HAL_Delay(200);
 8008514:	20c8      	movs	r0, #200	; 0xc8
 8008516:	f001 fbed 	bl	8009cf4 <HAL_Delay>
			return UI_SET;
 800851a:	2307      	movs	r3, #7
 800851c:	e001      	b.n	8008522 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 800851e:	bf00      	nop
		UI_ShowSensor();
 8008520:	e7c9      	b.n	80084b6 <UI_AutoCalib+0x12>
		}
	}
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	08012224 	.word	0x08012224
 8008530:	20000f44 	.word	0x20000f44

08008534 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 800853a:	4b5e      	ldr	r3, [pc, #376]	; (80086b4 <UI_Startup+0x180>)
 800853c:	2209      	movs	r2, #9
 800853e:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 8008540:	f001 fbcc 	bl	8009cdc <HAL_GetTick>
 8008544:	4603      	mov	r3, r0
 8008546:	b29b      	uxth	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	463b      	mov	r3, r7
 800854c:	495a      	ldr	r1, [pc, #360]	; (80086b8 <UI_Startup+0x184>)
 800854e:	4618      	mov	r0, r3
 8008550:	f007 fa4a 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&startup, buff);
 8008554:	463b      	mov	r3, r7
 8008556:	4619      	mov	r1, r3
 8008558:	4856      	ldr	r0, [pc, #344]	; (80086b4 <UI_Startup+0x180>)
 800855a:	f7f9 f999 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800855e:	4b55      	ldr	r3, [pc, #340]	; (80086b4 <UI_Startup+0x180>)
 8008560:	785a      	ldrb	r2, [r3, #1]
 8008562:	4b54      	ldr	r3, [pc, #336]	; (80086b4 <UI_Startup+0x180>)
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	4413      	add	r3, r2
 8008568:	b2da      	uxtb	r2, r3
 800856a:	4b52      	ldr	r3, [pc, #328]	; (80086b4 <UI_Startup+0x180>)
 800856c:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 800856e:	2001      	movs	r0, #1
 8008570:	f001 fbc0 	bl	8009cf4 <HAL_Delay>
	if(!Storage_Init()) {
 8008574:	f7fd f8fc 	bl	8005770 <Storage_Init>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d11d      	bne.n	80085ba <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 800857e:	f001 fbad 	bl	8009cdc <HAL_GetTick>
 8008582:	4603      	mov	r3, r0
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	463b      	mov	r3, r7
 800858a:	494c      	ldr	r1, [pc, #304]	; (80086bc <UI_Startup+0x188>)
 800858c:	4618      	mov	r0, r3
 800858e:	f007 fa2b 	bl	800f9e8 <siprintf>
		DISP_DisplayText(&startup, buff);
 8008592:	463b      	mov	r3, r7
 8008594:	4619      	mov	r1, r3
 8008596:	4847      	ldr	r0, [pc, #284]	; (80086b4 <UI_Startup+0x180>)
 8008598:	f7f9 f97a 	bl	8001890 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 800859c:	4b45      	ldr	r3, [pc, #276]	; (80086b4 <UI_Startup+0x180>)
 800859e:	785a      	ldrb	r2, [r3, #1]
 80085a0:	4b44      	ldr	r3, [pc, #272]	; (80086b4 <UI_Startup+0x180>)
 80085a2:	791b      	ldrb	r3, [r3, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	4b42      	ldr	r3, [pc, #264]	; (80086b4 <UI_Startup+0x180>)
 80085aa:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 80085ac:	f7fd f892 	bl	80056d4 <Storage_ResetMemory>
		} while(!Storage_Init());
 80085b0:	f7fd f8de 	bl	8005770 <Storage_Init>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0f8      	beq.n	80085ac <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 80085ba:	f001 fb8f 	bl	8009cdc <HAL_GetTick>
 80085be:	4603      	mov	r3, r0
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	461a      	mov	r2, r3
 80085c4:	463b      	mov	r3, r7
 80085c6:	493e      	ldr	r1, [pc, #248]	; (80086c0 <UI_Startup+0x18c>)
 80085c8:	4618      	mov	r0, r3
 80085ca:	f007 fa0d 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&startup, buff);
 80085ce:	463b      	mov	r3, r7
 80085d0:	4619      	mov	r1, r3
 80085d2:	4838      	ldr	r0, [pc, #224]	; (80086b4 <UI_Startup+0x180>)
 80085d4:	f7f9 f95c 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80085d8:	4b36      	ldr	r3, [pc, #216]	; (80086b4 <UI_Startup+0x180>)
 80085da:	785a      	ldrb	r2, [r3, #1]
 80085dc:	4b35      	ldr	r3, [pc, #212]	; (80086b4 <UI_Startup+0x180>)
 80085de:	791b      	ldrb	r3, [r3, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	4b33      	ldr	r3, [pc, #204]	; (80086b4 <UI_Startup+0x180>)
 80085e6:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 80085e8:	f001 fb78 	bl	8009cdc <HAL_GetTick>
 80085ec:	4603      	mov	r3, r0
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	463b      	mov	r3, r7
 80085f4:	4933      	ldr	r1, [pc, #204]	; (80086c4 <UI_Startup+0x190>)
 80085f6:	4618      	mov	r0, r3
 80085f8:	f007 f9f6 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&startup, buff);
 80085fc:	463b      	mov	r3, r7
 80085fe:	4619      	mov	r1, r3
 8008600:	482c      	ldr	r0, [pc, #176]	; (80086b4 <UI_Startup+0x180>)
 8008602:	f7f9 f945 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8008606:	4b2b      	ldr	r3, [pc, #172]	; (80086b4 <UI_Startup+0x180>)
 8008608:	785a      	ldrb	r2, [r3, #1]
 800860a:	4b2a      	ldr	r3, [pc, #168]	; (80086b4 <UI_Startup+0x180>)
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	4413      	add	r3, r2
 8008610:	b2da      	uxtb	r2, r3
 8008612:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <UI_Startup+0x180>)
 8008614:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8008616:	2001      	movs	r0, #1
 8008618:	f001 fb6c 	bl	8009cf4 <HAL_Delay>
	if(!Storage_PlanInit()) {
 800861c:	f7fd f8e0 	bl	80057e0 <Storage_PlanInit>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d11d      	bne.n	8008662 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 8008626:	f001 fb59 	bl	8009cdc <HAL_GetTick>
 800862a:	4603      	mov	r3, r0
 800862c:	b29b      	uxth	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	463b      	mov	r3, r7
 8008632:	4925      	ldr	r1, [pc, #148]	; (80086c8 <UI_Startup+0x194>)
 8008634:	4618      	mov	r0, r3
 8008636:	f007 f9d7 	bl	800f9e8 <siprintf>
		DISP_DisplayText(&startup, buff);
 800863a:	463b      	mov	r3, r7
 800863c:	4619      	mov	r1, r3
 800863e:	481d      	ldr	r0, [pc, #116]	; (80086b4 <UI_Startup+0x180>)
 8008640:	f7f9 f926 	bl	8001890 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8008644:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <UI_Startup+0x180>)
 8008646:	785a      	ldrb	r2, [r3, #1]
 8008648:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <UI_Startup+0x180>)
 800864a:	791b      	ldrb	r3, [r3, #4]
 800864c:	4413      	add	r3, r2
 800864e:	b2da      	uxtb	r2, r3
 8008650:	4b18      	ldr	r3, [pc, #96]	; (80086b4 <UI_Startup+0x180>)
 8008652:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 8008654:	f7fc ffc2 	bl	80055dc <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 8008658:	f7fd f8c2 	bl	80057e0 <Storage_PlanInit>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f8      	beq.n	8008654 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 8008662:	4b1a      	ldr	r3, [pc, #104]	; (80086cc <UI_Startup+0x198>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd f930 	bl	80058cc <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 800866c:	f001 fb36 	bl	8009cdc <HAL_GetTick>
 8008670:	4603      	mov	r3, r0
 8008672:	b29b      	uxth	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	463b      	mov	r3, r7
 8008678:	4915      	ldr	r1, [pc, #84]	; (80086d0 <UI_Startup+0x19c>)
 800867a:	4618      	mov	r0, r3
 800867c:	f007 f9b4 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&startup, buff);
 8008680:	463b      	mov	r3, r7
 8008682:	4619      	mov	r1, r3
 8008684:	480b      	ldr	r0, [pc, #44]	; (80086b4 <UI_Startup+0x180>)
 8008686:	f7f9 f903 	bl	8001890 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <UI_Startup+0x180>)
 800868c:	785a      	ldrb	r2, [r3, #1]
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <UI_Startup+0x180>)
 8008690:	791b      	ldrb	r3, [r3, #4]
 8008692:	4413      	add	r3, r2
 8008694:	b2da      	uxtb	r2, r3
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <UI_Startup+0x180>)
 8008698:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 800869a:	bf00      	nop
 800869c:	f7fe f94c 	bl	8006938 <UI_ReadButton>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f8      	bne.n	800869c <UI_Startup+0x168>

	return UI_HOMESCREEN;
 80086aa:	2302      	movs	r3, #2
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000ffc 	.word	0x20000ffc
 80086b8:	08012230 	.word	0x08012230
 80086bc:	08012244 	.word	0x08012244
 80086c0:	08012258 	.word	0x08012258
 80086c4:	08012268 	.word	0x08012268
 80086c8:	0801227c 	.word	0x0801227c
 80086cc:	20000cd5 	.word	0x20000cd5
 80086d0:	08012290 	.word	0x08012290

080086d4 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 80086da:	4b2f      	ldr	r3, [pc, #188]	; (8008798 <UI_CPDisplayInit+0xc4>)
 80086dc:	2203      	movs	r2, #3
 80086de:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 80086e0:	4b2d      	ldr	r3, [pc, #180]	; (8008798 <UI_CPDisplayInit+0xc4>)
 80086e2:	220d      	movs	r2, #13
 80086e4:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 80086e6:	4b2c      	ldr	r3, [pc, #176]	; (8008798 <UI_CPDisplayInit+0xc4>)
 80086e8:	2278      	movs	r2, #120	; 0x78
 80086ea:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 80086ec:	4b2a      	ldr	r3, [pc, #168]	; (8008798 <UI_CPDisplayInit+0xc4>)
 80086ee:	220b      	movs	r2, #11
 80086f0:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 80086f2:	4b29      	ldr	r3, [pc, #164]	; (8008798 <UI_CPDisplayInit+0xc4>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 80086f8:	4b27      	ldr	r3, [pc, #156]	; (8008798 <UI_CPDisplayInit+0xc4>)
 80086fa:	2202      	movs	r2, #2
 80086fc:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 80086fe:	4b26      	ldr	r3, [pc, #152]	; (8008798 <UI_CPDisplayInit+0xc4>)
 8008700:	2202      	movs	r2, #2
 8008702:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8008704:	2301      	movs	r3, #1
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	e027      	b.n	800875a <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 800870a:	4923      	ldr	r1, [pc, #140]	; (8008798 <UI_CPDisplayInit+0xc4>)
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	440b      	add	r3, r1
 8008716:	4a20      	ldr	r2, [pc, #128]	; (8008798 <UI_CPDisplayInit+0xc4>)
 8008718:	6810      	ldr	r0, [r2, #0]
 800871a:	6018      	str	r0, [r3, #0]
 800871c:	8891      	ldrh	r1, [r2, #4]
 800871e:	7992      	ldrb	r2, [r2, #6]
 8008720:	8099      	strh	r1, [r3, #4]
 8008722:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	491b      	ldr	r1, [pc, #108]	; (8008798 <UI_CPDisplayInit+0xc4>)
 800872a:	4613      	mov	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	440b      	add	r3, r1
 8008732:	3301      	adds	r3, #1
 8008734:	781a      	ldrb	r2, [r3, #0]
 8008736:	4b18      	ldr	r3, [pc, #96]	; (8008798 <UI_CPDisplayInit+0xc4>)
 8008738:	791b      	ldrb	r3, [r3, #4]
 800873a:	4413      	add	r3, r2
 800873c:	b2db      	uxtb	r3, r3
 800873e:	3302      	adds	r3, #2
 8008740:	b2d8      	uxtb	r0, r3
 8008742:	4915      	ldr	r1, [pc, #84]	; (8008798 <UI_CPDisplayInit+0xc4>)
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	440b      	add	r3, r1
 800874e:	3301      	adds	r3, #1
 8008750:	4602      	mov	r2, r0
 8008752:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b03      	cmp	r3, #3
 800875e:	ddd4      	ble.n	800870a <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8008760:	4b0e      	ldr	r3, [pc, #56]	; (800879c <UI_CPDisplayInit+0xc8>)
 8008762:	2200      	movs	r2, #0
 8008764:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 8008766:	4b0d      	ldr	r3, [pc, #52]	; (800879c <UI_CPDisplayInit+0xc8>)
 8008768:	2200      	movs	r2, #0
 800876a:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <UI_CPDisplayInit+0xc8>)
 800876e:	227f      	movs	r2, #127	; 0x7f
 8008770:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 8008772:	4b0a      	ldr	r3, [pc, #40]	; (800879c <UI_CPDisplayInit+0xc8>)
 8008774:	220a      	movs	r2, #10
 8008776:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <UI_CPDisplayInit+0xc8>)
 800877a:	2201      	movs	r2, #1
 800877c:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 800877e:	4b07      	ldr	r3, [pc, #28]	; (800879c <UI_CPDisplayInit+0xc8>)
 8008780:	2202      	movs	r2, #2
 8008782:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <UI_CPDisplayInit+0xc8>)
 8008786:	2202      	movs	r2, #2
 8008788:	719a      	strb	r2, [r3, #6]
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	20001004 	.word	0x20001004
 800879c:	20001020 	.word	0x20001020

080087a0 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	4a31      	ldr	r2, [pc, #196]	; (8008874 <UI_CPDisplay+0xd4>)
 80087b0:	f992 2000 	ldrsb.w	r2, [r2]
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	dd06      	ble.n	80087c8 <UI_CPDisplay+0x28>
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	3b03      	subs	r3, #3
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	b25a      	sxtb	r2, r3
 80087c2:	4b2c      	ldr	r3, [pc, #176]	; (8008874 <UI_CPDisplay+0xd4>)
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e009      	b.n	80087dc <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	4a2a      	ldr	r2, [pc, #168]	; (8008874 <UI_CPDisplay+0xd4>)
 80087cc:	f992 2000 	ldrsb.w	r2, [r2]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	da03      	bge.n	80087dc <UI_CPDisplay+0x3c>
 80087d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80087d8:	4b26      	ldr	r3, [pc, #152]	; (8008874 <UI_CPDisplay+0xd4>)
 80087da:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 80087dc:	2300      	movs	r3, #0
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
 80087e0:	e03f      	b.n	8008862 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <UI_CPDisplay+0xd4>)
 80087e4:	f993 3000 	ldrsb.w	r3, [r3]
 80087e8:	461a      	mov	r2, r3
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	441a      	add	r2, r3
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d109      	bne.n	8008808 <UI_CPDisplay+0x68>
 80087f4:	4920      	ldr	r1, [pc, #128]	; (8008878 <UI_CPDisplay+0xd8>)
 80087f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f8:	4613      	mov	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	440b      	add	r3, r1
 8008800:	3302      	adds	r3, #2
 8008802:	2201      	movs	r2, #1
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e008      	b.n	800881a <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008808:	491b      	ldr	r1, [pc, #108]	; (8008878 <UI_CPDisplay+0xd8>)
 800880a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880c:	4613      	mov	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	440b      	add	r3, r1
 8008814:	3302      	adds	r3, #2
 8008816:	2200      	movs	r2, #0
 8008818:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 800881a:	4b16      	ldr	r3, [pc, #88]	; (8008874 <UI_CPDisplay+0xd4>)
 800881c:	f993 3000 	ldrsb.w	r3, [r3]
 8008820:	461a      	mov	r2, r3
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	441a      	add	r2, r3
 8008826:	4b13      	ldr	r3, [pc, #76]	; (8008874 <UI_CPDisplay+0xd4>)
 8008828:	f993 3000 	ldrsb.w	r3, [r3]
 800882c:	4619      	mov	r1, r3
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	440b      	add	r3, r1
 8008832:	4619      	mov	r1, r3
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	440b      	add	r3, r1
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f107 000c 	add.w	r0, r7, #12
 800883e:	490f      	ldr	r1, [pc, #60]	; (800887c <UI_CPDisplay+0xdc>)
 8008840:	f007 f8d2 	bl	800f9e8 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8008844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008846:	4613      	mov	r3, r2
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	4a0a      	ldr	r2, [pc, #40]	; (8008878 <UI_CPDisplay+0xd8>)
 800884e:	4413      	add	r3, r2
 8008850:	f107 020c 	add.w	r2, r7, #12
 8008854:	4611      	mov	r1, r2
 8008856:	4618      	mov	r0, r3
 8008858:	f7f9 f81a 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	3301      	adds	r3, #1
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	2b03      	cmp	r3, #3
 8008866:	ddbc      	ble.n	80087e2 <UI_CPDisplay+0x42>
	}
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	3728      	adds	r7, #40	; 0x28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20001030 	.word	0x20001030
 8008878:	20001004 	.word	0x20001004
 800887c:	080122a0 	.word	0x080122a0

08008880 <UI_CP>:

UI_Menu_Lists UI_CP() {
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 800888e:	4949      	ldr	r1, [pc, #292]	; (80089b4 <UI_CP+0x134>)
 8008890:	4849      	ldr	r0, [pc, #292]	; (80089b8 <UI_CP+0x138>)
 8008892:	f7f8 fffd 	bl	8001890 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 8008896:	79bb      	ldrb	r3, [r7, #6]
 8008898:	4948      	ldr	r1, [pc, #288]	; (80089bc <UI_CP+0x13c>)
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff ff80 	bl	80087a0 <UI_CPDisplay>
	tick = HAL_GetTick();
 80088a0:	f001 fa1c 	bl	8009cdc <HAL_GetTick>
 80088a4:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80088a6:	f001 fa19 	bl	8009cdc <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	2b45      	cmp	r3, #69	; 0x45
 80088b2:	d977      	bls.n	80089a4 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 80088b4:	f7fe f840 	bl	8006938 <UI_ReadButton>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	4293      	cmp	r3, r2
 80088c0:	d072      	beq.n	80089a8 <UI_CP+0x128>
		bt = UI_ReadButton();
 80088c2:	f7fe f839 	bl	8006938 <UI_ReadButton>
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d009      	beq.n	80088e8 <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 80088d4:	79bb      	ldrb	r3, [r7, #6]
 80088d6:	2b13      	cmp	r3, #19
 80088d8:	d102      	bne.n	80088e0 <UI_CP+0x60>
 80088da:	2300      	movs	r3, #0
 80088dc:	71bb      	strb	r3, [r7, #6]
 80088de:	e7da      	b.n	8008896 <UI_CP+0x16>
 80088e0:	79bb      	ldrb	r3, [r7, #6]
 80088e2:	3301      	adds	r3, #1
 80088e4:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 80088e6:	e7d6      	b.n	8008896 <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 80088f2:	79bb      	ldrb	r3, [r7, #6]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <UI_CP+0x7e>
 80088f8:	2313      	movs	r3, #19
 80088fa:	71bb      	strb	r3, [r7, #6]
 80088fc:	e7cb      	b.n	8008896 <UI_CP+0x16>
 80088fe:	79bb      	ldrb	r3, [r7, #6]
 8008900:	3b01      	subs	r3, #1
 8008902:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008904:	e7c7      	b.n	8008896 <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d016      	beq.n	800893e <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8008910:	79bb      	ldrb	r3, [r7, #6]
 8008912:	4a2b      	ldr	r2, [pc, #172]	; (80089c0 <UI_CP+0x140>)
 8008914:	4413      	add	r3, r2
 8008916:	789b      	ldrb	r3, [r3, #2]
 8008918:	2b63      	cmp	r3, #99	; 0x63
 800891a:	d105      	bne.n	8008928 <UI_CP+0xa8>
 800891c:	79bb      	ldrb	r3, [r7, #6]
 800891e:	4a28      	ldr	r2, [pc, #160]	; (80089c0 <UI_CP+0x140>)
 8008920:	4413      	add	r3, r2
 8008922:	2200      	movs	r2, #0
 8008924:	709a      	strb	r2, [r3, #2]
 8008926:	e7b6      	b.n	8008896 <UI_CP+0x16>
 8008928:	79bb      	ldrb	r3, [r7, #6]
 800892a:	4a25      	ldr	r2, [pc, #148]	; (80089c0 <UI_CP+0x140>)
 800892c:	441a      	add	r2, r3
 800892e:	7892      	ldrb	r2, [r2, #2]
 8008930:	3201      	adds	r2, #1
 8008932:	b2d1      	uxtb	r1, r2
 8008934:	4a22      	ldr	r2, [pc, #136]	; (80089c0 <UI_CP+0x140>)
 8008936:	4413      	add	r3, r2
 8008938:	460a      	mov	r2, r1
 800893a:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 800893c:	e7ab      	b.n	8008896 <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	d016      	beq.n	8008976 <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 8008948:	79bb      	ldrb	r3, [r7, #6]
 800894a:	4a1d      	ldr	r2, [pc, #116]	; (80089c0 <UI_CP+0x140>)
 800894c:	4413      	add	r3, r2
 800894e:	789b      	ldrb	r3, [r3, #2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d105      	bne.n	8008960 <UI_CP+0xe0>
 8008954:	79bb      	ldrb	r3, [r7, #6]
 8008956:	4a1a      	ldr	r2, [pc, #104]	; (80089c0 <UI_CP+0x140>)
 8008958:	4413      	add	r3, r2
 800895a:	2263      	movs	r2, #99	; 0x63
 800895c:	709a      	strb	r2, [r3, #2]
 800895e:	e79a      	b.n	8008896 <UI_CP+0x16>
 8008960:	79bb      	ldrb	r3, [r7, #6]
 8008962:	4a17      	ldr	r2, [pc, #92]	; (80089c0 <UI_CP+0x140>)
 8008964:	441a      	add	r2, r3
 8008966:	7892      	ldrb	r2, [r2, #2]
 8008968:	3a01      	subs	r2, #1
 800896a:	b2d1      	uxtb	r1, r2
 800896c:	4a14      	ldr	r2, [pc, #80]	; (80089c0 <UI_CP+0x140>)
 800896e:	4413      	add	r3, r2
 8008970:	460a      	mov	r2, r1
 8008972:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8008974:	e78f      	b.n	8008896 <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <UI_CP+0x104>
			return UI_HOMESCREEN;
 8008980:	2302      	movs	r3, #2
 8008982:	e013      	b.n	80089ac <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d08b      	beq.n	80088a6 <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 800898e:	490d      	ldr	r1, [pc, #52]	; (80089c4 <UI_CP+0x144>)
 8008990:	480d      	ldr	r0, [pc, #52]	; (80089c8 <UI_CP+0x148>)
 8008992:	f7f8 ff7d 	bl	8001890 <DISP_DisplayText>
			Storage_SetCheckpoint();
 8008996:	f7fd f81b 	bl	80059d0 <Storage_SetCheckpoint>
			HAL_Delay(200);
 800899a:	20c8      	movs	r0, #200	; 0xc8
 800899c:	f001 f9aa 	bl	8009cf4 <HAL_Delay>
			return UI_SET;
 80089a0:	2307      	movs	r3, #7
 80089a2:	e003      	b.n	80089ac <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80089a4:	bf00      	nop
 80089a6:	e77e      	b.n	80088a6 <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 80089a8:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80089aa:	e77c      	b.n	80088a6 <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	080122b0 	.word	0x080122b0
 80089b8:	20001020 	.word	0x20001020
 80089bc:	20000daa 	.word	0x20000daa
 80089c0:	20000da8 	.word	0x20000da8
 80089c4:	08012224 	.word	0x08012224
 80089c8:	20000f44 	.word	0x20000f44

080089cc <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	4a2c      	ldr	r2, [pc, #176]	; (8008a8c <UI_PlanSelectDisplay+0xc0>)
 80089da:	f992 2000 	ldrsb.w	r2, [r2]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	dd06      	ble.n	80089f2 <UI_PlanSelectDisplay+0x26>
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	3b03      	subs	r3, #3
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	b25a      	sxtb	r2, r3
 80089ec:	4b27      	ldr	r3, [pc, #156]	; (8008a8c <UI_PlanSelectDisplay+0xc0>)
 80089ee:	701a      	strb	r2, [r3, #0]
 80089f0:	e009      	b.n	8008a06 <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	4a25      	ldr	r2, [pc, #148]	; (8008a8c <UI_PlanSelectDisplay+0xc0>)
 80089f6:	f992 2000 	ldrsb.w	r2, [r2]
 80089fa:	4293      	cmp	r3, r2
 80089fc:	da03      	bge.n	8008a06 <UI_PlanSelectDisplay+0x3a>
 80089fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008a02:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <UI_PlanSelectDisplay+0xc0>)
 8008a04:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008a06:	2300      	movs	r3, #0
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0a:	e036      	b.n	8008a7a <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008a0c:	4b1f      	ldr	r3, [pc, #124]	; (8008a8c <UI_PlanSelectDisplay+0xc0>)
 8008a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	441a      	add	r2, r3
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d109      	bne.n	8008a32 <UI_PlanSelectDisplay+0x66>
 8008a1e:	491c      	ldr	r1, [pc, #112]	; (8008a90 <UI_PlanSelectDisplay+0xc4>)
 8008a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a22:	4613      	mov	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	440b      	add	r3, r1
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	701a      	strb	r2, [r3, #0]
 8008a30:	e008      	b.n	8008a44 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008a32:	4917      	ldr	r1, [pc, #92]	; (8008a90 <UI_PlanSelectDisplay+0xc4>)
 8008a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a36:	4613      	mov	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	440b      	add	r3, r1
 8008a3e:	3302      	adds	r3, #2
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <UI_PlanSelectDisplay+0xc0>)
 8008a46:	f993 3000 	ldrsb.w	r3, [r3]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	441a      	add	r2, r3
 8008a50:	f107 030c 	add.w	r3, r7, #12
 8008a54:	490f      	ldr	r1, [pc, #60]	; (8008a94 <UI_PlanSelectDisplay+0xc8>)
 8008a56:	4618      	mov	r0, r3
 8008a58:	f006 ffc6 	bl	800f9e8 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8008a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a5e:	4613      	mov	r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	4a0a      	ldr	r2, [pc, #40]	; (8008a90 <UI_PlanSelectDisplay+0xc4>)
 8008a66:	4413      	add	r3, r2
 8008a68:	f107 020c 	add.w	r2, r7, #12
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f8 ff0e 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	3301      	adds	r3, #1
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	ddc5      	ble.n	8008a0c <UI_PlanSelectDisplay+0x40>
	}
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	3728      	adds	r7, #40	; 0x28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20001031 	.word	0x20001031
 8008a90:	20001004 	.word	0x20001004
 8008a94:	080122bc 	.word	0x080122bc

08008a98 <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 8008aa6:	494f      	ldr	r1, [pc, #316]	; (8008be4 <UI_PlanSelect+0x14c>)
 8008aa8:	484f      	ldr	r0, [pc, #316]	; (8008be8 <UI_PlanSelect+0x150>)
 8008aaa:	f7f8 fef1 	bl	8001890 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 8008aae:	79bb      	ldrb	r3, [r7, #6]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff ff8b 	bl	80089cc <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 8008ab6:	f001 f911 	bl	8009cdc <HAL_GetTick>
 8008aba:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008abc:	f001 f90e 	bl	8009cdc <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b45      	cmp	r3, #69	; 0x45
 8008ac8:	f240 8083 	bls.w	8008bd2 <UI_PlanSelect+0x13a>
		if(bt == UI_ReadButton()) continue;
 8008acc:	f7fd ff34 	bl	8006938 <UI_ReadButton>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d07d      	beq.n	8008bd6 <UI_PlanSelect+0x13e>
		bt = UI_ReadButton();
 8008ada:	f7fd ff2d 	bl	8006938 <UI_ReadButton>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <UI_PlanSelect+0x68>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8008aec:	79bb      	ldrb	r3, [r7, #6]
 8008aee:	2b0e      	cmp	r3, #14
 8008af0:	d102      	bne.n	8008af8 <UI_PlanSelect+0x60>
 8008af2:	2300      	movs	r3, #0
 8008af4:	71bb      	strb	r3, [r7, #6]
 8008af6:	e7da      	b.n	8008aae <UI_PlanSelect+0x16>
 8008af8:	79bb      	ldrb	r3, [r7, #6]
 8008afa:	3301      	adds	r3, #1
 8008afc:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008afe:	e7d6      	b.n	8008aae <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <UI_PlanSelect+0x86>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 8008b0a:	79bb      	ldrb	r3, [r7, #6]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d102      	bne.n	8008b16 <UI_PlanSelect+0x7e>
 8008b10:	230e      	movs	r3, #14
 8008b12:	71bb      	strb	r3, [r7, #6]
 8008b14:	e7cb      	b.n	8008aae <UI_PlanSelect+0x16>
 8008b16:	79bb      	ldrb	r3, [r7, #6]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8008b1c:	e7c7      	b.n	8008aae <UI_PlanSelect+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d029      	beq.n	8008b7c <UI_PlanSelect+0xe4>
			DISP_DisplayText(&short_message, "Copy to this Plan?");
 8008b28:	4930      	ldr	r1, [pc, #192]	; (8008bec <UI_PlanSelect+0x154>)
 8008b2a:	4831      	ldr	r0, [pc, #196]	; (8008bf0 <UI_PlanSelect+0x158>)
 8008b2c:	f7f8 feb0 	bl	8001890 <DISP_DisplayText>
			while(1) {
				if(bt == UI_ReadButton()) continue;
 8008b30:	f7fd ff02 	bl	8006938 <UI_ReadButton>
 8008b34:	4603      	mov	r3, r0
 8008b36:	461a      	mov	r2, r3
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d01c      	beq.n	8008b78 <UI_PlanSelect+0xe0>
				bt = UI_ReadButton();
 8008b3e:	f7fd fefb 	bl	8006938 <UI_ReadButton>
 8008b42:	4603      	mov	r3, r0
 8008b44:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_OK_PRESS) {
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00d      	beq.n	8008b6c <UI_PlanSelect+0xd4>
					DISP_DisplayText(&short_message, "Copying...");
 8008b50:	4928      	ldr	r1, [pc, #160]	; (8008bf4 <UI_PlanSelect+0x15c>)
 8008b52:	4827      	ldr	r0, [pc, #156]	; (8008bf0 <UI_PlanSelect+0x158>)
 8008b54:	f7f8 fe9c 	bl	8001890 <DISP_DisplayText>
					Storage_CopyPlan(num_menu);
 8008b58:	79bb      	ldrb	r3, [r7, #6]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fd f9d2 	bl	8005f04 <Storage_CopyPlan>
					DISP_DisplayText(&short_message, "Copy done!");
 8008b60:	4925      	ldr	r1, [pc, #148]	; (8008bf8 <UI_PlanSelect+0x160>)
 8008b62:	4823      	ldr	r0, [pc, #140]	; (8008bf0 <UI_PlanSelect+0x158>)
 8008b64:	f7f8 fe94 	bl	8001890 <DISP_DisplayText>
					break;
 8008b68:	bf00      	nop
				}
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
					goto ui_cp;
				}
			}
			goto ui_cp;
 8008b6a:	e7a0      	b.n	8008aae <UI_PlanSelect+0x16>
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0dc      	beq.n	8008b30 <UI_PlanSelect+0x98>
					goto ui_cp;
 8008b76:	e79a      	b.n	8008aae <UI_PlanSelect+0x16>
				if(bt == UI_ReadButton()) continue;
 8008b78:	bf00      	nop
 8008b7a:	e7d9      	b.n	8008b30 <UI_PlanSelect+0x98>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <UI_PlanSelect+0xf2>
			return UI_HOMESCREEN;
 8008b86:	2302      	movs	r3, #2
 8008b88:	e027      	b.n	8008bda <UI_PlanSelect+0x142>
		}
		else if(bt & SW_OK_PRESS) {
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d093      	beq.n	8008abc <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8008b94:	4919      	ldr	r1, [pc, #100]	; (8008bfc <UI_PlanSelect+0x164>)
 8008b96:	4816      	ldr	r0, [pc, #88]	; (8008bf0 <UI_PlanSelect+0x158>)
 8008b98:	f7f8 fe7a 	bl	8001890 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8008b9c:	79bb      	ldrb	r3, [r7, #6]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fc fe94 	bl	80058cc <Storage_GetPlan>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <UI_PlanSelect+0x128>
				DISP_DisplayText(&short_message, "Reseting...");
 8008baa:	4915      	ldr	r1, [pc, #84]	; (8008c00 <UI_PlanSelect+0x168>)
 8008bac:	4810      	ldr	r0, [pc, #64]	; (8008bf0 <UI_PlanSelect+0x158>)
 8008bae:	f7f8 fe6f 	bl	8001890 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008bb2:	f7fc fd13 	bl	80055dc <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8008bb6:	f7fc fe13 	bl	80057e0 <Storage_PlanInit>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0f8      	beq.n	8008bb2 <UI_PlanSelect+0x11a>
			}
			DISP_DisplayText(&short_message, "Done!");
 8008bc0:	4910      	ldr	r1, [pc, #64]	; (8008c04 <UI_PlanSelect+0x16c>)
 8008bc2:	480b      	ldr	r0, [pc, #44]	; (8008bf0 <UI_PlanSelect+0x158>)
 8008bc4:	f7f8 fe64 	bl	8001890 <DISP_DisplayText>
			HAL_Delay(200);
 8008bc8:	20c8      	movs	r0, #200	; 0xc8
 8008bca:	f001 f893 	bl	8009cf4 <HAL_Delay>
			return UI_HOMESCREEN;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	e003      	b.n	8008bda <UI_PlanSelect+0x142>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008bd2:	bf00      	nop
 8008bd4:	e772      	b.n	8008abc <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8008bd6:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008bd8:	e770      	b.n	8008abc <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	080122c4 	.word	0x080122c4
 8008be8:	20001020 	.word	0x20001020
 8008bec:	080122d0 	.word	0x080122d0
 8008bf0:	20000f44 	.word	0x20000f44
 8008bf4:	080122e4 	.word	0x080122e4
 8008bf8:	080122f0 	.word	0x080122f0
 8008bfc:	080122fc 	.word	0x080122fc
 8008c00:	08012308 	.word	0x08012308
 8008c04:	08012314 	.word	0x08012314

08008c08 <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	4a29      	ldr	r2, [pc, #164]	; (8008cbc <UI_MemSettingDisplay+0xb4>)
 8008c16:	f992 2000 	ldrsb.w	r2, [r2]
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	dd06      	ble.n	8008c2e <UI_MemSettingDisplay+0x26>
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	3b03      	subs	r3, #3
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	b25a      	sxtb	r2, r3
 8008c28:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <UI_MemSettingDisplay+0xb4>)
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e009      	b.n	8008c42 <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4a22      	ldr	r2, [pc, #136]	; (8008cbc <UI_MemSettingDisplay+0xb4>)
 8008c32:	f992 2000 	ldrsb.w	r2, [r2]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	da03      	bge.n	8008c42 <UI_MemSettingDisplay+0x3a>
 8008c3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008c3e:	4b1f      	ldr	r3, [pc, #124]	; (8008cbc <UI_MemSettingDisplay+0xb4>)
 8008c40:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
 8008c46:	e031      	b.n	8008cac <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8008c48:	4b1c      	ldr	r3, [pc, #112]	; (8008cbc <UI_MemSettingDisplay+0xb4>)
 8008c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	441a      	add	r2, r3
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d109      	bne.n	8008c6e <UI_MemSettingDisplay+0x66>
 8008c5a:	4919      	ldr	r1, [pc, #100]	; (8008cc0 <UI_MemSettingDisplay+0xb8>)
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	1a9b      	subs	r3, r3, r2
 8008c64:	440b      	add	r3, r1
 8008c66:	3302      	adds	r3, #2
 8008c68:	2201      	movs	r2, #1
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	e008      	b.n	8008c80 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8008c6e:	4914      	ldr	r1, [pc, #80]	; (8008cc0 <UI_MemSettingDisplay+0xb8>)
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4613      	mov	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	1a9b      	subs	r3, r3, r2
 8008c78:	440b      	add	r3, r1
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4613      	mov	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	4a0d      	ldr	r2, [pc, #52]	; (8008cc0 <UI_MemSettingDisplay+0xb8>)
 8008c8a:	441a      	add	r2, r3
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <UI_MemSettingDisplay+0xb4>)
 8008c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8008c92:	4619      	mov	r1, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	440b      	add	r3, r1
 8008c98:	490a      	ldr	r1, [pc, #40]	; (8008cc4 <UI_MemSettingDisplay+0xbc>)
 8008c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7f8 fdf5 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	ddca      	ble.n	8008c48 <UI_MemSettingDisplay+0x40>
	}
}
 8008cb2:	bf00      	nop
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20001032 	.word	0x20001032
 8008cc0:	20000f78 	.word	0x20000f78
 8008cc4:	20000310 	.word	0x20000310

08008cc8 <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 8008cd2:	495b      	ldr	r1, [pc, #364]	; (8008e40 <UI_MemSetting+0x178>)
 8008cd4:	485b      	ldr	r0, [pc, #364]	; (8008e44 <UI_MemSetting+0x17c>)
 8008cd6:	f7f8 fddb 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 8008cda:	4b5b      	ldr	r3, [pc, #364]	; (8008e48 <UI_MemSetting+0x180>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff ff92 	bl	8008c08 <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8008ce4:	f000 fffa 	bl	8009cdc <HAL_GetTick>
 8008ce8:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008cea:	f000 fff7 	bl	8009cdc <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b45      	cmp	r3, #69	; 0x45
 8008cf6:	f240 8097 	bls.w	8008e28 <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 8008cfa:	f7fd fe1d 	bl	8006938 <UI_ReadButton>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	461a      	mov	r2, r3
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	f000 8091 	beq.w	8008e2c <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 8008d0a:	f7fd fe15 	bl	8006938 <UI_ReadButton>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00e      	beq.n	8008d3a <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8008d1c:	4b4a      	ldr	r3, [pc, #296]	; (8008e48 <UI_MemSetting+0x180>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d103      	bne.n	8008d2c <UI_MemSetting+0x64>
 8008d24:	4b48      	ldr	r3, [pc, #288]	; (8008e48 <UI_MemSetting+0x180>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	e7d6      	b.n	8008cda <UI_MemSetting+0x12>
 8008d2c:	4b46      	ldr	r3, [pc, #280]	; (8008e48 <UI_MemSetting+0x180>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	3301      	adds	r3, #1
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	4b44      	ldr	r3, [pc, #272]	; (8008e48 <UI_MemSetting+0x180>)
 8008d36:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8008d38:	e7cf      	b.n	8008cda <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 8008d44:	4b40      	ldr	r3, [pc, #256]	; (8008e48 <UI_MemSetting+0x180>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <UI_MemSetting+0x8c>
 8008d4c:	4b3e      	ldr	r3, [pc, #248]	; (8008e48 <UI_MemSetting+0x180>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e7c2      	b.n	8008cda <UI_MemSetting+0x12>
 8008d54:	4b3c      	ldr	r3, [pc, #240]	; (8008e48 <UI_MemSetting+0x180>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	4b3a      	ldr	r3, [pc, #232]	; (8008e48 <UI_MemSetting+0x180>)
 8008d5e:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8008d60:	e7bb      	b.n	8008cda <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <UI_MemSetting+0xae>
			num_menu = 0;
 8008d6c:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <UI_MemSetting+0x180>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8008d72:	2302      	movs	r3, #2
 8008d74:	e060      	b.n	8008e38 <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d004      	beq.n	8008d8a <UI_MemSetting+0xc2>
			num_menu = 0;
 8008d80:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <UI_MemSetting+0x180>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 8008d86:	2307      	movs	r3, #7
 8008d88:	e056      	b.n	8008e38 <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	; (8008e48 <UI_MemSetting+0x180>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d027      	beq.n	8008de2 <UI_MemSetting+0x11a>
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	dca9      	bgt.n	8008cea <UI_MemSetting+0x22>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <UI_MemSetting+0xd8>
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d018      	beq.n	8008dd0 <UI_MemSetting+0x108>
 8008d9e:	e04a      	b.n	8008e36 <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d042      	beq.n	8008e30 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 8008daa:	4928      	ldr	r1, [pc, #160]	; (8008e4c <UI_MemSetting+0x184>)
 8008dac:	4828      	ldr	r0, [pc, #160]	; (8008e50 <UI_MemSetting+0x188>)
 8008dae:	f7f8 fd6f 	bl	8001890 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008db2:	f7fc fc13 	bl	80055dc <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8008db6:	f7fc fd13 	bl	80057e0 <Storage_PlanInit>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0f8      	beq.n	8008db2 <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 8008dc0:	4924      	ldr	r1, [pc, #144]	; (8008e54 <UI_MemSetting+0x18c>)
 8008dc2:	4823      	ldr	r0, [pc, #140]	; (8008e50 <UI_MemSetting+0x188>)
 8008dc4:	f7f8 fd64 	bl	8001890 <DISP_DisplayText>
				HAL_Delay(200);
 8008dc8:	20c8      	movs	r0, #200	; 0xc8
 8008dca:	f000 ff93 	bl	8009cf4 <HAL_Delay>
				goto ui_mem;
 8008dce:	e784      	b.n	8008cda <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d02c      	beq.n	8008e34 <UI_MemSetting+0x16c>
				num_menu = 3;
 8008dda:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <UI_MemSetting+0x180>)
 8008ddc:	2203      	movs	r2, #3
 8008dde:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008de0:	e028      	b.n	8008e34 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 8008de2:	491d      	ldr	r1, [pc, #116]	; (8008e58 <UI_MemSetting+0x190>)
 8008de4:	481d      	ldr	r0, [pc, #116]	; (8008e5c <UI_MemSetting+0x194>)
 8008de6:	f7f8 fd53 	bl	8001890 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 8008dea:	f7fd fda5 	bl	8006938 <UI_ReadButton>
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <UI_MemSetting+0x13c>
					num_menu = 1;
 8008dfc:	4b12      	ldr	r3, [pc, #72]	; (8008e48 <UI_MemSetting+0x180>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 8008e02:	e76a      	b.n	8008cda <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0ed      	beq.n	8008dea <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 8008e0e:	4914      	ldr	r1, [pc, #80]	; (8008e60 <UI_MemSetting+0x198>)
 8008e10:	4812      	ldr	r0, [pc, #72]	; (8008e5c <UI_MemSetting+0x194>)
 8008e12:	f7f8 fd3d 	bl	8001890 <DISP_DisplayText>
					Storage_CleanInit();
 8008e16:	f7fd f8a7 	bl	8005f68 <Storage_CleanInit>
					HAL_Delay(1000);
 8008e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e1e:	f000 ff69 	bl	8009cf4 <HAL_Delay>
					HAL_NVIC_SystemReset();
 8008e22:	f001 fdd2 	bl	800a9ca <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 8008e26:	e7e0      	b.n	8008dea <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008e28:	bf00      	nop
 8008e2a:	e75e      	b.n	8008cea <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 8008e2c:	bf00      	nop
 8008e2e:	e75c      	b.n	8008cea <UI_MemSetting+0x22>
			break;
 8008e30:	bf00      	nop
 8008e32:	e75a      	b.n	8008cea <UI_MemSetting+0x22>
			break;
 8008e34:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8008e36:	e758      	b.n	8008cea <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	08012334 	.word	0x08012334
 8008e44:	20000f70 	.word	0x20000f70
 8008e48:	20001033 	.word	0x20001033
 8008e4c:	08012308 	.word	0x08012308
 8008e50:	20000f44 	.word	0x20000f44
 8008e54:	08012314 	.word	0x08012314
 8008e58:	0801233c 	.word	0x0801233c
 8008e5c:	20000f8d 	.word	0x20000f8d
 8008e60:	0801234c 	.word	0x0801234c

08008e64 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	4a53      	ldr	r2, [pc, #332]	; (8008fc0 <UI_PIDSettingDisplay+0x15c>)
 8008e72:	f992 2000 	ldrsb.w	r2, [r2]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	dd06      	ble.n	8008e8a <UI_PIDSettingDisplay+0x26>
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	3b03      	subs	r3, #3
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	b25a      	sxtb	r2, r3
 8008e84:	4b4e      	ldr	r3, [pc, #312]	; (8008fc0 <UI_PIDSettingDisplay+0x15c>)
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	e009      	b.n	8008e9e <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	4a4c      	ldr	r2, [pc, #304]	; (8008fc0 <UI_PIDSettingDisplay+0x15c>)
 8008e8e:	f992 2000 	ldrsb.w	r2, [r2]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	da03      	bge.n	8008e9e <UI_PIDSettingDisplay+0x3a>
 8008e96:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008e9a:	4b49      	ldr	r3, [pc, #292]	; (8008fc0 <UI_PIDSettingDisplay+0x15c>)
 8008e9c:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea2:	e083      	b.n	8008fac <UI_PIDSettingDisplay+0x148>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008ea4:	4b46      	ldr	r3, [pc, #280]	; (8008fc0 <UI_PIDSettingDisplay+0x15c>)
 8008ea6:	f993 3000 	ldrsb.w	r3, [r3]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	441a      	add	r2, r3
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d109      	bne.n	8008eca <UI_PIDSettingDisplay+0x66>
 8008eb6:	4943      	ldr	r1, [pc, #268]	; (8008fc4 <UI_PIDSettingDisplay+0x160>)
 8008eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eba:	4613      	mov	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	1a9b      	subs	r3, r3, r2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e008      	b.n	8008edc <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008eca:	493e      	ldr	r1, [pc, #248]	; (8008fc4 <UI_PIDSettingDisplay+0x160>)
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	4613      	mov	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	440b      	add	r3, r1
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8008edc:	4b38      	ldr	r3, [pc, #224]	; (8008fc0 <UI_PIDSettingDisplay+0x15c>)
 8008ede:	f993 3000 	ldrsb.w	r3, [r3]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	4413      	add	r3, r2
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d850      	bhi.n	8008f8e <UI_PIDSettingDisplay+0x12a>
 8008eec:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <UI_PIDSettingDisplay+0x90>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f09 	.word	0x08008f09
 8008ef8:	08008f23 	.word	0x08008f23
 8008efc:	08008f3d 	.word	0x08008f3d
 8008f00:	08008f57 	.word	0x08008f57
 8008f04:	08008f75 	.word	0x08008f75
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 8008f08:	4b2f      	ldr	r3, [pc, #188]	; (8008fc8 <UI_PIDSettingDisplay+0x164>)
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7f7 fb1b 	bl	8000548 <__aeabi_f2d>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	f107 000c 	add.w	r0, r7, #12
 8008f1a:	492c      	ldr	r1, [pc, #176]	; (8008fcc <UI_PIDSettingDisplay+0x168>)
 8008f1c:	f006 fd64 	bl	800f9e8 <siprintf>
			break;
 8008f20:	e035      	b.n	8008f8e <UI_PIDSettingDisplay+0x12a>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 8008f22:	4b29      	ldr	r3, [pc, #164]	; (8008fc8 <UI_PIDSettingDisplay+0x164>)
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f7 fb0e 	bl	8000548 <__aeabi_f2d>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	f107 000c 	add.w	r0, r7, #12
 8008f34:	4926      	ldr	r1, [pc, #152]	; (8008fd0 <UI_PIDSettingDisplay+0x16c>)
 8008f36:	f006 fd57 	bl	800f9e8 <siprintf>
			break;
 8008f3a:	e028      	b.n	8008f8e <UI_PIDSettingDisplay+0x12a>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 8008f3c:	4b22      	ldr	r3, [pc, #136]	; (8008fc8 <UI_PIDSettingDisplay+0x164>)
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f7 fb01 	bl	8000548 <__aeabi_f2d>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	f107 000c 	add.w	r0, r7, #12
 8008f4e:	4921      	ldr	r1, [pc, #132]	; (8008fd4 <UI_PIDSettingDisplay+0x170>)
 8008f50:	f006 fd4a 	bl	800f9e8 <siprintf>
			break;
 8008f54:	e01b      	b.n	8008f8e <UI_PIDSettingDisplay+0x12a>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 8008f56:	4b1c      	ldr	r3, [pc, #112]	; (8008fc8 <UI_PIDSettingDisplay+0x164>)
 8008f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <UI_PIDSettingDisplay+0x100>
 8008f60:	4a1d      	ldr	r2, [pc, #116]	; (8008fd8 <UI_PIDSettingDisplay+0x174>)
 8008f62:	e000      	b.n	8008f66 <UI_PIDSettingDisplay+0x102>
 8008f64:	4a1d      	ldr	r2, [pc, #116]	; (8008fdc <UI_PIDSettingDisplay+0x178>)
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	491d      	ldr	r1, [pc, #116]	; (8008fe0 <UI_PIDSettingDisplay+0x17c>)
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f006 fd3b 	bl	800f9e8 <siprintf>
			break;
 8008f72:	e00c      	b.n	8008f8e <UI_PIDSettingDisplay+0x12a>
		case 4:
			sprintf(buff, "a ~ %1.3f", plan.alpha);
 8008f74:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <UI_PIDSettingDisplay+0x164>)
 8008f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7f7 fae5 	bl	8000548 <__aeabi_f2d>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	f107 000c 	add.w	r0, r7, #12
 8008f86:	4917      	ldr	r1, [pc, #92]	; (8008fe4 <UI_PIDSettingDisplay+0x180>)
 8008f88:	f006 fd2e 	bl	800f9e8 <siprintf>
			break;
 8008f8c:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8008f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f90:	4613      	mov	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	4a0b      	ldr	r2, [pc, #44]	; (8008fc4 <UI_PIDSettingDisplay+0x160>)
 8008f98:	4413      	add	r3, r2
 8008f9a:	f107 020c 	add.w	r2, r7, #12
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f8 fc75 	bl	8001890 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	3301      	adds	r3, #1
 8008faa:	627b      	str	r3, [r7, #36]	; 0x24
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	f77f af78 	ble.w	8008ea4 <UI_PIDSettingDisplay+0x40>
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	3728      	adds	r7, #40	; 0x28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20001034 	.word	0x20001034
 8008fc4:	20001004 	.word	0x20001004
 8008fc8:	20000da8 	.word	0x20000da8
 8008fcc:	08012354 	.word	0x08012354
 8008fd0:	08012360 	.word	0x08012360
 8008fd4:	0801236c 	.word	0x0801236c
 8008fd8:	08012378 	.word	0x08012378
 8008fdc:	08012380 	.word	0x08012380
 8008fe0:	08012388 	.word	0x08012388
 8008fe4:	0801238c 	.word	0x0801238c

08008fe8 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8008ff6:	49a2      	ldr	r1, [pc, #648]	; (8009280 <UI_PIDSetting+0x298>)
 8008ff8:	48a2      	ldr	r0, [pc, #648]	; (8009284 <UI_PIDSetting+0x29c>)
 8008ffa:	f7f8 fc49 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 8008ffe:	4ba2      	ldr	r3, [pc, #648]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff ff2e 	bl	8008e64 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8009008:	f000 fe68 	bl	8009cdc <HAL_GetTick>
 800900c:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800900e:	f000 fe65 	bl	8009cdc <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	7bba      	ldrb	r2, [r7, #14]
 800901a:	2a01      	cmp	r2, #1
 800901c:	d101      	bne.n	8009022 <UI_PIDSetting+0x3a>
 800901e:	2219      	movs	r2, #25
 8009020:	e000      	b.n	8009024 <UI_PIDSetting+0x3c>
 8009022:	2246      	movs	r2, #70	; 0x46
 8009024:	429a      	cmp	r2, r3
 8009026:	f200 8211 	bhi.w	800944c <UI_PIDSetting+0x464>
		bt2 = UI_ReadButton();
 800902a:	f7fd fc85 	bl	8006938 <UI_ReadButton>
 800902e:	4603      	mov	r3, r0
 8009030:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8009032:	7bfa      	ldrb	r2, [r7, #15]
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	429a      	cmp	r2, r3
 8009038:	d103      	bne.n	8009042 <UI_PIDSetting+0x5a>
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8207 	beq.w	8009450 <UI_PIDSetting+0x468>
		bt = bt2;
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d010      	beq.n	8009072 <UI_PIDSetting+0x8a>
			if(num_menu==4) num_menu = 0; else num_menu++;
 8009050:	4b8d      	ldr	r3, [pc, #564]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b04      	cmp	r3, #4
 8009056:	d103      	bne.n	8009060 <UI_PIDSetting+0x78>
 8009058:	4b8b      	ldr	r3, [pc, #556]	; (8009288 <UI_PIDSetting+0x2a0>)
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e005      	b.n	800906c <UI_PIDSetting+0x84>
 8009060:	4b89      	ldr	r3, [pc, #548]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	b2da      	uxtb	r2, r3
 8009068:	4b87      	ldr	r3, [pc, #540]	; (8009288 <UI_PIDSetting+0x2a0>)
 800906a:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 8009070:	e7c5      	b.n	8008ffe <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d010      	beq.n	800909e <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 4; else num_menu--;
 800907c:	4b82      	ldr	r3, [pc, #520]	; (8009288 <UI_PIDSetting+0x2a0>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <UI_PIDSetting+0xa4>
 8009084:	4b80      	ldr	r3, [pc, #512]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009086:	2204      	movs	r2, #4
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e005      	b.n	8009098 <UI_PIDSetting+0xb0>
 800908c:	4b7e      	ldr	r3, [pc, #504]	; (8009288 <UI_PIDSetting+0x2a0>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	3b01      	subs	r3, #1
 8009092:	b2da      	uxtb	r2, r3
 8009094:	4b7c      	ldr	r3, [pc, #496]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009096:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 800909c:	e7af      	b.n	8008ffe <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <UI_PIDSetting+0xca>
			num_menu = 0;
 80090a8:	4b77      	ldr	r3, [pc, #476]	; (8009288 <UI_PIDSetting+0x2a0>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 80090ae:	2302      	movs	r3, #2
 80090b0:	e1d6      	b.n	8009460 <UI_PIDSetting+0x478>
		}
		else if(bt & SW_BK_PRESS) {
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00a      	beq.n	80090d2 <UI_PIDSetting+0xea>
			num_menu = 0;
 80090bc:	4b72      	ldr	r3, [pc, #456]	; (8009288 <UI_PIDSetting+0x2a0>)
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 80090c2:	4972      	ldr	r1, [pc, #456]	; (800928c <UI_PIDSetting+0x2a4>)
 80090c4:	4872      	ldr	r0, [pc, #456]	; (8009290 <UI_PIDSetting+0x2a8>)
 80090c6:	f7f8 fbe3 	bl	8001890 <DISP_DisplayText>
			Storage_SetPID();
 80090ca:	f7fc fc9f 	bl	8005a0c <Storage_SetPID>
			return UI_SET;
 80090ce:	2307      	movs	r3, #7
 80090d0:	e1c6      	b.n	8009460 <UI_PIDSetting+0x478>
		}
		switch(num_menu) {
 80090d2:	4b6d      	ldr	r3, [pc, #436]	; (8009288 <UI_PIDSetting+0x2a0>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	f000 8118 	beq.w	800930c <UI_PIDSetting+0x324>
 80090dc:	2b04      	cmp	r3, #4
 80090de:	dc96      	bgt.n	800900e <UI_PIDSetting+0x26>
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	dc02      	bgt.n	80090ea <UI_PIDSetting+0x102>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	da04      	bge.n	80090f2 <UI_PIDSetting+0x10a>
 80090e8:	e1b9      	b.n	800945e <UI_PIDSetting+0x476>
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	f000 80f9 	beq.w	80092e2 <UI_PIDSetting+0x2fa>
 80090f0:	e1b5      	b.n	800945e <UI_PIDSetting+0x476>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d12c      	bne.n	8009156 <UI_PIDSetting+0x16e>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 499.0; else plan.kpid[num_menu]-=1.0;
 80090fc:	4b62      	ldr	r3, [pc, #392]	; (8009288 <UI_PIDSetting+0x2a0>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	4a64      	ldr	r2, [pc, #400]	; (8009294 <UI_PIDSetting+0x2ac>)
 8009102:	3306      	adds	r3, #6
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	edd3 7a00 	vldr	s15, [r3]
 800910c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009114:	d108      	bne.n	8009128 <UI_PIDSetting+0x140>
 8009116:	4b5c      	ldr	r3, [pc, #368]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	4a5e      	ldr	r2, [pc, #376]	; (8009294 <UI_PIDSetting+0x2ac>)
 800911c:	3306      	adds	r3, #6
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	4a5d      	ldr	r2, [pc, #372]	; (8009298 <UI_PIDSetting+0x2b0>)
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	e013      	b.n	8009150 <UI_PIDSetting+0x168>
 8009128:	4b57      	ldr	r3, [pc, #348]	; (8009288 <UI_PIDSetting+0x2a0>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	4a59      	ldr	r2, [pc, #356]	; (8009294 <UI_PIDSetting+0x2ac>)
 800912e:	3306      	adds	r3, #6
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	edd3 7a00 	vldr	s15, [r3]
 8009138:	4b53      	ldr	r3, [pc, #332]	; (8009288 <UI_PIDSetting+0x2a0>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009144:	4a53      	ldr	r2, [pc, #332]	; (8009294 <UI_PIDSetting+0x2ac>)
 8009146:	3306      	adds	r3, #6
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8009150:	2301      	movs	r3, #1
 8009152:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009154:	e753      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800915c:	2b02      	cmp	r3, #2
 800915e:	d12f      	bne.n	80091c0 <UI_PIDSetting+0x1d8>
				if(plan.kpid[num_menu]==499.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 8009160:	4b49      	ldr	r3, [pc, #292]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	4a4b      	ldr	r2, [pc, #300]	; (8009294 <UI_PIDSetting+0x2ac>)
 8009166:	3306      	adds	r3, #6
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	edd3 7a00 	vldr	s15, [r3]
 8009170:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800929c <UI_PIDSetting+0x2b4>
 8009174:	eef4 7a47 	vcmp.f32	s15, s14
 8009178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917c:	d109      	bne.n	8009192 <UI_PIDSetting+0x1aa>
 800917e:	4b42      	ldr	r3, [pc, #264]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	4a44      	ldr	r2, [pc, #272]	; (8009294 <UI_PIDSetting+0x2ac>)
 8009184:	3306      	adds	r3, #6
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e013      	b.n	80091ba <UI_PIDSetting+0x1d2>
 8009192:	4b3d      	ldr	r3, [pc, #244]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	4a3f      	ldr	r2, [pc, #252]	; (8009294 <UI_PIDSetting+0x2ac>)
 8009198:	3306      	adds	r3, #6
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	edd3 7a00 	vldr	s15, [r3]
 80091a2:	4b39      	ldr	r3, [pc, #228]	; (8009288 <UI_PIDSetting+0x2a0>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091ae:	4a39      	ldr	r2, [pc, #228]	; (8009294 <UI_PIDSetting+0x2ac>)
 80091b0:	3306      	adds	r3, #6
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80091be:	e71e      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091c6:	2b30      	cmp	r3, #48	; 0x30
 80091c8:	d136      	bne.n	8009238 <UI_PIDSetting+0x250>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 499.0; else plan.kpid[num_menu]-=0.10;
 80091ca:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <UI_PIDSetting+0x2a0>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4a31      	ldr	r2, [pc, #196]	; (8009294 <UI_PIDSetting+0x2ac>)
 80091d0:	3306      	adds	r3, #6
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	edd3 7a00 	vldr	s15, [r3]
 80091da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e2:	d108      	bne.n	80091f6 <UI_PIDSetting+0x20e>
 80091e4:	4b28      	ldr	r3, [pc, #160]	; (8009288 <UI_PIDSetting+0x2a0>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	4a2a      	ldr	r2, [pc, #168]	; (8009294 <UI_PIDSetting+0x2ac>)
 80091ea:	3306      	adds	r3, #6
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	4a29      	ldr	r2, [pc, #164]	; (8009298 <UI_PIDSetting+0x2b0>)
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e01d      	b.n	8009232 <UI_PIDSetting+0x24a>
 80091f6:	4b24      	ldr	r3, [pc, #144]	; (8009288 <UI_PIDSetting+0x2a0>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	4a26      	ldr	r2, [pc, #152]	; (8009294 <UI_PIDSetting+0x2ac>)
 80091fc:	3306      	adds	r3, #6
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f7f7 f99f 	bl	8000548 <__aeabi_f2d>
 800920a:	a31b      	add	r3, pc, #108	; (adr r3, 8009278 <UI_PIDSetting+0x290>)
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	f7f7 f83a 	bl	8000288 <__aeabi_dsub>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	491b      	ldr	r1, [pc, #108]	; (8009288 <UI_PIDSetting+0x2a0>)
 800921a:	7809      	ldrb	r1, [r1, #0]
 800921c:	460c      	mov	r4, r1
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	f7f7 fce1 	bl	8000be8 <__aeabi_d2f>
 8009226:	4602      	mov	r2, r0
 8009228:	491a      	ldr	r1, [pc, #104]	; (8009294 <UI_PIDSetting+0x2ac>)
 800922a:	1da3      	adds	r3, r4, #6
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	440b      	add	r3, r1
 8009230:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8009232:	2301      	movs	r3, #1
 8009234:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009236:	e6e2      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800923e:	2b22      	cmp	r3, #34	; 0x22
 8009240:	f040 8108 	bne.w	8009454 <UI_PIDSetting+0x46c>
				if(plan.kpid[num_menu]==499.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 8009244:	4b10      	ldr	r3, [pc, #64]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	4a12      	ldr	r2, [pc, #72]	; (8009294 <UI_PIDSetting+0x2ac>)
 800924a:	3306      	adds	r3, #6
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	edd3 7a00 	vldr	s15, [r3]
 8009254:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800929c <UI_PIDSetting+0x2b4>
 8009258:	eef4 7a47 	vcmp.f32	s15, s14
 800925c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009260:	d11e      	bne.n	80092a0 <UI_PIDSetting+0x2b8>
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <UI_PIDSetting+0x2a0>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	4a0b      	ldr	r2, [pc, #44]	; (8009294 <UI_PIDSetting+0x2ac>)
 8009268:	3306      	adds	r3, #6
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	f04f 0200 	mov.w	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e032      	b.n	80092dc <UI_PIDSetting+0x2f4>
 8009276:	bf00      	nop
 8009278:	9999999a 	.word	0x9999999a
 800927c:	3fb99999 	.word	0x3fb99999
 8009280:	08012398 	.word	0x08012398
 8009284:	20000f70 	.word	0x20000f70
 8009288:	20001035 	.word	0x20001035
 800928c:	0801239c 	.word	0x0801239c
 8009290:	20000f44 	.word	0x20000f44
 8009294:	20000da8 	.word	0x20000da8
 8009298:	43f98000 	.word	0x43f98000
 800929c:	43f98000 	.word	0x43f98000
 80092a0:	4b77      	ldr	r3, [pc, #476]	; (8009480 <UI_PIDSetting+0x498>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4a77      	ldr	r2, [pc, #476]	; (8009484 <UI_PIDSetting+0x49c>)
 80092a6:	3306      	adds	r3, #6
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7f7 f94a 	bl	8000548 <__aeabi_f2d>
 80092b4:	a36c      	add	r3, pc, #432	; (adr r3, 8009468 <UI_PIDSetting+0x480>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ffe7 	bl	800028c <__adddf3>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	496f      	ldr	r1, [pc, #444]	; (8009480 <UI_PIDSetting+0x498>)
 80092c4:	7809      	ldrb	r1, [r1, #0]
 80092c6:	460c      	mov	r4, r1
 80092c8:	4610      	mov	r0, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7f7 fc8c 	bl	8000be8 <__aeabi_d2f>
 80092d0:	4602      	mov	r2, r0
 80092d2:	496c      	ldr	r1, [pc, #432]	; (8009484 <UI_PIDSetting+0x49c>)
 80092d4:	1da3      	adds	r3, r4, #6
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 80092dc:	2301      	movs	r3, #1
 80092de:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80092e0:	e68d      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	f003 0312 	and.w	r3, r3, #18
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80b5 	beq.w	8009458 <UI_PIDSetting+0x470>
				plan.status_pid = !plan.status_pid;
 80092ee:	4b65      	ldr	r3, [pc, #404]	; (8009484 <UI_PIDSetting+0x49c>)
 80092f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	4b60      	ldr	r3, [pc, #384]	; (8009484 <UI_PIDSetting+0x49c>)
 8009302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800930a:	e678      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			break;
		case 4:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009312:	2b10      	cmp	r3, #16
 8009314:	d121      	bne.n	800935a <UI_PIDSetting+0x372>
				plan.alpha-=0.01;
 8009316:	4b5b      	ldr	r3, [pc, #364]	; (8009484 <UI_PIDSetting+0x49c>)
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931a:	4618      	mov	r0, r3
 800931c:	f7f7 f914 	bl	8000548 <__aeabi_f2d>
 8009320:	a353      	add	r3, pc, #332	; (adr r3, 8009470 <UI_PIDSetting+0x488>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f6 ffaf 	bl	8000288 <__aeabi_dsub>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f7f7 fc59 	bl	8000be8 <__aeabi_d2f>
 8009336:	4603      	mov	r3, r0
 8009338:	4a52      	ldr	r2, [pc, #328]	; (8009484 <UI_PIDSetting+0x49c>)
 800933a:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha<0) plan.alpha = 1.0;
 800933c:	4b51      	ldr	r3, [pc, #324]	; (8009484 <UI_PIDSetting+0x49c>)
 800933e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934a:	d503      	bpl.n	8009354 <UI_PIDSetting+0x36c>
 800934c:	4b4d      	ldr	r3, [pc, #308]	; (8009484 <UI_PIDSetting+0x49c>)
 800934e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009352:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 8009354:	2301      	movs	r3, #1
 8009356:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8009358:	e651      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009360:	2b02      	cmp	r3, #2
 8009362:	d123      	bne.n	80093ac <UI_PIDSetting+0x3c4>
				plan.alpha+=0.01;
 8009364:	4b47      	ldr	r3, [pc, #284]	; (8009484 <UI_PIDSetting+0x49c>)
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	4618      	mov	r0, r3
 800936a:	f7f7 f8ed 	bl	8000548 <__aeabi_f2d>
 800936e:	a340      	add	r3, pc, #256	; (adr r3, 8009470 <UI_PIDSetting+0x488>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f6 ff8a 	bl	800028c <__adddf3>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4610      	mov	r0, r2
 800937e:	4619      	mov	r1, r3
 8009380:	f7f7 fc32 	bl	8000be8 <__aeabi_d2f>
 8009384:	4603      	mov	r3, r0
 8009386:	4a3f      	ldr	r2, [pc, #252]	; (8009484 <UI_PIDSetting+0x49c>)
 8009388:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha>1.0) plan.alpha = 0.0;
 800938a:	4b3e      	ldr	r3, [pc, #248]	; (8009484 <UI_PIDSetting+0x49c>)
 800938c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939c:	dd03      	ble.n	80093a6 <UI_PIDSetting+0x3be>
 800939e:	4b39      	ldr	r3, [pc, #228]	; (8009484 <UI_PIDSetting+0x49c>)
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80093aa:	e628      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093b2:	2b30      	cmp	r3, #48	; 0x30
 80093b4:	d121      	bne.n	80093fa <UI_PIDSetting+0x412>
				plan.alpha-=0.0010;
 80093b6:	4b33      	ldr	r3, [pc, #204]	; (8009484 <UI_PIDSetting+0x49c>)
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f7 f8c4 	bl	8000548 <__aeabi_f2d>
 80093c0:	a32d      	add	r3, pc, #180	; (adr r3, 8009478 <UI_PIDSetting+0x490>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 ff5f 	bl	8000288 <__aeabi_dsub>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	f7f7 fc09 	bl	8000be8 <__aeabi_d2f>
 80093d6:	4603      	mov	r3, r0
 80093d8:	4a2a      	ldr	r2, [pc, #168]	; (8009484 <UI_PIDSetting+0x49c>)
 80093da:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha<0) plan.alpha = 1.0;
 80093dc:	4b29      	ldr	r3, [pc, #164]	; (8009484 <UI_PIDSetting+0x49c>)
 80093de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80093e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ea:	d503      	bpl.n	80093f4 <UI_PIDSetting+0x40c>
 80093ec:	4b25      	ldr	r3, [pc, #148]	; (8009484 <UI_PIDSetting+0x49c>)
 80093ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80093f8:	e601      	b.n	8008ffe <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009400:	2b22      	cmp	r3, #34	; 0x22
 8009402:	d12b      	bne.n	800945c <UI_PIDSetting+0x474>
				plan.alpha+=0.001;
 8009404:	4b1f      	ldr	r3, [pc, #124]	; (8009484 <UI_PIDSetting+0x49c>)
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	4618      	mov	r0, r3
 800940a:	f7f7 f89d 	bl	8000548 <__aeabi_f2d>
 800940e:	a31a      	add	r3, pc, #104	; (adr r3, 8009478 <UI_PIDSetting+0x490>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f6 ff3a 	bl	800028c <__adddf3>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4610      	mov	r0, r2
 800941e:	4619      	mov	r1, r3
 8009420:	f7f7 fbe2 	bl	8000be8 <__aeabi_d2f>
 8009424:	4603      	mov	r3, r0
 8009426:	4a17      	ldr	r2, [pc, #92]	; (8009484 <UI_PIDSetting+0x49c>)
 8009428:	6293      	str	r3, [r2, #40]	; 0x28
				if(plan.alpha>1.0) plan.alpha = 0.0;
 800942a:	4b16      	ldr	r3, [pc, #88]	; (8009484 <UI_PIDSetting+0x49c>)
 800942c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943c:	dd03      	ble.n	8009446 <UI_PIDSetting+0x45e>
 800943e:	4b11      	ldr	r3, [pc, #68]	; (8009484 <UI_PIDSetting+0x49c>)
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	629a      	str	r2, [r3, #40]	; 0x28
				bt_status = 1;
 8009446:	2301      	movs	r3, #1
 8009448:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800944a:	e5d8      	b.n	8008ffe <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800944c:	bf00      	nop
 800944e:	e5de      	b.n	800900e <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 8009450:	bf00      	nop
 8009452:	e5dc      	b.n	800900e <UI_PIDSetting+0x26>
			break;
 8009454:	bf00      	nop
 8009456:	e5da      	b.n	800900e <UI_PIDSetting+0x26>
			break;
 8009458:	bf00      	nop
 800945a:	e5d8      	b.n	800900e <UI_PIDSetting+0x26>
			}
			break;
 800945c:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 800945e:	e5d6      	b.n	800900e <UI_PIDSetting+0x26>
		}
	}
	return UI_IDLE;
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	bd90      	pop	{r4, r7, pc}
 8009468:	9999999a 	.word	0x9999999a
 800946c:	3fb99999 	.word	0x3fb99999
 8009470:	47ae147b 	.word	0x47ae147b
 8009474:	3f847ae1 	.word	0x3f847ae1
 8009478:	d2f1a9fc 	.word	0xd2f1a9fc
 800947c:	3f50624d 	.word	0x3f50624d
 8009480:	20001035 	.word	0x20001035
 8009484:	20000da8 	.word	0x20000da8

08009488 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b08a      	sub	sp, #40	; 0x28
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<4; i++) {
 8009492:	2301      	movs	r3, #1
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
 8009496:	e053      	b.n	8009540 <UI_SpeedSetDisplay+0xb8>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949c:	429a      	cmp	r2, r3
 800949e:	d109      	bne.n	80094b4 <UI_SpeedSetDisplay+0x2c>
 80094a0:	492b      	ldr	r1, [pc, #172]	; (8009550 <UI_SpeedSetDisplay+0xc8>)
 80094a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	440b      	add	r3, r1
 80094ac:	3302      	adds	r3, #2
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e008      	b.n	80094c6 <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80094b4:	4926      	ldr	r1, [pc, #152]	; (8009550 <UI_SpeedSetDisplay+0xc8>)
 80094b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	1a9b      	subs	r3, r3, r2
 80094be:	440b      	add	r3, r1
 80094c0:	3302      	adds	r3, #2
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d01d      	beq.n	8009508 <UI_SpeedSetDisplay+0x80>
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	dc27      	bgt.n	8009522 <UI_SpeedSetDisplay+0x9a>
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d003      	beq.n	80094e0 <UI_SpeedSetDisplay+0x58>
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d00a      	beq.n	80094f4 <UI_SpeedSetDisplay+0x6c>
 80094de:	e020      	b.n	8009522 <UI_SpeedSetDisplay+0x9a>
		case 1:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 80094e0:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <UI_SpeedSetDisplay+0xcc>)
 80094e2:	7d9b      	ldrb	r3, [r3, #22]
 80094e4:	461a      	mov	r2, r3
 80094e6:	f107 030c 	add.w	r3, r7, #12
 80094ea:	491b      	ldr	r1, [pc, #108]	; (8009558 <UI_SpeedSetDisplay+0xd0>)
 80094ec:	4618      	mov	r0, r3
 80094ee:	f006 fa7b 	bl	800f9e8 <siprintf>
			break;
 80094f2:	e016      	b.n	8009522 <UI_SpeedSetDisplay+0x9a>
		case 2:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 80094f4:	4b17      	ldr	r3, [pc, #92]	; (8009554 <UI_SpeedSetDisplay+0xcc>)
 80094f6:	7ddb      	ldrb	r3, [r3, #23]
 80094f8:	461a      	mov	r2, r3
 80094fa:	f107 030c 	add.w	r3, r7, #12
 80094fe:	4917      	ldr	r1, [pc, #92]	; (800955c <UI_SpeedSetDisplay+0xd4>)
 8009500:	4618      	mov	r0, r3
 8009502:	f006 fa71 	bl	800f9e8 <siprintf>
			break;
 8009506:	e00c      	b.n	8009522 <UI_SpeedSetDisplay+0x9a>
		case 3:
			sprintf(buff, "Accel ~ %-1.2f", plan.acc);
 8009508:	4b12      	ldr	r3, [pc, #72]	; (8009554 <UI_SpeedSetDisplay+0xcc>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4618      	mov	r0, r3
 800950e:	f7f7 f81b 	bl	8000548 <__aeabi_f2d>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	f107 000c 	add.w	r0, r7, #12
 800951a:	4911      	ldr	r1, [pc, #68]	; (8009560 <UI_SpeedSetDisplay+0xd8>)
 800951c:	f006 fa64 	bl	800f9e8 <siprintf>
			break;
 8009520:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8009522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009524:	4613      	mov	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	4a09      	ldr	r2, [pc, #36]	; (8009550 <UI_SpeedSetDisplay+0xc8>)
 800952c:	4413      	add	r3, r2
 800952e:	f107 020c 	add.w	r2, r7, #12
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7f8 f9ab 	bl	8001890 <DISP_DisplayText>
	for(int i=1; i<4; i++) {
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	3301      	adds	r3, #1
 800953e:	627b      	str	r3, [r7, #36]	; 0x24
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	2b03      	cmp	r3, #3
 8009544:	dda8      	ble.n	8009498 <UI_SpeedSetDisplay+0x10>
	}
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	3728      	adds	r7, #40	; 0x28
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20001004 	.word	0x20001004
 8009554:	20000da8 	.word	0x20000da8
 8009558:	080123a8 	.word	0x080123a8
 800955c:	080123b8 	.word	0x080123b8
 8009560:	080123c8 	.word	0x080123c8

08009564 <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 8009576:	4980      	ldr	r1, [pc, #512]	; (8009778 <UI_SpeedSetting+0x214>)
 8009578:	4880      	ldr	r0, [pc, #512]	; (800977c <UI_SpeedSetting+0x218>)
 800957a:	f7f8 f989 	bl	8001890 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff ff81 	bl	8009488 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 8009586:	f000 fba9 	bl	8009cdc <HAL_GetTick>
 800958a:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 800958c:	f000 fba6 	bl	8009cdc <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	7b7a      	ldrb	r2, [r7, #13]
 8009598:	2a01      	cmp	r2, #1
 800959a:	d101      	bne.n	80095a0 <UI_SpeedSetting+0x3c>
 800959c:	221e      	movs	r2, #30
 800959e:	e000      	b.n	80095a2 <UI_SpeedSetting+0x3e>
 80095a0:	2246      	movs	r2, #70	; 0x46
 80095a2:	429a      	cmp	r2, r3
 80095a4:	f200 80df 	bhi.w	8009766 <UI_SpeedSetting+0x202>
		bt2 = UI_ReadButton();
 80095a8:	f7fd f9c6 	bl	8006938 <UI_ReadButton>
 80095ac:	4603      	mov	r3, r0
 80095ae:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80095b0:	7bfa      	ldrb	r2, [r7, #15]
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d103      	bne.n	80095c0 <UI_SpeedSetting+0x5c>
 80095b8:	7b7b      	ldrb	r3, [r7, #13]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80d5 	beq.w	800976a <UI_SpeedSetting+0x206>
		bt = bt2;
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <UI_SpeedSetting+0x80>
			if(num_menu!=3) num_menu++;
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d002      	beq.n	80095da <UI_SpeedSetting+0x76>
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	3301      	adds	r3, #1
 80095d8:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 80095de:	f7fc fa35 	bl	8005a4c <Storage_SetSpeed>
			goto ui_mem;
 80095e2:	e7cc      	b.n	800957e <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00e      	beq.n	800960c <UI_SpeedSetting+0xa8>
			if(num_menu==1) {
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d103      	bne.n	80095fc <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 80095f4:	f7fc fa2a 	bl	8005a4c <Storage_SetSpeed>
				return UI_HOMESCREEN;
 80095f8:	2302      	movs	r3, #2
 80095fa:	e0b8      	b.n	800976e <UI_SpeedSetting+0x20a>
			}
			else num_menu--;
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	3b01      	subs	r3, #1
 8009600:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8009606:	f7fc fa21 	bl	8005a4c <Storage_SetSpeed>
			goto ui_mem;
 800960a:	e7b8      	b.n	800957e <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <UI_SpeedSetting+0xbe>
			num_menu = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 800961a:	f7fc fa17 	bl	8005a4c <Storage_SetSpeed>
			return UI_HOMESCREEN;
 800961e:	2302      	movs	r3, #2
 8009620:	e0a5      	b.n	800976e <UI_SpeedSetting+0x20a>
		}
		switch(num_menu) {
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b03      	cmp	r3, #3
 8009626:	d05e      	beq.n	80096e6 <UI_SpeedSetting+0x182>
 8009628:	2b03      	cmp	r3, #3
 800962a:	dcaf      	bgt.n	800958c <UI_SpeedSetting+0x28>
 800962c:	2b01      	cmp	r3, #1
 800962e:	d002      	beq.n	8009636 <UI_SpeedSetting+0xd2>
 8009630:	2b02      	cmp	r3, #2
 8009632:	d02c      	beq.n	800968e <UI_SpeedSetting+0x12a>
 8009634:	e09a      	b.n	800976c <UI_SpeedSetting+0x208>
		case 1 :
			if(bt & SW_LF_PRESS) {
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	f003 0310 	and.w	r3, r3, #16
 800963c:	2b00      	cmp	r3, #0
 800963e:	d010      	beq.n	8009662 <UI_SpeedSetting+0xfe>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 8009640:	4b4f      	ldr	r3, [pc, #316]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009642:	7d9b      	ldrb	r3, [r3, #22]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <UI_SpeedSetting+0xec>
 8009648:	4b4d      	ldr	r3, [pc, #308]	; (8009780 <UI_SpeedSetting+0x21c>)
 800964a:	2263      	movs	r2, #99	; 0x63
 800964c:	759a      	strb	r2, [r3, #22]
 800964e:	e005      	b.n	800965c <UI_SpeedSetting+0xf8>
 8009650:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009652:	7d9b      	ldrb	r3, [r3, #22]
 8009654:	3b01      	subs	r3, #1
 8009656:	b2da      	uxtb	r2, r3
 8009658:	4b49      	ldr	r3, [pc, #292]	; (8009780 <UI_SpeedSetting+0x21c>)
 800965a:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 800965c:	2301      	movs	r3, #1
 800965e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009660:	e78d      	b.n	800957e <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	d010      	beq.n	800968e <UI_SpeedSetting+0x12a>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 800966c:	4b44      	ldr	r3, [pc, #272]	; (8009780 <UI_SpeedSetting+0x21c>)
 800966e:	7d9b      	ldrb	r3, [r3, #22]
 8009670:	2b63      	cmp	r3, #99	; 0x63
 8009672:	d103      	bne.n	800967c <UI_SpeedSetting+0x118>
 8009674:	4b42      	ldr	r3, [pc, #264]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009676:	2200      	movs	r2, #0
 8009678:	759a      	strb	r2, [r3, #22]
 800967a:	e005      	b.n	8009688 <UI_SpeedSetting+0x124>
 800967c:	4b40      	ldr	r3, [pc, #256]	; (8009780 <UI_SpeedSetting+0x21c>)
 800967e:	7d9b      	ldrb	r3, [r3, #22]
 8009680:	3301      	adds	r3, #1
 8009682:	b2da      	uxtb	r2, r3
 8009684:	4b3e      	ldr	r3, [pc, #248]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009686:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8009688:	2301      	movs	r3, #1
 800968a:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 800968c:	e777      	b.n	800957e <UI_SpeedSetting+0x1a>
			}
		case 2 :
			if(bt & SW_LF_PRESS) {
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	f003 0310 	and.w	r3, r3, #16
 8009694:	2b00      	cmp	r3, #0
 8009696:	d010      	beq.n	80096ba <UI_SpeedSetting+0x156>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 8009698:	4b39      	ldr	r3, [pc, #228]	; (8009780 <UI_SpeedSetting+0x21c>)
 800969a:	7ddb      	ldrb	r3, [r3, #23]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <UI_SpeedSetting+0x144>
 80096a0:	4b37      	ldr	r3, [pc, #220]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096a2:	2263      	movs	r2, #99	; 0x63
 80096a4:	75da      	strb	r2, [r3, #23]
 80096a6:	e005      	b.n	80096b4 <UI_SpeedSetting+0x150>
 80096a8:	4b35      	ldr	r3, [pc, #212]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096aa:	7ddb      	ldrb	r3, [r3, #23]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	4b33      	ldr	r3, [pc, #204]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096b2:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 80096b4:	2301      	movs	r3, #1
 80096b6:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80096b8:	e761      	b.n	800957e <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <UI_SpeedSetting+0x182>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 80096c4:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096c6:	7ddb      	ldrb	r3, [r3, #23]
 80096c8:	2b63      	cmp	r3, #99	; 0x63
 80096ca:	d103      	bne.n	80096d4 <UI_SpeedSetting+0x170>
 80096cc:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	75da      	strb	r2, [r3, #23]
 80096d2:	e005      	b.n	80096e0 <UI_SpeedSetting+0x17c>
 80096d4:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096d6:	7ddb      	ldrb	r3, [r3, #23]
 80096d8:	3301      	adds	r3, #1
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	4b28      	ldr	r3, [pc, #160]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096de:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 80096e0:	2301      	movs	r3, #1
 80096e2:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80096e4:	e74b      	b.n	800957e <UI_SpeedSetting+0x1a>
			}
		case 3 :
			if(bt & SW_LF_PRESS) {
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	f003 0310 	and.w	r3, r3, #16
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d018      	beq.n	8009722 <UI_SpeedSetting+0x1be>
				if(plan.acc==0) plan.acc = 99.; else plan.acc-=1;
 80096f0:	4b23      	ldr	r3, [pc, #140]	; (8009780 <UI_SpeedSetting+0x21c>)
 80096f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80096f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80096fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fe:	d103      	bne.n	8009708 <UI_SpeedSetting+0x1a4>
 8009700:	4b1f      	ldr	r3, [pc, #124]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009702:	4a20      	ldr	r2, [pc, #128]	; (8009784 <UI_SpeedSetting+0x220>)
 8009704:	62da      	str	r2, [r3, #44]	; 0x2c
 8009706:	e009      	b.n	800971c <UI_SpeedSetting+0x1b8>
 8009708:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <UI_SpeedSetting+0x21c>)
 800970a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800970e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009716:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009718:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				bt_status = 1;
 800971c:	2301      	movs	r3, #1
 800971e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009720:	e72d      	b.n	800957e <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	f43f af2f 	beq.w	800958c <UI_SpeedSetting+0x28>
				if(plan.acc==99) plan.acc = 0; else plan.acc+=1;
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009730:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009734:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009788 <UI_SpeedSetting+0x224>
 8009738:	eef4 7a47 	vcmp.f32	s15, s14
 800973c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009740:	d104      	bne.n	800974c <UI_SpeedSetting+0x1e8>
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <UI_SpeedSetting+0x21c>)
 8009744:	f04f 0200 	mov.w	r2, #0
 8009748:	62da      	str	r2, [r3, #44]	; 0x2c
 800974a:	e009      	b.n	8009760 <UI_SpeedSetting+0x1fc>
 800974c:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <UI_SpeedSetting+0x21c>)
 800974e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <UI_SpeedSetting+0x21c>)
 800975c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				bt_status = 1;
 8009760:	2301      	movs	r3, #1
 8009762:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8009764:	e70b      	b.n	800957e <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8009766:	bf00      	nop
 8009768:	e710      	b.n	800958c <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 800976a:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 800976c:	e70e      	b.n	800958c <UI_SpeedSetting+0x28>
			}

		}
	}
	return UI_IDLE;
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	080123d8 	.word	0x080123d8
 800977c:	20000f70 	.word	0x20000f70
 8009780:	20000da8 	.word	0x20000da8
 8009784:	42c60000 	.word	0x42c60000
 8009788:	42c60000 	.word	0x42c60000

0800978c <UI_Run>:


UI_Menu_Lists UI_Run() {
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 8009792:	f7fa f8a1 	bl	80038d8 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 8009796:	f7fa f8f1 	bl	800397c <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 800979a:	4b3c      	ldr	r3, [pc, #240]	; (800988c <UI_Run+0x100>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	4b3b      	ldr	r3, [pc, #236]	; (8009890 <UI_Run+0x104>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	4619      	mov	r1, r3
 80097a6:	4b3b      	ldr	r3, [pc, #236]	; (8009894 <UI_Run+0x108>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	4638      	mov	r0, r7
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	460b      	mov	r3, r1
 80097b0:	4939      	ldr	r1, [pc, #228]	; (8009898 <UI_Run+0x10c>)
 80097b2:	f006 f919 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&home_status, buff);
 80097b6:	463b      	mov	r3, r7
 80097b8:	4619      	mov	r1, r3
 80097ba:	4838      	ldr	r0, [pc, #224]	; (800989c <UI_Run+0x110>)
 80097bc:	f7f8 f868 	bl	8001890 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 80097c0:	4b37      	ldr	r3, [pc, #220]	; (80098a0 <UI_Run+0x114>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	4b37      	ldr	r3, [pc, #220]	; (80098a4 <UI_Run+0x118>)
 80097c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097cc:	463b      	mov	r3, r7
 80097ce:	4936      	ldr	r1, [pc, #216]	; (80098a8 <UI_Run+0x11c>)
 80097d0:	4618      	mov	r0, r3
 80097d2:	f006 f909 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 80097d6:	463b      	mov	r3, r7
 80097d8:	4619      	mov	r1, r3
 80097da:	4834      	ldr	r0, [pc, #208]	; (80098ac <UI_Run+0x120>)
 80097dc:	f7f8 f858 	bl	8001890 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 80097e0:	4b33      	ldr	r3, [pc, #204]	; (80098b0 <UI_Run+0x124>)
 80097e2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80097e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097ea:	ee17 3a90 	vmov	r3, s15
 80097ee:	b21b      	sxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	4b2f      	ldr	r3, [pc, #188]	; (80098b0 <UI_Run+0x124>)
 80097f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80097f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097fc:	ee17 3a90 	vmov	r3, s15
 8009800:	b21b      	sxth	r3, r3
 8009802:	4638      	mov	r0, r7
 8009804:	492b      	ldr	r1, [pc, #172]	; (80098b4 <UI_Run+0x128>)
 8009806:	f006 f8ef 	bl	800f9e8 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 800980a:	463b      	mov	r3, r7
 800980c:	4619      	mov	r1, r3
 800980e:	482a      	ldr	r0, [pc, #168]	; (80098b8 <UI_Run+0x12c>)
 8009810:	f7f8 f83e 	bl	8001890 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8009814:	4b29      	ldr	r3, [pc, #164]	; (80098bc <UI_Run+0x130>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d027      	beq.n	8009870 <UI_Run+0xe4>
		Plan_UIRoutine();
 8009820:	f7fa f8ac 	bl	800397c <Plan_UIRoutine>
		UI_ShowSensor();
 8009824:	f7fd f80a 	bl	800683c <UI_ShowSensor>
		bt = UI_ReadButton();
 8009828:	f7fd f886 	bl	8006938 <UI_ReadButton>
 800982c:	4603      	mov	r3, r0
 800982e:	461a      	mov	r2, r3
 8009830:	4b23      	ldr	r3, [pc, #140]	; (80098c0 <UI_Run+0x134>)
 8009832:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 8009834:	4b22      	ldr	r3, [pc, #136]	; (80098c0 <UI_Run+0x134>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00a      	beq.n	8009856 <UI_Run+0xca>
			main_flag &=~0x01;
 8009840:	4b1e      	ldr	r3, [pc, #120]	; (80098bc <UI_Run+0x130>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f023 0301 	bic.w	r3, r3, #1
 8009848:	b2da      	uxtb	r2, r3
 800984a:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <UI_Run+0x130>)
 800984c:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 800984e:	f7fa f80b 	bl	8003868 <Plan_Stop>
			return UI_HOMESCREEN;
 8009852:	2302      	movs	r3, #2
 8009854:	e016      	b.n	8009884 <UI_Run+0xf8>
		}
		if(main_flag & 0x80) {
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <UI_Run+0x130>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	b25b      	sxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	dad9      	bge.n	8009814 <UI_Run+0x88>
			main_flag &=~0x80;
 8009860:	4b16      	ldr	r3, [pc, #88]	; (80098bc <UI_Run+0x130>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <UI_Run+0x130>)
 800986c:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 800986e:	e792      	b.n	8009796 <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8009870:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 8009872:	4914      	ldr	r1, [pc, #80]	; (80098c4 <UI_Run+0x138>)
 8009874:	4814      	ldr	r0, [pc, #80]	; (80098c8 <UI_Run+0x13c>)
 8009876:	f7f8 f80b 	bl	8001890 <DISP_DisplayText>
	HAL_Delay(500);
 800987a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800987e:	f000 fa39 	bl	8009cf4 <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 8009882:	2302      	movs	r3, #2
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20000cd9 	.word	0x20000cd9
 8009890:	20000cd8 	.word	0x20000cd8
 8009894:	20000cd5 	.word	0x20000cd5
 8009898:	08011fb8 	.word	0x08011fb8
 800989c:	20000f70 	.word	0x20000f70
 80098a0:	20000d98 	.word	0x20000d98
 80098a4:	200002c4 	.word	0x200002c4
 80098a8:	080123e0 	.word	0x080123e0
 80098ac:	20001012 	.word	0x20001012
 80098b0:	20000a8c 	.word	0x20000a8c
 80098b4:	080123ec 	.word	0x080123ec
 80098b8:	20001019 	.word	0x20001019
 80098bc:	20000a6c 	.word	0x20000a6c
 80098c0:	20001036 	.word	0x20001036
 80098c4:	080123f8 	.word	0x080123f8
 80098c8:	20000f44 	.word	0x20000f44

080098cc <UI_Init>:


void UI_Init() {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 80098d0:	f7fd f8b6 	bl	8006a40 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 80098d4:	f7fd faa6 	bl	8006e24 <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 80098d8:	f7fd fc6c 	bl	80071b4 <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 80098dc:	f7fe fc50 	bl	8008180 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 80098e0:	f7fe fef8 	bl	80086d4 <UI_CPDisplayInit>
}
 80098e4:	bf00      	nop
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <UI_Main>:

void UI_Main() {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 80098ec:	f7f8 f99a 	bl	8001c24 <DISP_ClearAll>
	switch(retval) {
 80098f0:	4b3b      	ldr	r3, [pc, #236]	; (80099e0 <UI_Main+0xf8>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	2b0c      	cmp	r3, #12
 80098f8:	d870      	bhi.n	80099dc <UI_Main+0xf4>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <UI_Main+0x18>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009935 	.word	0x08009935
 8009904:	08009943 	.word	0x08009943
 8009908:	08009951 	.word	0x08009951
 800990c:	0800995f 	.word	0x0800995f
 8009910:	0800996d 	.word	0x0800996d
 8009914:	0800997b 	.word	0x0800997b
 8009918:	08009989 	.word	0x08009989
 800991c:	08009997 	.word	0x08009997
 8009920:	080099a5 	.word	0x080099a5
 8009924:	080099b3 	.word	0x080099b3
 8009928:	080099c1 	.word	0x080099c1
 800992c:	080099dd 	.word	0x080099dd
 8009930:	080099cf 	.word	0x080099cf
	case UI_STARTUP:
		retval = UI_Startup();
 8009934:	f7fe fdfe 	bl	8008534 <UI_Startup>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	4b28      	ldr	r3, [pc, #160]	; (80099e0 <UI_Main+0xf8>)
 800993e:	701a      	strb	r2, [r3, #0]
		break;
 8009940:	e04c      	b.n	80099dc <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 8009942:	f7fd f95b 	bl	8006bfc <UI_HomeScreen>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <UI_Main+0xf8>)
 800994c:	701a      	strb	r2, [r3, #0]
		break;
 800994e:	e045      	b.n	80099dc <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 8009950:	f7ff fe08 	bl	8009564 <UI_SpeedSetting>
 8009954:	4603      	mov	r3, r0
 8009956:	461a      	mov	r2, r3
 8009958:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <UI_Main+0xf8>)
 800995a:	701a      	strb	r2, [r3, #0]
		break;
 800995c:	e03e      	b.n	80099dc <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 800995e:	f7ff ff15 	bl	800978c <UI_Run>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <UI_Main+0xf8>)
 8009968:	701a      	strb	r2, [r3, #0]
		break;
 800996a:	e037      	b.n	80099dc <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 800996c:	f7fd ff84 	bl	8007878 <UI_PlanSet>
 8009970:	4603      	mov	r3, r0
 8009972:	461a      	mov	r2, r3
 8009974:	4b1a      	ldr	r3, [pc, #104]	; (80099e0 <UI_Main+0xf8>)
 8009976:	701a      	strb	r2, [r3, #0]
		break;
 8009978:	e030      	b.n	80099dc <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 800997a:	f7ff f88d 	bl	8008a98 <UI_PlanSelect>
 800997e:	4603      	mov	r3, r0
 8009980:	461a      	mov	r2, r3
 8009982:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <UI_Main+0xf8>)
 8009984:	701a      	strb	r2, [r3, #0]
		break;
 8009986:	e029      	b.n	80099dc <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 8009988:	f7fd fb38 	bl	8006ffc <UI_Setting>
 800998c:	4603      	mov	r3, r0
 800998e:	461a      	mov	r2, r3
 8009990:	4b13      	ldr	r3, [pc, #76]	; (80099e0 <UI_Main+0xf8>)
 8009992:	701a      	strb	r2, [r3, #0]
		break;
 8009994:	e022      	b.n	80099dc <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 8009996:	f7fe fcb5 	bl	8008304 <UI_ADCThreshold>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <UI_Main+0xf8>)
 80099a0:	701a      	strb	r2, [r3, #0]
		break;
 80099a2:	e01b      	b.n	80099dc <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 80099a4:	f7fe fd7e 	bl	80084a4 <UI_AutoCalib>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <UI_Main+0xf8>)
 80099ae:	701a      	strb	r2, [r3, #0]
		break;
 80099b0:	e014      	b.n	80099dc <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 80099b2:	f7fe ff65 	bl	8008880 <UI_CP>
 80099b6:	4603      	mov	r3, r0
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <UI_Main+0xf8>)
 80099bc:	701a      	strb	r2, [r3, #0]
		break;
 80099be:	e00d      	b.n	80099dc <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 80099c0:	f7ff fb12 	bl	8008fe8 <UI_PIDSetting>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <UI_Main+0xf8>)
 80099ca:	701a      	strb	r2, [r3, #0]
		break;
 80099cc:	e006      	b.n	80099dc <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 80099ce:	f7ff f97b 	bl	8008cc8 <UI_MemSetting>
 80099d2:	4603      	mov	r3, r0
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b02      	ldr	r3, [pc, #8]	; (80099e0 <UI_Main+0xf8>)
 80099d8:	701a      	strb	r2, [r3, #0]
		break;
 80099da:	bf00      	nop
	default:
		;
	}
}
 80099dc:	bf00      	nop
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000321 	.word	0x20000321

080099e4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80099e8:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 80099ea:	4a12      	ldr	r2, [pc, #72]	; (8009a34 <MX_USART3_UART_Init+0x50>)
 80099ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80099ee:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 80099f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80099f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80099f6:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80099fc:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009a02:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009a08:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 8009a0a:	220c      	movs	r2, #12
 8009a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009a1a:	4805      	ldr	r0, [pc, #20]	; (8009a30 <MX_USART3_UART_Init+0x4c>)
 8009a1c:	f004 fc4e 	bl	800e2bc <HAL_UART_Init>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009a26:	f7f8 fc82 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009a2a:	bf00      	nop
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20001038 	.word	0x20001038
 8009a34:	40004800 	.word	0x40004800

08009a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	; 0x28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	605a      	str	r2, [r3, #4]
 8009a4a:	609a      	str	r2, [r3, #8]
 8009a4c:	60da      	str	r2, [r3, #12]
 8009a4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a19      	ldr	r2, [pc, #100]	; (8009abc <HAL_UART_MspInit+0x84>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d12c      	bne.n	8009ab4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <HAL_UART_MspInit+0x88>)
 8009a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a62:	4a17      	ldr	r2, [pc, #92]	; (8009ac0 <HAL_UART_MspInit+0x88>)
 8009a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a68:	6413      	str	r3, [r2, #64]	; 0x40
 8009a6a:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <HAL_UART_MspInit+0x88>)
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <HAL_UART_MspInit+0x88>)
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7e:	4a10      	ldr	r2, [pc, #64]	; (8009ac0 <HAL_UART_MspInit+0x88>)
 8009a80:	f043 0304 	orr.w	r3, r3, #4
 8009a84:	6313      	str	r3, [r2, #48]	; 0x30
 8009a86:	4b0e      	ldr	r3, [pc, #56]	; (8009ac0 <HAL_UART_MspInit+0x88>)
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009a92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009aa4:	2307      	movs	r3, #7
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009aa8:	f107 0314 	add.w	r3, r7, #20
 8009aac:	4619      	mov	r1, r3
 8009aae:	4805      	ldr	r0, [pc, #20]	; (8009ac4 <HAL_UART_MspInit+0x8c>)
 8009ab0:	f001 fb0c 	bl	800b0cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009ab4:	bf00      	nop
 8009ab6:	3728      	adds	r7, #40	; 0x28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40004800 	.word	0x40004800
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	40020800 	.word	0x40020800

08009ac8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009acc:	4b14      	ldr	r3, [pc, #80]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ad4:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009adc:	2202      	movs	r2, #2
 8009ade:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ae0:	4b0f      	ldr	r3, [pc, #60]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ae8:	2202      	movs	r2, #2
 8009aea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009aec:	4b0c      	ldr	r3, [pc, #48]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009af8:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009afe:	4b08      	ldr	r3, [pc, #32]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b04:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b0a:	4805      	ldr	r0, [pc, #20]	; (8009b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009b0c:	f002 fc6b 	bl	800c3e6 <HAL_PCD_Init>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009b16:	f7f8 fc0a 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009b1a:	bf00      	nop
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000107c 	.word	0x2000107c

08009b24 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08a      	sub	sp, #40	; 0x28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b2c:	f107 0314 	add.w	r3, r7, #20
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	605a      	str	r2, [r3, #4]
 8009b36:	609a      	str	r2, [r3, #8]
 8009b38:	60da      	str	r2, [r3, #12]
 8009b3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b44:	d132      	bne.n	8009bac <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b46:	2300      	movs	r3, #0
 8009b48:	613b      	str	r3, [r7, #16]
 8009b4a:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	4a19      	ldr	r2, [pc, #100]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	6313      	str	r3, [r2, #48]	; 0x30
 8009b56:	4b17      	ldr	r3, [pc, #92]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b70:	2303      	movs	r3, #3
 8009b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b74:	230a      	movs	r3, #10
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b78:	f107 0314 	add.w	r3, r7, #20
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	480e      	ldr	r0, [pc, #56]	; (8009bb8 <HAL_PCD_MspInit+0x94>)
 8009b80:	f001 faa4 	bl	800b0cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b88:	4a0a      	ldr	r2, [pc, #40]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8e:	6353      	str	r3, [r2, #52]	; 0x34
 8009b90:	2300      	movs	r3, #0
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b98:	4a06      	ldr	r2, [pc, #24]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b9e:	6453      	str	r3, [r2, #68]	; 0x44
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <HAL_PCD_MspInit+0x90>)
 8009ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bac:	bf00      	nop
 8009bae:	3728      	adds	r7, #40	; 0x28
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40023800 	.word	0x40023800
 8009bb8:	40020000 	.word	0x40020000

08009bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009bc0:	480d      	ldr	r0, [pc, #52]	; (8009bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009bc2:	490e      	ldr	r1, [pc, #56]	; (8009bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009bc4:	4a0e      	ldr	r2, [pc, #56]	; (8009c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009bc8:	e002      	b.n	8009bd0 <LoopCopyDataInit>

08009bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009bce:	3304      	adds	r3, #4

08009bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009bd4:	d3f9      	bcc.n	8009bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009bd6:	4a0b      	ldr	r2, [pc, #44]	; (8009c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009bd8:	4c0b      	ldr	r4, [pc, #44]	; (8009c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009bdc:	e001      	b.n	8009be2 <LoopFillZerobss>

08009bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009be0:	3204      	adds	r2, #4

08009be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009be4:	d3fb      	bcc.n	8009bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009be6:	f7fc faa9 	bl	800613c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009bea:	f005 ffc9 	bl	800fb80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009bee:	f7f8 fa75 	bl	80020dc <main>
  bx  lr    
 8009bf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009bfc:	200004f4 	.word	0x200004f4
  ldr r2, =_sidata
 8009c00:	080127e0 	.word	0x080127e0
  ldr r2, =_sbss
 8009c04:	200004f4 	.word	0x200004f4
  ldr r4, =_ebss
 8009c08:	200016d8 	.word	0x200016d8

08009c0c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c0c:	e7fe      	b.n	8009c0c <CAN1_RX0_IRQHandler>
	...

08009c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c14:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <HAL_Init+0x40>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a0d      	ldr	r2, [pc, #52]	; (8009c50 <HAL_Init+0x40>)
 8009c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c20:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <HAL_Init+0x40>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a0a      	ldr	r2, [pc, #40]	; (8009c50 <HAL_Init+0x40>)
 8009c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c2c:	4b08      	ldr	r3, [pc, #32]	; (8009c50 <HAL_Init+0x40>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a07      	ldr	r2, [pc, #28]	; (8009c50 <HAL_Init+0x40>)
 8009c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c38:	2003      	movs	r0, #3
 8009c3a:	f000 fe91 	bl	800a960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c3e:	200f      	movs	r0, #15
 8009c40:	f000 f808 	bl	8009c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c44:	f7fb fbd8 	bl	80053f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	40023c00 	.word	0x40023c00

08009c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c5c:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <HAL_InitTick+0x54>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	4b12      	ldr	r3, [pc, #72]	; (8009cac <HAL_InitTick+0x58>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	4619      	mov	r1, r3
 8009c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fead 	bl	800a9d2 <HAL_SYSTICK_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e00e      	b.n	8009ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b0f      	cmp	r3, #15
 8009c86:	d80a      	bhi.n	8009c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c88:	2200      	movs	r2, #0
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	f000 fe71 	bl	800a976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c94:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <HAL_InitTick+0x5c>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	e000      	b.n	8009ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	2000028c 	.word	0x2000028c
 8009cac:	20000328 	.word	0x20000328
 8009cb0:	20000324 	.word	0x20000324

08009cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cb8:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <HAL_IncTick+0x20>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <HAL_IncTick+0x24>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	4a04      	ldr	r2, [pc, #16]	; (8009cd8 <HAL_IncTick+0x24>)
 8009cc6:	6013      	str	r3, [r2, #0]
}
 8009cc8:	bf00      	nop
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	20000328 	.word	0x20000328
 8009cd8:	20001588 	.word	0x20001588

08009cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
  return uwTick;
 8009ce0:	4b03      	ldr	r3, [pc, #12]	; (8009cf0 <HAL_GetTick+0x14>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	20001588 	.word	0x20001588

08009cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cfc:	f7ff ffee 	bl	8009cdc <HAL_GetTick>
 8009d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d005      	beq.n	8009d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <HAL_Delay+0x44>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d1a:	bf00      	nop
 8009d1c:	f7ff ffde 	bl	8009cdc <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d8f7      	bhi.n	8009d1c <HAL_Delay+0x28>
  {
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000328 	.word	0x20000328

08009d3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e033      	b.n	8009dba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d109      	bne.n	8009d6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7f7 fa1e 	bl	800119c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f003 0310 	and.w	r3, r3, #16
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d118      	bne.n	8009dac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d82:	f023 0302 	bic.w	r3, r3, #2
 8009d86:	f043 0202 	orr.w	r2, r3, #2
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fb78 	bl	800a484 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	f023 0303 	bic.w	r3, r3, #3
 8009da2:	f043 0201 	orr.w	r2, r3, #1
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	641a      	str	r2, [r3, #64]	; 0x40
 8009daa:	e001      	b.n	8009db0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b086      	sub	sp, #24
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d049      	beq.n	8009e8c <HAL_ADC_IRQHandler+0xca>
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d046      	beq.n	8009e8c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d105      	bne.n	8009e16 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d12b      	bne.n	8009e7c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d127      	bne.n	8009e7c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d006      	beq.n	8009e48 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d119      	bne.n	8009e7c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0220 	bic.w	r2, r2, #32
 8009e56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d105      	bne.n	8009e7c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e74:	f043 0201 	orr.w	r2, r3, #1
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7f8 fa4b 	bl	8002318 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f06f 0212 	mvn.w	r2, #18
 8009e8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d057      	beq.n	8009f52 <HAL_ADC_IRQHandler+0x190>
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d054      	beq.n	8009f52 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d105      	bne.n	8009ec0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d139      	bne.n	8009f42 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d006      	beq.n	8009eea <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d12b      	bne.n	8009f42 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d124      	bne.n	8009f42 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d11d      	bne.n	8009f42 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d119      	bne.n	8009f42 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f1c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d105      	bne.n	8009f42 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f043 0201 	orr.w	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fc1c 	bl	800a780 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f06f 020c 	mvn.w	r2, #12
 8009f50:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f60:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d017      	beq.n	8009f98 <HAL_ADC_IRQHandler+0x1d6>
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d014      	beq.n	8009f98 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d10d      	bne.n	8009f98 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f945 	bl	800a218 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f06f 0201 	mvn.w	r2, #1
 8009f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fa6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d015      	beq.n	8009fda <HAL_ADC_IRQHandler+0x218>
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d012      	beq.n	8009fda <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb8:	f043 0202 	orr.w	r2, r3, #2
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f06f 0220 	mvn.w	r2, #32
 8009fc8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f92e 	bl	800a22c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f06f 0220 	mvn.w	r2, #32
 8009fd8:	601a      	str	r2, [r3, #0]
  }
}
 8009fda:	bf00      	nop
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d101      	bne.n	800a002 <HAL_ADC_Start_DMA+0x1e>
 8009ffe:	2302      	movs	r3, #2
 800a000:	e0e9      	b.n	800a1d6 <HAL_ADC_Start_DMA+0x1f2>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b01      	cmp	r3, #1
 800a016:	d018      	beq.n	800a04a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f042 0201 	orr.w	r2, r2, #1
 800a026:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a028:	4b6d      	ldr	r3, [pc, #436]	; (800a1e0 <HAL_ADC_Start_DMA+0x1fc>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a6d      	ldr	r2, [pc, #436]	; (800a1e4 <HAL_ADC_Start_DMA+0x200>)
 800a02e:	fba2 2303 	umull	r2, r3, r2, r3
 800a032:	0c9a      	lsrs	r2, r3, #18
 800a034:	4613      	mov	r3, r2
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	4413      	add	r3, r2
 800a03a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a03c:	e002      	b.n	800a044 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3b01      	subs	r3, #1
 800a042:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1f9      	bne.n	800a03e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a058:	d107      	bne.n	800a06a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a068:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b01      	cmp	r3, #1
 800a076:	f040 80a1 	bne.w	800a1bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d007      	beq.n	800a0ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a0a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b8:	d106      	bne.n	800a0c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0be:	f023 0206 	bic.w	r2, r3, #6
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	645a      	str	r2, [r3, #68]	; 0x44
 800a0c6:	e002      	b.n	800a0ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a0d6:	4b44      	ldr	r3, [pc, #272]	; (800a1e8 <HAL_ADC_Start_DMA+0x204>)
 800a0d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0de:	4a43      	ldr	r2, [pc, #268]	; (800a1ec <HAL_ADC_Start_DMA+0x208>)
 800a0e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	4a42      	ldr	r2, [pc, #264]	; (800a1f0 <HAL_ADC_Start_DMA+0x20c>)
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	4a41      	ldr	r2, [pc, #260]	; (800a1f4 <HAL_ADC_Start_DMA+0x210>)
 800a0f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a10a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a11a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	334c      	adds	r3, #76	; 0x4c
 800a126:	4619      	mov	r1, r3
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f000 fd0c 	bl	800ab48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f003 031f 	and.w	r3, r3, #31
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d12a      	bne.n	800a192 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a2d      	ldr	r2, [pc, #180]	; (800a1f8 <HAL_ADC_Start_DMA+0x214>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d015      	beq.n	800a172 <HAL_ADC_Start_DMA+0x18e>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a2c      	ldr	r2, [pc, #176]	; (800a1fc <HAL_ADC_Start_DMA+0x218>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d105      	bne.n	800a15c <HAL_ADC_Start_DMA+0x178>
 800a150:	4b25      	ldr	r3, [pc, #148]	; (800a1e8 <HAL_ADC_Start_DMA+0x204>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f003 031f 	and.w	r3, r3, #31
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00a      	beq.n	800a172 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a27      	ldr	r2, [pc, #156]	; (800a200 <HAL_ADC_Start_DMA+0x21c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d136      	bne.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
 800a166:	4b20      	ldr	r3, [pc, #128]	; (800a1e8 <HAL_ADC_Start_DMA+0x204>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f003 0310 	and.w	r3, r3, #16
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d130      	bne.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d129      	bne.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a18e:	609a      	str	r2, [r3, #8]
 800a190:	e020      	b.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a18      	ldr	r2, [pc, #96]	; (800a1f8 <HAL_ADC_Start_DMA+0x214>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d11b      	bne.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d114      	bne.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a1b8:	609a      	str	r2, [r3, #8]
 800a1ba:	e00b      	b.n	800a1d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	f043 0210 	orr.w	r2, r3, #16
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1cc:	f043 0201 	orr.w	r2, r3, #1
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	2000028c 	.word	0x2000028c
 800a1e4:	431bde83 	.word	0x431bde83
 800a1e8:	40012300 	.word	0x40012300
 800a1ec:	0800a67d 	.word	0x0800a67d
 800a1f0:	0800a737 	.word	0x0800a737
 800a1f4:	0800a753 	.word	0x0800a753
 800a1f8:	40012000 	.word	0x40012000
 800a1fc:	40012100 	.word	0x40012100
 800a200:	40012200 	.word	0x40012200

0800a204 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a254:	2b01      	cmp	r3, #1
 800a256:	d101      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x1c>
 800a258:	2302      	movs	r3, #2
 800a25a:	e105      	b.n	800a468 <HAL_ADC_ConfigChannel+0x228>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b09      	cmp	r3, #9
 800a26a:	d925      	bls.n	800a2b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68d9      	ldr	r1, [r3, #12]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	b29b      	uxth	r3, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	3b1e      	subs	r3, #30
 800a282:	2207      	movs	r2, #7
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	43da      	mvns	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	400a      	ands	r2, r1
 800a290:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68d9      	ldr	r1, [r3, #12]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	4403      	add	r3, r0
 800a2aa:	3b1e      	subs	r3, #30
 800a2ac:	409a      	lsls	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	60da      	str	r2, [r3, #12]
 800a2b6:	e022      	b.n	800a2fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6919      	ldr	r1, [r3, #16]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	4413      	add	r3, r2
 800a2cc:	2207      	movs	r2, #7
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43da      	mvns	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	400a      	ands	r2, r1
 800a2da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6919      	ldr	r1, [r3, #16]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4403      	add	r3, r0
 800a2f4:	409a      	lsls	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	430a      	orrs	r2, r1
 800a2fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b06      	cmp	r3, #6
 800a304:	d824      	bhi.n	800a350 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	4613      	mov	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	3b05      	subs	r3, #5
 800a318:	221f      	movs	r2, #31
 800a31a:	fa02 f303 	lsl.w	r3, r2, r3
 800a31e:	43da      	mvns	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	400a      	ands	r2, r1
 800a326:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	4618      	mov	r0, r3
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	3b05      	subs	r3, #5
 800a342:	fa00 f203 	lsl.w	r2, r0, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	635a      	str	r2, [r3, #52]	; 0x34
 800a34e:	e04c      	b.n	800a3ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b0c      	cmp	r3, #12
 800a356:	d824      	bhi.n	800a3a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	3b23      	subs	r3, #35	; 0x23
 800a36a:	221f      	movs	r2, #31
 800a36c:	fa02 f303 	lsl.w	r3, r2, r3
 800a370:	43da      	mvns	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	400a      	ands	r2, r1
 800a378:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	4618      	mov	r0, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	3b23      	subs	r3, #35	; 0x23
 800a394:	fa00 f203 	lsl.w	r2, r0, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	430a      	orrs	r2, r1
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30
 800a3a0:	e023      	b.n	800a3ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3b41      	subs	r3, #65	; 0x41
 800a3b4:	221f      	movs	r2, #31
 800a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ba:	43da      	mvns	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	400a      	ands	r2, r1
 800a3c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	3b41      	subs	r3, #65	; 0x41
 800a3de:	fa00 f203 	lsl.w	r2, r0, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a3ea:	4b22      	ldr	r3, [pc, #136]	; (800a474 <HAL_ADC_ConfigChannel+0x234>)
 800a3ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a21      	ldr	r2, [pc, #132]	; (800a478 <HAL_ADC_ConfigChannel+0x238>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d109      	bne.n	800a40c <HAL_ADC_ConfigChannel+0x1cc>
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b12      	cmp	r3, #18
 800a3fe:	d105      	bne.n	800a40c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a19      	ldr	r2, [pc, #100]	; (800a478 <HAL_ADC_ConfigChannel+0x238>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d123      	bne.n	800a45e <HAL_ADC_ConfigChannel+0x21e>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d003      	beq.n	800a426 <HAL_ADC_ConfigChannel+0x1e6>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b11      	cmp	r3, #17
 800a424:	d11b      	bne.n	800a45e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b10      	cmp	r3, #16
 800a438:	d111      	bne.n	800a45e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a43a:	4b10      	ldr	r3, [pc, #64]	; (800a47c <HAL_ADC_ConfigChannel+0x23c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a10      	ldr	r2, [pc, #64]	; (800a480 <HAL_ADC_ConfigChannel+0x240>)
 800a440:	fba2 2303 	umull	r2, r3, r2, r3
 800a444:	0c9a      	lsrs	r2, r3, #18
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a450:	e002      	b.n	800a458 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	3b01      	subs	r3, #1
 800a456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f9      	bne.n	800a452 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	40012300 	.word	0x40012300
 800a478:	40012000 	.word	0x40012000
 800a47c:	2000028c 	.word	0x2000028c
 800a480:	431bde83 	.word	0x431bde83

0800a484 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a48c:	4b79      	ldr	r3, [pc, #484]	; (800a674 <ADC_Init+0x1f0>)
 800a48e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6859      	ldr	r1, [r3, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	021a      	lsls	r2, r3, #8
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6859      	ldr	r1, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6899      	ldr	r1, [r3, #8]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	4a58      	ldr	r2, [pc, #352]	; (800a678 <ADC_Init+0x1f4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d022      	beq.n	800a562 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a52a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6899      	ldr	r1, [r3, #8]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a54c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6899      	ldr	r1, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	609a      	str	r2, [r3, #8]
 800a560:	e00f      	b.n	800a582 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689a      	ldr	r2, [r3, #8]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a580:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0202 	bic.w	r2, r2, #2
 800a590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6899      	ldr	r1, [r3, #8]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7e1b      	ldrb	r3, [r3, #24]
 800a59c:	005a      	lsls	r2, r3, #1
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01b      	beq.n	800a5e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a5ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6859      	ldr	r1, [r3, #4]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	035a      	lsls	r2, r3, #13
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	e007      	b.n	800a5f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	3b01      	subs	r3, #1
 800a614:	051a      	lsls	r2, r3, #20
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a62c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6899      	ldr	r1, [r3, #8]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a63a:	025a      	lsls	r2, r3, #9
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6899      	ldr	r1, [r3, #8]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	029a      	lsls	r2, r3, #10
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	609a      	str	r2, [r3, #8]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	40012300 	.word	0x40012300
 800a678:	0f000001 	.word	0x0f000001

0800a67c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a692:	2b00      	cmp	r3, #0
 800a694:	d13c      	bne.n	800a710 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d12b      	bne.n	800a708 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d127      	bne.n	800a708 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d006      	beq.n	800a6d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d119      	bne.n	800a708 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0220 	bic.w	r2, r2, #32
 800a6e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d105      	bne.n	800a708 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a700:	f043 0201 	orr.w	r2, r3, #1
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7f7 fe05 	bl	8002318 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a70e:	e00e      	b.n	800a72e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	f003 0310 	and.w	r3, r3, #16
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff fd85 	bl	800a22c <HAL_ADC_ErrorCallback>
}
 800a722:	e004      	b.n	800a72e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
}
 800a72e:	bf00      	nop
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a742:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f7ff fd5d 	bl	800a204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2240      	movs	r2, #64	; 0x40
 800a764:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76a:	f043 0204 	orr.w	r2, r3, #4
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff fd5a 	bl	800a22c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f003 0307 	and.w	r3, r3, #7
 800a7a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a7a4:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <__NVIC_SetPriorityGrouping+0x44>)
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a7bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a7c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a7c6:	4a04      	ldr	r2, [pc, #16]	; (800a7d8 <__NVIC_SetPriorityGrouping+0x44>)
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	60d3      	str	r3, [r2, #12]
}
 800a7cc:	bf00      	nop
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	e000ed00 	.word	0xe000ed00

0800a7dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <__NVIC_GetPriorityGrouping+0x18>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	0a1b      	lsrs	r3, r3, #8
 800a7e6:	f003 0307 	and.w	r3, r3, #7
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	e000ed00 	.word	0xe000ed00

0800a7f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a806:	2b00      	cmp	r3, #0
 800a808:	db0b      	blt.n	800a822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	f003 021f 	and.w	r2, r3, #31
 800a810:	4907      	ldr	r1, [pc, #28]	; (800a830 <__NVIC_EnableIRQ+0x38>)
 800a812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	2001      	movs	r0, #1
 800a81a:	fa00 f202 	lsl.w	r2, r0, r2
 800a81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	e000e100 	.word	0xe000e100

0800a834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a844:	2b00      	cmp	r3, #0
 800a846:	db0a      	blt.n	800a85e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	490c      	ldr	r1, [pc, #48]	; (800a880 <__NVIC_SetPriority+0x4c>)
 800a84e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a852:	0112      	lsls	r2, r2, #4
 800a854:	b2d2      	uxtb	r2, r2
 800a856:	440b      	add	r3, r1
 800a858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a85c:	e00a      	b.n	800a874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	b2da      	uxtb	r2, r3
 800a862:	4908      	ldr	r1, [pc, #32]	; (800a884 <__NVIC_SetPriority+0x50>)
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	3b04      	subs	r3, #4
 800a86c:	0112      	lsls	r2, r2, #4
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	440b      	add	r3, r1
 800a872:	761a      	strb	r2, [r3, #24]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	e000e100 	.word	0xe000e100
 800a884:	e000ed00 	.word	0xe000ed00

0800a888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a888:	b480      	push	{r7}
 800a88a:	b089      	sub	sp, #36	; 0x24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f1c3 0307 	rsb	r3, r3, #7
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	bf28      	it	cs
 800a8a6:	2304      	movcs	r3, #4
 800a8a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	2b06      	cmp	r3, #6
 800a8b0:	d902      	bls.n	800a8b8 <NVIC_EncodePriority+0x30>
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	3b03      	subs	r3, #3
 800a8b6:	e000      	b.n	800a8ba <NVIC_EncodePriority+0x32>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c6:	43da      	mvns	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	401a      	ands	r2, r3
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a8d0:	f04f 31ff 	mov.w	r1, #4294967295
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8da:	43d9      	mvns	r1, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8e0:	4313      	orrs	r3, r2
         );
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3724      	adds	r7, #36	; 0x24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a8f4:	f3bf 8f4f 	dsb	sy
}
 800a8f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a8fa:	4b06      	ldr	r3, [pc, #24]	; (800a914 <__NVIC_SystemReset+0x24>)
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a902:	4904      	ldr	r1, [pc, #16]	; (800a914 <__NVIC_SystemReset+0x24>)
 800a904:	4b04      	ldr	r3, [pc, #16]	; (800a918 <__NVIC_SystemReset+0x28>)
 800a906:	4313      	orrs	r3, r2
 800a908:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a90a:	f3bf 8f4f 	dsb	sy
}
 800a90e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a910:	bf00      	nop
 800a912:	e7fd      	b.n	800a910 <__NVIC_SystemReset+0x20>
 800a914:	e000ed00 	.word	0xe000ed00
 800a918:	05fa0004 	.word	0x05fa0004

0800a91c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3b01      	subs	r3, #1
 800a928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a92c:	d301      	bcc.n	800a932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a92e:	2301      	movs	r3, #1
 800a930:	e00f      	b.n	800a952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a932:	4a0a      	ldr	r2, [pc, #40]	; (800a95c <SysTick_Config+0x40>)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3b01      	subs	r3, #1
 800a938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a93a:	210f      	movs	r1, #15
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	f7ff ff78 	bl	800a834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a944:	4b05      	ldr	r3, [pc, #20]	; (800a95c <SysTick_Config+0x40>)
 800a946:	2200      	movs	r2, #0
 800a948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a94a:	4b04      	ldr	r3, [pc, #16]	; (800a95c <SysTick_Config+0x40>)
 800a94c:	2207      	movs	r2, #7
 800a94e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	e000e010 	.word	0xe000e010

0800a960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff ff13 	bl	800a794 <__NVIC_SetPriorityGrouping>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a976:	b580      	push	{r7, lr}
 800a978:	b086      	sub	sp, #24
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	4603      	mov	r3, r0
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a988:	f7ff ff28 	bl	800a7dc <__NVIC_GetPriorityGrouping>
 800a98c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	6978      	ldr	r0, [r7, #20]
 800a994:	f7ff ff78 	bl	800a888 <NVIC_EncodePriority>
 800a998:	4602      	mov	r2, r0
 800a99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff ff47 	bl	800a834 <__NVIC_SetPriority>
}
 800a9a6:	bf00      	nop
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a9b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff ff1b 	bl	800a7f8 <__NVIC_EnableIRQ>
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a9ce:	f7ff ff8f 	bl	800a8f0 <__NVIC_SystemReset>

0800a9d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff ff9e 	bl	800a91c <SysTick_Config>
 800a9e0:	4603      	mov	r3, r0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a9f8:	f7ff f970 	bl	8009cdc <HAL_GetTick>
 800a9fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e099      	b.n	800ab3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0201 	bic.w	r2, r2, #1
 800aa26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa28:	e00f      	b.n	800aa4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa2a:	f7ff f957 	bl	8009cdc <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b05      	cmp	r3, #5
 800aa36:	d908      	bls.n	800aa4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2203      	movs	r2, #3
 800aa42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e078      	b.n	800ab3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e8      	bne.n	800aa2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	4b38      	ldr	r3, [pc, #224]	; (800ab44 <HAL_DMA_Init+0x158>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d107      	bne.n	800aab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaac:	4313      	orrs	r3, r2
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f023 0307 	bic.w	r3, r3, #7
 800aaca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d117      	bne.n	800ab0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00e      	beq.n	800ab0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fa6f 	bl	800afd4 <DMA_CheckFifoParam>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d008      	beq.n	800ab0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2240      	movs	r2, #64	; 0x40
 800ab00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e016      	b.n	800ab3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa26 	bl	800af68 <DMA_CalcBaseAndBitshift>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	223f      	movs	r2, #63	; 0x3f
 800ab26:	409a      	lsls	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	f010803f 	.word	0xf010803f

0800ab48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_DMA_Start_IT+0x26>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e040      	b.n	800abf0 <HAL_DMA_Start_IT+0xa8>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d12f      	bne.n	800abe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2202      	movs	r2, #2
 800ab86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 f9b8 	bl	800af0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba0:	223f      	movs	r2, #63	; 0x3f
 800aba2:	409a      	lsls	r2, r3
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0216 	orr.w	r2, r2, #22
 800abb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d007      	beq.n	800abd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0208 	orr.w	r2, r2, #8
 800abce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f042 0201 	orr.w	r2, r2, #1
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	e005      	b.n	800abee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800abea:	2302      	movs	r3, #2
 800abec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800abee:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ac04:	4b8e      	ldr	r3, [pc, #568]	; (800ae40 <HAL_DMA_IRQHandler+0x248>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a8e      	ldr	r2, [pc, #568]	; (800ae44 <HAL_DMA_IRQHandler+0x24c>)
 800ac0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0e:	0a9b      	lsrs	r3, r3, #10
 800ac10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac22:	2208      	movs	r2, #8
 800ac24:	409a      	lsls	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d01a      	beq.n	800ac64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d013      	beq.n	800ac64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 0204 	bic.w	r2, r2, #4
 800ac4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac50:	2208      	movs	r2, #8
 800ac52:	409a      	lsls	r2, r3
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5c:	f043 0201 	orr.w	r2, r3, #1
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac68:	2201      	movs	r2, #1
 800ac6a:	409a      	lsls	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d012      	beq.n	800ac9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00b      	beq.n	800ac9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac86:	2201      	movs	r2, #1
 800ac88:	409a      	lsls	r2, r3
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac92:	f043 0202 	orr.w	r2, r3, #2
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9e:	2204      	movs	r2, #4
 800aca0:	409a      	lsls	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4013      	ands	r3, r2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d012      	beq.n	800acd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0302 	and.w	r3, r3, #2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00b      	beq.n	800acd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acbc:	2204      	movs	r2, #4
 800acbe:	409a      	lsls	r2, r3
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc8:	f043 0204 	orr.w	r2, r3, #4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd4:	2210      	movs	r2, #16
 800acd6:	409a      	lsls	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4013      	ands	r3, r2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d043      	beq.n	800ad68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0308 	and.w	r3, r3, #8
 800acea:	2b00      	cmp	r3, #0
 800acec:	d03c      	beq.n	800ad68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acf2:	2210      	movs	r2, #16
 800acf4:	409a      	lsls	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d018      	beq.n	800ad3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d108      	bne.n	800ad28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d024      	beq.n	800ad68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
 800ad26:	e01f      	b.n	800ad68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01b      	beq.n	800ad68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
 800ad38:	e016      	b.n	800ad68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d107      	bne.n	800ad58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f022 0208 	bic.w	r2, r2, #8
 800ad56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	409a      	lsls	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4013      	ands	r3, r2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 808f 	beq.w	800ae98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0310 	and.w	r3, r3, #16
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8087 	beq.w	800ae98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad8e:	2220      	movs	r2, #32
 800ad90:	409a      	lsls	r2, r3
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	d136      	bne.n	800ae10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0216 	bic.w	r2, r2, #22
 800adb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	695a      	ldr	r2, [r3, #20]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d103      	bne.n	800add2 <HAL_DMA_IRQHandler+0x1da>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adce:	2b00      	cmp	r3, #0
 800add0:	d007      	beq.n	800ade2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0208 	bic.w	r2, r2, #8
 800ade0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ade6:	223f      	movs	r2, #63	; 0x3f
 800ade8:	409a      	lsls	r2, r3
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d07e      	beq.n	800af04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
        }
        return;
 800ae0e:	e079      	b.n	800af04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01d      	beq.n	800ae5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10d      	bne.n	800ae48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d031      	beq.n	800ae98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	4798      	blx	r3
 800ae3c:	e02c      	b.n	800ae98 <HAL_DMA_IRQHandler+0x2a0>
 800ae3e:	bf00      	nop
 800ae40:	2000028c 	.word	0x2000028c
 800ae44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d023      	beq.n	800ae98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	4798      	blx	r3
 800ae58:	e01e      	b.n	800ae98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10f      	bne.n	800ae88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f022 0210 	bic.w	r2, r2, #16
 800ae76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d003      	beq.n	800ae98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d032      	beq.n	800af06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d022      	beq.n	800aef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2205      	movs	r2, #5
 800aeb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 0201 	bic.w	r2, r2, #1
 800aec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60bb      	str	r3, [r7, #8]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d307      	bcc.n	800aee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1f2      	bne.n	800aec4 <HAL_DMA_IRQHandler+0x2cc>
 800aede:	e000      	b.n	800aee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800aee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
 800af02:	e000      	b.n	800af06 <HAL_DMA_IRQHandler+0x30e>
        return;
 800af04:	bf00      	nop
    }
  }
}
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	2b40      	cmp	r3, #64	; 0x40
 800af38:	d108      	bne.n	800af4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af4a:	e007      	b.n	800af5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	60da      	str	r2, [r3, #12]
}
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	3b10      	subs	r3, #16
 800af78:	4a14      	ldr	r2, [pc, #80]	; (800afcc <DMA_CalcBaseAndBitshift+0x64>)
 800af7a:	fba2 2303 	umull	r2, r3, r2, r3
 800af7e:	091b      	lsrs	r3, r3, #4
 800af80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af82:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <DMA_CalcBaseAndBitshift+0x68>)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b03      	cmp	r3, #3
 800af94:	d909      	bls.n	800afaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	1d1a      	adds	r2, r3, #4
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	659a      	str	r2, [r3, #88]	; 0x58
 800afa8:	e007      	b.n	800afba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800afb2:	f023 0303 	bic.w	r3, r3, #3
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	aaaaaaab 	.word	0xaaaaaaab
 800afd0:	08012424 	.word	0x08012424

0800afd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d11f      	bne.n	800b02e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d856      	bhi.n	800b0a2 <DMA_CheckFifoParam+0xce>
 800aff4:	a201      	add	r2, pc, #4	; (adr r2, 800affc <DMA_CheckFifoParam+0x28>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800b00d 	.word	0x0800b00d
 800b000:	0800b01f 	.word	0x0800b01f
 800b004:	0800b00d 	.word	0x0800b00d
 800b008:	0800b0a3 	.word	0x0800b0a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d046      	beq.n	800b0a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b01c:	e043      	b.n	800b0a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b026:	d140      	bne.n	800b0aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b02c:	e03d      	b.n	800b0aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b036:	d121      	bne.n	800b07c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d837      	bhi.n	800b0ae <DMA_CheckFifoParam+0xda>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <DMA_CheckFifoParam+0x70>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b055 	.word	0x0800b055
 800b048:	0800b05b 	.word	0x0800b05b
 800b04c:	0800b055 	.word	0x0800b055
 800b050:	0800b06d 	.word	0x0800b06d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]
      break;
 800b058:	e030      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d025      	beq.n	800b0b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b06a:	e022      	b.n	800b0b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b074:	d11f      	bne.n	800b0b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b07a:	e01c      	b.n	800b0b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d903      	bls.n	800b08a <DMA_CheckFifoParam+0xb6>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b03      	cmp	r3, #3
 800b086:	d003      	beq.n	800b090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b088:	e018      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	73fb      	strb	r3, [r7, #15]
      break;
 800b08e:	e015      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00e      	beq.n	800b0ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a0:	e00b      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;
 800b0a2:	bf00      	nop
 800b0a4:	e00a      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      break;
 800b0a6:	bf00      	nop
 800b0a8:	e008      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      break;
 800b0aa:	bf00      	nop
 800b0ac:	e006      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      break;
 800b0ae:	bf00      	nop
 800b0b0:	e004      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      break;
 800b0b2:	bf00      	nop
 800b0b4:	e002      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      break;   
 800b0b6:	bf00      	nop
 800b0b8:	e000      	b.n	800b0bc <DMA_CheckFifoParam+0xe8>
      break;
 800b0ba:	bf00      	nop
    }
  } 
  
  return status; 
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop

0800b0cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b089      	sub	sp, #36	; 0x24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	e16b      	b.n	800b3c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	429a      	cmp	r2, r3
 800b102:	f040 815a 	bne.w	800b3ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d005      	beq.n	800b11e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d130      	bne.n	800b180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	2203      	movs	r2, #3
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	43db      	mvns	r3, r3
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	4013      	ands	r3, r2
 800b134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	68da      	ldr	r2, [r3, #12]
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	fa02 f303 	lsl.w	r3, r2, r3
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	4313      	orrs	r3, r2
 800b146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b154:	2201      	movs	r2, #1
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	fa02 f303 	lsl.w	r3, r2, r3
 800b15c:	43db      	mvns	r3, r3
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	4013      	ands	r3, r2
 800b162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	091b      	lsrs	r3, r3, #4
 800b16a:	f003 0201 	and.w	r2, r3, #1
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	fa02 f303 	lsl.w	r3, r2, r3
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	4313      	orrs	r3, r2
 800b178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d017      	beq.n	800b1bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	2203      	movs	r2, #3
 800b198:	fa02 f303 	lsl.w	r3, r2, r3
 800b19c:	43db      	mvns	r3, r3
 800b19e:	69ba      	ldr	r2, [r7, #24]
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	689a      	ldr	r2, [r3, #8]
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d123      	bne.n	800b210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	08da      	lsrs	r2, r3, #3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3208      	adds	r2, #8
 800b1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	f003 0307 	and.w	r3, r3, #7
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	220f      	movs	r2, #15
 800b1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e4:	43db      	mvns	r3, r3
 800b1e6:	69ba      	ldr	r2, [r7, #24]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	691a      	ldr	r2, [r3, #16]
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	08da      	lsrs	r2, r3, #3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3208      	adds	r2, #8
 800b20a:	69b9      	ldr	r1, [r7, #24]
 800b20c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	2203      	movs	r2, #3
 800b21c:	fa02 f303 	lsl.w	r3, r2, r3
 800b220:	43db      	mvns	r3, r3
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	4013      	ands	r3, r2
 800b226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f003 0203 	and.w	r2, r3, #3
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	fa02 f303 	lsl.w	r3, r2, r3
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 80b4 	beq.w	800b3ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	4b60      	ldr	r3, [pc, #384]	; (800b3d8 <HAL_GPIO_Init+0x30c>)
 800b258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b25a:	4a5f      	ldr	r2, [pc, #380]	; (800b3d8 <HAL_GPIO_Init+0x30c>)
 800b25c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b260:	6453      	str	r3, [r2, #68]	; 0x44
 800b262:	4b5d      	ldr	r3, [pc, #372]	; (800b3d8 <HAL_GPIO_Init+0x30c>)
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b26e:	4a5b      	ldr	r2, [pc, #364]	; (800b3dc <HAL_GPIO_Init+0x310>)
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	089b      	lsrs	r3, r3, #2
 800b274:	3302      	adds	r3, #2
 800b276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b27a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	220f      	movs	r2, #15
 800b286:	fa02 f303 	lsl.w	r3, r2, r3
 800b28a:	43db      	mvns	r3, r3
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	4013      	ands	r3, r2
 800b290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a52      	ldr	r2, [pc, #328]	; (800b3e0 <HAL_GPIO_Init+0x314>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d02b      	beq.n	800b2f2 <HAL_GPIO_Init+0x226>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a51      	ldr	r2, [pc, #324]	; (800b3e4 <HAL_GPIO_Init+0x318>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d025      	beq.n	800b2ee <HAL_GPIO_Init+0x222>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a50      	ldr	r2, [pc, #320]	; (800b3e8 <HAL_GPIO_Init+0x31c>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d01f      	beq.n	800b2ea <HAL_GPIO_Init+0x21e>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a4f      	ldr	r2, [pc, #316]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d019      	beq.n	800b2e6 <HAL_GPIO_Init+0x21a>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a4e      	ldr	r2, [pc, #312]	; (800b3f0 <HAL_GPIO_Init+0x324>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d013      	beq.n	800b2e2 <HAL_GPIO_Init+0x216>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a4d      	ldr	r2, [pc, #308]	; (800b3f4 <HAL_GPIO_Init+0x328>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00d      	beq.n	800b2de <HAL_GPIO_Init+0x212>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a4c      	ldr	r2, [pc, #304]	; (800b3f8 <HAL_GPIO_Init+0x32c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d007      	beq.n	800b2da <HAL_GPIO_Init+0x20e>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a4b      	ldr	r2, [pc, #300]	; (800b3fc <HAL_GPIO_Init+0x330>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d101      	bne.n	800b2d6 <HAL_GPIO_Init+0x20a>
 800b2d2:	2307      	movs	r3, #7
 800b2d4:	e00e      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	e00c      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2da:	2306      	movs	r3, #6
 800b2dc:	e00a      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2de:	2305      	movs	r3, #5
 800b2e0:	e008      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2e2:	2304      	movs	r3, #4
 800b2e4:	e006      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e004      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	e002      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e000      	b.n	800b2f4 <HAL_GPIO_Init+0x228>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	f002 0203 	and.w	r2, r2, #3
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	4093      	lsls	r3, r2
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	4313      	orrs	r3, r2
 800b302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b304:	4935      	ldr	r1, [pc, #212]	; (800b3dc <HAL_GPIO_Init+0x310>)
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	089b      	lsrs	r3, r3, #2
 800b30a:	3302      	adds	r3, #2
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b312:	4b3b      	ldr	r3, [pc, #236]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	43db      	mvns	r3, r3
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	4013      	ands	r3, r2
 800b320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	4313      	orrs	r3, r2
 800b334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b336:	4a32      	ldr	r2, [pc, #200]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b33c:	4b30      	ldr	r3, [pc, #192]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	43db      	mvns	r3, r3
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	4013      	ands	r3, r2
 800b34a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b360:	4a27      	ldr	r2, [pc, #156]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b366:	4b26      	ldr	r3, [pc, #152]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	43db      	mvns	r3, r3
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	4013      	ands	r3, r2
 800b374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	4313      	orrs	r3, r2
 800b388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b38a:	4a1d      	ldr	r2, [pc, #116]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b390:	4b1b      	ldr	r3, [pc, #108]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	43db      	mvns	r3, r3
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	4013      	ands	r3, r2
 800b39e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b3b4:	4a12      	ldr	r2, [pc, #72]	; (800b400 <HAL_GPIO_Init+0x334>)
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2b0f      	cmp	r3, #15
 800b3c4:	f67f ae90 	bls.w	800b0e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	3724      	adds	r7, #36	; 0x24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	40023800 	.word	0x40023800
 800b3dc:	40013800 	.word	0x40013800
 800b3e0:	40020000 	.word	0x40020000
 800b3e4:	40020400 	.word	0x40020400
 800b3e8:	40020800 	.word	0x40020800
 800b3ec:	40020c00 	.word	0x40020c00
 800b3f0:	40021000 	.word	0x40021000
 800b3f4:	40021400 	.word	0x40021400
 800b3f8:	40021800 	.word	0x40021800
 800b3fc:	40021c00 	.word	0x40021c00
 800b400:	40013c00 	.word	0x40013c00

0800b404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	887b      	ldrh	r3, [r7, #2]
 800b416:	4013      	ands	r3, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b41c:	2301      	movs	r3, #1
 800b41e:	73fb      	strb	r3, [r7, #15]
 800b420:	e001      	b.n	800b426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	807b      	strh	r3, [r7, #2]
 800b440:	4613      	mov	r3, r2
 800b442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b444:	787b      	ldrb	r3, [r7, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b44a:	887a      	ldrh	r2, [r7, #2]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b450:	e003      	b.n	800b45a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	041a      	lsls	r2, r3, #16
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	619a      	str	r2, [r3, #24]
}
 800b45a:	bf00      	nop
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e12b      	b.n	800b6d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d106      	bne.n	800b494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7f6 fda6 	bl	8001fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2224      	movs	r2, #36	; 0x24
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4cc:	f001 fd16 	bl	800cefc <HAL_RCC_GetPCLK1Freq>
 800b4d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	4a81      	ldr	r2, [pc, #516]	; (800b6dc <HAL_I2C_Init+0x274>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d807      	bhi.n	800b4ec <HAL_I2C_Init+0x84>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4a80      	ldr	r2, [pc, #512]	; (800b6e0 <HAL_I2C_Init+0x278>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	bf94      	ite	ls
 800b4e4:	2301      	movls	r3, #1
 800b4e6:	2300      	movhi	r3, #0
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	e006      	b.n	800b4fa <HAL_I2C_Init+0x92>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4a7d      	ldr	r2, [pc, #500]	; (800b6e4 <HAL_I2C_Init+0x27c>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	bf94      	ite	ls
 800b4f4:	2301      	movls	r3, #1
 800b4f6:	2300      	movhi	r3, #0
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e0e7      	b.n	800b6d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4a78      	ldr	r2, [pc, #480]	; (800b6e8 <HAL_I2C_Init+0x280>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	0c9b      	lsrs	r3, r3, #18
 800b50c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	430a      	orrs	r2, r1
 800b520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	4a6a      	ldr	r2, [pc, #424]	; (800b6dc <HAL_I2C_Init+0x274>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d802      	bhi.n	800b53c <HAL_I2C_Init+0xd4>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	3301      	adds	r3, #1
 800b53a:	e009      	b.n	800b550 <HAL_I2C_Init+0xe8>
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	4a69      	ldr	r2, [pc, #420]	; (800b6ec <HAL_I2C_Init+0x284>)
 800b548:	fba2 2303 	umull	r2, r3, r2, r3
 800b54c:	099b      	lsrs	r3, r3, #6
 800b54e:	3301      	adds	r3, #1
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6812      	ldr	r2, [r2, #0]
 800b554:	430b      	orrs	r3, r1
 800b556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	495c      	ldr	r1, [pc, #368]	; (800b6dc <HAL_I2C_Init+0x274>)
 800b56c:	428b      	cmp	r3, r1
 800b56e:	d819      	bhi.n	800b5a4 <HAL_I2C_Init+0x13c>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	1e59      	subs	r1, r3, #1
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b57e:	1c59      	adds	r1, r3, #1
 800b580:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b584:	400b      	ands	r3, r1
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <HAL_I2C_Init+0x138>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	1e59      	subs	r1, r3, #1
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	fbb1 f3f3 	udiv	r3, r1, r3
 800b598:	3301      	adds	r3, #1
 800b59a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b59e:	e051      	b.n	800b644 <HAL_I2C_Init+0x1dc>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	e04f      	b.n	800b644 <HAL_I2C_Init+0x1dc>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d111      	bne.n	800b5d0 <HAL_I2C_Init+0x168>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	1e58      	subs	r0, r3, #1
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6859      	ldr	r1, [r3, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	440b      	add	r3, r1
 800b5ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	e012      	b.n	800b5f6 <HAL_I2C_Init+0x18e>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	1e58      	subs	r0, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6859      	ldr	r1, [r3, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	440b      	add	r3, r1
 800b5de:	0099      	lsls	r1, r3, #2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2301      	moveq	r3, #1
 800b5f2:	2300      	movne	r3, #0
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <HAL_I2C_Init+0x196>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e022      	b.n	800b644 <HAL_I2C_Init+0x1dc>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10e      	bne.n	800b624 <HAL_I2C_Init+0x1bc>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	1e58      	subs	r0, r3, #1
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6859      	ldr	r1, [r3, #4]
 800b60e:	460b      	mov	r3, r1
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	fbb0 f3f3 	udiv	r3, r0, r3
 800b618:	3301      	adds	r3, #1
 800b61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b622:	e00f      	b.n	800b644 <HAL_I2C_Init+0x1dc>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1e58      	subs	r0, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6859      	ldr	r1, [r3, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	440b      	add	r3, r1
 800b632:	0099      	lsls	r1, r3, #2
 800b634:	440b      	add	r3, r1
 800b636:	fbb0 f3f3 	udiv	r3, r0, r3
 800b63a:	3301      	adds	r3, #1
 800b63c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	6809      	ldr	r1, [r1, #0]
 800b648:	4313      	orrs	r3, r2
 800b64a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69da      	ldr	r2, [r3, #28]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	430a      	orrs	r2, r1
 800b666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	6911      	ldr	r1, [r2, #16]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	68d2      	ldr	r2, [r2, #12]
 800b67e:	4311      	orrs	r1, r2
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6812      	ldr	r2, [r2, #0]
 800b684:	430b      	orrs	r3, r1
 800b686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695a      	ldr	r2, [r3, #20]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0201 	orr.w	r2, r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	000186a0 	.word	0x000186a0
 800b6e0:	001e847f 	.word	0x001e847f
 800b6e4:	003d08ff 	.word	0x003d08ff
 800b6e8:	431bde83 	.word	0x431bde83
 800b6ec:	10624dd3 	.word	0x10624dd3

0800b6f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4603      	mov	r3, r0
 800b700:	817b      	strh	r3, [r7, #10]
 800b702:	460b      	mov	r3, r1
 800b704:	813b      	strh	r3, [r7, #8]
 800b706:	4613      	mov	r3, r2
 800b708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b70a:	f7fe fae7 	bl	8009cdc <HAL_GetTick>
 800b70e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b20      	cmp	r3, #32
 800b71a:	f040 80d9 	bne.w	800b8d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	2319      	movs	r3, #25
 800b724:	2201      	movs	r2, #1
 800b726:	496d      	ldr	r1, [pc, #436]	; (800b8dc <HAL_I2C_Mem_Write+0x1ec>)
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 fc7f 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b734:	2302      	movs	r3, #2
 800b736:	e0cc      	b.n	800b8d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d101      	bne.n	800b746 <HAL_I2C_Mem_Write+0x56>
 800b742:	2302      	movs	r3, #2
 800b744:	e0c5      	b.n	800b8d2 <HAL_I2C_Mem_Write+0x1e2>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0301 	and.w	r3, r3, #1
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d007      	beq.n	800b76c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f042 0201 	orr.w	r2, r2, #1
 800b76a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b77a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2221      	movs	r2, #33	; 0x21
 800b780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2240      	movs	r2, #64	; 0x40
 800b788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b79c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4a4d      	ldr	r2, [pc, #308]	; (800b8e0 <HAL_I2C_Mem_Write+0x1f0>)
 800b7ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b7ae:	88f8      	ldrh	r0, [r7, #6]
 800b7b0:	893a      	ldrh	r2, [r7, #8]
 800b7b2:	8979      	ldrh	r1, [r7, #10]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	4603      	mov	r3, r0
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 fab6 	bl	800bd30 <I2C_RequestMemoryWrite>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d052      	beq.n	800b870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e081      	b.n	800b8d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 fd00 	bl	800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00d      	beq.n	800b7fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e2:	2b04      	cmp	r3, #4
 800b7e4:	d107      	bne.n	800b7f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e06b      	b.n	800b8d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	781a      	ldrb	r2, [r3, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b814:	3b01      	subs	r3, #1
 800b816:	b29a      	uxth	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b820:	b29b      	uxth	r3, r3
 800b822:	3b01      	subs	r3, #1
 800b824:	b29a      	uxth	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	f003 0304 	and.w	r3, r3, #4
 800b834:	2b04      	cmp	r3, #4
 800b836:	d11b      	bne.n	800b870 <HAL_I2C_Mem_Write+0x180>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d017      	beq.n	800b870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1aa      	bne.n	800b7ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 fcec 	bl	800c25a <I2C_WaitOnBTFFlagUntilTimeout>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00d      	beq.n	800b8a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d107      	bne.n	800b8a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b89e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e016      	b.n	800b8d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e000      	b.n	800b8d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b8d0:	2302      	movs	r3, #2
  }
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	00100002 	.word	0x00100002
 800b8e0:	ffff0000 	.word	0xffff0000

0800b8e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08c      	sub	sp, #48	; 0x30
 800b8e8:	af02      	add	r7, sp, #8
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	4608      	mov	r0, r1
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	817b      	strh	r3, [r7, #10]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	813b      	strh	r3, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8fe:	f7fe f9ed 	bl	8009cdc <HAL_GetTick>
 800b902:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	f040 8208 	bne.w	800bd22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	2319      	movs	r3, #25
 800b918:	2201      	movs	r2, #1
 800b91a:	497b      	ldr	r1, [pc, #492]	; (800bb08 <HAL_I2C_Mem_Read+0x224>)
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 fb85 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b928:	2302      	movs	r3, #2
 800b92a:	e1fb      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b932:	2b01      	cmp	r3, #1
 800b934:	d101      	bne.n	800b93a <HAL_I2C_Mem_Read+0x56>
 800b936:	2302      	movs	r3, #2
 800b938:	e1f4      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d007      	beq.n	800b960 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f042 0201 	orr.w	r2, r2, #1
 800b95e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b96e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2222      	movs	r2, #34	; 0x22
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2240      	movs	r2, #64	; 0x40
 800b97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b996:	b29a      	uxth	r2, r3
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4a5b      	ldr	r2, [pc, #364]	; (800bb0c <HAL_I2C_Mem_Read+0x228>)
 800b9a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b9a2:	88f8      	ldrh	r0, [r7, #6]
 800b9a4:	893a      	ldrh	r2, [r7, #8]
 800b9a6:	8979      	ldrh	r1, [r7, #10]
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 fa52 	bl	800be5c <I2C_RequestMemoryRead>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e1b0      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d113      	bne.n	800b9f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	623b      	str	r3, [r7, #32]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	623b      	str	r3, [r7, #32]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	623b      	str	r3, [r7, #32]
 800b9de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e184      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d11b      	bne.n	800ba32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	61fb      	str	r3, [r7, #28]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	e164      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d11b      	bne.n	800ba72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61bb      	str	r3, [r7, #24]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	61bb      	str	r3, [r7, #24]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	61bb      	str	r3, [r7, #24]
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	e144      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	617b      	str	r3, [r7, #20]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	617b      	str	r3, [r7, #20]
 800ba86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba88:	e138      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	f200 80f1 	bhi.w	800bc76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d123      	bne.n	800bae4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fc1b 	bl	800c2dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e139      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	691a      	ldr	r2, [r3, #16]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bacc:	3b01      	subs	r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad8:	b29b      	uxth	r3, r3
 800bada:	3b01      	subs	r3, #1
 800badc:	b29a      	uxth	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bae2:	e10b      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d14e      	bne.n	800bb8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	2200      	movs	r2, #0
 800baf4:	4906      	ldr	r1, [pc, #24]	; (800bb10 <HAL_I2C_Mem_Read+0x22c>)
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 fa98 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d008      	beq.n	800bb14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e10e      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
 800bb06:	bf00      	nop
 800bb08:	00100002 	.word	0x00100002
 800bb0c:	ffff0000 	.word	0xffff0000
 800bb10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	b2d2      	uxtb	r2, r2
 800bb30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb40:	3b01      	subs	r3, #1
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	691a      	ldr	r2, [r3, #16]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb60:	b2d2      	uxtb	r2, r2
 800bb62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	3b01      	subs	r3, #1
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb88:	e0b8      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	2200      	movs	r2, #0
 800bb92:	4966      	ldr	r1, [pc, #408]	; (800bd2c <HAL_I2C_Mem_Read+0x448>)
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 fa49 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e0bf      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	691a      	ldr	r2, [r3, #16]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	b2d2      	uxtb	r2, r2
 800bbc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	2200      	movs	r2, #0
 800bbee:	494f      	ldr	r1, [pc, #316]	; (800bd2c <HAL_I2C_Mem_Read+0x448>)
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 fa1b 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e091      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	b2d2      	uxtb	r2, r2
 800bc1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	691a      	ldr	r2, [r3, #16]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	b2d2      	uxtb	r2, r2
 800bc4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc74:	e042      	b.n	800bcfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 fb2e 	bl	800c2dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e04c      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	691a      	ldr	r2, [r3, #16]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	b2d2      	uxtb	r2, r2
 800bc96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	1c5a      	adds	r2, r3, #1
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bca6:	3b01      	subs	r3, #1
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	f003 0304 	and.w	r3, r3, #4
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	d118      	bne.n	800bcfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	691a      	ldr	r2, [r3, #16]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce6:	3b01      	subs	r3, #1
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f47f aec2 	bne.w	800ba8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e000      	b.n	800bd24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd22:	2302      	movs	r3, #2
  }
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3728      	adds	r7, #40	; 0x28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	00010004 	.word	0x00010004

0800bd30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	4608      	mov	r0, r1
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4603      	mov	r3, r0
 800bd40:	817b      	strh	r3, [r7, #10]
 800bd42:	460b      	mov	r3, r1
 800bd44:	813b      	strh	r3, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 f960 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00d      	beq.n	800bd8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd80:	d103      	bne.n	800bd8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e05f      	b.n	800be4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bd8e:	897b      	ldrh	r3, [r7, #10]
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	461a      	mov	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bd9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	6a3a      	ldr	r2, [r7, #32]
 800bda2:	492d      	ldr	r1, [pc, #180]	; (800be58 <I2C_RequestMemoryWrite+0x128>)
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 f998 	bl	800c0da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e04c      	b.n	800be4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdcc:	6a39      	ldr	r1, [r7, #32]
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fa02 	bl	800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00d      	beq.n	800bdf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d107      	bne.n	800bdf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e02b      	b.n	800be4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bdf6:	88fb      	ldrh	r3, [r7, #6]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d105      	bne.n	800be08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bdfc:	893b      	ldrh	r3, [r7, #8]
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	611a      	str	r2, [r3, #16]
 800be06:	e021      	b.n	800be4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800be08:	893b      	ldrh	r3, [r7, #8]
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be18:	6a39      	ldr	r1, [r7, #32]
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 f9dc 	bl	800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00d      	beq.n	800be42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2a:	2b04      	cmp	r3, #4
 800be2c:	d107      	bne.n	800be3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e005      	b.n	800be4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be42:	893b      	ldrh	r3, [r7, #8]
 800be44:	b2da      	uxtb	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	00010002 	.word	0x00010002

0800be5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	4608      	mov	r0, r1
 800be66:	4611      	mov	r1, r2
 800be68:	461a      	mov	r2, r3
 800be6a:	4603      	mov	r3, r0
 800be6c:	817b      	strh	r3, [r7, #10]
 800be6e:	460b      	mov	r3, r1
 800be70:	813b      	strh	r3, [r7, #8]
 800be72:	4613      	mov	r3, r2
 800be74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f8c2 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00d      	beq.n	800beca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bebc:	d103      	bne.n	800bec6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	e0aa      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800beca:	897b      	ldrh	r3, [r7, #10]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	461a      	mov	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bed8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	6a3a      	ldr	r2, [r7, #32]
 800bede:	4952      	ldr	r1, [pc, #328]	; (800c028 <I2C_RequestMemoryRead+0x1cc>)
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f000 f8fa 	bl	800c0da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e097      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf08:	6a39      	ldr	r1, [r7, #32]
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 f964 	bl	800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00d      	beq.n	800bf32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	2b04      	cmp	r3, #4
 800bf1c:	d107      	bne.n	800bf2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e076      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf32:	88fb      	ldrh	r3, [r7, #6]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d105      	bne.n	800bf44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf38:	893b      	ldrh	r3, [r7, #8]
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	611a      	str	r2, [r3, #16]
 800bf42:	e021      	b.n	800bf88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bf44:	893b      	ldrh	r3, [r7, #8]
 800bf46:	0a1b      	lsrs	r3, r3, #8
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf54:	6a39      	ldr	r1, [r7, #32]
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f000 f93e 	bl	800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00d      	beq.n	800bf7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d107      	bne.n	800bf7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e050      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf7e:	893b      	ldrh	r3, [r7, #8]
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf8a:	6a39      	ldr	r1, [r7, #32]
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f923 	bl	800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00d      	beq.n	800bfb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	2b04      	cmp	r3, #4
 800bf9e:	d107      	bne.n	800bfb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e035      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 f82b 	bl	800c02c <I2C_WaitOnFlagUntilTimeout>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00d      	beq.n	800bff8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfea:	d103      	bne.n	800bff4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bff4:	2303      	movs	r3, #3
 800bff6:	e013      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bff8:	897b      	ldrh	r3, [r7, #10]
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	f043 0301 	orr.w	r3, r3, #1
 800c000:	b2da      	uxtb	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	6a3a      	ldr	r2, [r7, #32]
 800c00c:	4906      	ldr	r1, [pc, #24]	; (800c028 <I2C_RequestMemoryRead+0x1cc>)
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 f863 	bl	800c0da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e000      	b.n	800c020 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	00010002 	.word	0x00010002

0800c02c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	603b      	str	r3, [r7, #0]
 800c038:	4613      	mov	r3, r2
 800c03a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c03c:	e025      	b.n	800c08a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c044:	d021      	beq.n	800c08a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c046:	f7fd fe49 	bl	8009cdc <HAL_GetTick>
 800c04a:	4602      	mov	r2, r0
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	429a      	cmp	r2, r3
 800c054:	d302      	bcc.n	800c05c <I2C_WaitOnFlagUntilTimeout+0x30>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d116      	bne.n	800c08a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2220      	movs	r2, #32
 800c066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c076:	f043 0220 	orr.w	r2, r3, #32
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e023      	b.n	800c0d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	0c1b      	lsrs	r3, r3, #16
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b01      	cmp	r3, #1
 800c092:	d10d      	bne.n	800c0b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	43da      	mvns	r2, r3
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	bf0c      	ite	eq
 800c0a6:	2301      	moveq	r3, #1
 800c0a8:	2300      	movne	r3, #0
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	e00c      	b.n	800c0ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	43da      	mvns	r2, r3
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bf0c      	ite	eq
 800c0c2:	2301      	moveq	r3, #1
 800c0c4:	2300      	movne	r3, #0
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d0b6      	beq.n	800c03e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	607a      	str	r2, [r7, #4]
 800c0e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c0e8:	e051      	b.n	800c18e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0f8:	d123      	bne.n	800c142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c108:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c112:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2220      	movs	r2, #32
 800c11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	f043 0204 	orr.w	r2, r3, #4
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e046      	b.n	800c1d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d021      	beq.n	800c18e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14a:	f7fd fdc7 	bl	8009cdc <HAL_GetTick>
 800c14e:	4602      	mov	r2, r0
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d302      	bcc.n	800c160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d116      	bne.n	800c18e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2220      	movs	r2, #32
 800c16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	f043 0220 	orr.w	r2, r3, #32
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e020      	b.n	800c1d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	0c1b      	lsrs	r3, r3, #16
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b01      	cmp	r3, #1
 800c196:	d10c      	bne.n	800c1b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	43da      	mvns	r2, r3
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf14      	ite	ne
 800c1aa:	2301      	movne	r3, #1
 800c1ac:	2300      	moveq	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	e00b      	b.n	800c1ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	43da      	mvns	r2, r3
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	4013      	ands	r3, r2
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bf14      	ite	ne
 800c1c4:	2301      	movne	r3, #1
 800c1c6:	2300      	moveq	r3, #0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d18d      	bne.n	800c0ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1e4:	e02d      	b.n	800c242 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 f8ce 	bl	800c388 <I2C_IsAcknowledgeFailed>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e02d      	b.n	800c252 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fc:	d021      	beq.n	800c242 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1fe:	f7fd fd6d 	bl	8009cdc <HAL_GetTick>
 800c202:	4602      	mov	r2, r0
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d302      	bcc.n	800c214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d116      	bne.n	800c242 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2220      	movs	r2, #32
 800c21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	f043 0220 	orr.w	r2, r3, #32
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e007      	b.n	800c252 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c24c:	2b80      	cmp	r3, #128	; 0x80
 800c24e:	d1ca      	bne.n	800c1e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b084      	sub	sp, #16
 800c25e:	af00      	add	r7, sp, #0
 800c260:	60f8      	str	r0, [r7, #12]
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c266:	e02d      	b.n	800c2c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 f88d 	bl	800c388 <I2C_IsAcknowledgeFailed>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e02d      	b.n	800c2d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c27e:	d021      	beq.n	800c2c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c280:	f7fd fd2c 	bl	8009cdc <HAL_GetTick>
 800c284:	4602      	mov	r2, r0
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d302      	bcc.n	800c296 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d116      	bne.n	800c2c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b0:	f043 0220 	orr.w	r2, r3, #32
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e007      	b.n	800c2d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	f003 0304 	and.w	r3, r3, #4
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d1ca      	bne.n	800c268 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c2e8:	e042      	b.n	800c370 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	f003 0310 	and.w	r3, r3, #16
 800c2f4:	2b10      	cmp	r3, #16
 800c2f6:	d119      	bne.n	800c32c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f06f 0210 	mvn.w	r2, #16
 800c300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	e029      	b.n	800c380 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c32c:	f7fd fcd6 	bl	8009cdc <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d302      	bcc.n	800c342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d116      	bne.n	800c370 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2220      	movs	r2, #32
 800c34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35c:	f043 0220 	orr.w	r2, r3, #32
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e007      	b.n	800c380 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37a:	2b40      	cmp	r3, #64	; 0x40
 800c37c:	d1b5      	bne.n	800c2ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c39a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c39e:	d11b      	bne.n	800c3d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c3a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c4:	f043 0204 	orr.w	r2, r3, #4
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e000      	b.n	800c3da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c3e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e8:	b08f      	sub	sp, #60	; 0x3c
 800c3ea:	af0a      	add	r7, sp, #40	; 0x28
 800c3ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e10f      	b.n	800c618 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7fd fb86 	bl	8009b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2203      	movs	r2, #3
 800c41c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4618      	mov	r0, r3
 800c438:	f002 fa63 	bl	800e902 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	603b      	str	r3, [r7, #0]
 800c442:	687e      	ldr	r6, [r7, #4]
 800c444:	466d      	mov	r5, sp
 800c446:	f106 0410 	add.w	r4, r6, #16
 800c44a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c44c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c44e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c452:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c456:	e885 0003 	stmia.w	r5, {r0, r1}
 800c45a:	1d33      	adds	r3, r6, #4
 800c45c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c45e:	6838      	ldr	r0, [r7, #0]
 800c460:	f002 f9ee 	bl	800e840 <USB_CoreInit>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d005      	beq.n	800c476 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2202      	movs	r2, #2
 800c46e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e0d0      	b.n	800c618 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2100      	movs	r1, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f002 fa51 	bl	800e924 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c482:	2300      	movs	r3, #0
 800c484:	73fb      	strb	r3, [r7, #15]
 800c486:	e04a      	b.n	800c51e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c488:	7bfa      	ldrb	r2, [r7, #15]
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	333d      	adds	r3, #61	; 0x3d
 800c498:	2201      	movs	r2, #1
 800c49a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c49c:	7bfa      	ldrb	r2, [r7, #15]
 800c49e:	6879      	ldr	r1, [r7, #4]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	333c      	adds	r3, #60	; 0x3c
 800c4ac:	7bfa      	ldrb	r2, [r7, #15]
 800c4ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c4b0:	7bfa      	ldrb	r2, [r7, #15]
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
 800c4b4:	b298      	uxth	r0, r3
 800c4b6:	6879      	ldr	r1, [r7, #4]
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	440b      	add	r3, r1
 800c4c2:	3344      	adds	r3, #68	; 0x44
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c4c8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	00db      	lsls	r3, r3, #3
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	440b      	add	r3, r1
 800c4d6:	3340      	adds	r3, #64	; 0x40
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c4dc:	7bfa      	ldrb	r2, [r7, #15]
 800c4de:	6879      	ldr	r1, [r7, #4]
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	4413      	add	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3348      	adds	r3, #72	; 0x48
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c4f0:	7bfa      	ldrb	r2, [r7, #15]
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	440b      	add	r3, r1
 800c4fe:	334c      	adds	r3, #76	; 0x4c
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c504:	7bfa      	ldrb	r2, [r7, #15]
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	4613      	mov	r3, r2
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	4413      	add	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	440b      	add	r3, r1
 800c512:	3354      	adds	r3, #84	; 0x54
 800c514:	2200      	movs	r2, #0
 800c516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	3301      	adds	r3, #1
 800c51c:	73fb      	strb	r3, [r7, #15]
 800c51e:	7bfa      	ldrb	r2, [r7, #15]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	429a      	cmp	r2, r3
 800c526:	d3af      	bcc.n	800c488 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
 800c52c:	e044      	b.n	800c5b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c52e:	7bfa      	ldrb	r2, [r7, #15]
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	4613      	mov	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	4413      	add	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	440b      	add	r3, r1
 800c53c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800c540:	2200      	movs	r2, #0
 800c542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c544:	7bfa      	ldrb	r2, [r7, #15]
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	4613      	mov	r3, r2
 800c54a:	00db      	lsls	r3, r3, #3
 800c54c:	4413      	add	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	440b      	add	r3, r1
 800c552:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800c556:	7bfa      	ldrb	r2, [r7, #15]
 800c558:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c55a:	7bfa      	ldrb	r2, [r7, #15]
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	4613      	mov	r3, r2
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	4413      	add	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	440b      	add	r3, r1
 800c568:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c56c:	2200      	movs	r2, #0
 800c56e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c570:	7bfa      	ldrb	r2, [r7, #15]
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	4613      	mov	r3, r2
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	4413      	add	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	440b      	add	r3, r1
 800c57e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c586:	7bfa      	ldrb	r2, [r7, #15]
 800c588:	6879      	ldr	r1, [r7, #4]
 800c58a:	4613      	mov	r3, r2
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	440b      	add	r3, r1
 800c594:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c59c:	7bfa      	ldrb	r2, [r7, #15]
 800c59e:	6879      	ldr	r1, [r7, #4]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	4413      	add	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	440b      	add	r3, r1
 800c5aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	73fb      	strb	r3, [r7, #15]
 800c5b8:	7bfa      	ldrb	r2, [r7, #15]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d3b5      	bcc.n	800c52e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	687e      	ldr	r6, [r7, #4]
 800c5ca:	466d      	mov	r5, sp
 800c5cc:	f106 0410 	add.w	r4, r6, #16
 800c5d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c5dc:	e885 0003 	stmia.w	r5, {r0, r1}
 800c5e0:	1d33      	adds	r3, r6, #4
 800c5e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5e4:	6838      	ldr	r0, [r7, #0]
 800c5e6:	f002 f9e9 	bl	800e9bc <USB_DevInit>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d005      	beq.n	800c5fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e00d      	b.n	800c618 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4618      	mov	r0, r3
 800c612:	f002 fbb4 	bl	800ed7e <USB_DevDisconnect>

  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e267      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d075      	beq.n	800c72a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c63e:	4b88      	ldr	r3, [pc, #544]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	f003 030c 	and.w	r3, r3, #12
 800c646:	2b04      	cmp	r3, #4
 800c648:	d00c      	beq.n	800c664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c64a:	4b85      	ldr	r3, [pc, #532]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c652:	2b08      	cmp	r3, #8
 800c654:	d112      	bne.n	800c67c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c656:	4b82      	ldr	r3, [pc, #520]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c65e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c662:	d10b      	bne.n	800c67c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c664:	4b7e      	ldr	r3, [pc, #504]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d05b      	beq.n	800c728 <HAL_RCC_OscConfig+0x108>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d157      	bne.n	800c728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e242      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c684:	d106      	bne.n	800c694 <HAL_RCC_OscConfig+0x74>
 800c686:	4b76      	ldr	r3, [pc, #472]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a75      	ldr	r2, [pc, #468]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c68c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	e01d      	b.n	800c6d0 <HAL_RCC_OscConfig+0xb0>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c69c:	d10c      	bne.n	800c6b8 <HAL_RCC_OscConfig+0x98>
 800c69e:	4b70      	ldr	r3, [pc, #448]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a6f      	ldr	r2, [pc, #444]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	4b6d      	ldr	r3, [pc, #436]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a6c      	ldr	r2, [pc, #432]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	e00b      	b.n	800c6d0 <HAL_RCC_OscConfig+0xb0>
 800c6b8:	4b69      	ldr	r3, [pc, #420]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a68      	ldr	r2, [pc, #416]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	4b66      	ldr	r3, [pc, #408]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a65      	ldr	r2, [pc, #404]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d013      	beq.n	800c700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6d8:	f7fd fb00 	bl	8009cdc <HAL_GetTick>
 800c6dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6de:	e008      	b.n	800c6f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c6e0:	f7fd fafc 	bl	8009cdc <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	2b64      	cmp	r3, #100	; 0x64
 800c6ec:	d901      	bls.n	800c6f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e207      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6f2:	4b5b      	ldr	r3, [pc, #364]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0f0      	beq.n	800c6e0 <HAL_RCC_OscConfig+0xc0>
 800c6fe:	e014      	b.n	800c72a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c700:	f7fd faec 	bl	8009cdc <HAL_GetTick>
 800c704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c706:	e008      	b.n	800c71a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c708:	f7fd fae8 	bl	8009cdc <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	2b64      	cmp	r3, #100	; 0x64
 800c714:	d901      	bls.n	800c71a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e1f3      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c71a:	4b51      	ldr	r3, [pc, #324]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1f0      	bne.n	800c708 <HAL_RCC_OscConfig+0xe8>
 800c726:	e000      	b.n	800c72a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b00      	cmp	r3, #0
 800c734:	d063      	beq.n	800c7fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c736:	4b4a      	ldr	r3, [pc, #296]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f003 030c 	and.w	r3, r3, #12
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00b      	beq.n	800c75a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c742:	4b47      	ldr	r3, [pc, #284]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c74a:	2b08      	cmp	r3, #8
 800c74c:	d11c      	bne.n	800c788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c74e:	4b44      	ldr	r3, [pc, #272]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d116      	bne.n	800c788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c75a:	4b41      	ldr	r3, [pc, #260]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <HAL_RCC_OscConfig+0x152>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d001      	beq.n	800c772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e1c7      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c772:	4b3b      	ldr	r3, [pc, #236]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	4937      	ldr	r1, [pc, #220]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c782:	4313      	orrs	r3, r2
 800c784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c786:	e03a      	b.n	800c7fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d020      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c790:	4b34      	ldr	r3, [pc, #208]	; (800c864 <HAL_RCC_OscConfig+0x244>)
 800c792:	2201      	movs	r2, #1
 800c794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c796:	f7fd faa1 	bl	8009cdc <HAL_GetTick>
 800c79a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c79c:	e008      	b.n	800c7b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c79e:	f7fd fa9d 	bl	8009cdc <HAL_GetTick>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d901      	bls.n	800c7b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e1a8      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7b0:	4b2b      	ldr	r3, [pc, #172]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f003 0302 	and.w	r3, r3, #2
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0f0      	beq.n	800c79e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7bc:	4b28      	ldr	r3, [pc, #160]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	4925      	ldr	r1, [pc, #148]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	600b      	str	r3, [r1, #0]
 800c7d0:	e015      	b.n	800c7fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7d2:	4b24      	ldr	r3, [pc, #144]	; (800c864 <HAL_RCC_OscConfig+0x244>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d8:	f7fd fa80 	bl	8009cdc <HAL_GetTick>
 800c7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7de:	e008      	b.n	800c7f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7e0:	f7fd fa7c 	bl	8009cdc <HAL_GetTick>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d901      	bls.n	800c7f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e187      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7f2:	4b1b      	ldr	r3, [pc, #108]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1f0      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d036      	beq.n	800c878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d016      	beq.n	800c840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <HAL_RCC_OscConfig+0x248>)
 800c814:	2201      	movs	r2, #1
 800c816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c818:	f7fd fa60 	bl	8009cdc <HAL_GetTick>
 800c81c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c81e:	e008      	b.n	800c832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c820:	f7fd fa5c 	bl	8009cdc <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d901      	bls.n	800c832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e167      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c832:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <HAL_RCC_OscConfig+0x240>)
 800c834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0f0      	beq.n	800c820 <HAL_RCC_OscConfig+0x200>
 800c83e:	e01b      	b.n	800c878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c840:	4b09      	ldr	r3, [pc, #36]	; (800c868 <HAL_RCC_OscConfig+0x248>)
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c846:	f7fd fa49 	bl	8009cdc <HAL_GetTick>
 800c84a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c84c:	e00e      	b.n	800c86c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c84e:	f7fd fa45 	bl	8009cdc <HAL_GetTick>
 800c852:	4602      	mov	r2, r0
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d907      	bls.n	800c86c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e150      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
 800c860:	40023800 	.word	0x40023800
 800c864:	42470000 	.word	0x42470000
 800c868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c86c:	4b88      	ldr	r3, [pc, #544]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c870:	f003 0302 	and.w	r3, r3, #2
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1ea      	bne.n	800c84e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8097 	beq.w	800c9b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c88a:	4b81      	ldr	r3, [pc, #516]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10f      	bne.n	800c8b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c896:	2300      	movs	r3, #0
 800c898:	60bb      	str	r3, [r7, #8]
 800c89a:	4b7d      	ldr	r3, [pc, #500]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	4a7c      	ldr	r2, [pc, #496]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c8a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8a4:	6413      	str	r3, [r2, #64]	; 0x40
 800c8a6:	4b7a      	ldr	r3, [pc, #488]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ae:	60bb      	str	r3, [r7, #8]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8b6:	4b77      	ldr	r3, [pc, #476]	; (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d118      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c8c2:	4b74      	ldr	r3, [pc, #464]	; (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a73      	ldr	r2, [pc, #460]	; (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8ce:	f7fd fa05 	bl	8009cdc <HAL_GetTick>
 800c8d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8d4:	e008      	b.n	800c8e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8d6:	f7fd fa01 	bl	8009cdc <HAL_GetTick>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d901      	bls.n	800c8e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e10c      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8e8:	4b6a      	ldr	r3, [pc, #424]	; (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d0f0      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d106      	bne.n	800c90a <HAL_RCC_OscConfig+0x2ea>
 800c8fc:	4b64      	ldr	r3, [pc, #400]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c900:	4a63      	ldr	r2, [pc, #396]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c902:	f043 0301 	orr.w	r3, r3, #1
 800c906:	6713      	str	r3, [r2, #112]	; 0x70
 800c908:	e01c      	b.n	800c944 <HAL_RCC_OscConfig+0x324>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	2b05      	cmp	r3, #5
 800c910:	d10c      	bne.n	800c92c <HAL_RCC_OscConfig+0x30c>
 800c912:	4b5f      	ldr	r3, [pc, #380]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c916:	4a5e      	ldr	r2, [pc, #376]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c918:	f043 0304 	orr.w	r3, r3, #4
 800c91c:	6713      	str	r3, [r2, #112]	; 0x70
 800c91e:	4b5c      	ldr	r3, [pc, #368]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c922:	4a5b      	ldr	r2, [pc, #364]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c924:	f043 0301 	orr.w	r3, r3, #1
 800c928:	6713      	str	r3, [r2, #112]	; 0x70
 800c92a:	e00b      	b.n	800c944 <HAL_RCC_OscConfig+0x324>
 800c92c:	4b58      	ldr	r3, [pc, #352]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c930:	4a57      	ldr	r2, [pc, #348]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c932:	f023 0301 	bic.w	r3, r3, #1
 800c936:	6713      	str	r3, [r2, #112]	; 0x70
 800c938:	4b55      	ldr	r3, [pc, #340]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c93c:	4a54      	ldr	r2, [pc, #336]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c93e:	f023 0304 	bic.w	r3, r3, #4
 800c942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d015      	beq.n	800c978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c94c:	f7fd f9c6 	bl	8009cdc <HAL_GetTick>
 800c950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c952:	e00a      	b.n	800c96a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c954:	f7fd f9c2 	bl	8009cdc <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c962:	4293      	cmp	r3, r2
 800c964:	d901      	bls.n	800c96a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c966:	2303      	movs	r3, #3
 800c968:	e0cb      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c96a:	4b49      	ldr	r3, [pc, #292]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0ee      	beq.n	800c954 <HAL_RCC_OscConfig+0x334>
 800c976:	e014      	b.n	800c9a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c978:	f7fd f9b0 	bl	8009cdc <HAL_GetTick>
 800c97c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c97e:	e00a      	b.n	800c996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c980:	f7fd f9ac 	bl	8009cdc <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c98e:	4293      	cmp	r3, r2
 800c990:	d901      	bls.n	800c996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e0b5      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c996:	4b3e      	ldr	r3, [pc, #248]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c99a:	f003 0302 	and.w	r3, r3, #2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1ee      	bne.n	800c980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d105      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9a8:	4b39      	ldr	r3, [pc, #228]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ac:	4a38      	ldr	r2, [pc, #224]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 80a1 	beq.w	800cb00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9be:	4b34      	ldr	r3, [pc, #208]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f003 030c 	and.w	r3, r3, #12
 800c9c6:	2b08      	cmp	r3, #8
 800c9c8:	d05c      	beq.n	800ca84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d141      	bne.n	800ca56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9d2:	4b31      	ldr	r3, [pc, #196]	; (800ca98 <HAL_RCC_OscConfig+0x478>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9d8:	f7fd f980 	bl	8009cdc <HAL_GetTick>
 800c9dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9de:	e008      	b.n	800c9f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9e0:	f7fd f97c 	bl	8009cdc <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d901      	bls.n	800c9f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e087      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9f2:	4b27      	ldr	r3, [pc, #156]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1f0      	bne.n	800c9e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69da      	ldr	r2, [r3, #28]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	431a      	orrs	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	019b      	lsls	r3, r3, #6
 800ca0e:	431a      	orrs	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	085b      	lsrs	r3, r3, #1
 800ca16:	3b01      	subs	r3, #1
 800ca18:	041b      	lsls	r3, r3, #16
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	061b      	lsls	r3, r3, #24
 800ca22:	491b      	ldr	r1, [pc, #108]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800ca24:	4313      	orrs	r3, r2
 800ca26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca28:	4b1b      	ldr	r3, [pc, #108]	; (800ca98 <HAL_RCC_OscConfig+0x478>)
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca2e:	f7fd f955 	bl	8009cdc <HAL_GetTick>
 800ca32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca34:	e008      	b.n	800ca48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca36:	f7fd f951 	bl	8009cdc <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d901      	bls.n	800ca48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e05c      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca48:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d0f0      	beq.n	800ca36 <HAL_RCC_OscConfig+0x416>
 800ca54:	e054      	b.n	800cb00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca56:	4b10      	ldr	r3, [pc, #64]	; (800ca98 <HAL_RCC_OscConfig+0x478>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca5c:	f7fd f93e 	bl	8009cdc <HAL_GetTick>
 800ca60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca62:	e008      	b.n	800ca76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca64:	f7fd f93a 	bl	8009cdc <HAL_GetTick>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	d901      	bls.n	800ca76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e045      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca76:	4b06      	ldr	r3, [pc, #24]	; (800ca90 <HAL_RCC_OscConfig+0x470>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1f0      	bne.n	800ca64 <HAL_RCC_OscConfig+0x444>
 800ca82:	e03d      	b.n	800cb00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d107      	bne.n	800ca9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e038      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
 800ca90:	40023800 	.word	0x40023800
 800ca94:	40007000 	.word	0x40007000
 800ca98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ca9c:	4b1b      	ldr	r3, [pc, #108]	; (800cb0c <HAL_RCC_OscConfig+0x4ec>)
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d028      	beq.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d121      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d11a      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cacc:	4013      	ands	r3, r2
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d111      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae2:	085b      	lsrs	r3, r3, #1
 800cae4:	3b01      	subs	r3, #1
 800cae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cae8:	429a      	cmp	r2, r3
 800caea:	d107      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d001      	beq.n	800cb00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e000      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	40023800 	.word	0x40023800

0800cb10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e0cc      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb24:	4b68      	ldr	r3, [pc, #416]	; (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 0307 	and.w	r3, r3, #7
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d90c      	bls.n	800cb4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb32:	4b65      	ldr	r3, [pc, #404]	; (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb3a:	4b63      	ldr	r3, [pc, #396]	; (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d001      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e0b8      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0302 	and.w	r3, r3, #2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d020      	beq.n	800cb9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d005      	beq.n	800cb70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb64:	4b59      	ldr	r3, [pc, #356]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	4a58      	ldr	r2, [pc, #352]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cb6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0308 	and.w	r3, r3, #8
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d005      	beq.n	800cb88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb7c:	4b53      	ldr	r3, [pc, #332]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	4a52      	ldr	r2, [pc, #328]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cb86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb88:	4b50      	ldr	r3, [pc, #320]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	494d      	ldr	r1, [pc, #308]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d044      	beq.n	800cc30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d107      	bne.n	800cbbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbae:	4b47      	ldr	r3, [pc, #284]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d119      	bne.n	800cbee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e07f      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d003      	beq.n	800cbce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d107      	bne.n	800cbde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbce:	4b3f      	ldr	r3, [pc, #252]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d109      	bne.n	800cbee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e06f      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbde:	4b3b      	ldr	r3, [pc, #236]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 0302 	and.w	r3, r3, #2
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e067      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cbee:	4b37      	ldr	r3, [pc, #220]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f023 0203 	bic.w	r2, r3, #3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	4934      	ldr	r1, [pc, #208]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc00:	f7fd f86c 	bl	8009cdc <HAL_GetTick>
 800cc04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc06:	e00a      	b.n	800cc1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc08:	f7fd f868 	bl	8009cdc <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e04f      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc1e:	4b2b      	ldr	r3, [pc, #172]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 020c 	and.w	r2, r3, #12
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d1eb      	bne.n	800cc08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc30:	4b25      	ldr	r3, [pc, #148]	; (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0307 	and.w	r3, r3, #7
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d20c      	bcs.n	800cc58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc3e:	4b22      	ldr	r3, [pc, #136]	; (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	b2d2      	uxtb	r2, r2
 800cc44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc46:	4b20      	ldr	r3, [pc, #128]	; (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d001      	beq.n	800cc58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e032      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d008      	beq.n	800cc76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc64:	4b19      	ldr	r3, [pc, #100]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	4916      	ldr	r1, [pc, #88]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0308 	and.w	r3, r3, #8
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc82:	4b12      	ldr	r3, [pc, #72]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	490e      	ldr	r1, [pc, #56]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc92:	4313      	orrs	r3, r2
 800cc94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cc96:	f000 f821 	bl	800ccdc <HAL_RCC_GetSysClockFreq>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4b0b      	ldr	r3, [pc, #44]	; (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	091b      	lsrs	r3, r3, #4
 800cca2:	f003 030f 	and.w	r3, r3, #15
 800cca6:	490a      	ldr	r1, [pc, #40]	; (800ccd0 <HAL_RCC_ClockConfig+0x1c0>)
 800cca8:	5ccb      	ldrb	r3, [r1, r3]
 800ccaa:	fa22 f303 	lsr.w	r3, r2, r3
 800ccae:	4a09      	ldr	r2, [pc, #36]	; (800ccd4 <HAL_RCC_ClockConfig+0x1c4>)
 800ccb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ccb2:	4b09      	ldr	r3, [pc, #36]	; (800ccd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fc ffcc 	bl	8009c54 <HAL_InitTick>

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	40023c00 	.word	0x40023c00
 800cccc:	40023800 	.word	0x40023800
 800ccd0:	0801240c 	.word	0x0801240c
 800ccd4:	2000028c 	.word	0x2000028c
 800ccd8:	20000324 	.word	0x20000324

0800ccdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cce0:	b094      	sub	sp, #80	; 0x50
 800cce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cce4:	2300      	movs	r3, #0
 800cce6:	647b      	str	r3, [r7, #68]	; 0x44
 800cce8:	2300      	movs	r3, #0
 800ccea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccec:	2300      	movs	r3, #0
 800ccee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccf4:	4b79      	ldr	r3, [pc, #484]	; (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	f003 030c 	and.w	r3, r3, #12
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d00d      	beq.n	800cd1c <HAL_RCC_GetSysClockFreq+0x40>
 800cd00:	2b08      	cmp	r3, #8
 800cd02:	f200 80e1 	bhi.w	800cec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <HAL_RCC_GetSysClockFreq+0x34>
 800cd0a:	2b04      	cmp	r3, #4
 800cd0c:	d003      	beq.n	800cd16 <HAL_RCC_GetSysClockFreq+0x3a>
 800cd0e:	e0db      	b.n	800cec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd10:	4b73      	ldr	r3, [pc, #460]	; (800cee0 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cd14:	e0db      	b.n	800cece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd16:	4b72      	ldr	r3, [pc, #456]	; (800cee0 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cd1a:	e0d8      	b.n	800cece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd1c:	4b6f      	ldr	r3, [pc, #444]	; (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd26:	4b6d      	ldr	r3, [pc, #436]	; (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d063      	beq.n	800cdfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd32:	4b6a      	ldr	r3, [pc, #424]	; (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	099b      	lsrs	r3, r3, #6
 800cd38:	2200      	movs	r2, #0
 800cd3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd44:	633b      	str	r3, [r7, #48]	; 0x30
 800cd46:	2300      	movs	r3, #0
 800cd48:	637b      	str	r3, [r7, #52]	; 0x34
 800cd4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cd4e:	4622      	mov	r2, r4
 800cd50:	462b      	mov	r3, r5
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f04f 0100 	mov.w	r1, #0
 800cd5a:	0159      	lsls	r1, r3, #5
 800cd5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cd60:	0150      	lsls	r0, r2, #5
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	4621      	mov	r1, r4
 800cd68:	1a51      	subs	r1, r2, r1
 800cd6a:	6139      	str	r1, [r7, #16]
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	eb63 0301 	sbc.w	r3, r3, r1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	f04f 0300 	mov.w	r3, #0
 800cd7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd80:	4659      	mov	r1, fp
 800cd82:	018b      	lsls	r3, r1, #6
 800cd84:	4651      	mov	r1, sl
 800cd86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cd8a:	4651      	mov	r1, sl
 800cd8c:	018a      	lsls	r2, r1, #6
 800cd8e:	4651      	mov	r1, sl
 800cd90:	ebb2 0801 	subs.w	r8, r2, r1
 800cd94:	4659      	mov	r1, fp
 800cd96:	eb63 0901 	sbc.w	r9, r3, r1
 800cd9a:	f04f 0200 	mov.w	r2, #0
 800cd9e:	f04f 0300 	mov.w	r3, #0
 800cda2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cda6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdae:	4690      	mov	r8, r2
 800cdb0:	4699      	mov	r9, r3
 800cdb2:	4623      	mov	r3, r4
 800cdb4:	eb18 0303 	adds.w	r3, r8, r3
 800cdb8:	60bb      	str	r3, [r7, #8]
 800cdba:	462b      	mov	r3, r5
 800cdbc:	eb49 0303 	adc.w	r3, r9, r3
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	f04f 0200 	mov.w	r2, #0
 800cdc6:	f04f 0300 	mov.w	r3, #0
 800cdca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cdce:	4629      	mov	r1, r5
 800cdd0:	028b      	lsls	r3, r1, #10
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cdd8:	4621      	mov	r1, r4
 800cdda:	028a      	lsls	r2, r1, #10
 800cddc:	4610      	mov	r0, r2
 800cdde:	4619      	mov	r1, r3
 800cde0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cde2:	2200      	movs	r2, #0
 800cde4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cde6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cde8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cdec:	f7f3 ff4c 	bl	8000c88 <__aeabi_uldivmod>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdf8:	e058      	b.n	800ceac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cdfa:	4b38      	ldr	r3, [pc, #224]	; (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	099b      	lsrs	r3, r3, #6
 800ce00:	2200      	movs	r2, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	4611      	mov	r1, r2
 800ce06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ce0a:	623b      	str	r3, [r7, #32]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ce14:	4642      	mov	r2, r8
 800ce16:	464b      	mov	r3, r9
 800ce18:	f04f 0000 	mov.w	r0, #0
 800ce1c:	f04f 0100 	mov.w	r1, #0
 800ce20:	0159      	lsls	r1, r3, #5
 800ce22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce26:	0150      	lsls	r0, r2, #5
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ce32:	4649      	mov	r1, r9
 800ce34:	eb63 0b01 	sbc.w	fp, r3, r1
 800ce38:	f04f 0200 	mov.w	r2, #0
 800ce3c:	f04f 0300 	mov.w	r3, #0
 800ce40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ce44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ce48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ce4c:	ebb2 040a 	subs.w	r4, r2, sl
 800ce50:	eb63 050b 	sbc.w	r5, r3, fp
 800ce54:	f04f 0200 	mov.w	r2, #0
 800ce58:	f04f 0300 	mov.w	r3, #0
 800ce5c:	00eb      	lsls	r3, r5, #3
 800ce5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce62:	00e2      	lsls	r2, r4, #3
 800ce64:	4614      	mov	r4, r2
 800ce66:	461d      	mov	r5, r3
 800ce68:	4643      	mov	r3, r8
 800ce6a:	18e3      	adds	r3, r4, r3
 800ce6c:	603b      	str	r3, [r7, #0]
 800ce6e:	464b      	mov	r3, r9
 800ce70:	eb45 0303 	adc.w	r3, r5, r3
 800ce74:	607b      	str	r3, [r7, #4]
 800ce76:	f04f 0200 	mov.w	r2, #0
 800ce7a:	f04f 0300 	mov.w	r3, #0
 800ce7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ce82:	4629      	mov	r1, r5
 800ce84:	028b      	lsls	r3, r1, #10
 800ce86:	4621      	mov	r1, r4
 800ce88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	028a      	lsls	r2, r1, #10
 800ce90:	4610      	mov	r0, r2
 800ce92:	4619      	mov	r1, r3
 800ce94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce96:	2200      	movs	r2, #0
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	61fa      	str	r2, [r7, #28]
 800ce9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cea0:	f7f3 fef2 	bl	8000c88 <__aeabi_uldivmod>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4613      	mov	r3, r2
 800ceaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	0c1b      	lsrs	r3, r3, #16
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800cebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cec6:	e002      	b.n	800cece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cec8:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ceca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3750      	adds	r7, #80	; 0x50
 800ced4:	46bd      	mov	sp, r7
 800ced6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ceda:	bf00      	nop
 800cedc:	40023800 	.word	0x40023800
 800cee0:	00f42400 	.word	0x00f42400

0800cee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cee4:	b480      	push	{r7}
 800cee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cee8:	4b03      	ldr	r3, [pc, #12]	; (800cef8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ceea:	681b      	ldr	r3, [r3, #0]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	2000028c 	.word	0x2000028c

0800cefc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cf00:	f7ff fff0 	bl	800cee4 <HAL_RCC_GetHCLKFreq>
 800cf04:	4602      	mov	r2, r0
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	0a9b      	lsrs	r3, r3, #10
 800cf0c:	f003 0307 	and.w	r3, r3, #7
 800cf10:	4903      	ldr	r1, [pc, #12]	; (800cf20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf12:	5ccb      	ldrb	r3, [r1, r3]
 800cf14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	40023800 	.word	0x40023800
 800cf20:	0801241c 	.word	0x0801241c

0800cf24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cf28:	f7ff ffdc 	bl	800cee4 <HAL_RCC_GetHCLKFreq>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	0b5b      	lsrs	r3, r3, #13
 800cf34:	f003 0307 	and.w	r3, r3, #7
 800cf38:	4903      	ldr	r1, [pc, #12]	; (800cf48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf3a:	5ccb      	ldrb	r3, [r1, r3]
 800cf3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	40023800 	.word	0x40023800
 800cf48:	0801241c 	.word	0x0801241c

0800cf4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e041      	b.n	800cfe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d106      	bne.n	800cf78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7f9 fb04 	bl	8006580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3304      	adds	r3, #4
 800cf88:	4619      	mov	r1, r3
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	f000 fda4 	bl	800dad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d001      	beq.n	800d004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e04e      	b.n	800d0a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68da      	ldr	r2, [r3, #12]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f042 0201 	orr.w	r2, r2, #1
 800d01a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a23      	ldr	r2, [pc, #140]	; (800d0b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d022      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d02e:	d01d      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a1f      	ldr	r2, [pc, #124]	; (800d0b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d018      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a1e      	ldr	r2, [pc, #120]	; (800d0b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d013      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a1c      	ldr	r2, [pc, #112]	; (800d0bc <HAL_TIM_Base_Start_IT+0xd0>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d00e      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a1b      	ldr	r2, [pc, #108]	; (800d0c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d009      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a19      	ldr	r2, [pc, #100]	; (800d0c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d004      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x80>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a18      	ldr	r2, [pc, #96]	; (800d0c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d111      	bne.n	800d090 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b06      	cmp	r3, #6
 800d07c:	d010      	beq.n	800d0a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f042 0201 	orr.w	r2, r2, #1
 800d08c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d08e:	e007      	b.n	800d0a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f042 0201 	orr.w	r2, r2, #1
 800d09e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	40010000 	.word	0x40010000
 800d0b4:	40000400 	.word	0x40000400
 800d0b8:	40000800 	.word	0x40000800
 800d0bc:	40000c00 	.word	0x40000c00
 800d0c0:	40010400 	.word	0x40010400
 800d0c4:	40014000 	.word	0x40014000
 800d0c8:	40001800 	.word	0x40001800

0800d0cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e041      	b.n	800d162 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d106      	bne.n	800d0f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7f9 fb1c 	bl	8006730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	3304      	adds	r3, #4
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f000 fce4 	bl	800dad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d109      	bne.n	800d190 <HAL_TIM_PWM_Start+0x24>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b01      	cmp	r3, #1
 800d186:	bf14      	ite	ne
 800d188:	2301      	movne	r3, #1
 800d18a:	2300      	moveq	r3, #0
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	e022      	b.n	800d1d6 <HAL_TIM_PWM_Start+0x6a>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2b04      	cmp	r3, #4
 800d194:	d109      	bne.n	800d1aa <HAL_TIM_PWM_Start+0x3e>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	bf14      	ite	ne
 800d1a2:	2301      	movne	r3, #1
 800d1a4:	2300      	moveq	r3, #0
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	e015      	b.n	800d1d6 <HAL_TIM_PWM_Start+0x6a>
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b08      	cmp	r3, #8
 800d1ae:	d109      	bne.n	800d1c4 <HAL_TIM_PWM_Start+0x58>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	bf14      	ite	ne
 800d1bc:	2301      	movne	r3, #1
 800d1be:	2300      	moveq	r3, #0
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	e008      	b.n	800d1d6 <HAL_TIM_PWM_Start+0x6a>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	bf14      	ite	ne
 800d1d0:	2301      	movne	r3, #1
 800d1d2:	2300      	moveq	r3, #0
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e07c      	b.n	800d2d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d104      	bne.n	800d1ee <HAL_TIM_PWM_Start+0x82>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1ec:	e013      	b.n	800d216 <HAL_TIM_PWM_Start+0xaa>
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	2b04      	cmp	r3, #4
 800d1f2:	d104      	bne.n	800d1fe <HAL_TIM_PWM_Start+0x92>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1fc:	e00b      	b.n	800d216 <HAL_TIM_PWM_Start+0xaa>
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b08      	cmp	r3, #8
 800d202:	d104      	bne.n	800d20e <HAL_TIM_PWM_Start+0xa2>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2202      	movs	r2, #2
 800d208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d20c:	e003      	b.n	800d216 <HAL_TIM_PWM_Start+0xaa>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2202      	movs	r2, #2
 800d212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2201      	movs	r2, #1
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 ff44 	bl	800e0ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a2d      	ldr	r2, [pc, #180]	; (800d2e0 <HAL_TIM_PWM_Start+0x174>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d004      	beq.n	800d238 <HAL_TIM_PWM_Start+0xcc>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a2c      	ldr	r2, [pc, #176]	; (800d2e4 <HAL_TIM_PWM_Start+0x178>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d101      	bne.n	800d23c <HAL_TIM_PWM_Start+0xd0>
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <HAL_TIM_PWM_Start+0xd2>
 800d23c:	2300      	movs	r3, #0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d007      	beq.n	800d252 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a22      	ldr	r2, [pc, #136]	; (800d2e0 <HAL_TIM_PWM_Start+0x174>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d022      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d264:	d01d      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a1f      	ldr	r2, [pc, #124]	; (800d2e8 <HAL_TIM_PWM_Start+0x17c>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d018      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a1d      	ldr	r2, [pc, #116]	; (800d2ec <HAL_TIM_PWM_Start+0x180>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d013      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a1c      	ldr	r2, [pc, #112]	; (800d2f0 <HAL_TIM_PWM_Start+0x184>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d00e      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a16      	ldr	r2, [pc, #88]	; (800d2e4 <HAL_TIM_PWM_Start+0x178>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d009      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a18      	ldr	r2, [pc, #96]	; (800d2f4 <HAL_TIM_PWM_Start+0x188>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d004      	beq.n	800d2a2 <HAL_TIM_PWM_Start+0x136>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a16      	ldr	r2, [pc, #88]	; (800d2f8 <HAL_TIM_PWM_Start+0x18c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d111      	bne.n	800d2c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f003 0307 	and.w	r3, r3, #7
 800d2ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2b06      	cmp	r3, #6
 800d2b2:	d010      	beq.n	800d2d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f042 0201 	orr.w	r2, r2, #1
 800d2c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c4:	e007      	b.n	800d2d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f042 0201 	orr.w	r2, r2, #1
 800d2d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	40010000 	.word	0x40010000
 800d2e4:	40010400 	.word	0x40010400
 800d2e8:	40000400 	.word	0x40000400
 800d2ec:	40000800 	.word	0x40000800
 800d2f0:	40000c00 	.word	0x40000c00
 800d2f4:	40014000 	.word	0x40014000
 800d2f8:	40001800 	.word	0x40001800

0800d2fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d101      	bne.n	800d310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e097      	b.n	800d440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d106      	bne.n	800d32a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7f9 f969 	bl	80065fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2202      	movs	r2, #2
 800d32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	6812      	ldr	r2, [r2, #0]
 800d33c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d340:	f023 0307 	bic.w	r3, r3, #7
 800d344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3304      	adds	r3, #4
 800d34e:	4619      	mov	r1, r3
 800d350:	4610      	mov	r0, r2
 800d352:	f000 fbc1 	bl	800dad8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	6a1b      	ldr	r3, [r3, #32]
 800d36c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	4313      	orrs	r3, r2
 800d376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d37e:	f023 0303 	bic.w	r3, r3, #3
 800d382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	689a      	ldr	r2, [r3, #8]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	699b      	ldr	r3, [r3, #24]
 800d38c:	021b      	lsls	r3, r3, #8
 800d38e:	4313      	orrs	r3, r2
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	4313      	orrs	r3, r2
 800d394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d39c:	f023 030c 	bic.w	r3, r3, #12
 800d3a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	69db      	ldr	r3, [r3, #28]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	011a      	lsls	r2, r3, #4
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	031b      	lsls	r3, r3, #12
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d3da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d3e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	011b      	lsls	r3, r3, #4
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	693a      	ldr	r2, [r7, #16]
 800d404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d458:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d460:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d468:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d470:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d110      	bne.n	800d49a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d102      	bne.n	800d484 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d47e:	7b7b      	ldrb	r3, [r7, #13]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d001      	beq.n	800d488 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	e069      	b.n	800d55c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2202      	movs	r2, #2
 800d494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d498:	e031      	b.n	800d4fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b04      	cmp	r3, #4
 800d49e:	d110      	bne.n	800d4c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d102      	bne.n	800d4ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4a6:	7b3b      	ldrb	r3, [r7, #12]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d001      	beq.n	800d4b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e055      	b.n	800d55c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4c0:	e01d      	b.n	800d4fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d108      	bne.n	800d4da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4c8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d105      	bne.n	800d4da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4ce:	7b7b      	ldrb	r3, [r7, #13]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d102      	bne.n	800d4da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4d4:	7b3b      	ldrb	r3, [r7, #12]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d001      	beq.n	800d4de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e03e      	b.n	800d55c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d003      	beq.n	800d50c <HAL_TIM_Encoder_Start+0xc4>
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b04      	cmp	r3, #4
 800d508:	d008      	beq.n	800d51c <HAL_TIM_Encoder_Start+0xd4>
 800d50a:	e00f      	b.n	800d52c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2201      	movs	r2, #1
 800d512:	2100      	movs	r1, #0
 800d514:	4618      	mov	r0, r3
 800d516:	f000 fdc9 	bl	800e0ac <TIM_CCxChannelCmd>
      break;
 800d51a:	e016      	b.n	800d54a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2201      	movs	r2, #1
 800d522:	2104      	movs	r1, #4
 800d524:	4618      	mov	r0, r3
 800d526:	f000 fdc1 	bl	800e0ac <TIM_CCxChannelCmd>
      break;
 800d52a:	e00e      	b.n	800d54a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2201      	movs	r2, #1
 800d532:	2100      	movs	r1, #0
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fdb9 	bl	800e0ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2201      	movs	r2, #1
 800d540:	2104      	movs	r1, #4
 800d542:	4618      	mov	r0, r3
 800d544:	f000 fdb2 	bl	800e0ac <TIM_CCxChannelCmd>
      break;
 800d548:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f042 0201 	orr.w	r2, r2, #1
 800d558:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	f003 0302 	and.w	r3, r3, #2
 800d576:	2b02      	cmp	r3, #2
 800d578:	d122      	bne.n	800d5c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	2b02      	cmp	r3, #2
 800d586:	d11b      	bne.n	800d5c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f06f 0202 	mvn.w	r2, #2
 800d590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	699b      	ldr	r3, [r3, #24]
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fa77 	bl	800da9a <HAL_TIM_IC_CaptureCallback>
 800d5ac:	e005      	b.n	800d5ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fa69 	bl	800da86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fa7a 	bl	800daae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	f003 0304 	and.w	r3, r3, #4
 800d5ca:	2b04      	cmp	r3, #4
 800d5cc:	d122      	bne.n	800d614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f003 0304 	and.w	r3, r3, #4
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d11b      	bne.n	800d614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f06f 0204 	mvn.w	r2, #4
 800d5e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fa4d 	bl	800da9a <HAL_TIM_IC_CaptureCallback>
 800d600:	e005      	b.n	800d60e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa3f 	bl	800da86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fa50 	bl	800daae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	f003 0308 	and.w	r3, r3, #8
 800d61e:	2b08      	cmp	r3, #8
 800d620:	d122      	bne.n	800d668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f003 0308 	and.w	r3, r3, #8
 800d62c:	2b08      	cmp	r3, #8
 800d62e:	d11b      	bne.n	800d668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f06f 0208 	mvn.w	r2, #8
 800d638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2204      	movs	r2, #4
 800d63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	69db      	ldr	r3, [r3, #28]
 800d646:	f003 0303 	and.w	r3, r3, #3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d003      	beq.n	800d656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fa23 	bl	800da9a <HAL_TIM_IC_CaptureCallback>
 800d654:	e005      	b.n	800d662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fa15 	bl	800da86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fa26 	bl	800daae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	f003 0310 	and.w	r3, r3, #16
 800d672:	2b10      	cmp	r3, #16
 800d674:	d122      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	f003 0310 	and.w	r3, r3, #16
 800d680:	2b10      	cmp	r3, #16
 800d682:	d11b      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f06f 0210 	mvn.w	r2, #16
 800d68c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2208      	movs	r2, #8
 800d692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f9f9 	bl	800da9a <HAL_TIM_IC_CaptureCallback>
 800d6a8:	e005      	b.n	800d6b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f9eb 	bl	800da86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 f9fc 	bl	800daae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d10e      	bne.n	800d6e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d107      	bne.n	800d6e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f06f 0201 	mvn.w	r2, #1
 800d6e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7f4 fdd2 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6f2:	2b80      	cmp	r3, #128	; 0x80
 800d6f4:	d10e      	bne.n	800d714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d700:	2b80      	cmp	r3, #128	; 0x80
 800d702:	d107      	bne.n	800d714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d70c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 fdca 	bl	800e2a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d71e:	2b40      	cmp	r3, #64	; 0x40
 800d720:	d10e      	bne.n	800d740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d72c:	2b40      	cmp	r3, #64	; 0x40
 800d72e:	d107      	bne.n	800d740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f9c1 	bl	800dac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	f003 0320 	and.w	r3, r3, #32
 800d74a:	2b20      	cmp	r3, #32
 800d74c:	d10e      	bne.n	800d76c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	f003 0320 	and.w	r3, r3, #32
 800d758:	2b20      	cmp	r3, #32
 800d75a:	d107      	bne.n	800d76c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f06f 0220 	mvn.w	r2, #32
 800d764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fd94 	bl	800e294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d76c:	bf00      	nop
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d101      	bne.n	800d792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d78e:	2302      	movs	r3, #2
 800d790:	e0ae      	b.n	800d8f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b0c      	cmp	r3, #12
 800d79e:	f200 809f 	bhi.w	800d8e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d7a2:	a201      	add	r2, pc, #4	; (adr r2, 800d7a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a8:	0800d7dd 	.word	0x0800d7dd
 800d7ac:	0800d8e1 	.word	0x0800d8e1
 800d7b0:	0800d8e1 	.word	0x0800d8e1
 800d7b4:	0800d8e1 	.word	0x0800d8e1
 800d7b8:	0800d81d 	.word	0x0800d81d
 800d7bc:	0800d8e1 	.word	0x0800d8e1
 800d7c0:	0800d8e1 	.word	0x0800d8e1
 800d7c4:	0800d8e1 	.word	0x0800d8e1
 800d7c8:	0800d85f 	.word	0x0800d85f
 800d7cc:	0800d8e1 	.word	0x0800d8e1
 800d7d0:	0800d8e1 	.word	0x0800d8e1
 800d7d4:	0800d8e1 	.word	0x0800d8e1
 800d7d8:	0800d89f 	.word	0x0800d89f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68b9      	ldr	r1, [r7, #8]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f000 fa18 	bl	800dc18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	699a      	ldr	r2, [r3, #24]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f042 0208 	orr.w	r2, r2, #8
 800d7f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	699a      	ldr	r2, [r3, #24]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f022 0204 	bic.w	r2, r2, #4
 800d806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6999      	ldr	r1, [r3, #24]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	691a      	ldr	r2, [r3, #16]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	619a      	str	r2, [r3, #24]
      break;
 800d81a:	e064      	b.n	800d8e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68b9      	ldr	r1, [r7, #8]
 800d822:	4618      	mov	r0, r3
 800d824:	f000 fa68 	bl	800dcf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	699a      	ldr	r2, [r3, #24]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	699a      	ldr	r2, [r3, #24]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6999      	ldr	r1, [r3, #24]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	021a      	lsls	r2, r3, #8
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	430a      	orrs	r2, r1
 800d85a:	619a      	str	r2, [r3, #24]
      break;
 800d85c:	e043      	b.n	800d8e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	4618      	mov	r0, r3
 800d866:	f000 fabd 	bl	800dde4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	69da      	ldr	r2, [r3, #28]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f042 0208 	orr.w	r2, r2, #8
 800d878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	69da      	ldr	r2, [r3, #28]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f022 0204 	bic.w	r2, r2, #4
 800d888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	69d9      	ldr	r1, [r3, #28]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	691a      	ldr	r2, [r3, #16]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	430a      	orrs	r2, r1
 800d89a:	61da      	str	r2, [r3, #28]
      break;
 800d89c:	e023      	b.n	800d8e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	68b9      	ldr	r1, [r7, #8]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 fb11 	bl	800decc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	69da      	ldr	r2, [r3, #28]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	69da      	ldr	r2, [r3, #28]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69d9      	ldr	r1, [r3, #28]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	021a      	lsls	r2, r3, #8
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	430a      	orrs	r2, r1
 800d8dc:	61da      	str	r2, [r3, #28]
      break;
 800d8de:	e002      	b.n	800d8e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	75fb      	strb	r3, [r7, #23]
      break;
 800d8e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d101      	bne.n	800d914 <HAL_TIM_ConfigClockSource+0x1c>
 800d910:	2302      	movs	r3, #2
 800d912:	e0b4      	b.n	800da7e <HAL_TIM_ConfigClockSource+0x186>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2202      	movs	r2, #2
 800d920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d93a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d94c:	d03e      	beq.n	800d9cc <HAL_TIM_ConfigClockSource+0xd4>
 800d94e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d952:	f200 8087 	bhi.w	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d95a:	f000 8086 	beq.w	800da6a <HAL_TIM_ConfigClockSource+0x172>
 800d95e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d962:	d87f      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d964:	2b70      	cmp	r3, #112	; 0x70
 800d966:	d01a      	beq.n	800d99e <HAL_TIM_ConfigClockSource+0xa6>
 800d968:	2b70      	cmp	r3, #112	; 0x70
 800d96a:	d87b      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d96c:	2b60      	cmp	r3, #96	; 0x60
 800d96e:	d050      	beq.n	800da12 <HAL_TIM_ConfigClockSource+0x11a>
 800d970:	2b60      	cmp	r3, #96	; 0x60
 800d972:	d877      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d974:	2b50      	cmp	r3, #80	; 0x50
 800d976:	d03c      	beq.n	800d9f2 <HAL_TIM_ConfigClockSource+0xfa>
 800d978:	2b50      	cmp	r3, #80	; 0x50
 800d97a:	d873      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d97c:	2b40      	cmp	r3, #64	; 0x40
 800d97e:	d058      	beq.n	800da32 <HAL_TIM_ConfigClockSource+0x13a>
 800d980:	2b40      	cmp	r3, #64	; 0x40
 800d982:	d86f      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d984:	2b30      	cmp	r3, #48	; 0x30
 800d986:	d064      	beq.n	800da52 <HAL_TIM_ConfigClockSource+0x15a>
 800d988:	2b30      	cmp	r3, #48	; 0x30
 800d98a:	d86b      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d98c:	2b20      	cmp	r3, #32
 800d98e:	d060      	beq.n	800da52 <HAL_TIM_ConfigClockSource+0x15a>
 800d990:	2b20      	cmp	r3, #32
 800d992:	d867      	bhi.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
 800d994:	2b00      	cmp	r3, #0
 800d996:	d05c      	beq.n	800da52 <HAL_TIM_ConfigClockSource+0x15a>
 800d998:	2b10      	cmp	r3, #16
 800d99a:	d05a      	beq.n	800da52 <HAL_TIM_ConfigClockSource+0x15a>
 800d99c:	e062      	b.n	800da64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	6899      	ldr	r1, [r3, #8]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	f000 fb5d 	bl	800e06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d9c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	609a      	str	r2, [r3, #8]
      break;
 800d9ca:	e04f      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6818      	ldr	r0, [r3, #0]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	6899      	ldr	r1, [r3, #8]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	f000 fb46 	bl	800e06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	689a      	ldr	r2, [r3, #8]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d9ee:	609a      	str	r2, [r3, #8]
      break;
 800d9f0:	e03c      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6818      	ldr	r0, [r3, #0]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	6859      	ldr	r1, [r3, #4]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	461a      	mov	r2, r3
 800da00:	f000 faba 	bl	800df78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2150      	movs	r1, #80	; 0x50
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 fb13 	bl	800e036 <TIM_ITRx_SetConfig>
      break;
 800da10:	e02c      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	6859      	ldr	r1, [r3, #4]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	461a      	mov	r2, r3
 800da20:	f000 fad9 	bl	800dfd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2160      	movs	r1, #96	; 0x60
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fb03 	bl	800e036 <TIM_ITRx_SetConfig>
      break;
 800da30:	e01c      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6818      	ldr	r0, [r3, #0]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	6859      	ldr	r1, [r3, #4]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	461a      	mov	r2, r3
 800da40:	f000 fa9a 	bl	800df78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2140      	movs	r1, #64	; 0x40
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 faf3 	bl	800e036 <TIM_ITRx_SetConfig>
      break;
 800da50:	e00c      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4619      	mov	r1, r3
 800da5c:	4610      	mov	r0, r2
 800da5e:	f000 faea 	bl	800e036 <TIM_ITRx_SetConfig>
      break;
 800da62:	e003      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	73fb      	strb	r3, [r7, #15]
      break;
 800da68:	e000      	b.n	800da6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800da6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da86:	b480      	push	{r7}
 800da88:	b083      	sub	sp, #12
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da8e:	bf00      	nop
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800daa2:	bf00      	nop
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800daca:	bf00      	nop
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
	...

0800dad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a40      	ldr	r2, [pc, #256]	; (800dbec <TIM_Base_SetConfig+0x114>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d013      	beq.n	800db18 <TIM_Base_SetConfig+0x40>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daf6:	d00f      	beq.n	800db18 <TIM_Base_SetConfig+0x40>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a3d      	ldr	r2, [pc, #244]	; (800dbf0 <TIM_Base_SetConfig+0x118>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d00b      	beq.n	800db18 <TIM_Base_SetConfig+0x40>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a3c      	ldr	r2, [pc, #240]	; (800dbf4 <TIM_Base_SetConfig+0x11c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d007      	beq.n	800db18 <TIM_Base_SetConfig+0x40>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a3b      	ldr	r2, [pc, #236]	; (800dbf8 <TIM_Base_SetConfig+0x120>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d003      	beq.n	800db18 <TIM_Base_SetConfig+0x40>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a3a      	ldr	r2, [pc, #232]	; (800dbfc <TIM_Base_SetConfig+0x124>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d108      	bne.n	800db2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	4313      	orrs	r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a2f      	ldr	r2, [pc, #188]	; (800dbec <TIM_Base_SetConfig+0x114>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d02b      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db38:	d027      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a2c      	ldr	r2, [pc, #176]	; (800dbf0 <TIM_Base_SetConfig+0x118>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d023      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a2b      	ldr	r2, [pc, #172]	; (800dbf4 <TIM_Base_SetConfig+0x11c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d01f      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a2a      	ldr	r2, [pc, #168]	; (800dbf8 <TIM_Base_SetConfig+0x120>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d01b      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a29      	ldr	r2, [pc, #164]	; (800dbfc <TIM_Base_SetConfig+0x124>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d017      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a28      	ldr	r2, [pc, #160]	; (800dc00 <TIM_Base_SetConfig+0x128>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d013      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a27      	ldr	r2, [pc, #156]	; (800dc04 <TIM_Base_SetConfig+0x12c>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d00f      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a26      	ldr	r2, [pc, #152]	; (800dc08 <TIM_Base_SetConfig+0x130>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d00b      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a25      	ldr	r2, [pc, #148]	; (800dc0c <TIM_Base_SetConfig+0x134>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d007      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a24      	ldr	r2, [pc, #144]	; (800dc10 <TIM_Base_SetConfig+0x138>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d003      	beq.n	800db8a <TIM_Base_SetConfig+0xb2>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a23      	ldr	r2, [pc, #140]	; (800dc14 <TIM_Base_SetConfig+0x13c>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d108      	bne.n	800db9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	4313      	orrs	r3, r2
 800db9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	689a      	ldr	r2, [r3, #8]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a0a      	ldr	r2, [pc, #40]	; (800dbec <TIM_Base_SetConfig+0x114>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d003      	beq.n	800dbd0 <TIM_Base_SetConfig+0xf8>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a0c      	ldr	r2, [pc, #48]	; (800dbfc <TIM_Base_SetConfig+0x124>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d103      	bne.n	800dbd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	691a      	ldr	r2, [r3, #16]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	615a      	str	r2, [r3, #20]
}
 800dbde:	bf00      	nop
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	40010000 	.word	0x40010000
 800dbf0:	40000400 	.word	0x40000400
 800dbf4:	40000800 	.word	0x40000800
 800dbf8:	40000c00 	.word	0x40000c00
 800dbfc:	40010400 	.word	0x40010400
 800dc00:	40014000 	.word	0x40014000
 800dc04:	40014400 	.word	0x40014400
 800dc08:	40014800 	.word	0x40014800
 800dc0c:	40001800 	.word	0x40001800
 800dc10:	40001c00 	.word	0x40001c00
 800dc14:	40002000 	.word	0x40002000

0800dc18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	f023 0201 	bic.w	r2, r3, #1
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	699b      	ldr	r3, [r3, #24]
 800dc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f023 0303 	bic.w	r3, r3, #3
 800dc4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	f023 0302 	bic.w	r3, r3, #2
 800dc60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a20      	ldr	r2, [pc, #128]	; (800dcf0 <TIM_OC1_SetConfig+0xd8>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d003      	beq.n	800dc7c <TIM_OC1_SetConfig+0x64>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a1f      	ldr	r2, [pc, #124]	; (800dcf4 <TIM_OC1_SetConfig+0xdc>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d10c      	bne.n	800dc96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	f023 0308 	bic.w	r3, r3, #8
 800dc82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	697a      	ldr	r2, [r7, #20]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	f023 0304 	bic.w	r3, r3, #4
 800dc94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a15      	ldr	r2, [pc, #84]	; (800dcf0 <TIM_OC1_SetConfig+0xd8>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d003      	beq.n	800dca6 <TIM_OC1_SetConfig+0x8e>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a14      	ldr	r2, [pc, #80]	; (800dcf4 <TIM_OC1_SetConfig+0xdc>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d111      	bne.n	800dcca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dcb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	699b      	ldr	r3, [r3, #24]
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	685a      	ldr	r2, [r3, #4]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	621a      	str	r2, [r3, #32]
}
 800dce4:	bf00      	nop
 800dce6:	371c      	adds	r7, #28
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr
 800dcf0:	40010000 	.word	0x40010000
 800dcf4:	40010400 	.word	0x40010400

0800dcf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	f023 0210 	bic.w	r2, r3, #16
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	021b      	lsls	r3, r3, #8
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	f023 0320 	bic.w	r3, r3, #32
 800dd42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	011b      	lsls	r3, r3, #4
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a22      	ldr	r2, [pc, #136]	; (800dddc <TIM_OC2_SetConfig+0xe4>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d003      	beq.n	800dd60 <TIM_OC2_SetConfig+0x68>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a21      	ldr	r2, [pc, #132]	; (800dde0 <TIM_OC2_SetConfig+0xe8>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d10d      	bne.n	800dd7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	011b      	lsls	r3, r3, #4
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a17      	ldr	r2, [pc, #92]	; (800dddc <TIM_OC2_SetConfig+0xe4>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d003      	beq.n	800dd8c <TIM_OC2_SetConfig+0x94>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4a16      	ldr	r2, [pc, #88]	; (800dde0 <TIM_OC2_SetConfig+0xe8>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d113      	bne.n	800ddb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	695b      	ldr	r3, [r3, #20]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	685a      	ldr	r2, [r3, #4]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	621a      	str	r2, [r3, #32]
}
 800ddce:	bf00      	nop
 800ddd0:	371c      	adds	r7, #28
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	40010000 	.word	0x40010000
 800dde0:	40010400 	.word	0x40010400

0800dde4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b087      	sub	sp, #28
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	69db      	ldr	r3, [r3, #28]
 800de0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f023 0303 	bic.w	r3, r3, #3
 800de1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	4313      	orrs	r3, r2
 800de24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	021b      	lsls	r3, r3, #8
 800de34:	697a      	ldr	r2, [r7, #20]
 800de36:	4313      	orrs	r3, r2
 800de38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a21      	ldr	r2, [pc, #132]	; (800dec4 <TIM_OC3_SetConfig+0xe0>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d003      	beq.n	800de4a <TIM_OC3_SetConfig+0x66>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a20      	ldr	r2, [pc, #128]	; (800dec8 <TIM_OC3_SetConfig+0xe4>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d10d      	bne.n	800de66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	021b      	lsls	r3, r3, #8
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a16      	ldr	r2, [pc, #88]	; (800dec4 <TIM_OC3_SetConfig+0xe0>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d003      	beq.n	800de76 <TIM_OC3_SetConfig+0x92>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <TIM_OC3_SetConfig+0xe4>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d113      	bne.n	800de9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	011b      	lsls	r3, r3, #4
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	4313      	orrs	r3, r2
 800de90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	011b      	lsls	r3, r3, #4
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	621a      	str	r2, [r3, #32]
}
 800deb8:	bf00      	nop
 800deba:	371c      	adds	r7, #28
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	40010000 	.word	0x40010000
 800dec8:	40010400 	.word	0x40010400

0800decc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a1b      	ldr	r3, [r3, #32]
 800deda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	69db      	ldr	r3, [r3, #28]
 800def2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800defa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	021b      	lsls	r3, r3, #8
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	031b      	lsls	r3, r3, #12
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	4313      	orrs	r3, r2
 800df22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4a12      	ldr	r2, [pc, #72]	; (800df70 <TIM_OC4_SetConfig+0xa4>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d003      	beq.n	800df34 <TIM_OC4_SetConfig+0x68>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a11      	ldr	r2, [pc, #68]	; (800df74 <TIM_OC4_SetConfig+0xa8>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d109      	bne.n	800df48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	019b      	lsls	r3, r3, #6
 800df42:	697a      	ldr	r2, [r7, #20]
 800df44:	4313      	orrs	r3, r2
 800df46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	697a      	ldr	r2, [r7, #20]
 800df4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	685a      	ldr	r2, [r3, #4]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	621a      	str	r2, [r3, #32]
}
 800df62:	bf00      	nop
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	40010000 	.word	0x40010000
 800df74:	40010400 	.word	0x40010400

0800df78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df78:	b480      	push	{r7}
 800df7a:	b087      	sub	sp, #28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6a1b      	ldr	r3, [r3, #32]
 800df88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	f023 0201 	bic.w	r2, r3, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	011b      	lsls	r3, r3, #4
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f023 030a 	bic.w	r3, r3, #10
 800dfb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	697a      	ldr	r2, [r7, #20]
 800dfc8:	621a      	str	r2, [r3, #32]
}
 800dfca:	bf00      	nop
 800dfcc:	371c      	adds	r7, #28
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr

0800dfd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	b087      	sub	sp, #28
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	60f8      	str	r0, [r7, #12]
 800dfde:	60b9      	str	r1, [r7, #8]
 800dfe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	f023 0210 	bic.w	r2, r3, #16
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6a1b      	ldr	r3, [r3, #32]
 800dff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	031b      	lsls	r3, r3, #12
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	4313      	orrs	r3, r2
 800e00a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	011b      	lsls	r3, r3, #4
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	621a      	str	r2, [r3, #32]
}
 800e02a:	bf00      	nop
 800e02c:	371c      	adds	r7, #28
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e036:	b480      	push	{r7}
 800e038:	b085      	sub	sp, #20
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e04c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4313      	orrs	r3, r2
 800e054:	f043 0307 	orr.w	r3, r3, #7
 800e058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	609a      	str	r2, [r3, #8]
}
 800e060:	bf00      	nop
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b087      	sub	sp, #28
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	021a      	lsls	r2, r3, #8
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	431a      	orrs	r2, r3
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	4313      	orrs	r3, r2
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	4313      	orrs	r3, r2
 800e098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	609a      	str	r2, [r3, #8]
}
 800e0a0:	bf00      	nop
 800e0a2:	371c      	adds	r7, #28
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b087      	sub	sp, #28
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f003 031f 	and.w	r3, r3, #31
 800e0be:	2201      	movs	r2, #1
 800e0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a1a      	ldr	r2, [r3, #32]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	43db      	mvns	r3, r3
 800e0ce:	401a      	ands	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a1a      	ldr	r2, [r3, #32]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	f003 031f 	and.w	r3, r3, #31
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e4:	431a      	orrs	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	621a      	str	r2, [r3, #32]
}
 800e0ea:	bf00      	nop
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
	...

0800e0f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d101      	bne.n	800e110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e10c:	2302      	movs	r3, #2
 800e10e:	e05a      	b.n	800e1c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2202      	movs	r2, #2
 800e11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	4313      	orrs	r3, r2
 800e140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a21      	ldr	r2, [pc, #132]	; (800e1d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d022      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e15c:	d01d      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a1d      	ldr	r2, [pc, #116]	; (800e1d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d018      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a1b      	ldr	r2, [pc, #108]	; (800e1dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d013      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a1a      	ldr	r2, [pc, #104]	; (800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d00e      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a18      	ldr	r2, [pc, #96]	; (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d009      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a17      	ldr	r2, [pc, #92]	; (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d004      	beq.n	800e19a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a15      	ldr	r2, [pc, #84]	; (800e1ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d10c      	bne.n	800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	40010000 	.word	0x40010000
 800e1d8:	40000400 	.word	0x40000400
 800e1dc:	40000800 	.word	0x40000800
 800e1e0:	40000c00 	.word	0x40000c00
 800e1e4:	40010400 	.word	0x40010400
 800e1e8:	40014000 	.word	0x40014000
 800e1ec:	40001800 	.word	0x40001800

0800e1f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e204:	2b01      	cmp	r3, #1
 800e206:	d101      	bne.n	800e20c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e208:	2302      	movs	r3, #2
 800e20a:	e03d      	b.n	800e288 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	4313      	orrs	r3, r2
 800e220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	4313      	orrs	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4313      	orrs	r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	4313      	orrs	r3, r2
 800e258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	695b      	ldr	r3, [r3, #20]
 800e264:	4313      	orrs	r3, r2
 800e266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	69db      	ldr	r3, [r3, #28]
 800e272:	4313      	orrs	r3, r2
 800e274:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e29c:	bf00      	nop
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d101      	bne.n	800e2ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e03f      	b.n	800e34e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d106      	bne.n	800e2e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7fb fba8 	bl	8009a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2224      	movs	r2, #36	; 0x24
 800e2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68da      	ldr	r2, [r3, #12]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e2fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f829 	bl	800e358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	691a      	ldr	r2, [r3, #16]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	695a      	ldr	r2, [r3, #20]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68da      	ldr	r2, [r3, #12]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2220      	movs	r2, #32
 800e340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2220      	movs	r2, #32
 800e348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e35c:	b0c0      	sub	sp, #256	; 0x100
 800e35e:	af00      	add	r7, sp, #0
 800e360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e374:	68d9      	ldr	r1, [r3, #12]
 800e376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	ea40 0301 	orr.w	r3, r0, r1
 800e380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e386:	689a      	ldr	r2, [r3, #8]
 800e388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	431a      	orrs	r2, r3
 800e390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e394:	695b      	ldr	r3, [r3, #20]
 800e396:	431a      	orrs	r2, r3
 800e398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e39c:	69db      	ldr	r3, [r3, #28]
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e3b0:	f021 010c 	bic.w	r1, r1, #12
 800e3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e3be:	430b      	orrs	r3, r1
 800e3c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e3c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3d2:	6999      	ldr	r1, [r3, #24]
 800e3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	ea40 0301 	orr.w	r3, r0, r1
 800e3de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	4b8f      	ldr	r3, [pc, #572]	; (800e624 <UART_SetConfig+0x2cc>)
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d005      	beq.n	800e3f8 <UART_SetConfig+0xa0>
 800e3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	4b8d      	ldr	r3, [pc, #564]	; (800e628 <UART_SetConfig+0x2d0>)
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d104      	bne.n	800e402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e3f8:	f7fe fd94 	bl	800cf24 <HAL_RCC_GetPCLK2Freq>
 800e3fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e400:	e003      	b.n	800e40a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e402:	f7fe fd7b 	bl	800cefc <HAL_RCC_GetPCLK1Freq>
 800e406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e40a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e40e:	69db      	ldr	r3, [r3, #28]
 800e410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e414:	f040 810c 	bne.w	800e630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e41c:	2200      	movs	r2, #0
 800e41e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e42a:	4622      	mov	r2, r4
 800e42c:	462b      	mov	r3, r5
 800e42e:	1891      	adds	r1, r2, r2
 800e430:	65b9      	str	r1, [r7, #88]	; 0x58
 800e432:	415b      	adcs	r3, r3
 800e434:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e43a:	4621      	mov	r1, r4
 800e43c:	eb12 0801 	adds.w	r8, r2, r1
 800e440:	4629      	mov	r1, r5
 800e442:	eb43 0901 	adc.w	r9, r3, r1
 800e446:	f04f 0200 	mov.w	r2, #0
 800e44a:	f04f 0300 	mov.w	r3, #0
 800e44e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e45a:	4690      	mov	r8, r2
 800e45c:	4699      	mov	r9, r3
 800e45e:	4623      	mov	r3, r4
 800e460:	eb18 0303 	adds.w	r3, r8, r3
 800e464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e468:	462b      	mov	r3, r5
 800e46a:	eb49 0303 	adc.w	r3, r9, r3
 800e46e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e47e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e486:	460b      	mov	r3, r1
 800e488:	18db      	adds	r3, r3, r3
 800e48a:	653b      	str	r3, [r7, #80]	; 0x50
 800e48c:	4613      	mov	r3, r2
 800e48e:	eb42 0303 	adc.w	r3, r2, r3
 800e492:	657b      	str	r3, [r7, #84]	; 0x54
 800e494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e49c:	f7f2 fbf4 	bl	8000c88 <__aeabi_uldivmod>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4b61      	ldr	r3, [pc, #388]	; (800e62c <UART_SetConfig+0x2d4>)
 800e4a6:	fba3 2302 	umull	r2, r3, r3, r2
 800e4aa:	095b      	lsrs	r3, r3, #5
 800e4ac:	011c      	lsls	r4, r3, #4
 800e4ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e4bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e4c0:	4642      	mov	r2, r8
 800e4c2:	464b      	mov	r3, r9
 800e4c4:	1891      	adds	r1, r2, r2
 800e4c6:	64b9      	str	r1, [r7, #72]	; 0x48
 800e4c8:	415b      	adcs	r3, r3
 800e4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e4d0:	4641      	mov	r1, r8
 800e4d2:	eb12 0a01 	adds.w	sl, r2, r1
 800e4d6:	4649      	mov	r1, r9
 800e4d8:	eb43 0b01 	adc.w	fp, r3, r1
 800e4dc:	f04f 0200 	mov.w	r2, #0
 800e4e0:	f04f 0300 	mov.w	r3, #0
 800e4e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e4e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e4ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e4f0:	4692      	mov	sl, r2
 800e4f2:	469b      	mov	fp, r3
 800e4f4:	4643      	mov	r3, r8
 800e4f6:	eb1a 0303 	adds.w	r3, sl, r3
 800e4fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e4fe:	464b      	mov	r3, r9
 800e500:	eb4b 0303 	adc.w	r3, fp, r3
 800e504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e51c:	460b      	mov	r3, r1
 800e51e:	18db      	adds	r3, r3, r3
 800e520:	643b      	str	r3, [r7, #64]	; 0x40
 800e522:	4613      	mov	r3, r2
 800e524:	eb42 0303 	adc.w	r3, r2, r3
 800e528:	647b      	str	r3, [r7, #68]	; 0x44
 800e52a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e52e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e532:	f7f2 fba9 	bl	8000c88 <__aeabi_uldivmod>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	4611      	mov	r1, r2
 800e53c:	4b3b      	ldr	r3, [pc, #236]	; (800e62c <UART_SetConfig+0x2d4>)
 800e53e:	fba3 2301 	umull	r2, r3, r3, r1
 800e542:	095b      	lsrs	r3, r3, #5
 800e544:	2264      	movs	r2, #100	; 0x64
 800e546:	fb02 f303 	mul.w	r3, r2, r3
 800e54a:	1acb      	subs	r3, r1, r3
 800e54c:	00db      	lsls	r3, r3, #3
 800e54e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e552:	4b36      	ldr	r3, [pc, #216]	; (800e62c <UART_SetConfig+0x2d4>)
 800e554:	fba3 2302 	umull	r2, r3, r3, r2
 800e558:	095b      	lsrs	r3, r3, #5
 800e55a:	005b      	lsls	r3, r3, #1
 800e55c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e560:	441c      	add	r4, r3
 800e562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e566:	2200      	movs	r2, #0
 800e568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e56c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e574:	4642      	mov	r2, r8
 800e576:	464b      	mov	r3, r9
 800e578:	1891      	adds	r1, r2, r2
 800e57a:	63b9      	str	r1, [r7, #56]	; 0x38
 800e57c:	415b      	adcs	r3, r3
 800e57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e584:	4641      	mov	r1, r8
 800e586:	1851      	adds	r1, r2, r1
 800e588:	6339      	str	r1, [r7, #48]	; 0x30
 800e58a:	4649      	mov	r1, r9
 800e58c:	414b      	adcs	r3, r1
 800e58e:	637b      	str	r3, [r7, #52]	; 0x34
 800e590:	f04f 0200 	mov.w	r2, #0
 800e594:	f04f 0300 	mov.w	r3, #0
 800e598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e59c:	4659      	mov	r1, fp
 800e59e:	00cb      	lsls	r3, r1, #3
 800e5a0:	4651      	mov	r1, sl
 800e5a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e5a6:	4651      	mov	r1, sl
 800e5a8:	00ca      	lsls	r2, r1, #3
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	4642      	mov	r2, r8
 800e5b2:	189b      	adds	r3, r3, r2
 800e5b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e5b8:	464b      	mov	r3, r9
 800e5ba:	460a      	mov	r2, r1
 800e5bc:	eb42 0303 	adc.w	r3, r2, r3
 800e5c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e5d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e5d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e5d8:	460b      	mov	r3, r1
 800e5da:	18db      	adds	r3, r3, r3
 800e5dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5de:	4613      	mov	r3, r2
 800e5e0:	eb42 0303 	adc.w	r3, r2, r3
 800e5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e5ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e5ee:	f7f2 fb4b 	bl	8000c88 <__aeabi_uldivmod>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4b0d      	ldr	r3, [pc, #52]	; (800e62c <UART_SetConfig+0x2d4>)
 800e5f8:	fba3 1302 	umull	r1, r3, r3, r2
 800e5fc:	095b      	lsrs	r3, r3, #5
 800e5fe:	2164      	movs	r1, #100	; 0x64
 800e600:	fb01 f303 	mul.w	r3, r1, r3
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	00db      	lsls	r3, r3, #3
 800e608:	3332      	adds	r3, #50	; 0x32
 800e60a:	4a08      	ldr	r2, [pc, #32]	; (800e62c <UART_SetConfig+0x2d4>)
 800e60c:	fba2 2303 	umull	r2, r3, r2, r3
 800e610:	095b      	lsrs	r3, r3, #5
 800e612:	f003 0207 	and.w	r2, r3, #7
 800e616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4422      	add	r2, r4
 800e61e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e620:	e106      	b.n	800e830 <UART_SetConfig+0x4d8>
 800e622:	bf00      	nop
 800e624:	40011000 	.word	0x40011000
 800e628:	40011400 	.word	0x40011400
 800e62c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e634:	2200      	movs	r2, #0
 800e636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e63a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e63e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e642:	4642      	mov	r2, r8
 800e644:	464b      	mov	r3, r9
 800e646:	1891      	adds	r1, r2, r2
 800e648:	6239      	str	r1, [r7, #32]
 800e64a:	415b      	adcs	r3, r3
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
 800e64e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e652:	4641      	mov	r1, r8
 800e654:	1854      	adds	r4, r2, r1
 800e656:	4649      	mov	r1, r9
 800e658:	eb43 0501 	adc.w	r5, r3, r1
 800e65c:	f04f 0200 	mov.w	r2, #0
 800e660:	f04f 0300 	mov.w	r3, #0
 800e664:	00eb      	lsls	r3, r5, #3
 800e666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e66a:	00e2      	lsls	r2, r4, #3
 800e66c:	4614      	mov	r4, r2
 800e66e:	461d      	mov	r5, r3
 800e670:	4643      	mov	r3, r8
 800e672:	18e3      	adds	r3, r4, r3
 800e674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e678:	464b      	mov	r3, r9
 800e67a:	eb45 0303 	adc.w	r3, r5, r3
 800e67e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	2200      	movs	r2, #0
 800e68a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e68e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e692:	f04f 0200 	mov.w	r2, #0
 800e696:	f04f 0300 	mov.w	r3, #0
 800e69a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e69e:	4629      	mov	r1, r5
 800e6a0:	008b      	lsls	r3, r1, #2
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e6a8:	4621      	mov	r1, r4
 800e6aa:	008a      	lsls	r2, r1, #2
 800e6ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e6b0:	f7f2 faea 	bl	8000c88 <__aeabi_uldivmod>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4b60      	ldr	r3, [pc, #384]	; (800e83c <UART_SetConfig+0x4e4>)
 800e6ba:	fba3 2302 	umull	r2, r3, r3, r2
 800e6be:	095b      	lsrs	r3, r3, #5
 800e6c0:	011c      	lsls	r4, r3, #4
 800e6c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e6cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e6d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e6d4:	4642      	mov	r2, r8
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	1891      	adds	r1, r2, r2
 800e6da:	61b9      	str	r1, [r7, #24]
 800e6dc:	415b      	adcs	r3, r3
 800e6de:	61fb      	str	r3, [r7, #28]
 800e6e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e6e4:	4641      	mov	r1, r8
 800e6e6:	1851      	adds	r1, r2, r1
 800e6e8:	6139      	str	r1, [r7, #16]
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	414b      	adcs	r3, r1
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	f04f 0200 	mov.w	r2, #0
 800e6f4:	f04f 0300 	mov.w	r3, #0
 800e6f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e6fc:	4659      	mov	r1, fp
 800e6fe:	00cb      	lsls	r3, r1, #3
 800e700:	4651      	mov	r1, sl
 800e702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e706:	4651      	mov	r1, sl
 800e708:	00ca      	lsls	r2, r1, #3
 800e70a:	4610      	mov	r0, r2
 800e70c:	4619      	mov	r1, r3
 800e70e:	4603      	mov	r3, r0
 800e710:	4642      	mov	r2, r8
 800e712:	189b      	adds	r3, r3, r2
 800e714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e718:	464b      	mov	r3, r9
 800e71a:	460a      	mov	r2, r1
 800e71c:	eb42 0303 	adc.w	r3, r2, r3
 800e720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e72e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e730:	f04f 0200 	mov.w	r2, #0
 800e734:	f04f 0300 	mov.w	r3, #0
 800e738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e73c:	4649      	mov	r1, r9
 800e73e:	008b      	lsls	r3, r1, #2
 800e740:	4641      	mov	r1, r8
 800e742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e746:	4641      	mov	r1, r8
 800e748:	008a      	lsls	r2, r1, #2
 800e74a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e74e:	f7f2 fa9b 	bl	8000c88 <__aeabi_uldivmod>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	4611      	mov	r1, r2
 800e758:	4b38      	ldr	r3, [pc, #224]	; (800e83c <UART_SetConfig+0x4e4>)
 800e75a:	fba3 2301 	umull	r2, r3, r3, r1
 800e75e:	095b      	lsrs	r3, r3, #5
 800e760:	2264      	movs	r2, #100	; 0x64
 800e762:	fb02 f303 	mul.w	r3, r2, r3
 800e766:	1acb      	subs	r3, r1, r3
 800e768:	011b      	lsls	r3, r3, #4
 800e76a:	3332      	adds	r3, #50	; 0x32
 800e76c:	4a33      	ldr	r2, [pc, #204]	; (800e83c <UART_SetConfig+0x4e4>)
 800e76e:	fba2 2303 	umull	r2, r3, r2, r3
 800e772:	095b      	lsrs	r3, r3, #5
 800e774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e778:	441c      	add	r4, r3
 800e77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e77e:	2200      	movs	r2, #0
 800e780:	673b      	str	r3, [r7, #112]	; 0x70
 800e782:	677a      	str	r2, [r7, #116]	; 0x74
 800e784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e788:	4642      	mov	r2, r8
 800e78a:	464b      	mov	r3, r9
 800e78c:	1891      	adds	r1, r2, r2
 800e78e:	60b9      	str	r1, [r7, #8]
 800e790:	415b      	adcs	r3, r3
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e798:	4641      	mov	r1, r8
 800e79a:	1851      	adds	r1, r2, r1
 800e79c:	6039      	str	r1, [r7, #0]
 800e79e:	4649      	mov	r1, r9
 800e7a0:	414b      	adcs	r3, r1
 800e7a2:	607b      	str	r3, [r7, #4]
 800e7a4:	f04f 0200 	mov.w	r2, #0
 800e7a8:	f04f 0300 	mov.w	r3, #0
 800e7ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e7b0:	4659      	mov	r1, fp
 800e7b2:	00cb      	lsls	r3, r1, #3
 800e7b4:	4651      	mov	r1, sl
 800e7b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e7ba:	4651      	mov	r1, sl
 800e7bc:	00ca      	lsls	r2, r1, #3
 800e7be:	4610      	mov	r0, r2
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4642      	mov	r2, r8
 800e7c6:	189b      	adds	r3, r3, r2
 800e7c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	460a      	mov	r2, r1
 800e7ce:	eb42 0303 	adc.w	r3, r2, r3
 800e7d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	663b      	str	r3, [r7, #96]	; 0x60
 800e7de:	667a      	str	r2, [r7, #100]	; 0x64
 800e7e0:	f04f 0200 	mov.w	r2, #0
 800e7e4:	f04f 0300 	mov.w	r3, #0
 800e7e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e7ec:	4649      	mov	r1, r9
 800e7ee:	008b      	lsls	r3, r1, #2
 800e7f0:	4641      	mov	r1, r8
 800e7f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e7f6:	4641      	mov	r1, r8
 800e7f8:	008a      	lsls	r2, r1, #2
 800e7fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e7fe:	f7f2 fa43 	bl	8000c88 <__aeabi_uldivmod>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4b0d      	ldr	r3, [pc, #52]	; (800e83c <UART_SetConfig+0x4e4>)
 800e808:	fba3 1302 	umull	r1, r3, r3, r2
 800e80c:	095b      	lsrs	r3, r3, #5
 800e80e:	2164      	movs	r1, #100	; 0x64
 800e810:	fb01 f303 	mul.w	r3, r1, r3
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	3332      	adds	r3, #50	; 0x32
 800e81a:	4a08      	ldr	r2, [pc, #32]	; (800e83c <UART_SetConfig+0x4e4>)
 800e81c:	fba2 2303 	umull	r2, r3, r2, r3
 800e820:	095b      	lsrs	r3, r3, #5
 800e822:	f003 020f 	and.w	r2, r3, #15
 800e826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4422      	add	r2, r4
 800e82e:	609a      	str	r2, [r3, #8]
}
 800e830:	bf00      	nop
 800e832:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e836:	46bd      	mov	sp, r7
 800e838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e83c:	51eb851f 	.word	0x51eb851f

0800e840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e840:	b084      	sub	sp, #16
 800e842:	b580      	push	{r7, lr}
 800e844:	b084      	sub	sp, #16
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	f107 001c 	add.w	r0, r7, #28
 800e84e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	2b01      	cmp	r3, #1
 800e856:	d122      	bne.n	800e89e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e85c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e882:	2b01      	cmp	r3, #1
 800e884:	d105      	bne.n	800e892 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 faa2 	bl	800eddc <USB_CoreReset>
 800e898:	4603      	mov	r3, r0
 800e89a:	73fb      	strb	r3, [r7, #15]
 800e89c:	e01a      	b.n	800e8d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 fa96 	bl	800eddc <USB_CoreReset>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	639a      	str	r2, [r3, #56]	; 0x38
 800e8c6:	e005      	b.n	800e8d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d10b      	bne.n	800e8f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f043 0206 	orr.w	r2, r3, #6
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	f043 0220 	orr.w	r2, r3, #32
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8fe:	b004      	add	sp, #16
 800e900:	4770      	bx	lr

0800e902 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e902:	b480      	push	{r7}
 800e904:	b083      	sub	sp, #12
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	f023 0201 	bic.w	r2, r3, #1
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	460b      	mov	r3, r1
 800e92e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e930:	2300      	movs	r3, #0
 800e932:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e940:	78fb      	ldrb	r3, [r7, #3]
 800e942:	2b01      	cmp	r3, #1
 800e944:	d115      	bne.n	800e972 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e952:	2001      	movs	r0, #1
 800e954:	f7fb f9ce 	bl	8009cf4 <HAL_Delay>
      ms++;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3301      	adds	r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fa2e 	bl	800edc0 <USB_GetMode>
 800e964:	4603      	mov	r3, r0
 800e966:	2b01      	cmp	r3, #1
 800e968:	d01e      	beq.n	800e9a8 <USB_SetCurrentMode+0x84>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2b31      	cmp	r3, #49	; 0x31
 800e96e:	d9f0      	bls.n	800e952 <USB_SetCurrentMode+0x2e>
 800e970:	e01a      	b.n	800e9a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e972:	78fb      	ldrb	r3, [r7, #3]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d115      	bne.n	800e9a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e984:	2001      	movs	r0, #1
 800e986:	f7fb f9b5 	bl	8009cf4 <HAL_Delay>
      ms++;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	3301      	adds	r3, #1
 800e98e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fa15 	bl	800edc0 <USB_GetMode>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d005      	beq.n	800e9a8 <USB_SetCurrentMode+0x84>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b31      	cmp	r3, #49	; 0x31
 800e9a0:	d9f0      	bls.n	800e984 <USB_SetCurrentMode+0x60>
 800e9a2:	e001      	b.n	800e9a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e005      	b.n	800e9b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2b32      	cmp	r3, #50	; 0x32
 800e9ac:	d101      	bne.n	800e9b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e9bc:	b084      	sub	sp, #16
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b086      	sub	sp, #24
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e9ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	613b      	str	r3, [r7, #16]
 800e9da:	e009      	b.n	800e9f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	3340      	adds	r3, #64	; 0x40
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	4413      	add	r3, r2
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	613b      	str	r3, [r7, #16]
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	2b0e      	cmp	r3, #14
 800e9f4:	d9f2      	bls.n	800e9dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d11c      	bne.n	800ea36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea0a:	f043 0302 	orr.w	r3, r3, #2
 800ea0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	639a      	str	r2, [r3, #56]	; 0x38
 800ea34:	e00b      	b.n	800ea4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea54:	461a      	mov	r2, r3
 800ea56:	2300      	movs	r3, #0
 800ea58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea60:	4619      	mov	r1, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea68:	461a      	mov	r2, r3
 800ea6a:	680b      	ldr	r3, [r1, #0]
 800ea6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d10c      	bne.n	800ea8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d104      	bne.n	800ea84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f965 	bl	800ed4c <USB_SetDevSpeed>
 800ea82:	e008      	b.n	800ea96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ea84:	2101      	movs	r1, #1
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f960 	bl	800ed4c <USB_SetDevSpeed>
 800ea8c:	e003      	b.n	800ea96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ea8e:	2103      	movs	r1, #3
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f95b 	bl	800ed4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ea96:	2110      	movs	r1, #16
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 f8f3 	bl	800ec84 <USB_FlushTxFifo>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f91f 	bl	800ecec <USB_FlushRxFifo>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eabe:	461a      	mov	r2, r3
 800eac0:	2300      	movs	r3, #0
 800eac2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaca:	461a      	mov	r2, r3
 800eacc:	2300      	movs	r3, #0
 800eace:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead6:	461a      	mov	r2, r3
 800ead8:	2300      	movs	r3, #0
 800eada:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eadc:	2300      	movs	r3, #0
 800eade:	613b      	str	r3, [r7, #16]
 800eae0:	e043      	b.n	800eb6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	015a      	lsls	r2, r3, #5
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	4413      	add	r3, r2
 800eaea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaf8:	d118      	bne.n	800eb2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d10a      	bne.n	800eb16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb12:	6013      	str	r3, [r2, #0]
 800eb14:	e013      	b.n	800eb3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	015a      	lsls	r2, r3, #5
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb22:	461a      	mov	r2, r3
 800eb24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eb28:	6013      	str	r3, [r2, #0]
 800eb2a:	e008      	b.n	800eb3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	015a      	lsls	r2, r3, #5
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4413      	add	r3, r2
 800eb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb38:	461a      	mov	r2, r3
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	015a      	lsls	r2, r3, #5
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	4413      	add	r3, r2
 800eb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	015a      	lsls	r2, r3, #5
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	4413      	add	r3, r2
 800eb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3301      	adds	r3, #1
 800eb68:	613b      	str	r3, [r7, #16]
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d3b7      	bcc.n	800eae2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb72:	2300      	movs	r3, #0
 800eb74:	613b      	str	r3, [r7, #16]
 800eb76:	e043      	b.n	800ec00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	015a      	lsls	r2, r3, #5
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb8e:	d118      	bne.n	800ebc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10a      	bne.n	800ebac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	015a      	lsls	r2, r3, #5
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eba2:	461a      	mov	r2, r3
 800eba4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	e013      	b.n	800ebd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	015a      	lsls	r2, r3, #5
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb8:	461a      	mov	r2, r3
 800ebba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	e008      	b.n	800ebd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	015a      	lsls	r2, r3, #5
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	4413      	add	r3, r2
 800ebca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebce:	461a      	mov	r2, r3
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	015a      	lsls	r2, r3, #5
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4413      	add	r3, r2
 800ebdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	015a      	lsls	r2, r3, #5
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	4413      	add	r3, r2
 800ebee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ebf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	613b      	str	r3, [r7, #16]
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d3b7      	bcc.n	800eb78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ec28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d105      	bne.n	800ec3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	699b      	ldr	r3, [r3, #24]
 800ec34:	f043 0210 	orr.w	r2, r3, #16
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	699a      	ldr	r2, [r3, #24]
 800ec40:	4b0f      	ldr	r3, [pc, #60]	; (800ec80 <USB_DevInit+0x2c4>)
 800ec42:	4313      	orrs	r3, r2
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ec48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d005      	beq.n	800ec5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	699b      	ldr	r3, [r3, #24]
 800ec52:	f043 0208 	orr.w	r2, r3, #8
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ec5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d107      	bne.n	800ec70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec68:	f043 0304 	orr.w	r3, r3, #4
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ec70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3718      	adds	r7, #24
 800ec76:	46bd      	mov	sp, r7
 800ec78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec7c:	b004      	add	sp, #16
 800ec7e:	4770      	bx	lr
 800ec80:	803c3800 	.word	0x803c3800

0800ec84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	3301      	adds	r3, #1
 800ec96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	4a13      	ldr	r2, [pc, #76]	; (800ece8 <USB_FlushTxFifo+0x64>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d901      	bls.n	800eca4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800eca0:	2303      	movs	r3, #3
 800eca2:	e01b      	b.n	800ecdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	daf2      	bge.n	800ec92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ecac:	2300      	movs	r3, #0
 800ecae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	019b      	lsls	r3, r3, #6
 800ecb4:	f043 0220 	orr.w	r2, r3, #32
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	4a08      	ldr	r2, [pc, #32]	; (800ece8 <USB_FlushTxFifo+0x64>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d901      	bls.n	800ecce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ecca:	2303      	movs	r3, #3
 800eccc:	e006      	b.n	800ecdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	f003 0320 	and.w	r3, r3, #32
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	d0f0      	beq.n	800ecbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	00030d40 	.word	0x00030d40

0800ecec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	4a11      	ldr	r2, [pc, #68]	; (800ed48 <USB_FlushRxFifo+0x5c>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d901      	bls.n	800ed0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e018      	b.n	800ed3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	daf2      	bge.n	800ecf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ed12:	2300      	movs	r3, #0
 800ed14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2210      	movs	r2, #16
 800ed1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	4a08      	ldr	r2, [pc, #32]	; (800ed48 <USB_FlushRxFifo+0x5c>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d901      	bls.n	800ed2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e006      	b.n	800ed3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	f003 0310 	and.w	r3, r3, #16
 800ed36:	2b10      	cmp	r3, #16
 800ed38:	d0f0      	beq.n	800ed1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr
 800ed48:	00030d40 	.word	0x00030d40

0800ed4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b085      	sub	sp, #20
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	460b      	mov	r3, r1
 800ed56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	78fb      	ldrb	r3, [r7, #3]
 800ed66:	68f9      	ldr	r1, [r7, #12]
 800ed68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ed7e:	b480      	push	{r7}
 800ed80:	b085      	sub	sp, #20
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed98:	f023 0303 	bic.w	r3, r3, #3
 800ed9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	68fa      	ldr	r2, [r7, #12]
 800eda8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edac:	f043 0302 	orr.w	r3, r3, #2
 800edb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b083      	sub	sp, #12
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	695b      	ldr	r3, [r3, #20]
 800edcc:	f003 0301 	and.w	r3, r3, #1
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	3301      	adds	r3, #1
 800edec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4a13      	ldr	r2, [pc, #76]	; (800ee40 <USB_CoreReset+0x64>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d901      	bls.n	800edfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800edf6:	2303      	movs	r3, #3
 800edf8:	e01b      	b.n	800ee32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	691b      	ldr	r3, [r3, #16]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	daf2      	bge.n	800ede8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	f043 0201 	orr.w	r2, r3, #1
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	3301      	adds	r3, #1
 800ee16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4a09      	ldr	r2, [pc, #36]	; (800ee40 <USB_CoreReset+0x64>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d901      	bls.n	800ee24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ee20:	2303      	movs	r3, #3
 800ee22:	e006      	b.n	800ee32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	f003 0301 	and.w	r3, r3, #1
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d0f0      	beq.n	800ee12 <USB_CoreReset+0x36>

  return HAL_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	00030d40 	.word	0x00030d40

0800ee44 <malloc>:
 800ee44:	4b02      	ldr	r3, [pc, #8]	; (800ee50 <malloc+0xc>)
 800ee46:	4601      	mov	r1, r0
 800ee48:	6818      	ldr	r0, [r3, #0]
 800ee4a:	f000 b82b 	b.w	800eea4 <_malloc_r>
 800ee4e:	bf00      	nop
 800ee50:	20000384 	.word	0x20000384

0800ee54 <free>:
 800ee54:	4b02      	ldr	r3, [pc, #8]	; (800ee60 <free+0xc>)
 800ee56:	4601      	mov	r1, r0
 800ee58:	6818      	ldr	r0, [r3, #0]
 800ee5a:	f001 bd3f 	b.w	80108dc <_free_r>
 800ee5e:	bf00      	nop
 800ee60:	20000384 	.word	0x20000384

0800ee64 <sbrk_aligned>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	4e0e      	ldr	r6, [pc, #56]	; (800eea0 <sbrk_aligned+0x3c>)
 800ee68:	460c      	mov	r4, r1
 800ee6a:	6831      	ldr	r1, [r6, #0]
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	b911      	cbnz	r1, 800ee76 <sbrk_aligned+0x12>
 800ee70:	f000 fe5e 	bl	800fb30 <_sbrk_r>
 800ee74:	6030      	str	r0, [r6, #0]
 800ee76:	4621      	mov	r1, r4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f000 fe59 	bl	800fb30 <_sbrk_r>
 800ee7e:	1c43      	adds	r3, r0, #1
 800ee80:	d00a      	beq.n	800ee98 <sbrk_aligned+0x34>
 800ee82:	1cc4      	adds	r4, r0, #3
 800ee84:	f024 0403 	bic.w	r4, r4, #3
 800ee88:	42a0      	cmp	r0, r4
 800ee8a:	d007      	beq.n	800ee9c <sbrk_aligned+0x38>
 800ee8c:	1a21      	subs	r1, r4, r0
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f000 fe4e 	bl	800fb30 <_sbrk_r>
 800ee94:	3001      	adds	r0, #1
 800ee96:	d101      	bne.n	800ee9c <sbrk_aligned+0x38>
 800ee98:	f04f 34ff 	mov.w	r4, #4294967295
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}
 800eea0:	20001590 	.word	0x20001590

0800eea4 <_malloc_r>:
 800eea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea8:	1ccd      	adds	r5, r1, #3
 800eeaa:	f025 0503 	bic.w	r5, r5, #3
 800eeae:	3508      	adds	r5, #8
 800eeb0:	2d0c      	cmp	r5, #12
 800eeb2:	bf38      	it	cc
 800eeb4:	250c      	movcc	r5, #12
 800eeb6:	2d00      	cmp	r5, #0
 800eeb8:	4607      	mov	r7, r0
 800eeba:	db01      	blt.n	800eec0 <_malloc_r+0x1c>
 800eebc:	42a9      	cmp	r1, r5
 800eebe:	d905      	bls.n	800eecc <_malloc_r+0x28>
 800eec0:	230c      	movs	r3, #12
 800eec2:	603b      	str	r3, [r7, #0]
 800eec4:	2600      	movs	r6, #0
 800eec6:	4630      	mov	r0, r6
 800eec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eecc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800efa0 <_malloc_r+0xfc>
 800eed0:	f000 f868 	bl	800efa4 <__malloc_lock>
 800eed4:	f8d8 3000 	ldr.w	r3, [r8]
 800eed8:	461c      	mov	r4, r3
 800eeda:	bb5c      	cbnz	r4, 800ef34 <_malloc_r+0x90>
 800eedc:	4629      	mov	r1, r5
 800eede:	4638      	mov	r0, r7
 800eee0:	f7ff ffc0 	bl	800ee64 <sbrk_aligned>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	4604      	mov	r4, r0
 800eee8:	d155      	bne.n	800ef96 <_malloc_r+0xf2>
 800eeea:	f8d8 4000 	ldr.w	r4, [r8]
 800eeee:	4626      	mov	r6, r4
 800eef0:	2e00      	cmp	r6, #0
 800eef2:	d145      	bne.n	800ef80 <_malloc_r+0xdc>
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	d048      	beq.n	800ef8a <_malloc_r+0xe6>
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	4631      	mov	r1, r6
 800eefc:	4638      	mov	r0, r7
 800eefe:	eb04 0903 	add.w	r9, r4, r3
 800ef02:	f000 fe15 	bl	800fb30 <_sbrk_r>
 800ef06:	4581      	cmp	r9, r0
 800ef08:	d13f      	bne.n	800ef8a <_malloc_r+0xe6>
 800ef0a:	6821      	ldr	r1, [r4, #0]
 800ef0c:	1a6d      	subs	r5, r5, r1
 800ef0e:	4629      	mov	r1, r5
 800ef10:	4638      	mov	r0, r7
 800ef12:	f7ff ffa7 	bl	800ee64 <sbrk_aligned>
 800ef16:	3001      	adds	r0, #1
 800ef18:	d037      	beq.n	800ef8a <_malloc_r+0xe6>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	442b      	add	r3, r5
 800ef1e:	6023      	str	r3, [r4, #0]
 800ef20:	f8d8 3000 	ldr.w	r3, [r8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d038      	beq.n	800ef9a <_malloc_r+0xf6>
 800ef28:	685a      	ldr	r2, [r3, #4]
 800ef2a:	42a2      	cmp	r2, r4
 800ef2c:	d12b      	bne.n	800ef86 <_malloc_r+0xe2>
 800ef2e:	2200      	movs	r2, #0
 800ef30:	605a      	str	r2, [r3, #4]
 800ef32:	e00f      	b.n	800ef54 <_malloc_r+0xb0>
 800ef34:	6822      	ldr	r2, [r4, #0]
 800ef36:	1b52      	subs	r2, r2, r5
 800ef38:	d41f      	bmi.n	800ef7a <_malloc_r+0xd6>
 800ef3a:	2a0b      	cmp	r2, #11
 800ef3c:	d917      	bls.n	800ef6e <_malloc_r+0xca>
 800ef3e:	1961      	adds	r1, r4, r5
 800ef40:	42a3      	cmp	r3, r4
 800ef42:	6025      	str	r5, [r4, #0]
 800ef44:	bf18      	it	ne
 800ef46:	6059      	strne	r1, [r3, #4]
 800ef48:	6863      	ldr	r3, [r4, #4]
 800ef4a:	bf08      	it	eq
 800ef4c:	f8c8 1000 	streq.w	r1, [r8]
 800ef50:	5162      	str	r2, [r4, r5]
 800ef52:	604b      	str	r3, [r1, #4]
 800ef54:	4638      	mov	r0, r7
 800ef56:	f104 060b 	add.w	r6, r4, #11
 800ef5a:	f000 f829 	bl	800efb0 <__malloc_unlock>
 800ef5e:	f026 0607 	bic.w	r6, r6, #7
 800ef62:	1d23      	adds	r3, r4, #4
 800ef64:	1af2      	subs	r2, r6, r3
 800ef66:	d0ae      	beq.n	800eec6 <_malloc_r+0x22>
 800ef68:	1b9b      	subs	r3, r3, r6
 800ef6a:	50a3      	str	r3, [r4, r2]
 800ef6c:	e7ab      	b.n	800eec6 <_malloc_r+0x22>
 800ef6e:	42a3      	cmp	r3, r4
 800ef70:	6862      	ldr	r2, [r4, #4]
 800ef72:	d1dd      	bne.n	800ef30 <_malloc_r+0x8c>
 800ef74:	f8c8 2000 	str.w	r2, [r8]
 800ef78:	e7ec      	b.n	800ef54 <_malloc_r+0xb0>
 800ef7a:	4623      	mov	r3, r4
 800ef7c:	6864      	ldr	r4, [r4, #4]
 800ef7e:	e7ac      	b.n	800eeda <_malloc_r+0x36>
 800ef80:	4634      	mov	r4, r6
 800ef82:	6876      	ldr	r6, [r6, #4]
 800ef84:	e7b4      	b.n	800eef0 <_malloc_r+0x4c>
 800ef86:	4613      	mov	r3, r2
 800ef88:	e7cc      	b.n	800ef24 <_malloc_r+0x80>
 800ef8a:	230c      	movs	r3, #12
 800ef8c:	603b      	str	r3, [r7, #0]
 800ef8e:	4638      	mov	r0, r7
 800ef90:	f000 f80e 	bl	800efb0 <__malloc_unlock>
 800ef94:	e797      	b.n	800eec6 <_malloc_r+0x22>
 800ef96:	6025      	str	r5, [r4, #0]
 800ef98:	e7dc      	b.n	800ef54 <_malloc_r+0xb0>
 800ef9a:	605b      	str	r3, [r3, #4]
 800ef9c:	deff      	udf	#255	; 0xff
 800ef9e:	bf00      	nop
 800efa0:	2000158c 	.word	0x2000158c

0800efa4 <__malloc_lock>:
 800efa4:	4801      	ldr	r0, [pc, #4]	; (800efac <__malloc_lock+0x8>)
 800efa6:	f000 be0f 	b.w	800fbc8 <__retarget_lock_acquire_recursive>
 800efaa:	bf00      	nop
 800efac:	200016d4 	.word	0x200016d4

0800efb0 <__malloc_unlock>:
 800efb0:	4801      	ldr	r0, [pc, #4]	; (800efb8 <__malloc_unlock+0x8>)
 800efb2:	f000 be0a 	b.w	800fbca <__retarget_lock_release_recursive>
 800efb6:	bf00      	nop
 800efb8:	200016d4 	.word	0x200016d4

0800efbc <__cvt>:
 800efbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efc0:	ec55 4b10 	vmov	r4, r5, d0
 800efc4:	2d00      	cmp	r5, #0
 800efc6:	460e      	mov	r6, r1
 800efc8:	4619      	mov	r1, r3
 800efca:	462b      	mov	r3, r5
 800efcc:	bfbb      	ittet	lt
 800efce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efd2:	461d      	movlt	r5, r3
 800efd4:	2300      	movge	r3, #0
 800efd6:	232d      	movlt	r3, #45	; 0x2d
 800efd8:	700b      	strb	r3, [r1, #0]
 800efda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800efe0:	4691      	mov	r9, r2
 800efe2:	f023 0820 	bic.w	r8, r3, #32
 800efe6:	bfbc      	itt	lt
 800efe8:	4622      	movlt	r2, r4
 800efea:	4614      	movlt	r4, r2
 800efec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eff0:	d005      	beq.n	800effe <__cvt+0x42>
 800eff2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eff6:	d100      	bne.n	800effa <__cvt+0x3e>
 800eff8:	3601      	adds	r6, #1
 800effa:	2102      	movs	r1, #2
 800effc:	e000      	b.n	800f000 <__cvt+0x44>
 800effe:	2103      	movs	r1, #3
 800f000:	ab03      	add	r3, sp, #12
 800f002:	9301      	str	r3, [sp, #4]
 800f004:	ab02      	add	r3, sp, #8
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	ec45 4b10 	vmov	d0, r4, r5
 800f00c:	4653      	mov	r3, sl
 800f00e:	4632      	mov	r2, r6
 800f010:	f000 fe72 	bl	800fcf8 <_dtoa_r>
 800f014:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f018:	4607      	mov	r7, r0
 800f01a:	d102      	bne.n	800f022 <__cvt+0x66>
 800f01c:	f019 0f01 	tst.w	r9, #1
 800f020:	d022      	beq.n	800f068 <__cvt+0xac>
 800f022:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f026:	eb07 0906 	add.w	r9, r7, r6
 800f02a:	d110      	bne.n	800f04e <__cvt+0x92>
 800f02c:	783b      	ldrb	r3, [r7, #0]
 800f02e:	2b30      	cmp	r3, #48	; 0x30
 800f030:	d10a      	bne.n	800f048 <__cvt+0x8c>
 800f032:	2200      	movs	r2, #0
 800f034:	2300      	movs	r3, #0
 800f036:	4620      	mov	r0, r4
 800f038:	4629      	mov	r1, r5
 800f03a:	f7f1 fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800f03e:	b918      	cbnz	r0, 800f048 <__cvt+0x8c>
 800f040:	f1c6 0601 	rsb	r6, r6, #1
 800f044:	f8ca 6000 	str.w	r6, [sl]
 800f048:	f8da 3000 	ldr.w	r3, [sl]
 800f04c:	4499      	add	r9, r3
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	4620      	mov	r0, r4
 800f054:	4629      	mov	r1, r5
 800f056:	f7f1 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800f05a:	b108      	cbz	r0, 800f060 <__cvt+0xa4>
 800f05c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f060:	2230      	movs	r2, #48	; 0x30
 800f062:	9b03      	ldr	r3, [sp, #12]
 800f064:	454b      	cmp	r3, r9
 800f066:	d307      	bcc.n	800f078 <__cvt+0xbc>
 800f068:	9b03      	ldr	r3, [sp, #12]
 800f06a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f06c:	1bdb      	subs	r3, r3, r7
 800f06e:	4638      	mov	r0, r7
 800f070:	6013      	str	r3, [r2, #0]
 800f072:	b004      	add	sp, #16
 800f074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f078:	1c59      	adds	r1, r3, #1
 800f07a:	9103      	str	r1, [sp, #12]
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	e7f0      	b.n	800f062 <__cvt+0xa6>

0800f080 <__exponent>:
 800f080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f082:	4603      	mov	r3, r0
 800f084:	2900      	cmp	r1, #0
 800f086:	bfb8      	it	lt
 800f088:	4249      	neglt	r1, r1
 800f08a:	f803 2b02 	strb.w	r2, [r3], #2
 800f08e:	bfb4      	ite	lt
 800f090:	222d      	movlt	r2, #45	; 0x2d
 800f092:	222b      	movge	r2, #43	; 0x2b
 800f094:	2909      	cmp	r1, #9
 800f096:	7042      	strb	r2, [r0, #1]
 800f098:	dd2a      	ble.n	800f0f0 <__exponent+0x70>
 800f09a:	f10d 0207 	add.w	r2, sp, #7
 800f09e:	4617      	mov	r7, r2
 800f0a0:	260a      	movs	r6, #10
 800f0a2:	4694      	mov	ip, r2
 800f0a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800f0a8:	fb06 1415 	mls	r4, r6, r5, r1
 800f0ac:	3430      	adds	r4, #48	; 0x30
 800f0ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	2c63      	cmp	r4, #99	; 0x63
 800f0b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	dcf1      	bgt.n	800f0a2 <__exponent+0x22>
 800f0be:	3130      	adds	r1, #48	; 0x30
 800f0c0:	f1ac 0402 	sub.w	r4, ip, #2
 800f0c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f0c8:	1c41      	adds	r1, r0, #1
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	42ba      	cmp	r2, r7
 800f0ce:	d30a      	bcc.n	800f0e6 <__exponent+0x66>
 800f0d0:	f10d 0209 	add.w	r2, sp, #9
 800f0d4:	eba2 020c 	sub.w	r2, r2, ip
 800f0d8:	42bc      	cmp	r4, r7
 800f0da:	bf88      	it	hi
 800f0dc:	2200      	movhi	r2, #0
 800f0de:	4413      	add	r3, r2
 800f0e0:	1a18      	subs	r0, r3, r0
 800f0e2:	b003      	add	sp, #12
 800f0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f0ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f0ee:	e7ed      	b.n	800f0cc <__exponent+0x4c>
 800f0f0:	2330      	movs	r3, #48	; 0x30
 800f0f2:	3130      	adds	r1, #48	; 0x30
 800f0f4:	7083      	strb	r3, [r0, #2]
 800f0f6:	70c1      	strb	r1, [r0, #3]
 800f0f8:	1d03      	adds	r3, r0, #4
 800f0fa:	e7f1      	b.n	800f0e0 <__exponent+0x60>

0800f0fc <_printf_float>:
 800f0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f100:	ed2d 8b02 	vpush	{d8}
 800f104:	b08d      	sub	sp, #52	; 0x34
 800f106:	460c      	mov	r4, r1
 800f108:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f10c:	4616      	mov	r6, r2
 800f10e:	461f      	mov	r7, r3
 800f110:	4605      	mov	r5, r0
 800f112:	f000 fcd5 	bl	800fac0 <_localeconv_r>
 800f116:	f8d0 a000 	ldr.w	sl, [r0]
 800f11a:	4650      	mov	r0, sl
 800f11c:	f7f1 f8a8 	bl	8000270 <strlen>
 800f120:	2300      	movs	r3, #0
 800f122:	930a      	str	r3, [sp, #40]	; 0x28
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	9305      	str	r3, [sp, #20]
 800f128:	f8d8 3000 	ldr.w	r3, [r8]
 800f12c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f130:	3307      	adds	r3, #7
 800f132:	f023 0307 	bic.w	r3, r3, #7
 800f136:	f103 0208 	add.w	r2, r3, #8
 800f13a:	f8c8 2000 	str.w	r2, [r8]
 800f13e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f146:	9307      	str	r3, [sp, #28]
 800f148:	f8cd 8018 	str.w	r8, [sp, #24]
 800f14c:	ee08 0a10 	vmov	s16, r0
 800f150:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f158:	4b9e      	ldr	r3, [pc, #632]	; (800f3d4 <_printf_float+0x2d8>)
 800f15a:	f04f 32ff 	mov.w	r2, #4294967295
 800f15e:	f7f1 fce5 	bl	8000b2c <__aeabi_dcmpun>
 800f162:	bb88      	cbnz	r0, 800f1c8 <_printf_float+0xcc>
 800f164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f168:	4b9a      	ldr	r3, [pc, #616]	; (800f3d4 <_printf_float+0x2d8>)
 800f16a:	f04f 32ff 	mov.w	r2, #4294967295
 800f16e:	f7f1 fcbf 	bl	8000af0 <__aeabi_dcmple>
 800f172:	bb48      	cbnz	r0, 800f1c8 <_printf_float+0xcc>
 800f174:	2200      	movs	r2, #0
 800f176:	2300      	movs	r3, #0
 800f178:	4640      	mov	r0, r8
 800f17a:	4649      	mov	r1, r9
 800f17c:	f7f1 fcae 	bl	8000adc <__aeabi_dcmplt>
 800f180:	b110      	cbz	r0, 800f188 <_printf_float+0x8c>
 800f182:	232d      	movs	r3, #45	; 0x2d
 800f184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f188:	4a93      	ldr	r2, [pc, #588]	; (800f3d8 <_printf_float+0x2dc>)
 800f18a:	4b94      	ldr	r3, [pc, #592]	; (800f3dc <_printf_float+0x2e0>)
 800f18c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f190:	bf94      	ite	ls
 800f192:	4690      	movls	r8, r2
 800f194:	4698      	movhi	r8, r3
 800f196:	2303      	movs	r3, #3
 800f198:	6123      	str	r3, [r4, #16]
 800f19a:	9b05      	ldr	r3, [sp, #20]
 800f19c:	f023 0304 	bic.w	r3, r3, #4
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	f04f 0900 	mov.w	r9, #0
 800f1a6:	9700      	str	r7, [sp, #0]
 800f1a8:	4633      	mov	r3, r6
 800f1aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	f000 f9da 	bl	800f568 <_printf_common>
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	f040 8090 	bne.w	800f2da <_printf_float+0x1de>
 800f1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f1be:	b00d      	add	sp, #52	; 0x34
 800f1c0:	ecbd 8b02 	vpop	{d8}
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c8:	4642      	mov	r2, r8
 800f1ca:	464b      	mov	r3, r9
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 fcac 	bl	8000b2c <__aeabi_dcmpun>
 800f1d4:	b140      	cbz	r0, 800f1e8 <_printf_float+0xec>
 800f1d6:	464b      	mov	r3, r9
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	bfbc      	itt	lt
 800f1dc:	232d      	movlt	r3, #45	; 0x2d
 800f1de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f1e2:	4a7f      	ldr	r2, [pc, #508]	; (800f3e0 <_printf_float+0x2e4>)
 800f1e4:	4b7f      	ldr	r3, [pc, #508]	; (800f3e4 <_printf_float+0x2e8>)
 800f1e6:	e7d1      	b.n	800f18c <_printf_float+0x90>
 800f1e8:	6863      	ldr	r3, [r4, #4]
 800f1ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f1ee:	9206      	str	r2, [sp, #24]
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	d13f      	bne.n	800f274 <_printf_float+0x178>
 800f1f4:	2306      	movs	r3, #6
 800f1f6:	6063      	str	r3, [r4, #4]
 800f1f8:	9b05      	ldr	r3, [sp, #20]
 800f1fa:	6861      	ldr	r1, [r4, #4]
 800f1fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f200:	2300      	movs	r3, #0
 800f202:	9303      	str	r3, [sp, #12]
 800f204:	ab0a      	add	r3, sp, #40	; 0x28
 800f206:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f20a:	ab09      	add	r3, sp, #36	; 0x24
 800f20c:	ec49 8b10 	vmov	d0, r8, r9
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	6022      	str	r2, [r4, #0]
 800f214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f218:	4628      	mov	r0, r5
 800f21a:	f7ff fecf 	bl	800efbc <__cvt>
 800f21e:	9b06      	ldr	r3, [sp, #24]
 800f220:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f222:	2b47      	cmp	r3, #71	; 0x47
 800f224:	4680      	mov	r8, r0
 800f226:	d108      	bne.n	800f23a <_printf_float+0x13e>
 800f228:	1cc8      	adds	r0, r1, #3
 800f22a:	db02      	blt.n	800f232 <_printf_float+0x136>
 800f22c:	6863      	ldr	r3, [r4, #4]
 800f22e:	4299      	cmp	r1, r3
 800f230:	dd41      	ble.n	800f2b6 <_printf_float+0x1ba>
 800f232:	f1ab 0302 	sub.w	r3, fp, #2
 800f236:	fa5f fb83 	uxtb.w	fp, r3
 800f23a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f23e:	d820      	bhi.n	800f282 <_printf_float+0x186>
 800f240:	3901      	subs	r1, #1
 800f242:	465a      	mov	r2, fp
 800f244:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f248:	9109      	str	r1, [sp, #36]	; 0x24
 800f24a:	f7ff ff19 	bl	800f080 <__exponent>
 800f24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f250:	1813      	adds	r3, r2, r0
 800f252:	2a01      	cmp	r2, #1
 800f254:	4681      	mov	r9, r0
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	dc02      	bgt.n	800f260 <_printf_float+0x164>
 800f25a:	6822      	ldr	r2, [r4, #0]
 800f25c:	07d2      	lsls	r2, r2, #31
 800f25e:	d501      	bpl.n	800f264 <_printf_float+0x168>
 800f260:	3301      	adds	r3, #1
 800f262:	6123      	str	r3, [r4, #16]
 800f264:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d09c      	beq.n	800f1a6 <_printf_float+0xaa>
 800f26c:	232d      	movs	r3, #45	; 0x2d
 800f26e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f272:	e798      	b.n	800f1a6 <_printf_float+0xaa>
 800f274:	9a06      	ldr	r2, [sp, #24]
 800f276:	2a47      	cmp	r2, #71	; 0x47
 800f278:	d1be      	bne.n	800f1f8 <_printf_float+0xfc>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1bc      	bne.n	800f1f8 <_printf_float+0xfc>
 800f27e:	2301      	movs	r3, #1
 800f280:	e7b9      	b.n	800f1f6 <_printf_float+0xfa>
 800f282:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f286:	d118      	bne.n	800f2ba <_printf_float+0x1be>
 800f288:	2900      	cmp	r1, #0
 800f28a:	6863      	ldr	r3, [r4, #4]
 800f28c:	dd0b      	ble.n	800f2a6 <_printf_float+0x1aa>
 800f28e:	6121      	str	r1, [r4, #16]
 800f290:	b913      	cbnz	r3, 800f298 <_printf_float+0x19c>
 800f292:	6822      	ldr	r2, [r4, #0]
 800f294:	07d0      	lsls	r0, r2, #31
 800f296:	d502      	bpl.n	800f29e <_printf_float+0x1a2>
 800f298:	3301      	adds	r3, #1
 800f29a:	440b      	add	r3, r1
 800f29c:	6123      	str	r3, [r4, #16]
 800f29e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2a0:	f04f 0900 	mov.w	r9, #0
 800f2a4:	e7de      	b.n	800f264 <_printf_float+0x168>
 800f2a6:	b913      	cbnz	r3, 800f2ae <_printf_float+0x1b2>
 800f2a8:	6822      	ldr	r2, [r4, #0]
 800f2aa:	07d2      	lsls	r2, r2, #31
 800f2ac:	d501      	bpl.n	800f2b2 <_printf_float+0x1b6>
 800f2ae:	3302      	adds	r3, #2
 800f2b0:	e7f4      	b.n	800f29c <_printf_float+0x1a0>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e7f2      	b.n	800f29c <_printf_float+0x1a0>
 800f2b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2bc:	4299      	cmp	r1, r3
 800f2be:	db05      	blt.n	800f2cc <_printf_float+0x1d0>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	6121      	str	r1, [r4, #16]
 800f2c4:	07d8      	lsls	r0, r3, #31
 800f2c6:	d5ea      	bpl.n	800f29e <_printf_float+0x1a2>
 800f2c8:	1c4b      	adds	r3, r1, #1
 800f2ca:	e7e7      	b.n	800f29c <_printf_float+0x1a0>
 800f2cc:	2900      	cmp	r1, #0
 800f2ce:	bfd4      	ite	le
 800f2d0:	f1c1 0202 	rsble	r2, r1, #2
 800f2d4:	2201      	movgt	r2, #1
 800f2d6:	4413      	add	r3, r2
 800f2d8:	e7e0      	b.n	800f29c <_printf_float+0x1a0>
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	055a      	lsls	r2, r3, #21
 800f2de:	d407      	bmi.n	800f2f0 <_printf_float+0x1f4>
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	4642      	mov	r2, r8
 800f2e4:	4631      	mov	r1, r6
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	47b8      	blx	r7
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	d12c      	bne.n	800f348 <_printf_float+0x24c>
 800f2ee:	e764      	b.n	800f1ba <_printf_float+0xbe>
 800f2f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2f4:	f240 80e0 	bls.w	800f4b8 <_printf_float+0x3bc>
 800f2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2300      	movs	r3, #0
 800f300:	f7f1 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f304:	2800      	cmp	r0, #0
 800f306:	d034      	beq.n	800f372 <_printf_float+0x276>
 800f308:	4a37      	ldr	r2, [pc, #220]	; (800f3e8 <_printf_float+0x2ec>)
 800f30a:	2301      	movs	r3, #1
 800f30c:	4631      	mov	r1, r6
 800f30e:	4628      	mov	r0, r5
 800f310:	47b8      	blx	r7
 800f312:	3001      	adds	r0, #1
 800f314:	f43f af51 	beq.w	800f1ba <_printf_float+0xbe>
 800f318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f31c:	429a      	cmp	r2, r3
 800f31e:	db02      	blt.n	800f326 <_printf_float+0x22a>
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	07d8      	lsls	r0, r3, #31
 800f324:	d510      	bpl.n	800f348 <_printf_float+0x24c>
 800f326:	ee18 3a10 	vmov	r3, s16
 800f32a:	4652      	mov	r2, sl
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f af41 	beq.w	800f1ba <_printf_float+0xbe>
 800f338:	f04f 0800 	mov.w	r8, #0
 800f33c:	f104 091a 	add.w	r9, r4, #26
 800f340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f342:	3b01      	subs	r3, #1
 800f344:	4543      	cmp	r3, r8
 800f346:	dc09      	bgt.n	800f35c <_printf_float+0x260>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	079b      	lsls	r3, r3, #30
 800f34c:	f100 8107 	bmi.w	800f55e <_printf_float+0x462>
 800f350:	68e0      	ldr	r0, [r4, #12]
 800f352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f354:	4298      	cmp	r0, r3
 800f356:	bfb8      	it	lt
 800f358:	4618      	movlt	r0, r3
 800f35a:	e730      	b.n	800f1be <_printf_float+0xc2>
 800f35c:	2301      	movs	r3, #1
 800f35e:	464a      	mov	r2, r9
 800f360:	4631      	mov	r1, r6
 800f362:	4628      	mov	r0, r5
 800f364:	47b8      	blx	r7
 800f366:	3001      	adds	r0, #1
 800f368:	f43f af27 	beq.w	800f1ba <_printf_float+0xbe>
 800f36c:	f108 0801 	add.w	r8, r8, #1
 800f370:	e7e6      	b.n	800f340 <_printf_float+0x244>
 800f372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f374:	2b00      	cmp	r3, #0
 800f376:	dc39      	bgt.n	800f3ec <_printf_float+0x2f0>
 800f378:	4a1b      	ldr	r2, [pc, #108]	; (800f3e8 <_printf_float+0x2ec>)
 800f37a:	2301      	movs	r3, #1
 800f37c:	4631      	mov	r1, r6
 800f37e:	4628      	mov	r0, r5
 800f380:	47b8      	blx	r7
 800f382:	3001      	adds	r0, #1
 800f384:	f43f af19 	beq.w	800f1ba <_printf_float+0xbe>
 800f388:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f38c:	4313      	orrs	r3, r2
 800f38e:	d102      	bne.n	800f396 <_printf_float+0x29a>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	07d9      	lsls	r1, r3, #31
 800f394:	d5d8      	bpl.n	800f348 <_printf_float+0x24c>
 800f396:	ee18 3a10 	vmov	r3, s16
 800f39a:	4652      	mov	r2, sl
 800f39c:	4631      	mov	r1, r6
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f43f af09 	beq.w	800f1ba <_printf_float+0xbe>
 800f3a8:	f04f 0900 	mov.w	r9, #0
 800f3ac:	f104 0a1a 	add.w	sl, r4, #26
 800f3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3b2:	425b      	negs	r3, r3
 800f3b4:	454b      	cmp	r3, r9
 800f3b6:	dc01      	bgt.n	800f3bc <_printf_float+0x2c0>
 800f3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ba:	e792      	b.n	800f2e2 <_printf_float+0x1e6>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	4652      	mov	r2, sl
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	47b8      	blx	r7
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	f43f aef7 	beq.w	800f1ba <_printf_float+0xbe>
 800f3cc:	f109 0901 	add.w	r9, r9, #1
 800f3d0:	e7ee      	b.n	800f3b0 <_printf_float+0x2b4>
 800f3d2:	bf00      	nop
 800f3d4:	7fefffff 	.word	0x7fefffff
 800f3d8:	0801242c 	.word	0x0801242c
 800f3dc:	08012430 	.word	0x08012430
 800f3e0:	08012434 	.word	0x08012434
 800f3e4:	08012438 	.word	0x08012438
 800f3e8:	0801243c 	.word	0x0801243c
 800f3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	bfa8      	it	ge
 800f3f4:	461a      	movge	r2, r3
 800f3f6:	2a00      	cmp	r2, #0
 800f3f8:	4691      	mov	r9, r2
 800f3fa:	dc37      	bgt.n	800f46c <_printf_float+0x370>
 800f3fc:	f04f 0b00 	mov.w	fp, #0
 800f400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f404:	f104 021a 	add.w	r2, r4, #26
 800f408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f40a:	9305      	str	r3, [sp, #20]
 800f40c:	eba3 0309 	sub.w	r3, r3, r9
 800f410:	455b      	cmp	r3, fp
 800f412:	dc33      	bgt.n	800f47c <_printf_float+0x380>
 800f414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f418:	429a      	cmp	r2, r3
 800f41a:	db3b      	blt.n	800f494 <_printf_float+0x398>
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	07da      	lsls	r2, r3, #31
 800f420:	d438      	bmi.n	800f494 <_printf_float+0x398>
 800f422:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f426:	eba2 0903 	sub.w	r9, r2, r3
 800f42a:	9b05      	ldr	r3, [sp, #20]
 800f42c:	1ad2      	subs	r2, r2, r3
 800f42e:	4591      	cmp	r9, r2
 800f430:	bfa8      	it	ge
 800f432:	4691      	movge	r9, r2
 800f434:	f1b9 0f00 	cmp.w	r9, #0
 800f438:	dc35      	bgt.n	800f4a6 <_printf_float+0x3aa>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f442:	f104 0a1a 	add.w	sl, r4, #26
 800f446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f44a:	1a9b      	subs	r3, r3, r2
 800f44c:	eba3 0309 	sub.w	r3, r3, r9
 800f450:	4543      	cmp	r3, r8
 800f452:	f77f af79 	ble.w	800f348 <_printf_float+0x24c>
 800f456:	2301      	movs	r3, #1
 800f458:	4652      	mov	r2, sl
 800f45a:	4631      	mov	r1, r6
 800f45c:	4628      	mov	r0, r5
 800f45e:	47b8      	blx	r7
 800f460:	3001      	adds	r0, #1
 800f462:	f43f aeaa 	beq.w	800f1ba <_printf_float+0xbe>
 800f466:	f108 0801 	add.w	r8, r8, #1
 800f46a:	e7ec      	b.n	800f446 <_printf_float+0x34a>
 800f46c:	4613      	mov	r3, r2
 800f46e:	4631      	mov	r1, r6
 800f470:	4642      	mov	r2, r8
 800f472:	4628      	mov	r0, r5
 800f474:	47b8      	blx	r7
 800f476:	3001      	adds	r0, #1
 800f478:	d1c0      	bne.n	800f3fc <_printf_float+0x300>
 800f47a:	e69e      	b.n	800f1ba <_printf_float+0xbe>
 800f47c:	2301      	movs	r3, #1
 800f47e:	4631      	mov	r1, r6
 800f480:	4628      	mov	r0, r5
 800f482:	9205      	str	r2, [sp, #20]
 800f484:	47b8      	blx	r7
 800f486:	3001      	adds	r0, #1
 800f488:	f43f ae97 	beq.w	800f1ba <_printf_float+0xbe>
 800f48c:	9a05      	ldr	r2, [sp, #20]
 800f48e:	f10b 0b01 	add.w	fp, fp, #1
 800f492:	e7b9      	b.n	800f408 <_printf_float+0x30c>
 800f494:	ee18 3a10 	vmov	r3, s16
 800f498:	4652      	mov	r2, sl
 800f49a:	4631      	mov	r1, r6
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b8      	blx	r7
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d1be      	bne.n	800f422 <_printf_float+0x326>
 800f4a4:	e689      	b.n	800f1ba <_printf_float+0xbe>
 800f4a6:	9a05      	ldr	r2, [sp, #20]
 800f4a8:	464b      	mov	r3, r9
 800f4aa:	4442      	add	r2, r8
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b8      	blx	r7
 800f4b2:	3001      	adds	r0, #1
 800f4b4:	d1c1      	bne.n	800f43a <_printf_float+0x33e>
 800f4b6:	e680      	b.n	800f1ba <_printf_float+0xbe>
 800f4b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4ba:	2a01      	cmp	r2, #1
 800f4bc:	dc01      	bgt.n	800f4c2 <_printf_float+0x3c6>
 800f4be:	07db      	lsls	r3, r3, #31
 800f4c0:	d53a      	bpl.n	800f538 <_printf_float+0x43c>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f43f ae74 	beq.w	800f1ba <_printf_float+0xbe>
 800f4d2:	ee18 3a10 	vmov	r3, s16
 800f4d6:	4652      	mov	r2, sl
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4628      	mov	r0, r5
 800f4dc:	47b8      	blx	r7
 800f4de:	3001      	adds	r0, #1
 800f4e0:	f43f ae6b 	beq.w	800f1ba <_printf_float+0xbe>
 800f4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f4f0:	f7f1 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4f4:	b9d8      	cbnz	r0, 800f52e <_printf_float+0x432>
 800f4f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f4fa:	f108 0201 	add.w	r2, r8, #1
 800f4fe:	4631      	mov	r1, r6
 800f500:	4628      	mov	r0, r5
 800f502:	47b8      	blx	r7
 800f504:	3001      	adds	r0, #1
 800f506:	d10e      	bne.n	800f526 <_printf_float+0x42a>
 800f508:	e657      	b.n	800f1ba <_printf_float+0xbe>
 800f50a:	2301      	movs	r3, #1
 800f50c:	4652      	mov	r2, sl
 800f50e:	4631      	mov	r1, r6
 800f510:	4628      	mov	r0, r5
 800f512:	47b8      	blx	r7
 800f514:	3001      	adds	r0, #1
 800f516:	f43f ae50 	beq.w	800f1ba <_printf_float+0xbe>
 800f51a:	f108 0801 	add.w	r8, r8, #1
 800f51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f520:	3b01      	subs	r3, #1
 800f522:	4543      	cmp	r3, r8
 800f524:	dcf1      	bgt.n	800f50a <_printf_float+0x40e>
 800f526:	464b      	mov	r3, r9
 800f528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f52c:	e6da      	b.n	800f2e4 <_printf_float+0x1e8>
 800f52e:	f04f 0800 	mov.w	r8, #0
 800f532:	f104 0a1a 	add.w	sl, r4, #26
 800f536:	e7f2      	b.n	800f51e <_printf_float+0x422>
 800f538:	2301      	movs	r3, #1
 800f53a:	4642      	mov	r2, r8
 800f53c:	e7df      	b.n	800f4fe <_printf_float+0x402>
 800f53e:	2301      	movs	r3, #1
 800f540:	464a      	mov	r2, r9
 800f542:	4631      	mov	r1, r6
 800f544:	4628      	mov	r0, r5
 800f546:	47b8      	blx	r7
 800f548:	3001      	adds	r0, #1
 800f54a:	f43f ae36 	beq.w	800f1ba <_printf_float+0xbe>
 800f54e:	f108 0801 	add.w	r8, r8, #1
 800f552:	68e3      	ldr	r3, [r4, #12]
 800f554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f556:	1a5b      	subs	r3, r3, r1
 800f558:	4543      	cmp	r3, r8
 800f55a:	dcf0      	bgt.n	800f53e <_printf_float+0x442>
 800f55c:	e6f8      	b.n	800f350 <_printf_float+0x254>
 800f55e:	f04f 0800 	mov.w	r8, #0
 800f562:	f104 0919 	add.w	r9, r4, #25
 800f566:	e7f4      	b.n	800f552 <_printf_float+0x456>

0800f568 <_printf_common>:
 800f568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f56c:	4616      	mov	r6, r2
 800f56e:	4699      	mov	r9, r3
 800f570:	688a      	ldr	r2, [r1, #8]
 800f572:	690b      	ldr	r3, [r1, #16]
 800f574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f578:	4293      	cmp	r3, r2
 800f57a:	bfb8      	it	lt
 800f57c:	4613      	movlt	r3, r2
 800f57e:	6033      	str	r3, [r6, #0]
 800f580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f584:	4607      	mov	r7, r0
 800f586:	460c      	mov	r4, r1
 800f588:	b10a      	cbz	r2, 800f58e <_printf_common+0x26>
 800f58a:	3301      	adds	r3, #1
 800f58c:	6033      	str	r3, [r6, #0]
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	0699      	lsls	r1, r3, #26
 800f592:	bf42      	ittt	mi
 800f594:	6833      	ldrmi	r3, [r6, #0]
 800f596:	3302      	addmi	r3, #2
 800f598:	6033      	strmi	r3, [r6, #0]
 800f59a:	6825      	ldr	r5, [r4, #0]
 800f59c:	f015 0506 	ands.w	r5, r5, #6
 800f5a0:	d106      	bne.n	800f5b0 <_printf_common+0x48>
 800f5a2:	f104 0a19 	add.w	sl, r4, #25
 800f5a6:	68e3      	ldr	r3, [r4, #12]
 800f5a8:	6832      	ldr	r2, [r6, #0]
 800f5aa:	1a9b      	subs	r3, r3, r2
 800f5ac:	42ab      	cmp	r3, r5
 800f5ae:	dc26      	bgt.n	800f5fe <_printf_common+0x96>
 800f5b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5b4:	1e13      	subs	r3, r2, #0
 800f5b6:	6822      	ldr	r2, [r4, #0]
 800f5b8:	bf18      	it	ne
 800f5ba:	2301      	movne	r3, #1
 800f5bc:	0692      	lsls	r2, r2, #26
 800f5be:	d42b      	bmi.n	800f618 <_printf_common+0xb0>
 800f5c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5c4:	4649      	mov	r1, r9
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	47c0      	blx	r8
 800f5ca:	3001      	adds	r0, #1
 800f5cc:	d01e      	beq.n	800f60c <_printf_common+0xa4>
 800f5ce:	6823      	ldr	r3, [r4, #0]
 800f5d0:	6922      	ldr	r2, [r4, #16]
 800f5d2:	f003 0306 	and.w	r3, r3, #6
 800f5d6:	2b04      	cmp	r3, #4
 800f5d8:	bf02      	ittt	eq
 800f5da:	68e5      	ldreq	r5, [r4, #12]
 800f5dc:	6833      	ldreq	r3, [r6, #0]
 800f5de:	1aed      	subeq	r5, r5, r3
 800f5e0:	68a3      	ldr	r3, [r4, #8]
 800f5e2:	bf0c      	ite	eq
 800f5e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5e8:	2500      	movne	r5, #0
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	bfc4      	itt	gt
 800f5ee:	1a9b      	subgt	r3, r3, r2
 800f5f0:	18ed      	addgt	r5, r5, r3
 800f5f2:	2600      	movs	r6, #0
 800f5f4:	341a      	adds	r4, #26
 800f5f6:	42b5      	cmp	r5, r6
 800f5f8:	d11a      	bne.n	800f630 <_printf_common+0xc8>
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	e008      	b.n	800f610 <_printf_common+0xa8>
 800f5fe:	2301      	movs	r3, #1
 800f600:	4652      	mov	r2, sl
 800f602:	4649      	mov	r1, r9
 800f604:	4638      	mov	r0, r7
 800f606:	47c0      	blx	r8
 800f608:	3001      	adds	r0, #1
 800f60a:	d103      	bne.n	800f614 <_printf_common+0xac>
 800f60c:	f04f 30ff 	mov.w	r0, #4294967295
 800f610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f614:	3501      	adds	r5, #1
 800f616:	e7c6      	b.n	800f5a6 <_printf_common+0x3e>
 800f618:	18e1      	adds	r1, r4, r3
 800f61a:	1c5a      	adds	r2, r3, #1
 800f61c:	2030      	movs	r0, #48	; 0x30
 800f61e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f622:	4422      	add	r2, r4
 800f624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f62c:	3302      	adds	r3, #2
 800f62e:	e7c7      	b.n	800f5c0 <_printf_common+0x58>
 800f630:	2301      	movs	r3, #1
 800f632:	4622      	mov	r2, r4
 800f634:	4649      	mov	r1, r9
 800f636:	4638      	mov	r0, r7
 800f638:	47c0      	blx	r8
 800f63a:	3001      	adds	r0, #1
 800f63c:	d0e6      	beq.n	800f60c <_printf_common+0xa4>
 800f63e:	3601      	adds	r6, #1
 800f640:	e7d9      	b.n	800f5f6 <_printf_common+0x8e>
	...

0800f644 <_printf_i>:
 800f644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f648:	7e0f      	ldrb	r7, [r1, #24]
 800f64a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f64c:	2f78      	cmp	r7, #120	; 0x78
 800f64e:	4691      	mov	r9, r2
 800f650:	4680      	mov	r8, r0
 800f652:	460c      	mov	r4, r1
 800f654:	469a      	mov	sl, r3
 800f656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f65a:	d807      	bhi.n	800f66c <_printf_i+0x28>
 800f65c:	2f62      	cmp	r7, #98	; 0x62
 800f65e:	d80a      	bhi.n	800f676 <_printf_i+0x32>
 800f660:	2f00      	cmp	r7, #0
 800f662:	f000 80d4 	beq.w	800f80e <_printf_i+0x1ca>
 800f666:	2f58      	cmp	r7, #88	; 0x58
 800f668:	f000 80c0 	beq.w	800f7ec <_printf_i+0x1a8>
 800f66c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f674:	e03a      	b.n	800f6ec <_printf_i+0xa8>
 800f676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f67a:	2b15      	cmp	r3, #21
 800f67c:	d8f6      	bhi.n	800f66c <_printf_i+0x28>
 800f67e:	a101      	add	r1, pc, #4	; (adr r1, 800f684 <_printf_i+0x40>)
 800f680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f684:	0800f6dd 	.word	0x0800f6dd
 800f688:	0800f6f1 	.word	0x0800f6f1
 800f68c:	0800f66d 	.word	0x0800f66d
 800f690:	0800f66d 	.word	0x0800f66d
 800f694:	0800f66d 	.word	0x0800f66d
 800f698:	0800f66d 	.word	0x0800f66d
 800f69c:	0800f6f1 	.word	0x0800f6f1
 800f6a0:	0800f66d 	.word	0x0800f66d
 800f6a4:	0800f66d 	.word	0x0800f66d
 800f6a8:	0800f66d 	.word	0x0800f66d
 800f6ac:	0800f66d 	.word	0x0800f66d
 800f6b0:	0800f7f5 	.word	0x0800f7f5
 800f6b4:	0800f71d 	.word	0x0800f71d
 800f6b8:	0800f7af 	.word	0x0800f7af
 800f6bc:	0800f66d 	.word	0x0800f66d
 800f6c0:	0800f66d 	.word	0x0800f66d
 800f6c4:	0800f817 	.word	0x0800f817
 800f6c8:	0800f66d 	.word	0x0800f66d
 800f6cc:	0800f71d 	.word	0x0800f71d
 800f6d0:	0800f66d 	.word	0x0800f66d
 800f6d4:	0800f66d 	.word	0x0800f66d
 800f6d8:	0800f7b7 	.word	0x0800f7b7
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	1d1a      	adds	r2, r3, #4
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	602a      	str	r2, [r5, #0]
 800f6e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	e09f      	b.n	800f830 <_printf_i+0x1ec>
 800f6f0:	6820      	ldr	r0, [r4, #0]
 800f6f2:	682b      	ldr	r3, [r5, #0]
 800f6f4:	0607      	lsls	r7, r0, #24
 800f6f6:	f103 0104 	add.w	r1, r3, #4
 800f6fa:	6029      	str	r1, [r5, #0]
 800f6fc:	d501      	bpl.n	800f702 <_printf_i+0xbe>
 800f6fe:	681e      	ldr	r6, [r3, #0]
 800f700:	e003      	b.n	800f70a <_printf_i+0xc6>
 800f702:	0646      	lsls	r6, r0, #25
 800f704:	d5fb      	bpl.n	800f6fe <_printf_i+0xba>
 800f706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f70a:	2e00      	cmp	r6, #0
 800f70c:	da03      	bge.n	800f716 <_printf_i+0xd2>
 800f70e:	232d      	movs	r3, #45	; 0x2d
 800f710:	4276      	negs	r6, r6
 800f712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f716:	485a      	ldr	r0, [pc, #360]	; (800f880 <_printf_i+0x23c>)
 800f718:	230a      	movs	r3, #10
 800f71a:	e012      	b.n	800f742 <_printf_i+0xfe>
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	6820      	ldr	r0, [r4, #0]
 800f720:	1d19      	adds	r1, r3, #4
 800f722:	6029      	str	r1, [r5, #0]
 800f724:	0605      	lsls	r5, r0, #24
 800f726:	d501      	bpl.n	800f72c <_printf_i+0xe8>
 800f728:	681e      	ldr	r6, [r3, #0]
 800f72a:	e002      	b.n	800f732 <_printf_i+0xee>
 800f72c:	0641      	lsls	r1, r0, #25
 800f72e:	d5fb      	bpl.n	800f728 <_printf_i+0xe4>
 800f730:	881e      	ldrh	r6, [r3, #0]
 800f732:	4853      	ldr	r0, [pc, #332]	; (800f880 <_printf_i+0x23c>)
 800f734:	2f6f      	cmp	r7, #111	; 0x6f
 800f736:	bf0c      	ite	eq
 800f738:	2308      	moveq	r3, #8
 800f73a:	230a      	movne	r3, #10
 800f73c:	2100      	movs	r1, #0
 800f73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f742:	6865      	ldr	r5, [r4, #4]
 800f744:	60a5      	str	r5, [r4, #8]
 800f746:	2d00      	cmp	r5, #0
 800f748:	bfa2      	ittt	ge
 800f74a:	6821      	ldrge	r1, [r4, #0]
 800f74c:	f021 0104 	bicge.w	r1, r1, #4
 800f750:	6021      	strge	r1, [r4, #0]
 800f752:	b90e      	cbnz	r6, 800f758 <_printf_i+0x114>
 800f754:	2d00      	cmp	r5, #0
 800f756:	d04b      	beq.n	800f7f0 <_printf_i+0x1ac>
 800f758:	4615      	mov	r5, r2
 800f75a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f75e:	fb03 6711 	mls	r7, r3, r1, r6
 800f762:	5dc7      	ldrb	r7, [r0, r7]
 800f764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f768:	4637      	mov	r7, r6
 800f76a:	42bb      	cmp	r3, r7
 800f76c:	460e      	mov	r6, r1
 800f76e:	d9f4      	bls.n	800f75a <_printf_i+0x116>
 800f770:	2b08      	cmp	r3, #8
 800f772:	d10b      	bne.n	800f78c <_printf_i+0x148>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	07de      	lsls	r6, r3, #31
 800f778:	d508      	bpl.n	800f78c <_printf_i+0x148>
 800f77a:	6923      	ldr	r3, [r4, #16]
 800f77c:	6861      	ldr	r1, [r4, #4]
 800f77e:	4299      	cmp	r1, r3
 800f780:	bfde      	ittt	le
 800f782:	2330      	movle	r3, #48	; 0x30
 800f784:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f78c:	1b52      	subs	r2, r2, r5
 800f78e:	6122      	str	r2, [r4, #16]
 800f790:	f8cd a000 	str.w	sl, [sp]
 800f794:	464b      	mov	r3, r9
 800f796:	aa03      	add	r2, sp, #12
 800f798:	4621      	mov	r1, r4
 800f79a:	4640      	mov	r0, r8
 800f79c:	f7ff fee4 	bl	800f568 <_printf_common>
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d14a      	bne.n	800f83a <_printf_i+0x1f6>
 800f7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a8:	b004      	add	sp, #16
 800f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	f043 0320 	orr.w	r3, r3, #32
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	4833      	ldr	r0, [pc, #204]	; (800f884 <_printf_i+0x240>)
 800f7b8:	2778      	movs	r7, #120	; 0x78
 800f7ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	6829      	ldr	r1, [r5, #0]
 800f7c2:	061f      	lsls	r7, r3, #24
 800f7c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7c8:	d402      	bmi.n	800f7d0 <_printf_i+0x18c>
 800f7ca:	065f      	lsls	r7, r3, #25
 800f7cc:	bf48      	it	mi
 800f7ce:	b2b6      	uxthmi	r6, r6
 800f7d0:	07df      	lsls	r7, r3, #31
 800f7d2:	bf48      	it	mi
 800f7d4:	f043 0320 	orrmi.w	r3, r3, #32
 800f7d8:	6029      	str	r1, [r5, #0]
 800f7da:	bf48      	it	mi
 800f7dc:	6023      	strmi	r3, [r4, #0]
 800f7de:	b91e      	cbnz	r6, 800f7e8 <_printf_i+0x1a4>
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	f023 0320 	bic.w	r3, r3, #32
 800f7e6:	6023      	str	r3, [r4, #0]
 800f7e8:	2310      	movs	r3, #16
 800f7ea:	e7a7      	b.n	800f73c <_printf_i+0xf8>
 800f7ec:	4824      	ldr	r0, [pc, #144]	; (800f880 <_printf_i+0x23c>)
 800f7ee:	e7e4      	b.n	800f7ba <_printf_i+0x176>
 800f7f0:	4615      	mov	r5, r2
 800f7f2:	e7bd      	b.n	800f770 <_printf_i+0x12c>
 800f7f4:	682b      	ldr	r3, [r5, #0]
 800f7f6:	6826      	ldr	r6, [r4, #0]
 800f7f8:	6961      	ldr	r1, [r4, #20]
 800f7fa:	1d18      	adds	r0, r3, #4
 800f7fc:	6028      	str	r0, [r5, #0]
 800f7fe:	0635      	lsls	r5, r6, #24
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	d501      	bpl.n	800f808 <_printf_i+0x1c4>
 800f804:	6019      	str	r1, [r3, #0]
 800f806:	e002      	b.n	800f80e <_printf_i+0x1ca>
 800f808:	0670      	lsls	r0, r6, #25
 800f80a:	d5fb      	bpl.n	800f804 <_printf_i+0x1c0>
 800f80c:	8019      	strh	r1, [r3, #0]
 800f80e:	2300      	movs	r3, #0
 800f810:	6123      	str	r3, [r4, #16]
 800f812:	4615      	mov	r5, r2
 800f814:	e7bc      	b.n	800f790 <_printf_i+0x14c>
 800f816:	682b      	ldr	r3, [r5, #0]
 800f818:	1d1a      	adds	r2, r3, #4
 800f81a:	602a      	str	r2, [r5, #0]
 800f81c:	681d      	ldr	r5, [r3, #0]
 800f81e:	6862      	ldr	r2, [r4, #4]
 800f820:	2100      	movs	r1, #0
 800f822:	4628      	mov	r0, r5
 800f824:	f7f0 fcd4 	bl	80001d0 <memchr>
 800f828:	b108      	cbz	r0, 800f82e <_printf_i+0x1ea>
 800f82a:	1b40      	subs	r0, r0, r5
 800f82c:	6060      	str	r0, [r4, #4]
 800f82e:	6863      	ldr	r3, [r4, #4]
 800f830:	6123      	str	r3, [r4, #16]
 800f832:	2300      	movs	r3, #0
 800f834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f838:	e7aa      	b.n	800f790 <_printf_i+0x14c>
 800f83a:	6923      	ldr	r3, [r4, #16]
 800f83c:	462a      	mov	r2, r5
 800f83e:	4649      	mov	r1, r9
 800f840:	4640      	mov	r0, r8
 800f842:	47d0      	blx	sl
 800f844:	3001      	adds	r0, #1
 800f846:	d0ad      	beq.n	800f7a4 <_printf_i+0x160>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	079b      	lsls	r3, r3, #30
 800f84c:	d413      	bmi.n	800f876 <_printf_i+0x232>
 800f84e:	68e0      	ldr	r0, [r4, #12]
 800f850:	9b03      	ldr	r3, [sp, #12]
 800f852:	4298      	cmp	r0, r3
 800f854:	bfb8      	it	lt
 800f856:	4618      	movlt	r0, r3
 800f858:	e7a6      	b.n	800f7a8 <_printf_i+0x164>
 800f85a:	2301      	movs	r3, #1
 800f85c:	4632      	mov	r2, r6
 800f85e:	4649      	mov	r1, r9
 800f860:	4640      	mov	r0, r8
 800f862:	47d0      	blx	sl
 800f864:	3001      	adds	r0, #1
 800f866:	d09d      	beq.n	800f7a4 <_printf_i+0x160>
 800f868:	3501      	adds	r5, #1
 800f86a:	68e3      	ldr	r3, [r4, #12]
 800f86c:	9903      	ldr	r1, [sp, #12]
 800f86e:	1a5b      	subs	r3, r3, r1
 800f870:	42ab      	cmp	r3, r5
 800f872:	dcf2      	bgt.n	800f85a <_printf_i+0x216>
 800f874:	e7eb      	b.n	800f84e <_printf_i+0x20a>
 800f876:	2500      	movs	r5, #0
 800f878:	f104 0619 	add.w	r6, r4, #25
 800f87c:	e7f5      	b.n	800f86a <_printf_i+0x226>
 800f87e:	bf00      	nop
 800f880:	0801243e 	.word	0x0801243e
 800f884:	0801244f 	.word	0x0801244f

0800f888 <std>:
 800f888:	2300      	movs	r3, #0
 800f88a:	b510      	push	{r4, lr}
 800f88c:	4604      	mov	r4, r0
 800f88e:	e9c0 3300 	strd	r3, r3, [r0]
 800f892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f896:	6083      	str	r3, [r0, #8]
 800f898:	8181      	strh	r1, [r0, #12]
 800f89a:	6643      	str	r3, [r0, #100]	; 0x64
 800f89c:	81c2      	strh	r2, [r0, #14]
 800f89e:	6183      	str	r3, [r0, #24]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	2208      	movs	r2, #8
 800f8a4:	305c      	adds	r0, #92	; 0x5c
 800f8a6:	f000 f902 	bl	800faae <memset>
 800f8aa:	4b05      	ldr	r3, [pc, #20]	; (800f8c0 <std+0x38>)
 800f8ac:	6263      	str	r3, [r4, #36]	; 0x24
 800f8ae:	4b05      	ldr	r3, [pc, #20]	; (800f8c4 <std+0x3c>)
 800f8b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8b2:	4b05      	ldr	r3, [pc, #20]	; (800f8c8 <std+0x40>)
 800f8b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8b6:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <std+0x44>)
 800f8b8:	6224      	str	r4, [r4, #32]
 800f8ba:	6323      	str	r3, [r4, #48]	; 0x30
 800f8bc:	bd10      	pop	{r4, pc}
 800f8be:	bf00      	nop
 800f8c0:	0800fa29 	.word	0x0800fa29
 800f8c4:	0800fa4b 	.word	0x0800fa4b
 800f8c8:	0800fa83 	.word	0x0800fa83
 800f8cc:	0800faa7 	.word	0x0800faa7

0800f8d0 <stdio_exit_handler>:
 800f8d0:	4a02      	ldr	r2, [pc, #8]	; (800f8dc <stdio_exit_handler+0xc>)
 800f8d2:	4903      	ldr	r1, [pc, #12]	; (800f8e0 <stdio_exit_handler+0x10>)
 800f8d4:	4803      	ldr	r0, [pc, #12]	; (800f8e4 <stdio_exit_handler+0x14>)
 800f8d6:	f000 b869 	b.w	800f9ac <_fwalk_sglue>
 800f8da:	bf00      	nop
 800f8dc:	2000032c 	.word	0x2000032c
 800f8e0:	08011429 	.word	0x08011429
 800f8e4:	20000338 	.word	0x20000338

0800f8e8 <cleanup_stdio>:
 800f8e8:	6841      	ldr	r1, [r0, #4]
 800f8ea:	4b0c      	ldr	r3, [pc, #48]	; (800f91c <cleanup_stdio+0x34>)
 800f8ec:	4299      	cmp	r1, r3
 800f8ee:	b510      	push	{r4, lr}
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	d001      	beq.n	800f8f8 <cleanup_stdio+0x10>
 800f8f4:	f001 fd98 	bl	8011428 <_fflush_r>
 800f8f8:	68a1      	ldr	r1, [r4, #8]
 800f8fa:	4b09      	ldr	r3, [pc, #36]	; (800f920 <cleanup_stdio+0x38>)
 800f8fc:	4299      	cmp	r1, r3
 800f8fe:	d002      	beq.n	800f906 <cleanup_stdio+0x1e>
 800f900:	4620      	mov	r0, r4
 800f902:	f001 fd91 	bl	8011428 <_fflush_r>
 800f906:	68e1      	ldr	r1, [r4, #12]
 800f908:	4b06      	ldr	r3, [pc, #24]	; (800f924 <cleanup_stdio+0x3c>)
 800f90a:	4299      	cmp	r1, r3
 800f90c:	d004      	beq.n	800f918 <cleanup_stdio+0x30>
 800f90e:	4620      	mov	r0, r4
 800f910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f914:	f001 bd88 	b.w	8011428 <_fflush_r>
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	bf00      	nop
 800f91c:	20001594 	.word	0x20001594
 800f920:	200015fc 	.word	0x200015fc
 800f924:	20001664 	.word	0x20001664

0800f928 <global_stdio_init.part.0>:
 800f928:	b510      	push	{r4, lr}
 800f92a:	4b0b      	ldr	r3, [pc, #44]	; (800f958 <global_stdio_init.part.0+0x30>)
 800f92c:	4c0b      	ldr	r4, [pc, #44]	; (800f95c <global_stdio_init.part.0+0x34>)
 800f92e:	4a0c      	ldr	r2, [pc, #48]	; (800f960 <global_stdio_init.part.0+0x38>)
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	4620      	mov	r0, r4
 800f934:	2200      	movs	r2, #0
 800f936:	2104      	movs	r1, #4
 800f938:	f7ff ffa6 	bl	800f888 <std>
 800f93c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f940:	2201      	movs	r2, #1
 800f942:	2109      	movs	r1, #9
 800f944:	f7ff ffa0 	bl	800f888 <std>
 800f948:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f94c:	2202      	movs	r2, #2
 800f94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f952:	2112      	movs	r1, #18
 800f954:	f7ff bf98 	b.w	800f888 <std>
 800f958:	200016cc 	.word	0x200016cc
 800f95c:	20001594 	.word	0x20001594
 800f960:	0800f8d1 	.word	0x0800f8d1

0800f964 <__sfp_lock_acquire>:
 800f964:	4801      	ldr	r0, [pc, #4]	; (800f96c <__sfp_lock_acquire+0x8>)
 800f966:	f000 b92f 	b.w	800fbc8 <__retarget_lock_acquire_recursive>
 800f96a:	bf00      	nop
 800f96c:	200016d5 	.word	0x200016d5

0800f970 <__sfp_lock_release>:
 800f970:	4801      	ldr	r0, [pc, #4]	; (800f978 <__sfp_lock_release+0x8>)
 800f972:	f000 b92a 	b.w	800fbca <__retarget_lock_release_recursive>
 800f976:	bf00      	nop
 800f978:	200016d5 	.word	0x200016d5

0800f97c <__sinit>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	4604      	mov	r4, r0
 800f980:	f7ff fff0 	bl	800f964 <__sfp_lock_acquire>
 800f984:	6a23      	ldr	r3, [r4, #32]
 800f986:	b11b      	cbz	r3, 800f990 <__sinit+0x14>
 800f988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f98c:	f7ff bff0 	b.w	800f970 <__sfp_lock_release>
 800f990:	4b04      	ldr	r3, [pc, #16]	; (800f9a4 <__sinit+0x28>)
 800f992:	6223      	str	r3, [r4, #32]
 800f994:	4b04      	ldr	r3, [pc, #16]	; (800f9a8 <__sinit+0x2c>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1f5      	bne.n	800f988 <__sinit+0xc>
 800f99c:	f7ff ffc4 	bl	800f928 <global_stdio_init.part.0>
 800f9a0:	e7f2      	b.n	800f988 <__sinit+0xc>
 800f9a2:	bf00      	nop
 800f9a4:	0800f8e9 	.word	0x0800f8e9
 800f9a8:	200016cc 	.word	0x200016cc

0800f9ac <_fwalk_sglue>:
 800f9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	4688      	mov	r8, r1
 800f9b4:	4614      	mov	r4, r2
 800f9b6:	2600      	movs	r6, #0
 800f9b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9bc:	f1b9 0901 	subs.w	r9, r9, #1
 800f9c0:	d505      	bpl.n	800f9ce <_fwalk_sglue+0x22>
 800f9c2:	6824      	ldr	r4, [r4, #0]
 800f9c4:	2c00      	cmp	r4, #0
 800f9c6:	d1f7      	bne.n	800f9b8 <_fwalk_sglue+0xc>
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ce:	89ab      	ldrh	r3, [r5, #12]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d907      	bls.n	800f9e4 <_fwalk_sglue+0x38>
 800f9d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	d003      	beq.n	800f9e4 <_fwalk_sglue+0x38>
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4638      	mov	r0, r7
 800f9e0:	47c0      	blx	r8
 800f9e2:	4306      	orrs	r6, r0
 800f9e4:	3568      	adds	r5, #104	; 0x68
 800f9e6:	e7e9      	b.n	800f9bc <_fwalk_sglue+0x10>

0800f9e8 <siprintf>:
 800f9e8:	b40e      	push	{r1, r2, r3}
 800f9ea:	b500      	push	{lr}
 800f9ec:	b09c      	sub	sp, #112	; 0x70
 800f9ee:	ab1d      	add	r3, sp, #116	; 0x74
 800f9f0:	9002      	str	r0, [sp, #8]
 800f9f2:	9006      	str	r0, [sp, #24]
 800f9f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9f8:	4809      	ldr	r0, [pc, #36]	; (800fa20 <siprintf+0x38>)
 800f9fa:	9107      	str	r1, [sp, #28]
 800f9fc:	9104      	str	r1, [sp, #16]
 800f9fe:	4909      	ldr	r1, [pc, #36]	; (800fa24 <siprintf+0x3c>)
 800fa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa04:	9105      	str	r1, [sp, #20]
 800fa06:	6800      	ldr	r0, [r0, #0]
 800fa08:	9301      	str	r3, [sp, #4]
 800fa0a:	a902      	add	r1, sp, #8
 800fa0c:	f001 fb88 	bl	8011120 <_svfiprintf_r>
 800fa10:	9b02      	ldr	r3, [sp, #8]
 800fa12:	2200      	movs	r2, #0
 800fa14:	701a      	strb	r2, [r3, #0]
 800fa16:	b01c      	add	sp, #112	; 0x70
 800fa18:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa1c:	b003      	add	sp, #12
 800fa1e:	4770      	bx	lr
 800fa20:	20000384 	.word	0x20000384
 800fa24:	ffff0208 	.word	0xffff0208

0800fa28 <__sread>:
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	460c      	mov	r4, r1
 800fa2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa30:	f000 f86c 	bl	800fb0c <_read_r>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	bfab      	itete	ge
 800fa38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa3a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa3c:	181b      	addge	r3, r3, r0
 800fa3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa42:	bfac      	ite	ge
 800fa44:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa46:	81a3      	strhlt	r3, [r4, #12]
 800fa48:	bd10      	pop	{r4, pc}

0800fa4a <__swrite>:
 800fa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4e:	461f      	mov	r7, r3
 800fa50:	898b      	ldrh	r3, [r1, #12]
 800fa52:	05db      	lsls	r3, r3, #23
 800fa54:	4605      	mov	r5, r0
 800fa56:	460c      	mov	r4, r1
 800fa58:	4616      	mov	r6, r2
 800fa5a:	d505      	bpl.n	800fa68 <__swrite+0x1e>
 800fa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa60:	2302      	movs	r3, #2
 800fa62:	2200      	movs	r2, #0
 800fa64:	f000 f840 	bl	800fae8 <_lseek_r>
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa72:	81a3      	strh	r3, [r4, #12]
 800fa74:	4632      	mov	r2, r6
 800fa76:	463b      	mov	r3, r7
 800fa78:	4628      	mov	r0, r5
 800fa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	f000 b867 	b.w	800fb50 <_write_r>

0800fa82 <__sseek>:
 800fa82:	b510      	push	{r4, lr}
 800fa84:	460c      	mov	r4, r1
 800fa86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa8a:	f000 f82d 	bl	800fae8 <_lseek_r>
 800fa8e:	1c43      	adds	r3, r0, #1
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	bf15      	itete	ne
 800fa94:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa9e:	81a3      	strheq	r3, [r4, #12]
 800faa0:	bf18      	it	ne
 800faa2:	81a3      	strhne	r3, [r4, #12]
 800faa4:	bd10      	pop	{r4, pc}

0800faa6 <__sclose>:
 800faa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faaa:	f000 b80d 	b.w	800fac8 <_close_r>

0800faae <memset>:
 800faae:	4402      	add	r2, r0
 800fab0:	4603      	mov	r3, r0
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d100      	bne.n	800fab8 <memset+0xa>
 800fab6:	4770      	bx	lr
 800fab8:	f803 1b01 	strb.w	r1, [r3], #1
 800fabc:	e7f9      	b.n	800fab2 <memset+0x4>
	...

0800fac0 <_localeconv_r>:
 800fac0:	4800      	ldr	r0, [pc, #0]	; (800fac4 <_localeconv_r+0x4>)
 800fac2:	4770      	bx	lr
 800fac4:	20000478 	.word	0x20000478

0800fac8 <_close_r>:
 800fac8:	b538      	push	{r3, r4, r5, lr}
 800faca:	4d06      	ldr	r5, [pc, #24]	; (800fae4 <_close_r+0x1c>)
 800facc:	2300      	movs	r3, #0
 800face:	4604      	mov	r4, r0
 800fad0:	4608      	mov	r0, r1
 800fad2:	602b      	str	r3, [r5, #0]
 800fad4:	f7f6 fac8 	bl	8006068 <_close>
 800fad8:	1c43      	adds	r3, r0, #1
 800fada:	d102      	bne.n	800fae2 <_close_r+0x1a>
 800fadc:	682b      	ldr	r3, [r5, #0]
 800fade:	b103      	cbz	r3, 800fae2 <_close_r+0x1a>
 800fae0:	6023      	str	r3, [r4, #0]
 800fae2:	bd38      	pop	{r3, r4, r5, pc}
 800fae4:	200016d0 	.word	0x200016d0

0800fae8 <_lseek_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4d07      	ldr	r5, [pc, #28]	; (800fb08 <_lseek_r+0x20>)
 800faec:	4604      	mov	r4, r0
 800faee:	4608      	mov	r0, r1
 800faf0:	4611      	mov	r1, r2
 800faf2:	2200      	movs	r2, #0
 800faf4:	602a      	str	r2, [r5, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	f7f6 fadd 	bl	80060b6 <_lseek>
 800fafc:	1c43      	adds	r3, r0, #1
 800fafe:	d102      	bne.n	800fb06 <_lseek_r+0x1e>
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	b103      	cbz	r3, 800fb06 <_lseek_r+0x1e>
 800fb04:	6023      	str	r3, [r4, #0]
 800fb06:	bd38      	pop	{r3, r4, r5, pc}
 800fb08:	200016d0 	.word	0x200016d0

0800fb0c <_read_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d07      	ldr	r5, [pc, #28]	; (800fb2c <_read_r+0x20>)
 800fb10:	4604      	mov	r4, r0
 800fb12:	4608      	mov	r0, r1
 800fb14:	4611      	mov	r1, r2
 800fb16:	2200      	movs	r2, #0
 800fb18:	602a      	str	r2, [r5, #0]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	f7f6 fa6b 	bl	8005ff6 <_read>
 800fb20:	1c43      	adds	r3, r0, #1
 800fb22:	d102      	bne.n	800fb2a <_read_r+0x1e>
 800fb24:	682b      	ldr	r3, [r5, #0]
 800fb26:	b103      	cbz	r3, 800fb2a <_read_r+0x1e>
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}
 800fb2c:	200016d0 	.word	0x200016d0

0800fb30 <_sbrk_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4d06      	ldr	r5, [pc, #24]	; (800fb4c <_sbrk_r+0x1c>)
 800fb34:	2300      	movs	r3, #0
 800fb36:	4604      	mov	r4, r0
 800fb38:	4608      	mov	r0, r1
 800fb3a:	602b      	str	r3, [r5, #0]
 800fb3c:	f7f6 fac8 	bl	80060d0 <_sbrk>
 800fb40:	1c43      	adds	r3, r0, #1
 800fb42:	d102      	bne.n	800fb4a <_sbrk_r+0x1a>
 800fb44:	682b      	ldr	r3, [r5, #0]
 800fb46:	b103      	cbz	r3, 800fb4a <_sbrk_r+0x1a>
 800fb48:	6023      	str	r3, [r4, #0]
 800fb4a:	bd38      	pop	{r3, r4, r5, pc}
 800fb4c:	200016d0 	.word	0x200016d0

0800fb50 <_write_r>:
 800fb50:	b538      	push	{r3, r4, r5, lr}
 800fb52:	4d07      	ldr	r5, [pc, #28]	; (800fb70 <_write_r+0x20>)
 800fb54:	4604      	mov	r4, r0
 800fb56:	4608      	mov	r0, r1
 800fb58:	4611      	mov	r1, r2
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	602a      	str	r2, [r5, #0]
 800fb5e:	461a      	mov	r2, r3
 800fb60:	f7f6 fa66 	bl	8006030 <_write>
 800fb64:	1c43      	adds	r3, r0, #1
 800fb66:	d102      	bne.n	800fb6e <_write_r+0x1e>
 800fb68:	682b      	ldr	r3, [r5, #0]
 800fb6a:	b103      	cbz	r3, 800fb6e <_write_r+0x1e>
 800fb6c:	6023      	str	r3, [r4, #0]
 800fb6e:	bd38      	pop	{r3, r4, r5, pc}
 800fb70:	200016d0 	.word	0x200016d0

0800fb74 <__errno>:
 800fb74:	4b01      	ldr	r3, [pc, #4]	; (800fb7c <__errno+0x8>)
 800fb76:	6818      	ldr	r0, [r3, #0]
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	20000384 	.word	0x20000384

0800fb80 <__libc_init_array>:
 800fb80:	b570      	push	{r4, r5, r6, lr}
 800fb82:	4d0d      	ldr	r5, [pc, #52]	; (800fbb8 <__libc_init_array+0x38>)
 800fb84:	4c0d      	ldr	r4, [pc, #52]	; (800fbbc <__libc_init_array+0x3c>)
 800fb86:	1b64      	subs	r4, r4, r5
 800fb88:	10a4      	asrs	r4, r4, #2
 800fb8a:	2600      	movs	r6, #0
 800fb8c:	42a6      	cmp	r6, r4
 800fb8e:	d109      	bne.n	800fba4 <__libc_init_array+0x24>
 800fb90:	4d0b      	ldr	r5, [pc, #44]	; (800fbc0 <__libc_init_array+0x40>)
 800fb92:	4c0c      	ldr	r4, [pc, #48]	; (800fbc4 <__libc_init_array+0x44>)
 800fb94:	f002 f9d6 	bl	8011f44 <_init>
 800fb98:	1b64      	subs	r4, r4, r5
 800fb9a:	10a4      	asrs	r4, r4, #2
 800fb9c:	2600      	movs	r6, #0
 800fb9e:	42a6      	cmp	r6, r4
 800fba0:	d105      	bne.n	800fbae <__libc_init_array+0x2e>
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba8:	4798      	blx	r3
 800fbaa:	3601      	adds	r6, #1
 800fbac:	e7ee      	b.n	800fb8c <__libc_init_array+0xc>
 800fbae:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbb2:	4798      	blx	r3
 800fbb4:	3601      	adds	r6, #1
 800fbb6:	e7f2      	b.n	800fb9e <__libc_init_array+0x1e>
 800fbb8:	080127d8 	.word	0x080127d8
 800fbbc:	080127d8 	.word	0x080127d8
 800fbc0:	080127d8 	.word	0x080127d8
 800fbc4:	080127dc 	.word	0x080127dc

0800fbc8 <__retarget_lock_acquire_recursive>:
 800fbc8:	4770      	bx	lr

0800fbca <__retarget_lock_release_recursive>:
 800fbca:	4770      	bx	lr

0800fbcc <memcpy>:
 800fbcc:	440a      	add	r2, r1
 800fbce:	4291      	cmp	r1, r2
 800fbd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbd4:	d100      	bne.n	800fbd8 <memcpy+0xc>
 800fbd6:	4770      	bx	lr
 800fbd8:	b510      	push	{r4, lr}
 800fbda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbe2:	4291      	cmp	r1, r2
 800fbe4:	d1f9      	bne.n	800fbda <memcpy+0xe>
 800fbe6:	bd10      	pop	{r4, pc}

0800fbe8 <quorem>:
 800fbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbec:	6903      	ldr	r3, [r0, #16]
 800fbee:	690c      	ldr	r4, [r1, #16]
 800fbf0:	42a3      	cmp	r3, r4
 800fbf2:	4607      	mov	r7, r0
 800fbf4:	db7e      	blt.n	800fcf4 <quorem+0x10c>
 800fbf6:	3c01      	subs	r4, #1
 800fbf8:	f101 0814 	add.w	r8, r1, #20
 800fbfc:	f100 0514 	add.w	r5, r0, #20
 800fc00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc04:	9301      	str	r3, [sp, #4]
 800fc06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	429a      	cmp	r2, r3
 800fc12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc1a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc1e:	d331      	bcc.n	800fc84 <quorem+0x9c>
 800fc20:	f04f 0e00 	mov.w	lr, #0
 800fc24:	4640      	mov	r0, r8
 800fc26:	46ac      	mov	ip, r5
 800fc28:	46f2      	mov	sl, lr
 800fc2a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc2e:	b293      	uxth	r3, r2
 800fc30:	fb06 e303 	mla	r3, r6, r3, lr
 800fc34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc38:	0c1a      	lsrs	r2, r3, #16
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	ebaa 0303 	sub.w	r3, sl, r3
 800fc40:	f8dc a000 	ldr.w	sl, [ip]
 800fc44:	fa13 f38a 	uxtah	r3, r3, sl
 800fc48:	fb06 220e 	mla	r2, r6, lr, r2
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	9b00      	ldr	r3, [sp, #0]
 800fc50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc54:	b292      	uxth	r2, r2
 800fc56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fc5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc5e:	f8bd 3000 	ldrh.w	r3, [sp]
 800fc62:	4581      	cmp	r9, r0
 800fc64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc68:	f84c 3b04 	str.w	r3, [ip], #4
 800fc6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc70:	d2db      	bcs.n	800fc2a <quorem+0x42>
 800fc72:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc76:	b92b      	cbnz	r3, 800fc84 <quorem+0x9c>
 800fc78:	9b01      	ldr	r3, [sp, #4]
 800fc7a:	3b04      	subs	r3, #4
 800fc7c:	429d      	cmp	r5, r3
 800fc7e:	461a      	mov	r2, r3
 800fc80:	d32c      	bcc.n	800fcdc <quorem+0xf4>
 800fc82:	613c      	str	r4, [r7, #16]
 800fc84:	4638      	mov	r0, r7
 800fc86:	f001 f8f1 	bl	8010e6c <__mcmp>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	db22      	blt.n	800fcd4 <quorem+0xec>
 800fc8e:	3601      	adds	r6, #1
 800fc90:	4629      	mov	r1, r5
 800fc92:	2000      	movs	r0, #0
 800fc94:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc98:	f8d1 c000 	ldr.w	ip, [r1]
 800fc9c:	b293      	uxth	r3, r2
 800fc9e:	1ac3      	subs	r3, r0, r3
 800fca0:	0c12      	lsrs	r2, r2, #16
 800fca2:	fa13 f38c 	uxtah	r3, r3, ip
 800fca6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fcaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcb4:	45c1      	cmp	r9, r8
 800fcb6:	f841 3b04 	str.w	r3, [r1], #4
 800fcba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fcbe:	d2e9      	bcs.n	800fc94 <quorem+0xac>
 800fcc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcc8:	b922      	cbnz	r2, 800fcd4 <quorem+0xec>
 800fcca:	3b04      	subs	r3, #4
 800fccc:	429d      	cmp	r5, r3
 800fcce:	461a      	mov	r2, r3
 800fcd0:	d30a      	bcc.n	800fce8 <quorem+0x100>
 800fcd2:	613c      	str	r4, [r7, #16]
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	b003      	add	sp, #12
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcdc:	6812      	ldr	r2, [r2, #0]
 800fcde:	3b04      	subs	r3, #4
 800fce0:	2a00      	cmp	r2, #0
 800fce2:	d1ce      	bne.n	800fc82 <quorem+0x9a>
 800fce4:	3c01      	subs	r4, #1
 800fce6:	e7c9      	b.n	800fc7c <quorem+0x94>
 800fce8:	6812      	ldr	r2, [r2, #0]
 800fcea:	3b04      	subs	r3, #4
 800fcec:	2a00      	cmp	r2, #0
 800fcee:	d1f0      	bne.n	800fcd2 <quorem+0xea>
 800fcf0:	3c01      	subs	r4, #1
 800fcf2:	e7eb      	b.n	800fccc <quorem+0xe4>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e7ee      	b.n	800fcd6 <quorem+0xee>

0800fcf8 <_dtoa_r>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	ed2d 8b04 	vpush	{d8-d9}
 800fd00:	69c5      	ldr	r5, [r0, #28]
 800fd02:	b093      	sub	sp, #76	; 0x4c
 800fd04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd08:	ec57 6b10 	vmov	r6, r7, d0
 800fd0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd10:	9107      	str	r1, [sp, #28]
 800fd12:	4604      	mov	r4, r0
 800fd14:	920a      	str	r2, [sp, #40]	; 0x28
 800fd16:	930d      	str	r3, [sp, #52]	; 0x34
 800fd18:	b975      	cbnz	r5, 800fd38 <_dtoa_r+0x40>
 800fd1a:	2010      	movs	r0, #16
 800fd1c:	f7ff f892 	bl	800ee44 <malloc>
 800fd20:	4602      	mov	r2, r0
 800fd22:	61e0      	str	r0, [r4, #28]
 800fd24:	b920      	cbnz	r0, 800fd30 <_dtoa_r+0x38>
 800fd26:	4bae      	ldr	r3, [pc, #696]	; (800ffe0 <_dtoa_r+0x2e8>)
 800fd28:	21ef      	movs	r1, #239	; 0xef
 800fd2a:	48ae      	ldr	r0, [pc, #696]	; (800ffe4 <_dtoa_r+0x2ec>)
 800fd2c:	f001 fbbe 	bl	80114ac <__assert_func>
 800fd30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd34:	6005      	str	r5, [r0, #0]
 800fd36:	60c5      	str	r5, [r0, #12]
 800fd38:	69e3      	ldr	r3, [r4, #28]
 800fd3a:	6819      	ldr	r1, [r3, #0]
 800fd3c:	b151      	cbz	r1, 800fd54 <_dtoa_r+0x5c>
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	604a      	str	r2, [r1, #4]
 800fd42:	2301      	movs	r3, #1
 800fd44:	4093      	lsls	r3, r2
 800fd46:	608b      	str	r3, [r1, #8]
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f000 fe53 	bl	80109f4 <_Bfree>
 800fd4e:	69e3      	ldr	r3, [r4, #28]
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	1e3b      	subs	r3, r7, #0
 800fd56:	bfbb      	ittet	lt
 800fd58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fd5c:	9303      	strlt	r3, [sp, #12]
 800fd5e:	2300      	movge	r3, #0
 800fd60:	2201      	movlt	r2, #1
 800fd62:	bfac      	ite	ge
 800fd64:	f8c8 3000 	strge.w	r3, [r8]
 800fd68:	f8c8 2000 	strlt.w	r2, [r8]
 800fd6c:	4b9e      	ldr	r3, [pc, #632]	; (800ffe8 <_dtoa_r+0x2f0>)
 800fd6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fd72:	ea33 0308 	bics.w	r3, r3, r8
 800fd76:	d11b      	bne.n	800fdb0 <_dtoa_r+0xb8>
 800fd78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd7e:	6013      	str	r3, [r2, #0]
 800fd80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fd84:	4333      	orrs	r3, r6
 800fd86:	f000 8593 	beq.w	80108b0 <_dtoa_r+0xbb8>
 800fd8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd8c:	b963      	cbnz	r3, 800fda8 <_dtoa_r+0xb0>
 800fd8e:	4b97      	ldr	r3, [pc, #604]	; (800ffec <_dtoa_r+0x2f4>)
 800fd90:	e027      	b.n	800fde2 <_dtoa_r+0xea>
 800fd92:	4b97      	ldr	r3, [pc, #604]	; (800fff0 <_dtoa_r+0x2f8>)
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	3308      	adds	r3, #8
 800fd98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd9a:	6013      	str	r3, [r2, #0]
 800fd9c:	9800      	ldr	r0, [sp, #0]
 800fd9e:	b013      	add	sp, #76	; 0x4c
 800fda0:	ecbd 8b04 	vpop	{d8-d9}
 800fda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda8:	4b90      	ldr	r3, [pc, #576]	; (800ffec <_dtoa_r+0x2f4>)
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	3303      	adds	r3, #3
 800fdae:	e7f3      	b.n	800fd98 <_dtoa_r+0xa0>
 800fdb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	ec51 0b17 	vmov	r0, r1, d7
 800fdba:	eeb0 8a47 	vmov.f32	s16, s14
 800fdbe:	eef0 8a67 	vmov.f32	s17, s15
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f7f0 fe80 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdc8:	4681      	mov	r9, r0
 800fdca:	b160      	cbz	r0, 800fde6 <_dtoa_r+0xee>
 800fdcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdce:	2301      	movs	r3, #1
 800fdd0:	6013      	str	r3, [r2, #0]
 800fdd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f000 8568 	beq.w	80108aa <_dtoa_r+0xbb2>
 800fdda:	4b86      	ldr	r3, [pc, #536]	; (800fff4 <_dtoa_r+0x2fc>)
 800fddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	3b01      	subs	r3, #1
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	e7da      	b.n	800fd9c <_dtoa_r+0xa4>
 800fde6:	aa10      	add	r2, sp, #64	; 0x40
 800fde8:	a911      	add	r1, sp, #68	; 0x44
 800fdea:	4620      	mov	r0, r4
 800fdec:	eeb0 0a48 	vmov.f32	s0, s16
 800fdf0:	eef0 0a68 	vmov.f32	s1, s17
 800fdf4:	f001 f8e0 	bl	8010fb8 <__d2b>
 800fdf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fdfc:	4682      	mov	sl, r0
 800fdfe:	2d00      	cmp	r5, #0
 800fe00:	d07f      	beq.n	800ff02 <_dtoa_r+0x20a>
 800fe02:	ee18 3a90 	vmov	r3, s17
 800fe06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fe0e:	ec51 0b18 	vmov	r0, r1, d8
 800fe12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fe1e:	4619      	mov	r1, r3
 800fe20:	2200      	movs	r2, #0
 800fe22:	4b75      	ldr	r3, [pc, #468]	; (800fff8 <_dtoa_r+0x300>)
 800fe24:	f7f0 fa30 	bl	8000288 <__aeabi_dsub>
 800fe28:	a367      	add	r3, pc, #412	; (adr r3, 800ffc8 <_dtoa_r+0x2d0>)
 800fe2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2e:	f7f0 fbe3 	bl	80005f8 <__aeabi_dmul>
 800fe32:	a367      	add	r3, pc, #412	; (adr r3, 800ffd0 <_dtoa_r+0x2d8>)
 800fe34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe38:	f7f0 fa28 	bl	800028c <__adddf3>
 800fe3c:	4606      	mov	r6, r0
 800fe3e:	4628      	mov	r0, r5
 800fe40:	460f      	mov	r7, r1
 800fe42:	f7f0 fb6f 	bl	8000524 <__aeabi_i2d>
 800fe46:	a364      	add	r3, pc, #400	; (adr r3, 800ffd8 <_dtoa_r+0x2e0>)
 800fe48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4c:	f7f0 fbd4 	bl	80005f8 <__aeabi_dmul>
 800fe50:	4602      	mov	r2, r0
 800fe52:	460b      	mov	r3, r1
 800fe54:	4630      	mov	r0, r6
 800fe56:	4639      	mov	r1, r7
 800fe58:	f7f0 fa18 	bl	800028c <__adddf3>
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	460f      	mov	r7, r1
 800fe60:	f7f0 fe7a 	bl	8000b58 <__aeabi_d2iz>
 800fe64:	2200      	movs	r2, #0
 800fe66:	4683      	mov	fp, r0
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	f7f0 fe35 	bl	8000adc <__aeabi_dcmplt>
 800fe72:	b148      	cbz	r0, 800fe88 <_dtoa_r+0x190>
 800fe74:	4658      	mov	r0, fp
 800fe76:	f7f0 fb55 	bl	8000524 <__aeabi_i2d>
 800fe7a:	4632      	mov	r2, r6
 800fe7c:	463b      	mov	r3, r7
 800fe7e:	f7f0 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe82:	b908      	cbnz	r0, 800fe88 <_dtoa_r+0x190>
 800fe84:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe88:	f1bb 0f16 	cmp.w	fp, #22
 800fe8c:	d857      	bhi.n	800ff3e <_dtoa_r+0x246>
 800fe8e:	4b5b      	ldr	r3, [pc, #364]	; (800fffc <_dtoa_r+0x304>)
 800fe90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fe94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe98:	ec51 0b18 	vmov	r0, r1, d8
 800fe9c:	f7f0 fe1e 	bl	8000adc <__aeabi_dcmplt>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d04e      	beq.n	800ff42 <_dtoa_r+0x24a>
 800fea4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fea8:	2300      	movs	r3, #0
 800feaa:	930c      	str	r3, [sp, #48]	; 0x30
 800feac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800feae:	1b5b      	subs	r3, r3, r5
 800feb0:	1e5a      	subs	r2, r3, #1
 800feb2:	bf45      	ittet	mi
 800feb4:	f1c3 0301 	rsbmi	r3, r3, #1
 800feb8:	9305      	strmi	r3, [sp, #20]
 800feba:	2300      	movpl	r3, #0
 800febc:	2300      	movmi	r3, #0
 800febe:	9206      	str	r2, [sp, #24]
 800fec0:	bf54      	ite	pl
 800fec2:	9305      	strpl	r3, [sp, #20]
 800fec4:	9306      	strmi	r3, [sp, #24]
 800fec6:	f1bb 0f00 	cmp.w	fp, #0
 800feca:	db3c      	blt.n	800ff46 <_dtoa_r+0x24e>
 800fecc:	9b06      	ldr	r3, [sp, #24]
 800fece:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fed2:	445b      	add	r3, fp
 800fed4:	9306      	str	r3, [sp, #24]
 800fed6:	2300      	movs	r3, #0
 800fed8:	9308      	str	r3, [sp, #32]
 800feda:	9b07      	ldr	r3, [sp, #28]
 800fedc:	2b09      	cmp	r3, #9
 800fede:	d868      	bhi.n	800ffb2 <_dtoa_r+0x2ba>
 800fee0:	2b05      	cmp	r3, #5
 800fee2:	bfc4      	itt	gt
 800fee4:	3b04      	subgt	r3, #4
 800fee6:	9307      	strgt	r3, [sp, #28]
 800fee8:	9b07      	ldr	r3, [sp, #28]
 800feea:	f1a3 0302 	sub.w	r3, r3, #2
 800feee:	bfcc      	ite	gt
 800fef0:	2500      	movgt	r5, #0
 800fef2:	2501      	movle	r5, #1
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	f200 8085 	bhi.w	8010004 <_dtoa_r+0x30c>
 800fefa:	e8df f003 	tbb	[pc, r3]
 800fefe:	3b2e      	.short	0x3b2e
 800ff00:	5839      	.short	0x5839
 800ff02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ff06:	441d      	add	r5, r3
 800ff08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff0c:	2b20      	cmp	r3, #32
 800ff0e:	bfc1      	itttt	gt
 800ff10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff14:	fa08 f803 	lslgt.w	r8, r8, r3
 800ff18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ff1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ff20:	bfd6      	itet	le
 800ff22:	f1c3 0320 	rsble	r3, r3, #32
 800ff26:	ea48 0003 	orrgt.w	r0, r8, r3
 800ff2a:	fa06 f003 	lslle.w	r0, r6, r3
 800ff2e:	f7f0 fae9 	bl	8000504 <__aeabi_ui2d>
 800ff32:	2201      	movs	r2, #1
 800ff34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ff38:	3d01      	subs	r5, #1
 800ff3a:	920e      	str	r2, [sp, #56]	; 0x38
 800ff3c:	e76f      	b.n	800fe1e <_dtoa_r+0x126>
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e7b3      	b.n	800feaa <_dtoa_r+0x1b2>
 800ff42:	900c      	str	r0, [sp, #48]	; 0x30
 800ff44:	e7b2      	b.n	800feac <_dtoa_r+0x1b4>
 800ff46:	9b05      	ldr	r3, [sp, #20]
 800ff48:	eba3 030b 	sub.w	r3, r3, fp
 800ff4c:	9305      	str	r3, [sp, #20]
 800ff4e:	f1cb 0300 	rsb	r3, fp, #0
 800ff52:	9308      	str	r3, [sp, #32]
 800ff54:	2300      	movs	r3, #0
 800ff56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff58:	e7bf      	b.n	800feda <_dtoa_r+0x1e2>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	dc52      	bgt.n	801000a <_dtoa_r+0x312>
 800ff64:	2301      	movs	r3, #1
 800ff66:	9301      	str	r3, [sp, #4]
 800ff68:	9304      	str	r3, [sp, #16]
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	920a      	str	r2, [sp, #40]	; 0x28
 800ff6e:	e00b      	b.n	800ff88 <_dtoa_r+0x290>
 800ff70:	2301      	movs	r3, #1
 800ff72:	e7f3      	b.n	800ff5c <_dtoa_r+0x264>
 800ff74:	2300      	movs	r3, #0
 800ff76:	9309      	str	r3, [sp, #36]	; 0x24
 800ff78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff7a:	445b      	add	r3, fp
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	9304      	str	r3, [sp, #16]
 800ff84:	bfb8      	it	lt
 800ff86:	2301      	movlt	r3, #1
 800ff88:	69e0      	ldr	r0, [r4, #28]
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	2204      	movs	r2, #4
 800ff8e:	f102 0614 	add.w	r6, r2, #20
 800ff92:	429e      	cmp	r6, r3
 800ff94:	d93d      	bls.n	8010012 <_dtoa_r+0x31a>
 800ff96:	6041      	str	r1, [r0, #4]
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 fceb 	bl	8010974 <_Balloc>
 800ff9e:	9000      	str	r0, [sp, #0]
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d139      	bne.n	8010018 <_dtoa_r+0x320>
 800ffa4:	4b16      	ldr	r3, [pc, #88]	; (8010000 <_dtoa_r+0x308>)
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	f240 11af 	movw	r1, #431	; 0x1af
 800ffac:	e6bd      	b.n	800fd2a <_dtoa_r+0x32>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e7e1      	b.n	800ff76 <_dtoa_r+0x27e>
 800ffb2:	2501      	movs	r5, #1
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	9307      	str	r3, [sp, #28]
 800ffb8:	9509      	str	r5, [sp, #36]	; 0x24
 800ffba:	f04f 33ff 	mov.w	r3, #4294967295
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	9304      	str	r3, [sp, #16]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	2312      	movs	r3, #18
 800ffc6:	e7d1      	b.n	800ff6c <_dtoa_r+0x274>
 800ffc8:	636f4361 	.word	0x636f4361
 800ffcc:	3fd287a7 	.word	0x3fd287a7
 800ffd0:	8b60c8b3 	.word	0x8b60c8b3
 800ffd4:	3fc68a28 	.word	0x3fc68a28
 800ffd8:	509f79fb 	.word	0x509f79fb
 800ffdc:	3fd34413 	.word	0x3fd34413
 800ffe0:	0801246d 	.word	0x0801246d
 800ffe4:	08012484 	.word	0x08012484
 800ffe8:	7ff00000 	.word	0x7ff00000
 800ffec:	08012469 	.word	0x08012469
 800fff0:	08012460 	.word	0x08012460
 800fff4:	0801243d 	.word	0x0801243d
 800fff8:	3ff80000 	.word	0x3ff80000
 800fffc:	08012570 	.word	0x08012570
 8010000:	080124dc 	.word	0x080124dc
 8010004:	2301      	movs	r3, #1
 8010006:	9309      	str	r3, [sp, #36]	; 0x24
 8010008:	e7d7      	b.n	800ffba <_dtoa_r+0x2c2>
 801000a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	e7ba      	b.n	800ff88 <_dtoa_r+0x290>
 8010012:	3101      	adds	r1, #1
 8010014:	0052      	lsls	r2, r2, #1
 8010016:	e7ba      	b.n	800ff8e <_dtoa_r+0x296>
 8010018:	69e3      	ldr	r3, [r4, #28]
 801001a:	9a00      	ldr	r2, [sp, #0]
 801001c:	601a      	str	r2, [r3, #0]
 801001e:	9b04      	ldr	r3, [sp, #16]
 8010020:	2b0e      	cmp	r3, #14
 8010022:	f200 80a8 	bhi.w	8010176 <_dtoa_r+0x47e>
 8010026:	2d00      	cmp	r5, #0
 8010028:	f000 80a5 	beq.w	8010176 <_dtoa_r+0x47e>
 801002c:	f1bb 0f00 	cmp.w	fp, #0
 8010030:	dd38      	ble.n	80100a4 <_dtoa_r+0x3ac>
 8010032:	4bc0      	ldr	r3, [pc, #768]	; (8010334 <_dtoa_r+0x63c>)
 8010034:	f00b 020f 	and.w	r2, fp, #15
 8010038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801003c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010040:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010044:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010048:	d019      	beq.n	801007e <_dtoa_r+0x386>
 801004a:	4bbb      	ldr	r3, [pc, #748]	; (8010338 <_dtoa_r+0x640>)
 801004c:	ec51 0b18 	vmov	r0, r1, d8
 8010050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010054:	f7f0 fbfa 	bl	800084c <__aeabi_ddiv>
 8010058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801005c:	f008 080f 	and.w	r8, r8, #15
 8010060:	2503      	movs	r5, #3
 8010062:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010338 <_dtoa_r+0x640>
 8010066:	f1b8 0f00 	cmp.w	r8, #0
 801006a:	d10a      	bne.n	8010082 <_dtoa_r+0x38a>
 801006c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010070:	4632      	mov	r2, r6
 8010072:	463b      	mov	r3, r7
 8010074:	f7f0 fbea 	bl	800084c <__aeabi_ddiv>
 8010078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801007c:	e02b      	b.n	80100d6 <_dtoa_r+0x3de>
 801007e:	2502      	movs	r5, #2
 8010080:	e7ef      	b.n	8010062 <_dtoa_r+0x36a>
 8010082:	f018 0f01 	tst.w	r8, #1
 8010086:	d008      	beq.n	801009a <_dtoa_r+0x3a2>
 8010088:	4630      	mov	r0, r6
 801008a:	4639      	mov	r1, r7
 801008c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010090:	f7f0 fab2 	bl	80005f8 <__aeabi_dmul>
 8010094:	3501      	adds	r5, #1
 8010096:	4606      	mov	r6, r0
 8010098:	460f      	mov	r7, r1
 801009a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801009e:	f109 0908 	add.w	r9, r9, #8
 80100a2:	e7e0      	b.n	8010066 <_dtoa_r+0x36e>
 80100a4:	f000 809f 	beq.w	80101e6 <_dtoa_r+0x4ee>
 80100a8:	f1cb 0600 	rsb	r6, fp, #0
 80100ac:	4ba1      	ldr	r3, [pc, #644]	; (8010334 <_dtoa_r+0x63c>)
 80100ae:	4fa2      	ldr	r7, [pc, #648]	; (8010338 <_dtoa_r+0x640>)
 80100b0:	f006 020f 	and.w	r2, r6, #15
 80100b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100bc:	ec51 0b18 	vmov	r0, r1, d8
 80100c0:	f7f0 fa9a 	bl	80005f8 <__aeabi_dmul>
 80100c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100c8:	1136      	asrs	r6, r6, #4
 80100ca:	2300      	movs	r3, #0
 80100cc:	2502      	movs	r5, #2
 80100ce:	2e00      	cmp	r6, #0
 80100d0:	d17e      	bne.n	80101d0 <_dtoa_r+0x4d8>
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1d0      	bne.n	8010078 <_dtoa_r+0x380>
 80100d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 8084 	beq.w	80101ea <_dtoa_r+0x4f2>
 80100e2:	4b96      	ldr	r3, [pc, #600]	; (801033c <_dtoa_r+0x644>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	4640      	mov	r0, r8
 80100e8:	4649      	mov	r1, r9
 80100ea:	f7f0 fcf7 	bl	8000adc <__aeabi_dcmplt>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d07b      	beq.n	80101ea <_dtoa_r+0x4f2>
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d078      	beq.n	80101ea <_dtoa_r+0x4f2>
 80100f8:	9b01      	ldr	r3, [sp, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	dd39      	ble.n	8010172 <_dtoa_r+0x47a>
 80100fe:	4b90      	ldr	r3, [pc, #576]	; (8010340 <_dtoa_r+0x648>)
 8010100:	2200      	movs	r2, #0
 8010102:	4640      	mov	r0, r8
 8010104:	4649      	mov	r1, r9
 8010106:	f7f0 fa77 	bl	80005f8 <__aeabi_dmul>
 801010a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801010e:	9e01      	ldr	r6, [sp, #4]
 8010110:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010114:	3501      	adds	r5, #1
 8010116:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801011a:	4628      	mov	r0, r5
 801011c:	f7f0 fa02 	bl	8000524 <__aeabi_i2d>
 8010120:	4642      	mov	r2, r8
 8010122:	464b      	mov	r3, r9
 8010124:	f7f0 fa68 	bl	80005f8 <__aeabi_dmul>
 8010128:	4b86      	ldr	r3, [pc, #536]	; (8010344 <_dtoa_r+0x64c>)
 801012a:	2200      	movs	r2, #0
 801012c:	f7f0 f8ae 	bl	800028c <__adddf3>
 8010130:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010138:	9303      	str	r3, [sp, #12]
 801013a:	2e00      	cmp	r6, #0
 801013c:	d158      	bne.n	80101f0 <_dtoa_r+0x4f8>
 801013e:	4b82      	ldr	r3, [pc, #520]	; (8010348 <_dtoa_r+0x650>)
 8010140:	2200      	movs	r2, #0
 8010142:	4640      	mov	r0, r8
 8010144:	4649      	mov	r1, r9
 8010146:	f7f0 f89f 	bl	8000288 <__aeabi_dsub>
 801014a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801014e:	4680      	mov	r8, r0
 8010150:	4689      	mov	r9, r1
 8010152:	f7f0 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8010156:	2800      	cmp	r0, #0
 8010158:	f040 8296 	bne.w	8010688 <_dtoa_r+0x990>
 801015c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010160:	4640      	mov	r0, r8
 8010162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010166:	4649      	mov	r1, r9
 8010168:	f7f0 fcb8 	bl	8000adc <__aeabi_dcmplt>
 801016c:	2800      	cmp	r0, #0
 801016e:	f040 8289 	bne.w	8010684 <_dtoa_r+0x98c>
 8010172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010178:	2b00      	cmp	r3, #0
 801017a:	f2c0 814e 	blt.w	801041a <_dtoa_r+0x722>
 801017e:	f1bb 0f0e 	cmp.w	fp, #14
 8010182:	f300 814a 	bgt.w	801041a <_dtoa_r+0x722>
 8010186:	4b6b      	ldr	r3, [pc, #428]	; (8010334 <_dtoa_r+0x63c>)
 8010188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801018c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010192:	2b00      	cmp	r3, #0
 8010194:	f280 80dc 	bge.w	8010350 <_dtoa_r+0x658>
 8010198:	9b04      	ldr	r3, [sp, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	f300 80d8 	bgt.w	8010350 <_dtoa_r+0x658>
 80101a0:	f040 826f 	bne.w	8010682 <_dtoa_r+0x98a>
 80101a4:	4b68      	ldr	r3, [pc, #416]	; (8010348 <_dtoa_r+0x650>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	4640      	mov	r0, r8
 80101aa:	4649      	mov	r1, r9
 80101ac:	f7f0 fa24 	bl	80005f8 <__aeabi_dmul>
 80101b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101b4:	f7f0 fca6 	bl	8000b04 <__aeabi_dcmpge>
 80101b8:	9e04      	ldr	r6, [sp, #16]
 80101ba:	4637      	mov	r7, r6
 80101bc:	2800      	cmp	r0, #0
 80101be:	f040 8245 	bne.w	801064c <_dtoa_r+0x954>
 80101c2:	9d00      	ldr	r5, [sp, #0]
 80101c4:	2331      	movs	r3, #49	; 0x31
 80101c6:	f805 3b01 	strb.w	r3, [r5], #1
 80101ca:	f10b 0b01 	add.w	fp, fp, #1
 80101ce:	e241      	b.n	8010654 <_dtoa_r+0x95c>
 80101d0:	07f2      	lsls	r2, r6, #31
 80101d2:	d505      	bpl.n	80101e0 <_dtoa_r+0x4e8>
 80101d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101d8:	f7f0 fa0e 	bl	80005f8 <__aeabi_dmul>
 80101dc:	3501      	adds	r5, #1
 80101de:	2301      	movs	r3, #1
 80101e0:	1076      	asrs	r6, r6, #1
 80101e2:	3708      	adds	r7, #8
 80101e4:	e773      	b.n	80100ce <_dtoa_r+0x3d6>
 80101e6:	2502      	movs	r5, #2
 80101e8:	e775      	b.n	80100d6 <_dtoa_r+0x3de>
 80101ea:	9e04      	ldr	r6, [sp, #16]
 80101ec:	465f      	mov	r7, fp
 80101ee:	e792      	b.n	8010116 <_dtoa_r+0x41e>
 80101f0:	9900      	ldr	r1, [sp, #0]
 80101f2:	4b50      	ldr	r3, [pc, #320]	; (8010334 <_dtoa_r+0x63c>)
 80101f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101f8:	4431      	add	r1, r6
 80101fa:	9102      	str	r1, [sp, #8]
 80101fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101fe:	eeb0 9a47 	vmov.f32	s18, s14
 8010202:	eef0 9a67 	vmov.f32	s19, s15
 8010206:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801020a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801020e:	2900      	cmp	r1, #0
 8010210:	d044      	beq.n	801029c <_dtoa_r+0x5a4>
 8010212:	494e      	ldr	r1, [pc, #312]	; (801034c <_dtoa_r+0x654>)
 8010214:	2000      	movs	r0, #0
 8010216:	f7f0 fb19 	bl	800084c <__aeabi_ddiv>
 801021a:	ec53 2b19 	vmov	r2, r3, d9
 801021e:	f7f0 f833 	bl	8000288 <__aeabi_dsub>
 8010222:	9d00      	ldr	r5, [sp, #0]
 8010224:	ec41 0b19 	vmov	d9, r0, r1
 8010228:	4649      	mov	r1, r9
 801022a:	4640      	mov	r0, r8
 801022c:	f7f0 fc94 	bl	8000b58 <__aeabi_d2iz>
 8010230:	4606      	mov	r6, r0
 8010232:	f7f0 f977 	bl	8000524 <__aeabi_i2d>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	4640      	mov	r0, r8
 801023c:	4649      	mov	r1, r9
 801023e:	f7f0 f823 	bl	8000288 <__aeabi_dsub>
 8010242:	3630      	adds	r6, #48	; 0x30
 8010244:	f805 6b01 	strb.w	r6, [r5], #1
 8010248:	ec53 2b19 	vmov	r2, r3, d9
 801024c:	4680      	mov	r8, r0
 801024e:	4689      	mov	r9, r1
 8010250:	f7f0 fc44 	bl	8000adc <__aeabi_dcmplt>
 8010254:	2800      	cmp	r0, #0
 8010256:	d164      	bne.n	8010322 <_dtoa_r+0x62a>
 8010258:	4642      	mov	r2, r8
 801025a:	464b      	mov	r3, r9
 801025c:	4937      	ldr	r1, [pc, #220]	; (801033c <_dtoa_r+0x644>)
 801025e:	2000      	movs	r0, #0
 8010260:	f7f0 f812 	bl	8000288 <__aeabi_dsub>
 8010264:	ec53 2b19 	vmov	r2, r3, d9
 8010268:	f7f0 fc38 	bl	8000adc <__aeabi_dcmplt>
 801026c:	2800      	cmp	r0, #0
 801026e:	f040 80b6 	bne.w	80103de <_dtoa_r+0x6e6>
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	429d      	cmp	r5, r3
 8010276:	f43f af7c 	beq.w	8010172 <_dtoa_r+0x47a>
 801027a:	4b31      	ldr	r3, [pc, #196]	; (8010340 <_dtoa_r+0x648>)
 801027c:	ec51 0b19 	vmov	r0, r1, d9
 8010280:	2200      	movs	r2, #0
 8010282:	f7f0 f9b9 	bl	80005f8 <__aeabi_dmul>
 8010286:	4b2e      	ldr	r3, [pc, #184]	; (8010340 <_dtoa_r+0x648>)
 8010288:	ec41 0b19 	vmov	d9, r0, r1
 801028c:	2200      	movs	r2, #0
 801028e:	4640      	mov	r0, r8
 8010290:	4649      	mov	r1, r9
 8010292:	f7f0 f9b1 	bl	80005f8 <__aeabi_dmul>
 8010296:	4680      	mov	r8, r0
 8010298:	4689      	mov	r9, r1
 801029a:	e7c5      	b.n	8010228 <_dtoa_r+0x530>
 801029c:	ec51 0b17 	vmov	r0, r1, d7
 80102a0:	f7f0 f9aa 	bl	80005f8 <__aeabi_dmul>
 80102a4:	9b02      	ldr	r3, [sp, #8]
 80102a6:	9d00      	ldr	r5, [sp, #0]
 80102a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80102aa:	ec41 0b19 	vmov	d9, r0, r1
 80102ae:	4649      	mov	r1, r9
 80102b0:	4640      	mov	r0, r8
 80102b2:	f7f0 fc51 	bl	8000b58 <__aeabi_d2iz>
 80102b6:	4606      	mov	r6, r0
 80102b8:	f7f0 f934 	bl	8000524 <__aeabi_i2d>
 80102bc:	3630      	adds	r6, #48	; 0x30
 80102be:	4602      	mov	r2, r0
 80102c0:	460b      	mov	r3, r1
 80102c2:	4640      	mov	r0, r8
 80102c4:	4649      	mov	r1, r9
 80102c6:	f7ef ffdf 	bl	8000288 <__aeabi_dsub>
 80102ca:	f805 6b01 	strb.w	r6, [r5], #1
 80102ce:	9b02      	ldr	r3, [sp, #8]
 80102d0:	429d      	cmp	r5, r3
 80102d2:	4680      	mov	r8, r0
 80102d4:	4689      	mov	r9, r1
 80102d6:	f04f 0200 	mov.w	r2, #0
 80102da:	d124      	bne.n	8010326 <_dtoa_r+0x62e>
 80102dc:	4b1b      	ldr	r3, [pc, #108]	; (801034c <_dtoa_r+0x654>)
 80102de:	ec51 0b19 	vmov	r0, r1, d9
 80102e2:	f7ef ffd3 	bl	800028c <__adddf3>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	4640      	mov	r0, r8
 80102ec:	4649      	mov	r1, r9
 80102ee:	f7f0 fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d173      	bne.n	80103de <_dtoa_r+0x6e6>
 80102f6:	ec53 2b19 	vmov	r2, r3, d9
 80102fa:	4914      	ldr	r1, [pc, #80]	; (801034c <_dtoa_r+0x654>)
 80102fc:	2000      	movs	r0, #0
 80102fe:	f7ef ffc3 	bl	8000288 <__aeabi_dsub>
 8010302:	4602      	mov	r2, r0
 8010304:	460b      	mov	r3, r1
 8010306:	4640      	mov	r0, r8
 8010308:	4649      	mov	r1, r9
 801030a:	f7f0 fbe7 	bl	8000adc <__aeabi_dcmplt>
 801030e:	2800      	cmp	r0, #0
 8010310:	f43f af2f 	beq.w	8010172 <_dtoa_r+0x47a>
 8010314:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010316:	1e6b      	subs	r3, r5, #1
 8010318:	930f      	str	r3, [sp, #60]	; 0x3c
 801031a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801031e:	2b30      	cmp	r3, #48	; 0x30
 8010320:	d0f8      	beq.n	8010314 <_dtoa_r+0x61c>
 8010322:	46bb      	mov	fp, r7
 8010324:	e04a      	b.n	80103bc <_dtoa_r+0x6c4>
 8010326:	4b06      	ldr	r3, [pc, #24]	; (8010340 <_dtoa_r+0x648>)
 8010328:	f7f0 f966 	bl	80005f8 <__aeabi_dmul>
 801032c:	4680      	mov	r8, r0
 801032e:	4689      	mov	r9, r1
 8010330:	e7bd      	b.n	80102ae <_dtoa_r+0x5b6>
 8010332:	bf00      	nop
 8010334:	08012570 	.word	0x08012570
 8010338:	08012548 	.word	0x08012548
 801033c:	3ff00000 	.word	0x3ff00000
 8010340:	40240000 	.word	0x40240000
 8010344:	401c0000 	.word	0x401c0000
 8010348:	40140000 	.word	0x40140000
 801034c:	3fe00000 	.word	0x3fe00000
 8010350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010354:	9d00      	ldr	r5, [sp, #0]
 8010356:	4642      	mov	r2, r8
 8010358:	464b      	mov	r3, r9
 801035a:	4630      	mov	r0, r6
 801035c:	4639      	mov	r1, r7
 801035e:	f7f0 fa75 	bl	800084c <__aeabi_ddiv>
 8010362:	f7f0 fbf9 	bl	8000b58 <__aeabi_d2iz>
 8010366:	9001      	str	r0, [sp, #4]
 8010368:	f7f0 f8dc 	bl	8000524 <__aeabi_i2d>
 801036c:	4642      	mov	r2, r8
 801036e:	464b      	mov	r3, r9
 8010370:	f7f0 f942 	bl	80005f8 <__aeabi_dmul>
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	4630      	mov	r0, r6
 801037a:	4639      	mov	r1, r7
 801037c:	f7ef ff84 	bl	8000288 <__aeabi_dsub>
 8010380:	9e01      	ldr	r6, [sp, #4]
 8010382:	9f04      	ldr	r7, [sp, #16]
 8010384:	3630      	adds	r6, #48	; 0x30
 8010386:	f805 6b01 	strb.w	r6, [r5], #1
 801038a:	9e00      	ldr	r6, [sp, #0]
 801038c:	1bae      	subs	r6, r5, r6
 801038e:	42b7      	cmp	r7, r6
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	d134      	bne.n	8010400 <_dtoa_r+0x708>
 8010396:	f7ef ff79 	bl	800028c <__adddf3>
 801039a:	4642      	mov	r2, r8
 801039c:	464b      	mov	r3, r9
 801039e:	4606      	mov	r6, r0
 80103a0:	460f      	mov	r7, r1
 80103a2:	f7f0 fbb9 	bl	8000b18 <__aeabi_dcmpgt>
 80103a6:	b9c8      	cbnz	r0, 80103dc <_dtoa_r+0x6e4>
 80103a8:	4642      	mov	r2, r8
 80103aa:	464b      	mov	r3, r9
 80103ac:	4630      	mov	r0, r6
 80103ae:	4639      	mov	r1, r7
 80103b0:	f7f0 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80103b4:	b110      	cbz	r0, 80103bc <_dtoa_r+0x6c4>
 80103b6:	9b01      	ldr	r3, [sp, #4]
 80103b8:	07db      	lsls	r3, r3, #31
 80103ba:	d40f      	bmi.n	80103dc <_dtoa_r+0x6e4>
 80103bc:	4651      	mov	r1, sl
 80103be:	4620      	mov	r0, r4
 80103c0:	f000 fb18 	bl	80109f4 <_Bfree>
 80103c4:	2300      	movs	r3, #0
 80103c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103c8:	702b      	strb	r3, [r5, #0]
 80103ca:	f10b 0301 	add.w	r3, fp, #1
 80103ce:	6013      	str	r3, [r2, #0]
 80103d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f43f ace2 	beq.w	800fd9c <_dtoa_r+0xa4>
 80103d8:	601d      	str	r5, [r3, #0]
 80103da:	e4df      	b.n	800fd9c <_dtoa_r+0xa4>
 80103dc:	465f      	mov	r7, fp
 80103de:	462b      	mov	r3, r5
 80103e0:	461d      	mov	r5, r3
 80103e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103e6:	2a39      	cmp	r2, #57	; 0x39
 80103e8:	d106      	bne.n	80103f8 <_dtoa_r+0x700>
 80103ea:	9a00      	ldr	r2, [sp, #0]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d1f7      	bne.n	80103e0 <_dtoa_r+0x6e8>
 80103f0:	9900      	ldr	r1, [sp, #0]
 80103f2:	2230      	movs	r2, #48	; 0x30
 80103f4:	3701      	adds	r7, #1
 80103f6:	700a      	strb	r2, [r1, #0]
 80103f8:	781a      	ldrb	r2, [r3, #0]
 80103fa:	3201      	adds	r2, #1
 80103fc:	701a      	strb	r2, [r3, #0]
 80103fe:	e790      	b.n	8010322 <_dtoa_r+0x62a>
 8010400:	4ba3      	ldr	r3, [pc, #652]	; (8010690 <_dtoa_r+0x998>)
 8010402:	2200      	movs	r2, #0
 8010404:	f7f0 f8f8 	bl	80005f8 <__aeabi_dmul>
 8010408:	2200      	movs	r2, #0
 801040a:	2300      	movs	r3, #0
 801040c:	4606      	mov	r6, r0
 801040e:	460f      	mov	r7, r1
 8010410:	f7f0 fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010414:	2800      	cmp	r0, #0
 8010416:	d09e      	beq.n	8010356 <_dtoa_r+0x65e>
 8010418:	e7d0      	b.n	80103bc <_dtoa_r+0x6c4>
 801041a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801041c:	2a00      	cmp	r2, #0
 801041e:	f000 80ca 	beq.w	80105b6 <_dtoa_r+0x8be>
 8010422:	9a07      	ldr	r2, [sp, #28]
 8010424:	2a01      	cmp	r2, #1
 8010426:	f300 80ad 	bgt.w	8010584 <_dtoa_r+0x88c>
 801042a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801042c:	2a00      	cmp	r2, #0
 801042e:	f000 80a5 	beq.w	801057c <_dtoa_r+0x884>
 8010432:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010436:	9e08      	ldr	r6, [sp, #32]
 8010438:	9d05      	ldr	r5, [sp, #20]
 801043a:	9a05      	ldr	r2, [sp, #20]
 801043c:	441a      	add	r2, r3
 801043e:	9205      	str	r2, [sp, #20]
 8010440:	9a06      	ldr	r2, [sp, #24]
 8010442:	2101      	movs	r1, #1
 8010444:	441a      	add	r2, r3
 8010446:	4620      	mov	r0, r4
 8010448:	9206      	str	r2, [sp, #24]
 801044a:	f000 fb89 	bl	8010b60 <__i2b>
 801044e:	4607      	mov	r7, r0
 8010450:	b165      	cbz	r5, 801046c <_dtoa_r+0x774>
 8010452:	9b06      	ldr	r3, [sp, #24]
 8010454:	2b00      	cmp	r3, #0
 8010456:	dd09      	ble.n	801046c <_dtoa_r+0x774>
 8010458:	42ab      	cmp	r3, r5
 801045a:	9a05      	ldr	r2, [sp, #20]
 801045c:	bfa8      	it	ge
 801045e:	462b      	movge	r3, r5
 8010460:	1ad2      	subs	r2, r2, r3
 8010462:	9205      	str	r2, [sp, #20]
 8010464:	9a06      	ldr	r2, [sp, #24]
 8010466:	1aed      	subs	r5, r5, r3
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	9306      	str	r3, [sp, #24]
 801046c:	9b08      	ldr	r3, [sp, #32]
 801046e:	b1f3      	cbz	r3, 80104ae <_dtoa_r+0x7b6>
 8010470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 80a3 	beq.w	80105be <_dtoa_r+0x8c6>
 8010478:	2e00      	cmp	r6, #0
 801047a:	dd10      	ble.n	801049e <_dtoa_r+0x7a6>
 801047c:	4639      	mov	r1, r7
 801047e:	4632      	mov	r2, r6
 8010480:	4620      	mov	r0, r4
 8010482:	f000 fc2d 	bl	8010ce0 <__pow5mult>
 8010486:	4652      	mov	r2, sl
 8010488:	4601      	mov	r1, r0
 801048a:	4607      	mov	r7, r0
 801048c:	4620      	mov	r0, r4
 801048e:	f000 fb7d 	bl	8010b8c <__multiply>
 8010492:	4651      	mov	r1, sl
 8010494:	4680      	mov	r8, r0
 8010496:	4620      	mov	r0, r4
 8010498:	f000 faac 	bl	80109f4 <_Bfree>
 801049c:	46c2      	mov	sl, r8
 801049e:	9b08      	ldr	r3, [sp, #32]
 80104a0:	1b9a      	subs	r2, r3, r6
 80104a2:	d004      	beq.n	80104ae <_dtoa_r+0x7b6>
 80104a4:	4651      	mov	r1, sl
 80104a6:	4620      	mov	r0, r4
 80104a8:	f000 fc1a 	bl	8010ce0 <__pow5mult>
 80104ac:	4682      	mov	sl, r0
 80104ae:	2101      	movs	r1, #1
 80104b0:	4620      	mov	r0, r4
 80104b2:	f000 fb55 	bl	8010b60 <__i2b>
 80104b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	4606      	mov	r6, r0
 80104bc:	f340 8081 	ble.w	80105c2 <_dtoa_r+0x8ca>
 80104c0:	461a      	mov	r2, r3
 80104c2:	4601      	mov	r1, r0
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 fc0b 	bl	8010ce0 <__pow5mult>
 80104ca:	9b07      	ldr	r3, [sp, #28]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	4606      	mov	r6, r0
 80104d0:	dd7a      	ble.n	80105c8 <_dtoa_r+0x8d0>
 80104d2:	f04f 0800 	mov.w	r8, #0
 80104d6:	6933      	ldr	r3, [r6, #16]
 80104d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80104dc:	6918      	ldr	r0, [r3, #16]
 80104de:	f000 faf1 	bl	8010ac4 <__hi0bits>
 80104e2:	f1c0 0020 	rsb	r0, r0, #32
 80104e6:	9b06      	ldr	r3, [sp, #24]
 80104e8:	4418      	add	r0, r3
 80104ea:	f010 001f 	ands.w	r0, r0, #31
 80104ee:	f000 8094 	beq.w	801061a <_dtoa_r+0x922>
 80104f2:	f1c0 0320 	rsb	r3, r0, #32
 80104f6:	2b04      	cmp	r3, #4
 80104f8:	f340 8085 	ble.w	8010606 <_dtoa_r+0x90e>
 80104fc:	9b05      	ldr	r3, [sp, #20]
 80104fe:	f1c0 001c 	rsb	r0, r0, #28
 8010502:	4403      	add	r3, r0
 8010504:	9305      	str	r3, [sp, #20]
 8010506:	9b06      	ldr	r3, [sp, #24]
 8010508:	4403      	add	r3, r0
 801050a:	4405      	add	r5, r0
 801050c:	9306      	str	r3, [sp, #24]
 801050e:	9b05      	ldr	r3, [sp, #20]
 8010510:	2b00      	cmp	r3, #0
 8010512:	dd05      	ble.n	8010520 <_dtoa_r+0x828>
 8010514:	4651      	mov	r1, sl
 8010516:	461a      	mov	r2, r3
 8010518:	4620      	mov	r0, r4
 801051a:	f000 fc3b 	bl	8010d94 <__lshift>
 801051e:	4682      	mov	sl, r0
 8010520:	9b06      	ldr	r3, [sp, #24]
 8010522:	2b00      	cmp	r3, #0
 8010524:	dd05      	ble.n	8010532 <_dtoa_r+0x83a>
 8010526:	4631      	mov	r1, r6
 8010528:	461a      	mov	r2, r3
 801052a:	4620      	mov	r0, r4
 801052c:	f000 fc32 	bl	8010d94 <__lshift>
 8010530:	4606      	mov	r6, r0
 8010532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010534:	2b00      	cmp	r3, #0
 8010536:	d072      	beq.n	801061e <_dtoa_r+0x926>
 8010538:	4631      	mov	r1, r6
 801053a:	4650      	mov	r0, sl
 801053c:	f000 fc96 	bl	8010e6c <__mcmp>
 8010540:	2800      	cmp	r0, #0
 8010542:	da6c      	bge.n	801061e <_dtoa_r+0x926>
 8010544:	2300      	movs	r3, #0
 8010546:	4651      	mov	r1, sl
 8010548:	220a      	movs	r2, #10
 801054a:	4620      	mov	r0, r4
 801054c:	f000 fa74 	bl	8010a38 <__multadd>
 8010550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010552:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010556:	4682      	mov	sl, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 81b0 	beq.w	80108be <_dtoa_r+0xbc6>
 801055e:	2300      	movs	r3, #0
 8010560:	4639      	mov	r1, r7
 8010562:	220a      	movs	r2, #10
 8010564:	4620      	mov	r0, r4
 8010566:	f000 fa67 	bl	8010a38 <__multadd>
 801056a:	9b01      	ldr	r3, [sp, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	4607      	mov	r7, r0
 8010570:	f300 8096 	bgt.w	80106a0 <_dtoa_r+0x9a8>
 8010574:	9b07      	ldr	r3, [sp, #28]
 8010576:	2b02      	cmp	r3, #2
 8010578:	dc59      	bgt.n	801062e <_dtoa_r+0x936>
 801057a:	e091      	b.n	80106a0 <_dtoa_r+0x9a8>
 801057c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801057e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010582:	e758      	b.n	8010436 <_dtoa_r+0x73e>
 8010584:	9b04      	ldr	r3, [sp, #16]
 8010586:	1e5e      	subs	r6, r3, #1
 8010588:	9b08      	ldr	r3, [sp, #32]
 801058a:	42b3      	cmp	r3, r6
 801058c:	bfbf      	itttt	lt
 801058e:	9b08      	ldrlt	r3, [sp, #32]
 8010590:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010592:	9608      	strlt	r6, [sp, #32]
 8010594:	1af3      	sublt	r3, r6, r3
 8010596:	bfb4      	ite	lt
 8010598:	18d2      	addlt	r2, r2, r3
 801059a:	1b9e      	subge	r6, r3, r6
 801059c:	9b04      	ldr	r3, [sp, #16]
 801059e:	bfbc      	itt	lt
 80105a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80105a2:	2600      	movlt	r6, #0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	bfb7      	itett	lt
 80105a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80105ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80105b0:	1a9d      	sublt	r5, r3, r2
 80105b2:	2300      	movlt	r3, #0
 80105b4:	e741      	b.n	801043a <_dtoa_r+0x742>
 80105b6:	9e08      	ldr	r6, [sp, #32]
 80105b8:	9d05      	ldr	r5, [sp, #20]
 80105ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80105bc:	e748      	b.n	8010450 <_dtoa_r+0x758>
 80105be:	9a08      	ldr	r2, [sp, #32]
 80105c0:	e770      	b.n	80104a4 <_dtoa_r+0x7ac>
 80105c2:	9b07      	ldr	r3, [sp, #28]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	dc19      	bgt.n	80105fc <_dtoa_r+0x904>
 80105c8:	9b02      	ldr	r3, [sp, #8]
 80105ca:	b9bb      	cbnz	r3, 80105fc <_dtoa_r+0x904>
 80105cc:	9b03      	ldr	r3, [sp, #12]
 80105ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105d2:	b99b      	cbnz	r3, 80105fc <_dtoa_r+0x904>
 80105d4:	9b03      	ldr	r3, [sp, #12]
 80105d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80105da:	0d1b      	lsrs	r3, r3, #20
 80105dc:	051b      	lsls	r3, r3, #20
 80105de:	b183      	cbz	r3, 8010602 <_dtoa_r+0x90a>
 80105e0:	9b05      	ldr	r3, [sp, #20]
 80105e2:	3301      	adds	r3, #1
 80105e4:	9305      	str	r3, [sp, #20]
 80105e6:	9b06      	ldr	r3, [sp, #24]
 80105e8:	3301      	adds	r3, #1
 80105ea:	9306      	str	r3, [sp, #24]
 80105ec:	f04f 0801 	mov.w	r8, #1
 80105f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f47f af6f 	bne.w	80104d6 <_dtoa_r+0x7de>
 80105f8:	2001      	movs	r0, #1
 80105fa:	e774      	b.n	80104e6 <_dtoa_r+0x7ee>
 80105fc:	f04f 0800 	mov.w	r8, #0
 8010600:	e7f6      	b.n	80105f0 <_dtoa_r+0x8f8>
 8010602:	4698      	mov	r8, r3
 8010604:	e7f4      	b.n	80105f0 <_dtoa_r+0x8f8>
 8010606:	d082      	beq.n	801050e <_dtoa_r+0x816>
 8010608:	9a05      	ldr	r2, [sp, #20]
 801060a:	331c      	adds	r3, #28
 801060c:	441a      	add	r2, r3
 801060e:	9205      	str	r2, [sp, #20]
 8010610:	9a06      	ldr	r2, [sp, #24]
 8010612:	441a      	add	r2, r3
 8010614:	441d      	add	r5, r3
 8010616:	9206      	str	r2, [sp, #24]
 8010618:	e779      	b.n	801050e <_dtoa_r+0x816>
 801061a:	4603      	mov	r3, r0
 801061c:	e7f4      	b.n	8010608 <_dtoa_r+0x910>
 801061e:	9b04      	ldr	r3, [sp, #16]
 8010620:	2b00      	cmp	r3, #0
 8010622:	dc37      	bgt.n	8010694 <_dtoa_r+0x99c>
 8010624:	9b07      	ldr	r3, [sp, #28]
 8010626:	2b02      	cmp	r3, #2
 8010628:	dd34      	ble.n	8010694 <_dtoa_r+0x99c>
 801062a:	9b04      	ldr	r3, [sp, #16]
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	9b01      	ldr	r3, [sp, #4]
 8010630:	b963      	cbnz	r3, 801064c <_dtoa_r+0x954>
 8010632:	4631      	mov	r1, r6
 8010634:	2205      	movs	r2, #5
 8010636:	4620      	mov	r0, r4
 8010638:	f000 f9fe 	bl	8010a38 <__multadd>
 801063c:	4601      	mov	r1, r0
 801063e:	4606      	mov	r6, r0
 8010640:	4650      	mov	r0, sl
 8010642:	f000 fc13 	bl	8010e6c <__mcmp>
 8010646:	2800      	cmp	r0, #0
 8010648:	f73f adbb 	bgt.w	80101c2 <_dtoa_r+0x4ca>
 801064c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801064e:	9d00      	ldr	r5, [sp, #0]
 8010650:	ea6f 0b03 	mvn.w	fp, r3
 8010654:	f04f 0800 	mov.w	r8, #0
 8010658:	4631      	mov	r1, r6
 801065a:	4620      	mov	r0, r4
 801065c:	f000 f9ca 	bl	80109f4 <_Bfree>
 8010660:	2f00      	cmp	r7, #0
 8010662:	f43f aeab 	beq.w	80103bc <_dtoa_r+0x6c4>
 8010666:	f1b8 0f00 	cmp.w	r8, #0
 801066a:	d005      	beq.n	8010678 <_dtoa_r+0x980>
 801066c:	45b8      	cmp	r8, r7
 801066e:	d003      	beq.n	8010678 <_dtoa_r+0x980>
 8010670:	4641      	mov	r1, r8
 8010672:	4620      	mov	r0, r4
 8010674:	f000 f9be 	bl	80109f4 <_Bfree>
 8010678:	4639      	mov	r1, r7
 801067a:	4620      	mov	r0, r4
 801067c:	f000 f9ba 	bl	80109f4 <_Bfree>
 8010680:	e69c      	b.n	80103bc <_dtoa_r+0x6c4>
 8010682:	2600      	movs	r6, #0
 8010684:	4637      	mov	r7, r6
 8010686:	e7e1      	b.n	801064c <_dtoa_r+0x954>
 8010688:	46bb      	mov	fp, r7
 801068a:	4637      	mov	r7, r6
 801068c:	e599      	b.n	80101c2 <_dtoa_r+0x4ca>
 801068e:	bf00      	nop
 8010690:	40240000 	.word	0x40240000
 8010694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010696:	2b00      	cmp	r3, #0
 8010698:	f000 80c8 	beq.w	801082c <_dtoa_r+0xb34>
 801069c:	9b04      	ldr	r3, [sp, #16]
 801069e:	9301      	str	r3, [sp, #4]
 80106a0:	2d00      	cmp	r5, #0
 80106a2:	dd05      	ble.n	80106b0 <_dtoa_r+0x9b8>
 80106a4:	4639      	mov	r1, r7
 80106a6:	462a      	mov	r2, r5
 80106a8:	4620      	mov	r0, r4
 80106aa:	f000 fb73 	bl	8010d94 <__lshift>
 80106ae:	4607      	mov	r7, r0
 80106b0:	f1b8 0f00 	cmp.w	r8, #0
 80106b4:	d05b      	beq.n	801076e <_dtoa_r+0xa76>
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	4620      	mov	r0, r4
 80106ba:	f000 f95b 	bl	8010974 <_Balloc>
 80106be:	4605      	mov	r5, r0
 80106c0:	b928      	cbnz	r0, 80106ce <_dtoa_r+0x9d6>
 80106c2:	4b83      	ldr	r3, [pc, #524]	; (80108d0 <_dtoa_r+0xbd8>)
 80106c4:	4602      	mov	r2, r0
 80106c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80106ca:	f7ff bb2e 	b.w	800fd2a <_dtoa_r+0x32>
 80106ce:	693a      	ldr	r2, [r7, #16]
 80106d0:	3202      	adds	r2, #2
 80106d2:	0092      	lsls	r2, r2, #2
 80106d4:	f107 010c 	add.w	r1, r7, #12
 80106d8:	300c      	adds	r0, #12
 80106da:	f7ff fa77 	bl	800fbcc <memcpy>
 80106de:	2201      	movs	r2, #1
 80106e0:	4629      	mov	r1, r5
 80106e2:	4620      	mov	r0, r4
 80106e4:	f000 fb56 	bl	8010d94 <__lshift>
 80106e8:	9b00      	ldr	r3, [sp, #0]
 80106ea:	3301      	adds	r3, #1
 80106ec:	9304      	str	r3, [sp, #16]
 80106ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106f2:	4413      	add	r3, r2
 80106f4:	9308      	str	r3, [sp, #32]
 80106f6:	9b02      	ldr	r3, [sp, #8]
 80106f8:	f003 0301 	and.w	r3, r3, #1
 80106fc:	46b8      	mov	r8, r7
 80106fe:	9306      	str	r3, [sp, #24]
 8010700:	4607      	mov	r7, r0
 8010702:	9b04      	ldr	r3, [sp, #16]
 8010704:	4631      	mov	r1, r6
 8010706:	3b01      	subs	r3, #1
 8010708:	4650      	mov	r0, sl
 801070a:	9301      	str	r3, [sp, #4]
 801070c:	f7ff fa6c 	bl	800fbe8 <quorem>
 8010710:	4641      	mov	r1, r8
 8010712:	9002      	str	r0, [sp, #8]
 8010714:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010718:	4650      	mov	r0, sl
 801071a:	f000 fba7 	bl	8010e6c <__mcmp>
 801071e:	463a      	mov	r2, r7
 8010720:	9005      	str	r0, [sp, #20]
 8010722:	4631      	mov	r1, r6
 8010724:	4620      	mov	r0, r4
 8010726:	f000 fbbd 	bl	8010ea4 <__mdiff>
 801072a:	68c2      	ldr	r2, [r0, #12]
 801072c:	4605      	mov	r5, r0
 801072e:	bb02      	cbnz	r2, 8010772 <_dtoa_r+0xa7a>
 8010730:	4601      	mov	r1, r0
 8010732:	4650      	mov	r0, sl
 8010734:	f000 fb9a 	bl	8010e6c <__mcmp>
 8010738:	4602      	mov	r2, r0
 801073a:	4629      	mov	r1, r5
 801073c:	4620      	mov	r0, r4
 801073e:	9209      	str	r2, [sp, #36]	; 0x24
 8010740:	f000 f958 	bl	80109f4 <_Bfree>
 8010744:	9b07      	ldr	r3, [sp, #28]
 8010746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010748:	9d04      	ldr	r5, [sp, #16]
 801074a:	ea43 0102 	orr.w	r1, r3, r2
 801074e:	9b06      	ldr	r3, [sp, #24]
 8010750:	4319      	orrs	r1, r3
 8010752:	d110      	bne.n	8010776 <_dtoa_r+0xa7e>
 8010754:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010758:	d029      	beq.n	80107ae <_dtoa_r+0xab6>
 801075a:	9b05      	ldr	r3, [sp, #20]
 801075c:	2b00      	cmp	r3, #0
 801075e:	dd02      	ble.n	8010766 <_dtoa_r+0xa6e>
 8010760:	9b02      	ldr	r3, [sp, #8]
 8010762:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010766:	9b01      	ldr	r3, [sp, #4]
 8010768:	f883 9000 	strb.w	r9, [r3]
 801076c:	e774      	b.n	8010658 <_dtoa_r+0x960>
 801076e:	4638      	mov	r0, r7
 8010770:	e7ba      	b.n	80106e8 <_dtoa_r+0x9f0>
 8010772:	2201      	movs	r2, #1
 8010774:	e7e1      	b.n	801073a <_dtoa_r+0xa42>
 8010776:	9b05      	ldr	r3, [sp, #20]
 8010778:	2b00      	cmp	r3, #0
 801077a:	db04      	blt.n	8010786 <_dtoa_r+0xa8e>
 801077c:	9907      	ldr	r1, [sp, #28]
 801077e:	430b      	orrs	r3, r1
 8010780:	9906      	ldr	r1, [sp, #24]
 8010782:	430b      	orrs	r3, r1
 8010784:	d120      	bne.n	80107c8 <_dtoa_r+0xad0>
 8010786:	2a00      	cmp	r2, #0
 8010788:	dded      	ble.n	8010766 <_dtoa_r+0xa6e>
 801078a:	4651      	mov	r1, sl
 801078c:	2201      	movs	r2, #1
 801078e:	4620      	mov	r0, r4
 8010790:	f000 fb00 	bl	8010d94 <__lshift>
 8010794:	4631      	mov	r1, r6
 8010796:	4682      	mov	sl, r0
 8010798:	f000 fb68 	bl	8010e6c <__mcmp>
 801079c:	2800      	cmp	r0, #0
 801079e:	dc03      	bgt.n	80107a8 <_dtoa_r+0xab0>
 80107a0:	d1e1      	bne.n	8010766 <_dtoa_r+0xa6e>
 80107a2:	f019 0f01 	tst.w	r9, #1
 80107a6:	d0de      	beq.n	8010766 <_dtoa_r+0xa6e>
 80107a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80107ac:	d1d8      	bne.n	8010760 <_dtoa_r+0xa68>
 80107ae:	9a01      	ldr	r2, [sp, #4]
 80107b0:	2339      	movs	r3, #57	; 0x39
 80107b2:	7013      	strb	r3, [r2, #0]
 80107b4:	462b      	mov	r3, r5
 80107b6:	461d      	mov	r5, r3
 80107b8:	3b01      	subs	r3, #1
 80107ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80107be:	2a39      	cmp	r2, #57	; 0x39
 80107c0:	d06c      	beq.n	801089c <_dtoa_r+0xba4>
 80107c2:	3201      	adds	r2, #1
 80107c4:	701a      	strb	r2, [r3, #0]
 80107c6:	e747      	b.n	8010658 <_dtoa_r+0x960>
 80107c8:	2a00      	cmp	r2, #0
 80107ca:	dd07      	ble.n	80107dc <_dtoa_r+0xae4>
 80107cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80107d0:	d0ed      	beq.n	80107ae <_dtoa_r+0xab6>
 80107d2:	9a01      	ldr	r2, [sp, #4]
 80107d4:	f109 0301 	add.w	r3, r9, #1
 80107d8:	7013      	strb	r3, [r2, #0]
 80107da:	e73d      	b.n	8010658 <_dtoa_r+0x960>
 80107dc:	9b04      	ldr	r3, [sp, #16]
 80107de:	9a08      	ldr	r2, [sp, #32]
 80107e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d043      	beq.n	8010870 <_dtoa_r+0xb78>
 80107e8:	4651      	mov	r1, sl
 80107ea:	2300      	movs	r3, #0
 80107ec:	220a      	movs	r2, #10
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 f922 	bl	8010a38 <__multadd>
 80107f4:	45b8      	cmp	r8, r7
 80107f6:	4682      	mov	sl, r0
 80107f8:	f04f 0300 	mov.w	r3, #0
 80107fc:	f04f 020a 	mov.w	r2, #10
 8010800:	4641      	mov	r1, r8
 8010802:	4620      	mov	r0, r4
 8010804:	d107      	bne.n	8010816 <_dtoa_r+0xb1e>
 8010806:	f000 f917 	bl	8010a38 <__multadd>
 801080a:	4680      	mov	r8, r0
 801080c:	4607      	mov	r7, r0
 801080e:	9b04      	ldr	r3, [sp, #16]
 8010810:	3301      	adds	r3, #1
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	e775      	b.n	8010702 <_dtoa_r+0xa0a>
 8010816:	f000 f90f 	bl	8010a38 <__multadd>
 801081a:	4639      	mov	r1, r7
 801081c:	4680      	mov	r8, r0
 801081e:	2300      	movs	r3, #0
 8010820:	220a      	movs	r2, #10
 8010822:	4620      	mov	r0, r4
 8010824:	f000 f908 	bl	8010a38 <__multadd>
 8010828:	4607      	mov	r7, r0
 801082a:	e7f0      	b.n	801080e <_dtoa_r+0xb16>
 801082c:	9b04      	ldr	r3, [sp, #16]
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	9d00      	ldr	r5, [sp, #0]
 8010832:	4631      	mov	r1, r6
 8010834:	4650      	mov	r0, sl
 8010836:	f7ff f9d7 	bl	800fbe8 <quorem>
 801083a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801083e:	9b00      	ldr	r3, [sp, #0]
 8010840:	f805 9b01 	strb.w	r9, [r5], #1
 8010844:	1aea      	subs	r2, r5, r3
 8010846:	9b01      	ldr	r3, [sp, #4]
 8010848:	4293      	cmp	r3, r2
 801084a:	dd07      	ble.n	801085c <_dtoa_r+0xb64>
 801084c:	4651      	mov	r1, sl
 801084e:	2300      	movs	r3, #0
 8010850:	220a      	movs	r2, #10
 8010852:	4620      	mov	r0, r4
 8010854:	f000 f8f0 	bl	8010a38 <__multadd>
 8010858:	4682      	mov	sl, r0
 801085a:	e7ea      	b.n	8010832 <_dtoa_r+0xb3a>
 801085c:	9b01      	ldr	r3, [sp, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	bfc8      	it	gt
 8010862:	461d      	movgt	r5, r3
 8010864:	9b00      	ldr	r3, [sp, #0]
 8010866:	bfd8      	it	le
 8010868:	2501      	movle	r5, #1
 801086a:	441d      	add	r5, r3
 801086c:	f04f 0800 	mov.w	r8, #0
 8010870:	4651      	mov	r1, sl
 8010872:	2201      	movs	r2, #1
 8010874:	4620      	mov	r0, r4
 8010876:	f000 fa8d 	bl	8010d94 <__lshift>
 801087a:	4631      	mov	r1, r6
 801087c:	4682      	mov	sl, r0
 801087e:	f000 faf5 	bl	8010e6c <__mcmp>
 8010882:	2800      	cmp	r0, #0
 8010884:	dc96      	bgt.n	80107b4 <_dtoa_r+0xabc>
 8010886:	d102      	bne.n	801088e <_dtoa_r+0xb96>
 8010888:	f019 0f01 	tst.w	r9, #1
 801088c:	d192      	bne.n	80107b4 <_dtoa_r+0xabc>
 801088e:	462b      	mov	r3, r5
 8010890:	461d      	mov	r5, r3
 8010892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010896:	2a30      	cmp	r2, #48	; 0x30
 8010898:	d0fa      	beq.n	8010890 <_dtoa_r+0xb98>
 801089a:	e6dd      	b.n	8010658 <_dtoa_r+0x960>
 801089c:	9a00      	ldr	r2, [sp, #0]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d189      	bne.n	80107b6 <_dtoa_r+0xabe>
 80108a2:	f10b 0b01 	add.w	fp, fp, #1
 80108a6:	2331      	movs	r3, #49	; 0x31
 80108a8:	e796      	b.n	80107d8 <_dtoa_r+0xae0>
 80108aa:	4b0a      	ldr	r3, [pc, #40]	; (80108d4 <_dtoa_r+0xbdc>)
 80108ac:	f7ff ba99 	b.w	800fde2 <_dtoa_r+0xea>
 80108b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f47f aa6d 	bne.w	800fd92 <_dtoa_r+0x9a>
 80108b8:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <_dtoa_r+0xbe0>)
 80108ba:	f7ff ba92 	b.w	800fde2 <_dtoa_r+0xea>
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	dcb5      	bgt.n	8010830 <_dtoa_r+0xb38>
 80108c4:	9b07      	ldr	r3, [sp, #28]
 80108c6:	2b02      	cmp	r3, #2
 80108c8:	f73f aeb1 	bgt.w	801062e <_dtoa_r+0x936>
 80108cc:	e7b0      	b.n	8010830 <_dtoa_r+0xb38>
 80108ce:	bf00      	nop
 80108d0:	080124dc 	.word	0x080124dc
 80108d4:	0801243c 	.word	0x0801243c
 80108d8:	08012460 	.word	0x08012460

080108dc <_free_r>:
 80108dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108de:	2900      	cmp	r1, #0
 80108e0:	d044      	beq.n	801096c <_free_r+0x90>
 80108e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108e6:	9001      	str	r0, [sp, #4]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f1a1 0404 	sub.w	r4, r1, #4
 80108ee:	bfb8      	it	lt
 80108f0:	18e4      	addlt	r4, r4, r3
 80108f2:	f7fe fb57 	bl	800efa4 <__malloc_lock>
 80108f6:	4a1e      	ldr	r2, [pc, #120]	; (8010970 <_free_r+0x94>)
 80108f8:	9801      	ldr	r0, [sp, #4]
 80108fa:	6813      	ldr	r3, [r2, #0]
 80108fc:	b933      	cbnz	r3, 801090c <_free_r+0x30>
 80108fe:	6063      	str	r3, [r4, #4]
 8010900:	6014      	str	r4, [r2, #0]
 8010902:	b003      	add	sp, #12
 8010904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010908:	f7fe bb52 	b.w	800efb0 <__malloc_unlock>
 801090c:	42a3      	cmp	r3, r4
 801090e:	d908      	bls.n	8010922 <_free_r+0x46>
 8010910:	6825      	ldr	r5, [r4, #0]
 8010912:	1961      	adds	r1, r4, r5
 8010914:	428b      	cmp	r3, r1
 8010916:	bf01      	itttt	eq
 8010918:	6819      	ldreq	r1, [r3, #0]
 801091a:	685b      	ldreq	r3, [r3, #4]
 801091c:	1949      	addeq	r1, r1, r5
 801091e:	6021      	streq	r1, [r4, #0]
 8010920:	e7ed      	b.n	80108fe <_free_r+0x22>
 8010922:	461a      	mov	r2, r3
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	b10b      	cbz	r3, 801092c <_free_r+0x50>
 8010928:	42a3      	cmp	r3, r4
 801092a:	d9fa      	bls.n	8010922 <_free_r+0x46>
 801092c:	6811      	ldr	r1, [r2, #0]
 801092e:	1855      	adds	r5, r2, r1
 8010930:	42a5      	cmp	r5, r4
 8010932:	d10b      	bne.n	801094c <_free_r+0x70>
 8010934:	6824      	ldr	r4, [r4, #0]
 8010936:	4421      	add	r1, r4
 8010938:	1854      	adds	r4, r2, r1
 801093a:	42a3      	cmp	r3, r4
 801093c:	6011      	str	r1, [r2, #0]
 801093e:	d1e0      	bne.n	8010902 <_free_r+0x26>
 8010940:	681c      	ldr	r4, [r3, #0]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	6053      	str	r3, [r2, #4]
 8010946:	440c      	add	r4, r1
 8010948:	6014      	str	r4, [r2, #0]
 801094a:	e7da      	b.n	8010902 <_free_r+0x26>
 801094c:	d902      	bls.n	8010954 <_free_r+0x78>
 801094e:	230c      	movs	r3, #12
 8010950:	6003      	str	r3, [r0, #0]
 8010952:	e7d6      	b.n	8010902 <_free_r+0x26>
 8010954:	6825      	ldr	r5, [r4, #0]
 8010956:	1961      	adds	r1, r4, r5
 8010958:	428b      	cmp	r3, r1
 801095a:	bf04      	itt	eq
 801095c:	6819      	ldreq	r1, [r3, #0]
 801095e:	685b      	ldreq	r3, [r3, #4]
 8010960:	6063      	str	r3, [r4, #4]
 8010962:	bf04      	itt	eq
 8010964:	1949      	addeq	r1, r1, r5
 8010966:	6021      	streq	r1, [r4, #0]
 8010968:	6054      	str	r4, [r2, #4]
 801096a:	e7ca      	b.n	8010902 <_free_r+0x26>
 801096c:	b003      	add	sp, #12
 801096e:	bd30      	pop	{r4, r5, pc}
 8010970:	2000158c 	.word	0x2000158c

08010974 <_Balloc>:
 8010974:	b570      	push	{r4, r5, r6, lr}
 8010976:	69c6      	ldr	r6, [r0, #28]
 8010978:	4604      	mov	r4, r0
 801097a:	460d      	mov	r5, r1
 801097c:	b976      	cbnz	r6, 801099c <_Balloc+0x28>
 801097e:	2010      	movs	r0, #16
 8010980:	f7fe fa60 	bl	800ee44 <malloc>
 8010984:	4602      	mov	r2, r0
 8010986:	61e0      	str	r0, [r4, #28]
 8010988:	b920      	cbnz	r0, 8010994 <_Balloc+0x20>
 801098a:	4b18      	ldr	r3, [pc, #96]	; (80109ec <_Balloc+0x78>)
 801098c:	4818      	ldr	r0, [pc, #96]	; (80109f0 <_Balloc+0x7c>)
 801098e:	216b      	movs	r1, #107	; 0x6b
 8010990:	f000 fd8c 	bl	80114ac <__assert_func>
 8010994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010998:	6006      	str	r6, [r0, #0]
 801099a:	60c6      	str	r6, [r0, #12]
 801099c:	69e6      	ldr	r6, [r4, #28]
 801099e:	68f3      	ldr	r3, [r6, #12]
 80109a0:	b183      	cbz	r3, 80109c4 <_Balloc+0x50>
 80109a2:	69e3      	ldr	r3, [r4, #28]
 80109a4:	68db      	ldr	r3, [r3, #12]
 80109a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80109aa:	b9b8      	cbnz	r0, 80109dc <_Balloc+0x68>
 80109ac:	2101      	movs	r1, #1
 80109ae:	fa01 f605 	lsl.w	r6, r1, r5
 80109b2:	1d72      	adds	r2, r6, #5
 80109b4:	0092      	lsls	r2, r2, #2
 80109b6:	4620      	mov	r0, r4
 80109b8:	f000 fd96 	bl	80114e8 <_calloc_r>
 80109bc:	b160      	cbz	r0, 80109d8 <_Balloc+0x64>
 80109be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80109c2:	e00e      	b.n	80109e2 <_Balloc+0x6e>
 80109c4:	2221      	movs	r2, #33	; 0x21
 80109c6:	2104      	movs	r1, #4
 80109c8:	4620      	mov	r0, r4
 80109ca:	f000 fd8d 	bl	80114e8 <_calloc_r>
 80109ce:	69e3      	ldr	r3, [r4, #28]
 80109d0:	60f0      	str	r0, [r6, #12]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1e4      	bne.n	80109a2 <_Balloc+0x2e>
 80109d8:	2000      	movs	r0, #0
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	6802      	ldr	r2, [r0, #0]
 80109de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109e2:	2300      	movs	r3, #0
 80109e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109e8:	e7f7      	b.n	80109da <_Balloc+0x66>
 80109ea:	bf00      	nop
 80109ec:	0801246d 	.word	0x0801246d
 80109f0:	080124ed 	.word	0x080124ed

080109f4 <_Bfree>:
 80109f4:	b570      	push	{r4, r5, r6, lr}
 80109f6:	69c6      	ldr	r6, [r0, #28]
 80109f8:	4605      	mov	r5, r0
 80109fa:	460c      	mov	r4, r1
 80109fc:	b976      	cbnz	r6, 8010a1c <_Bfree+0x28>
 80109fe:	2010      	movs	r0, #16
 8010a00:	f7fe fa20 	bl	800ee44 <malloc>
 8010a04:	4602      	mov	r2, r0
 8010a06:	61e8      	str	r0, [r5, #28]
 8010a08:	b920      	cbnz	r0, 8010a14 <_Bfree+0x20>
 8010a0a:	4b09      	ldr	r3, [pc, #36]	; (8010a30 <_Bfree+0x3c>)
 8010a0c:	4809      	ldr	r0, [pc, #36]	; (8010a34 <_Bfree+0x40>)
 8010a0e:	218f      	movs	r1, #143	; 0x8f
 8010a10:	f000 fd4c 	bl	80114ac <__assert_func>
 8010a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a18:	6006      	str	r6, [r0, #0]
 8010a1a:	60c6      	str	r6, [r0, #12]
 8010a1c:	b13c      	cbz	r4, 8010a2e <_Bfree+0x3a>
 8010a1e:	69eb      	ldr	r3, [r5, #28]
 8010a20:	6862      	ldr	r2, [r4, #4]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a28:	6021      	str	r1, [r4, #0]
 8010a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a2e:	bd70      	pop	{r4, r5, r6, pc}
 8010a30:	0801246d 	.word	0x0801246d
 8010a34:	080124ed 	.word	0x080124ed

08010a38 <__multadd>:
 8010a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3c:	690d      	ldr	r5, [r1, #16]
 8010a3e:	4607      	mov	r7, r0
 8010a40:	460c      	mov	r4, r1
 8010a42:	461e      	mov	r6, r3
 8010a44:	f101 0c14 	add.w	ip, r1, #20
 8010a48:	2000      	movs	r0, #0
 8010a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8010a4e:	b299      	uxth	r1, r3
 8010a50:	fb02 6101 	mla	r1, r2, r1, r6
 8010a54:	0c1e      	lsrs	r6, r3, #16
 8010a56:	0c0b      	lsrs	r3, r1, #16
 8010a58:	fb02 3306 	mla	r3, r2, r6, r3
 8010a5c:	b289      	uxth	r1, r1
 8010a5e:	3001      	adds	r0, #1
 8010a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a64:	4285      	cmp	r5, r0
 8010a66:	f84c 1b04 	str.w	r1, [ip], #4
 8010a6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a6e:	dcec      	bgt.n	8010a4a <__multadd+0x12>
 8010a70:	b30e      	cbz	r6, 8010ab6 <__multadd+0x7e>
 8010a72:	68a3      	ldr	r3, [r4, #8]
 8010a74:	42ab      	cmp	r3, r5
 8010a76:	dc19      	bgt.n	8010aac <__multadd+0x74>
 8010a78:	6861      	ldr	r1, [r4, #4]
 8010a7a:	4638      	mov	r0, r7
 8010a7c:	3101      	adds	r1, #1
 8010a7e:	f7ff ff79 	bl	8010974 <_Balloc>
 8010a82:	4680      	mov	r8, r0
 8010a84:	b928      	cbnz	r0, 8010a92 <__multadd+0x5a>
 8010a86:	4602      	mov	r2, r0
 8010a88:	4b0c      	ldr	r3, [pc, #48]	; (8010abc <__multadd+0x84>)
 8010a8a:	480d      	ldr	r0, [pc, #52]	; (8010ac0 <__multadd+0x88>)
 8010a8c:	21ba      	movs	r1, #186	; 0xba
 8010a8e:	f000 fd0d 	bl	80114ac <__assert_func>
 8010a92:	6922      	ldr	r2, [r4, #16]
 8010a94:	3202      	adds	r2, #2
 8010a96:	f104 010c 	add.w	r1, r4, #12
 8010a9a:	0092      	lsls	r2, r2, #2
 8010a9c:	300c      	adds	r0, #12
 8010a9e:	f7ff f895 	bl	800fbcc <memcpy>
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	4638      	mov	r0, r7
 8010aa6:	f7ff ffa5 	bl	80109f4 <_Bfree>
 8010aaa:	4644      	mov	r4, r8
 8010aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ab0:	3501      	adds	r5, #1
 8010ab2:	615e      	str	r6, [r3, #20]
 8010ab4:	6125      	str	r5, [r4, #16]
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010abc:	080124dc 	.word	0x080124dc
 8010ac0:	080124ed 	.word	0x080124ed

08010ac4 <__hi0bits>:
 8010ac4:	0c03      	lsrs	r3, r0, #16
 8010ac6:	041b      	lsls	r3, r3, #16
 8010ac8:	b9d3      	cbnz	r3, 8010b00 <__hi0bits+0x3c>
 8010aca:	0400      	lsls	r0, r0, #16
 8010acc:	2310      	movs	r3, #16
 8010ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ad2:	bf04      	itt	eq
 8010ad4:	0200      	lsleq	r0, r0, #8
 8010ad6:	3308      	addeq	r3, #8
 8010ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010adc:	bf04      	itt	eq
 8010ade:	0100      	lsleq	r0, r0, #4
 8010ae0:	3304      	addeq	r3, #4
 8010ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ae6:	bf04      	itt	eq
 8010ae8:	0080      	lsleq	r0, r0, #2
 8010aea:	3302      	addeq	r3, #2
 8010aec:	2800      	cmp	r0, #0
 8010aee:	db05      	blt.n	8010afc <__hi0bits+0x38>
 8010af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010af4:	f103 0301 	add.w	r3, r3, #1
 8010af8:	bf08      	it	eq
 8010afa:	2320      	moveq	r3, #32
 8010afc:	4618      	mov	r0, r3
 8010afe:	4770      	bx	lr
 8010b00:	2300      	movs	r3, #0
 8010b02:	e7e4      	b.n	8010ace <__hi0bits+0xa>

08010b04 <__lo0bits>:
 8010b04:	6803      	ldr	r3, [r0, #0]
 8010b06:	f013 0207 	ands.w	r2, r3, #7
 8010b0a:	d00c      	beq.n	8010b26 <__lo0bits+0x22>
 8010b0c:	07d9      	lsls	r1, r3, #31
 8010b0e:	d422      	bmi.n	8010b56 <__lo0bits+0x52>
 8010b10:	079a      	lsls	r2, r3, #30
 8010b12:	bf49      	itett	mi
 8010b14:	085b      	lsrmi	r3, r3, #1
 8010b16:	089b      	lsrpl	r3, r3, #2
 8010b18:	6003      	strmi	r3, [r0, #0]
 8010b1a:	2201      	movmi	r2, #1
 8010b1c:	bf5c      	itt	pl
 8010b1e:	6003      	strpl	r3, [r0, #0]
 8010b20:	2202      	movpl	r2, #2
 8010b22:	4610      	mov	r0, r2
 8010b24:	4770      	bx	lr
 8010b26:	b299      	uxth	r1, r3
 8010b28:	b909      	cbnz	r1, 8010b2e <__lo0bits+0x2a>
 8010b2a:	0c1b      	lsrs	r3, r3, #16
 8010b2c:	2210      	movs	r2, #16
 8010b2e:	b2d9      	uxtb	r1, r3
 8010b30:	b909      	cbnz	r1, 8010b36 <__lo0bits+0x32>
 8010b32:	3208      	adds	r2, #8
 8010b34:	0a1b      	lsrs	r3, r3, #8
 8010b36:	0719      	lsls	r1, r3, #28
 8010b38:	bf04      	itt	eq
 8010b3a:	091b      	lsreq	r3, r3, #4
 8010b3c:	3204      	addeq	r2, #4
 8010b3e:	0799      	lsls	r1, r3, #30
 8010b40:	bf04      	itt	eq
 8010b42:	089b      	lsreq	r3, r3, #2
 8010b44:	3202      	addeq	r2, #2
 8010b46:	07d9      	lsls	r1, r3, #31
 8010b48:	d403      	bmi.n	8010b52 <__lo0bits+0x4e>
 8010b4a:	085b      	lsrs	r3, r3, #1
 8010b4c:	f102 0201 	add.w	r2, r2, #1
 8010b50:	d003      	beq.n	8010b5a <__lo0bits+0x56>
 8010b52:	6003      	str	r3, [r0, #0]
 8010b54:	e7e5      	b.n	8010b22 <__lo0bits+0x1e>
 8010b56:	2200      	movs	r2, #0
 8010b58:	e7e3      	b.n	8010b22 <__lo0bits+0x1e>
 8010b5a:	2220      	movs	r2, #32
 8010b5c:	e7e1      	b.n	8010b22 <__lo0bits+0x1e>
	...

08010b60 <__i2b>:
 8010b60:	b510      	push	{r4, lr}
 8010b62:	460c      	mov	r4, r1
 8010b64:	2101      	movs	r1, #1
 8010b66:	f7ff ff05 	bl	8010974 <_Balloc>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	b928      	cbnz	r0, 8010b7a <__i2b+0x1a>
 8010b6e:	4b05      	ldr	r3, [pc, #20]	; (8010b84 <__i2b+0x24>)
 8010b70:	4805      	ldr	r0, [pc, #20]	; (8010b88 <__i2b+0x28>)
 8010b72:	f240 1145 	movw	r1, #325	; 0x145
 8010b76:	f000 fc99 	bl	80114ac <__assert_func>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	6144      	str	r4, [r0, #20]
 8010b7e:	6103      	str	r3, [r0, #16]
 8010b80:	bd10      	pop	{r4, pc}
 8010b82:	bf00      	nop
 8010b84:	080124dc 	.word	0x080124dc
 8010b88:	080124ed 	.word	0x080124ed

08010b8c <__multiply>:
 8010b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	4691      	mov	r9, r2
 8010b92:	690a      	ldr	r2, [r1, #16]
 8010b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	bfb8      	it	lt
 8010b9c:	460b      	movlt	r3, r1
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	bfbc      	itt	lt
 8010ba2:	464c      	movlt	r4, r9
 8010ba4:	4699      	movlt	r9, r3
 8010ba6:	6927      	ldr	r7, [r4, #16]
 8010ba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010bac:	68a3      	ldr	r3, [r4, #8]
 8010bae:	6861      	ldr	r1, [r4, #4]
 8010bb0:	eb07 060a 	add.w	r6, r7, sl
 8010bb4:	42b3      	cmp	r3, r6
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	bfb8      	it	lt
 8010bba:	3101      	addlt	r1, #1
 8010bbc:	f7ff feda 	bl	8010974 <_Balloc>
 8010bc0:	b930      	cbnz	r0, 8010bd0 <__multiply+0x44>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	4b44      	ldr	r3, [pc, #272]	; (8010cd8 <__multiply+0x14c>)
 8010bc6:	4845      	ldr	r0, [pc, #276]	; (8010cdc <__multiply+0x150>)
 8010bc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010bcc:	f000 fc6e 	bl	80114ac <__assert_func>
 8010bd0:	f100 0514 	add.w	r5, r0, #20
 8010bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010bd8:	462b      	mov	r3, r5
 8010bda:	2200      	movs	r2, #0
 8010bdc:	4543      	cmp	r3, r8
 8010bde:	d321      	bcc.n	8010c24 <__multiply+0x98>
 8010be0:	f104 0314 	add.w	r3, r4, #20
 8010be4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010be8:	f109 0314 	add.w	r3, r9, #20
 8010bec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010bf0:	9202      	str	r2, [sp, #8]
 8010bf2:	1b3a      	subs	r2, r7, r4
 8010bf4:	3a15      	subs	r2, #21
 8010bf6:	f022 0203 	bic.w	r2, r2, #3
 8010bfa:	3204      	adds	r2, #4
 8010bfc:	f104 0115 	add.w	r1, r4, #21
 8010c00:	428f      	cmp	r7, r1
 8010c02:	bf38      	it	cc
 8010c04:	2204      	movcc	r2, #4
 8010c06:	9201      	str	r2, [sp, #4]
 8010c08:	9a02      	ldr	r2, [sp, #8]
 8010c0a:	9303      	str	r3, [sp, #12]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d80c      	bhi.n	8010c2a <__multiply+0x9e>
 8010c10:	2e00      	cmp	r6, #0
 8010c12:	dd03      	ble.n	8010c1c <__multiply+0x90>
 8010c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d05b      	beq.n	8010cd4 <__multiply+0x148>
 8010c1c:	6106      	str	r6, [r0, #16]
 8010c1e:	b005      	add	sp, #20
 8010c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c24:	f843 2b04 	str.w	r2, [r3], #4
 8010c28:	e7d8      	b.n	8010bdc <__multiply+0x50>
 8010c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c2e:	f1ba 0f00 	cmp.w	sl, #0
 8010c32:	d024      	beq.n	8010c7e <__multiply+0xf2>
 8010c34:	f104 0e14 	add.w	lr, r4, #20
 8010c38:	46a9      	mov	r9, r5
 8010c3a:	f04f 0c00 	mov.w	ip, #0
 8010c3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010c42:	f8d9 1000 	ldr.w	r1, [r9]
 8010c46:	fa1f fb82 	uxth.w	fp, r2
 8010c4a:	b289      	uxth	r1, r1
 8010c4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010c50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010c54:	f8d9 2000 	ldr.w	r2, [r9]
 8010c58:	4461      	add	r1, ip
 8010c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c66:	b289      	uxth	r1, r1
 8010c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c6c:	4577      	cmp	r7, lr
 8010c6e:	f849 1b04 	str.w	r1, [r9], #4
 8010c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c76:	d8e2      	bhi.n	8010c3e <__multiply+0xb2>
 8010c78:	9a01      	ldr	r2, [sp, #4]
 8010c7a:	f845 c002 	str.w	ip, [r5, r2]
 8010c7e:	9a03      	ldr	r2, [sp, #12]
 8010c80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c84:	3304      	adds	r3, #4
 8010c86:	f1b9 0f00 	cmp.w	r9, #0
 8010c8a:	d021      	beq.n	8010cd0 <__multiply+0x144>
 8010c8c:	6829      	ldr	r1, [r5, #0]
 8010c8e:	f104 0c14 	add.w	ip, r4, #20
 8010c92:	46ae      	mov	lr, r5
 8010c94:	f04f 0a00 	mov.w	sl, #0
 8010c98:	f8bc b000 	ldrh.w	fp, [ip]
 8010c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010ca0:	fb09 220b 	mla	r2, r9, fp, r2
 8010ca4:	4452      	add	r2, sl
 8010ca6:	b289      	uxth	r1, r1
 8010ca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010cac:	f84e 1b04 	str.w	r1, [lr], #4
 8010cb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010cb8:	f8be 1000 	ldrh.w	r1, [lr]
 8010cbc:	fb09 110a 	mla	r1, r9, sl, r1
 8010cc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010cc4:	4567      	cmp	r7, ip
 8010cc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010cca:	d8e5      	bhi.n	8010c98 <__multiply+0x10c>
 8010ccc:	9a01      	ldr	r2, [sp, #4]
 8010cce:	50a9      	str	r1, [r5, r2]
 8010cd0:	3504      	adds	r5, #4
 8010cd2:	e799      	b.n	8010c08 <__multiply+0x7c>
 8010cd4:	3e01      	subs	r6, #1
 8010cd6:	e79b      	b.n	8010c10 <__multiply+0x84>
 8010cd8:	080124dc 	.word	0x080124dc
 8010cdc:	080124ed 	.word	0x080124ed

08010ce0 <__pow5mult>:
 8010ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce4:	4615      	mov	r5, r2
 8010ce6:	f012 0203 	ands.w	r2, r2, #3
 8010cea:	4606      	mov	r6, r0
 8010cec:	460f      	mov	r7, r1
 8010cee:	d007      	beq.n	8010d00 <__pow5mult+0x20>
 8010cf0:	4c25      	ldr	r4, [pc, #148]	; (8010d88 <__pow5mult+0xa8>)
 8010cf2:	3a01      	subs	r2, #1
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cfa:	f7ff fe9d 	bl	8010a38 <__multadd>
 8010cfe:	4607      	mov	r7, r0
 8010d00:	10ad      	asrs	r5, r5, #2
 8010d02:	d03d      	beq.n	8010d80 <__pow5mult+0xa0>
 8010d04:	69f4      	ldr	r4, [r6, #28]
 8010d06:	b97c      	cbnz	r4, 8010d28 <__pow5mult+0x48>
 8010d08:	2010      	movs	r0, #16
 8010d0a:	f7fe f89b 	bl	800ee44 <malloc>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	61f0      	str	r0, [r6, #28]
 8010d12:	b928      	cbnz	r0, 8010d20 <__pow5mult+0x40>
 8010d14:	4b1d      	ldr	r3, [pc, #116]	; (8010d8c <__pow5mult+0xac>)
 8010d16:	481e      	ldr	r0, [pc, #120]	; (8010d90 <__pow5mult+0xb0>)
 8010d18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010d1c:	f000 fbc6 	bl	80114ac <__assert_func>
 8010d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d24:	6004      	str	r4, [r0, #0]
 8010d26:	60c4      	str	r4, [r0, #12]
 8010d28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d30:	b94c      	cbnz	r4, 8010d46 <__pow5mult+0x66>
 8010d32:	f240 2171 	movw	r1, #625	; 0x271
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7ff ff12 	bl	8010b60 <__i2b>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d42:	4604      	mov	r4, r0
 8010d44:	6003      	str	r3, [r0, #0]
 8010d46:	f04f 0900 	mov.w	r9, #0
 8010d4a:	07eb      	lsls	r3, r5, #31
 8010d4c:	d50a      	bpl.n	8010d64 <__pow5mult+0x84>
 8010d4e:	4639      	mov	r1, r7
 8010d50:	4622      	mov	r2, r4
 8010d52:	4630      	mov	r0, r6
 8010d54:	f7ff ff1a 	bl	8010b8c <__multiply>
 8010d58:	4639      	mov	r1, r7
 8010d5a:	4680      	mov	r8, r0
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	f7ff fe49 	bl	80109f4 <_Bfree>
 8010d62:	4647      	mov	r7, r8
 8010d64:	106d      	asrs	r5, r5, #1
 8010d66:	d00b      	beq.n	8010d80 <__pow5mult+0xa0>
 8010d68:	6820      	ldr	r0, [r4, #0]
 8010d6a:	b938      	cbnz	r0, 8010d7c <__pow5mult+0x9c>
 8010d6c:	4622      	mov	r2, r4
 8010d6e:	4621      	mov	r1, r4
 8010d70:	4630      	mov	r0, r6
 8010d72:	f7ff ff0b 	bl	8010b8c <__multiply>
 8010d76:	6020      	str	r0, [r4, #0]
 8010d78:	f8c0 9000 	str.w	r9, [r0]
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	e7e4      	b.n	8010d4a <__pow5mult+0x6a>
 8010d80:	4638      	mov	r0, r7
 8010d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d86:	bf00      	nop
 8010d88:	08012638 	.word	0x08012638
 8010d8c:	0801246d 	.word	0x0801246d
 8010d90:	080124ed 	.word	0x080124ed

08010d94 <__lshift>:
 8010d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d98:	460c      	mov	r4, r1
 8010d9a:	6849      	ldr	r1, [r1, #4]
 8010d9c:	6923      	ldr	r3, [r4, #16]
 8010d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010da2:	68a3      	ldr	r3, [r4, #8]
 8010da4:	4607      	mov	r7, r0
 8010da6:	4691      	mov	r9, r2
 8010da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010dac:	f108 0601 	add.w	r6, r8, #1
 8010db0:	42b3      	cmp	r3, r6
 8010db2:	db0b      	blt.n	8010dcc <__lshift+0x38>
 8010db4:	4638      	mov	r0, r7
 8010db6:	f7ff fddd 	bl	8010974 <_Balloc>
 8010dba:	4605      	mov	r5, r0
 8010dbc:	b948      	cbnz	r0, 8010dd2 <__lshift+0x3e>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	4b28      	ldr	r3, [pc, #160]	; (8010e64 <__lshift+0xd0>)
 8010dc2:	4829      	ldr	r0, [pc, #164]	; (8010e68 <__lshift+0xd4>)
 8010dc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010dc8:	f000 fb70 	bl	80114ac <__assert_func>
 8010dcc:	3101      	adds	r1, #1
 8010dce:	005b      	lsls	r3, r3, #1
 8010dd0:	e7ee      	b.n	8010db0 <__lshift+0x1c>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f100 0114 	add.w	r1, r0, #20
 8010dd8:	f100 0210 	add.w	r2, r0, #16
 8010ddc:	4618      	mov	r0, r3
 8010dde:	4553      	cmp	r3, sl
 8010de0:	db33      	blt.n	8010e4a <__lshift+0xb6>
 8010de2:	6920      	ldr	r0, [r4, #16]
 8010de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010de8:	f104 0314 	add.w	r3, r4, #20
 8010dec:	f019 091f 	ands.w	r9, r9, #31
 8010df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010df8:	d02b      	beq.n	8010e52 <__lshift+0xbe>
 8010dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8010dfe:	468a      	mov	sl, r1
 8010e00:	2200      	movs	r2, #0
 8010e02:	6818      	ldr	r0, [r3, #0]
 8010e04:	fa00 f009 	lsl.w	r0, r0, r9
 8010e08:	4310      	orrs	r0, r2
 8010e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8010e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e12:	459c      	cmp	ip, r3
 8010e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e18:	d8f3      	bhi.n	8010e02 <__lshift+0x6e>
 8010e1a:	ebac 0304 	sub.w	r3, ip, r4
 8010e1e:	3b15      	subs	r3, #21
 8010e20:	f023 0303 	bic.w	r3, r3, #3
 8010e24:	3304      	adds	r3, #4
 8010e26:	f104 0015 	add.w	r0, r4, #21
 8010e2a:	4584      	cmp	ip, r0
 8010e2c:	bf38      	it	cc
 8010e2e:	2304      	movcc	r3, #4
 8010e30:	50ca      	str	r2, [r1, r3]
 8010e32:	b10a      	cbz	r2, 8010e38 <__lshift+0xa4>
 8010e34:	f108 0602 	add.w	r6, r8, #2
 8010e38:	3e01      	subs	r6, #1
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	612e      	str	r6, [r5, #16]
 8010e3e:	4621      	mov	r1, r4
 8010e40:	f7ff fdd8 	bl	80109f4 <_Bfree>
 8010e44:	4628      	mov	r0, r5
 8010e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e4e:	3301      	adds	r3, #1
 8010e50:	e7c5      	b.n	8010dde <__lshift+0x4a>
 8010e52:	3904      	subs	r1, #4
 8010e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e58:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e5c:	459c      	cmp	ip, r3
 8010e5e:	d8f9      	bhi.n	8010e54 <__lshift+0xc0>
 8010e60:	e7ea      	b.n	8010e38 <__lshift+0xa4>
 8010e62:	bf00      	nop
 8010e64:	080124dc 	.word	0x080124dc
 8010e68:	080124ed 	.word	0x080124ed

08010e6c <__mcmp>:
 8010e6c:	b530      	push	{r4, r5, lr}
 8010e6e:	6902      	ldr	r2, [r0, #16]
 8010e70:	690c      	ldr	r4, [r1, #16]
 8010e72:	1b12      	subs	r2, r2, r4
 8010e74:	d10e      	bne.n	8010e94 <__mcmp+0x28>
 8010e76:	f100 0314 	add.w	r3, r0, #20
 8010e7a:	3114      	adds	r1, #20
 8010e7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e8c:	42a5      	cmp	r5, r4
 8010e8e:	d003      	beq.n	8010e98 <__mcmp+0x2c>
 8010e90:	d305      	bcc.n	8010e9e <__mcmp+0x32>
 8010e92:	2201      	movs	r2, #1
 8010e94:	4610      	mov	r0, r2
 8010e96:	bd30      	pop	{r4, r5, pc}
 8010e98:	4283      	cmp	r3, r0
 8010e9a:	d3f3      	bcc.n	8010e84 <__mcmp+0x18>
 8010e9c:	e7fa      	b.n	8010e94 <__mcmp+0x28>
 8010e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea2:	e7f7      	b.n	8010e94 <__mcmp+0x28>

08010ea4 <__mdiff>:
 8010ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea8:	460c      	mov	r4, r1
 8010eaa:	4606      	mov	r6, r0
 8010eac:	4611      	mov	r1, r2
 8010eae:	4620      	mov	r0, r4
 8010eb0:	4690      	mov	r8, r2
 8010eb2:	f7ff ffdb 	bl	8010e6c <__mcmp>
 8010eb6:	1e05      	subs	r5, r0, #0
 8010eb8:	d110      	bne.n	8010edc <__mdiff+0x38>
 8010eba:	4629      	mov	r1, r5
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	f7ff fd59 	bl	8010974 <_Balloc>
 8010ec2:	b930      	cbnz	r0, 8010ed2 <__mdiff+0x2e>
 8010ec4:	4b3a      	ldr	r3, [pc, #232]	; (8010fb0 <__mdiff+0x10c>)
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	f240 2137 	movw	r1, #567	; 0x237
 8010ecc:	4839      	ldr	r0, [pc, #228]	; (8010fb4 <__mdiff+0x110>)
 8010ece:	f000 faed 	bl	80114ac <__assert_func>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010edc:	bfa4      	itt	ge
 8010ede:	4643      	movge	r3, r8
 8010ee0:	46a0      	movge	r8, r4
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ee8:	bfa6      	itte	ge
 8010eea:	461c      	movge	r4, r3
 8010eec:	2500      	movge	r5, #0
 8010eee:	2501      	movlt	r5, #1
 8010ef0:	f7ff fd40 	bl	8010974 <_Balloc>
 8010ef4:	b920      	cbnz	r0, 8010f00 <__mdiff+0x5c>
 8010ef6:	4b2e      	ldr	r3, [pc, #184]	; (8010fb0 <__mdiff+0x10c>)
 8010ef8:	4602      	mov	r2, r0
 8010efa:	f240 2145 	movw	r1, #581	; 0x245
 8010efe:	e7e5      	b.n	8010ecc <__mdiff+0x28>
 8010f00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010f04:	6926      	ldr	r6, [r4, #16]
 8010f06:	60c5      	str	r5, [r0, #12]
 8010f08:	f104 0914 	add.w	r9, r4, #20
 8010f0c:	f108 0514 	add.w	r5, r8, #20
 8010f10:	f100 0e14 	add.w	lr, r0, #20
 8010f14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010f18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010f1c:	f108 0210 	add.w	r2, r8, #16
 8010f20:	46f2      	mov	sl, lr
 8010f22:	2100      	movs	r1, #0
 8010f24:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f2c:	fa11 f88b 	uxtah	r8, r1, fp
 8010f30:	b299      	uxth	r1, r3
 8010f32:	0c1b      	lsrs	r3, r3, #16
 8010f34:	eba8 0801 	sub.w	r8, r8, r1
 8010f38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010f40:	fa1f f888 	uxth.w	r8, r8
 8010f44:	1419      	asrs	r1, r3, #16
 8010f46:	454e      	cmp	r6, r9
 8010f48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f4c:	f84a 3b04 	str.w	r3, [sl], #4
 8010f50:	d8e8      	bhi.n	8010f24 <__mdiff+0x80>
 8010f52:	1b33      	subs	r3, r6, r4
 8010f54:	3b15      	subs	r3, #21
 8010f56:	f023 0303 	bic.w	r3, r3, #3
 8010f5a:	3304      	adds	r3, #4
 8010f5c:	3415      	adds	r4, #21
 8010f5e:	42a6      	cmp	r6, r4
 8010f60:	bf38      	it	cc
 8010f62:	2304      	movcc	r3, #4
 8010f64:	441d      	add	r5, r3
 8010f66:	4473      	add	r3, lr
 8010f68:	469e      	mov	lr, r3
 8010f6a:	462e      	mov	r6, r5
 8010f6c:	4566      	cmp	r6, ip
 8010f6e:	d30e      	bcc.n	8010f8e <__mdiff+0xea>
 8010f70:	f10c 0203 	add.w	r2, ip, #3
 8010f74:	1b52      	subs	r2, r2, r5
 8010f76:	f022 0203 	bic.w	r2, r2, #3
 8010f7a:	3d03      	subs	r5, #3
 8010f7c:	45ac      	cmp	ip, r5
 8010f7e:	bf38      	it	cc
 8010f80:	2200      	movcc	r2, #0
 8010f82:	4413      	add	r3, r2
 8010f84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010f88:	b17a      	cbz	r2, 8010faa <__mdiff+0x106>
 8010f8a:	6107      	str	r7, [r0, #16]
 8010f8c:	e7a4      	b.n	8010ed8 <__mdiff+0x34>
 8010f8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f92:	fa11 f288 	uxtah	r2, r1, r8
 8010f96:	1414      	asrs	r4, r2, #16
 8010f98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f9c:	b292      	uxth	r2, r2
 8010f9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010fa2:	f84e 2b04 	str.w	r2, [lr], #4
 8010fa6:	1421      	asrs	r1, r4, #16
 8010fa8:	e7e0      	b.n	8010f6c <__mdiff+0xc8>
 8010faa:	3f01      	subs	r7, #1
 8010fac:	e7ea      	b.n	8010f84 <__mdiff+0xe0>
 8010fae:	bf00      	nop
 8010fb0:	080124dc 	.word	0x080124dc
 8010fb4:	080124ed 	.word	0x080124ed

08010fb8 <__d2b>:
 8010fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fbc:	460f      	mov	r7, r1
 8010fbe:	2101      	movs	r1, #1
 8010fc0:	ec59 8b10 	vmov	r8, r9, d0
 8010fc4:	4616      	mov	r6, r2
 8010fc6:	f7ff fcd5 	bl	8010974 <_Balloc>
 8010fca:	4604      	mov	r4, r0
 8010fcc:	b930      	cbnz	r0, 8010fdc <__d2b+0x24>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	4b24      	ldr	r3, [pc, #144]	; (8011064 <__d2b+0xac>)
 8010fd2:	4825      	ldr	r0, [pc, #148]	; (8011068 <__d2b+0xb0>)
 8010fd4:	f240 310f 	movw	r1, #783	; 0x30f
 8010fd8:	f000 fa68 	bl	80114ac <__assert_func>
 8010fdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010fe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fe4:	bb2d      	cbnz	r5, 8011032 <__d2b+0x7a>
 8010fe6:	9301      	str	r3, [sp, #4]
 8010fe8:	f1b8 0300 	subs.w	r3, r8, #0
 8010fec:	d026      	beq.n	801103c <__d2b+0x84>
 8010fee:	4668      	mov	r0, sp
 8010ff0:	9300      	str	r3, [sp, #0]
 8010ff2:	f7ff fd87 	bl	8010b04 <__lo0bits>
 8010ff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010ffa:	b1e8      	cbz	r0, 8011038 <__d2b+0x80>
 8010ffc:	f1c0 0320 	rsb	r3, r0, #32
 8011000:	fa02 f303 	lsl.w	r3, r2, r3
 8011004:	430b      	orrs	r3, r1
 8011006:	40c2      	lsrs	r2, r0
 8011008:	6163      	str	r3, [r4, #20]
 801100a:	9201      	str	r2, [sp, #4]
 801100c:	9b01      	ldr	r3, [sp, #4]
 801100e:	61a3      	str	r3, [r4, #24]
 8011010:	2b00      	cmp	r3, #0
 8011012:	bf14      	ite	ne
 8011014:	2202      	movne	r2, #2
 8011016:	2201      	moveq	r2, #1
 8011018:	6122      	str	r2, [r4, #16]
 801101a:	b1bd      	cbz	r5, 801104c <__d2b+0x94>
 801101c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011020:	4405      	add	r5, r0
 8011022:	603d      	str	r5, [r7, #0]
 8011024:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011028:	6030      	str	r0, [r6, #0]
 801102a:	4620      	mov	r0, r4
 801102c:	b003      	add	sp, #12
 801102e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011036:	e7d6      	b.n	8010fe6 <__d2b+0x2e>
 8011038:	6161      	str	r1, [r4, #20]
 801103a:	e7e7      	b.n	801100c <__d2b+0x54>
 801103c:	a801      	add	r0, sp, #4
 801103e:	f7ff fd61 	bl	8010b04 <__lo0bits>
 8011042:	9b01      	ldr	r3, [sp, #4]
 8011044:	6163      	str	r3, [r4, #20]
 8011046:	3020      	adds	r0, #32
 8011048:	2201      	movs	r2, #1
 801104a:	e7e5      	b.n	8011018 <__d2b+0x60>
 801104c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011054:	6038      	str	r0, [r7, #0]
 8011056:	6918      	ldr	r0, [r3, #16]
 8011058:	f7ff fd34 	bl	8010ac4 <__hi0bits>
 801105c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011060:	e7e2      	b.n	8011028 <__d2b+0x70>
 8011062:	bf00      	nop
 8011064:	080124dc 	.word	0x080124dc
 8011068:	080124ed 	.word	0x080124ed

0801106c <__ssputs_r>:
 801106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011070:	688e      	ldr	r6, [r1, #8]
 8011072:	461f      	mov	r7, r3
 8011074:	42be      	cmp	r6, r7
 8011076:	680b      	ldr	r3, [r1, #0]
 8011078:	4682      	mov	sl, r0
 801107a:	460c      	mov	r4, r1
 801107c:	4690      	mov	r8, r2
 801107e:	d82c      	bhi.n	80110da <__ssputs_r+0x6e>
 8011080:	898a      	ldrh	r2, [r1, #12]
 8011082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011086:	d026      	beq.n	80110d6 <__ssputs_r+0x6a>
 8011088:	6965      	ldr	r5, [r4, #20]
 801108a:	6909      	ldr	r1, [r1, #16]
 801108c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011090:	eba3 0901 	sub.w	r9, r3, r1
 8011094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011098:	1c7b      	adds	r3, r7, #1
 801109a:	444b      	add	r3, r9
 801109c:	106d      	asrs	r5, r5, #1
 801109e:	429d      	cmp	r5, r3
 80110a0:	bf38      	it	cc
 80110a2:	461d      	movcc	r5, r3
 80110a4:	0553      	lsls	r3, r2, #21
 80110a6:	d527      	bpl.n	80110f8 <__ssputs_r+0x8c>
 80110a8:	4629      	mov	r1, r5
 80110aa:	f7fd fefb 	bl	800eea4 <_malloc_r>
 80110ae:	4606      	mov	r6, r0
 80110b0:	b360      	cbz	r0, 801110c <__ssputs_r+0xa0>
 80110b2:	6921      	ldr	r1, [r4, #16]
 80110b4:	464a      	mov	r2, r9
 80110b6:	f7fe fd89 	bl	800fbcc <memcpy>
 80110ba:	89a3      	ldrh	r3, [r4, #12]
 80110bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80110c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c4:	81a3      	strh	r3, [r4, #12]
 80110c6:	6126      	str	r6, [r4, #16]
 80110c8:	6165      	str	r5, [r4, #20]
 80110ca:	444e      	add	r6, r9
 80110cc:	eba5 0509 	sub.w	r5, r5, r9
 80110d0:	6026      	str	r6, [r4, #0]
 80110d2:	60a5      	str	r5, [r4, #8]
 80110d4:	463e      	mov	r6, r7
 80110d6:	42be      	cmp	r6, r7
 80110d8:	d900      	bls.n	80110dc <__ssputs_r+0x70>
 80110da:	463e      	mov	r6, r7
 80110dc:	6820      	ldr	r0, [r4, #0]
 80110de:	4632      	mov	r2, r6
 80110e0:	4641      	mov	r1, r8
 80110e2:	f000 f9c9 	bl	8011478 <memmove>
 80110e6:	68a3      	ldr	r3, [r4, #8]
 80110e8:	1b9b      	subs	r3, r3, r6
 80110ea:	60a3      	str	r3, [r4, #8]
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	4433      	add	r3, r6
 80110f0:	6023      	str	r3, [r4, #0]
 80110f2:	2000      	movs	r0, #0
 80110f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f8:	462a      	mov	r2, r5
 80110fa:	f000 fa1d 	bl	8011538 <_realloc_r>
 80110fe:	4606      	mov	r6, r0
 8011100:	2800      	cmp	r0, #0
 8011102:	d1e0      	bne.n	80110c6 <__ssputs_r+0x5a>
 8011104:	6921      	ldr	r1, [r4, #16]
 8011106:	4650      	mov	r0, sl
 8011108:	f7ff fbe8 	bl	80108dc <_free_r>
 801110c:	230c      	movs	r3, #12
 801110e:	f8ca 3000 	str.w	r3, [sl]
 8011112:	89a3      	ldrh	r3, [r4, #12]
 8011114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011118:	81a3      	strh	r3, [r4, #12]
 801111a:	f04f 30ff 	mov.w	r0, #4294967295
 801111e:	e7e9      	b.n	80110f4 <__ssputs_r+0x88>

08011120 <_svfiprintf_r>:
 8011120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011124:	4698      	mov	r8, r3
 8011126:	898b      	ldrh	r3, [r1, #12]
 8011128:	061b      	lsls	r3, r3, #24
 801112a:	b09d      	sub	sp, #116	; 0x74
 801112c:	4607      	mov	r7, r0
 801112e:	460d      	mov	r5, r1
 8011130:	4614      	mov	r4, r2
 8011132:	d50e      	bpl.n	8011152 <_svfiprintf_r+0x32>
 8011134:	690b      	ldr	r3, [r1, #16]
 8011136:	b963      	cbnz	r3, 8011152 <_svfiprintf_r+0x32>
 8011138:	2140      	movs	r1, #64	; 0x40
 801113a:	f7fd feb3 	bl	800eea4 <_malloc_r>
 801113e:	6028      	str	r0, [r5, #0]
 8011140:	6128      	str	r0, [r5, #16]
 8011142:	b920      	cbnz	r0, 801114e <_svfiprintf_r+0x2e>
 8011144:	230c      	movs	r3, #12
 8011146:	603b      	str	r3, [r7, #0]
 8011148:	f04f 30ff 	mov.w	r0, #4294967295
 801114c:	e0d0      	b.n	80112f0 <_svfiprintf_r+0x1d0>
 801114e:	2340      	movs	r3, #64	; 0x40
 8011150:	616b      	str	r3, [r5, #20]
 8011152:	2300      	movs	r3, #0
 8011154:	9309      	str	r3, [sp, #36]	; 0x24
 8011156:	2320      	movs	r3, #32
 8011158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801115c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011160:	2330      	movs	r3, #48	; 0x30
 8011162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011308 <_svfiprintf_r+0x1e8>
 8011166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801116a:	f04f 0901 	mov.w	r9, #1
 801116e:	4623      	mov	r3, r4
 8011170:	469a      	mov	sl, r3
 8011172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011176:	b10a      	cbz	r2, 801117c <_svfiprintf_r+0x5c>
 8011178:	2a25      	cmp	r2, #37	; 0x25
 801117a:	d1f9      	bne.n	8011170 <_svfiprintf_r+0x50>
 801117c:	ebba 0b04 	subs.w	fp, sl, r4
 8011180:	d00b      	beq.n	801119a <_svfiprintf_r+0x7a>
 8011182:	465b      	mov	r3, fp
 8011184:	4622      	mov	r2, r4
 8011186:	4629      	mov	r1, r5
 8011188:	4638      	mov	r0, r7
 801118a:	f7ff ff6f 	bl	801106c <__ssputs_r>
 801118e:	3001      	adds	r0, #1
 8011190:	f000 80a9 	beq.w	80112e6 <_svfiprintf_r+0x1c6>
 8011194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011196:	445a      	add	r2, fp
 8011198:	9209      	str	r2, [sp, #36]	; 0x24
 801119a:	f89a 3000 	ldrb.w	r3, [sl]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f000 80a1 	beq.w	80112e6 <_svfiprintf_r+0x1c6>
 80111a4:	2300      	movs	r3, #0
 80111a6:	f04f 32ff 	mov.w	r2, #4294967295
 80111aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111ae:	f10a 0a01 	add.w	sl, sl, #1
 80111b2:	9304      	str	r3, [sp, #16]
 80111b4:	9307      	str	r3, [sp, #28]
 80111b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111ba:	931a      	str	r3, [sp, #104]	; 0x68
 80111bc:	4654      	mov	r4, sl
 80111be:	2205      	movs	r2, #5
 80111c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111c4:	4850      	ldr	r0, [pc, #320]	; (8011308 <_svfiprintf_r+0x1e8>)
 80111c6:	f7ef f803 	bl	80001d0 <memchr>
 80111ca:	9a04      	ldr	r2, [sp, #16]
 80111cc:	b9d8      	cbnz	r0, 8011206 <_svfiprintf_r+0xe6>
 80111ce:	06d0      	lsls	r0, r2, #27
 80111d0:	bf44      	itt	mi
 80111d2:	2320      	movmi	r3, #32
 80111d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111d8:	0711      	lsls	r1, r2, #28
 80111da:	bf44      	itt	mi
 80111dc:	232b      	movmi	r3, #43	; 0x2b
 80111de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111e2:	f89a 3000 	ldrb.w	r3, [sl]
 80111e6:	2b2a      	cmp	r3, #42	; 0x2a
 80111e8:	d015      	beq.n	8011216 <_svfiprintf_r+0xf6>
 80111ea:	9a07      	ldr	r2, [sp, #28]
 80111ec:	4654      	mov	r4, sl
 80111ee:	2000      	movs	r0, #0
 80111f0:	f04f 0c0a 	mov.w	ip, #10
 80111f4:	4621      	mov	r1, r4
 80111f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111fa:	3b30      	subs	r3, #48	; 0x30
 80111fc:	2b09      	cmp	r3, #9
 80111fe:	d94d      	bls.n	801129c <_svfiprintf_r+0x17c>
 8011200:	b1b0      	cbz	r0, 8011230 <_svfiprintf_r+0x110>
 8011202:	9207      	str	r2, [sp, #28]
 8011204:	e014      	b.n	8011230 <_svfiprintf_r+0x110>
 8011206:	eba0 0308 	sub.w	r3, r0, r8
 801120a:	fa09 f303 	lsl.w	r3, r9, r3
 801120e:	4313      	orrs	r3, r2
 8011210:	9304      	str	r3, [sp, #16]
 8011212:	46a2      	mov	sl, r4
 8011214:	e7d2      	b.n	80111bc <_svfiprintf_r+0x9c>
 8011216:	9b03      	ldr	r3, [sp, #12]
 8011218:	1d19      	adds	r1, r3, #4
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	9103      	str	r1, [sp, #12]
 801121e:	2b00      	cmp	r3, #0
 8011220:	bfbb      	ittet	lt
 8011222:	425b      	neglt	r3, r3
 8011224:	f042 0202 	orrlt.w	r2, r2, #2
 8011228:	9307      	strge	r3, [sp, #28]
 801122a:	9307      	strlt	r3, [sp, #28]
 801122c:	bfb8      	it	lt
 801122e:	9204      	strlt	r2, [sp, #16]
 8011230:	7823      	ldrb	r3, [r4, #0]
 8011232:	2b2e      	cmp	r3, #46	; 0x2e
 8011234:	d10c      	bne.n	8011250 <_svfiprintf_r+0x130>
 8011236:	7863      	ldrb	r3, [r4, #1]
 8011238:	2b2a      	cmp	r3, #42	; 0x2a
 801123a:	d134      	bne.n	80112a6 <_svfiprintf_r+0x186>
 801123c:	9b03      	ldr	r3, [sp, #12]
 801123e:	1d1a      	adds	r2, r3, #4
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	9203      	str	r2, [sp, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	bfb8      	it	lt
 8011248:	f04f 33ff 	movlt.w	r3, #4294967295
 801124c:	3402      	adds	r4, #2
 801124e:	9305      	str	r3, [sp, #20]
 8011250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011318 <_svfiprintf_r+0x1f8>
 8011254:	7821      	ldrb	r1, [r4, #0]
 8011256:	2203      	movs	r2, #3
 8011258:	4650      	mov	r0, sl
 801125a:	f7ee ffb9 	bl	80001d0 <memchr>
 801125e:	b138      	cbz	r0, 8011270 <_svfiprintf_r+0x150>
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	eba0 000a 	sub.w	r0, r0, sl
 8011266:	2240      	movs	r2, #64	; 0x40
 8011268:	4082      	lsls	r2, r0
 801126a:	4313      	orrs	r3, r2
 801126c:	3401      	adds	r4, #1
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011274:	4825      	ldr	r0, [pc, #148]	; (801130c <_svfiprintf_r+0x1ec>)
 8011276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801127a:	2206      	movs	r2, #6
 801127c:	f7ee ffa8 	bl	80001d0 <memchr>
 8011280:	2800      	cmp	r0, #0
 8011282:	d038      	beq.n	80112f6 <_svfiprintf_r+0x1d6>
 8011284:	4b22      	ldr	r3, [pc, #136]	; (8011310 <_svfiprintf_r+0x1f0>)
 8011286:	bb1b      	cbnz	r3, 80112d0 <_svfiprintf_r+0x1b0>
 8011288:	9b03      	ldr	r3, [sp, #12]
 801128a:	3307      	adds	r3, #7
 801128c:	f023 0307 	bic.w	r3, r3, #7
 8011290:	3308      	adds	r3, #8
 8011292:	9303      	str	r3, [sp, #12]
 8011294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011296:	4433      	add	r3, r6
 8011298:	9309      	str	r3, [sp, #36]	; 0x24
 801129a:	e768      	b.n	801116e <_svfiprintf_r+0x4e>
 801129c:	fb0c 3202 	mla	r2, ip, r2, r3
 80112a0:	460c      	mov	r4, r1
 80112a2:	2001      	movs	r0, #1
 80112a4:	e7a6      	b.n	80111f4 <_svfiprintf_r+0xd4>
 80112a6:	2300      	movs	r3, #0
 80112a8:	3401      	adds	r4, #1
 80112aa:	9305      	str	r3, [sp, #20]
 80112ac:	4619      	mov	r1, r3
 80112ae:	f04f 0c0a 	mov.w	ip, #10
 80112b2:	4620      	mov	r0, r4
 80112b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112b8:	3a30      	subs	r2, #48	; 0x30
 80112ba:	2a09      	cmp	r2, #9
 80112bc:	d903      	bls.n	80112c6 <_svfiprintf_r+0x1a6>
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0c6      	beq.n	8011250 <_svfiprintf_r+0x130>
 80112c2:	9105      	str	r1, [sp, #20]
 80112c4:	e7c4      	b.n	8011250 <_svfiprintf_r+0x130>
 80112c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80112ca:	4604      	mov	r4, r0
 80112cc:	2301      	movs	r3, #1
 80112ce:	e7f0      	b.n	80112b2 <_svfiprintf_r+0x192>
 80112d0:	ab03      	add	r3, sp, #12
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	462a      	mov	r2, r5
 80112d6:	4b0f      	ldr	r3, [pc, #60]	; (8011314 <_svfiprintf_r+0x1f4>)
 80112d8:	a904      	add	r1, sp, #16
 80112da:	4638      	mov	r0, r7
 80112dc:	f7fd ff0e 	bl	800f0fc <_printf_float>
 80112e0:	1c42      	adds	r2, r0, #1
 80112e2:	4606      	mov	r6, r0
 80112e4:	d1d6      	bne.n	8011294 <_svfiprintf_r+0x174>
 80112e6:	89ab      	ldrh	r3, [r5, #12]
 80112e8:	065b      	lsls	r3, r3, #25
 80112ea:	f53f af2d 	bmi.w	8011148 <_svfiprintf_r+0x28>
 80112ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112f0:	b01d      	add	sp, #116	; 0x74
 80112f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f6:	ab03      	add	r3, sp, #12
 80112f8:	9300      	str	r3, [sp, #0]
 80112fa:	462a      	mov	r2, r5
 80112fc:	4b05      	ldr	r3, [pc, #20]	; (8011314 <_svfiprintf_r+0x1f4>)
 80112fe:	a904      	add	r1, sp, #16
 8011300:	4638      	mov	r0, r7
 8011302:	f7fe f99f 	bl	800f644 <_printf_i>
 8011306:	e7eb      	b.n	80112e0 <_svfiprintf_r+0x1c0>
 8011308:	08012644 	.word	0x08012644
 801130c:	0801264e 	.word	0x0801264e
 8011310:	0800f0fd 	.word	0x0800f0fd
 8011314:	0801106d 	.word	0x0801106d
 8011318:	0801264a 	.word	0x0801264a

0801131c <__sflush_r>:
 801131c:	898a      	ldrh	r2, [r1, #12]
 801131e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011322:	4605      	mov	r5, r0
 8011324:	0710      	lsls	r0, r2, #28
 8011326:	460c      	mov	r4, r1
 8011328:	d458      	bmi.n	80113dc <__sflush_r+0xc0>
 801132a:	684b      	ldr	r3, [r1, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	dc05      	bgt.n	801133c <__sflush_r+0x20>
 8011330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011332:	2b00      	cmp	r3, #0
 8011334:	dc02      	bgt.n	801133c <__sflush_r+0x20>
 8011336:	2000      	movs	r0, #0
 8011338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801133c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801133e:	2e00      	cmp	r6, #0
 8011340:	d0f9      	beq.n	8011336 <__sflush_r+0x1a>
 8011342:	2300      	movs	r3, #0
 8011344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011348:	682f      	ldr	r7, [r5, #0]
 801134a:	6a21      	ldr	r1, [r4, #32]
 801134c:	602b      	str	r3, [r5, #0]
 801134e:	d032      	beq.n	80113b6 <__sflush_r+0x9a>
 8011350:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011352:	89a3      	ldrh	r3, [r4, #12]
 8011354:	075a      	lsls	r2, r3, #29
 8011356:	d505      	bpl.n	8011364 <__sflush_r+0x48>
 8011358:	6863      	ldr	r3, [r4, #4]
 801135a:	1ac0      	subs	r0, r0, r3
 801135c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801135e:	b10b      	cbz	r3, 8011364 <__sflush_r+0x48>
 8011360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011362:	1ac0      	subs	r0, r0, r3
 8011364:	2300      	movs	r3, #0
 8011366:	4602      	mov	r2, r0
 8011368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801136a:	6a21      	ldr	r1, [r4, #32]
 801136c:	4628      	mov	r0, r5
 801136e:	47b0      	blx	r6
 8011370:	1c43      	adds	r3, r0, #1
 8011372:	89a3      	ldrh	r3, [r4, #12]
 8011374:	d106      	bne.n	8011384 <__sflush_r+0x68>
 8011376:	6829      	ldr	r1, [r5, #0]
 8011378:	291d      	cmp	r1, #29
 801137a:	d82b      	bhi.n	80113d4 <__sflush_r+0xb8>
 801137c:	4a29      	ldr	r2, [pc, #164]	; (8011424 <__sflush_r+0x108>)
 801137e:	410a      	asrs	r2, r1
 8011380:	07d6      	lsls	r6, r2, #31
 8011382:	d427      	bmi.n	80113d4 <__sflush_r+0xb8>
 8011384:	2200      	movs	r2, #0
 8011386:	6062      	str	r2, [r4, #4]
 8011388:	04d9      	lsls	r1, r3, #19
 801138a:	6922      	ldr	r2, [r4, #16]
 801138c:	6022      	str	r2, [r4, #0]
 801138e:	d504      	bpl.n	801139a <__sflush_r+0x7e>
 8011390:	1c42      	adds	r2, r0, #1
 8011392:	d101      	bne.n	8011398 <__sflush_r+0x7c>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	b903      	cbnz	r3, 801139a <__sflush_r+0x7e>
 8011398:	6560      	str	r0, [r4, #84]	; 0x54
 801139a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801139c:	602f      	str	r7, [r5, #0]
 801139e:	2900      	cmp	r1, #0
 80113a0:	d0c9      	beq.n	8011336 <__sflush_r+0x1a>
 80113a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113a6:	4299      	cmp	r1, r3
 80113a8:	d002      	beq.n	80113b0 <__sflush_r+0x94>
 80113aa:	4628      	mov	r0, r5
 80113ac:	f7ff fa96 	bl	80108dc <_free_r>
 80113b0:	2000      	movs	r0, #0
 80113b2:	6360      	str	r0, [r4, #52]	; 0x34
 80113b4:	e7c0      	b.n	8011338 <__sflush_r+0x1c>
 80113b6:	2301      	movs	r3, #1
 80113b8:	4628      	mov	r0, r5
 80113ba:	47b0      	blx	r6
 80113bc:	1c41      	adds	r1, r0, #1
 80113be:	d1c8      	bne.n	8011352 <__sflush_r+0x36>
 80113c0:	682b      	ldr	r3, [r5, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0c5      	beq.n	8011352 <__sflush_r+0x36>
 80113c6:	2b1d      	cmp	r3, #29
 80113c8:	d001      	beq.n	80113ce <__sflush_r+0xb2>
 80113ca:	2b16      	cmp	r3, #22
 80113cc:	d101      	bne.n	80113d2 <__sflush_r+0xb6>
 80113ce:	602f      	str	r7, [r5, #0]
 80113d0:	e7b1      	b.n	8011336 <__sflush_r+0x1a>
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113d8:	81a3      	strh	r3, [r4, #12]
 80113da:	e7ad      	b.n	8011338 <__sflush_r+0x1c>
 80113dc:	690f      	ldr	r7, [r1, #16]
 80113de:	2f00      	cmp	r7, #0
 80113e0:	d0a9      	beq.n	8011336 <__sflush_r+0x1a>
 80113e2:	0793      	lsls	r3, r2, #30
 80113e4:	680e      	ldr	r6, [r1, #0]
 80113e6:	bf08      	it	eq
 80113e8:	694b      	ldreq	r3, [r1, #20]
 80113ea:	600f      	str	r7, [r1, #0]
 80113ec:	bf18      	it	ne
 80113ee:	2300      	movne	r3, #0
 80113f0:	eba6 0807 	sub.w	r8, r6, r7
 80113f4:	608b      	str	r3, [r1, #8]
 80113f6:	f1b8 0f00 	cmp.w	r8, #0
 80113fa:	dd9c      	ble.n	8011336 <__sflush_r+0x1a>
 80113fc:	6a21      	ldr	r1, [r4, #32]
 80113fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011400:	4643      	mov	r3, r8
 8011402:	463a      	mov	r2, r7
 8011404:	4628      	mov	r0, r5
 8011406:	47b0      	blx	r6
 8011408:	2800      	cmp	r0, #0
 801140a:	dc06      	bgt.n	801141a <__sflush_r+0xfe>
 801140c:	89a3      	ldrh	r3, [r4, #12]
 801140e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011412:	81a3      	strh	r3, [r4, #12]
 8011414:	f04f 30ff 	mov.w	r0, #4294967295
 8011418:	e78e      	b.n	8011338 <__sflush_r+0x1c>
 801141a:	4407      	add	r7, r0
 801141c:	eba8 0800 	sub.w	r8, r8, r0
 8011420:	e7e9      	b.n	80113f6 <__sflush_r+0xda>
 8011422:	bf00      	nop
 8011424:	dfbffffe 	.word	0xdfbffffe

08011428 <_fflush_r>:
 8011428:	b538      	push	{r3, r4, r5, lr}
 801142a:	690b      	ldr	r3, [r1, #16]
 801142c:	4605      	mov	r5, r0
 801142e:	460c      	mov	r4, r1
 8011430:	b913      	cbnz	r3, 8011438 <_fflush_r+0x10>
 8011432:	2500      	movs	r5, #0
 8011434:	4628      	mov	r0, r5
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	b118      	cbz	r0, 8011442 <_fflush_r+0x1a>
 801143a:	6a03      	ldr	r3, [r0, #32]
 801143c:	b90b      	cbnz	r3, 8011442 <_fflush_r+0x1a>
 801143e:	f7fe fa9d 	bl	800f97c <__sinit>
 8011442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d0f3      	beq.n	8011432 <_fflush_r+0xa>
 801144a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801144c:	07d0      	lsls	r0, r2, #31
 801144e:	d404      	bmi.n	801145a <_fflush_r+0x32>
 8011450:	0599      	lsls	r1, r3, #22
 8011452:	d402      	bmi.n	801145a <_fflush_r+0x32>
 8011454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011456:	f7fe fbb7 	bl	800fbc8 <__retarget_lock_acquire_recursive>
 801145a:	4628      	mov	r0, r5
 801145c:	4621      	mov	r1, r4
 801145e:	f7ff ff5d 	bl	801131c <__sflush_r>
 8011462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011464:	07da      	lsls	r2, r3, #31
 8011466:	4605      	mov	r5, r0
 8011468:	d4e4      	bmi.n	8011434 <_fflush_r+0xc>
 801146a:	89a3      	ldrh	r3, [r4, #12]
 801146c:	059b      	lsls	r3, r3, #22
 801146e:	d4e1      	bmi.n	8011434 <_fflush_r+0xc>
 8011470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011472:	f7fe fbaa 	bl	800fbca <__retarget_lock_release_recursive>
 8011476:	e7dd      	b.n	8011434 <_fflush_r+0xc>

08011478 <memmove>:
 8011478:	4288      	cmp	r0, r1
 801147a:	b510      	push	{r4, lr}
 801147c:	eb01 0402 	add.w	r4, r1, r2
 8011480:	d902      	bls.n	8011488 <memmove+0x10>
 8011482:	4284      	cmp	r4, r0
 8011484:	4623      	mov	r3, r4
 8011486:	d807      	bhi.n	8011498 <memmove+0x20>
 8011488:	1e43      	subs	r3, r0, #1
 801148a:	42a1      	cmp	r1, r4
 801148c:	d008      	beq.n	80114a0 <memmove+0x28>
 801148e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011496:	e7f8      	b.n	801148a <memmove+0x12>
 8011498:	4402      	add	r2, r0
 801149a:	4601      	mov	r1, r0
 801149c:	428a      	cmp	r2, r1
 801149e:	d100      	bne.n	80114a2 <memmove+0x2a>
 80114a0:	bd10      	pop	{r4, pc}
 80114a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114aa:	e7f7      	b.n	801149c <memmove+0x24>

080114ac <__assert_func>:
 80114ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114ae:	4614      	mov	r4, r2
 80114b0:	461a      	mov	r2, r3
 80114b2:	4b09      	ldr	r3, [pc, #36]	; (80114d8 <__assert_func+0x2c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4605      	mov	r5, r0
 80114b8:	68d8      	ldr	r0, [r3, #12]
 80114ba:	b14c      	cbz	r4, 80114d0 <__assert_func+0x24>
 80114bc:	4b07      	ldr	r3, [pc, #28]	; (80114dc <__assert_func+0x30>)
 80114be:	9100      	str	r1, [sp, #0]
 80114c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114c4:	4906      	ldr	r1, [pc, #24]	; (80114e0 <__assert_func+0x34>)
 80114c6:	462b      	mov	r3, r5
 80114c8:	f000 f872 	bl	80115b0 <fiprintf>
 80114cc:	f000 f882 	bl	80115d4 <abort>
 80114d0:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <__assert_func+0x38>)
 80114d2:	461c      	mov	r4, r3
 80114d4:	e7f3      	b.n	80114be <__assert_func+0x12>
 80114d6:	bf00      	nop
 80114d8:	20000384 	.word	0x20000384
 80114dc:	0801265f 	.word	0x0801265f
 80114e0:	0801266c 	.word	0x0801266c
 80114e4:	0801269a 	.word	0x0801269a

080114e8 <_calloc_r>:
 80114e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114ea:	fba1 2402 	umull	r2, r4, r1, r2
 80114ee:	b94c      	cbnz	r4, 8011504 <_calloc_r+0x1c>
 80114f0:	4611      	mov	r1, r2
 80114f2:	9201      	str	r2, [sp, #4]
 80114f4:	f7fd fcd6 	bl	800eea4 <_malloc_r>
 80114f8:	9a01      	ldr	r2, [sp, #4]
 80114fa:	4605      	mov	r5, r0
 80114fc:	b930      	cbnz	r0, 801150c <_calloc_r+0x24>
 80114fe:	4628      	mov	r0, r5
 8011500:	b003      	add	sp, #12
 8011502:	bd30      	pop	{r4, r5, pc}
 8011504:	220c      	movs	r2, #12
 8011506:	6002      	str	r2, [r0, #0]
 8011508:	2500      	movs	r5, #0
 801150a:	e7f8      	b.n	80114fe <_calloc_r+0x16>
 801150c:	4621      	mov	r1, r4
 801150e:	f7fe face 	bl	800faae <memset>
 8011512:	e7f4      	b.n	80114fe <_calloc_r+0x16>

08011514 <__ascii_mbtowc>:
 8011514:	b082      	sub	sp, #8
 8011516:	b901      	cbnz	r1, 801151a <__ascii_mbtowc+0x6>
 8011518:	a901      	add	r1, sp, #4
 801151a:	b142      	cbz	r2, 801152e <__ascii_mbtowc+0x1a>
 801151c:	b14b      	cbz	r3, 8011532 <__ascii_mbtowc+0x1e>
 801151e:	7813      	ldrb	r3, [r2, #0]
 8011520:	600b      	str	r3, [r1, #0]
 8011522:	7812      	ldrb	r2, [r2, #0]
 8011524:	1e10      	subs	r0, r2, #0
 8011526:	bf18      	it	ne
 8011528:	2001      	movne	r0, #1
 801152a:	b002      	add	sp, #8
 801152c:	4770      	bx	lr
 801152e:	4610      	mov	r0, r2
 8011530:	e7fb      	b.n	801152a <__ascii_mbtowc+0x16>
 8011532:	f06f 0001 	mvn.w	r0, #1
 8011536:	e7f8      	b.n	801152a <__ascii_mbtowc+0x16>

08011538 <_realloc_r>:
 8011538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153c:	4680      	mov	r8, r0
 801153e:	4614      	mov	r4, r2
 8011540:	460e      	mov	r6, r1
 8011542:	b921      	cbnz	r1, 801154e <_realloc_r+0x16>
 8011544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011548:	4611      	mov	r1, r2
 801154a:	f7fd bcab 	b.w	800eea4 <_malloc_r>
 801154e:	b92a      	cbnz	r2, 801155c <_realloc_r+0x24>
 8011550:	f7ff f9c4 	bl	80108dc <_free_r>
 8011554:	4625      	mov	r5, r4
 8011556:	4628      	mov	r0, r5
 8011558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155c:	f000 f841 	bl	80115e2 <_malloc_usable_size_r>
 8011560:	4284      	cmp	r4, r0
 8011562:	4607      	mov	r7, r0
 8011564:	d802      	bhi.n	801156c <_realloc_r+0x34>
 8011566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801156a:	d812      	bhi.n	8011592 <_realloc_r+0x5a>
 801156c:	4621      	mov	r1, r4
 801156e:	4640      	mov	r0, r8
 8011570:	f7fd fc98 	bl	800eea4 <_malloc_r>
 8011574:	4605      	mov	r5, r0
 8011576:	2800      	cmp	r0, #0
 8011578:	d0ed      	beq.n	8011556 <_realloc_r+0x1e>
 801157a:	42bc      	cmp	r4, r7
 801157c:	4622      	mov	r2, r4
 801157e:	4631      	mov	r1, r6
 8011580:	bf28      	it	cs
 8011582:	463a      	movcs	r2, r7
 8011584:	f7fe fb22 	bl	800fbcc <memcpy>
 8011588:	4631      	mov	r1, r6
 801158a:	4640      	mov	r0, r8
 801158c:	f7ff f9a6 	bl	80108dc <_free_r>
 8011590:	e7e1      	b.n	8011556 <_realloc_r+0x1e>
 8011592:	4635      	mov	r5, r6
 8011594:	e7df      	b.n	8011556 <_realloc_r+0x1e>

08011596 <__ascii_wctomb>:
 8011596:	b149      	cbz	r1, 80115ac <__ascii_wctomb+0x16>
 8011598:	2aff      	cmp	r2, #255	; 0xff
 801159a:	bf85      	ittet	hi
 801159c:	238a      	movhi	r3, #138	; 0x8a
 801159e:	6003      	strhi	r3, [r0, #0]
 80115a0:	700a      	strbls	r2, [r1, #0]
 80115a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80115a6:	bf98      	it	ls
 80115a8:	2001      	movls	r0, #1
 80115aa:	4770      	bx	lr
 80115ac:	4608      	mov	r0, r1
 80115ae:	4770      	bx	lr

080115b0 <fiprintf>:
 80115b0:	b40e      	push	{r1, r2, r3}
 80115b2:	b503      	push	{r0, r1, lr}
 80115b4:	4601      	mov	r1, r0
 80115b6:	ab03      	add	r3, sp, #12
 80115b8:	4805      	ldr	r0, [pc, #20]	; (80115d0 <fiprintf+0x20>)
 80115ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80115be:	6800      	ldr	r0, [r0, #0]
 80115c0:	9301      	str	r3, [sp, #4]
 80115c2:	f000 f83f 	bl	8011644 <_vfiprintf_r>
 80115c6:	b002      	add	sp, #8
 80115c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115cc:	b003      	add	sp, #12
 80115ce:	4770      	bx	lr
 80115d0:	20000384 	.word	0x20000384

080115d4 <abort>:
 80115d4:	b508      	push	{r3, lr}
 80115d6:	2006      	movs	r0, #6
 80115d8:	f000 fa0c 	bl	80119f4 <raise>
 80115dc:	2001      	movs	r0, #1
 80115de:	f7f4 fd00 	bl	8005fe2 <_exit>

080115e2 <_malloc_usable_size_r>:
 80115e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115e6:	1f18      	subs	r0, r3, #4
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	bfbc      	itt	lt
 80115ec:	580b      	ldrlt	r3, [r1, r0]
 80115ee:	18c0      	addlt	r0, r0, r3
 80115f0:	4770      	bx	lr

080115f2 <__sfputc_r>:
 80115f2:	6893      	ldr	r3, [r2, #8]
 80115f4:	3b01      	subs	r3, #1
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	b410      	push	{r4}
 80115fa:	6093      	str	r3, [r2, #8]
 80115fc:	da08      	bge.n	8011610 <__sfputc_r+0x1e>
 80115fe:	6994      	ldr	r4, [r2, #24]
 8011600:	42a3      	cmp	r3, r4
 8011602:	db01      	blt.n	8011608 <__sfputc_r+0x16>
 8011604:	290a      	cmp	r1, #10
 8011606:	d103      	bne.n	8011610 <__sfputc_r+0x1e>
 8011608:	f85d 4b04 	ldr.w	r4, [sp], #4
 801160c:	f000 b934 	b.w	8011878 <__swbuf_r>
 8011610:	6813      	ldr	r3, [r2, #0]
 8011612:	1c58      	adds	r0, r3, #1
 8011614:	6010      	str	r0, [r2, #0]
 8011616:	7019      	strb	r1, [r3, #0]
 8011618:	4608      	mov	r0, r1
 801161a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801161e:	4770      	bx	lr

08011620 <__sfputs_r>:
 8011620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011622:	4606      	mov	r6, r0
 8011624:	460f      	mov	r7, r1
 8011626:	4614      	mov	r4, r2
 8011628:	18d5      	adds	r5, r2, r3
 801162a:	42ac      	cmp	r4, r5
 801162c:	d101      	bne.n	8011632 <__sfputs_r+0x12>
 801162e:	2000      	movs	r0, #0
 8011630:	e007      	b.n	8011642 <__sfputs_r+0x22>
 8011632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011636:	463a      	mov	r2, r7
 8011638:	4630      	mov	r0, r6
 801163a:	f7ff ffda 	bl	80115f2 <__sfputc_r>
 801163e:	1c43      	adds	r3, r0, #1
 8011640:	d1f3      	bne.n	801162a <__sfputs_r+0xa>
 8011642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011644 <_vfiprintf_r>:
 8011644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011648:	460d      	mov	r5, r1
 801164a:	b09d      	sub	sp, #116	; 0x74
 801164c:	4614      	mov	r4, r2
 801164e:	4698      	mov	r8, r3
 8011650:	4606      	mov	r6, r0
 8011652:	b118      	cbz	r0, 801165c <_vfiprintf_r+0x18>
 8011654:	6a03      	ldr	r3, [r0, #32]
 8011656:	b90b      	cbnz	r3, 801165c <_vfiprintf_r+0x18>
 8011658:	f7fe f990 	bl	800f97c <__sinit>
 801165c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801165e:	07d9      	lsls	r1, r3, #31
 8011660:	d405      	bmi.n	801166e <_vfiprintf_r+0x2a>
 8011662:	89ab      	ldrh	r3, [r5, #12]
 8011664:	059a      	lsls	r2, r3, #22
 8011666:	d402      	bmi.n	801166e <_vfiprintf_r+0x2a>
 8011668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801166a:	f7fe faad 	bl	800fbc8 <__retarget_lock_acquire_recursive>
 801166e:	89ab      	ldrh	r3, [r5, #12]
 8011670:	071b      	lsls	r3, r3, #28
 8011672:	d501      	bpl.n	8011678 <_vfiprintf_r+0x34>
 8011674:	692b      	ldr	r3, [r5, #16]
 8011676:	b99b      	cbnz	r3, 80116a0 <_vfiprintf_r+0x5c>
 8011678:	4629      	mov	r1, r5
 801167a:	4630      	mov	r0, r6
 801167c:	f000 f93a 	bl	80118f4 <__swsetup_r>
 8011680:	b170      	cbz	r0, 80116a0 <_vfiprintf_r+0x5c>
 8011682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011684:	07dc      	lsls	r4, r3, #31
 8011686:	d504      	bpl.n	8011692 <_vfiprintf_r+0x4e>
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	b01d      	add	sp, #116	; 0x74
 801168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011692:	89ab      	ldrh	r3, [r5, #12]
 8011694:	0598      	lsls	r0, r3, #22
 8011696:	d4f7      	bmi.n	8011688 <_vfiprintf_r+0x44>
 8011698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801169a:	f7fe fa96 	bl	800fbca <__retarget_lock_release_recursive>
 801169e:	e7f3      	b.n	8011688 <_vfiprintf_r+0x44>
 80116a0:	2300      	movs	r3, #0
 80116a2:	9309      	str	r3, [sp, #36]	; 0x24
 80116a4:	2320      	movs	r3, #32
 80116a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80116ae:	2330      	movs	r3, #48	; 0x30
 80116b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011864 <_vfiprintf_r+0x220>
 80116b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116b8:	f04f 0901 	mov.w	r9, #1
 80116bc:	4623      	mov	r3, r4
 80116be:	469a      	mov	sl, r3
 80116c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116c4:	b10a      	cbz	r2, 80116ca <_vfiprintf_r+0x86>
 80116c6:	2a25      	cmp	r2, #37	; 0x25
 80116c8:	d1f9      	bne.n	80116be <_vfiprintf_r+0x7a>
 80116ca:	ebba 0b04 	subs.w	fp, sl, r4
 80116ce:	d00b      	beq.n	80116e8 <_vfiprintf_r+0xa4>
 80116d0:	465b      	mov	r3, fp
 80116d2:	4622      	mov	r2, r4
 80116d4:	4629      	mov	r1, r5
 80116d6:	4630      	mov	r0, r6
 80116d8:	f7ff ffa2 	bl	8011620 <__sfputs_r>
 80116dc:	3001      	adds	r0, #1
 80116de:	f000 80a9 	beq.w	8011834 <_vfiprintf_r+0x1f0>
 80116e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116e4:	445a      	add	r2, fp
 80116e6:	9209      	str	r2, [sp, #36]	; 0x24
 80116e8:	f89a 3000 	ldrb.w	r3, [sl]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f000 80a1 	beq.w	8011834 <_vfiprintf_r+0x1f0>
 80116f2:	2300      	movs	r3, #0
 80116f4:	f04f 32ff 	mov.w	r2, #4294967295
 80116f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116fc:	f10a 0a01 	add.w	sl, sl, #1
 8011700:	9304      	str	r3, [sp, #16]
 8011702:	9307      	str	r3, [sp, #28]
 8011704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011708:	931a      	str	r3, [sp, #104]	; 0x68
 801170a:	4654      	mov	r4, sl
 801170c:	2205      	movs	r2, #5
 801170e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011712:	4854      	ldr	r0, [pc, #336]	; (8011864 <_vfiprintf_r+0x220>)
 8011714:	f7ee fd5c 	bl	80001d0 <memchr>
 8011718:	9a04      	ldr	r2, [sp, #16]
 801171a:	b9d8      	cbnz	r0, 8011754 <_vfiprintf_r+0x110>
 801171c:	06d1      	lsls	r1, r2, #27
 801171e:	bf44      	itt	mi
 8011720:	2320      	movmi	r3, #32
 8011722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011726:	0713      	lsls	r3, r2, #28
 8011728:	bf44      	itt	mi
 801172a:	232b      	movmi	r3, #43	; 0x2b
 801172c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011730:	f89a 3000 	ldrb.w	r3, [sl]
 8011734:	2b2a      	cmp	r3, #42	; 0x2a
 8011736:	d015      	beq.n	8011764 <_vfiprintf_r+0x120>
 8011738:	9a07      	ldr	r2, [sp, #28]
 801173a:	4654      	mov	r4, sl
 801173c:	2000      	movs	r0, #0
 801173e:	f04f 0c0a 	mov.w	ip, #10
 8011742:	4621      	mov	r1, r4
 8011744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011748:	3b30      	subs	r3, #48	; 0x30
 801174a:	2b09      	cmp	r3, #9
 801174c:	d94d      	bls.n	80117ea <_vfiprintf_r+0x1a6>
 801174e:	b1b0      	cbz	r0, 801177e <_vfiprintf_r+0x13a>
 8011750:	9207      	str	r2, [sp, #28]
 8011752:	e014      	b.n	801177e <_vfiprintf_r+0x13a>
 8011754:	eba0 0308 	sub.w	r3, r0, r8
 8011758:	fa09 f303 	lsl.w	r3, r9, r3
 801175c:	4313      	orrs	r3, r2
 801175e:	9304      	str	r3, [sp, #16]
 8011760:	46a2      	mov	sl, r4
 8011762:	e7d2      	b.n	801170a <_vfiprintf_r+0xc6>
 8011764:	9b03      	ldr	r3, [sp, #12]
 8011766:	1d19      	adds	r1, r3, #4
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	9103      	str	r1, [sp, #12]
 801176c:	2b00      	cmp	r3, #0
 801176e:	bfbb      	ittet	lt
 8011770:	425b      	neglt	r3, r3
 8011772:	f042 0202 	orrlt.w	r2, r2, #2
 8011776:	9307      	strge	r3, [sp, #28]
 8011778:	9307      	strlt	r3, [sp, #28]
 801177a:	bfb8      	it	lt
 801177c:	9204      	strlt	r2, [sp, #16]
 801177e:	7823      	ldrb	r3, [r4, #0]
 8011780:	2b2e      	cmp	r3, #46	; 0x2e
 8011782:	d10c      	bne.n	801179e <_vfiprintf_r+0x15a>
 8011784:	7863      	ldrb	r3, [r4, #1]
 8011786:	2b2a      	cmp	r3, #42	; 0x2a
 8011788:	d134      	bne.n	80117f4 <_vfiprintf_r+0x1b0>
 801178a:	9b03      	ldr	r3, [sp, #12]
 801178c:	1d1a      	adds	r2, r3, #4
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	9203      	str	r2, [sp, #12]
 8011792:	2b00      	cmp	r3, #0
 8011794:	bfb8      	it	lt
 8011796:	f04f 33ff 	movlt.w	r3, #4294967295
 801179a:	3402      	adds	r4, #2
 801179c:	9305      	str	r3, [sp, #20]
 801179e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011874 <_vfiprintf_r+0x230>
 80117a2:	7821      	ldrb	r1, [r4, #0]
 80117a4:	2203      	movs	r2, #3
 80117a6:	4650      	mov	r0, sl
 80117a8:	f7ee fd12 	bl	80001d0 <memchr>
 80117ac:	b138      	cbz	r0, 80117be <_vfiprintf_r+0x17a>
 80117ae:	9b04      	ldr	r3, [sp, #16]
 80117b0:	eba0 000a 	sub.w	r0, r0, sl
 80117b4:	2240      	movs	r2, #64	; 0x40
 80117b6:	4082      	lsls	r2, r0
 80117b8:	4313      	orrs	r3, r2
 80117ba:	3401      	adds	r4, #1
 80117bc:	9304      	str	r3, [sp, #16]
 80117be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c2:	4829      	ldr	r0, [pc, #164]	; (8011868 <_vfiprintf_r+0x224>)
 80117c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117c8:	2206      	movs	r2, #6
 80117ca:	f7ee fd01 	bl	80001d0 <memchr>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d03f      	beq.n	8011852 <_vfiprintf_r+0x20e>
 80117d2:	4b26      	ldr	r3, [pc, #152]	; (801186c <_vfiprintf_r+0x228>)
 80117d4:	bb1b      	cbnz	r3, 801181e <_vfiprintf_r+0x1da>
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	3307      	adds	r3, #7
 80117da:	f023 0307 	bic.w	r3, r3, #7
 80117de:	3308      	adds	r3, #8
 80117e0:	9303      	str	r3, [sp, #12]
 80117e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e4:	443b      	add	r3, r7
 80117e6:	9309      	str	r3, [sp, #36]	; 0x24
 80117e8:	e768      	b.n	80116bc <_vfiprintf_r+0x78>
 80117ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80117ee:	460c      	mov	r4, r1
 80117f0:	2001      	movs	r0, #1
 80117f2:	e7a6      	b.n	8011742 <_vfiprintf_r+0xfe>
 80117f4:	2300      	movs	r3, #0
 80117f6:	3401      	adds	r4, #1
 80117f8:	9305      	str	r3, [sp, #20]
 80117fa:	4619      	mov	r1, r3
 80117fc:	f04f 0c0a 	mov.w	ip, #10
 8011800:	4620      	mov	r0, r4
 8011802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011806:	3a30      	subs	r2, #48	; 0x30
 8011808:	2a09      	cmp	r2, #9
 801180a:	d903      	bls.n	8011814 <_vfiprintf_r+0x1d0>
 801180c:	2b00      	cmp	r3, #0
 801180e:	d0c6      	beq.n	801179e <_vfiprintf_r+0x15a>
 8011810:	9105      	str	r1, [sp, #20]
 8011812:	e7c4      	b.n	801179e <_vfiprintf_r+0x15a>
 8011814:	fb0c 2101 	mla	r1, ip, r1, r2
 8011818:	4604      	mov	r4, r0
 801181a:	2301      	movs	r3, #1
 801181c:	e7f0      	b.n	8011800 <_vfiprintf_r+0x1bc>
 801181e:	ab03      	add	r3, sp, #12
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	462a      	mov	r2, r5
 8011824:	4b12      	ldr	r3, [pc, #72]	; (8011870 <_vfiprintf_r+0x22c>)
 8011826:	a904      	add	r1, sp, #16
 8011828:	4630      	mov	r0, r6
 801182a:	f7fd fc67 	bl	800f0fc <_printf_float>
 801182e:	4607      	mov	r7, r0
 8011830:	1c78      	adds	r0, r7, #1
 8011832:	d1d6      	bne.n	80117e2 <_vfiprintf_r+0x19e>
 8011834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011836:	07d9      	lsls	r1, r3, #31
 8011838:	d405      	bmi.n	8011846 <_vfiprintf_r+0x202>
 801183a:	89ab      	ldrh	r3, [r5, #12]
 801183c:	059a      	lsls	r2, r3, #22
 801183e:	d402      	bmi.n	8011846 <_vfiprintf_r+0x202>
 8011840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011842:	f7fe f9c2 	bl	800fbca <__retarget_lock_release_recursive>
 8011846:	89ab      	ldrh	r3, [r5, #12]
 8011848:	065b      	lsls	r3, r3, #25
 801184a:	f53f af1d 	bmi.w	8011688 <_vfiprintf_r+0x44>
 801184e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011850:	e71c      	b.n	801168c <_vfiprintf_r+0x48>
 8011852:	ab03      	add	r3, sp, #12
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	462a      	mov	r2, r5
 8011858:	4b05      	ldr	r3, [pc, #20]	; (8011870 <_vfiprintf_r+0x22c>)
 801185a:	a904      	add	r1, sp, #16
 801185c:	4630      	mov	r0, r6
 801185e:	f7fd fef1 	bl	800f644 <_printf_i>
 8011862:	e7e4      	b.n	801182e <_vfiprintf_r+0x1ea>
 8011864:	08012644 	.word	0x08012644
 8011868:	0801264e 	.word	0x0801264e
 801186c:	0800f0fd 	.word	0x0800f0fd
 8011870:	08011621 	.word	0x08011621
 8011874:	0801264a 	.word	0x0801264a

08011878 <__swbuf_r>:
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187a:	460e      	mov	r6, r1
 801187c:	4614      	mov	r4, r2
 801187e:	4605      	mov	r5, r0
 8011880:	b118      	cbz	r0, 801188a <__swbuf_r+0x12>
 8011882:	6a03      	ldr	r3, [r0, #32]
 8011884:	b90b      	cbnz	r3, 801188a <__swbuf_r+0x12>
 8011886:	f7fe f879 	bl	800f97c <__sinit>
 801188a:	69a3      	ldr	r3, [r4, #24]
 801188c:	60a3      	str	r3, [r4, #8]
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	071a      	lsls	r2, r3, #28
 8011892:	d525      	bpl.n	80118e0 <__swbuf_r+0x68>
 8011894:	6923      	ldr	r3, [r4, #16]
 8011896:	b31b      	cbz	r3, 80118e0 <__swbuf_r+0x68>
 8011898:	6823      	ldr	r3, [r4, #0]
 801189a:	6922      	ldr	r2, [r4, #16]
 801189c:	1a98      	subs	r0, r3, r2
 801189e:	6963      	ldr	r3, [r4, #20]
 80118a0:	b2f6      	uxtb	r6, r6
 80118a2:	4283      	cmp	r3, r0
 80118a4:	4637      	mov	r7, r6
 80118a6:	dc04      	bgt.n	80118b2 <__swbuf_r+0x3a>
 80118a8:	4621      	mov	r1, r4
 80118aa:	4628      	mov	r0, r5
 80118ac:	f7ff fdbc 	bl	8011428 <_fflush_r>
 80118b0:	b9e0      	cbnz	r0, 80118ec <__swbuf_r+0x74>
 80118b2:	68a3      	ldr	r3, [r4, #8]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	60a3      	str	r3, [r4, #8]
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	6022      	str	r2, [r4, #0]
 80118be:	701e      	strb	r6, [r3, #0]
 80118c0:	6962      	ldr	r2, [r4, #20]
 80118c2:	1c43      	adds	r3, r0, #1
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d004      	beq.n	80118d2 <__swbuf_r+0x5a>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	07db      	lsls	r3, r3, #31
 80118cc:	d506      	bpl.n	80118dc <__swbuf_r+0x64>
 80118ce:	2e0a      	cmp	r6, #10
 80118d0:	d104      	bne.n	80118dc <__swbuf_r+0x64>
 80118d2:	4621      	mov	r1, r4
 80118d4:	4628      	mov	r0, r5
 80118d6:	f7ff fda7 	bl	8011428 <_fflush_r>
 80118da:	b938      	cbnz	r0, 80118ec <__swbuf_r+0x74>
 80118dc:	4638      	mov	r0, r7
 80118de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e0:	4621      	mov	r1, r4
 80118e2:	4628      	mov	r0, r5
 80118e4:	f000 f806 	bl	80118f4 <__swsetup_r>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d0d5      	beq.n	8011898 <__swbuf_r+0x20>
 80118ec:	f04f 37ff 	mov.w	r7, #4294967295
 80118f0:	e7f4      	b.n	80118dc <__swbuf_r+0x64>
	...

080118f4 <__swsetup_r>:
 80118f4:	b538      	push	{r3, r4, r5, lr}
 80118f6:	4b2a      	ldr	r3, [pc, #168]	; (80119a0 <__swsetup_r+0xac>)
 80118f8:	4605      	mov	r5, r0
 80118fa:	6818      	ldr	r0, [r3, #0]
 80118fc:	460c      	mov	r4, r1
 80118fe:	b118      	cbz	r0, 8011908 <__swsetup_r+0x14>
 8011900:	6a03      	ldr	r3, [r0, #32]
 8011902:	b90b      	cbnz	r3, 8011908 <__swsetup_r+0x14>
 8011904:	f7fe f83a 	bl	800f97c <__sinit>
 8011908:	89a3      	ldrh	r3, [r4, #12]
 801190a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801190e:	0718      	lsls	r0, r3, #28
 8011910:	d422      	bmi.n	8011958 <__swsetup_r+0x64>
 8011912:	06d9      	lsls	r1, r3, #27
 8011914:	d407      	bmi.n	8011926 <__swsetup_r+0x32>
 8011916:	2309      	movs	r3, #9
 8011918:	602b      	str	r3, [r5, #0]
 801191a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801191e:	81a3      	strh	r3, [r4, #12]
 8011920:	f04f 30ff 	mov.w	r0, #4294967295
 8011924:	e034      	b.n	8011990 <__swsetup_r+0x9c>
 8011926:	0758      	lsls	r0, r3, #29
 8011928:	d512      	bpl.n	8011950 <__swsetup_r+0x5c>
 801192a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801192c:	b141      	cbz	r1, 8011940 <__swsetup_r+0x4c>
 801192e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011932:	4299      	cmp	r1, r3
 8011934:	d002      	beq.n	801193c <__swsetup_r+0x48>
 8011936:	4628      	mov	r0, r5
 8011938:	f7fe ffd0 	bl	80108dc <_free_r>
 801193c:	2300      	movs	r3, #0
 801193e:	6363      	str	r3, [r4, #52]	; 0x34
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011946:	81a3      	strh	r3, [r4, #12]
 8011948:	2300      	movs	r3, #0
 801194a:	6063      	str	r3, [r4, #4]
 801194c:	6923      	ldr	r3, [r4, #16]
 801194e:	6023      	str	r3, [r4, #0]
 8011950:	89a3      	ldrh	r3, [r4, #12]
 8011952:	f043 0308 	orr.w	r3, r3, #8
 8011956:	81a3      	strh	r3, [r4, #12]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	b94b      	cbnz	r3, 8011970 <__swsetup_r+0x7c>
 801195c:	89a3      	ldrh	r3, [r4, #12]
 801195e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011966:	d003      	beq.n	8011970 <__swsetup_r+0x7c>
 8011968:	4621      	mov	r1, r4
 801196a:	4628      	mov	r0, r5
 801196c:	f000 f884 	bl	8011a78 <__smakebuf_r>
 8011970:	89a0      	ldrh	r0, [r4, #12]
 8011972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011976:	f010 0301 	ands.w	r3, r0, #1
 801197a:	d00a      	beq.n	8011992 <__swsetup_r+0x9e>
 801197c:	2300      	movs	r3, #0
 801197e:	60a3      	str	r3, [r4, #8]
 8011980:	6963      	ldr	r3, [r4, #20]
 8011982:	425b      	negs	r3, r3
 8011984:	61a3      	str	r3, [r4, #24]
 8011986:	6923      	ldr	r3, [r4, #16]
 8011988:	b943      	cbnz	r3, 801199c <__swsetup_r+0xa8>
 801198a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801198e:	d1c4      	bne.n	801191a <__swsetup_r+0x26>
 8011990:	bd38      	pop	{r3, r4, r5, pc}
 8011992:	0781      	lsls	r1, r0, #30
 8011994:	bf58      	it	pl
 8011996:	6963      	ldrpl	r3, [r4, #20]
 8011998:	60a3      	str	r3, [r4, #8]
 801199a:	e7f4      	b.n	8011986 <__swsetup_r+0x92>
 801199c:	2000      	movs	r0, #0
 801199e:	e7f7      	b.n	8011990 <__swsetup_r+0x9c>
 80119a0:	20000384 	.word	0x20000384

080119a4 <_raise_r>:
 80119a4:	291f      	cmp	r1, #31
 80119a6:	b538      	push	{r3, r4, r5, lr}
 80119a8:	4604      	mov	r4, r0
 80119aa:	460d      	mov	r5, r1
 80119ac:	d904      	bls.n	80119b8 <_raise_r+0x14>
 80119ae:	2316      	movs	r3, #22
 80119b0:	6003      	str	r3, [r0, #0]
 80119b2:	f04f 30ff 	mov.w	r0, #4294967295
 80119b6:	bd38      	pop	{r3, r4, r5, pc}
 80119b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80119ba:	b112      	cbz	r2, 80119c2 <_raise_r+0x1e>
 80119bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119c0:	b94b      	cbnz	r3, 80119d6 <_raise_r+0x32>
 80119c2:	4620      	mov	r0, r4
 80119c4:	f000 f830 	bl	8011a28 <_getpid_r>
 80119c8:	462a      	mov	r2, r5
 80119ca:	4601      	mov	r1, r0
 80119cc:	4620      	mov	r0, r4
 80119ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119d2:	f000 b817 	b.w	8011a04 <_kill_r>
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d00a      	beq.n	80119f0 <_raise_r+0x4c>
 80119da:	1c59      	adds	r1, r3, #1
 80119dc:	d103      	bne.n	80119e6 <_raise_r+0x42>
 80119de:	2316      	movs	r3, #22
 80119e0:	6003      	str	r3, [r0, #0]
 80119e2:	2001      	movs	r0, #1
 80119e4:	e7e7      	b.n	80119b6 <_raise_r+0x12>
 80119e6:	2400      	movs	r4, #0
 80119e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119ec:	4628      	mov	r0, r5
 80119ee:	4798      	blx	r3
 80119f0:	2000      	movs	r0, #0
 80119f2:	e7e0      	b.n	80119b6 <_raise_r+0x12>

080119f4 <raise>:
 80119f4:	4b02      	ldr	r3, [pc, #8]	; (8011a00 <raise+0xc>)
 80119f6:	4601      	mov	r1, r0
 80119f8:	6818      	ldr	r0, [r3, #0]
 80119fa:	f7ff bfd3 	b.w	80119a4 <_raise_r>
 80119fe:	bf00      	nop
 8011a00:	20000384 	.word	0x20000384

08011a04 <_kill_r>:
 8011a04:	b538      	push	{r3, r4, r5, lr}
 8011a06:	4d07      	ldr	r5, [pc, #28]	; (8011a24 <_kill_r+0x20>)
 8011a08:	2300      	movs	r3, #0
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	4608      	mov	r0, r1
 8011a0e:	4611      	mov	r1, r2
 8011a10:	602b      	str	r3, [r5, #0]
 8011a12:	f7f4 fad6 	bl	8005fc2 <_kill>
 8011a16:	1c43      	adds	r3, r0, #1
 8011a18:	d102      	bne.n	8011a20 <_kill_r+0x1c>
 8011a1a:	682b      	ldr	r3, [r5, #0]
 8011a1c:	b103      	cbz	r3, 8011a20 <_kill_r+0x1c>
 8011a1e:	6023      	str	r3, [r4, #0]
 8011a20:	bd38      	pop	{r3, r4, r5, pc}
 8011a22:	bf00      	nop
 8011a24:	200016d0 	.word	0x200016d0

08011a28 <_getpid_r>:
 8011a28:	f7f4 bac3 	b.w	8005fb2 <_getpid>

08011a2c <__swhatbuf_r>:
 8011a2c:	b570      	push	{r4, r5, r6, lr}
 8011a2e:	460c      	mov	r4, r1
 8011a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a34:	2900      	cmp	r1, #0
 8011a36:	b096      	sub	sp, #88	; 0x58
 8011a38:	4615      	mov	r5, r2
 8011a3a:	461e      	mov	r6, r3
 8011a3c:	da0d      	bge.n	8011a5a <__swhatbuf_r+0x2e>
 8011a3e:	89a3      	ldrh	r3, [r4, #12]
 8011a40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011a44:	f04f 0100 	mov.w	r1, #0
 8011a48:	bf0c      	ite	eq
 8011a4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011a4e:	2340      	movne	r3, #64	; 0x40
 8011a50:	2000      	movs	r0, #0
 8011a52:	6031      	str	r1, [r6, #0]
 8011a54:	602b      	str	r3, [r5, #0]
 8011a56:	b016      	add	sp, #88	; 0x58
 8011a58:	bd70      	pop	{r4, r5, r6, pc}
 8011a5a:	466a      	mov	r2, sp
 8011a5c:	f000 f848 	bl	8011af0 <_fstat_r>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	dbec      	blt.n	8011a3e <__swhatbuf_r+0x12>
 8011a64:	9901      	ldr	r1, [sp, #4]
 8011a66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011a6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011a6e:	4259      	negs	r1, r3
 8011a70:	4159      	adcs	r1, r3
 8011a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a76:	e7eb      	b.n	8011a50 <__swhatbuf_r+0x24>

08011a78 <__smakebuf_r>:
 8011a78:	898b      	ldrh	r3, [r1, #12]
 8011a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a7c:	079d      	lsls	r5, r3, #30
 8011a7e:	4606      	mov	r6, r0
 8011a80:	460c      	mov	r4, r1
 8011a82:	d507      	bpl.n	8011a94 <__smakebuf_r+0x1c>
 8011a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a88:	6023      	str	r3, [r4, #0]
 8011a8a:	6123      	str	r3, [r4, #16]
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	6163      	str	r3, [r4, #20]
 8011a90:	b002      	add	sp, #8
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	ab01      	add	r3, sp, #4
 8011a96:	466a      	mov	r2, sp
 8011a98:	f7ff ffc8 	bl	8011a2c <__swhatbuf_r>
 8011a9c:	9900      	ldr	r1, [sp, #0]
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f7fd f9ff 	bl	800eea4 <_malloc_r>
 8011aa6:	b948      	cbnz	r0, 8011abc <__smakebuf_r+0x44>
 8011aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aac:	059a      	lsls	r2, r3, #22
 8011aae:	d4ef      	bmi.n	8011a90 <__smakebuf_r+0x18>
 8011ab0:	f023 0303 	bic.w	r3, r3, #3
 8011ab4:	f043 0302 	orr.w	r3, r3, #2
 8011ab8:	81a3      	strh	r3, [r4, #12]
 8011aba:	e7e3      	b.n	8011a84 <__smakebuf_r+0xc>
 8011abc:	89a3      	ldrh	r3, [r4, #12]
 8011abe:	6020      	str	r0, [r4, #0]
 8011ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ac4:	81a3      	strh	r3, [r4, #12]
 8011ac6:	9b00      	ldr	r3, [sp, #0]
 8011ac8:	6163      	str	r3, [r4, #20]
 8011aca:	9b01      	ldr	r3, [sp, #4]
 8011acc:	6120      	str	r0, [r4, #16]
 8011ace:	b15b      	cbz	r3, 8011ae8 <__smakebuf_r+0x70>
 8011ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	f000 f81d 	bl	8011b14 <_isatty_r>
 8011ada:	b128      	cbz	r0, 8011ae8 <__smakebuf_r+0x70>
 8011adc:	89a3      	ldrh	r3, [r4, #12]
 8011ade:	f023 0303 	bic.w	r3, r3, #3
 8011ae2:	f043 0301 	orr.w	r3, r3, #1
 8011ae6:	81a3      	strh	r3, [r4, #12]
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	431d      	orrs	r5, r3
 8011aec:	81a5      	strh	r5, [r4, #12]
 8011aee:	e7cf      	b.n	8011a90 <__smakebuf_r+0x18>

08011af0 <_fstat_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	4d07      	ldr	r5, [pc, #28]	; (8011b10 <_fstat_r+0x20>)
 8011af4:	2300      	movs	r3, #0
 8011af6:	4604      	mov	r4, r0
 8011af8:	4608      	mov	r0, r1
 8011afa:	4611      	mov	r1, r2
 8011afc:	602b      	str	r3, [r5, #0]
 8011afe:	f7f4 fabf 	bl	8006080 <_fstat>
 8011b02:	1c43      	adds	r3, r0, #1
 8011b04:	d102      	bne.n	8011b0c <_fstat_r+0x1c>
 8011b06:	682b      	ldr	r3, [r5, #0]
 8011b08:	b103      	cbz	r3, 8011b0c <_fstat_r+0x1c>
 8011b0a:	6023      	str	r3, [r4, #0]
 8011b0c:	bd38      	pop	{r3, r4, r5, pc}
 8011b0e:	bf00      	nop
 8011b10:	200016d0 	.word	0x200016d0

08011b14 <_isatty_r>:
 8011b14:	b538      	push	{r3, r4, r5, lr}
 8011b16:	4d06      	ldr	r5, [pc, #24]	; (8011b30 <_isatty_r+0x1c>)
 8011b18:	2300      	movs	r3, #0
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	4608      	mov	r0, r1
 8011b1e:	602b      	str	r3, [r5, #0]
 8011b20:	f7f4 fabe 	bl	80060a0 <_isatty>
 8011b24:	1c43      	adds	r3, r0, #1
 8011b26:	d102      	bne.n	8011b2e <_isatty_r+0x1a>
 8011b28:	682b      	ldr	r3, [r5, #0]
 8011b2a:	b103      	cbz	r3, 8011b2e <_isatty_r+0x1a>
 8011b2c:	6023      	str	r3, [r4, #0]
 8011b2e:	bd38      	pop	{r3, r4, r5, pc}
 8011b30:	200016d0 	.word	0x200016d0
 8011b34:	00000000 	.word	0x00000000

08011b38 <exp>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	ed2d 8b02 	vpush	{d8}
 8011b3e:	ec55 4b10 	vmov	r4, r5, d0
 8011b42:	f000 f84d 	bl	8011be0 <__ieee754_exp>
 8011b46:	eeb0 8a40 	vmov.f32	s16, s0
 8011b4a:	eef0 8a60 	vmov.f32	s17, s1
 8011b4e:	ec45 4b10 	vmov	d0, r4, r5
 8011b52:	f000 f839 	bl	8011bc8 <finite>
 8011b56:	b168      	cbz	r0, 8011b74 <exp+0x3c>
 8011b58:	a317      	add	r3, pc, #92	; (adr r3, 8011bb8 <exp+0x80>)
 8011b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5e:	4620      	mov	r0, r4
 8011b60:	4629      	mov	r1, r5
 8011b62:	f7ee ffd9 	bl	8000b18 <__aeabi_dcmpgt>
 8011b66:	b160      	cbz	r0, 8011b82 <exp+0x4a>
 8011b68:	f7fe f804 	bl	800fb74 <__errno>
 8011b6c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8011ba8 <exp+0x70>
 8011b70:	2322      	movs	r3, #34	; 0x22
 8011b72:	6003      	str	r3, [r0, #0]
 8011b74:	eeb0 0a48 	vmov.f32	s0, s16
 8011b78:	eef0 0a68 	vmov.f32	s1, s17
 8011b7c:	ecbd 8b02 	vpop	{d8}
 8011b80:	bd38      	pop	{r3, r4, r5, pc}
 8011b82:	a30f      	add	r3, pc, #60	; (adr r3, 8011bc0 <exp+0x88>)
 8011b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b88:	4620      	mov	r0, r4
 8011b8a:	4629      	mov	r1, r5
 8011b8c:	f7ee ffa6 	bl	8000adc <__aeabi_dcmplt>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d0ef      	beq.n	8011b74 <exp+0x3c>
 8011b94:	f7fd ffee 	bl	800fb74 <__errno>
 8011b98:	2322      	movs	r3, #34	; 0x22
 8011b9a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8011bb0 <exp+0x78>
 8011b9e:	6003      	str	r3, [r0, #0]
 8011ba0:	e7e8      	b.n	8011b74 <exp+0x3c>
 8011ba2:	bf00      	nop
 8011ba4:	f3af 8000 	nop.w
 8011ba8:	00000000 	.word	0x00000000
 8011bac:	7ff00000 	.word	0x7ff00000
	...
 8011bb8:	fefa39ef 	.word	0xfefa39ef
 8011bbc:	40862e42 	.word	0x40862e42
 8011bc0:	d52d3051 	.word	0xd52d3051
 8011bc4:	c0874910 	.word	0xc0874910

08011bc8 <finite>:
 8011bc8:	b082      	sub	sp, #8
 8011bca:	ed8d 0b00 	vstr	d0, [sp]
 8011bce:	9801      	ldr	r0, [sp, #4]
 8011bd0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011bd4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011bd8:	0fc0      	lsrs	r0, r0, #31
 8011bda:	b002      	add	sp, #8
 8011bdc:	4770      	bx	lr
	...

08011be0 <__ieee754_exp>:
 8011be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011be4:	ec55 4b10 	vmov	r4, r5, d0
 8011be8:	49b5      	ldr	r1, [pc, #724]	; (8011ec0 <__ieee754_exp+0x2e0>)
 8011bea:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011bee:	428a      	cmp	r2, r1
 8011bf0:	ed2d 8b04 	vpush	{d8-d9}
 8011bf4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011bf8:	d93b      	bls.n	8011c72 <__ieee754_exp+0x92>
 8011bfa:	49b2      	ldr	r1, [pc, #712]	; (8011ec4 <__ieee754_exp+0x2e4>)
 8011bfc:	428a      	cmp	r2, r1
 8011bfe:	d916      	bls.n	8011c2e <__ieee754_exp+0x4e>
 8011c00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011c04:	4323      	orrs	r3, r4
 8011c06:	ee10 2a10 	vmov	r2, s0
 8011c0a:	d007      	beq.n	8011c1c <__ieee754_exp+0x3c>
 8011c0c:	462b      	mov	r3, r5
 8011c0e:	4620      	mov	r0, r4
 8011c10:	4629      	mov	r1, r5
 8011c12:	f7ee fb3b 	bl	800028c <__adddf3>
 8011c16:	4604      	mov	r4, r0
 8011c18:	460d      	mov	r5, r1
 8011c1a:	e002      	b.n	8011c22 <__ieee754_exp+0x42>
 8011c1c:	b10e      	cbz	r6, 8011c22 <__ieee754_exp+0x42>
 8011c1e:	2400      	movs	r4, #0
 8011c20:	2500      	movs	r5, #0
 8011c22:	ecbd 8b04 	vpop	{d8-d9}
 8011c26:	ec45 4b10 	vmov	d0, r4, r5
 8011c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c2e:	a38e      	add	r3, pc, #568	; (adr r3, 8011e68 <__ieee754_exp+0x288>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	ee10 0a10 	vmov	r0, s0
 8011c38:	4629      	mov	r1, r5
 8011c3a:	f7ee ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 8011c3e:	4607      	mov	r7, r0
 8011c40:	b130      	cbz	r0, 8011c50 <__ieee754_exp+0x70>
 8011c42:	ecbd 8b04 	vpop	{d8-d9}
 8011c46:	2000      	movs	r0, #0
 8011c48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c4c:	f000 b971 	b.w	8011f32 <__math_oflow>
 8011c50:	a387      	add	r3, pc, #540	; (adr r3, 8011e70 <__ieee754_exp+0x290>)
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	4620      	mov	r0, r4
 8011c58:	4629      	mov	r1, r5
 8011c5a:	f7ee ff3f 	bl	8000adc <__aeabi_dcmplt>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	f000 808b 	beq.w	8011d7a <__ieee754_exp+0x19a>
 8011c64:	ecbd 8b04 	vpop	{d8-d9}
 8011c68:	4638      	mov	r0, r7
 8011c6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c6e:	f000 b957 	b.w	8011f20 <__math_uflow>
 8011c72:	4b95      	ldr	r3, [pc, #596]	; (8011ec8 <__ieee754_exp+0x2e8>)
 8011c74:	429a      	cmp	r2, r3
 8011c76:	f240 80ac 	bls.w	8011dd2 <__ieee754_exp+0x1f2>
 8011c7a:	4b94      	ldr	r3, [pc, #592]	; (8011ecc <__ieee754_exp+0x2ec>)
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d87c      	bhi.n	8011d7a <__ieee754_exp+0x19a>
 8011c80:	4b93      	ldr	r3, [pc, #588]	; (8011ed0 <__ieee754_exp+0x2f0>)
 8011c82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8a:	ee10 0a10 	vmov	r0, s0
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f7ee fafa 	bl	8000288 <__aeabi_dsub>
 8011c94:	4b8f      	ldr	r3, [pc, #572]	; (8011ed4 <__ieee754_exp+0x2f4>)
 8011c96:	00f7      	lsls	r7, r6, #3
 8011c98:	443b      	add	r3, r7
 8011c9a:	ed93 7b00 	vldr	d7, [r3]
 8011c9e:	f1c6 0a01 	rsb	sl, r6, #1
 8011ca2:	4680      	mov	r8, r0
 8011ca4:	4689      	mov	r9, r1
 8011ca6:	ebaa 0a06 	sub.w	sl, sl, r6
 8011caa:	eeb0 8a47 	vmov.f32	s16, s14
 8011cae:	eef0 8a67 	vmov.f32	s17, s15
 8011cb2:	ec53 2b18 	vmov	r2, r3, d8
 8011cb6:	4640      	mov	r0, r8
 8011cb8:	4649      	mov	r1, r9
 8011cba:	f7ee fae5 	bl	8000288 <__aeabi_dsub>
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	460d      	mov	r5, r1
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	462b      	mov	r3, r5
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4629      	mov	r1, r5
 8011cca:	f7ee fc95 	bl	80005f8 <__aeabi_dmul>
 8011cce:	a36a      	add	r3, pc, #424	; (adr r3, 8011e78 <__ieee754_exp+0x298>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	f7ee fc8e 	bl	80005f8 <__aeabi_dmul>
 8011cdc:	a368      	add	r3, pc, #416	; (adr r3, 8011e80 <__ieee754_exp+0x2a0>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	f7ee fad1 	bl	8000288 <__aeabi_dsub>
 8011ce6:	4632      	mov	r2, r6
 8011ce8:	463b      	mov	r3, r7
 8011cea:	f7ee fc85 	bl	80005f8 <__aeabi_dmul>
 8011cee:	a366      	add	r3, pc, #408	; (adr r3, 8011e88 <__ieee754_exp+0x2a8>)
 8011cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf4:	f7ee faca 	bl	800028c <__adddf3>
 8011cf8:	4632      	mov	r2, r6
 8011cfa:	463b      	mov	r3, r7
 8011cfc:	f7ee fc7c 	bl	80005f8 <__aeabi_dmul>
 8011d00:	a363      	add	r3, pc, #396	; (adr r3, 8011e90 <__ieee754_exp+0x2b0>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	f7ee fabf 	bl	8000288 <__aeabi_dsub>
 8011d0a:	4632      	mov	r2, r6
 8011d0c:	463b      	mov	r3, r7
 8011d0e:	f7ee fc73 	bl	80005f8 <__aeabi_dmul>
 8011d12:	a361      	add	r3, pc, #388	; (adr r3, 8011e98 <__ieee754_exp+0x2b8>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	f7ee fab8 	bl	800028c <__adddf3>
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	f7ee fc6a 	bl	80005f8 <__aeabi_dmul>
 8011d24:	4602      	mov	r2, r0
 8011d26:	460b      	mov	r3, r1
 8011d28:	4620      	mov	r0, r4
 8011d2a:	4629      	mov	r1, r5
 8011d2c:	f7ee faac 	bl	8000288 <__aeabi_dsub>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4606      	mov	r6, r0
 8011d36:	460f      	mov	r7, r1
 8011d38:	4620      	mov	r0, r4
 8011d3a:	4629      	mov	r1, r5
 8011d3c:	f7ee fc5c 	bl	80005f8 <__aeabi_dmul>
 8011d40:	ec41 0b19 	vmov	d9, r0, r1
 8011d44:	f1ba 0f00 	cmp.w	sl, #0
 8011d48:	d15d      	bne.n	8011e06 <__ieee754_exp+0x226>
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d50:	4630      	mov	r0, r6
 8011d52:	4639      	mov	r1, r7
 8011d54:	f7ee fa98 	bl	8000288 <__aeabi_dsub>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	ec51 0b19 	vmov	r0, r1, d9
 8011d60:	f7ee fd74 	bl	800084c <__aeabi_ddiv>
 8011d64:	4622      	mov	r2, r4
 8011d66:	462b      	mov	r3, r5
 8011d68:	f7ee fa8e 	bl	8000288 <__aeabi_dsub>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	460b      	mov	r3, r1
 8011d70:	2000      	movs	r0, #0
 8011d72:	4959      	ldr	r1, [pc, #356]	; (8011ed8 <__ieee754_exp+0x2f8>)
 8011d74:	f7ee fa88 	bl	8000288 <__aeabi_dsub>
 8011d78:	e74d      	b.n	8011c16 <__ieee754_exp+0x36>
 8011d7a:	4b58      	ldr	r3, [pc, #352]	; (8011edc <__ieee754_exp+0x2fc>)
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011d82:	4629      	mov	r1, r5
 8011d84:	a346      	add	r3, pc, #280	; (adr r3, 8011ea0 <__ieee754_exp+0x2c0>)
 8011d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8a:	f7ee fc35 	bl	80005f8 <__aeabi_dmul>
 8011d8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d92:	f7ee fa7b 	bl	800028c <__adddf3>
 8011d96:	f7ee fedf 	bl	8000b58 <__aeabi_d2iz>
 8011d9a:	4682      	mov	sl, r0
 8011d9c:	f7ee fbc2 	bl	8000524 <__aeabi_i2d>
 8011da0:	a341      	add	r3, pc, #260	; (adr r3, 8011ea8 <__ieee754_exp+0x2c8>)
 8011da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da6:	4606      	mov	r6, r0
 8011da8:	460f      	mov	r7, r1
 8011daa:	f7ee fc25 	bl	80005f8 <__aeabi_dmul>
 8011dae:	4602      	mov	r2, r0
 8011db0:	460b      	mov	r3, r1
 8011db2:	4620      	mov	r0, r4
 8011db4:	4629      	mov	r1, r5
 8011db6:	f7ee fa67 	bl	8000288 <__aeabi_dsub>
 8011dba:	a33d      	add	r3, pc, #244	; (adr r3, 8011eb0 <__ieee754_exp+0x2d0>)
 8011dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc0:	4680      	mov	r8, r0
 8011dc2:	4689      	mov	r9, r1
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	f7ee fc16 	bl	80005f8 <__aeabi_dmul>
 8011dcc:	ec41 0b18 	vmov	d8, r0, r1
 8011dd0:	e76f      	b.n	8011cb2 <__ieee754_exp+0xd2>
 8011dd2:	4b43      	ldr	r3, [pc, #268]	; (8011ee0 <__ieee754_exp+0x300>)
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d811      	bhi.n	8011dfc <__ieee754_exp+0x21c>
 8011dd8:	a337      	add	r3, pc, #220	; (adr r3, 8011eb8 <__ieee754_exp+0x2d8>)
 8011dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dde:	ee10 0a10 	vmov	r0, s0
 8011de2:	4629      	mov	r1, r5
 8011de4:	f7ee fa52 	bl	800028c <__adddf3>
 8011de8:	4b3b      	ldr	r3, [pc, #236]	; (8011ed8 <__ieee754_exp+0x2f8>)
 8011dea:	2200      	movs	r2, #0
 8011dec:	f7ee fe94 	bl	8000b18 <__aeabi_dcmpgt>
 8011df0:	b138      	cbz	r0, 8011e02 <__ieee754_exp+0x222>
 8011df2:	4b39      	ldr	r3, [pc, #228]	; (8011ed8 <__ieee754_exp+0x2f8>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	4620      	mov	r0, r4
 8011df8:	4629      	mov	r1, r5
 8011dfa:	e70a      	b.n	8011c12 <__ieee754_exp+0x32>
 8011dfc:	f04f 0a00 	mov.w	sl, #0
 8011e00:	e75f      	b.n	8011cc2 <__ieee754_exp+0xe2>
 8011e02:	4682      	mov	sl, r0
 8011e04:	e75d      	b.n	8011cc2 <__ieee754_exp+0xe2>
 8011e06:	4632      	mov	r2, r6
 8011e08:	463b      	mov	r3, r7
 8011e0a:	2000      	movs	r0, #0
 8011e0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011e10:	f7ee fa3a 	bl	8000288 <__aeabi_dsub>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	ec51 0b19 	vmov	r0, r1, d9
 8011e1c:	f7ee fd16 	bl	800084c <__aeabi_ddiv>
 8011e20:	4602      	mov	r2, r0
 8011e22:	460b      	mov	r3, r1
 8011e24:	ec51 0b18 	vmov	r0, r1, d8
 8011e28:	f7ee fa2e 	bl	8000288 <__aeabi_dsub>
 8011e2c:	4642      	mov	r2, r8
 8011e2e:	464b      	mov	r3, r9
 8011e30:	f7ee fa2a 	bl	8000288 <__aeabi_dsub>
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	2000      	movs	r0, #0
 8011e3a:	4927      	ldr	r1, [pc, #156]	; (8011ed8 <__ieee754_exp+0x2f8>)
 8011e3c:	f7ee fa24 	bl	8000288 <__aeabi_dsub>
 8011e40:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011e44:	4592      	cmp	sl, r2
 8011e46:	db02      	blt.n	8011e4e <__ieee754_exp+0x26e>
 8011e48:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011e4c:	e6e3      	b.n	8011c16 <__ieee754_exp+0x36>
 8011e4e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011e52:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011e56:	2200      	movs	r2, #0
 8011e58:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8011e5c:	f7ee fbcc 	bl	80005f8 <__aeabi_dmul>
 8011e60:	e6d9      	b.n	8011c16 <__ieee754_exp+0x36>
 8011e62:	bf00      	nop
 8011e64:	f3af 8000 	nop.w
 8011e68:	fefa39ef 	.word	0xfefa39ef
 8011e6c:	40862e42 	.word	0x40862e42
 8011e70:	d52d3051 	.word	0xd52d3051
 8011e74:	c0874910 	.word	0xc0874910
 8011e78:	72bea4d0 	.word	0x72bea4d0
 8011e7c:	3e663769 	.word	0x3e663769
 8011e80:	c5d26bf1 	.word	0xc5d26bf1
 8011e84:	3ebbbd41 	.word	0x3ebbbd41
 8011e88:	af25de2c 	.word	0xaf25de2c
 8011e8c:	3f11566a 	.word	0x3f11566a
 8011e90:	16bebd93 	.word	0x16bebd93
 8011e94:	3f66c16c 	.word	0x3f66c16c
 8011e98:	5555553e 	.word	0x5555553e
 8011e9c:	3fc55555 	.word	0x3fc55555
 8011ea0:	652b82fe 	.word	0x652b82fe
 8011ea4:	3ff71547 	.word	0x3ff71547
 8011ea8:	fee00000 	.word	0xfee00000
 8011eac:	3fe62e42 	.word	0x3fe62e42
 8011eb0:	35793c76 	.word	0x35793c76
 8011eb4:	3dea39ef 	.word	0x3dea39ef
 8011eb8:	8800759c 	.word	0x8800759c
 8011ebc:	7e37e43c 	.word	0x7e37e43c
 8011ec0:	40862e41 	.word	0x40862e41
 8011ec4:	7fefffff 	.word	0x7fefffff
 8011ec8:	3fd62e42 	.word	0x3fd62e42
 8011ecc:	3ff0a2b1 	.word	0x3ff0a2b1
 8011ed0:	080127b0 	.word	0x080127b0
 8011ed4:	080127c0 	.word	0x080127c0
 8011ed8:	3ff00000 	.word	0x3ff00000
 8011edc:	080127a0 	.word	0x080127a0
 8011ee0:	3defffff 	.word	0x3defffff

08011ee4 <with_errno>:
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	460d      	mov	r5, r1
 8011eea:	4616      	mov	r6, r2
 8011eec:	f7fd fe42 	bl	800fb74 <__errno>
 8011ef0:	4629      	mov	r1, r5
 8011ef2:	6006      	str	r6, [r0, #0]
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}

08011ef8 <xflow>:
 8011ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011efa:	4614      	mov	r4, r2
 8011efc:	461d      	mov	r5, r3
 8011efe:	b108      	cbz	r0, 8011f04 <xflow+0xc>
 8011f00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f04:	e9cd 2300 	strd	r2, r3, [sp]
 8011f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	4629      	mov	r1, r5
 8011f10:	f7ee fb72 	bl	80005f8 <__aeabi_dmul>
 8011f14:	2222      	movs	r2, #34	; 0x22
 8011f16:	b003      	add	sp, #12
 8011f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f1c:	f7ff bfe2 	b.w	8011ee4 <with_errno>

08011f20 <__math_uflow>:
 8011f20:	b508      	push	{r3, lr}
 8011f22:	2200      	movs	r2, #0
 8011f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011f28:	f7ff ffe6 	bl	8011ef8 <xflow>
 8011f2c:	ec41 0b10 	vmov	d0, r0, r1
 8011f30:	bd08      	pop	{r3, pc}

08011f32 <__math_oflow>:
 8011f32:	b508      	push	{r3, lr}
 8011f34:	2200      	movs	r2, #0
 8011f36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011f3a:	f7ff ffdd 	bl	8011ef8 <xflow>
 8011f3e:	ec41 0b10 	vmov	d0, r0, r1
 8011f42:	bd08      	pop	{r3, pc}

08011f44 <_init>:
 8011f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f46:	bf00      	nop
 8011f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f4a:	bc08      	pop	{r3}
 8011f4c:	469e      	mov	lr, r3
 8011f4e:	4770      	bx	lr

08011f50 <_fini>:
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	bf00      	nop
 8011f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f56:	bc08      	pop	{r3}
 8011f58:	469e      	mov	lr, r3
 8011f5a:	4770      	bx	lr
