
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f79c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800f930  0800f930  0001f930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100ac  080100ac  000304f0  2**0
                  CONTENTS
  4 .ARM          00000008  080100ac  080100ac  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100b4  080100b4  000304f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100b4  080100b4  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100b8  080100b8  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  080100bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304f0  2**0
                  CONTENTS
 10 .bss          000010f0  200004f0  200004f0  000304f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200015e0  200015e0  000304f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1ef  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049fa  00000000  00000000  0004f70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  00054110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c0  00000000  00000000  00055ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004153e  00000000  00000000  00057280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000231eb  00000000  00000000  000987be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130803  00000000  00000000  000bb9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ec1ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ce0  00000000  00000000  001ec1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f0 	.word	0x200004f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f914 	.word	0x0800f914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f4 	.word	0x200004f4
 80001cc:	0800f914 	.word	0x0800f914

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa0:	4a7e      	ldr	r2, [pc, #504]	; (800119c <MX_ADC1_Init+0x210>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fcc:	4a74      	ldr	r2, [pc, #464]	; (80011a0 <MX_ADC1_Init+0x214>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd8:	220e      	movs	r2, #14
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	486b      	ldr	r0, [pc, #428]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fec:	f006 fcf2 	bl	80079d4 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f001 f994 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4863      	ldr	r0, [pc, #396]	; (8001198 <MX_ADC1_Init+0x20c>)
 800100c:	f006 ff64 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f001 f984 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	485c      	ldr	r0, [pc, #368]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001028:	f006 ff56 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001032:	f001 f976 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001036:	230e      	movs	r3, #14
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001044:	f006 ff48 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104e:	f001 f968 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001052:	230b      	movs	r3, #11
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001060:	f006 ff3a 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800106a:	f001 f95a 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106e:	2307      	movs	r3, #7
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001072:	2305      	movs	r3, #5
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <MX_ADC1_Init+0x20c>)
 800107c:	f006 ff2c 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001086:	f001 f94c 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800108a:	230c      	movs	r3, #12
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001098:	f006 ff1e 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010a2:	f001 f93e 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a6:	2306      	movs	r3, #6
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010b8:	f006 ff0e 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010c2:	f001 f92e 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c6:	230d      	movs	r3, #13
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010d8:	f006 fefe 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010e2:	f001 f91e 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010f4:	f006 fef0 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010fe:	f001 f910 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001106:	230a      	movs	r3, #10
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001110:	f006 fee2 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 800111a:	f001 f902 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111e:	2304      	movs	r3, #4
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001122:	230b      	movs	r3, #11
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <MX_ADC1_Init+0x20c>)
 800112c:	f006 fed4 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001136:	f001 f8f4 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113a:	2301      	movs	r3, #1
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001148:	f006 fec6 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001152:	f001 f8e6 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001156:	2303      	movs	r3, #3
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800115a:	230d      	movs	r3, #13
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001164:	f006 feb8 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800116e:	f001 f8d8 	bl	8002322 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001176:	230e      	movs	r3, #14
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001180:	f006 feaa 	bl	8007ed8 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 800118a:	f001 f8ca 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000050c 	.word	0x2000050c
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_ADC_MspInit+0x11c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d178      	bne.n	80012b8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x124>)
 800122e:	f007 fd99 	bl	8008d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x128>)
 8001246:	f007 fd8d 	bl	8008d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_ADC_MspInit+0x130>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800128e:	f007 f9f9 	bl	8008684 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001298:	f001 f843 	bl	8002322 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2012      	movs	r0, #18
 80012ae:	f007 f9ae 	bl	800860e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f007 f9c7 	bl	8008646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	20000554 	.word	0x20000554
 80012d4:	40026410 	.word	0x40026410

080012d8 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	2100      	movs	r1, #0
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <DISP_ClearBuff+0x14>)
 80012e4:	f00b fc42 	bl	800cb6c <memset>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005b4 	.word	0x200005b4

080012f0 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d03a      	beq.n	800138c <DISP_DrawPixel+0x9c>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc39      	bgt.n	800138e <DISP_DrawPixel+0x9e>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <DISP_DrawPixel+0x34>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d019      	beq.n	8001356 <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 8001322:	e034      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	491c      	ldr	r1, [pc, #112]	; (800139c <DISP_DrawPixel+0xac>)
 800132a:	01d2      	lsls	r2, r2, #7
 800132c:	440a      	add	r2, r1
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b2c8      	uxtb	r0, r1
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <DISP_DrawPixel+0xac>)
 800134a:	01d2      	lsls	r2, r2, #7
 800134c:	440a      	add	r2, r1
 800134e:	4413      	add	r3, r2
 8001350:	4602      	mov	r2, r0
 8001352:	701a      	strb	r2, [r3, #0]
		break;
 8001354:	e01b      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4910      	ldr	r1, [pc, #64]	; (800139c <DISP_DrawPixel+0xac>)
 800135c:	01d2      	lsls	r2, r2, #7
 800135e:	440a      	add	r2, r1
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4013      	ands	r3, r2
 8001376:	b259      	sxtb	r1, r3
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	b2c8      	uxtb	r0, r1
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <DISP_DrawPixel+0xac>)
 8001380:	01d2      	lsls	r2, r2, #7
 8001382:	440a      	add	r2, r1
 8001384:	4413      	add	r3, r2
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <DISP_DrawPixel+0x9e>
		break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200005b4 	.word	0x200005b4

080013a0 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e08d      	b.n	80014f4 <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	dd01      	ble.n	80013e6 <DISP_DrawChar+0x46>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08b      	b.n	80014fe <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f1a3 0220 	sub.w	r2, r3, #32
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a44      	ldr	r2, [pc, #272]	; (8001508 <DISP_DrawChar+0x168>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f1a3 0220 	sub.w	r2, r3, #32
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <DISP_DrawChar+0x168>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	461a      	mov	r2, r3
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f1c3 0308 	rsb	r3, r3, #8
 8001422:	fa42 f303 	asr.w	r3, r2, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e050      	b.n	80014d2 <DISP_DrawChar+0x132>
			switch(color) {
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d049      	beq.n	80014ca <DISP_DrawChar+0x12a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc48      	bgt.n	80014cc <DISP_DrawChar+0x12c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <DISP_DrawChar+0xa4>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01f      	beq.n	8001482 <DISP_DrawChar+0xe2>
 8001442:	e043      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	441a      	add	r2, r3
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	440b      	add	r3, r1
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <DISP_DrawChar+0x16c>)
 8001452:	01d2      	lsls	r2, r2, #7
 8001454:	440a      	add	r2, r1
 8001456:	4413      	add	r3, r2
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	441a      	add	r2, r3
 800146a:	79bc      	ldrb	r4, [r7, #6]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4423      	add	r3, r4
 8001470:	4301      	orrs	r1, r0
 8001472:	b2c8      	uxtb	r0, r1
 8001474:	4925      	ldr	r1, [pc, #148]	; (800150c <DISP_DrawChar+0x16c>)
 8001476:	01d2      	lsls	r2, r2, #7
 8001478:	440a      	add	r2, r1
 800147a:	4413      	add	r3, r2
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
				break;
 8001480:	e024      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	441a      	add	r2, r3
 8001488:	79b9      	ldrb	r1, [r7, #6]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	440b      	add	r3, r1
 800148e:	491f      	ldr	r1, [pc, #124]	; (800150c <DISP_DrawChar+0x16c>)
 8001490:	01d2      	lsls	r2, r2, #7
 8001492:	440a      	add	r2, r1
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b258      	sxtb	r0, r3
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	441a      	add	r2, r3
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	440b      	add	r3, r1
 80014ba:	b2c0      	uxtb	r0, r0
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <DISP_DrawChar+0x16c>)
 80014be:	01d2      	lsls	r2, r2, #7
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	4602      	mov	r2, r0
 80014c6:	701a      	strb	r2, [r3, #0]
				break;
 80014c8:	e000      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014ca:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <DISP_DrawChar+0x13c>
 80014d8:	2202      	movs	r2, #2
 80014da:	e000      	b.n	80014de <DISP_DrawChar+0x13e>
 80014dc:	2201      	movs	r2, #1
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dd04      	ble.n	80014ee <DISP_DrawChar+0x14e>
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	dda0      	ble.n	8001430 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	f77f af6e 	ble.w	80013d8 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc90      	pop	{r4, r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	200005b4 	.word	0x200005b4

08001510 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	460b      	mov	r3, r1
 8001524:	70bb      	strb	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	while(*text)
 800152e:	e015      	b.n	800155c <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	73fa      	strb	r2, [r7, #15]
 800153e:	461a      	mov	r2, r3
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	4413      	add	r3, r2
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	787b      	ldrb	r3, [r7, #1]
 8001550:	78ba      	ldrb	r2, [r7, #2]
 8001552:	f7ff ff25 	bl	80013a0 <DISP_DrawChar>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <DISP_DrawText+0x56>
	while(*text)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <DISP_DrawText+0x20>
}
 8001564:	e000      	b.n	8001568 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001566:	bf00      	nop
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4603      	mov	r3, r0
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	717b      	strb	r3, [r7, #5]
 800158a:	4613      	mov	r3, r2
 800158c:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 800158e:	793a      	ldrb	r2, [r7, #4]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d104      	bne.n	80015a0 <DISP_DrawLineSimple+0x30>
 8001596:	797a      	ldrb	r2, [r7, #5]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	429a      	cmp	r2, r3
 800159c:	f000 8086 	beq.w	80016ac <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 80015a0:	797a      	ldrb	r2, [r7, #5]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	7939      	ldrb	r1, [r7, #4]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db3e      	blt.n	800162e <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015b0:	793a      	ldrb	r2, [r7, #4]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015be:	797a      	ldrb	r2, [r7, #5]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e022      	b.n	8001620 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	ee07 2a90 	vmov	s15, r2
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f6:	79ba      	ldrb	r2, [r7, #6]
 80015f8:	ee07 2a90 	vmov	s15, r2
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001608:	edc7 7a00 	vstr	s15, [r7]
 800160c:	783a      	ldrb	r2, [r7, #0]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe6b 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	ddd6      	ble.n	80015da <DISP_DrawLineSimple+0x6a>
 800162c:	e03f      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 800162e:	797a      	ldrb	r2, [r7, #5]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163c:	793a      	ldrb	r2, [r7, #4]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e022      	b.n	800169e <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	edc7 7a00 	vstr	s15, [r7]
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fe2c 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	793a      	ldrb	r2, [r7, #4]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	ddd6      	ble.n	8001658 <DISP_DrawLineSimple+0xe8>
 80016aa:	e000      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016ac:	bf00      	nop
		}
	}
}
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	4603      	mov	r3, r0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	717b      	strb	r3, [r7, #5]
 80016ce:	4613      	mov	r3, r2
 80016d0:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016d2:	79bc      	ldrb	r4, [r7, #6]
 80016d4:	797a      	ldrb	r2, [r7, #5]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	79f8      	ldrb	r0, [r7, #7]
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4623      	mov	r3, r4
 80016e0:	f7ff ff46 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016e4:	793c      	ldrb	r4, [r7, #4]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	79b9      	ldrb	r1, [r7, #6]
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	7e3b      	ldrb	r3, [r7, #24]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7ff ff3d 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016f6:	793c      	ldrb	r4, [r7, #4]
 80016f8:	797a      	ldrb	r2, [r7, #5]
 80016fa:	79b9      	ldrb	r1, [r7, #6]
 80016fc:	7978      	ldrb	r0, [r7, #5]
 80016fe:	7e3b      	ldrb	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff ff34 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001708:	793c      	ldrb	r4, [r7, #4]
 800170a:	797a      	ldrb	r2, [r7, #5]
 800170c:	7939      	ldrb	r1, [r7, #4]
 800170e:	79f8      	ldrb	r0, [r7, #7]
 8001710:	7e3b      	ldrb	r3, [r7, #24]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7ff ff2b 	bl	8001570 <DISP_DrawLineSimple>
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
	...

08001724 <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 8001724:	b490      	push	{r4, r7}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	4603      	mov	r3, r0
 8001738:	71bb      	strb	r3, [r7, #6]
 800173a:	460b      	mov	r3, r1
 800173c:	717b      	strb	r3, [r7, #5]
 800173e:	4613      	mov	r3, r2
 8001740:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 8001756:	793b      	ldrb	r3, [r7, #4]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e074      	b.n	800184e <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e06a      	b.n	8001840 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <DISP_FillRect+0x62>
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d005      	beq.n	8001786 <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e022      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 8001786:	7bba      	ldrb	r2, [r7, #14]
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d110      	bne.n	80017b0 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	f1c3 0308 	rsb	r3, r3, #8
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	fa41 f303 	asr.w	r3, r1, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00d      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	fa42 f303 	asr.w	r3, r2, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e001      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d031      	beq.n	8001838 <DISP_FillRect+0x114>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dc30      	bgt.n	800183a <DISP_FillRect+0x116>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DISP_FillRect+0xbe>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d013      	beq.n	8001808 <DISP_FillRect+0xe4>
 80017e0:	e02b      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <DISP_FillRect+0x140>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	441a      	add	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <DISP_FillRect+0x140>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	441a      	add	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4413      	add	r3, r2
 8001802:	460a      	mov	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
				break;
 8001806:	e018      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <DISP_FillRect+0x140>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	43db      	mvns	r3, r3
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4013      	ands	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <DISP_FillRect+0x140>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	441a      	add	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
				break;
 8001836:	e000      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001838:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	dd90      	ble.n	800176a <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dd86      	ble.n	8001764 <DISP_FillRect+0x40>
			}
		}
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bc90      	pop	{r4, r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200005b4 	.word	0x200005b4

08001868 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e002      	b.n	800187c <DISP_CountCharString+0x14>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f6      	bne.n	8001876 <DISP_CountCharString+0xe>
	return ct;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f7ff ffe0 	bl	8001868 <DISP_CountCharString>
 80018a8:	4603      	mov	r3, r0
 80018aa:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	461a      	mov	r2, r3
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	757b      	strb	r3, [r7, #21]
 80018d2:	e005      	b.n	80018e0 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	4413      	add	r3, r2
 80018de:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d804      	bhi.n	80018f2 <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	3308      	adds	r3, #8
 80018ee:	753b      	strb	r3, [r7, #20]
 80018f0:	e005      	b.n	80018fe <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7818      	ldrb	r0, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461c      	mov	r4, r3
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	7d7a      	ldrb	r2, [r7, #21]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	f7ff ff02 	bl	8001724 <DISP_FillRect>

	switch(s->align_x) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d010      	beq.n	800194a <DISP_DisplayText+0xb2>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc20      	bgt.n	800196e <DISP_DisplayText+0xd6>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <DISP_DisplayText+0x9e>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <DISP_DisplayText+0xa8>
 8001934:	e01b      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
		break;
 800193e:	e016      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001940:	7d7a      	ldrb	r2, [r7, #21]
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	75fb      	strb	r3, [r7, #23]
		break;
 8001948:	e011      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	7d7b      	ldrb	r3, [r7, #21]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	7809      	ldrb	r1, [r1, #0]
 8001954:	1a5b      	subs	r3, r3, r1
 8001956:	0fd9      	lsrs	r1, r3, #31
 8001958:	440b      	add	r3, r1
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	75fb      	strb	r3, [r7, #23]
		break;
 800196c:	bf00      	nop
	}

	switch(s->align_y) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	799b      	ldrb	r3, [r3, #6]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d00f      	beq.n	8001996 <DISP_DisplayText+0xfe>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc1c      	bgt.n	80019b4 <DISP_DisplayText+0x11c>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <DISP_DisplayText+0xec>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d005      	beq.n	800198e <DISP_DisplayText+0xf6>
 8001982:	e017      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	3301      	adds	r3, #1
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e012      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	3b07      	subs	r3, #7
 8001992:	75bb      	strb	r3, [r7, #22]
		break;
 8001994:	e00e      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	785a      	ldrb	r2, [r3, #1]
 800199a:	7d3b      	ldrb	r3, [r7, #20]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	7849      	ldrb	r1, [r1, #1]
 80019a0:	1a5b      	subs	r3, r3, r1
 80019a2:	0fd9      	lsrs	r1, r3, #31
 80019a4:	440b      	add	r3, r1
 80019a6:	105b      	asrs	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b03      	subs	r3, #3
 80019b0:	75bb      	strb	r3, [r7, #22]
		break;
 80019b2:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	7dba      	ldrb	r2, [r7, #22]
 80019ba:	7df9      	ldrb	r1, [r7, #23]
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f7ff fda7 	bl	8001510 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019ca:	7d3b      	ldrb	r3, [r7, #20]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e024      	b.n	8001a20 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fe70 	bl	80026c0 <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fe80 	bl	80026ea <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e00c      	b.n	8001a0c <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <DISP_DisplayText+0x1a0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fe45 	bl	8002690 <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dc02      	bgt.n	8001a1a <DISP_DisplayText+0x182>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	ddeb      	ble.n	80019f2 <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dc02      	bgt.n	8001a2e <DISP_DisplayText+0x196>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	ddd3      	ble.n	80019d6 <DISP_DisplayText+0x13e>
		}
	}

}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005b4 	.word	0x200005b4

08001a3c <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	460b      	mov	r3, r1
 8001a54:	717b      	strb	r3, [r7, #5]
 8001a56:	4613      	mov	r3, r2
 8001a58:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e022      	b.n	8001ab2 <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fe25 	bl	80026c0 <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fe36 	bl	80026ea <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00c      	b.n	8001a9e <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <DISP_OLEDUpdate+0x8c>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fdfc 	bl	8002690 <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dc02      	bgt.n	8001aac <DISP_OLEDUpdate+0x70>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aaa:	ddeb      	ble.n	8001a84 <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dc02      	bgt.n	8001ac0 <DISP_OLEDUpdate+0x84>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	ddd5      	ble.n	8001a6c <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	200005b4 	.word	0x200005b4

08001acc <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785a      	ldrb	r2, [r3, #1]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001af0:	4413      	add	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	4622      	mov	r2, r4
 8001afe:	f7ff fe11 	bl	8001724 <DISP_FillRect>
			s->color);
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
	...

08001b0c <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b12:	2300      	movs	r3, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <DISP_Test+0x108>)
 8001b1a:	f7ff fcf9 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2208      	movs	r2, #8
 8001b22:	2100      	movs	r1, #0
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <DISP_Test+0x10c>)
 8001b26:	f7ff fcf3 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	2100      	movs	r1, #0
 8001b30:	483a      	ldr	r0, [pc, #232]	; (8001c1c <DISP_Test+0x110>)
 8001b32:	f7ff fced 	bl	8001510 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	233e      	movs	r3, #62	; 0x3e
 8001b3c:	227a      	movs	r2, #122	; 0x7a
 8001b3e:	211e      	movs	r1, #30
 8001b40:	203e      	movs	r0, #62	; 0x3e
 8001b42:	f7ff fdb7 	bl	80016b4 <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	233c      	movs	r3, #60	; 0x3c
 8001b4c:	2278      	movs	r2, #120	; 0x78
 8001b4e:	2120      	movs	r1, #32
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	f7ff fde7 	bl	8001724 <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b56:	2301      	movs	r3, #1
 8001b58:	222a      	movs	r2, #42	; 0x2a
 8001b5a:	2151      	movs	r1, #81	; 0x51
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <DISP_Test+0x114>)
 8001b5e:	f7ff fcd7 	bl	8001510 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e01d      	b.n	8001ba4 <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fda7 	bl	80026c0 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fdb9 	bl	80026ea <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	e00c      	b.n	8001b98 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <DISP_Test+0x118>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	441a      	add	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fd7f 	bl	8002690 <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddef      	ble.n	8001b7e <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	ddde      	ble.n	8001b68 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e022      	b.n	8001bf6 <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fd81 	bl	80026c0 <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f000 fd93 	bl	80026ea <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00f      	b.n	8001bea <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <DISP_Test+0x11c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fd56 	bl	8002690 <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b27      	cmp	r3, #39	; 0x27
 8001bee:	ddec      	ble.n	8001bca <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	ddd9      	ble.n	8001bb0 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c00:	f005 fec4 	bl	800798c <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c04:	f000 fd8b 	bl	800271e <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c08:	f7ff fb66 	bl	80012d8 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0800f930 	.word	0x0800f930
 8001c18:	0800f944 	.word	0x0800f944
 8001c1c:	0800f958 	.word	0x0800f958
 8001c20:	0800f960 	.word	0x0800f960
 8001c24:	200005b4 	.word	0x200005b4
 8001c28:	200001e8 	.word	0x200001e8

08001c2c <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c30:	f000 fd75 	bl	800271e <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c34:	f7ff fb50 	bl	80012d8 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c38:	20af      	movs	r0, #175	; 0xaf
 8001c3a:	f000 fcfd 	bl	8002638 <OLED_Command>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2038      	movs	r0, #56	; 0x38
 8001c6c:	f006 fccf 	bl	800860e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c70:	2038      	movs	r0, #56	; 0x38
 8001c72:	f006 fce8 	bl	8008646 <HAL_NVIC_EnableIRQ>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <EEP_Init+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200009b4 	.word	0x200009b4

08001ca4 <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <EEP_WritePage+0x40>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	89fa      	ldrh	r2, [r7, #14]
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21a0      	movs	r1, #160	; 0xa0
 8001ccc:	f007 fb5c 	bl	8009388 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cd0:	f005 fe50 	bl	8007974 <HAL_GetTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <EEP_WritePage+0x44>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200009b4 	.word	0x200009b4
 8001ce8:	200009b8 	.word	0x200009b8

08001cec <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <EEP_WriteMem+0x40>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	9102      	str	r1, [sp, #8]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	21a0      	movs	r1, #160	; 0xa0
 8001d14:	f007 fb38 	bl	8009388 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d18:	f005 fe2c 	bl	8007974 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <EEP_WriteMem+0x44>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009b4 	.word	0x200009b4
 8001d30:	200009b8 	.word	0x200009b8

08001d34 <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <EEP_ReadPage+0x40>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	89fa      	ldrh	r2, [r7, #14]
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	21a0      	movs	r1, #160	; 0xa0
 8001d5c:	f007 fc0e 	bl	800957c <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <EEP_ReadPage+0x44>)
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200009b4 	.word	0x200009b4
 8001d78:	200009bc 	.word	0x200009bc

08001d7c <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <EEP_ReadMem+0x44>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	21a0      	movs	r1, #160	; 0xa0
 8001da4:	f007 fbea 	bl	800957c <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <EEP_ReadMem+0x48>)
 8001db4:	801a      	strh	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200009b4 	.word	0x200009b4
 8001dc4:	200009bc 	.word	0x200009bc

08001dc8 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dcc:	f005 fdd2 	bl	8007974 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <EEP_ReadyToWrite+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d901      	bls.n	8001de0 <EEP_ReadyToWrite+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <EEP_ReadyToWrite+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200009b8 	.word	0x200009b8

08001dec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3e      	ldr	r2, [pc, #248]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001e7a:	f007 f927 	bl	80090cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001e86:	f007 f921 	bl	80090cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ea0:	f006 ff60 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ebe:	f006 ff51 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001edc:	f006 ff42 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ee0:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001ee4:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001ef6:	f006 ff35 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001f14:	f006 ff26 	bl	8008d64 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400

08001f2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x58>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <MX_I2C1_Init+0x5c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f6c:	f007 f8c8 	bl	8009100 <HAL_I2C_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f76:	f000 f9d4 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009c0 	.word	0x200009c0
 8001f84:	40005400 	.word	0x40005400
 8001f88:	00061a80 	.word	0x00061a80

08001f8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_I2C2_Init+0x58>)
 8001f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_I2C2_Init+0x50>)
 8001fca:	f007 f899 	bl	8009100 <HAL_I2C_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fd4:	f000 f9a5 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000a14 	.word	0x20000a14
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	000186a0 	.word	0x000186a0

08001fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_I2C_MspInit+0xec>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12d      	bne.n	8002066 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4826      	ldr	r0, [pc, #152]	; (80020dc <HAL_I2C_MspInit+0xf4>)
 8002044:	f006 fe8e 	bl	8008d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002064:	e031      	b.n	80020ca <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_I2C_MspInit+0xf8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d12c      	bne.n	80020ca <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6313      	str	r3, [r2, #48]	; 0x30
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800208c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002092:	2312      	movs	r3, #18
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209e:	2304      	movs	r3, #4
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <HAL_I2C_MspInit+0xf4>)
 80020aa:	f006 fe5b 	bl	8008d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_I2C_MspInit+0xf0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40005800 	.word	0x40005800

080020e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e8:	f005 fbde 	bl	80078a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ec:	f000 f860 	bl	80021b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f0:	f7ff fe7c 	bl	8001dec <MX_GPIO_Init>
  MX_DMA_Init();
 80020f4:	f7ff fda6 	bl	8001c44 <MX_DMA_Init>
  MX_ADC1_Init();
 80020f8:	f7fe ff48 	bl	8000f8c <MX_ADC1_Init>
  MX_I2C1_Init();
 80020fc:	f7ff ff16 	bl	8001f2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002100:	f7ff ff44 	bl	8001f8c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002104:	f002 fa70 	bl	80045e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002108:	f002 fb26 	bl	8004758 <MX_TIM2_Init>
  MX_TIM3_Init();
 800210c:	f002 fb78 	bl	8004800 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002110:	f002 fbf0 	bl	80048f4 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002114:	f005 fb24 	bl	8007760 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002118:	f005 fab0 	bl	800767c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800211c:	f002 fc3e 	bl	800499c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002120:	481b      	ldr	r0, [pc, #108]	; (8002190 <main+0xac>)
 8002122:	f7ff fdaf 	bl	8001c84 <EEP_Init>
  SEN_Init(&hadc1);
 8002126:	481b      	ldr	r0, [pc, #108]	; (8002194 <main+0xb0>)
 8002128:	f001 fb7a 	bl	8003820 <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	481a      	ldr	r0, [pc, #104]	; (8002198 <main+0xb4>)
 8002130:	f008 ffd6 	bl	800b0e0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002134:	213c      	movs	r1, #60	; 0x3c
 8002136:	4819      	ldr	r0, [pc, #100]	; (800219c <main+0xb8>)
 8002138:	f008 ffd2 	bl	800b0e0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800213c:	2100      	movs	r1, #0
 800213e:	4818      	ldr	r0, [pc, #96]	; (80021a0 <main+0xbc>)
 8002140:	f008 fe60 	bl	800ae04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002144:	2104      	movs	r1, #4
 8002146:	4816      	ldr	r0, [pc, #88]	; (80021a0 <main+0xbc>)
 8002148:	f008 fe5c 	bl	800ae04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800214c:	2108      	movs	r1, #8
 800214e:	4814      	ldr	r0, [pc, #80]	; (80021a0 <main+0xbc>)
 8002150:	f008 fe58 	bl	800ae04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002154:	210c      	movs	r1, #12
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <main+0xbc>)
 8002158:	f008 fe54 	bl	800ae04 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002160:	f005 fc14 	bl	800798c <HAL_Delay>
  Run_Init();
 8002164:	f001 f88a 	bl	800327c <Run_Init>
  OLED_Init(&hi2c1);
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <main+0xc0>)
 800216a:	f000 fafd 	bl	8002768 <OLED_Init>
  DISP_Test();
 800216e:	f7ff fccd 	bl	8001b0c <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <main+0xc4>)
 800217a:	f006 ffa7 	bl	80090cc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <main+0xc8>)
 8002180:	f008 fd80 	bl	800ac84 <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002184:	f005 f9ee 	bl	8007564 <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 8002188:	f005 f9fa 	bl	8007580 <UI_Main>
 800218c:	e7fc      	b.n	8002188 <main+0xa4>
 800218e:	bf00      	nop
 8002190:	20000a14 	.word	0x20000a14
 8002194:	2000050c 	.word	0x2000050c
 8002198:	20000e70 	.word	0x20000e70
 800219c:	20000f00 	.word	0x20000f00
 80021a0:	20000eb8 	.word	0x20000eb8
 80021a4:	200009c0 	.word	0x200009c0
 80021a8:	40020800 	.word	0x40020800
 80021ac:	20000f48 	.word	0x20000f48

080021b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b094      	sub	sp, #80	; 0x50
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	2230      	movs	r2, #48	; 0x30
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a fcd4 	bl	800cb6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <SystemClock_Config+0xcc>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <SystemClock_Config+0xcc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <SystemClock_Config+0xd0>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <SystemClock_Config+0xd0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800220c:	2301      	movs	r3, #1
 800220e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2302      	movs	r3, #2
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002220:	2308      	movs	r3, #8
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002224:	23a8      	movs	r3, #168	; 0xa8
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002228:	2302      	movs	r3, #2
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800222c:	2307      	movs	r3, #7
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	4618      	mov	r0, r3
 8002236:	f008 f83f 	bl	800a2b8 <HAL_RCC_OscConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002240:	f000 f86f 	bl	8002322 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002244:	230f      	movs	r3, #15
 8002246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002250:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2105      	movs	r1, #5
 8002262:	4618      	mov	r0, r3
 8002264:	f008 faa0 	bl	800a7a8 <HAL_RCC_ClockConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800226e:	f000 f858 	bl	8002322 <Error_Handler>
  }
}
 8002272:	bf00      	nop
 8002274:	3750      	adds	r7, #80	; 0x50
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12c      	bne.n	80022f0 <HAL_TIM_PeriodElapsedCallback+0x6c>
		//1ms
		static int counter = 0;
		counter++;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800229e:	6013      	str	r3, [r2, #0]
		if((sensor_flag & 2) != 2)
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x30>
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		Plan_Main(0.001);
 80022ac:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002304 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022b0:	f000 fe9a 	bl	8002fe8 <Plan_Main>
		Run_MotorRoutine(0.001);
 80022b4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002304 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022b8:	f001 f822 	bl	8003300 <Run_MotorRoutine>
		if(counter >= 10) {
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	dd06      	ble.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x4e>
			main_flag |= MAIN_FLAG_DISP;
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022d0:	701a      	strb	r2, [r3, #0]
		}
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <HAL_TIM_PeriodElapsedCallback+0x6c>
			SEN_StartReadSensor();
 80022de:	f001 fb31 	bl	8003944 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40001000 	.word	0x40001000
 80022fc:	20000a6c 	.word	0x20000a6c
 8002300:	20000d99 	.word	0x20000d99
 8002304:	3a83126f 	.word	0x3a83126f
 8002308:	20000a68 	.word	0x20000a68

0800230c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 fb25 	bl	8003964 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002326:	b672      	cpsid	i
}
 8002328:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800232a:	e7fe      	b.n	800232a <Error_Handler+0x8>

0800232c <Motor_SetPWM>:

void Motor_Init(Motor_typedef* hmot) {

}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	ed87 0a00 	vstr	s0, [r7]
	hmot->pwm = value;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	ed87 0a00 	vstr	s0, [r7]
	hmot->vel_sp = value;
 8002356:	edd7 7a00 	vldr	s15, [r7]
 800235a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	b21a      	sxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	841a      	strh	r2, [r3, #32]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <Motor_SetPoint>:

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <Motor_SetPoint+0x1a>
 8002388:	2b01      	cmp	r3, #1
 800238a:	d006      	beq.n	800239a <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 800238c:	e00b      	b.n	80023a6 <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 800238e:	ed97 0a00 	vldr	s0, [r7]
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffca 	bl	800232c <Motor_SetPWM>
		break;
 8002398:	e005      	b.n	80023a6 <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 800239a:	ed97 0a00 	vldr	s0, [r7]
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffd3 	bl	800234a <Motor_SetVel>
		break;
 80023a4:	bf00      	nop
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	int16_t tim_period = (hmot->pwm*hmot->pwm_factor)*hmot->pwm_htim->Init.Period;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	edd3 7a07 	vldr	s15, [r3, #28]
 80023c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	0bdb      	lsrs	r3, r3, #15
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	737b      	strb	r3, [r7, #13]
	uint8_t dir_sign = hmot->dir < 0;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	09db      	lsrs	r3, r3, #7
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	733b      	strb	r3, [r7, #12]
	tim_period *= pwm_sign?-1:1;
 80023f8:	7b7b      	ldrb	r3, [r7, #13]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <Motor_ApplyPWM+0x56>
 80023fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002402:	e000      	b.n	8002406 <Motor_ApplyPWM+0x58>
 8002404:	2201      	movs	r2, #1
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	fb12 f303 	smulbb	r3, r2, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	81fb      	strh	r3, [r7, #14]
	uint8_t status = (pwm_sign + dir_sign)&0x01;
 8002410:	7b7a      	ldrb	r2, [r7, #13]
 8002412:	7b3b      	ldrb	r3, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	72fb      	strb	r3, [r7, #11]
	if(status) {
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d04a      	beq.n	80024ba <Motor_ApplyPWM+0x10c>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	891b      	ldrh	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <Motor_ApplyPWM+0x8a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
 8002436:	e018      	b.n	800246a <Motor_ApplyPWM+0xbc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	891b      	ldrh	r3, [r3, #8]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d105      	bne.n	800244c <Motor_ApplyPWM+0x9e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	6393      	str	r3, [r2, #56]	; 0x38
 800244a:	e00e      	b.n	800246a <Motor_ApplyPWM+0xbc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	891b      	ldrh	r3, [r3, #8]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d105      	bne.n	8002460 <Motor_ApplyPWM+0xb2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2300      	movs	r3, #0
 800245c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800245e:	e004      	b.n	800246a <Motor_ApplyPWM+0xbc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	895b      	ldrh	r3, [r3, #10]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <Motor_ApplyPWM+0xd2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 800247e:	e067      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	895b      	ldrh	r3, [r3, #10]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d106      	bne.n	8002496 <Motor_ApplyPWM+0xe8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002492:	6393      	str	r3, [r2, #56]	; 0x38
 8002494:	e05c      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	895b      	ldrh	r3, [r3, #10]
 800249a:	2b08      	cmp	r3, #8
 800249c:	d106      	bne.n	80024ac <Motor_ApplyPWM+0xfe>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024aa:	e051      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80024b8:	e04a      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	891b      	ldrh	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <Motor_ApplyPWM+0x122>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
 80024ce:	e01b      	b.n	8002508 <Motor_ApplyPWM+0x15a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	891b      	ldrh	r3, [r3, #8]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d106      	bne.n	80024e6 <Motor_ApplyPWM+0x138>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024e2:	6393      	str	r3, [r2, #56]	; 0x38
 80024e4:	e010      	b.n	8002508 <Motor_ApplyPWM+0x15a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	891b      	ldrh	r3, [r3, #8]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d106      	bne.n	80024fc <Motor_ApplyPWM+0x14e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024fa:	e005      	b.n	8002508 <Motor_ApplyPWM+0x15a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002506:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	895b      	ldrh	r3, [r3, #10]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <Motor_ApplyPWM+0x16e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
}
 800251a:	e019      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	895b      	ldrh	r3, [r3, #10]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d105      	bne.n	8002530 <Motor_ApplyPWM+0x182>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2300      	movs	r3, #0
 800252c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800252e:	e00f      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	895b      	ldrh	r3, [r3, #10]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d105      	bne.n	8002544 <Motor_ApplyPWM+0x196>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002542:	e005      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2300      	movs	r3, #0
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800254e:	e7ff      	b.n	8002550 <Motor_ApplyPWM+0x1a2>
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = __HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002578:	b29b      	uxth	r3, r3
 800257a:	fb12 f303 	smulbb	r3, r2, r3
 800257e:	b29b      	uxth	r3, r3
 8002580:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  tim_cnt_now - hmot->enc_cnt;
 8002582:	89fa      	ldrh	r2, [r7, #14]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800258a:	b29b      	uxth	r3, r3
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	b21a      	sxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	82da      	strh	r2, [r3, #22]
	hmot->enc_cnt = tim_cnt_now;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	89fa      	ldrh	r2, [r7, #14]
 800259a:	829a      	strh	r2, [r3, #20]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float period) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d036      	beq.n	800262a <Motor_ControlRoutine+0x82>
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d137      	bne.n	8002630 <Motor_ControlRoutine+0x88>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	ee07 3a90 	vmov	s15, r3
 80025d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d8:	edc7 7a03 	vstr	s15, [r7, #12]
		hmot->sum_error += error;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80025e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*period);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80025f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800260a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800260e:	edd7 7a00 	vldr	s15, [r7]
 8002612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	edc7 7a02 	vstr	s15, [r7, #8]
		hmot->pwm = mv;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	619a      	str	r2, [r3, #24]
		hmot->last_error = error;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff febf 	bl	80023ae <Motor_ApplyPWM>
	}
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af04      	add	r7, sp, #16
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <OLED_Command+0x2c>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	230a      	movs	r3, #10
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2301      	movs	r3, #1
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	2200      	movs	r2, #0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	f006 fe96 	bl	8009388 <HAL_I2C_Mem_Write>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000a70 	.word	0x20000a70

08002668 <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	460a      	mov	r2, r1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	4613      	mov	r3, r2
 8002676:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ffdc 	bl	8002638 <OLED_Command>
	OLED_Command(byte2);
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffd8 	bl	8002638 <OLED_Command>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af04      	add	r7, sp, #16
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <OLED_Data+0x2c>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	230a      	movs	r3, #10
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	2301      	movs	r3, #1
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2301      	movs	r3, #1
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	2178      	movs	r1, #120	; 0x78
 80026b0:	f006 fe6a 	bl	8009388 <HAL_I2C_Mem_Write>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000a70 	.word	0x20000a70

080026c0 <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ffab 	bl	8002638 <OLED_Command>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	3302      	adds	r3, #2
 80026f8:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	b2da      	uxtb	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0310 	orr.w	r3, r3, #16
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f7ff ffa9 	bl	8002668 <OLED_DoubleCommand>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e016      	b.n	8002758 <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ffc6 	bl	80026c0 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8002734:	2000      	movs	r0, #0
 8002736:	f7ff ffd8 	bl	80026ea <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 800273a:	2300      	movs	r3, #0
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	e005      	b.n	800274c <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff ffa5 	bl	8002690 <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b7f      	cmp	r3, #127	; 0x7f
 8002750:	ddf6      	ble.n	8002740 <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3301      	adds	r3, #1
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b07      	cmp	r3, #7
 800275c:	dde5      	ble.n	800272a <OLED_ClearRAM+0xc>
			}
		}
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <OLED_Init+0x6c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 8002776:	20ae      	movs	r0, #174	; 0xae
 8002778:	f7ff ff5e 	bl	8002638 <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 800277c:	213f      	movs	r1, #63	; 0x3f
 800277e:	20a8      	movs	r0, #168	; 0xa8
 8002780:	f7ff ff72 	bl	8002668 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 8002784:	2100      	movs	r1, #0
 8002786:	20d3      	movs	r0, #211	; 0xd3
 8002788:	f7ff ff6e 	bl	8002668 <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 800278c:	2040      	movs	r0, #64	; 0x40
 800278e:	f7ff ff53 	bl	8002638 <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 8002792:	20a1      	movs	r0, #161	; 0xa1
 8002794:	f7ff ff50 	bl	8002638 <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 8002798:	20c8      	movs	r0, #200	; 0xc8
 800279a:	f7ff ff4d 	bl	8002638 <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 800279e:	2112      	movs	r1, #18
 80027a0:	20da      	movs	r0, #218	; 0xda
 80027a2:	f7ff ff61 	bl	8002668 <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 80027a6:	2160      	movs	r1, #96	; 0x60
 80027a8:	2081      	movs	r0, #129	; 0x81
 80027aa:	f7ff ff5d 	bl	8002668 <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 80027ae:	20a4      	movs	r0, #164	; 0xa4
 80027b0:	f7ff ff42 	bl	8002638 <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 80027b4:	20a6      	movs	r0, #166	; 0xa6
 80027b6:	f7ff ff3f 	bl	8002638 <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 80027ba:	21f0      	movs	r1, #240	; 0xf0
 80027bc:	20d5      	movs	r0, #213	; 0xd5
 80027be:	f7ff ff53 	bl	8002668 <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 80027c2:	f7ff ffac 	bl	800271e <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 80027c6:	20af      	movs	r0, #175	; 0xaf
 80027c8:	f7ff ff36 	bl	8002638 <OLED_Command>
//	OLED_Load();
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000a70 	.word	0x20000a70

080027d8 <Plan_SetCounter>:
int16_t plan_last_enc;

uint8_t counter_status = 0;
uint8_t action_status = 0;

void Plan_SetCounter() {
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <Plan_SetCounter+0x18>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <Plan_SetCounter+0x1c>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000a74 	.word	0x20000a74
 80027f4:	20000a78 	.word	0x20000a78

080027f8 <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <Plan_CheckCounterValue+0x34>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <Plan_CheckCounterValue+0x38>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1ad1      	subs	r1, r2, r3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4299      	cmp	r1, r3
 8002816:	bf2c      	ite	cs
 8002818:	2301      	movcs	r3, #1
 800281a:	2300      	movcc	r3, #0
 800281c:	b2db      	uxtb	r3, r3
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000a74 	.word	0x20000a74
 8002830:	20000a78 	.word	0x20000a78

08002834 <Plan_CheckSensor>:

uint8_t Plan_CheckSensor(uint8_t s) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	if(s == 0) return 1;
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <Plan_CheckSensor+0x14>
 8002844:	2301      	movs	r3, #1
 8002846:	e00a      	b.n	800285e <Plan_CheckSensor+0x2a>
	else {
		s-=1;
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	3b01      	subs	r3, #1
 800284c:	71fb      	strb	r3, [r7, #7]
		return sensor_disp_status[s] > 0;
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4a06      	ldr	r2, [pc, #24]	; (800286c <Plan_CheckSensor+0x38>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
	}
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000b54 	.word	0x20000b54

08002870 <Plan_Left>:

uint8_t Plan_Left(Action_typedef a) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(LEFT_SENSOR(a.sen_trig)) && counter_status == 0) {
 800287c:	797b      	ldrb	r3, [r7, #5]
 800287e:	f1c3 030d 	rsb	r3, r3, #13
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ffd5 	bl	8002834 <Plan_CheckSensor>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <Plan_Left+0x3c>
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <Plan_Left+0xf4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <Plan_Left+0x3c>
			Plan_SetCounter();
 8002898:	f7ff ff9e 	bl	80027d8 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <Plan_Left+0xf8>)
 800289e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80028a2:	4b32      	ldr	r3, [pc, #200]	; (800296c <Plan_Left+0xfc>)
 80028a4:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <Plan_Left+0xf4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <Plan_Left+0xf4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d151      	bne.n	8002958 <Plan_Left+0xe8>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed, a.forward_speed*plan.turn_speed);
 80028b4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <Plan_Left+0x100>)
 80028bc:	7ddb      	ldrb	r3, [r3, #23]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ca:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <Plan_Left+0x100>)
 80028d2:	7ddb      	ldrb	r3, [r3, #23]
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	ee07 3a10 	vmov	s14, r3
 80028dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80028e0:	eef0 0a47 	vmov.f32	s1, s14
 80028e4:	eeb0 0a67 	vmov.f32	s0, s15
 80028e8:	f000 ff80 	bl	80037ec <Run_SetMotorSpeed>
		switch(a.act_mode) {
 80028ec:	79bb      	ldrb	r3, [r7, #6]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d01e      	beq.n	8002930 <Plan_Left+0xc0>
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	dc2e      	bgt.n	8002954 <Plan_Left+0xe4>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <Plan_Left+0x90>
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d009      	beq.n	8002912 <Plan_Left+0xa2>
 80028fe:	e029      	b.n	8002954 <Plan_Left+0xe4>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff78 	bl	80027f8 <Plan_CheckCounterValue>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01d      	beq.n	800294a <Plan_Left+0xda>
 800290e:	2302      	movs	r3, #2
 8002910:	e023      	b.n	800295a <Plan_Left+0xea>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff6f 	bl	80027f8 <Plan_CheckCounterValue>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d016      	beq.n	800294e <Plan_Left+0xde>
				if(Plan_CheckSensor(LEFT_SENSOR(5))) return 2;
 8002920:	2008      	movs	r0, #8
 8002922:	f7ff ff87 	bl	8002834 <Plan_CheckSensor>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <Plan_Left+0xde>
 800292c:	2302      	movs	r3, #2
 800292e:	e014      	b.n	800295a <Plan_Left+0xea>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <Plan_Left+0xf8>)
 8002932:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002936:	461a      	mov	r2, r3
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <Plan_Left+0xfc>)
 800293a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	4293      	cmp	r3, r2
 8002944:	dd05      	ble.n	8002952 <Plan_Left+0xe2>
 8002946:	2302      	movs	r3, #2
 8002948:	e007      	b.n	800295a <Plan_Left+0xea>
			break;
 800294a:	bf00      	nop
 800294c:	e002      	b.n	8002954 <Plan_Left+0xe4>
			break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <Plan_Left+0xe4>
			break;
 8002952:	bf00      	nop
		}
		return 1;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <Plan_Left+0xea>
	}
	return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000a7e 	.word	0x20000a7e
 8002968:	20000a84 	.word	0x20000a84
 800296c:	20000a7c 	.word	0x20000a7c
 8002970:	20000dfc 	.word	0x20000dfc

08002974 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(RIGHT_SENSOR(a.sen_trig)) && counter_status == 0) {
 8002980:	797b      	ldrb	r3, [r7, #5]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff56 	bl	8002834 <Plan_CheckSensor>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <Plan_Right+0x36>
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <Plan_Right+0xec>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <Plan_Right+0x36>
			Plan_SetCounter();
 8002996:	f7ff ff1f 	bl	80027d8 <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 800299a:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <Plan_Right+0xf0>)
 800299c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <Plan_Right+0xf4>)
 80029a2:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 80029a4:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <Plan_Right+0xec>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <Plan_Right+0xec>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d151      	bne.n	8002a56 <Plan_Right+0xe2>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed, a.reverse_speed*plan.turn_speed);
 80029b2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <Plan_Right+0xf8>)
 80029ba:	7ddb      	ldrb	r3, [r3, #23]
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <Plan_Right+0xf8>)
 80029d0:	7ddb      	ldrb	r3, [r3, #23]
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	ee07 3a10 	vmov	s14, r3
 80029da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029de:	eef0 0a47 	vmov.f32	s1, s14
 80029e2:	eeb0 0a67 	vmov.f32	s0, s15
 80029e6:	f000 ff01 	bl	80037ec <Run_SetMotorSpeed>
		switch(a.act_mode) {
 80029ea:	79bb      	ldrb	r3, [r7, #6]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d01e      	beq.n	8002a2e <Plan_Right+0xba>
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	dc2e      	bgt.n	8002a52 <Plan_Right+0xde>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <Plan_Right+0x8a>
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d009      	beq.n	8002a10 <Plan_Right+0x9c>
 80029fc:	e029      	b.n	8002a52 <Plan_Right+0xde>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fef9 	bl	80027f8 <Plan_CheckCounterValue>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01d      	beq.n	8002a48 <Plan_Right+0xd4>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e023      	b.n	8002a58 <Plan_Right+0xe4>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fef0 	bl	80027f8 <Plan_CheckCounterValue>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <Plan_Right+0xd8>
				if(Plan_CheckSensor(RIGHT_SENSOR(5))) return 2;
 8002a1e:	2005      	movs	r0, #5
 8002a20:	f7ff ff08 	bl	8002834 <Plan_CheckSensor>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <Plan_Right+0xd8>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e014      	b.n	8002a58 <Plan_Right+0xe4>
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <Plan_Right+0xf0>)
 8002a30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <Plan_Right+0xf4>)
 8002a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	79fa      	ldrb	r2, [r7, #7]
 8002a40:	4293      	cmp	r3, r2
 8002a42:	dd05      	ble.n	8002a50 <Plan_Right+0xdc>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e007      	b.n	8002a58 <Plan_Right+0xe4>
			break;
 8002a48:	bf00      	nop
 8002a4a:	e002      	b.n	8002a52 <Plan_Right+0xde>
			break;
 8002a4c:	bf00      	nop
 8002a4e:	e000      	b.n	8002a52 <Plan_Right+0xde>
			break;
 8002a50:	bf00      	nop
		}
		return 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <Plan_Right+0xe4>
	}
	return 0;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000a7e 	.word	0x20000a7e
 8002a64:	20000a84 	.word	0x20000a84
 8002a68:	20000a7c 	.word	0x20000a7c
 8002a6c:	20000dfc 	.word	0x20000dfc

08002a70 <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(LEFT_SENSOR(a.sen_trig)) && counter_status == 0) {
 8002a7c:	797b      	ldrb	r3, [r7, #5]
 8002a7e:	f1c3 030d 	rsb	r3, r3, #13
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fed5 	bl	8002834 <Plan_CheckSensor>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <Plan_Forward+0x3c>
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <Plan_Forward+0xe0>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <Plan_Forward+0x3c>
			Plan_SetCounter();
 8002a98:	f7ff fe9e 	bl	80027d8 <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <Plan_Forward+0xe4>)
 8002a9e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <Plan_Forward+0xe8>)
 8002aa4:	801a      	strh	r2, [r3, #0]
			counter_status = 1;
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <Plan_Forward+0xe0>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <Plan_Forward+0xe0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d147      	bne.n	8002b44 <Plan_Forward+0xd4>
		Run_SetMotorSpeed(plan.speed, plan.speed);
 8002ab4:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <Plan_Forward+0xec>)
 8002ab6:	7d9b      	ldrb	r3, [r3, #22]
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <Plan_Forward+0xec>)
 8002ac2:	7d9b      	ldrb	r3, [r3, #22]
 8002ac4:	ee07 3a10 	vmov	s14, r3
 8002ac8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002acc:	eef0 0a47 	vmov.f32	s1, s14
 8002ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad4:	f000 fe8a 	bl	80037ec <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002ad8:	79bb      	ldrb	r3, [r7, #6]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d01e      	beq.n	8002b1c <Plan_Forward+0xac>
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	dc2e      	bgt.n	8002b40 <Plan_Forward+0xd0>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <Plan_Forward+0x7c>
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d009      	beq.n	8002afe <Plan_Forward+0x8e>
 8002aea:	e029      	b.n	8002b40 <Plan_Forward+0xd0>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fe82 	bl	80027f8 <Plan_CheckCounterValue>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <Plan_Forward+0xc6>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e023      	b.n	8002b46 <Plan_Forward+0xd6>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe79 	bl	80027f8 <Plan_CheckCounterValue>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d016      	beq.n	8002b3a <Plan_Forward+0xca>
				if(Plan_CheckSensor(LEFT_SENSOR(7))) return 2;
 8002b0c:	2006      	movs	r0, #6
 8002b0e:	f7ff fe91 	bl	8002834 <Plan_CheckSensor>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <Plan_Forward+0xca>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e014      	b.n	8002b46 <Plan_Forward+0xd6>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <Plan_Forward+0xe4>)
 8002b1e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <Plan_Forward+0xe8>)
 8002b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	79fa      	ldrb	r2, [r7, #7]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	dd05      	ble.n	8002b3e <Plan_Forward+0xce>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e007      	b.n	8002b46 <Plan_Forward+0xd6>
			break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <Plan_Forward+0xd0>
			break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <Plan_Forward+0xd0>
			break;
 8002b3e:	bf00      	nop
		}
		return 1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <Plan_Forward+0xd6>
	}
	return 0;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000a7e 	.word	0x20000a7e
 8002b54:	20000a84 	.word	0x20000a84
 8002b58:	20000a7c 	.word	0x20000a7c
 8002b5c:	20000dfc 	.word	0x20000dfc

08002b60 <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <Plan_Follow+0x7c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <Plan_Follow+0x28>
		Plan_SetCounter();
 8002b74:	f7ff fe30 	bl	80027d8 <Plan_SetCounter>
		plan_last_enc = MOTOR_L.enc_cnt;
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <Plan_Follow+0x80>)
 8002b7a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <Plan_Follow+0x84>)
 8002b80:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <Plan_Follow+0x7c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <Plan_Follow+0x34>
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d00c      	beq.n	8002bac <Plan_Follow+0x4c>
 8002b92:	e018      	b.n	8002bc6 <Plan_Follow+0x66>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe2e 	bl	80027f8 <Plan_CheckCounterValue>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <Plan_Follow+0x6a>
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <Plan_Follow+0x6a>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e012      	b.n	8002bd2 <Plan_Follow+0x72>
		break;
	case 2:
		if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <Plan_Follow+0x80>)
 8002bae:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <Plan_Follow+0x84>)
 8002bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	dd05      	ble.n	8002bce <Plan_Follow+0x6e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e005      	b.n	8002bd2 <Plan_Follow+0x72>
		break;
	default: return 2;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e003      	b.n	8002bd2 <Plan_Follow+0x72>
		break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <Plan_Follow+0x70>
		break;
 8002bce:	bf00      	nop
	}
	return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000a7e 	.word	0x20000a7e
 8002be0:	20000a84 	.word	0x20000a84
 8002be4:	20000a7c 	.word	0x20000a7c

08002be8 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002bf4:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <Plan_FollowLeft+0xf4>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <Plan_FollowLeft+0x28>
		Plan_SetCounter();
 8002bfc:	f7ff fdec 	bl	80027d8 <Plan_SetCounter>
		plan_last_enc = MOTOR_L.enc_cnt;
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <Plan_FollowLeft+0xf8>)
 8002c02:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002c06:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <Plan_FollowLeft+0xfc>)
 8002c08:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002c0a:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <Plan_FollowLeft+0xf4>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(LEFT_SENSOR(a.sen_trig)) && counter_status == 1) {
 8002c10:	797b      	ldrb	r3, [r7, #5]
 8002c12:	f1c3 030d 	rsb	r3, r3, #13
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fe0b 	bl	8002834 <Plan_CheckSensor>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <Plan_FollowLeft+0x4a>
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <Plan_FollowLeft+0xf4>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <Plan_FollowLeft+0x4a>
		counter_status = 2;
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <Plan_FollowLeft+0xf4>)
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <Plan_FollowLeft+0xf4>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d126      	bne.n	8002c88 <Plan_FollowLeft+0xa0>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed, a.forward_speed*plan.turn_speed);
 8002c3a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <Plan_FollowLeft+0x100>)
 8002c42:	7ddb      	ldrb	r3, [r3, #23]
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c50:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <Plan_FollowLeft+0x100>)
 8002c58:	7ddb      	ldrb	r3, [r3, #23]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	ee07 3a10 	vmov	s14, r3
 8002c62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c66:	eef0 0a47 	vmov.f32	s1, s14
 8002c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6e:	f000 fdbd 	bl	80037ec <Run_SetMotorSpeed>
		if(Plan_CheckSensor(LEFT_SENSOR(5)) > 0) {
 8002c72:	2008      	movs	r0, #8
 8002c74:	f7ff fdde 	bl	8002834 <Plan_CheckSensor>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <Plan_FollowLeft+0x9c>
			counter_status = 1;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <Plan_FollowLeft+0xf4>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e024      	b.n	8002cd2 <Plan_FollowLeft+0xea>
	}
	switch(a.act_mode) {
 8002c88:	79bb      	ldrb	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <Plan_FollowLeft+0xac>
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d00c      	beq.n	8002cac <Plan_FollowLeft+0xc4>
 8002c92:	e018      	b.n	8002cc6 <Plan_FollowLeft+0xde>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fdae 	bl	80027f8 <Plan_CheckCounterValue>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d013      	beq.n	8002cca <Plan_FollowLeft+0xe2>
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <Plan_FollowLeft+0xe2>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e012      	b.n	8002cd2 <Plan_FollowLeft+0xea>
		break;
	case 2:
		if(MOTOR_L.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <Plan_FollowLeft+0xf8>)
 8002cae:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <Plan_FollowLeft+0xfc>)
 8002cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	dd05      	ble.n	8002cce <Plan_FollowLeft+0xe6>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e005      	b.n	8002cd2 <Plan_FollowLeft+0xea>
		break;
	default: return 2;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e003      	b.n	8002cd2 <Plan_FollowLeft+0xea>
		break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <Plan_FollowLeft+0xe8>
		break;
 8002cce:	bf00      	nop
	}
	return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000a7e 	.word	0x20000a7e
 8002ce0:	20000a84 	.word	0x20000a84
 8002ce4:	20000a7c 	.word	0x20000a7c
 8002ce8:	20000dfc 	.word	0x20000dfc

08002cec <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002cf8:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <Plan_FollowRight+0xec>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <Plan_FollowRight+0x28>
		Plan_SetCounter();
 8002d00:	f7ff fd6a 	bl	80027d8 <Plan_SetCounter>
		plan_last_enc = MOTOR_R.enc_cnt;
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <Plan_FollowRight+0xf0>)
 8002d06:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <Plan_FollowRight+0xf4>)
 8002d0c:	801a      	strh	r2, [r3, #0]
		counter_status = 1;
 8002d0e:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <Plan_FollowRight+0xec>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(RIGHT_SENSOR(a.sen_trig)) && counter_status == 1) {
 8002d14:	797b      	ldrb	r3, [r7, #5]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd8c 	bl	8002834 <Plan_CheckSensor>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <Plan_FollowRight+0x44>
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <Plan_FollowRight+0xec>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <Plan_FollowRight+0x44>
		counter_status = 2;
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <Plan_FollowRight+0xec>)
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <Plan_FollowRight+0xec>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d126      	bne.n	8002d86 <Plan_FollowRight+0x9a>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed, a.reverse_speed*plan.turn_speed);
 8002d38:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <Plan_FollowRight+0xf8>)
 8002d40:	7ddb      	ldrb	r3, [r3, #23]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <Plan_FollowRight+0xf8>)
 8002d56:	7ddb      	ldrb	r3, [r3, #23]
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	ee07 3a10 	vmov	s14, r3
 8002d60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d64:	eef0 0a47 	vmov.f32	s1, s14
 8002d68:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6c:	f000 fd3e 	bl	80037ec <Run_SetMotorSpeed>
		if(Plan_CheckSensor(RIGHT_SENSOR(5)) > 0) {
 8002d70:	2005      	movs	r0, #5
 8002d72:	f7ff fd5f 	bl	8002834 <Plan_CheckSensor>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <Plan_FollowRight+0x96>
			counter_status = 1;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <Plan_FollowRight+0xec>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e024      	b.n	8002dd0 <Plan_FollowRight+0xe4>
	}
	switch(a.act_mode) {
 8002d86:	79bb      	ldrb	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <Plan_FollowRight+0xa6>
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d00c      	beq.n	8002daa <Plan_FollowRight+0xbe>
 8002d90:	e018      	b.n	8002dc4 <Plan_FollowRight+0xd8>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fd2f 	bl	80027f8 <Plan_CheckCounterValue>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <Plan_FollowRight+0xdc>
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <Plan_FollowRight+0xdc>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e012      	b.n	8002dd0 <Plan_FollowRight+0xe4>
		break;
	case 2:
		if(MOTOR_R.enc_cnt - plan_last_enc > a.act_value) return 2;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <Plan_FollowRight+0xf0>)
 8002dac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <Plan_FollowRight+0xf4>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	dd05      	ble.n	8002dcc <Plan_FollowRight+0xe0>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e005      	b.n	8002dd0 <Plan_FollowRight+0xe4>
		break;
	default: return 2;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e003      	b.n	8002dd0 <Plan_FollowRight+0xe4>
		break;
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <Plan_FollowRight+0xe2>
		break;
 8002dcc:	bf00      	nop
	}
	return 0;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000a7e 	.word	0x20000a7e
 8002ddc:	20000a84 	.word	0x20000a84
 8002de0:	20000a7c 	.word	0x20000a7c
 8002de4:	20000dfc 	.word	0x20000dfc

08002de8 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(LEFT_SENSOR(a.sen_trig))) {
 8002df4:	797b      	ldrb	r3, [r7, #5]
 8002df6:	f1c3 030d 	rsb	r3, r3, #13
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fd19 	bl	8002834 <Plan_CheckSensor>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <Plan_Invert+0x28>
		SEN_Invert();
 8002e08:	f000 ff96 	bl	8003d38 <SEN_Invert>
		return 2;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e000      	b.n	8002e12 <Plan_Invert+0x2a>
	}
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 8002e26:	2302      	movs	r3, #2
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 8002e40:	2302      	movs	r3, #2
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e5c:	ed87 0a00 	vstr	s0, [r7]
	static uint8_t stat = 0;
	if(counter_status == 0) {
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <Plan_ActionInit+0x90>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <Plan_ActionInit+0x22>
		Plan_SetCounter();
 8002e68:	f7ff fcb6 	bl	80027d8 <Plan_SetCounter>
		counter_status = 1;
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <Plan_ActionInit+0x90>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fcbf 	bl	80027f8 <Plan_CheckCounterValue>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <Plan_ActionInit+0x48>
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <Plan_ActionInit+0x94>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <Plan_ActionInit+0x48>
		counter_status = 0;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <Plan_ActionInit+0x90>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
		stat = 1;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <Plan_ActionInit+0x94>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
		return 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e01f      	b.n	8002ed8 <Plan_ActionInit+0x88>
	}

	Run_LineTracing(a.boost_speed, period, 0);
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	edd7 0a00 	vldr	s1, [r7]
 8002ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eac:	f000 fc6e 	bl	800378c <Run_LineTracing>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 8002eb0:	7b3b      	ldrb	r3, [r7, #12]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fca0 	bl	80027f8 <Plan_CheckCounterValue>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <Plan_ActionInit+0x86>
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <Plan_ActionInit+0x94>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <Plan_ActionInit+0x86>
		counter_status = 0;
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <Plan_ActionInit+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
		stat = 0;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <Plan_ActionInit+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
		return 3;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e000      	b.n	8002ed8 <Plan_ActionInit+0x88>
	}
	return 0;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000a7e 	.word	0x20000a7e
 8002ee4:	20000a80 	.word	0x20000a80

08002ee8 <Plan_Stop>:


uint8_t Plan_Stop() {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 8002eec:	eddf 0a08 	vldr	s1, [pc, #32]	; 8002f10 <Plan_Stop+0x28>
 8002ef0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002f10 <Plan_Stop+0x28>
 8002ef4:	f000 fc7a 	bl	80037ec <Run_SetMotorSpeed>
	SEN_BlackLine();
 8002ef8:	f000 ff12 	bl	8003d20 <SEN_BlackLine>
	main_flag &=~ MAIN_FLAG_RUN;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <Plan_Stop+0x2c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <Plan_Stop+0x2c>)
 8002f08:	701a      	strb	r2, [r3, #0]
	return 1;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	00000000 	.word	0x00000000
 8002f14:	20000a68 	.word	0x20000a68

08002f18 <Plan_Start>:

void Plan_Start() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <Plan_Start+0x5c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <Plan_Start+0x60>)
 8002f24:	4413      	add	r3, r2
 8002f26:	789a      	ldrb	r2, [r3, #2]
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <Plan_Start+0x64>)
 8002f2a:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <Plan_Start+0x64>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 fa49 	bl	80043c8 <GetActionSequenceInit>
	action_status = 0;
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <Plan_Start+0x68>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <Plan_Start+0x6c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <Plan_Start+0x70>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
	kp = plan.kpid[0];
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <Plan_Start+0x60>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <Plan_Start+0x74>)
 8002f4e:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <Plan_Start+0x60>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <Plan_Start+0x78>)
 8002f56:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <Plan_Start+0x60>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <Plan_Start+0x7c>)
 8002f5e:	6013      	str	r3, [r2, #0]
	main_flag |= MAIN_FLAG_RUN;
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <Plan_Start+0x80>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <Plan_Start+0x80>)
 8002f6c:	701a      	strb	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000da8 	.word	0x20000da8
 8002f78:	20000dfc 	.word	0x20000dfc
 8002f7c:	20000da9 	.word	0x20000da9
 8002f80:	20000a7f 	.word	0x20000a7f
 8002f84:	20000a74 	.word	0x20000a74
 8002f88:	20000a78 	.word	0x20000a78
 8002f8c:	20000aec 	.word	0x20000aec
 8002f90:	20000af0 	.word	0x20000af0
 8002f94:	20000af4 	.word	0x20000af4
 8002f98:	20000a68 	.word	0x20000a68

08002f9c <Plan_UIRoutine>:

void Plan_UIRoutine() {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <Plan_UIRoutine+0x44>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d013      	beq.n	8002fd6 <Plan_UIRoutine+0x3a>
		if(main_flag & MAIN_FLAG_NEXT) {
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <Plan_UIRoutine+0x44>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <Plan_UIRoutine+0x3a>
			GetAction(num_index);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <Plan_UIRoutine+0x48>)
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 ff3c 	bl	8003e40 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <Plan_UIRoutine+0x44>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f023 0302 	bic.w	r3, r3, #2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <Plan_UIRoutine+0x44>)
 8002fd4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000a68 	.word	0x20000a68
 8002fe4:	20000da9 	.word	0x20000da9

08002fe8 <Plan_Main>:

void Plan_Main(float period) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 8002ff2:	4b9b      	ldr	r3, [pc, #620]	; (8003260 <Plan_Main+0x278>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 812b 	beq.w	8003256 <Plan_Main+0x26e>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003000:	4b97      	ldr	r3, [pc, #604]	; (8003260 <Plan_Main+0x278>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <Plan_Main+0x40>
			Run_LineTracing(plan.speed, period, 0);
 800300c:	4b95      	ldr	r3, [pc, #596]	; (8003264 <Plan_Main+0x27c>)
 800300e:	7d9b      	ldrb	r3, [r3, #22]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	2000      	movs	r0, #0
 800301a:	edd7 0a01 	vldr	s1, [r7, #4]
 800301e:	eeb0 0a67 	vmov.f32	s0, s15
 8003022:	f000 fbb3 	bl	800378c <Run_LineTracing>
 8003026:	e111      	b.n	800324c <Plan_Main+0x264>
		}
		else {
			uint8_t retval;
			if(action_status == 0 && plan_active.act != 0) {
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <Plan_Main+0x280>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d117      	bne.n	8003060 <Plan_Main+0x78>
 8003030:	4b8e      	ldr	r3, [pc, #568]	; (800326c <Plan_Main+0x284>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <Plan_Main+0x78>
				retval = Plan_ActionInit(plan_active, period);
 8003038:	4b8c      	ldr	r3, [pc, #560]	; (800326c <Plan_Main+0x284>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4610      	mov	r0, r2
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4611      	mov	r1, r2
 8003042:	7a1a      	ldrb	r2, [r3, #8]
 8003044:	7a5b      	ldrb	r3, [r3, #9]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	431a      	orrs	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	f362 030f 	bfi	r3, r2, #0, #16
 8003050:	ed97 0a01 	vldr	s0, [r7, #4]
 8003054:	461a      	mov	r2, r3
 8003056:	f7ff fefb 	bl	8002e50 <Plan_ActionInit>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e0c4      	b.n	80031ea <Plan_Main+0x202>
			}
			else {
				switch(plan_active.act) {
 8003060:	4b82      	ldr	r3, [pc, #520]	; (800326c <Plan_Main+0x284>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b09      	cmp	r3, #9
 8003066:	f200 80be 	bhi.w	80031e6 <Plan_Main+0x1fe>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <Plan_Main+0x88>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a3 	.word	0x080030a3
 8003078:	080030c7 	.word	0x080030c7
 800307c:	080030eb 	.word	0x080030eb
 8003080:	0800310f 	.word	0x0800310f
 8003084:	08003133 	.word	0x08003133
 8003088:	08003157 	.word	0x08003157
 800308c:	0800317b 	.word	0x0800317b
 8003090:	0800319f 	.word	0x0800319f
 8003094:	080031c3 	.word	0x080031c3
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 8003098:	f7ff ff26 	bl	8002ee8 <Plan_Stop>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e0a3      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <Plan_Main+0x284>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4610      	mov	r0, r2
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4611      	mov	r1, r2
 80030ac:	7a1a      	ldrb	r2, [r3, #8]
 80030ae:	7a5b      	ldrb	r3, [r3, #9]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	431a      	orrs	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	f362 030f 	bfi	r3, r2, #0, #16
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fbd8 	bl	8002870 <Plan_Left>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e091      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 80030c6:	4b69      	ldr	r3, [pc, #420]	; (800326c <Plan_Main+0x284>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4610      	mov	r0, r2
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4611      	mov	r1, r2
 80030d0:	7a1a      	ldrb	r2, [r3, #8]
 80030d2:	7a5b      	ldrb	r3, [r3, #9]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	431a      	orrs	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	f362 030f 	bfi	r3, r2, #0, #16
 80030de:	461a      	mov	r2, r3
 80030e0:	f7ff fc48 	bl	8002974 <Plan_Right>
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e07f      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active); 	break;
 80030ea:	4b60      	ldr	r3, [pc, #384]	; (800326c <Plan_Main+0x284>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4610      	mov	r0, r2
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4611      	mov	r1, r2
 80030f4:	7a1a      	ldrb	r2, [r3, #8]
 80030f6:	7a5b      	ldrb	r3, [r3, #9]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	431a      	orrs	r2, r3
 80030fc:	2300      	movs	r3, #0
 80030fe:	f362 030f 	bfi	r3, r2, #0, #16
 8003102:	461a      	mov	r2, r3
 8003104:	f7ff fcb4 	bl	8002a70 <Plan_Forward>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e06d      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 800310e:	4b57      	ldr	r3, [pc, #348]	; (800326c <Plan_Main+0x284>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4610      	mov	r0, r2
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4611      	mov	r1, r2
 8003118:	7a1a      	ldrb	r2, [r3, #8]
 800311a:	7a5b      	ldrb	r3, [r3, #9]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	431a      	orrs	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	f362 030f 	bfi	r3, r2, #0, #16
 8003126:	461a      	mov	r2, r3
 8003128:	f7ff fd1a 	bl	8002b60 <Plan_Follow>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e05b      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 8003132:	4b4e      	ldr	r3, [pc, #312]	; (800326c <Plan_Main+0x284>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4610      	mov	r0, r2
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	4611      	mov	r1, r2
 800313c:	7a1a      	ldrb	r2, [r3, #8]
 800313e:	7a5b      	ldrb	r3, [r3, #9]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	2300      	movs	r3, #0
 8003146:	f362 030f 	bfi	r3, r2, #0, #16
 800314a:	461a      	mov	r2, r3
 800314c:	f7ff fd4c 	bl	8002be8 <Plan_FollowLeft>
 8003150:	4603      	mov	r3, r0
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e049      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 8003156:	4b45      	ldr	r3, [pc, #276]	; (800326c <Plan_Main+0x284>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4610      	mov	r0, r2
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4611      	mov	r1, r2
 8003160:	7a1a      	ldrb	r2, [r3, #8]
 8003162:	7a5b      	ldrb	r3, [r3, #9]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	431a      	orrs	r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	f362 030f 	bfi	r3, r2, #0, #16
 800316e:	461a      	mov	r2, r3
 8003170:	f7ff fdbc 	bl	8002cec <Plan_FollowRight>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e037      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 800317a:	4b3c      	ldr	r3, [pc, #240]	; (800326c <Plan_Main+0x284>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4610      	mov	r0, r2
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4611      	mov	r1, r2
 8003184:	7a1a      	ldrb	r2, [r3, #8]
 8003186:	7a5b      	ldrb	r3, [r3, #9]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	431a      	orrs	r2, r3
 800318c:	2300      	movs	r3, #0
 800318e:	f362 030f 	bfi	r3, r2, #0, #16
 8003192:	461a      	mov	r2, r3
 8003194:	f7ff fe28 	bl	8002de8 <Plan_Invert>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e025      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 800319e:	4b33      	ldr	r3, [pc, #204]	; (800326c <Plan_Main+0x284>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4610      	mov	r0, r2
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4611      	mov	r1, r2
 80031a8:	7a1a      	ldrb	r2, [r3, #8]
 80031aa:	7a5b      	ldrb	r3, [r3, #9]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	431a      	orrs	r2, r3
 80031b0:	2300      	movs	r3, #0
 80031b2:	f362 030f 	bfi	r3, r2, #0, #16
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7ff fe2f 	bl	8002e1a <Plan_NextPlan>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e013      	b.n	80031ea <Plan_Main+0x202>
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <Plan_Main+0x284>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4610      	mov	r0, r2
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4611      	mov	r1, r2
 80031cc:	7a1a      	ldrb	r2, [r3, #8]
 80031ce:	7a5b      	ldrb	r3, [r3, #9]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	431a      	orrs	r2, r3
 80031d4:	2300      	movs	r3, #0
 80031d6:	f362 030f 	bfi	r3, r2, #0, #16
 80031da:	461a      	mov	r2, r3
 80031dc:	f7ff fe2a 	bl	8002e34 <Plan_Null>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e001      	b.n	80031ea <Plan_Main+0x202>
				default: retval = 2;
 80031e6:	2302      	movs	r3, #2
 80031e8:	73fb      	strb	r3, [r7, #15]
				}
			}
			if(retval == 0) {
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <Plan_Main+0x224>
				Run_LineTracing(plan.speed, period, 0);
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <Plan_Main+0x27c>)
 80031f2:	7d9b      	ldrb	r3, [r3, #22]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	2000      	movs	r0, #0
 80031fe:	edd7 0a01 	vldr	s1, [r7, #4]
 8003202:	eeb0 0a67 	vmov.f32	s0, s15
 8003206:	f000 fac1 	bl	800378c <Run_LineTracing>
 800320a:	e01f      	b.n	800324c <Plan_Main+0x264>
			}
			else if(retval == 2){
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d113      	bne.n	800323a <Plan_Main+0x252>
				counter_status = 0;
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <Plan_Main+0x288>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <Plan_Main+0x280>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
				num_index++;
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <Plan_Main+0x28c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <Plan_Main+0x28c>)
 8003228:	701a      	strb	r2, [r3, #0]
				main_flag |= MAIN_FLAG_NEXT;
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <Plan_Main+0x278>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <Plan_Main+0x278>)
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e008      	b.n	800324c <Plan_Main+0x264>
			}
			else if(retval == 3){
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d105      	bne.n	800324c <Plan_Main+0x264>
				counter_status = 0;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <Plan_Main+0x288>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
				action_status = 1;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <Plan_Main+0x280>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
			}
		}
		plan_counter++;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <Plan_Main+0x290>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <Plan_Main+0x290>)
 8003254:	6013      	str	r3, [r2, #0]
	}
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000a68 	.word	0x20000a68
 8003264:	20000dfc 	.word	0x20000dfc
 8003268:	20000a7f 	.word	0x20000a7f
 800326c:	20000df0 	.word	0x20000df0
 8003270:	20000a7e 	.word	0x20000a7e
 8003274:	20000da9 	.word	0x20000da9
 8003278:	20000a74 	.word	0x20000a74

0800327c <Run_Init>:
#include "bindef.h"


Motor_typedef motor[2];

void Run_Init() {
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 8003280:	2268      	movs	r2, #104	; 0x68
 8003282:	2100      	movs	r1, #0
 8003284:	4818      	ldr	r0, [pc, #96]	; (80032e8 <Run_Init+0x6c>)
 8003286:	f009 fc71 	bl	800cb6c <memset>

	motor[0].mode = MOTOR_MODE_OPEN;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <Run_Init+0x6c>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <Run_Init+0x6c>)
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <Run_Init+0x70>)
 8003294:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <Run_Init+0x6c>)
 8003298:	2200      	movs	r2, #0
 800329a:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <Run_Init+0x6c>)
 800329e:	2204      	movs	r2, #4
 80032a0:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <Run_Init+0x6c>)
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <Run_Init+0x74>)
 80032a6:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <Run_Init+0x6c>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.0095;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <Run_Init+0x6c>)
 80032b0:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <Run_Init+0x78>)
 80032b2:	61da      	str	r2, [r3, #28]

	motor[1].mode = motor[0].mode;
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <Run_Init+0x6c>)
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <Run_Init+0x6c>)
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	motor[1].pwm_htim = &htim3;
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <Run_Init+0x6c>)
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <Run_Init+0x70>)
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
	motor[1].ch1 = TIM_CHANNEL_4;
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <Run_Init+0x6c>)
 80032c6:	220c      	movs	r2, #12
 80032c8:	879a      	strh	r2, [r3, #60]	; 0x3c
	motor[1].ch2 = TIM_CHANNEL_3;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <Run_Init+0x6c>)
 80032cc:	2208      	movs	r2, #8
 80032ce:	87da      	strh	r2, [r3, #62]	; 0x3e
	motor[1].enc_htim = &htim4;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <Run_Init+0x6c>)
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <Run_Init+0x7c>)
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
	motor[1].dir = 1;
 80032d6:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <Run_Init+0x6c>)
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	motor[1].pwm_factor = 0.01;
 80032de:	4b02      	ldr	r3, [pc, #8]	; (80032e8 <Run_Init+0x6c>)
 80032e0:	4a06      	ldr	r2, [pc, #24]	; (80032fc <Run_Init+0x80>)
 80032e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000a84 	.word	0x20000a84
 80032ec:	20000eb8 	.word	0x20000eb8
 80032f0:	20000e70 	.word	0x20000e70
 80032f4:	3c1ba5e3 	.word	0x3c1ba5e3
 80032f8:	20000f00 	.word	0x20000f00
 80032fc:	3c23d70a 	.word	0x3c23d70a

08003300 <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 800330a:	ed97 0a01 	vldr	s0, [r7, #4]
 800330e:	480b      	ldr	r0, [pc, #44]	; (800333c <Run_MotorRoutine+0x3c>)
 8003310:	f7ff f924 	bl	800255c <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 8003314:	ed97 0a01 	vldr	s0, [r7, #4]
 8003318:	4809      	ldr	r0, [pc, #36]	; (8003340 <Run_MotorRoutine+0x40>)
 800331a:	f7ff f91f 	bl	800255c <Motor_EnocderRoutine>
	Motor_ControlRoutine(&motor[0], period);
 800331e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003322:	4806      	ldr	r0, [pc, #24]	; (800333c <Run_MotorRoutine+0x3c>)
 8003324:	f7ff f940 	bl	80025a8 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], period);
 8003328:	ed97 0a01 	vldr	s0, [r7, #4]
 800332c:	4804      	ldr	r0, [pc, #16]	; (8003340 <Run_MotorRoutine+0x40>)
 800332e:	f7ff f93b 	bl	80025a8 <Motor_ControlRoutine>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000a84 	.word	0x20000a84
 8003340:	20000ab8 	.word	0x20000ab8

08003344 <Run_YawSpeed>:
float kp;
float ki;
float kd;
uint16_t sum_error;

float Run_YawSpeed(float period, uint8_t flag) {
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	ed87 0a01 	vstr	s0, [r7, #4]
 800334e:	4603      	mov	r3, r0
 8003350:	70fb      	strb	r3, [r7, #3]
	static int16_t last_error = 0;
	int16_t error = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	83fb      	strh	r3, [r7, #30]

	uint16_t pr_sensor_bin = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	83bb      	strh	r3, [r7, #28]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 800335a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800335e:	837b      	strh	r3, [r7, #26]
	if(flag&0x01==0x01) {
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <Run_YawSpeed+0x3c>
		pr_sensor_bin = (~sensor_binary) & mask;
 800336a:	4bc8      	ldr	r3, [pc, #800]	; (800368c <Run_YawSpeed+0x348>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b21b      	sxth	r3, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	b21a      	sxth	r2, r3
 8003374:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003378:	4013      	ands	r3, r2
 800337a:	b21b      	sxth	r3, r3
 800337c:	83bb      	strh	r3, [r7, #28]
 800337e:	e004      	b.n	800338a <Run_YawSpeed+0x46>
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 8003380:	4bc2      	ldr	r3, [pc, #776]	; (800368c <Run_YawSpeed+0x348>)
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	8b7b      	ldrh	r3, [r7, #26]
 8003386:	4013      	ands	r3, r2
 8003388:	83bb      	strh	r3, [r7, #28]
	}

	switch(sensor_binary) {
 800338a:	4bc0      	ldr	r3, [pc, #768]	; (800368c <Run_YawSpeed+0x348>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003392:	f000 817d 	beq.w	8003690 <Run_YawSpeed+0x34c>
 8003396:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800339a:	f300 8191 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 800339e:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80033a2:	f000 8178 	beq.w	8003696 <Run_YawSpeed+0x352>
 80033a6:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80033aa:	f300 8189 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80033ae:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80033b2:	f000 8173 	beq.w	800369c <Run_YawSpeed+0x358>
 80033b6:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80033ba:	f300 8181 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80033be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033c2:	f000 816e 	beq.w	80036a2 <Run_YawSpeed+0x35e>
 80033c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033ca:	f300 8179 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d2:	f000 8169 	beq.w	80036a8 <Run_YawSpeed+0x364>
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	f300 8171 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80033de:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 80033e2:	f000 814d 	beq.w	8003680 <Run_YawSpeed+0x33c>
 80033e6:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 80033ea:	f300 8169 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80033ee:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80033f2:	f000 8148 	beq.w	8003686 <Run_YawSpeed+0x342>
 80033f6:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80033fa:	f300 8161 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80033fe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003402:	4293      	cmp	r3, r2
 8003404:	f000 8159 	beq.w	80036ba <Run_YawSpeed+0x376>
 8003408:	f640 72fc 	movw	r2, #4092	; 0xffc
 800340c:	4293      	cmp	r3, r2
 800340e:	f300 8157 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003412:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003416:	f000 812d 	beq.w	8003674 <Run_YawSpeed+0x330>
 800341a:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 800341e:	f300 814f 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003422:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003426:	f000 8128 	beq.w	800367a <Run_YawSpeed+0x336>
 800342a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800342e:	f300 8147 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003432:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003436:	f000 813d 	beq.w	80036b4 <Run_YawSpeed+0x370>
 800343a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800343e:	f300 813f 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003442:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003446:	f000 810f 	beq.w	8003668 <Run_YawSpeed+0x324>
 800344a:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 800344e:	f300 8137 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003452:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003456:	f000 810a 	beq.w	800366e <Run_YawSpeed+0x32a>
 800345a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800345e:	f300 812f 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003462:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8003466:	f000 8122 	beq.w	80036ae <Run_YawSpeed+0x36a>
 800346a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 800346e:	f300 8127 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003472:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8003476:	f000 80f1 	beq.w	800365c <Run_YawSpeed+0x318>
 800347a:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 800347e:	f300 811f 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003482:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003486:	f000 80ec 	beq.w	8003662 <Run_YawSpeed+0x31e>
 800348a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800348e:	f300 8117 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 8003492:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003496:	f000 80da 	beq.w	800364e <Run_YawSpeed+0x30a>
 800349a:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800349e:	f300 810f 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80034a2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80034a6:	f000 80d6 	beq.w	8003656 <Run_YawSpeed+0x312>
 80034aa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80034ae:	f300 8107 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80034b2:	2bf8      	cmp	r3, #248	; 0xf8
 80034b4:	f000 80c3 	beq.w	800363e <Run_YawSpeed+0x2fa>
 80034b8:	2bf8      	cmp	r3, #248	; 0xf8
 80034ba:	f300 8101 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80034be:	2bf0      	cmp	r3, #240	; 0xf0
 80034c0:	f000 80c1 	beq.w	8003646 <Run_YawSpeed+0x302>
 80034c4:	2bf0      	cmp	r3, #240	; 0xf0
 80034c6:	f300 80fb 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80034ca:	2b7c      	cmp	r3, #124	; 0x7c
 80034cc:	f000 80af 	beq.w	800362e <Run_YawSpeed+0x2ea>
 80034d0:	2b7c      	cmp	r3, #124	; 0x7c
 80034d2:	f300 80f5 	bgt.w	80036c0 <Run_YawSpeed+0x37c>
 80034d6:	2b3e      	cmp	r3, #62	; 0x3e
 80034d8:	f300 8086 	bgt.w	80035e8 <Run_YawSpeed+0x2a4>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f340 80ef 	ble.w	80036c0 <Run_YawSpeed+0x37c>
 80034e2:	3b01      	subs	r3, #1
 80034e4:	2b3d      	cmp	r3, #61	; 0x3d
 80034e6:	f200 80eb 	bhi.w	80036c0 <Run_YawSpeed+0x37c>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <Run_YawSpeed+0x1ac>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	080035ef 	.word	0x080035ef
 80034f4:	080036c1 	.word	0x080036c1
 80034f8:	080035f7 	.word	0x080035f7
 80034fc:	080036c1 	.word	0x080036c1
 8003500:	080036c1 	.word	0x080036c1
 8003504:	080036c1 	.word	0x080036c1
 8003508:	080035ff 	.word	0x080035ff
 800350c:	080036c1 	.word	0x080036c1
 8003510:	080036c1 	.word	0x080036c1
 8003514:	080036c1 	.word	0x080036c1
 8003518:	080036c1 	.word	0x080036c1
 800351c:	080036c1 	.word	0x080036c1
 8003520:	080036c1 	.word	0x080036c1
 8003524:	080036c1 	.word	0x080036c1
 8003528:	08003607 	.word	0x08003607
 800352c:	080036c1 	.word	0x080036c1
 8003530:	080036c1 	.word	0x080036c1
 8003534:	080036c1 	.word	0x080036c1
 8003538:	080036c1 	.word	0x080036c1
 800353c:	080036c1 	.word	0x080036c1
 8003540:	080036c1 	.word	0x080036c1
 8003544:	080036c1 	.word	0x080036c1
 8003548:	080036c1 	.word	0x080036c1
 800354c:	080036c1 	.word	0x080036c1
 8003550:	080036c1 	.word	0x080036c1
 8003554:	080036c1 	.word	0x080036c1
 8003558:	080036c1 	.word	0x080036c1
 800355c:	080036c1 	.word	0x080036c1
 8003560:	080036c1 	.word	0x080036c1
 8003564:	08003617 	.word	0x08003617
 8003568:	0800360f 	.word	0x0800360f
 800356c:	080036c1 	.word	0x080036c1
 8003570:	080036c1 	.word	0x080036c1
 8003574:	080036c1 	.word	0x080036c1
 8003578:	080036c1 	.word	0x080036c1
 800357c:	080036c1 	.word	0x080036c1
 8003580:	080036c1 	.word	0x080036c1
 8003584:	080036c1 	.word	0x080036c1
 8003588:	080036c1 	.word	0x080036c1
 800358c:	080036c1 	.word	0x080036c1
 8003590:	080036c1 	.word	0x080036c1
 8003594:	080036c1 	.word	0x080036c1
 8003598:	080036c1 	.word	0x080036c1
 800359c:	080036c1 	.word	0x080036c1
 80035a0:	080036c1 	.word	0x080036c1
 80035a4:	080036c1 	.word	0x080036c1
 80035a8:	080036c1 	.word	0x080036c1
 80035ac:	080036c1 	.word	0x080036c1
 80035b0:	080036c1 	.word	0x080036c1
 80035b4:	080036c1 	.word	0x080036c1
 80035b8:	080036c1 	.word	0x080036c1
 80035bc:	080036c1 	.word	0x080036c1
 80035c0:	080036c1 	.word	0x080036c1
 80035c4:	080036c1 	.word	0x080036c1
 80035c8:	080036c1 	.word	0x080036c1
 80035cc:	080036c1 	.word	0x080036c1
 80035d0:	080036c1 	.word	0x080036c1
 80035d4:	080036c1 	.word	0x080036c1
 80035d8:	080036c1 	.word	0x080036c1
 80035dc:	08003627 	.word	0x08003627
 80035e0:	080036c1 	.word	0x080036c1
 80035e4:	0800361f 	.word	0x0800361f
 80035e8:	2b78      	cmp	r3, #120	; 0x78
 80035ea:	d024      	beq.n	8003636 <Run_YawSpeed+0x2f2>
 80035ec:	e068      	b.n	80036c0 <Run_YawSpeed+0x37c>
	case B00000000000001: error = -15; break;
 80035ee:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 80035f2:	83fb      	strh	r3, [r7, #30]
 80035f4:	e067      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000000011: error = -13; break;
 80035f6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80035fa:	83fb      	strh	r3, [r7, #30]
 80035fc:	e063      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000000111: error = -11; break;
 80035fe:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003602:	83fb      	strh	r3, [r7, #30]
 8003604:	e05f      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000001111: error = -10; break;
 8003606:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800360a:	83fb      	strh	r3, [r7, #30]
 800360c:	e05b      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000011111: error = -9; break;
 800360e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003612:	83fb      	strh	r3, [r7, #30]
 8003614:	e057      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000011110: error = -8; break;
 8003616:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800361a:	83fb      	strh	r3, [r7, #30]
 800361c:	e053      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000111110: error = -7; break;
 800361e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8003622:	83fb      	strh	r3, [r7, #30]
 8003624:	e04f      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000000111100: error = -6; break;
 8003626:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800362a:	83fb      	strh	r3, [r7, #30]
 800362c:	e04b      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000001111100: error = -5; break;
 800362e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003632:	83fb      	strh	r3, [r7, #30]
 8003634:	e047      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000001111000: error = -4; break;
 8003636:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800363a:	83fb      	strh	r3, [r7, #30]
 800363c:	e043      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000011111000: error = -3; break;
 800363e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003642:	83fb      	strh	r3, [r7, #30]
 8003644:	e03f      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000011110000: error = -2; break;
 8003646:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800364a:	83fb      	strh	r3, [r7, #30]
 800364c:	e03b      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00000111110000: error = -1; break;
 800364e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003652:	83fb      	strh	r3, [r7, #30]
 8003654:	e037      	b.n	80036c6 <Run_YawSpeed+0x382>

	case B00000111100000: error = 0; break;
 8003656:	2300      	movs	r3, #0
 8003658:	83fb      	strh	r3, [r7, #30]
 800365a:	e034      	b.n	80036c6 <Run_YawSpeed+0x382>

	case B00001111100000: error = 1; break;
 800365c:	2301      	movs	r3, #1
 800365e:	83fb      	strh	r3, [r7, #30]
 8003660:	e031      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00001111000000: error = 2; break;
 8003662:	2302      	movs	r3, #2
 8003664:	83fb      	strh	r3, [r7, #30]
 8003666:	e02e      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00011111000000: error = 3; break;
 8003668:	2303      	movs	r3, #3
 800366a:	83fb      	strh	r3, [r7, #30]
 800366c:	e02b      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00011110000000: error = 4; break;
 800366e:	2304      	movs	r3, #4
 8003670:	83fb      	strh	r3, [r7, #30]
 8003672:	e028      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00111110000000: error = 5; break;
 8003674:	2305      	movs	r3, #5
 8003676:	83fb      	strh	r3, [r7, #30]
 8003678:	e025      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00111100000000: error = 6; break;
 800367a:	2306      	movs	r3, #6
 800367c:	83fb      	strh	r3, [r7, #30]
 800367e:	e022      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B01111100000000: error = 7; break;
 8003680:	2307      	movs	r3, #7
 8003682:	83fb      	strh	r3, [r7, #30]
 8003684:	e01f      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B01111000000000: error = 8; break;
 8003686:	2308      	movs	r3, #8
 8003688:	83fb      	strh	r3, [r7, #30]
 800368a:	e01c      	b.n	80036c6 <Run_YawSpeed+0x382>
 800368c:	20000b62 	.word	0x20000b62
	case B11111000000000: error = 9; break;
 8003690:	2309      	movs	r3, #9
 8003692:	83fb      	strh	r3, [r7, #30]
 8003694:	e017      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B11110000000000: error = 10; break;
 8003696:	230a      	movs	r3, #10
 8003698:	83fb      	strh	r3, [r7, #30]
 800369a:	e014      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B11100000000000: error = 11; break;
 800369c:	230b      	movs	r3, #11
 800369e:	83fb      	strh	r3, [r7, #30]
 80036a0:	e011      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B11000000000000: error = 13; break;
 80036a2:	230d      	movs	r3, #13
 80036a4:	83fb      	strh	r3, [r7, #30]
 80036a6:	e00e      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B10000000000000: error = 15; break;
 80036a8:	230f      	movs	r3, #15
 80036aa:	83fb      	strh	r3, [r7, #30]
 80036ac:	e00b      	b.n	80036c6 <Run_YawSpeed+0x382>

	case B00001111110000: error = 0; break;
 80036ae:	2300      	movs	r3, #0
 80036b0:	83fb      	strh	r3, [r7, #30]
 80036b2:	e008      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00011111111000: error = 0; break;
 80036b4:	2300      	movs	r3, #0
 80036b6:	83fb      	strh	r3, [r7, #30]
 80036b8:	e005      	b.n	80036c6 <Run_YawSpeed+0x382>
	case B00111111111100: error = 0; break;
 80036ba:	2300      	movs	r3, #0
 80036bc:	83fb      	strh	r3, [r7, #30]
 80036be:	e002      	b.n	80036c6 <Run_YawSpeed+0x382>

	default: error = last_error;
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <Run_YawSpeed+0x434>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	83fb      	strh	r3, [r7, #30]
	}

	int8_t div_error = error - last_error;
 80036c6:	8bfb      	ldrh	r3, [r7, #30]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <Run_YawSpeed+0x434>)
 80036cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	767b      	strb	r3, [r7, #25]
	sum_error += error;
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <Run_YawSpeed+0x438>)
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	8bfb      	ldrh	r3, [r7, #30]
 80036de:	4413      	add	r3, r2
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <Run_YawSpeed+0x438>)
 80036e4:	801a      	strh	r2, [r3, #0]
	float p = kp * (float)error;
 80036e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f2:	4b23      	ldr	r3, [pc, #140]	; (8003780 <Run_YawSpeed+0x43c>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fc:	edc7 7a05 	vstr	s15, [r7, #20]
	float i = ki * (float)sum_error * period;
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <Run_YawSpeed+0x438>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <Run_YawSpeed+0x440>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	ed97 7a01 	vldr	s14, [r7, #4]
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a04 	vstr	s15, [r7, #16]
	float d = kd * (float)div_error / period;
 8003722:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <Run_YawSpeed+0x444>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003738:	ed97 7a01 	vldr	s14, [r7, #4]
 800373c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003740:	edc7 7a03 	vstr	s15, [r7, #12]
	float mv = p + i + d;
 8003744:	ed97 7a05 	vldr	s14, [r7, #20]
 8003748:	edd7 7a04 	vldr	s15, [r7, #16]
 800374c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003750:	ed97 7a03 	vldr	s14, [r7, #12]
 8003754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003758:	edc7 7a02 	vstr	s15, [r7, #8]
	last_error = error;
 800375c:	4a06      	ldr	r2, [pc, #24]	; (8003778 <Run_YawSpeed+0x434>)
 800375e:	8bfb      	ldrh	r3, [r7, #30]
 8003760:	8013      	strh	r3, [r2, #0]
	return mv;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	ee07 3a90 	vmov	s15, r3
}
 8003768:	eeb0 0a67 	vmov.f32	s0, s15
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000afa 	.word	0x20000afa
 800377c:	20000af8 	.word	0x20000af8
 8003780:	20000aec 	.word	0x20000aec
 8003784:	20000af0 	.word	0x20000af0
 8003788:	20000af4 	.word	0x20000af4

0800378c <Run_LineTracing>:

void Run_LineTracing(float speed, float period, uint8_t flag) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	ed87 0a03 	vstr	s0, [r7, #12]
 8003796:	edc7 0a02 	vstr	s1, [r7, #8]
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, flag);
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	4618      	mov	r0, r3
 80037a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80037a6:	f7ff fdcd 	bl	8003344 <Run_YawSpeed>
 80037aa:	ed87 0a05 	vstr	s0, [r7, #20]
	Motor_SetPoint(&MOTOR_R, speed-yaw_speed);
 80037ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80037b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ba:	eeb0 0a67 	vmov.f32	s0, s15
 80037be:	4809      	ldr	r0, [pc, #36]	; (80037e4 <Run_LineTracing+0x58>)
 80037c0:	f7fe fdd8 	bl	8002374 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed+yaw_speed);
 80037c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	4804      	ldr	r0, [pc, #16]	; (80037e8 <Run_LineTracing+0x5c>)
 80037d6:	f7fe fdcd 	bl	8002374 <Motor_SetPoint>
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000a84 	.word	0x20000a84
 80037e8:	20000ab8 	.word	0x20000ab8

080037ec <Run_SetMotorSpeed>:

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80037f6:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 80037fa:	ed97 0a00 	vldr	s0, [r7]
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <Run_SetMotorSpeed+0x2c>)
 8003800:	f7fe fdb8 	bl	8002374 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8003804:	ed97 0a01 	vldr	s0, [r7, #4]
 8003808:	4804      	ldr	r0, [pc, #16]	; (800381c <Run_SetMotorSpeed+0x30>)
 800380a:	f7fe fdb3 	bl	8002374 <Motor_SetPoint>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000a84 	.word	0x20000a84
 800381c:	20000ab8 	.word	0x20000ab8

08003820 <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <SEN_Init+0x3c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e008      	b.n	8003846 <SEN_Init+0x26>
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <SEN_Init+0x40>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800383c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b0d      	cmp	r3, #13
 800384a:	ddf3      	ble.n	8003834 <SEN_Init+0x14>
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000afc 	.word	0x20000afc
 8003860:	20000b38 	.word	0x20000b38

08003864 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b08d      	sub	sp, #52	; 0x34
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003870:	e05a      	b.n	8003928 <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <SEN_Filter+0xd4>)
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	4614      	mov	r4, r2
 8003880:	8818      	ldrh	r0, [r3, #0]
 8003882:	492e      	ldr	r1, [pc, #184]	; (800393c <SEN_Filter+0xd8>)
 8003884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4423      	add	r3, r4
 8003890:	4602      	mov	r2, r0
 8003892:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <SEN_Filter+0xd4>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b12      	cmp	r3, #18
 800389c:	d806      	bhi.n	80038ac <SEN_Filter+0x48>
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <SEN_Filter+0xd4>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <SEN_Filter+0xd4>)
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e002      	b.n	80038b2 <SEN_Filter+0x4e>
 80038ac:	4b22      	ldr	r3, [pc, #136]	; (8003938 <SEN_Filter+0xd4>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	221c      	movs	r2, #28
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f009 f956 	bl	800cb6c <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 80038c0:	2300      	movs	r3, #0
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c4:	e01f      	b.n	8003906 <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	3330      	adds	r3, #48	; 0x30
 80038cc:	443b      	add	r3, r7
 80038ce:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80038d2:	481a      	ldr	r0, [pc, #104]	; (800393c <SEN_Filter+0xd8>)
 80038d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e0:	4413      	add	r3, r2
 80038e2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80038e6:	4a16      	ldr	r2, [pc, #88]	; (8003940 <SEN_Filter+0xdc>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	440b      	add	r3, r1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	3330      	adds	r3, #48	; 0x30
 80038fa:	443b      	add	r3, r7
 80038fc:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	3301      	adds	r3, #1
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	2b13      	cmp	r3, #19
 800390a:	dddc      	ble.n	80038c6 <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	441a      	add	r2, r3
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	3330      	adds	r3, #48	; 0x30
 800391a:	443b      	add	r3, r7
 800391c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003920:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	3301      	adds	r3, #1
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	2b0d      	cmp	r3, #13
 800392c:	dda1      	ble.n	8003872 <SEN_Filter+0xe>
	}
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3734      	adds	r7, #52	; 0x34
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	20000d98 	.word	0x20000d98
 800393c:	20000b68 	.word	0x20000b68
 8003940:	cccccccd 	.word	0xcccccccd

08003944 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <SEN_StartReadSensor+0x18>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	220e      	movs	r2, #14
 800394e:	4904      	ldr	r1, [pc, #16]	; (8003960 <SEN_StartReadSensor+0x1c>)
 8003950:	4618      	mov	r0, r3
 8003952:	f004 f993 	bl	8007c7c <HAL_ADC_Start_DMA>
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000afc 	.word	0x20000afc
 8003960:	20000b00 	.word	0x20000b00

08003964 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b5b      	ldr	r3, [pc, #364]	; (8003ae0 <SEN_CallbackRoutine+0x17c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	f040 80ad 	bne.w	8003ad6 <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 800397c:	4859      	ldr	r0, [pc, #356]	; (8003ae4 <SEN_CallbackRoutine+0x180>)
 800397e:	f7ff ff71 	bl	8003864 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e017      	b.n	80039b8 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005a      	lsls	r2, r3, #1
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f1c3 030d 	rsb	r3, r3, #13
 8003992:	4954      	ldr	r1, [pc, #336]	; (8003ae4 <SEN_CallbackRoutine+0x180>)
 8003994:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003998:	4a53      	ldr	r2, [pc, #332]	; (8003ae8 <SEN_CallbackRoutine+0x184>)
 800399a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	3301      	adds	r3, #1
 80039a4:	4a4f      	ldr	r2, [pc, #316]	; (8003ae4 <SEN_CallbackRoutine+0x180>)
 80039a6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80039aa:	4a4f      	ldr	r2, [pc, #316]	; (8003ae8 <SEN_CallbackRoutine+0x184>)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	dde4      	ble.n	8003988 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 80039be:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <SEN_CallbackRoutine+0x188>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e06c      	b.n	8003aa4 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 80039ce:	4b48      	ldr	r3, [pc, #288]	; (8003af0 <SEN_CallbackRoutine+0x18c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d12a      	bne.n	8003a2c <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 80039d6:	4a44      	ldr	r2, [pc, #272]	; (8003ae8 <SEN_CallbackRoutine+0x184>)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80039de:	4945      	ldr	r1, [pc, #276]	; (8003af4 <SEN_CallbackRoutine+0x190>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d91a      	bls.n	8003a20 <SEN_CallbackRoutine+0xbc>
				bit = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 80039ee:	4a3e      	ldr	r2, [pc, #248]	; (8003ae8 <SEN_CallbackRoutine+0x184>)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f6:	4619      	mov	r1, r3
 80039f8:	4a3e      	ldr	r2, [pc, #248]	; (8003af4 <SEN_CallbackRoutine+0x190>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a00:	1acb      	subs	r3, r1, r3
 8003a02:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <SEN_CallbackRoutine+0x194>)
 8003a04:	fb82 1203 	smull	r1, r2, r2, r3
 8003a08:	1092      	asrs	r2, r2, #2
 8003a0a:	17db      	asrs	r3, r3, #31
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	b2d9      	uxtb	r1, r3
 8003a14:	4a39      	ldr	r2, [pc, #228]	; (8003afc <SEN_CallbackRoutine+0x198>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	460a      	mov	r2, r1
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e02f      	b.n	8003a80 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8003a20:	4a36      	ldr	r2, [pc, #216]	; (8003afc <SEN_CallbackRoutine+0x198>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e029      	b.n	8003a80 <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 8003a2c:	4a2e      	ldr	r2, [pc, #184]	; (8003ae8 <SEN_CallbackRoutine+0x184>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003a34:	492f      	ldr	r1, [pc, #188]	; (8003af4 <SEN_CallbackRoutine+0x190>)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d21a      	bcs.n	8003a76 <SEN_CallbackRoutine+0x112>
				bit = 1;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 8003a44:	4a2b      	ldr	r2, [pc, #172]	; (8003af4 <SEN_CallbackRoutine+0x190>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <SEN_CallbackRoutine+0x184>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a56:	1acb      	subs	r3, r1, r3
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <SEN_CallbackRoutine+0x194>)
 8003a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8003a5e:	1092      	asrs	r2, r2, #2
 8003a60:	17db      	asrs	r3, r3, #31
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2d9      	uxtb	r1, r3
 8003a6a:	4a24      	ldr	r2, [pc, #144]	; (8003afc <SEN_CallbackRoutine+0x198>)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	460a      	mov	r2, r1
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e004      	b.n	8003a80 <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8003a76:	4a21      	ldr	r2, [pc, #132]	; (8003afc <SEN_CallbackRoutine+0x198>)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f1c3 030d 	rsb	r3, r3, #13
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	b21a      	sxth	r2, r3
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <SEN_CallbackRoutine+0x188>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b21b      	sxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <SEN_CallbackRoutine+0x188>)
 8003a9c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0d      	cmp	r3, #13
 8003aa8:	dd8f      	ble.n	80039ca <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <SEN_CallbackRoutine+0x19c>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f000 f870 	bl	8003b98 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <SEN_CallbackRoutine+0x1a0>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <SEN_CallbackRoutine+0x1a0>)
 8003ac4:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <SEN_CallbackRoutine+0x1a0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f023 0302 	bic.w	r3, r3, #2
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <SEN_CallbackRoutine+0x1a0>)
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e000      	b.n	8003ad8 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 8003ad6:	bf00      	nop
}
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000afc 	.word	0x20000afc
 8003ae4:	20000b00 	.word	0x20000b00
 8003ae8:	20000b1c 	.word	0x20000b1c
 8003aec:	20000b62 	.word	0x20000b62
 8003af0:	20000b64 	.word	0x20000b64
 8003af4:	20000b38 	.word	0x20000b38
 8003af8:	66666667 	.word	0x66666667
 8003afc:	20000b54 	.word	0x20000b54
 8003b00:	20000da4 	.word	0x20000da4
 8003b04:	20000d99 	.word	0x20000d99

08003b08 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <SEN_StartAutoCalibration+0x84>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d035      	beq.n	8003b82 <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8003b16:	201c      	movs	r0, #28
 8003b18:	f009 f80a 	bl	800cb30 <malloc>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <SEN_StartAutoCalibration+0x88>)
 8003b22:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 8003b24:	201c      	movs	r0, #28
 8003b26:	f009 f803 	bl	800cb30 <malloc>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <SEN_StartAutoCalibration+0x8c>)
 8003b30:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <SEN_StartAutoCalibration+0x88>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <SEN_StartAutoCalibration+0x3a>
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <SEN_StartAutoCalibration+0x8c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01b      	beq.n	8003b7a <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	e011      	b.n	8003b6c <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <SEN_StartAutoCalibration+0x88>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <SEN_StartAutoCalibration+0x8c>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003b64:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b0d      	cmp	r3, #13
 8003b70:	ddea      	ble.n	8003b48 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <SEN_StartAutoCalibration+0x84>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e004      	b.n	8003b84 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <SEN_StartAutoCalibration+0x84>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e000      	b.n	8003b84 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 8003b82:	bf00      	nop
}
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000da4 	.word	0x20000da4
 8003b90:	20000d9c 	.word	0x20000d9c
 8003b94:	20000da0 	.word	0x20000da0

08003b98 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e02f      	b.n	8003c08 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <SEN_AutoCalibrationRoutine+0x84>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	491a      	ldr	r1, [pc, #104]	; (8003c20 <SEN_AutoCalibrationRoutine+0x88>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d20a      	bcs.n	8003bd6 <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <SEN_AutoCalibrationRoutine+0x84>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	4915      	ldr	r1, [pc, #84]	; (8003c20 <SEN_AutoCalibrationRoutine+0x88>)
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003bd2:	801a      	strh	r2, [r3, #0]
 8003bd4:	e015      	b.n	8003c02 <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <SEN_AutoCalibrationRoutine+0x8c>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	881a      	ldrh	r2, [r3, #0]
 8003be2:	490f      	ldr	r1, [pc, #60]	; (8003c20 <SEN_AutoCalibrationRoutine+0x88>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d909      	bls.n	8003c02 <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <SEN_AutoCalibrationRoutine+0x8c>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4909      	ldr	r1, [pc, #36]	; (8003c20 <SEN_AutoCalibrationRoutine+0x88>)
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c00:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b0d      	cmp	r3, #13
 8003c0c:	ddcc      	ble.n	8003ba8 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20000d9c 	.word	0x20000d9c
 8003c20:	20000b1c 	.word	0x20000b1c
 8003c24:	20000da0 	.word	0x20000da0

08003c28 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 8003c28:	b5b0      	push	{r4, r5, r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 8003c32:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <SEN_EndAutoCalibration+0xe8>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d060      	beq.n	8003cfc <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04d      	beq.n	8003ce0 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e047      	b.n	8003cda <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 8003c4a:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <SEN_EndAutoCalibration+0xec>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <SEN_EndAutoCalibration+0xf0>)
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	440b      	add	r3, r1
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d335      	bcc.n	8003cd2 <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <SEN_EndAutoCalibration+0xec>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <SEN_EndAutoCalibration+0xf0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	1acb      	subs	r3, r1, r3
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fc4e 	bl	8000524 <__aeabi_i2d>
 8003c88:	a31f      	add	r3, pc, #124	; (adr r3, 8003d08 <SEN_EndAutoCalibration+0xe0>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f7fc fcb3 	bl	80005f8 <__aeabi_dmul>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4614      	mov	r4, r2
 8003c98:	461d      	mov	r5, r3
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <SEN_EndAutoCalibration+0xf0>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc fc3c 	bl	8000524 <__aeabi_i2d>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	f7fc faea 	bl	800028c <__adddf3>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7fc ff72 	bl	8000ba8 <__aeabi_d2uiz>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	b299      	uxth	r1, r3
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <SEN_EndAutoCalibration+0xf4>)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003cd0:	e000      	b.n	8003cd4 <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 8003cd2:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b0d      	cmp	r3, #13
 8003cde:	ddb4      	ble.n	8003c4a <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <SEN_EndAutoCalibration+0xec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f008 ff2b 	bl	800cb40 <free>
	free(calib_lower_adc);
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <SEN_EndAutoCalibration+0xf0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f008 ff26 	bl	800cb40 <free>
	autocalib_status = 0;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <SEN_EndAutoCalibration+0xe8>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e000      	b.n	8003cfe <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 8003cfc:	bf00      	nop
}
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bdb0      	pop	{r4, r5, r7, pc}
 8003d04:	f3af 8000 	nop.w
 8003d08:	33333333 	.word	0x33333333
 8003d0c:	3fd33333 	.word	0x3fd33333
 8003d10:	20000da4 	.word	0x20000da4
 8003d14:	20000d9c 	.word	0x20000d9c
 8003d18:	20000da0 	.word	0x20000da0
 8003d1c:	20000b38 	.word	0x20000b38

08003d20 <SEN_BlackLine>:

void SEN_BlackLine() {
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <SEN_BlackLine+0x14>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20000b64 	.word	0x20000b64

08003d38 <SEN_Invert>:

void SEN_WhiteLine() {
	sensor_invert = 1;
}

void SEN_Invert() {
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <SEN_Invert+0x24>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <SEN_Invert+0x24>)
 8003d4e:	701a      	strb	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000b64 	.word	0x20000b64

08003d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_MspInit+0x4c>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <HAL_MspInit+0x4c>)
 8003d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d74:	6453      	str	r3, [r2, #68]	; 0x44
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_MspInit+0x4c>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_MspInit+0x4c>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_MspInit+0x4c>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_MspInit+0x4c>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800

08003db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003db4:	e7fe      	b.n	8003db4 <NMI_Handler+0x4>

08003db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dba:	e7fe      	b.n	8003dba <HardFault_Handler+0x4>

08003dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <MemManage_Handler+0x4>

08003dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dc6:	e7fe      	b.n	8003dc6 <BusFault_Handler+0x4>

08003dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dcc:	e7fe      	b.n	8003dcc <UsageFault_Handler+0x4>

08003dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dfc:	f003 fda6 	bl	800794c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <ADC_IRQHandler+0x10>)
 8003e0a:	f003 fe26 	bl	8007a5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2000050c 	.word	0x2000050c

08003e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <TIM6_DAC_IRQHandler+0x10>)
 8003e1e:	f007 f9ed 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000f48 	.word	0x20000f48

08003e2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <DMA2_Stream0_IRQHandler+0x10>)
 8003e32:	f004 fd2d 	bl	8008890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000554 	.word	0x20000554

08003e40 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <GetAction+0x74>)
 8003e50:	fba2 1203 	umull	r1, r2, r2, r3
 8003e54:	0952      	lsrs	r2, r2, #5
 8003e56:	2164      	movs	r1, #100	; 0x64
 8003e58:	fb01 f202 	mul.w	r2, r1, r2
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <GetAction+0x78>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3340      	adds	r3, #64	; 0x40
 8003e72:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 8003e74:	bf00      	nop
 8003e76:	f7fd ffa7 	bl	8001dc8 <EEP_ReadyToWrite>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0fa      	beq.n	8003e76 <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8003e80:	f107 010c 	add.w	r1, r7, #12
 8003e84:	8bfb      	ldrh	r3, [r7, #30]
 8003e86:	2210      	movs	r2, #16
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fd ff77 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <GetAction+0x7c>)
 8003e90:	f107 020c 	add.w	r2, r7, #12
 8003e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e96:	c303      	stmia	r3!, {r0, r1}
 8003e98:	801a      	strh	r2, [r3, #0]
	return plan_active;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4907      	ldr	r1, [pc, #28]	; (8003ebc <GetAction+0x7c>)
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	cb03      	ldmia	r3!, {r0, r1}
 8003ea4:	6010      	str	r0, [r2, #0]
 8003ea6:	6051      	str	r1, [r2, #4]
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	8113      	strh	r3, [r2, #8]
}
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	51eb851f 	.word	0x51eb851f
 8003eb8:	20000da6 	.word	0x20000da6
 8003ebc:	20000df0 	.word	0x20000df0

08003ec0 <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b08b      	sub	sp, #44	; 0x2c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	1d3c      	adds	r4, r7, #4
 8003ec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ecc:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <SetAction+0x70>)
 8003ed2:	fba2 1203 	umull	r1, r2, r2, r3
 8003ed6:	0952      	lsrs	r2, r2, #5
 8003ed8:	2164      	movs	r1, #100	; 0x64
 8003eda:	fb01 f202 	mul.w	r2, r1, r2
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <SetAction+0x74>)
 8003ee4:	1d3a      	adds	r2, r7, #4
 8003ee6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ee8:	c303      	stmia	r3!, {r0, r1}
 8003eea:	801a      	strh	r2, [r3, #0]
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <SetAction+0x78>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3340      	adds	r3, #64	; 0x40
 8003efe:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 8003f00:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <SetAction+0x74>)
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f08:	c303      	stmia	r3!, {r0, r1}
 8003f0a:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8003f0c:	bf00      	nop
 8003f0e:	f7fd ff5b 	bl	8001dc8 <EEP_ReadyToWrite>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0fa      	beq.n	8003f0e <SetAction+0x4e>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8003f18:	f107 0114 	add.w	r1, r7, #20
 8003f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f1e:	2210      	movs	r2, #16
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd fee3 	bl	8001cec <EEP_WriteMem>
}
 8003f26:	bf00      	nop
 8003f28:	372c      	adds	r7, #44	; 0x2c
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	51eb851f 	.word	0x51eb851f
 8003f34:	20000df0 	.word	0x20000df0
 8003f38:	20000da6 	.word	0x20000da6

08003f3c <Storage_ResetPlan>:

void Storage_ResetPlan() {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b0b0      	sub	sp, #192	; 0xc0
 8003f40:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 8003f42:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <Storage_ResetPlan+0xfc>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 8003f50:	2328      	movs	r3, #40	; 0x28
 8003f52:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 8003f56:	2364      	movs	r3, #100	; 0x64
 8003f58:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 20;
 8003f5c:	2314      	movs	r3, #20
 8003f5e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 8003f62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f66:	3302      	adds	r3, #2
 8003f68:	2214      	movs	r2, #20
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f008 fdfd 	bl	800cb6c <memset>
	temp.kpid[0] = 5.71428;
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <Storage_ResetPlan+0x100>)
 8003f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 40;
 8003f80:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <Storage_ResetPlan+0x104>)
 8003f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 8003f86:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003f8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f8e:	2228      	movs	r2, #40	; 0x28
 8003f90:	4618      	mov	r0, r3
 8003f92:	f008 fddd 	bl	800cb50 <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 8003f96:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <Storage_ResetPlan+0x108>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 8003fa0:	bf00      	nop
 8003fa2:	f7fd ff11 	bl	8001dc8 <EEP_ReadyToWrite>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0fa      	beq.n	8003fa2 <Storage_ResetPlan+0x66>
	EEP_WritePage(page_plan, buff);
 8003fac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fb0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fe74 	bl	8001ca4 <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003fc2:	e030      	b.n	8004026 <Storage_ResetPlan+0xea>

		action_temp.act = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		action_temp.act_mode = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		action_temp.act_value = 5;
 8003fd0:	2305      	movs	r3, #5
 8003fd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		action_temp.brake = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		action_temp.forward_speed = 60;
 8003fdc:	233c      	movs	r3, #60	; 0x3c
 8003fde:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		action_temp.reverse_speed = -20;
 8003fe2:	23ec      	movs	r3, #236	; 0xec
 8003fe4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		action_temp.sen_trig = 2;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		action_temp.wait_time = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		action_temp.boost_speed = 50;
 8003ff4:	2332      	movs	r3, #50	; 0x32
 8003ff6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		action_temp.boost_time = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004006:	ca07      	ldmia	r2, {r0, r1, r2}
 8004008:	c303      	stmia	r3!, {r0, r1}
 800400a:	801a      	strh	r2, [r3, #0]

		SetAction(action_temp, i);
 800400c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004016:	ca07      	ldmia	r2, {r0, r1, r2}
 8004018:	f7ff ff52 	bl	8003ec0 <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 800401c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004020:	3301      	adds	r3, #1
 8004022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800402a:	2b63      	cmp	r3, #99	; 0x63
 800402c:	ddca      	ble.n	8003fc4 <Storage_ResetPlan+0x88>
	}
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	37c0      	adds	r7, #192	; 0xc0
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000da5 	.word	0x20000da5
 800403c:	40b6db62 	.word	0x40b6db62
 8004040:	42200000 	.word	0x42200000
 8004044:	20000da6 	.word	0x20000da6

08004048 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8004048:	b580      	push	{r7, lr}
 800404a:	b094      	sub	sp, #80	; 0x50
 800404c:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	2240      	movs	r2, #64	; 0x40
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f008 fd89 	bl	800cb6c <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 800405a:	23ab      	movs	r3, #171	; 0xab
 800405c:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 800405e:	230f      	movs	r3, #15
 8004060:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	3310      	adds	r3, #16
 800406a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 800406c:	2300      	movs	r3, #0
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004070:	e012      	b.n	8004098 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	b29b      	uxth	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	0052      	lsls	r2, r2, #1
 800407a:	441a      	add	r2, r3
 800407c:	0092      	lsls	r2, r2, #2
 800407e:	4413      	add	r3, r2
 8004080:	01db      	lsls	r3, r3, #7
 8004082:	b29a      	uxth	r2, r3
 8004084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800408a:	440b      	add	r3, r1
 800408c:	3240      	adds	r2, #64	; 0x40
 800408e:	b292      	uxth	r2, r2
 8004090:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	3301      	adds	r3, #1
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409a:	2b0e      	cmp	r3, #14
 800409c:	dde9      	ble.n	8004072 <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	3320      	adds	r3, #32
 80040a2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 80040a4:	2300      	movs	r3, #0
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a8:	e009      	b.n	80040be <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b0:	4413      	add	r3, r2
 80040b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80040b6:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80040b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ba:	3301      	adds	r3, #1
 80040bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c0:	2b0d      	cmp	r3, #13
 80040c2:	ddf2      	ble.n	80040aa <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 80040c4:	bf00      	nop
 80040c6:	f7fd fe7f 	bl	8001dc8 <EEP_ReadyToWrite>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0fa      	beq.n	80040c6 <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	2000      	movs	r0, #0
 80040d6:	f7fd fde5 	bl	8001ca4 <EEP_WritePage>
}
 80040da:	bf00      	nop
 80040dc:	3750      	adds	r7, #80	; 0x50
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <Storage_Init>:

uint8_t Storage_Init() {
 80040e4:	b5b0      	push	{r4, r5, r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 80040e8:	bf00      	nop
 80040ea:	f7fd fe6d 	bl	8001dc8 <EEP_ReadyToWrite>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0fa      	beq.n	80040ea <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 80040f4:	4913      	ldr	r1, [pc, #76]	; (8004144 <Storage_Init+0x60>)
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7fd fe1c 	bl	8001d34 <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <Storage_Init+0x60>)
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2bab      	cmp	r3, #171	; 0xab
 8004102:	d001      	beq.n	8004108 <Storage_Init+0x24>
 8004104:	2300      	movs	r3, #0
 8004106:	e01b      	b.n	8004140 <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <Storage_Init+0x60>)
 800410a:	791a      	ldrb	r2, [r3, #4]
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <Storage_Init+0x64>)
 800410e:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <Storage_Init+0x64>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <Storage_Init+0x60>)
 800411a:	4413      	add	r3, r2
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <Storage_Init+0x68>)
 8004120:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004122:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <Storage_Init+0x6c>)
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <Storage_Init+0x60>)
 8004126:	4615      	mov	r5, r2
 8004128:	f103 0420 	add.w	r4, r3, #32
 800412c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412e:	6028      	str	r0, [r5, #0]
 8004130:	6069      	str	r1, [r5, #4]
 8004132:	60aa      	str	r2, [r5, #8]
 8004134:	60eb      	str	r3, [r5, #12]
 8004136:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004138:	6128      	str	r0, [r5, #16]
 800413a:	6169      	str	r1, [r5, #20]
 800413c:	61aa      	str	r2, [r5, #24]
	return 1;
 800413e:	2301      	movs	r3, #1
}
 8004140:	4618      	mov	r0, r3
 8004142:	bdb0      	pop	{r4, r5, r7, pc}
 8004144:	20000dac 	.word	0x20000dac
 8004148:	20000da5 	.word	0x20000da5
 800414c:	20000da6 	.word	0x20000da6
 8004150:	20000b38 	.word	0x20000b38

08004154 <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8004154:	b580      	push	{r7, lr}
 8004156:	b092      	sub	sp, #72	; 0x48
 8004158:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <Storage_PlanInit+0x54>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	b29b      	uxth	r3, r3
 8004162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8004166:	bf00      	nop
 8004168:	f7fd fe2e 	bl	8001dc8 <EEP_ReadyToWrite>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0fa      	beq.n	8004168 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 8004172:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004176:	b29b      	uxth	r3, r3
 8004178:	1d3a      	adds	r2, r7, #4
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd fdd9 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	2228      	movs	r2, #40	; 0x28
 8004186:	4619      	mov	r1, r3
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <Storage_PlanInit+0x58>)
 800418a:	f008 fce1 	bl	800cb50 <memcpy>
	if(plan.id>>7 != 1) return 0;
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <Storage_PlanInit+0x58>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <Storage_PlanInit+0x4a>
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <Storage_PlanInit+0x4c>
	return 1;
 800419e:	2301      	movs	r3, #1
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3748      	adds	r7, #72	; 0x48
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000da6 	.word	0x20000da6
 80041ac:	20000dfc 	.word	0x20000dfc

080041b0 <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 80041b0:	b5b0      	push	{r4, r5, r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 80041b4:	bf00      	nop
 80041b6:	f7fd fe07 	bl	8001dc8 <EEP_ReadyToWrite>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0fa      	beq.n	80041b6 <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80041c0:	221c      	movs	r2, #28
 80041c2:	490a      	ldr	r1, [pc, #40]	; (80041ec <Storage_GetADCThreshold+0x3c>)
 80041c4:	2020      	movs	r0, #32
 80041c6:	f7fd fdd9 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <Storage_GetADCThreshold+0x40>)
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <Storage_GetADCThreshold+0x44>)
 80041ce:	4615      	mov	r5, r2
 80041d0:	f103 0420 	add.w	r4, r3, #32
 80041d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d6:	6028      	str	r0, [r5, #0]
 80041d8:	6069      	str	r1, [r5, #4]
 80041da:	60aa      	str	r2, [r5, #8]
 80041dc:	60eb      	str	r3, [r5, #12]
 80041de:	cc07      	ldmia	r4!, {r0, r1, r2}
 80041e0:	6128      	str	r0, [r5, #16]
 80041e2:	6169      	str	r1, [r5, #20]
 80041e4:	61aa      	str	r2, [r5, #24]
}
 80041e6:	bf00      	nop
 80041e8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000dcc 	.word	0x20000dcc
 80041f0:	20000b38 	.word	0x20000b38
 80041f4:	20000dac 	.word	0x20000dac

080041f8 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 80041f8:	b5b0      	push	{r4, r5, r7, lr}
 80041fa:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <Storage_SetADCThreshold+0x3c>)
 80041fe:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <Storage_SetADCThreshold+0x40>)
 8004200:	f103 0420 	add.w	r4, r3, #32
 8004204:	4615      	mov	r5, r2
 8004206:	6828      	ldr	r0, [r5, #0]
 8004208:	6869      	ldr	r1, [r5, #4]
 800420a:	68aa      	ldr	r2, [r5, #8]
 800420c:	68eb      	ldr	r3, [r5, #12]
 800420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004210:	6928      	ldr	r0, [r5, #16]
 8004212:	6969      	ldr	r1, [r5, #20]
 8004214:	69aa      	ldr	r2, [r5, #24]
 8004216:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004218:	bf00      	nop
 800421a:	f7fd fdd5 	bl	8001dc8 <EEP_ReadyToWrite>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0fa      	beq.n	800421a <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004224:	221c      	movs	r2, #28
 8004226:	4905      	ldr	r1, [pc, #20]	; (800423c <Storage_SetADCThreshold+0x44>)
 8004228:	2020      	movs	r0, #32
 800422a:	f7fd fd5f 	bl	8001cec <EEP_WriteMem>
}
 800422e:	bf00      	nop
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	bf00      	nop
 8004234:	20000dac 	.word	0x20000dac
 8004238:	20000b38 	.word	0x20000b38
 800423c:	20000dcc 	.word	0x20000dcc

08004240 <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b094      	sub	sp, #80	; 0x50
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <Storage_GetPlan+0x94>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 8004250:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <Storage_GetPlan+0x94>)
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <Storage_GetPlan+0x98>)
 8004256:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <Storage_GetPlan+0x94>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <Storage_GetPlan+0x98>)
 8004262:	4413      	add	r3, r2
 8004264:	881a      	ldrh	r2, [r3, #0]
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <Storage_GetPlan+0x9c>)
 8004268:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 800426a:	bf00      	nop
 800426c:	f7fd fdac 	bl	8001dc8 <EEP_ReadyToWrite>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0fa      	beq.n	800426c <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8004276:	2201      	movs	r2, #1
 8004278:	4916      	ldr	r1, [pc, #88]	; (80042d4 <Storage_GetPlan+0x94>)
 800427a:	2004      	movs	r0, #4
 800427c:	f7fd fd36 	bl	8001cec <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004280:	4b16      	ldr	r3, [pc, #88]	; (80042dc <Storage_GetPlan+0x9c>)
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	b29b      	uxth	r3, r3
 8004288:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 800428c:	bf00      	nop
 800428e:	f7fd fd9b 	bl	8001dc8 <EEP_ReadyToWrite>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0fa      	beq.n	800428e <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8004298:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800429c:	b29b      	uxth	r3, r3
 800429e:	f107 020c 	add.w	r2, r7, #12
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fd45 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 80042aa:	f107 030c 	add.w	r3, r7, #12
 80042ae:	2228      	movs	r2, #40	; 0x28
 80042b0:	4619      	mov	r1, r3
 80042b2:	480b      	ldr	r0, [pc, #44]	; (80042e0 <Storage_GetPlan+0xa0>)
 80042b4:	f008 fc4c 	bl	800cb50 <memcpy>
	if(plan.id>>7 != 1) return 0;
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <Storage_GetPlan+0xa0>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	09db      	lsrs	r3, r3, #7
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <Storage_GetPlan+0x88>
 80042c4:	2300      	movs	r3, #0
 80042c6:	e000      	b.n	80042ca <Storage_GetPlan+0x8a>
	return 1;
 80042c8:	2301      	movs	r3, #1
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3750      	adds	r7, #80	; 0x50
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000da5 	.word	0x20000da5
 80042d8:	20000dac 	.word	0x20000dac
 80042dc:	20000da6 	.word	0x20000da6
 80042e0:	20000dfc 	.word	0x20000dfc

080042e4 <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 80042ea:	2302      	movs	r3, #2
 80042ec:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 80042ee:	bf00      	nop
 80042f0:	f7fd fd6a 	bl	8001dc8 <EEP_ReadyToWrite>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0fa      	beq.n	80042f0 <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <Storage_SetCheckpoint+0x34>)
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	4413      	add	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	2214      	movs	r2, #20
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <Storage_SetCheckpoint+0x38>)
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fcee 	bl	8001cec <EEP_WriteMem>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000da6 	.word	0x20000da6
 800431c:	20000dfe 	.word	0x20000dfe

08004320 <Storage_SetPID>:

void Storage_SetPID() {
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8004326:	2318      	movs	r3, #24
 8004328:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 800432a:	bf00      	nop
 800432c:	f7fd fd4c 	bl	8001dc8 <EEP_ReadyToWrite>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0fa      	beq.n	800432c <Storage_SetPID+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, 3*sizeof(float));
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	b29a      	uxth	r2, r3
 800433a:	4b11      	ldr	r3, [pc, #68]	; (8004380 <Storage_SetPID+0x60>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	220c      	movs	r2, #12
 8004344:	490f      	ldr	r1, [pc, #60]	; (8004384 <Storage_SetPID+0x64>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd fcd0 	bl	8001cec <EEP_WriteMem>

	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
 800434c:	2324      	movs	r3, #36	; 0x24
 800434e:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004350:	bf00      	nop
 8004352:	f7fd fd39 	bl	8001dc8 <EEP_ReadyToWrite>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0fa      	beq.n	8004352 <Storage_SetPID+0x32>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	b29a      	uxth	r2, r3
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <Storage_SetPID+0x60>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	4413      	add	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	4a07      	ldr	r2, [pc, #28]	; (8004388 <Storage_SetPID+0x68>)
 800436a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800436e:	4611      	mov	r1, r2
 8004370:	2201      	movs	r2, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd fcba 	bl	8001cec <EEP_WriteMem>
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000da6 	.word	0x20000da6
 8004384:	20000e14 	.word	0x20000e14
 8004388:	20000dfc 	.word	0x20000dfc

0800438c <Storage_SetSpeed>:

void Storage_SetSpeed() {
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8004392:	2316      	movs	r3, #22
 8004394:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004396:	bf00      	nop
 8004398:	f7fd fd16 	bl	8001dc8 <EEP_ReadyToWrite>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0fa      	beq.n	8004398 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <Storage_SetSpeed+0x34>)
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2202      	movs	r2, #2
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <Storage_SetSpeed+0x38>)
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fc9a 	bl	8001cec <EEP_WriteMem>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000da6 	.word	0x20000da6
 80043c4:	20000e12 	.word	0x20000e12

080043c8 <GetActionSequenceInit>:
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
	}
}

void GetActionSequenceInit(uint8_t num) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 80043d2:	463b      	mov	r3, r7
 80043d4:	7dfa      	ldrb	r2, [r7, #23]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fd31 	bl	8003e40 <GetAction>
	buff_index = num;
 80043de:	4a03      	ldr	r2, [pc, #12]	; (80043ec <GetActionSequenceInit+0x24>)
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	7013      	strb	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000dec 	.word	0x20000dec

080043f0 <Storage_CleanInit>:

void Storage_CleanInit() {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b092      	sub	sp, #72	; 0x48
 80043f4:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	2240      	movs	r2, #64	; 0x40
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f008 fbb5 	bl	800cb6c <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 8004402:	2300      	movs	r3, #0
 8004404:	647b      	str	r3, [r7, #68]	; 0x44
 8004406:	e00f      	b.n	8004428 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8004408:	bf00      	nop
 800440a:	f7fd fcdd 	bl	8001dc8 <EEP_ReadyToWrite>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0fa      	beq.n	800440a <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8004414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004416:	b29b      	uxth	r3, r3
 8004418:	1d3a      	adds	r2, r7, #4
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fc41 	bl	8001ca4 <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 8004422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004424:	3301      	adds	r3, #1
 8004426:	647b      	str	r3, [r7, #68]	; 0x44
 8004428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442e:	dbeb      	blt.n	8004408 <Storage_CleanInit+0x18>
	}
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3748      	adds	r7, #72	; 0x48
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  return 1;
 800443e:	2301      	movs	r3, #1
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <_kill>:

int _kill(int pid, int sig)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004454:	f008 fb42 	bl	800cadc <__errno>
 8004458:	4603      	mov	r3, r0
 800445a:	2216      	movs	r2, #22
 800445c:	601a      	str	r2, [r3, #0]
  return -1;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <_exit>:

void _exit (int status)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004472:	f04f 31ff 	mov.w	r1, #4294967295
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ffe7 	bl	800444a <_kill>
  while (1) {}    /* Make sure we hang here */
 800447c:	e7fe      	b.n	800447c <_exit+0x12>

0800447e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e00a      	b.n	80044a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004490:	f3af 8000 	nop.w
 8004494:	4601      	mov	r1, r0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	60ba      	str	r2, [r7, #8]
 800449c:	b2ca      	uxtb	r2, r1
 800449e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3301      	adds	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	dbf0      	blt.n	8004490 <_read+0x12>
  }

  return len;
 80044ae:	687b      	ldr	r3, [r7, #4]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e009      	b.n	80044de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	60ba      	str	r2, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3301      	adds	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	dbf1      	blt.n	80044ca <_write+0x12>
  }
  return len;
 80044e6:	687b      	ldr	r3, [r7, #4]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <_close>:

int _close(int file)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004518:	605a      	str	r2, [r3, #4]
  return 0;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_isatty>:

int _isatty(int file)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004530:	2301      	movs	r3, #1
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004560:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <_sbrk+0x5c>)
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <_sbrk+0x60>)
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <_sbrk+0x64>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <_sbrk+0x64>)
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <_sbrk+0x68>)
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <_sbrk+0x64>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d207      	bcs.n	8004598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004588:	f008 faa8 	bl	800cadc <__errno>
 800458c:	4603      	mov	r3, r0
 800458e:	220c      	movs	r2, #12
 8004590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295
 8004596:	e009      	b.n	80045ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <_sbrk+0x64>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <_sbrk+0x64>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <_sbrk+0x64>)
 80045a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20020000 	.word	0x20020000
 80045b8:	00000400 	.word	0x00000400
 80045bc:	20000e24 	.word	0x20000e24
 80045c0:	200015e0 	.word	0x200015e0

080045c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <SystemInit+0x20>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <SystemInit+0x20>)
 80045d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b096      	sub	sp, #88	; 0x58
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	615a      	str	r2, [r3, #20]
 8004618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	2220      	movs	r2, #32
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f008 faa3 	bl	800cb6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004626:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <MX_TIM1_Init+0x168>)
 8004628:	4a4a      	ldr	r2, [pc, #296]	; (8004754 <MX_TIM1_Init+0x16c>)
 800462a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800462c:	4b48      	ldr	r3, [pc, #288]	; (8004750 <MX_TIM1_Init+0x168>)
 800462e:	2253      	movs	r2, #83	; 0x53
 8004630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <MX_TIM1_Init+0x168>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8004638:	4b45      	ldr	r3, [pc, #276]	; (8004750 <MX_TIM1_Init+0x168>)
 800463a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800463e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <MX_TIM1_Init+0x168>)
 8004642:	2200      	movs	r2, #0
 8004644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004646:	4b42      	ldr	r3, [pc, #264]	; (8004750 <MX_TIM1_Init+0x168>)
 8004648:	2200      	movs	r2, #0
 800464a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <MX_TIM1_Init+0x168>)
 800464e:	2200      	movs	r2, #0
 8004650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004652:	483f      	ldr	r0, [pc, #252]	; (8004750 <MX_TIM1_Init+0x168>)
 8004654:	f006 fac6 	bl	800abe4 <HAL_TIM_Base_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800465e:	f7fd fe60 	bl	8002322 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800466c:	4619      	mov	r1, r3
 800466e:	4838      	ldr	r0, [pc, #224]	; (8004750 <MX_TIM1_Init+0x168>)
 8004670:	f006 ff8e 	bl	800b590 <HAL_TIM_ConfigClockSource>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800467a:	f7fd fe52 	bl	8002322 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800467e:	4834      	ldr	r0, [pc, #208]	; (8004750 <MX_TIM1_Init+0x168>)
 8004680:	f006 fb70 	bl	800ad64 <HAL_TIM_PWM_Init>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800468a:	f7fd fe4a 	bl	8002322 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800469a:	4619      	mov	r1, r3
 800469c:	482c      	ldr	r0, [pc, #176]	; (8004750 <MX_TIM1_Init+0x168>)
 800469e:	f007 fb77 	bl	800bd90 <HAL_TIMEx_MasterConfigSynchronization>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80046a8:	f7fd fe3b 	bl	8002322 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ac:	2360      	movs	r3, #96	; 0x60
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046cc:	2200      	movs	r2, #0
 80046ce:	4619      	mov	r1, r3
 80046d0:	481f      	ldr	r0, [pc, #124]	; (8004750 <MX_TIM1_Init+0x168>)
 80046d2:	f006 fe9b 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80046dc:	f7fd fe21 	bl	8002322 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	2204      	movs	r2, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4819      	ldr	r0, [pc, #100]	; (8004750 <MX_TIM1_Init+0x168>)
 80046ea:	f006 fe8f 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80046f4:	f7fd fe15 	bl	8002322 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fc:	2208      	movs	r2, #8
 80046fe:	4619      	mov	r1, r3
 8004700:	4813      	ldr	r0, [pc, #76]	; (8004750 <MX_TIM1_Init+0x168>)
 8004702:	f006 fe83 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800470c:	f7fd fe09 	bl	8002322 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004710:	2300      	movs	r3, #0
 8004712:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004728:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4807      	ldr	r0, [pc, #28]	; (8004750 <MX_TIM1_Init+0x168>)
 8004734:	f007 fba8 	bl	800be88 <HAL_TIMEx_ConfigBreakDeadTime>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800473e:	f7fd fdf0 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004742:	4803      	ldr	r0, [pc, #12]	; (8004750 <MX_TIM1_Init+0x168>)
 8004744:	f000 fa5a 	bl	8004bfc <HAL_TIM_MspPostInit>

}
 8004748:	bf00      	nop
 800474a:	3758      	adds	r7, #88	; 0x58
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000e28 	.word	0x20000e28
 8004754:	40010000 	.word	0x40010000

08004758 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08c      	sub	sp, #48	; 0x30
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800475e:	f107 030c 	add.w	r3, r7, #12
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f008 fa00 	bl	800cb6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004774:	4b21      	ldr	r3, [pc, #132]	; (80047fc <MX_TIM2_Init+0xa4>)
 8004776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800477a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800477c:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <MX_TIM2_Init+0xa4>)
 800477e:	2200      	movs	r2, #0
 8004780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <MX_TIM2_Init+0xa4>)
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <MX_TIM2_Init+0xa4>)
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
 800478e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <MX_TIM2_Init+0xa4>)
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004796:	4b19      	ldr	r3, [pc, #100]	; (80047fc <MX_TIM2_Init+0xa4>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800479c:	2303      	movs	r3, #3
 800479e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047b4:	2301      	movs	r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	4619      	mov	r1, r3
 80047c6:	480d      	ldr	r0, [pc, #52]	; (80047fc <MX_TIM2_Init+0xa4>)
 80047c8:	f006 fbe4 	bl	800af94 <HAL_TIM_Encoder_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80047d2:	f7fd fda6 	bl	8002322 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4806      	ldr	r0, [pc, #24]	; (80047fc <MX_TIM2_Init+0xa4>)
 80047e4:	f007 fad4 	bl	800bd90 <HAL_TIMEx_MasterConfigSynchronization>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80047ee:	f7fd fd98 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047f2:	bf00      	nop
 80047f4:	3730      	adds	r7, #48	; 0x30
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000e70 	.word	0x20000e70

08004800 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004806:	f107 0320 	add.w	r3, r7, #32
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	611a      	str	r2, [r3, #16]
 800481e:	615a      	str	r2, [r3, #20]
 8004820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004822:	4b32      	ldr	r3, [pc, #200]	; (80048ec <MX_TIM3_Init+0xec>)
 8004824:	4a32      	ldr	r2, [pc, #200]	; (80048f0 <MX_TIM3_Init+0xf0>)
 8004826:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8004828:	4b30      	ldr	r3, [pc, #192]	; (80048ec <MX_TIM3_Init+0xec>)
 800482a:	2207      	movs	r2, #7
 800482c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482e:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <MX_TIM3_Init+0xec>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <MX_TIM3_Init+0xec>)
 8004836:	f240 32e7 	movw	r2, #999	; 0x3e7
 800483a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800483c:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <MX_TIM3_Init+0xec>)
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <MX_TIM3_Init+0xec>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004848:	4828      	ldr	r0, [pc, #160]	; (80048ec <MX_TIM3_Init+0xec>)
 800484a:	f006 fa8b 	bl	800ad64 <HAL_TIM_PWM_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004854:	f7fd fd65 	bl	8002322 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004860:	f107 0320 	add.w	r3, r7, #32
 8004864:	4619      	mov	r1, r3
 8004866:	4821      	ldr	r0, [pc, #132]	; (80048ec <MX_TIM3_Init+0xec>)
 8004868:	f007 fa92 	bl	800bd90 <HAL_TIMEx_MasterConfigSynchronization>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004872:	f7fd fd56 	bl	8002322 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004876:	2360      	movs	r3, #96	; 0x60
 8004878:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	2200      	movs	r2, #0
 800488a:	4619      	mov	r1, r3
 800488c:	4817      	ldr	r0, [pc, #92]	; (80048ec <MX_TIM3_Init+0xec>)
 800488e:	f006 fdbd 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004898:	f7fd fd43 	bl	8002322 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800489c:	1d3b      	adds	r3, r7, #4
 800489e:	2204      	movs	r2, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4812      	ldr	r0, [pc, #72]	; (80048ec <MX_TIM3_Init+0xec>)
 80048a4:	f006 fdb2 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80048ae:	f7fd fd38 	bl	8002322 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	2208      	movs	r2, #8
 80048b6:	4619      	mov	r1, r3
 80048b8:	480c      	ldr	r0, [pc, #48]	; (80048ec <MX_TIM3_Init+0xec>)
 80048ba:	f006 fda7 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80048c4:	f7fd fd2d 	bl	8002322 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	220c      	movs	r2, #12
 80048cc:	4619      	mov	r1, r3
 80048ce:	4807      	ldr	r0, [pc, #28]	; (80048ec <MX_TIM3_Init+0xec>)
 80048d0:	f006 fd9c 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80048da:	f7fd fd22 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80048de:	4803      	ldr	r0, [pc, #12]	; (80048ec <MX_TIM3_Init+0xec>)
 80048e0:	f000 f98c 	bl	8004bfc <HAL_TIM_MspPostInit>

}
 80048e4:	bf00      	nop
 80048e6:	3728      	adds	r7, #40	; 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000eb8 	.word	0x20000eb8
 80048f0:	40000400 	.word	0x40000400

080048f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	2224      	movs	r2, #36	; 0x24
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f008 f932 	bl	800cb6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <MX_TIM4_Init+0xa0>)
 8004912:	4a21      	ldr	r2, [pc, #132]	; (8004998 <MX_TIM4_Init+0xa4>)
 8004914:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004916:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <MX_TIM4_Init+0xa0>)
 8004918:	2200      	movs	r2, #0
 800491a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <MX_TIM4_Init+0xa0>)
 800491e:	2200      	movs	r2, #0
 8004920:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <MX_TIM4_Init+0xa0>)
 8004924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004928:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800492a:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <MX_TIM4_Init+0xa0>)
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004930:	4b18      	ldr	r3, [pc, #96]	; (8004994 <MX_TIM4_Init+0xa0>)
 8004932:	2200      	movs	r2, #0
 8004934:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004936:	2303      	movs	r3, #3
 8004938:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800493e:	2301      	movs	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800494e:	2301      	movs	r3, #1
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004952:	2300      	movs	r3, #0
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	4619      	mov	r1, r3
 8004960:	480c      	ldr	r0, [pc, #48]	; (8004994 <MX_TIM4_Init+0xa0>)
 8004962:	f006 fb17 	bl	800af94 <HAL_TIM_Encoder_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800496c:	f7fd fcd9 	bl	8002322 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004970:	2300      	movs	r3, #0
 8004972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4805      	ldr	r0, [pc, #20]	; (8004994 <MX_TIM4_Init+0xa0>)
 800497e:	f007 fa07 	bl	800bd90 <HAL_TIMEx_MasterConfigSynchronization>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004988:	f7fd fccb 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800498c:	bf00      	nop
 800498e:	3730      	adds	r7, #48	; 0x30
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000f00 	.word	0x20000f00
 8004998:	40000800 	.word	0x40000800

0800499c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a2:	463b      	mov	r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <MX_TIM6_Init+0x68>)
 80049ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049b2:	2253      	movs	r2, #83	; 0x53
 80049b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80049ca:	480d      	ldr	r0, [pc, #52]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049cc:	f006 f90a 	bl	800abe4 <HAL_TIM_Base_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80049d6:	f7fd fca4 	bl	8002322 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80049e2:	463b      	mov	r3, r7
 80049e4:	4619      	mov	r1, r3
 80049e6:	4806      	ldr	r0, [pc, #24]	; (8004a00 <MX_TIM6_Init+0x64>)
 80049e8:	f007 f9d2 	bl	800bd90 <HAL_TIMEx_MasterConfigSynchronization>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80049f2:	f7fd fc96 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000f48 	.word	0x20000f48
 8004a04:	40001000 	.word	0x40001000

08004a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <HAL_TIM_Base_MspInit+0x70>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_TIM_Base_MspInit+0x74>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <HAL_TIM_Base_MspInit+0x74>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6453      	str	r3, [r2, #68]	; 0x44
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_TIM_Base_MspInit+0x74>)
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004a36:	e01a      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <HAL_TIM_Base_MspInit+0x78>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d115      	bne.n	8004a6e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <HAL_TIM_Base_MspInit+0x74>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <HAL_TIM_Base_MspInit+0x74>)
 8004a4c:	f043 0310 	orr.w	r3, r3, #16
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <HAL_TIM_Base_MspInit+0x74>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	2036      	movs	r0, #54	; 0x36
 8004a64:	f003 fdd3 	bl	800860e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a68:	2036      	movs	r0, #54	; 0x36
 8004a6a:	f003 fdec 	bl	8008646 <HAL_NVIC_EnableIRQ>
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40001000 	.word	0x40001000

08004a84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	; 0x30
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	f107 031c 	add.w	r3, r7, #28
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d14b      	bne.n	8004b3e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a3e      	ldr	r2, [pc, #248]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b3c      	ldr	r3, [pc, #240]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	4b38      	ldr	r3, [pc, #224]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a37      	ldr	r2, [pc, #220]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b00:	2302      	movs	r3, #2
 8004b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b10:	f107 031c 	add.w	r3, r7, #28
 8004b14:	4619      	mov	r1, r3
 8004b16:	4825      	ldr	r0, [pc, #148]	; (8004bac <HAL_TIM_Encoder_MspInit+0x128>)
 8004b18:	f004 f924 	bl	8008d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	2302      	movs	r3, #2
 8004b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b30:	f107 031c 	add.w	r3, r7, #28
 8004b34:	4619      	mov	r1, r3
 8004b36:	481e      	ldr	r0, [pc, #120]	; (8004bb0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004b38:	f004 f914 	bl	8008d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004b3c:	e030      	b.n	8004ba0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_TIM_Encoder_MspInit+0x130>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d12b      	bne.n	8004ba0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	6413      	str	r3, [r2, #64]	; 0x40
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b64:	2300      	movs	r3, #0
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	6313      	str	r3, [r2, #48]	; 0x30
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b80:	23c0      	movs	r3, #192	; 0xc0
 8004b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b84:	2302      	movs	r3, #2
 8004b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b90:	2302      	movs	r3, #2
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b94:	f107 031c 	add.w	r3, r7, #28
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004b9c:	f004 f8e2 	bl	8008d64 <HAL_GPIO_Init>
}
 8004ba0:	bf00      	nop
 8004ba2:	3730      	adds	r7, #48	; 0x30
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40020000 	.word	0x40020000
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40000800 	.word	0x40000800

08004bb8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <HAL_TIM_PWM_MspInit+0x3c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10d      	bne.n	8004be6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <HAL_TIM_PWM_MspInit+0x40>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_TIM_PWM_MspInit+0x40>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <HAL_TIM_PWM_MspInit+0x40>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40023800 	.word	0x40023800

08004bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a25      	ldr	r2, [pc, #148]	; (8004cb0 <HAL_TIM_MspPostInit+0xb4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d11f      	bne.n	8004c5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_TIM_MspPostInit+0xb8>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4a23      	ldr	r2, [pc, #140]	; (8004cb4 <HAL_TIM_MspPostInit+0xb8>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2e:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <HAL_TIM_MspPostInit+0xb8>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004c3a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c40:	2302      	movs	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c50:	f107 0314 	add.w	r3, r7, #20
 8004c54:	4619      	mov	r1, r3
 8004c56:	4818      	ldr	r0, [pc, #96]	; (8004cb8 <HAL_TIM_MspPostInit+0xbc>)
 8004c58:	f004 f884 	bl	8008d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004c5c:	e023      	b.n	8004ca6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_TIM_MspPostInit+0xc0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d11e      	bne.n	8004ca6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <HAL_TIM_MspPostInit+0xb8>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <HAL_TIM_MspPostInit+0xb8>)
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	6313      	str	r3, [r2, #48]	; 0x30
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_TIM_MspPostInit+0xb8>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004c84:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c96:	2302      	movs	r3, #2
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <HAL_TIM_MspPostInit+0xc4>)
 8004ca2:	f004 f85f 	bl	8008d64 <HAL_GPIO_Init>
}
 8004ca6:	bf00      	nop
 8004ca8:	3728      	adds	r7, #40	; 0x28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40020000 	.word	0x40020000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40020800 	.word	0x40020800

08004cc4 <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <UI_ShowSensor+0xec>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <UI_ShowSensor+0x16>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e065      	b.n	8004da6 <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <UI_ShowSensor+0xf0>)
 8004cdc:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004ce0:	7818      	ldrb	r0, [r3, #0]
 8004ce2:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004ce4:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 8004ce6:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 8004cea:	3362      	adds	r3, #98	; 0x62
 8004cec:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004cf0:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 8004cf2:	330f      	adds	r3, #15
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2401      	movs	r4, #1
 8004cf8:	9400      	str	r4, [sp, #0]
 8004cfa:	f7fc fd13 	bl	8001724 <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 8004cfe:	4a2f      	ldr	r2, [pc, #188]	; (8004dbc <UI_ShowSensor+0xf8>)
 8004d00:	1d3b      	adds	r3, r7, #4
 8004d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d06:	6018      	str	r0, [r3, #0]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e03e      	b.n	8004d90 <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f1c3 030d 	rsb	r3, r3, #13
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b0e      	cmp	r3, #14
 8004d24:	d902      	bls.n	8004d2c <UI_ShowSensor+0x68>
 8004d26:	230e      	movs	r3, #14
 8004d28:	74fb      	strb	r3, [r7, #19]
 8004d2a:	e007      	b.n	8004d3c <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8004d2c:	7cfb      	ldrb	r3, [r7, #19]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d002      	beq.n	8004d38 <UI_ShowSensor+0x74>
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d101      	bne.n	8004d3c <UI_ShowSensor+0x78>
 8004d38:	2303      	movs	r3, #3
 8004d3a:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	00d2      	lsls	r2, r2, #3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4413      	add	r3, r2
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004d58:	785a      	ldrb	r2, [r3, #1]
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	330f      	adds	r3, #15
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 8004d66:	7afb      	ldrb	r3, [r7, #11]
 8004d68:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8004d6a:	1d3b      	adds	r3, r7, #4
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fc fead 	bl	8001acc <DISP_FillRect2>
		DISP_OLEDUpdate(
 8004d72:	7938      	ldrb	r0, [r7, #4]
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004d76:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8004d78:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8004d7a:	3306      	adds	r3, #6
 8004d7c:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <UI_ShowSensor+0xf4>)
 8004d80:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 8004d82:	330f      	adds	r3, #15
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f7fc fe59 	bl	8001a3c <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b0d      	cmp	r3, #13
 8004d94:	ddbd      	ble.n	8004d12 <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <UI_ShowSensor+0xec>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <UI_ShowSensor+0xec>)
 8004da2:	701a      	strb	r2, [r3, #0]
	return 1;
 8004da4:	2301      	movs	r3, #1
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000d99 	.word	0x20000d99
 8004db4:	20000b54 	.word	0x20000b54
 8004db8:	20000290 	.word	0x20000290
 8004dbc:	0800f968 	.word	0x0800f968

08004dc0 <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 8004dca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004dce:	483c      	ldr	r0, [pc, #240]	; (8004ec0 <UI_ReadButton+0x100>)
 8004dd0:	f004 f964 	bl	800909c <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	b25a      	sxtb	r2, r3
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 8004dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004df0:	4833      	ldr	r0, [pc, #204]	; (8004ec0 <UI_ReadButton+0x100>)
 8004df2:	f004 f953 	bl	800909c <HAL_GPIO_ReadPin>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <UI_ReadButton+0x40>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e000      	b.n	8004e02 <UI_ReadButton+0x42>
 8004e00:	2300      	movs	r3, #0
 8004e02:	b25a      	sxtb	r2, r3
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 8004e0e:	2110      	movs	r1, #16
 8004e10:	482c      	ldr	r0, [pc, #176]	; (8004ec4 <UI_ReadButton+0x104>)
 8004e12:	f004 f943 	bl	800909c <HAL_GPIO_ReadPin>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <UI_ReadButton+0x60>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	e000      	b.n	8004e22 <UI_ReadButton+0x62>
 8004e20:	2300      	movs	r3, #0
 8004e22:	b25a      	sxtb	r2, r3
 8004e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	b25b      	sxtb	r3, r3
 8004e2c:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 8004e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e32:	4824      	ldr	r0, [pc, #144]	; (8004ec4 <UI_ReadButton+0x104>)
 8004e34:	f004 f932 	bl	800909c <HAL_GPIO_ReadPin>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <UI_ReadButton+0x82>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	e000      	b.n	8004e44 <UI_ReadButton+0x84>
 8004e42:	2300      	movs	r3, #0
 8004e44:	b25a      	sxtb	r2, r3
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 8004e50:	2120      	movs	r1, #32
 8004e52:	481c      	ldr	r0, [pc, #112]	; (8004ec4 <UI_ReadButton+0x104>)
 8004e54:	f004 f922 	bl	800909c <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <UI_ReadButton+0xa2>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	e000      	b.n	8004e64 <UI_ReadButton+0xa4>
 8004e62:	2300      	movs	r3, #0
 8004e64:	b25a      	sxtb	r2, r3
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 8004e70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e74:	4813      	ldr	r0, [pc, #76]	; (8004ec4 <UI_ReadButton+0x104>)
 8004e76:	f004 f911 	bl	800909c <HAL_GPIO_ReadPin>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <UI_ReadButton+0xc4>
 8004e80:	2320      	movs	r3, #32
 8004e82:	e000      	b.n	8004e86 <UI_ReadButton+0xc6>
 8004e84:	2300      	movs	r3, #0
 8004e86:	b25a      	sxtb	r2, r3
 8004e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 8004e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e96:	480b      	ldr	r0, [pc, #44]	; (8004ec4 <UI_ReadButton+0x104>)
 8004e98:	f004 f900 	bl	800909c <HAL_GPIO_ReadPin>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <UI_ReadButton+0xe6>
 8004ea2:	2340      	movs	r3, #64	; 0x40
 8004ea4:	e000      	b.n	8004ea8 <UI_ReadButton+0xe8>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	71fb      	strb	r3, [r7, #7]
	return temp;
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40020800 	.word	0x40020800
 8004ec4:	40020400 	.word	0x40020400

08004ec8 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004ed4:	221b      	movs	r2, #27
 8004ed6:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 8004ed8:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 8004ede:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004ee0:	227f      	movs	r2, #127	; 0x7f
 8004ee2:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 8004ee4:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004ee6:	220a      	movs	r2, #10
 8004ee8:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004eec:	2202      	movs	r2, #2
 8004eee:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <UI_HomeScreenInit+0xdc>)
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	719a      	strb	r2, [r3, #6]

	home_menu[0].origin_x = 14;
 8004ef6:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004ef8:	220e      	movs	r2, #14
 8004efa:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004efe:	2226      	movs	r2, #38	; 0x26
 8004f00:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8004f02:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f0a:	2228      	movs	r2, #40	; 0x28
 8004f0c:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f10:	2202      	movs	r2, #2
 8004f12:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f16:	220e      	movs	r2, #14
 8004f18:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8004f1a:	4b23      	ldr	r3, [pc, #140]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f1c:	2233      	movs	r2, #51	; 0x33
 8004f1e:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8004f26:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f28:	2228      	movs	r2, #40	; 0x28
 8004f2a:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f2e:	2202      	movs	r2, #2
 8004f30:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8004f32:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f34:	2249      	movs	r2, #73	; 0x49
 8004f36:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f3a:	2226      	movs	r2, #38	; 0x26
 8004f3c:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8004f44:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f46:	2228      	movs	r2, #40	; 0x28
 8004f48:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8004f4a:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8004f50:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f52:	2249      	movs	r2, #73	; 0x49
 8004f54:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f58:	2233      	movs	r2, #51	; 0x33
 8004f5a:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f64:	2228      	movs	r2, #40	; 0x28
 8004f66:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <UI_HomeScreenInit+0xe0>)
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f7c:	227f      	movs	r2, #127	; 0x7f
 8004f7e:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f82:	220a      	movs	r2, #10
 8004f84:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8004f8c:	4b07      	ldr	r3, [pc, #28]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f8e:	2202      	movs	r2, #2
 8004f90:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <UI_HomeScreenInit+0xe4>)
 8004f94:	2202      	movs	r2, #2
 8004f96:	719a      	strb	r2, [r3, #6]
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000f90 	.word	0x20000f90
 8004fa8:	20000f98 	.word	0x20000f98
 8004fac:	20000fb4 	.word	0x20000fb4

08004fb0 <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08c      	sub	sp, #48	; 0x30
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460a      	mov	r2, r1
 8004fba:	71fb      	strb	r3, [r7, #7]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 8004fc0:	79bb      	ldrb	r3, [r7, #6]
 8004fc2:	4a23      	ldr	r2, [pc, #140]	; (8005050 <UI_HomeScreenDisplay+0xa0>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	789b      	ldrb	r3, [r3, #2]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	79bb      	ldrb	r3, [r7, #6]
 8004fcc:	4a21      	ldr	r2, [pc, #132]	; (8005054 <UI_HomeScreenDisplay+0xa4>)
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	f107 000c 	add.w	r0, r7, #12
 8004fd4:	9200      	str	r2, [sp, #0]
 8004fd6:	460a      	mov	r2, r1
 8004fd8:	491f      	ldr	r1, [pc, #124]	; (8005058 <UI_HomeScreenDisplay+0xa8>)
 8004fda:	f008 fb29 	bl	800d630 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	481d      	ldr	r0, [pc, #116]	; (800505c <UI_HomeScreenDisplay+0xac>)
 8004fe6:	f7fc fc57 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	e027      	b.n	8005040 <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d109      	bne.n	800500c <UI_HomeScreenDisplay+0x5c>
 8004ff8:	4919      	ldr	r1, [pc, #100]	; (8005060 <UI_HomeScreenDisplay+0xb0>)
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	440b      	add	r3, r1
 8005004:	3302      	adds	r3, #2
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e008      	b.n	800501e <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 800500c:	4914      	ldr	r1, [pc, #80]	; (8005060 <UI_HomeScreenDisplay+0xb0>)
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	440b      	add	r3, r1
 8005018:	3302      	adds	r3, #2
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <UI_HomeScreenDisplay+0xb0>)
 8005028:	441a      	add	r2, r3
 800502a:	490e      	ldr	r1, [pc, #56]	; (8005064 <UI_HomeScreenDisplay+0xb4>)
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fc fc2f 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	3301      	adds	r3, #1
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	2b03      	cmp	r3, #3
 8005044:	ddd4      	ble.n	8004ff0 <UI_HomeScreenDisplay+0x40>
	}
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	3728      	adds	r7, #40	; 0x28
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000dfc 	.word	0x20000dfc
 8005054:	20000da5 	.word	0x20000da5
 8005058:	0800f988 	.word	0x0800f988
 800505c:	20000fb4 	.word	0x20000fb4
 8005060:	20000f98 	.word	0x20000f98
 8005064:	20000294 	.word	0x20000294

08005068 <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8005072:	4b60      	ldr	r3, [pc, #384]	; (80051f4 <UI_HomeScreen+0x18c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	79fa      	ldrb	r2, [r7, #7]
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff98 	bl	8004fb0 <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8005080:	f002 fc78 	bl	8007974 <HAL_GetTick>
 8005084:	4603      	mov	r3, r0
 8005086:	4a5c      	ldr	r2, [pc, #368]	; (80051f8 <UI_HomeScreen+0x190>)
 8005088:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 800508a:	f7ff fe1b 	bl	8004cc4 <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800508e:	f002 fc71 	bl	8007974 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	4b58      	ldr	r3, [pc, #352]	; (80051f8 <UI_HomeScreen+0x190>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b45      	cmp	r3, #69	; 0x45
 800509c:	f240 809a 	bls.w	80051d4 <UI_HomeScreen+0x16c>
		if(bt == UI_ReadButton()) continue;
 80050a0:	f7ff fe8e 	bl	8004dc0 <UI_ReadButton>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b54      	ldr	r3, [pc, #336]	; (80051fc <UI_HomeScreen+0x194>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	f000 8093 	beq.w	80051d8 <UI_HomeScreen+0x170>
		bt = UI_ReadButton();
 80050b2:	f7ff fe85 	bl	8004dc0 <UI_ReadButton>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b50      	ldr	r3, [pc, #320]	; (80051fc <UI_HomeScreen+0x194>)
 80050bc:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 80050be:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <UI_HomeScreen+0x194>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <UI_HomeScreen+0x80>
			if(num_menu > 0) num_menu--; else num_menu=3;
 80050ca:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <UI_HomeScreen+0x18c>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <UI_HomeScreen+0x78>
 80050d2:	4b48      	ldr	r3, [pc, #288]	; (80051f4 <UI_HomeScreen+0x18c>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <UI_HomeScreen+0x18c>)
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e7c8      	b.n	8005072 <UI_HomeScreen+0xa>
 80050e0:	4b44      	ldr	r3, [pc, #272]	; (80051f4 <UI_HomeScreen+0x18c>)
 80050e2:	2203      	movs	r2, #3
 80050e4:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 80050e6:	e7c4      	b.n	8005072 <UI_HomeScreen+0xa>
		}
		else if(bt & SW_DW_PRESS) {
 80050e8:	4b44      	ldr	r3, [pc, #272]	; (80051fc <UI_HomeScreen+0x194>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <UI_HomeScreen+0xa6>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 80050f4:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <UI_HomeScreen+0x18c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d806      	bhi.n	800510a <UI_HomeScreen+0xa2>
 80050fc:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <UI_HomeScreen+0x18c>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	4b3b      	ldr	r3, [pc, #236]	; (80051f4 <UI_HomeScreen+0x18c>)
 8005106:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005108:	e7b3      	b.n	8005072 <UI_HomeScreen+0xa>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 800510a:	2303      	movs	r3, #3
 800510c:	e06e      	b.n	80051ec <UI_HomeScreen+0x184>
		}
		else if(bt & SW_RG_PRESS) {
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <UI_HomeScreen+0x194>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <UI_HomeScreen+0xc6>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b12      	cmp	r3, #18
 800511e:	d803      	bhi.n	8005128 <UI_HomeScreen+0xc0>
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	3301      	adds	r3, #1
 8005124:	71fb      	strb	r3, [r7, #7]
 8005126:	e7a4      	b.n	8005072 <UI_HomeScreen+0xa>
 8005128:	2300      	movs	r3, #0
 800512a:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 800512c:	e7a1      	b.n	8005072 <UI_HomeScreen+0xa>
		}
		else if(bt & SW_LF_PRESS) {
 800512e:	4b33      	ldr	r3, [pc, #204]	; (80051fc <UI_HomeScreen+0x194>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <UI_HomeScreen+0xe6>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <UI_HomeScreen+0xe0>
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	3b01      	subs	r3, #1
 8005144:	71fb      	strb	r3, [r7, #7]
 8005146:	e794      	b.n	8005072 <UI_HomeScreen+0xa>
 8005148:	2313      	movs	r3, #19
 800514a:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 800514c:	e791      	b.n	8005072 <UI_HomeScreen+0xa>
		}
		else if(bt & SW_HM_PRESS) {
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <UI_HomeScreen+0x194>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <UI_HomeScreen+0xfa>
			num_menu = 0;
 800515a:	4b26      	ldr	r3, [pc, #152]	; (80051f4 <UI_HomeScreen+0x18c>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8005160:	e787      	b.n	8005072 <UI_HomeScreen+0xa>
		}
		switch(num_menu) {
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <UI_HomeScreen+0x18c>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d830      	bhi.n	80051cc <UI_HomeScreen+0x164>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UI_HomeScreen+0x108>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005181 	.word	0x08005181
 8005174:	08005197 	.word	0x08005197
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051bd 	.word	0x080051bd
		case 0:
			if(bt & SW_OK_PRESS) {
 8005180:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <UI_HomeScreen+0x194>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d027      	beq.n	80051dc <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 800518c:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <UI_HomeScreen+0x198>)
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8005192:	2304      	movs	r3, #4
 8005194:	e02a      	b.n	80051ec <UI_HomeScreen+0x184>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8005196:	4b19      	ldr	r3, [pc, #100]	; (80051fc <UI_HomeScreen+0x194>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01e      	beq.n	80051e0 <UI_HomeScreen+0x178>
				num_checkpoint = checkpoint;
 80051a2:	4a17      	ldr	r2, [pc, #92]	; (8005200 <UI_HomeScreen+0x198>)
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 80051a8:	2305      	movs	r3, #5
 80051aa:	e01f      	b.n	80051ec <UI_HomeScreen+0x184>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <UI_HomeScreen+0x194>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <UI_HomeScreen+0x17c>
				return UI_PLAN_SELECT;
 80051b8:	2306      	movs	r3, #6
 80051ba:	e017      	b.n	80051ec <UI_HomeScreen+0x184>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 80051bc:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <UI_HomeScreen+0x194>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00f      	beq.n	80051e8 <UI_HomeScreen+0x180>
				return UI_SET;
 80051c8:	2307      	movs	r3, #7
 80051ca:	e00f      	b.n	80051ec <UI_HomeScreen+0x184>
			}
			break;
		default: num_menu = 0;
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <UI_HomeScreen+0x18c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e75a      	b.n	800508a <UI_HomeScreen+0x22>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80051d4:	bf00      	nop
 80051d6:	e758      	b.n	800508a <UI_HomeScreen+0x22>
		if(bt == UI_ReadButton()) continue;
 80051d8:	bf00      	nop
 80051da:	e756      	b.n	800508a <UI_HomeScreen+0x22>
			break;
 80051dc:	bf00      	nop
 80051de:	e754      	b.n	800508a <UI_HomeScreen+0x22>
			break;
 80051e0:	bf00      	nop
 80051e2:	e752      	b.n	800508a <UI_HomeScreen+0x22>
			break;
 80051e4:	bf00      	nop
 80051e6:	e750      	b.n	800508a <UI_HomeScreen+0x22>
			break;
 80051e8:	bf00      	nop
	while(1) {
 80051ea:	e74e      	b.n	800508a <UI_HomeScreen+0x22>
		}
	}
	return UI_IDLE;
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	2000106b 	.word	0x2000106b
 80051f8:	2000106c 	.word	0x2000106c
 80051fc:	20001070 	.word	0x20001070
 8005200:	20000da8 	.word	0x20000da8

08005204 <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 800520a:	4b42      	ldr	r3, [pc, #264]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800520c:	2203      	movs	r2, #3
 800520e:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 8005210:	4b40      	ldr	r3, [pc, #256]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005212:	220d      	movs	r2, #13
 8005214:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 8005216:	4b3f      	ldr	r3, [pc, #252]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005218:	2278      	movs	r2, #120	; 0x78
 800521a:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 800521c:	4b3d      	ldr	r3, [pc, #244]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800521e:	220b      	movs	r2, #11
 8005220:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 8005222:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005224:	2200      	movs	r2, #0
 8005226:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 8005228:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800522a:	2202      	movs	r2, #2
 800522c:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 800522e:	2301      	movs	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	e050      	b.n	80052d6 <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 8005234:	4b37      	ldr	r3, [pc, #220]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005236:	7818      	ldrb	r0, [r3, #0]
 8005238:	4936      	ldr	r1, [pc, #216]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	440b      	add	r3, r1
 8005244:	4602      	mov	r2, r0
 8005246:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	1e5a      	subs	r2, r3, #1
 800524c:	4931      	ldr	r1, [pc, #196]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	440b      	add	r3, r1
 8005256:	3301      	adds	r3, #1
 8005258:	781a      	ldrb	r2, [r3, #0]
 800525a:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800525c:	791b      	ldrb	r3, [r3, #4]
 800525e:	4413      	add	r3, r2
 8005260:	b2db      	uxtb	r3, r3
 8005262:	3302      	adds	r3, #2
 8005264:	b2d8      	uxtb	r0, r3
 8005266:	492b      	ldr	r1, [pc, #172]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	440b      	add	r3, r1
 8005272:	3301      	adds	r3, #1
 8005274:	4602      	mov	r2, r0
 8005276:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 8005278:	4b26      	ldr	r3, [pc, #152]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800527a:	78d8      	ldrb	r0, [r3, #3]
 800527c:	4925      	ldr	r1, [pc, #148]	; (8005314 <UI_SettingDisplayInit+0x110>)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	440b      	add	r3, r1
 8005288:	3303      	adds	r3, #3
 800528a:	4602      	mov	r2, r0
 800528c:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 800528e:	4b21      	ldr	r3, [pc, #132]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005290:	7918      	ldrb	r0, [r3, #4]
 8005292:	4920      	ldr	r1, [pc, #128]	; (8005314 <UI_SettingDisplayInit+0x110>)
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	440b      	add	r3, r1
 800529e:	3304      	adds	r3, #4
 80052a0:	4602      	mov	r2, r0
 80052a2:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <UI_SettingDisplayInit+0x110>)
 80052a6:	7898      	ldrb	r0, [r3, #2]
 80052a8:	491a      	ldr	r1, [pc, #104]	; (8005314 <UI_SettingDisplayInit+0x110>)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	440b      	add	r3, r1
 80052b4:	3302      	adds	r3, #2
 80052b6:	4602      	mov	r2, r0
 80052b8:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <UI_SettingDisplayInit+0x110>)
 80052bc:	7998      	ldrb	r0, [r3, #6]
 80052be:	4915      	ldr	r1, [pc, #84]	; (8005314 <UI_SettingDisplayInit+0x110>)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	440b      	add	r3, r1
 80052ca:	3306      	adds	r3, #6
 80052cc:	4602      	mov	r2, r0
 80052ce:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3301      	adds	r3, #1
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	ddab      	ble.n	8005234 <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <UI_SettingDisplayInit+0x114>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <UI_SettingDisplayInit+0x114>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <UI_SettingDisplayInit+0x114>)
 80052ea:	227f      	movs	r2, #127	; 0x7f
 80052ec:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <UI_SettingDisplayInit+0x114>)
 80052f0:	220a      	movs	r2, #10
 80052f2:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 80052f4:	4b08      	ldr	r3, [pc, #32]	; (8005318 <UI_SettingDisplayInit+0x114>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 80052fa:	4b07      	ldr	r3, [pc, #28]	; (8005318 <UI_SettingDisplayInit+0x114>)
 80052fc:	2202      	movs	r2, #2
 80052fe:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <UI_SettingDisplayInit+0x114>)
 8005302:	2202      	movs	r2, #2
 8005304:	719a      	strb	r2, [r3, #6]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000fbc 	.word	0x20000fbc
 8005318:	20000fd8 	.word	0x20000fd8

0800531c <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <UI_SettingDisplay+0xb4>)
 800532a:	f992 2000 	ldrsb.w	r2, [r2]
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	2b03      	cmp	r3, #3
 8005332:	dd06      	ble.n	8005342 <UI_SettingDisplay+0x26>
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	3b03      	subs	r3, #3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	b25a      	sxtb	r2, r3
 800533c:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <UI_SettingDisplay+0xb4>)
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e009      	b.n	8005356 <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <UI_SettingDisplay+0xb4>)
 8005346:	f992 2000 	ldrsb.w	r2, [r2]
 800534a:	4293      	cmp	r3, r2
 800534c:	da03      	bge.n	8005356 <UI_SettingDisplay+0x3a>
 800534e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005352:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <UI_SettingDisplay+0xb4>)
 8005354:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e031      	b.n	80053c0 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 800535c:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <UI_SettingDisplay+0xb4>)
 800535e:	f993 3000 	ldrsb.w	r3, [r3]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	441a      	add	r2, r3
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	429a      	cmp	r2, r3
 800536c:	d109      	bne.n	8005382 <UI_SettingDisplay+0x66>
 800536e:	4919      	ldr	r1, [pc, #100]	; (80053d4 <UI_SettingDisplay+0xb8>)
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4613      	mov	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	440b      	add	r3, r1
 800537a:	3302      	adds	r3, #2
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e008      	b.n	8005394 <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8005382:	4914      	ldr	r1, [pc, #80]	; (80053d4 <UI_SettingDisplay+0xb8>)
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	440b      	add	r3, r1
 800538e:	3302      	adds	r3, #2
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4613      	mov	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <UI_SettingDisplay+0xb8>)
 800539e:	441a      	add	r2, r3
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <UI_SettingDisplay+0xb4>)
 80053a2:	f993 3000 	ldrsb.w	r3, [r3]
 80053a6:	4619      	mov	r1, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	440b      	add	r3, r1
 80053ac:	490a      	ldr	r1, [pc, #40]	; (80053d8 <UI_SettingDisplay+0xbc>)
 80053ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f7fc fa6f 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	ddca      	ble.n	800535c <UI_SettingDisplay+0x40>
	}
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20001071 	.word	0x20001071
 80053d4:	20000fbc 	.word	0x20000fbc
 80053d8:	200002a4 	.word	0x200002a4

080053dc <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 80053e6:	494c      	ldr	r1, [pc, #304]	; (8005518 <UI_Setting+0x13c>)
 80053e8:	484c      	ldr	r0, [pc, #304]	; (800551c <UI_Setting+0x140>)
 80053ea:	f7fc fa55 	bl	8001898 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 80053ee:	4b4c      	ldr	r3, [pc, #304]	; (8005520 <UI_Setting+0x144>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff92 	bl	800531c <UI_SettingDisplay>
	tick = HAL_GetTick();
 80053f8:	f002 fabc 	bl	8007974 <HAL_GetTick>
 80053fc:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80053fe:	f002 fab9 	bl	8007974 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b45      	cmp	r3, #69	; 0x45
 800540a:	d972      	bls.n	80054f2 <UI_Setting+0x116>
		if(bt == UI_ReadButton()) continue;
 800540c:	f7ff fcd8 	bl	8004dc0 <UI_ReadButton>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	4293      	cmp	r3, r2
 8005418:	d06d      	beq.n	80054f6 <UI_Setting+0x11a>
		bt = UI_ReadButton();
 800541a:	f7ff fcd1 	bl	8004dc0 <UI_ReadButton>
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <UI_Setting+0x6e>
			if(num_menu==7) num_menu = 0; else num_menu++;
 800542c:	4b3c      	ldr	r3, [pc, #240]	; (8005520 <UI_Setting+0x144>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b07      	cmp	r3, #7
 8005432:	d103      	bne.n	800543c <UI_Setting+0x60>
 8005434:	4b3a      	ldr	r3, [pc, #232]	; (8005520 <UI_Setting+0x144>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e7d8      	b.n	80053ee <UI_Setting+0x12>
 800543c:	4b38      	ldr	r3, [pc, #224]	; (8005520 <UI_Setting+0x144>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b36      	ldr	r3, [pc, #216]	; (8005520 <UI_Setting+0x144>)
 8005446:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8005448:	e7d1      	b.n	80053ee <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00e      	beq.n	8005472 <UI_Setting+0x96>
			if(num_menu==0) num_menu = 7; else num_menu--;
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <UI_Setting+0x144>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <UI_Setting+0x88>
 800545c:	4b30      	ldr	r3, [pc, #192]	; (8005520 <UI_Setting+0x144>)
 800545e:	2207      	movs	r2, #7
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e7c4      	b.n	80053ee <UI_Setting+0x12>
 8005464:	4b2e      	ldr	r3, [pc, #184]	; (8005520 <UI_Setting+0x144>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	3b01      	subs	r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <UI_Setting+0x144>)
 800546e:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8005470:	e7bd      	b.n	80053ee <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <UI_Setting+0xaa>
			num_menu = 0;
 800547c:	4b28      	ldr	r3, [pc, #160]	; (8005520 <UI_Setting+0x144>)
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8005482:	2302      	movs	r3, #2
 8005484:	e043      	b.n	800550e <UI_Setting+0x132>
		}
		switch(num_menu) {
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <UI_Setting+0x144>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d8b7      	bhi.n	80053fe <UI_Setting+0x22>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UI_Setting+0xb8>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054bb 	.word	0x080054bb
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	080053ff 	.word	0x080053ff
 80054a8:	080054e5 	.word	0x080054e5
		case 0:
			if(bt & SW_OK_PRESS) {
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d021      	beq.n	80054fa <UI_Setting+0x11e>
				return UI_SET_ADC;
 80054b6:	2308      	movs	r3, #8
 80054b8:	e029      	b.n	800550e <UI_Setting+0x132>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01c      	beq.n	80054fe <UI_Setting+0x122>
				return UI_SET_CALIB;
 80054c4:	2309      	movs	r3, #9
 80054c6:	e022      	b.n	800550e <UI_Setting+0x132>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <UI_Setting+0x126>
				return UI_SET_CP;
 80054d2:	230a      	movs	r3, #10
 80054d4:	e01b      	b.n	800550e <UI_Setting+0x132>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <UI_Setting+0x12a>
				return UI_SET_PID;
 80054e0:	230b      	movs	r3, #11
 80054e2:	e014      	b.n	800550e <UI_Setting+0x132>
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <UI_Setting+0x12e>
				return UI_SET_MEM;
 80054ee:	230d      	movs	r3, #13
 80054f0:	e00d      	b.n	800550e <UI_Setting+0x132>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80054f2:	bf00      	nop
 80054f4:	e783      	b.n	80053fe <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 80054f6:	bf00      	nop
 80054f8:	e781      	b.n	80053fe <UI_Setting+0x22>
			break;
 80054fa:	bf00      	nop
 80054fc:	e77f      	b.n	80053fe <UI_Setting+0x22>
			break;
 80054fe:	bf00      	nop
 8005500:	e77d      	b.n	80053fe <UI_Setting+0x22>
			break;
 8005502:	bf00      	nop
 8005504:	e77b      	b.n	80053fe <UI_Setting+0x22>
			break;
 8005506:	bf00      	nop
 8005508:	e779      	b.n	80053fe <UI_Setting+0x22>
			}
			break;
 800550a:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800550c:	e777      	b.n	80053fe <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	0800fa10 	.word	0x0800fa10
 800551c:	20000fb4 	.word	0x20000fb4
 8005520:	20001072 	.word	0x20001072

08005524 <UI_PlanSetDisplayInit>:
		" Enc Val"
};

#define ACT_LIST	10

void UI_PlanSetDisplayInit() {
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 800552a:	4b49      	ldr	r3, [pc, #292]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 800552c:	2206      	movs	r2, #6
 800552e:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 8005530:	4b47      	ldr	r3, [pc, #284]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 8005532:	2210      	movs	r2, #16
 8005534:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 8005536:	4b46      	ldr	r3, [pc, #280]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 8005538:	2236      	movs	r2, #54	; 0x36
 800553a:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 800553c:	4b44      	ldr	r3, [pc, #272]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 800553e:	220b      	movs	r2, #11
 8005540:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 8005542:	4b43      	ldr	r3, [pc, #268]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 8005544:	2200      	movs	r2, #0
 8005546:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 8005548:	4b41      	ldr	r3, [pc, #260]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 800554a:	2202      	movs	r2, #2
 800554c:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 800554e:	4b41      	ldr	r3, [pc, #260]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 8005550:	4a3f      	ldr	r2, [pc, #252]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 8005552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005556:	6018      	str	r0, [r3, #0]
 8005558:	3304      	adds	r3, #4
 800555a:	8019      	strh	r1, [r3, #0]
 800555c:	3302      	adds	r3, #2
 800555e:	0c0a      	lsrs	r2, r1, #16
 8005560:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 8005562:	4b3c      	ldr	r3, [pc, #240]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 8005564:	223e      	movs	r2, #62	; 0x3e
 8005566:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 8005568:	4b3a      	ldr	r3, [pc, #232]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 800556a:	223a      	movs	r2, #58	; 0x3a
 800556c:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 8005570:	2202      	movs	r2, #2
 8005572:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 8005574:	2301      	movs	r3, #1
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e04c      	b.n	8005614 <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 800557a:	4935      	ldr	r1, [pc, #212]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	440b      	add	r3, r1
 8005586:	4a32      	ldr	r2, [pc, #200]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 8005588:	6810      	ldr	r0, [r2, #0]
 800558a:	6018      	str	r0, [r3, #0]
 800558c:	8891      	ldrh	r1, [r2, #4]
 800558e:	7992      	ldrb	r2, [r2, #6]
 8005590:	8099      	strh	r1, [r3, #4]
 8005592:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	492d      	ldr	r1, [pc, #180]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	440b      	add	r3, r1
 80055a2:	3301      	adds	r3, #1
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 80055a8:	791b      	ldrb	r3, [r3, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	3301      	adds	r3, #1
 80055b0:	b2d8      	uxtb	r0, r3
 80055b2:	4927      	ldr	r1, [pc, #156]	; (8005650 <UI_PlanSetDisplayInit+0x12c>)
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	440b      	add	r3, r1
 80055be:	3301      	adds	r3, #1
 80055c0:	4602      	mov	r2, r0
 80055c2:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 80055c4:	4923      	ldr	r1, [pc, #140]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	440b      	add	r3, r1
 80055d0:	4a20      	ldr	r2, [pc, #128]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 80055d2:	6810      	ldr	r0, [r2, #0]
 80055d4:	6018      	str	r0, [r3, #0]
 80055d6:	8891      	ldrh	r1, [r2, #4]
 80055d8:	7992      	ldrb	r2, [r2, #6]
 80055da:	8099      	strh	r1, [r3, #4]
 80055dc:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	1e5a      	subs	r2, r3, #1
 80055e2:	491c      	ldr	r1, [pc, #112]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 80055e4:	4613      	mov	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	440b      	add	r3, r1
 80055ec:	3301      	adds	r3, #1
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	4b18      	ldr	r3, [pc, #96]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	3301      	adds	r3, #1
 80055fa:	b2d8      	uxtb	r0, r3
 80055fc:	4915      	ldr	r1, [pc, #84]	; (8005654 <UI_PlanSetDisplayInit+0x130>)
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	440b      	add	r3, r1
 8005608:	3301      	adds	r3, #1
 800560a:	4602      	mov	r2, r0
 800560c:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3301      	adds	r3, #1
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b03      	cmp	r3, #3
 8005618:	ddaf      	ble.n	800557a <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8005620:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 8005622:	2200      	movs	r2, #0
 8005624:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 8005628:	227f      	movs	r2, #127	; 0x7f
 800562a:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 800562e:	220d      	movs	r2, #13
 8005630:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 8005634:	2201      	movs	r2, #1
 8005636:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 8005638:	4b07      	ldr	r3, [pc, #28]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 800563a:	2200      	movs	r2, #0
 800563c:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <UI_PlanSetDisplayInit+0x134>)
 8005640:	2202      	movs	r2, #2
 8005642:	719a      	strb	r2, [r3, #6]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	20000fe0 	.word	0x20000fe0
 8005654:	20000ffc 	.word	0x20000ffc
 8005658:	20001018 	.word	0x20001018

0800565c <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	; 0x30
 8005660:	af02      	add	r7, sp, #8
 8005662:	4603      	mov	r3, r0
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
 8005668:	4613      	mov	r3, r2
 800566a:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 800566c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 8005680:	79ba      	ldrb	r2, [r7, #6]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	4bc1      	ldr	r3, [pc, #772]	; (8005990 <UI_PlanSetDisplay+0x334>)
 800568a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800568e:	f107 000c 	add.w	r0, r7, #12
 8005692:	49c0      	ldr	r1, [pc, #768]	; (8005994 <UI_PlanSetDisplay+0x338>)
 8005694:	f007 ffcc 	bl	800d630 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 8005698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <UI_PlanSetDisplay+0x4c>
 80056a0:	4bbd      	ldr	r3, [pc, #756]	; (8005998 <UI_PlanSetDisplay+0x33c>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	709a      	strb	r2, [r3, #2]
 80056a6:	e002      	b.n	80056ae <UI_PlanSetDisplay+0x52>
 80056a8:	4bbb      	ldr	r3, [pc, #748]	; (8005998 <UI_PlanSetDisplay+0x33c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 80056ae:	f107 030c 	add.w	r3, r7, #12
 80056b2:	4619      	mov	r1, r3
 80056b4:	48b8      	ldr	r0, [pc, #736]	; (8005998 <UI_PlanSetDisplay+0x33c>)
 80056b6:	f7fc f8ef 	bl	8001898 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 80056ba:	2300      	movs	r3, #0
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	230e      	movs	r3, #14
 80056c0:	227f      	movs	r2, #127	; 0x7f
 80056c2:	210e      	movs	r1, #14
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7fb ff53 	bl	8001570 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 80056ca:	230d      	movs	r3, #13
 80056cc:	227f      	movs	r2, #127	; 0x7f
 80056ce:	210d      	movs	r1, #13
 80056d0:	2000      	movs	r0, #0
 80056d2:	f7fc f9b3 	bl	8001a3c <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d101      	bne.n	80056e4 <UI_PlanSetDisplay+0x88>
 80056e0:	2300      	movs	r3, #0
 80056e2:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 80056e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e8:	4aac      	ldr	r2, [pc, #688]	; (800599c <UI_PlanSetDisplay+0x340>)
 80056ea:	f992 2000 	ldrsb.w	r2, [r2]
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	dd06      	ble.n	8005702 <UI_PlanSetDisplay+0xa6>
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	3b03      	subs	r3, #3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	b25a      	sxtb	r2, r3
 80056fc:	4ba7      	ldr	r3, [pc, #668]	; (800599c <UI_PlanSetDisplay+0x340>)
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	e009      	b.n	8005716 <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 8005702:	4ba6      	ldr	r3, [pc, #664]	; (800599c <UI_PlanSetDisplay+0x340>)
 8005704:	f993 3000 	ldrsb.w	r3, [r3]
 8005708:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800570c:	429a      	cmp	r2, r3
 800570e:	da02      	bge.n	8005716 <UI_PlanSetDisplay+0xba>
 8005710:	4aa2      	ldr	r2, [pc, #648]	; (800599c <UI_PlanSetDisplay+0x340>)
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 8005716:	2300      	movs	r3, #0
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
 800571a:	e1c4      	b.n	8005aa6 <UI_PlanSetDisplay+0x44a>
		if(i + first_list == num && !temp) {
 800571c:	4b9f      	ldr	r3, [pc, #636]	; (800599c <UI_PlanSetDisplay+0x340>)
 800571e:	f993 3000 	ldrsb.w	r3, [r3]
 8005722:	461a      	mov	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	441a      	add	r2, r3
 8005728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d116      	bne.n	800575e <UI_PlanSetDisplay+0x102>
 8005730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005734:	2b00      	cmp	r3, #0
 8005736:	d112      	bne.n	800575e <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 8005738:	4999      	ldr	r1, [pc, #612]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	440b      	add	r3, r1
 8005744:	3302      	adds	r3, #2
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 800574a:	4996      	ldr	r1, [pc, #600]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	440b      	add	r3, r1
 8005756:	3302      	adds	r3, #2
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e011      	b.n	8005782 <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 800575e:	4990      	ldr	r1, [pc, #576]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	440b      	add	r3, r1
 800576a:	3302      	adds	r3, #2
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 8005770:	498c      	ldr	r1, [pc, #560]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 8005772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	440b      	add	r3, r1
 800577c:	3302      	adds	r3, #2
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 8005782:	4b86      	ldr	r3, [pc, #536]	; (800599c <UI_PlanSetDisplay+0x340>)
 8005784:	f993 3000 	ldrsb.w	r3, [r3]
 8005788:	461a      	mov	r2, r3
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	4413      	add	r3, r2
 800578e:	2b0a      	cmp	r3, #10
 8005790:	f200 8186 	bhi.w	8005aa0 <UI_PlanSetDisplay+0x444>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UI_PlanSetDisplay+0x140>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	08005809 	.word	0x08005809
 80057a4:	0800583f 	.word	0x0800583f
 80057a8:	0800588b 	.word	0x0800588b
 80057ac:	080058cb 	.word	0x080058cb
 80057b0:	0800590d 	.word	0x0800590d
 80057b4:	0800594f 	.word	0x0800594f
 80057b8:	080059cd 	.word	0x080059cd
 80057bc:	08005a0d 	.word	0x08005a0d
 80057c0:	08005a4d 	.word	0x08005a4d
 80057c4:	08005a77 	.word	0x08005a77
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	4a73      	ldr	r2, [pc, #460]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 80057d2:	4413      	add	r3, r2
 80057d4:	4974      	ldr	r1, [pc, #464]	; (80059a8 <UI_PlanSetDisplay+0x34c>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fc f85e 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f107 030c 	add.w	r3, r7, #12
 80057e6:	4971      	ldr	r1, [pc, #452]	; (80059ac <UI_PlanSetDisplay+0x350>)
 80057e8:	4618      	mov	r0, r3
 80057ea:	f007 ff21 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	4a6b      	ldr	r2, [pc, #428]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 80057f8:	4413      	add	r3, r2
 80057fa:	f107 020c 	add.w	r2, r7, #12
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f7fc f849 	bl	8001898 <DISP_DisplayText>
			break;
 8005806:	e14b      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 8005812:	4413      	add	r3, r2
 8005814:	4966      	ldr	r1, [pc, #408]	; (80059b0 <UI_PlanSetDisplay+0x354>)
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc f83e 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	4a5f      	ldr	r2, [pc, #380]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 8005826:	441a      	add	r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	4619      	mov	r1, r3
 800582e:	4b61      	ldr	r3, [pc, #388]	; (80059b4 <UI_PlanSetDisplay+0x358>)
 8005830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fc f82e 	bl	8001898 <DISP_DisplayText>
			break;
 800583c:	e130      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 2:
			DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	4a56      	ldr	r2, [pc, #344]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 8005848:	441a      	add	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	789b      	ldrb	r3, [r3, #2]
 800584e:	4619      	mov	r1, r3
 8005850:	4b59      	ldr	r3, [pc, #356]	; (80059b8 <UI_PlanSetDisplay+0x35c>)
 8005852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005856:	4619      	mov	r1, r3
 8005858:	4610      	mov	r0, r2
 800585a:	f7fc f81d 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->act_value);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	78db      	ldrb	r3, [r3, #3]
 8005862:	461a      	mov	r2, r3
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	4950      	ldr	r1, [pc, #320]	; (80059ac <UI_PlanSetDisplay+0x350>)
 800586a:	4618      	mov	r0, r3
 800586c:	f007 fee0 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8005870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005872:	4613      	mov	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	4a4a      	ldr	r2, [pc, #296]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 800587a:	4413      	add	r3, r2
 800587c:	f107 020c 	add.w	r2, r7, #12
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f7fc f808 	bl	8001898 <DISP_DisplayText>
			break;
 8005888:	e10a      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	4a43      	ldr	r2, [pc, #268]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 8005894:	4413      	add	r3, r2
 8005896:	4949      	ldr	r1, [pc, #292]	; (80059bc <UI_PlanSetDisplay+0x360>)
 8005898:	4618      	mov	r0, r3
 800589a:	f7fb fffd 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	791b      	ldrb	r3, [r3, #4]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	4940      	ldr	r1, [pc, #256]	; (80059ac <UI_PlanSetDisplay+0x350>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f007 fec0 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80058b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b2:	4613      	mov	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	4a3a      	ldr	r2, [pc, #232]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 80058ba:	4413      	add	r3, r2
 80058bc:	f107 020c 	add.w	r2, r7, #12
 80058c0:	4611      	mov	r1, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fb ffe8 	bl	8001898 <DISP_DisplayText>
			break;
 80058c8:	e0ea      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 80058d4:	4413      	add	r3, r2
 80058d6:	493a      	ldr	r1, [pc, #232]	; (80059c0 <UI_PlanSetDisplay+0x364>)
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fb ffdd 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80058e4:	461a      	mov	r2, r3
 80058e6:	f107 030c 	add.w	r3, r7, #12
 80058ea:	4930      	ldr	r1, [pc, #192]	; (80059ac <UI_PlanSetDisplay+0x350>)
 80058ec:	4618      	mov	r0, r3
 80058ee:	f007 fe9f 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 80058fc:	4413      	add	r3, r2
 80058fe:	f107 020c 	add.w	r2, r7, #12
 8005902:	4611      	mov	r1, r2
 8005904:	4618      	mov	r0, r3
 8005906:	f7fb ffc7 	bl	8001898 <DISP_DisplayText>
			break;
 800590a:	e0c9      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 800590c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590e:	4613      	mov	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 8005916:	4413      	add	r3, r2
 8005918:	492a      	ldr	r1, [pc, #168]	; (80059c4 <UI_PlanSetDisplay+0x368>)
 800591a:	4618      	mov	r0, r3
 800591c:	f7fb ffbc 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005926:	461a      	mov	r2, r3
 8005928:	f107 030c 	add.w	r3, r7, #12
 800592c:	491f      	ldr	r1, [pc, #124]	; (80059ac <UI_PlanSetDisplay+0x350>)
 800592e:	4618      	mov	r0, r3
 8005930:	f007 fe7e 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 800593e:	4413      	add	r3, r2
 8005940:	f107 020c 	add.w	r2, r7, #12
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7fb ffa6 	bl	8001898 <DISP_DisplayText>
			break;
 800594c:	e0a8      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 800594e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <UI_PlanSetDisplay+0x344>)
 8005958:	4413      	add	r3, r2
 800595a:	491b      	ldr	r1, [pc, #108]	; (80059c8 <UI_PlanSetDisplay+0x36c>)
 800595c:	4618      	mov	r0, r3
 800595e:	f7fb ff9b 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	79db      	ldrb	r3, [r3, #7]
 8005966:	461a      	mov	r2, r3
 8005968:	f107 030c 	add.w	r3, r7, #12
 800596c:	490f      	ldr	r1, [pc, #60]	; (80059ac <UI_PlanSetDisplay+0x350>)
 800596e:	4618      	mov	r0, r3
 8005970:	f007 fe5e 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	4613      	mov	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <UI_PlanSetDisplay+0x348>)
 800597e:	4413      	add	r3, r2
 8005980:	f107 020c 	add.w	r2, r7, #12
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7fb ff86 	bl	8001898 <DISP_DisplayText>
			break;
 800598c:	e088      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
 800598e:	bf00      	nop
 8005990:	200002c4 	.word	0x200002c4
 8005994:	0800fa98 	.word	0x0800fa98
 8005998:	20001018 	.word	0x20001018
 800599c:	20001073 	.word	0x20001073
 80059a0:	20000fe0 	.word	0x20000fe0
 80059a4:	20000ffc 	.word	0x20000ffc
 80059a8:	0800faa4 	.word	0x0800faa4
 80059ac:	0800faac 	.word	0x0800faac
 80059b0:	0800fab0 	.word	0x0800fab0
 80059b4:	200002ec 	.word	0x200002ec
 80059b8:	200002f8 	.word	0x200002f8
 80059bc:	0800fab8 	.word	0x0800fab8
 80059c0:	0800fac0 	.word	0x0800fac0
 80059c4:	0800fac8 	.word	0x0800fac8
 80059c8:	0800fad0 	.word	0x0800fad0
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 80059cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	4a38      	ldr	r2, [pc, #224]	; (8005ab8 <UI_PlanSetDisplay+0x45c>)
 80059d6:	4413      	add	r3, r2
 80059d8:	4938      	ldr	r1, [pc, #224]	; (8005abc <UI_PlanSetDisplay+0x460>)
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fb ff5c 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	7a1b      	ldrb	r3, [r3, #8]
 80059e4:	461a      	mov	r2, r3
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	4935      	ldr	r1, [pc, #212]	; (8005ac0 <UI_PlanSetDisplay+0x464>)
 80059ec:	4618      	mov	r0, r3
 80059ee:	f007 fe1f 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	4a32      	ldr	r2, [pc, #200]	; (8005ac4 <UI_PlanSetDisplay+0x468>)
 80059fc:	4413      	add	r3, r2
 80059fe:	f107 020c 	add.w	r2, r7, #12
 8005a02:	4611      	mov	r1, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fb ff47 	bl	8001898 <DISP_DisplayText>
			break;
 8005a0a:	e049      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	4a28      	ldr	r2, [pc, #160]	; (8005ab8 <UI_PlanSetDisplay+0x45c>)
 8005a16:	4413      	add	r3, r2
 8005a18:	492b      	ldr	r1, [pc, #172]	; (8005ac8 <UI_PlanSetDisplay+0x46c>)
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fb ff3c 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	7a5b      	ldrb	r3, [r3, #9]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f107 030c 	add.w	r3, r7, #12
 8005a2a:	4925      	ldr	r1, [pc, #148]	; (8005ac0 <UI_PlanSetDisplay+0x464>)
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f007 fdff 	bl	800d630 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8005a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a34:	4613      	mov	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <UI_PlanSetDisplay+0x468>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f107 020c 	add.w	r2, r7, #12
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fb ff27 	bl	8001898 <DISP_DisplayText>
			break;
 8005a4a:	e029      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <UI_PlanSetDisplay+0x45c>)
 8005a56:	4413      	add	r3, r2
 8005a58:	491c      	ldr	r1, [pc, #112]	; (8005acc <UI_PlanSetDisplay+0x470>)
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fb ff1c 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <UI_PlanSetDisplay+0x468>)
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4918      	ldr	r1, [pc, #96]	; (8005ad0 <UI_PlanSetDisplay+0x474>)
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fb ff12 	bl	8001898 <DISP_DisplayText>
			break;
 8005a74:	e014      	b.n	8005aa0 <UI_PlanSetDisplay+0x444>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <UI_PlanSetDisplay+0x45c>)
 8005a80:	4413      	add	r3, r2
 8005a82:	4914      	ldr	r1, [pc, #80]	; (8005ad4 <UI_PlanSetDisplay+0x478>)
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fb ff07 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <UI_PlanSetDisplay+0x468>)
 8005a94:	4413      	add	r3, r2
 8005a96:	490e      	ldr	r1, [pc, #56]	; (8005ad0 <UI_PlanSetDisplay+0x474>)
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fb fefd 	bl	8001898 <DISP_DisplayText>
			break;
 8005a9e:	bf00      	nop
	for(int i=0; i<4; i++) {
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	f77f ae37 	ble.w	800571c <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	3728      	adds	r7, #40	; 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000fe0 	.word	0x20000fe0
 8005abc:	0800fad8 	.word	0x0800fad8
 8005ac0:	0800faac 	.word	0x0800faac
 8005ac4:	20000ffc 	.word	0x20000ffc
 8005ac8:	0800fae4 	.word	0x0800fae4
 8005acc:	0800faec 	.word	0x0800faec
 8005ad0:	0800faf4 	.word	0x0800faf4
 8005ad4:	0800faf8 	.word	0x0800faf8

08005ad8 <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
	uint8_t num_index = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Action_typedef plan_set = GetAction(num_index);
 8005ae4:	f107 0314 	add.w	r3, r7, #20
 8005ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe f9a6 	bl	8003e40 <GetAction>
	int8_t num = -1;
 8005af4:	23ff      	movs	r3, #255	; 0xff
 8005af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 8005b00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b04:	f107 0114 	add.w	r1, r7, #20
 8005b08:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fda5 	bl	800565c <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 8005b12:	f001 ff2f 	bl	8007974 <HAL_GetTick>
 8005b16:	6238      	str	r0, [r7, #32]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8005b18:	f001 ff2c 	bl	8007974 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005b26:	2a01      	cmp	r2, #1
 8005b28:	d101      	bne.n	8005b2e <UI_PlanSet+0x56>
 8005b2a:	2219      	movs	r2, #25
 8005b2c:	e000      	b.n	8005b30 <UI_PlanSet+0x58>
 8005b2e:	2246      	movs	r2, #70	; 0x46
 8005b30:	429a      	cmp	r2, r3
 8005b32:	f200 82a3 	bhi.w	800607c <UI_PlanSet+0x5a4>

		bt2 = UI_ReadButton();
 8005b36:	f7ff f943 	bl	8004dc0 <UI_ReadButton>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	77fb      	strb	r3, [r7, #31]

		if(bt == bt2 && bt_status == 0) continue;
 8005b3e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d104      	bne.n	8005b52 <UI_PlanSet+0x7a>
 8005b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8297 	beq.w	8006080 <UI_PlanSet+0x5a8>
		bt = bt2;
 8005b52:	7ffb      	ldrb	r3, [r7, #31]
 8005b54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 8005b58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <UI_PlanSet+0x96>
			num = -1;
 8005b64:	23ff      	movs	r3, #255	; 0xff
 8005b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			return UI_HOMESCREEN;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e29e      	b.n	80060ac <UI_PlanSet+0x5d4>
		}
		switch(num) {
 8005b6e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005b72:	2b0a      	cmp	r3, #10
 8005b74:	d83e      	bhi.n	8005bf4 <UI_PlanSet+0x11c>
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
			if(bt & SW_UP_PRESS) {
 8005b76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <UI_PlanSet+0xd0>
				if(num != 0) num--; else num=10;
 8005b82:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <UI_PlanSet+0xc2>
 8005b8a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b98:	e002      	b.n	8005ba0 <UI_PlanSet+0xc8>
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bt_status = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005ba6:	e7ab      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			else if(bt & SW_DW_PRESS) {
 8005ba8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <UI_PlanSet+0x102>
				if(num != 10) num++; else num=0;
 8005bb4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	d007      	beq.n	8005bcc <UI_PlanSet+0xf4>
 8005bbc:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bca:	e002      	b.n	8005bd2 <UI_PlanSet+0xfa>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bt_status = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005bd8:	e792      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			else if(bt & SW_BK_PRESS) {
 8005bda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <UI_PlanSet+0x11c>
				bt_status = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				num = -1;
 8005bec:	23ff      	movs	r3, #255	; 0xff
 8005bee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				goto plan_set;
 8005bf2:	e785      	b.n	8005b00 <UI_PlanSet+0x28>
			}
		}
		switch(num) {
 8005bf4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	2b09      	cmp	r3, #9
 8005bfc:	d88c      	bhi.n	8005b18 <UI_PlanSet+0x40>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UI_PlanSet+0x12c>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005d79 	.word	0x08005d79
 8005c0c:	08005dcb 	.word	0x08005dcb
 8005c10:	08005e1d 	.word	0x08005e1d
 8005c14:	08005e6f 	.word	0x08005e6f
 8005c18:	08005ec1 	.word	0x08005ec1
 8005c1c:	08005f25 	.word	0x08005f25
 8005c20:	08005f89 	.word	0x08005f89
 8005c24:	08005fdd 	.word	0x08005fdd
 8005c28:	0800602d 	.word	0x0800602d
		case -1:
			if(bt & SW_DW_PRESS) {
 8005c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <UI_PlanSet+0x17c>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8005c38:	7d3b      	ldrb	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <UI_PlanSet+0x170>
 8005c3e:	7d3b      	ldrb	r3, [r7, #20]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	753b      	strb	r3, [r7, #20]
 8005c46:	e001      	b.n	8005c4c <UI_PlanSet+0x174>
 8005c48:	2309      	movs	r3, #9
 8005c4a:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005c52:	e755      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			else if(bt & SW_UP_PRESS) {
 8005c54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <UI_PlanSet+0x1a4>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8005c60:	7d3b      	ldrb	r3, [r7, #20]
 8005c62:	2b09      	cmp	r3, #9
 8005c64:	d004      	beq.n	8005c70 <UI_PlanSet+0x198>
 8005c66:	7d3b      	ldrb	r3, [r7, #20]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	753b      	strb	r3, [r7, #20]
 8005c6e:	e001      	b.n	8005c74 <UI_PlanSet+0x19c>
 8005c70:	2300      	movs	r3, #0
 8005c72:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005c7a:	e741      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			else if(bt & SW_OK_PRESS) {
 8005c7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d006      	beq.n	8005c96 <UI_PlanSet+0x1be>
				num = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bt_status = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005c94:	e734      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			else if(bt & SW_BK_PRESS) {
 8005c96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00e      	beq.n	8005cc0 <UI_PlanSet+0x1e8>
				SetAction(plan_set, num_index);
 8005ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca6:	f107 0214 	add.w	r2, r7, #20
 8005caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cac:	f7fe f908 	bl	8003ec0 <SetAction>
				num = -1;
 8005cb0:	23ff      	movs	r3, #255	; 0xff
 8005cb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bt_status = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				return UI_HOMESCREEN;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e1f5      	b.n	80060ac <UI_PlanSet+0x5d4>
			}
			else if(bt2 & SW_RG_PRESS) {
 8005cc0:	7ffb      	ldrb	r3, [r7, #31]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d028      	beq.n	8005d1c <UI_PlanSet+0x244>
				SetAction(plan_set, num_index);
 8005cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cce:	f107 0214 	add.w	r2, r7, #20
 8005cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cd4:	f7fe f8f4 	bl	8003ec0 <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8005cd8:	4bb5      	ldr	r3, [pc, #724]	; (8005fb0 <UI_PlanSet+0x4d8>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d005      	beq.n	8005cf0 <UI_PlanSet+0x218>
 8005ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cee:	e002      	b.n	8005cf6 <UI_PlanSet+0x21e>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				plan_set = GetAction(num_index);
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe f89e 	bl	8003e40 <GetAction>
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	463a      	mov	r2, r7
 8005d0a:	6810      	ldr	r0, [r2, #0]
 8005d0c:	6851      	ldr	r1, [r2, #4]
 8005d0e:	c303      	stmia	r3!, {r0, r1}
 8005d10:	8912      	ldrh	r2, [r2, #8]
 8005d12:	801a      	strh	r2, [r3, #0]
				bt_status = 1;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005d1a:	e6f1      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			else if(bt2 & SW_LF_PRESS) {
 8005d1c:	7ffb      	ldrb	r3, [r7, #31]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 81ae 	beq.w	8006084 <UI_PlanSet+0x5ac>
				SetAction(plan_set, num_index);
 8005d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d2c:	f107 0214 	add.w	r2, r7, #20
 8005d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d32:	f7fe f8c5 	bl	8003ec0 <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8005d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <UI_PlanSet+0x272>
 8005d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d42:	3b01      	subs	r3, #1
 8005d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d48:	e003      	b.n	8005d52 <UI_PlanSet+0x27a>
 8005d4a:	4b99      	ldr	r3, [pc, #612]	; (8005fb0 <UI_PlanSet+0x4d8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				plan_set = GetAction(num_index);
 8005d52:	463b      	mov	r3, r7
 8005d54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe f870 	bl	8003e40 <GetAction>
 8005d60:	f107 0314 	add.w	r3, r7, #20
 8005d64:	463a      	mov	r2, r7
 8005d66:	6810      	ldr	r0, [r2, #0]
 8005d68:	6851      	ldr	r1, [r2, #4]
 8005d6a:	c303      	stmia	r3!, {r0, r1}
 8005d6c:	8912      	ldrh	r2, [r2, #8]
 8005d6e:	801a      	strh	r2, [r3, #0]
				bt_status = 1;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005d76:	e6c3      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8005d78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00d      	beq.n	8005da0 <UI_PlanSet+0x2c8>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8005d84:	7d7b      	ldrb	r3, [r7, #21]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <UI_PlanSet+0x2bc>
 8005d8a:	7d7b      	ldrb	r3, [r7, #21]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	757b      	strb	r3, [r7, #21]
 8005d92:	e001      	b.n	8005d98 <UI_PlanSet+0x2c0>
 8005d94:	230e      	movs	r3, #14
 8005d96:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005d9e:	e6af      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8005da0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 816d 	beq.w	8006088 <UI_PlanSet+0x5b0>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8005dae:	7d7b      	ldrb	r3, [r7, #21]
 8005db0:	2b0e      	cmp	r3, #14
 8005db2:	d004      	beq.n	8005dbe <UI_PlanSet+0x2e6>
 8005db4:	7d7b      	ldrb	r3, [r7, #21]
 8005db6:	3301      	adds	r3, #1
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	757b      	strb	r3, [r7, #21]
 8005dbc:	e001      	b.n	8005dc2 <UI_PlanSet+0x2ea>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005dc8:	e69a      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8005dca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <UI_PlanSet+0x31a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8005dd6:	7dbb      	ldrb	r3, [r7, #22]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <UI_PlanSet+0x30e>
 8005ddc:	7dbb      	ldrb	r3, [r7, #22]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	75bb      	strb	r3, [r7, #22]
 8005de4:	e001      	b.n	8005dea <UI_PlanSet+0x312>
 8005de6:	2302      	movs	r3, #2
 8005de8:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005df0:	e686      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8005df2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8146 	beq.w	800608c <UI_PlanSet+0x5b4>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8005e00:	7dbb      	ldrb	r3, [r7, #22]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d004      	beq.n	8005e10 <UI_PlanSet+0x338>
 8005e06:	7dbb      	ldrb	r3, [r7, #22]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	75bb      	strb	r3, [r7, #22]
 8005e0e:	e001      	b.n	8005e14 <UI_PlanSet+0x33c>
 8005e10:	2300      	movs	r3, #0
 8005e12:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005e1a:	e671      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8005e1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <UI_PlanSet+0x36c>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <UI_PlanSet+0x360>
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	75fb      	strb	r3, [r7, #23]
 8005e36:	e001      	b.n	8005e3c <UI_PlanSet+0x364>
 8005e38:	23ff      	movs	r3, #255	; 0xff
 8005e3a:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005e42:	e65d      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8005e44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 811f 	beq.w	8006090 <UI_PlanSet+0x5b8>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	2bff      	cmp	r3, #255	; 0xff
 8005e56:	d004      	beq.n	8005e62 <UI_PlanSet+0x38a>
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	75fb      	strb	r3, [r7, #23]
 8005e60:	e001      	b.n	8005e66 <UI_PlanSet+0x38e>
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005e6c:	e648      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8005e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <UI_PlanSet+0x3be>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8005e7a:	7e3b      	ldrb	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <UI_PlanSet+0x3b2>
 8005e80:	7e3b      	ldrb	r3, [r7, #24]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	763b      	strb	r3, [r7, #24]
 8005e88:	e001      	b.n	8005e8e <UI_PlanSet+0x3b6>
 8005e8a:	23ff      	movs	r3, #255	; 0xff
 8005e8c:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005e94:	e634      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8005e96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80f8 	beq.w	8006094 <UI_PlanSet+0x5bc>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 8005ea4:	7e3b      	ldrb	r3, [r7, #24]
 8005ea6:	2bff      	cmp	r3, #255	; 0xff
 8005ea8:	d004      	beq.n	8005eb4 <UI_PlanSet+0x3dc>
 8005eaa:	7e3b      	ldrb	r3, [r7, #24]
 8005eac:	3301      	adds	r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	763b      	strb	r3, [r7, #24]
 8005eb2:	e001      	b.n	8005eb8 <UI_PlanSet+0x3e0>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005ebe:	e61f      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 8005ec0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d012      	beq.n	8005ef2 <UI_PlanSet+0x41a>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 8005ecc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005ed0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005ed4:	d007      	beq.n	8005ee6 <UI_PlanSet+0x40e>
 8005ed6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	767b      	strb	r3, [r7, #25]
 8005ee4:	e001      	b.n	8005eea <UI_PlanSet+0x412>
 8005ee6:	2363      	movs	r3, #99	; 0x63
 8005ee8:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005ef0:	e606      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8005ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80cc 	beq.w	8006098 <UI_PlanSet+0x5c0>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8005f00:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005f04:	2b63      	cmp	r3, #99	; 0x63
 8005f06:	d007      	beq.n	8005f18 <UI_PlanSet+0x440>
 8005f08:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	b25b      	sxtb	r3, r3
 8005f14:	767b      	strb	r3, [r7, #25]
 8005f16:	e001      	b.n	8005f1c <UI_PlanSet+0x444>
 8005f18:	239d      	movs	r3, #157	; 0x9d
 8005f1a:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005f22:	e5ed      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 8005f24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <UI_PlanSet+0x47e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 8005f30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005f34:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005f38:	d007      	beq.n	8005f4a <UI_PlanSet+0x472>
 8005f3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	76bb      	strb	r3, [r7, #26]
 8005f48:	e001      	b.n	8005f4e <UI_PlanSet+0x476>
 8005f4a:	2363      	movs	r3, #99	; 0x63
 8005f4c:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005f54:	e5d4      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8005f56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 809c 	beq.w	800609c <UI_PlanSet+0x5c4>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8005f64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005f68:	2b63      	cmp	r3, #99	; 0x63
 8005f6a:	d007      	beq.n	8005f7c <UI_PlanSet+0x4a4>
 8005f6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	3301      	adds	r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	b25b      	sxtb	r3, r3
 8005f78:	76bb      	strb	r3, [r7, #26]
 8005f7a:	e001      	b.n	8005f80 <UI_PlanSet+0x4a8>
 8005f7c:	239d      	movs	r3, #157	; 0x9d
 8005f7e:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005f86:	e5bb      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 8005f88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00f      	beq.n	8005fb4 <UI_PlanSet+0x4dc>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 8005f94:	7efb      	ldrb	r3, [r7, #27]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <UI_PlanSet+0x4cc>
 8005f9a:	7efb      	ldrb	r3, [r7, #27]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	76fb      	strb	r3, [r7, #27]
 8005fa2:	e001      	b.n	8005fa8 <UI_PlanSet+0x4d0>
 8005fa4:	23ff      	movs	r3, #255	; 0xff
 8005fa6:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005fae:	e5a7      	b.n	8005b00 <UI_PlanSet+0x28>
 8005fb0:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8005fb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d06f      	beq.n	80060a0 <UI_PlanSet+0x5c8>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 8005fc0:	7efb      	ldrb	r3, [r7, #27]
 8005fc2:	2bff      	cmp	r3, #255	; 0xff
 8005fc4:	d004      	beq.n	8005fd0 <UI_PlanSet+0x4f8>
 8005fc6:	7efb      	ldrb	r3, [r7, #27]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	76fb      	strb	r3, [r7, #27]
 8005fce:	e001      	b.n	8005fd4 <UI_PlanSet+0x4fc>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8005fda:	e591      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 8005fdc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00d      	beq.n	8006004 <UI_PlanSet+0x52c>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 8005fe8:	7f3b      	ldrb	r3, [r7, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <UI_PlanSet+0x520>
 8005fee:	7f3b      	ldrb	r3, [r7, #28]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	773b      	strb	r3, [r7, #28]
 8005ff6:	e001      	b.n	8005ffc <UI_PlanSet+0x524>
 8005ff8:	23ff      	movs	r3, #255	; 0xff
 8005ffa:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8006002:	e57d      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8006004:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d049      	beq.n	80060a4 <UI_PlanSet+0x5cc>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 8006010:	7f3b      	ldrb	r3, [r7, #28]
 8006012:	2bff      	cmp	r3, #255	; 0xff
 8006014:	d004      	beq.n	8006020 <UI_PlanSet+0x548>
 8006016:	7f3b      	ldrb	r3, [r7, #28]
 8006018:	3301      	adds	r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	773b      	strb	r3, [r7, #28]
 800601e:	e001      	b.n	8006024 <UI_PlanSet+0x54c>
 8006020:	2300      	movs	r3, #0
 8006022:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 800602a:	e569      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 800602c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <UI_PlanSet+0x57c>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 8006038:	7f7b      	ldrb	r3, [r7, #29]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <UI_PlanSet+0x570>
 800603e:	7f7b      	ldrb	r3, [r7, #29]
 8006040:	3b01      	subs	r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	777b      	strb	r3, [r7, #29]
 8006046:	e001      	b.n	800604c <UI_PlanSet+0x574>
 8006048:	23ff      	movs	r3, #255	; 0xff
 800604a:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 8006052:	e555      	b.n	8005b00 <UI_PlanSet+0x28>
			}
			if(bt & SW_RG_PRESS) {
 8006054:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d023      	beq.n	80060a8 <UI_PlanSet+0x5d0>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 8006060:	7f7b      	ldrb	r3, [r7, #29]
 8006062:	2bff      	cmp	r3, #255	; 0xff
 8006064:	d004      	beq.n	8006070 <UI_PlanSet+0x598>
 8006066:	7f7b      	ldrb	r3, [r7, #29]
 8006068:	3301      	adds	r3, #1
 800606a:	b2db      	uxtb	r3, r3
 800606c:	777b      	strb	r3, [r7, #29]
 800606e:	e001      	b.n	8006074 <UI_PlanSet+0x59c>
 8006070:	2300      	movs	r3, #0
 8006072:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				goto plan_set;
 800607a:	e541      	b.n	8005b00 <UI_PlanSet+0x28>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 800607c:	bf00      	nop
 800607e:	e54b      	b.n	8005b18 <UI_PlanSet+0x40>
		if(bt == bt2 && bt_status == 0) continue;
 8006080:	bf00      	nop
 8006082:	e549      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 8006084:	bf00      	nop
 8006086:	e547      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 8006088:	bf00      	nop
 800608a:	e545      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 800608c:	bf00      	nop
 800608e:	e543      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 8006090:	bf00      	nop
 8006092:	e541      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 8006094:	bf00      	nop
 8006096:	e53f      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 8006098:	bf00      	nop
 800609a:	e53d      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 800609c:	bf00      	nop
 800609e:	e53b      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 80060a0:	bf00      	nop
 80060a2:	e539      	b.n	8005b18 <UI_PlanSet+0x40>
			break;
 80060a4:	bf00      	nop
 80060a6:	e537      	b.n	8005b18 <UI_PlanSet+0x40>
			}
			break;
 80060a8:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 80060aa:	e535      	b.n	8005b18 <UI_PlanSet+0x40>
		}
	}
	return UI_IDLE;
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3728      	adds	r7, #40	; 0x28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 80060b8:	4b24      	ldr	r3, [pc, #144]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060ba:	2204      	movs	r2, #4
 80060bc:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 80060be:	4b23      	ldr	r3, [pc, #140]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060c0:	2232      	movs	r2, #50	; 0x32
 80060c2:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 80060c4:	4b21      	ldr	r3, [pc, #132]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060c6:	223a      	movs	r2, #58	; 0x3a
 80060c8:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 80060ca:	4b20      	ldr	r3, [pc, #128]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060cc:	220b      	movs	r2, #11
 80060ce:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 80060d0:	4b1e      	ldr	r3, [pc, #120]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060d8:	2202      	movs	r2, #2
 80060da:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 80060dc:	4b1b      	ldr	r3, [pc, #108]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060de:	2202      	movs	r2, #2
 80060e0:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 80060e2:	4b1a      	ldr	r3, [pc, #104]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060e4:	4a19      	ldr	r2, [pc, #100]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060e6:	3307      	adds	r3, #7
 80060e8:	6810      	ldr	r0, [r2, #0]
 80060ea:	6018      	str	r0, [r3, #0]
 80060ec:	8891      	ldrh	r1, [r2, #4]
 80060ee:	7992      	ldrb	r2, [r2, #6]
 80060f0:	8099      	strh	r1, [r3, #4]
 80060f2:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060f6:	223f      	movs	r2, #63	; 0x3f
 80060f8:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 80060fa:	4b14      	ldr	r3, [pc, #80]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 80060fc:	223c      	movs	r2, #60	; 0x3c
 80060fe:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <UI_ADCThresholdDisplayInit+0x98>)
 8006102:	2200      	movs	r2, #0
 8006104:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 800610e:	2200      	movs	r2, #0
 8006110:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 8006114:	227f      	movs	r2, #127	; 0x7f
 8006116:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 8006118:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 800611a:	220a      	movs	r2, #10
 800611c:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 8006120:	2201      	movs	r2, #1
 8006122:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 8006124:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 8006126:	2202      	movs	r2, #2
 8006128:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <UI_ADCThresholdDisplayInit+0x9c>)
 800612c:	2202      	movs	r2, #2
 800612e:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <UI_ADCThresholdDisplayInit+0xa0>)
 8006132:	2220      	movs	r2, #32
 8006134:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <UI_ADCThresholdDisplayInit+0xa0>)
 8006138:	2206      	movs	r2, #6
 800613a:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <UI_ADCThresholdDisplayInit+0xa0>)
 800613e:	2202      	movs	r2, #2
 8006140:	715a      	strb	r2, [r3, #5]

}
 8006142:	bf00      	nop
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	20001020 	.word	0x20001020
 8006150:	20001030 	.word	0x20001030
 8006154:	20001038 	.word	0x20001038

08006158 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 8006162:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <UI_ADCThresholdDisplay+0xc0>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	79fa      	ldrb	r2, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d03e      	beq.n	80061ea <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	f107 0310 	add.w	r3, r7, #16
 8006174:	4929      	ldr	r1, [pc, #164]	; (800621c <UI_ADCThresholdDisplay+0xc4>)
 8006176:	4618      	mov	r0, r3
 8006178:	f007 fa5a 	bl	800d630 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 800617c:	f107 0310 	add.w	r3, r7, #16
 8006180:	4619      	mov	r1, r3
 8006182:	4827      	ldr	r0, [pc, #156]	; (8006220 <UI_ADCThresholdDisplay+0xc8>)
 8006184:	f7fb fb88 	bl	8001898 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <UI_ADCThresholdDisplay+0xc0>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	00d2      	lsls	r2, r2, #3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	b2da      	uxtb	r2, r3
 8006194:	4b23      	ldr	r3, [pc, #140]	; (8006224 <UI_ADCThresholdDisplay+0xcc>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4413      	add	r3, r2
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 80061a2:	2320      	movs	r3, #32
 80061a4:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 80061a6:	4a20      	ldr	r2, [pc, #128]	; (8006228 <UI_ADCThresholdDisplay+0xd0>)
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ac:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 80061ae:	f107 030c 	add.w	r3, r7, #12
 80061b2:	4619      	mov	r1, r3
 80061b4:	481c      	ldr	r0, [pc, #112]	; (8006228 <UI_ADCThresholdDisplay+0xd0>)
 80061b6:	f7fb fb6f 	bl	8001898 <DISP_DisplayText>

		point[0] = '~'+2;
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	461a      	mov	r2, r3
 80061c2:	00d2      	lsls	r2, r2, #3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	4b16      	ldr	r3, [pc, #88]	; (8006224 <UI_ADCThresholdDisplay+0xcc>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	4413      	add	r3, r2
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	4b14      	ldr	r3, [pc, #80]	; (8006228 <UI_ADCThresholdDisplay+0xd0>)
 80061d6:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	4619      	mov	r1, r3
 80061de:	4812      	ldr	r0, [pc, #72]	; (8006228 <UI_ADCThresholdDisplay+0xd0>)
 80061e0:	f7fb fb5a 	bl	8001898 <DISP_DisplayText>

		last_num = num;
 80061e4:	4a0c      	ldr	r2, [pc, #48]	; (8006218 <UI_ADCThresholdDisplay+0xc0>)
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f1c3 030d 	rsb	r3, r3, #13
 80061f0:	4a0e      	ldr	r2, [pc, #56]	; (800622c <UI_ADCThresholdDisplay+0xd4>)
 80061f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f107 0310 	add.w	r3, r7, #16
 80061fc:	490c      	ldr	r1, [pc, #48]	; (8006230 <UI_ADCThresholdDisplay+0xd8>)
 80061fe:	4618      	mov	r0, r3
 8006200:	f007 fa16 	bl	800d630 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 8006204:	f107 0310 	add.w	r3, r7, #16
 8006208:	4619      	mov	r1, r3
 800620a:	480a      	ldr	r0, [pc, #40]	; (8006234 <UI_ADCThresholdDisplay+0xdc>)
 800620c:	f7fb fb44 	bl	8001898 <DISP_DisplayText>

}
 8006210:	bf00      	nop
 8006212:	3728      	adds	r7, #40	; 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000314 	.word	0x20000314
 800621c:	0800fb00 	.word	0x0800fb00
 8006220:	20001030 	.word	0x20001030
 8006224:	20000290 	.word	0x20000290
 8006228:	20001038 	.word	0x20001038
 800622c:	20000b38 	.word	0x20000b38
 8006230:	0800fb0c 	.word	0x0800fb0c
 8006234:	20001020 	.word	0x20001020

08006238 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 800624a:	f7fd ffb1 	bl	80041b0 <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 800624e:	7f7b      	ldrb	r3, [r7, #29]
 8006250:	3301      	adds	r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff ff7f 	bl	8006158 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 800625a:	7f7b      	ldrb	r3, [r7, #29]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ff7b 	bl	8006158 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 8006262:	f001 fb87 	bl	8007974 <HAL_GetTick>
 8006266:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8006268:	7f7b      	ldrb	r3, [r7, #29]
 800626a:	f1c3 030d 	rsb	r3, r3, #13
 800626e:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 8006270:	f7fe fd28 	bl	8004cc4 <UI_ShowSensor>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00e      	beq.n	8006298 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 800627a:	7f3b      	ldrb	r3, [r7, #28]
 800627c:	4a52      	ldr	r2, [pc, #328]	; (80063c8 <UI_ADCThreshold+0x190>)
 800627e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006282:	461a      	mov	r2, r3
 8006284:	463b      	mov	r3, r7
 8006286:	4951      	ldr	r1, [pc, #324]	; (80063cc <UI_ADCThreshold+0x194>)
 8006288:	4618      	mov	r0, r3
 800628a:	f007 f9d1 	bl	800d630 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 800628e:	463b      	mov	r3, r7
 8006290:	4619      	mov	r1, r3
 8006292:	484f      	ldr	r0, [pc, #316]	; (80063d0 <UI_ADCThreshold+0x198>)
 8006294:	f7fb fb00 	bl	8001898 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8006298:	f001 fb6c 	bl	8007974 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	7fba      	ldrb	r2, [r7, #30]
 80062a4:	2a01      	cmp	r2, #1
 80062a6:	d101      	bne.n	80062ac <UI_ADCThreshold+0x74>
 80062a8:	2214      	movs	r2, #20
 80062aa:	e000      	b.n	80062ae <UI_ADCThreshold+0x76>
 80062ac:	2246      	movs	r2, #70	; 0x46
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f200 8081 	bhi.w	80063b6 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 80062b4:	f7fe fd84 	bl	8004dc0 <UI_ReadButton>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 80062bc:	7ffa      	ldrb	r2, [r7, #31]
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d102      	bne.n	80062ca <UI_ADCThreshold+0x92>
 80062c4:	7fbb      	ldrb	r3, [r7, #30]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d077      	beq.n	80063ba <UI_ADCThreshold+0x182>
		bt = bt2;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 80062ce:	7ffb      	ldrb	r3, [r7, #31]
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <UI_ADCThreshold+0xa8>
			num_sen = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 80062dc:	2302      	movs	r3, #2
 80062de:	e06e      	b.n	80063be <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
 80062e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 80062ea:	f7fd ff85 	bl	80041f8 <Storage_SetADCThreshold>
			num_sen = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 80062f2:	2307      	movs	r3, #7
 80062f4:	e063      	b.n	80063be <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 8006300:	7f7b      	ldrb	r3, [r7, #29]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <UI_ADCThreshold+0xd6>
 8006306:	7f7b      	ldrb	r3, [r7, #29]
 8006308:	3b01      	subs	r3, #1
 800630a:	777b      	strb	r3, [r7, #29]
 800630c:	e001      	b.n	8006312 <UI_ADCThreshold+0xda>
 800630e:	230d      	movs	r3, #13
 8006310:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8006316:	e7a0      	b.n	800625a <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 8006318:	7ffb      	ldrb	r3, [r7, #31]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 8006322:	7f7b      	ldrb	r3, [r7, #29]
 8006324:	2b0d      	cmp	r3, #13
 8006326:	d003      	beq.n	8006330 <UI_ADCThreshold+0xf8>
 8006328:	7f7b      	ldrb	r3, [r7, #29]
 800632a:	3301      	adds	r3, #1
 800632c:	777b      	strb	r3, [r7, #29]
 800632e:	e001      	b.n	8006334 <UI_ADCThreshold+0xfc>
 8006330:	2300      	movs	r3, #0
 8006332:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8006338:	e78f      	b.n	800625a <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 800633a:	7ffb      	ldrb	r3, [r7, #31]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d018      	beq.n	8006376 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 8006344:	7f3b      	ldrb	r3, [r7, #28]
 8006346:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <UI_ADCThreshold+0x19c>)
 8006348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <UI_ADCThreshold+0x12c>
 8006350:	7f3b      	ldrb	r3, [r7, #28]
 8006352:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <UI_ADCThreshold+0x19c>)
 8006354:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006358:	3a01      	subs	r2, #1
 800635a:	b291      	uxth	r1, r2
 800635c:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <UI_ADCThreshold+0x19c>)
 800635e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8006362:	e005      	b.n	8006370 <UI_ADCThreshold+0x138>
 8006364:	7f3b      	ldrb	r3, [r7, #28]
 8006366:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <UI_ADCThreshold+0x19c>)
 8006368:	f640 71ff 	movw	r1, #4095	; 0xfff
 800636c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8006370:	2301      	movs	r3, #1
 8006372:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8006374:	e771      	b.n	800625a <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	f43f af73 	beq.w	8006268 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 8006382:	7f3b      	ldrb	r3, [r7, #28]
 8006384:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <UI_ADCThreshold+0x19c>)
 8006386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800638a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <UI_ADCThreshold+0x16e>
 8006392:	7f3b      	ldrb	r3, [r7, #28]
 8006394:	4a0f      	ldr	r2, [pc, #60]	; (80063d4 <UI_ADCThreshold+0x19c>)
 8006396:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800639a:	3201      	adds	r2, #1
 800639c:	b291      	uxth	r1, r2
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <UI_ADCThreshold+0x19c>)
 80063a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80063a4:	e004      	b.n	80063b0 <UI_ADCThreshold+0x178>
 80063a6:	7f3b      	ldrb	r3, [r7, #28]
 80063a8:	4a0a      	ldr	r2, [pc, #40]	; (80063d4 <UI_ADCThreshold+0x19c>)
 80063aa:	2100      	movs	r1, #0
 80063ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 80063b0:	2301      	movs	r3, #1
 80063b2:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80063b4:	e751      	b.n	800625a <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 80063b6:	bf00      	nop
 80063b8:	e756      	b.n	8006268 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 80063ba:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 80063bc:	e754      	b.n	8006268 <UI_ADCThreshold+0x30>
		}
	}
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000b1c 	.word	0x20000b1c
 80063cc:	0800fb14 	.word	0x0800fb14
 80063d0:	20001027 	.word	0x20001027
 80063d4:	20000b38 	.word	0x20000b38

080063d8 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 80063de:	f7fe fcef 	bl	8004dc0 <UI_ReadButton>
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 80063e6:	f7fd fb8f 	bl	8003b08 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 80063ea:	f7fe fc6b 	bl	8004cc4 <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 80063ee:	f7fe fce7 	bl	8004dc0 <UI_ReadButton>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d02a      	beq.n	8006452 <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 80063fc:	f7fe fce0 	bl	8004dc0 <UI_ReadButton>
 8006400:	4603      	mov	r3, r0
 8006402:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 800640e:	2000      	movs	r0, #0
 8006410:	f7fd fc0a 	bl	8003c28 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 8006414:	2302      	movs	r3, #2
 8006416:	e01e      	b.n	8006456 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 8006422:	2000      	movs	r0, #0
 8006424:	f7fd fc00 	bl	8003c28 <SEN_EndAutoCalibration>
			return UI_SET;
 8006428:	2307      	movs	r3, #7
 800642a:	e014      	b.n	8006456 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0d9      	beq.n	80063ea <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 8006436:	2001      	movs	r0, #1
 8006438:	f7fd fbf6 	bl	8003c28 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 800643c:	4908      	ldr	r1, [pc, #32]	; (8006460 <UI_AutoCalib+0x88>)
 800643e:	4809      	ldr	r0, [pc, #36]	; (8006464 <UI_AutoCalib+0x8c>)
 8006440:	f7fb fa2a 	bl	8001898 <DISP_DisplayText>
			Storage_SetADCThreshold();
 8006444:	f7fd fed8 	bl	80041f8 <Storage_SetADCThreshold>
			HAL_Delay(200);
 8006448:	20c8      	movs	r0, #200	; 0xc8
 800644a:	f001 fa9f 	bl	800798c <HAL_Delay>
			return UI_SET;
 800644e:	2307      	movs	r3, #7
 8006450:	e001      	b.n	8006456 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 8006452:	bf00      	nop
		UI_ShowSensor();
 8006454:	e7c9      	b.n	80063ea <UI_AutoCalib+0x12>
		}
	}
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	0800fb1c 	.word	0x0800fb1c
 8006464:	20000f90 	.word	0x20000f90

08006468 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 800646e:	4b5e      	ldr	r3, [pc, #376]	; (80065e8 <UI_Startup+0x180>)
 8006470:	2209      	movs	r2, #9
 8006472:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 8006474:	f001 fa7e 	bl	8007974 <HAL_GetTick>
 8006478:	4603      	mov	r3, r0
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	463b      	mov	r3, r7
 8006480:	495a      	ldr	r1, [pc, #360]	; (80065ec <UI_Startup+0x184>)
 8006482:	4618      	mov	r0, r3
 8006484:	f007 f8d4 	bl	800d630 <siprintf>
	DISP_DisplayText(&startup, buff);
 8006488:	463b      	mov	r3, r7
 800648a:	4619      	mov	r1, r3
 800648c:	4856      	ldr	r0, [pc, #344]	; (80065e8 <UI_Startup+0x180>)
 800648e:	f7fb fa03 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8006492:	4b55      	ldr	r3, [pc, #340]	; (80065e8 <UI_Startup+0x180>)
 8006494:	785a      	ldrb	r2, [r3, #1]
 8006496:	4b54      	ldr	r3, [pc, #336]	; (80065e8 <UI_Startup+0x180>)
 8006498:	791b      	ldrb	r3, [r3, #4]
 800649a:	4413      	add	r3, r2
 800649c:	b2da      	uxtb	r2, r3
 800649e:	4b52      	ldr	r3, [pc, #328]	; (80065e8 <UI_Startup+0x180>)
 80064a0:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 80064a2:	2001      	movs	r0, #1
 80064a4:	f001 fa72 	bl	800798c <HAL_Delay>
	if(!Storage_Init()) {
 80064a8:	f7fd fe1c 	bl	80040e4 <Storage_Init>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d11d      	bne.n	80064ee <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 80064b2:	f001 fa5f 	bl	8007974 <HAL_GetTick>
 80064b6:	4603      	mov	r3, r0
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	463b      	mov	r3, r7
 80064be:	494c      	ldr	r1, [pc, #304]	; (80065f0 <UI_Startup+0x188>)
 80064c0:	4618      	mov	r0, r3
 80064c2:	f007 f8b5 	bl	800d630 <siprintf>
		DISP_DisplayText(&startup, buff);
 80064c6:	463b      	mov	r3, r7
 80064c8:	4619      	mov	r1, r3
 80064ca:	4847      	ldr	r0, [pc, #284]	; (80065e8 <UI_Startup+0x180>)
 80064cc:	f7fb f9e4 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 80064d0:	4b45      	ldr	r3, [pc, #276]	; (80065e8 <UI_Startup+0x180>)
 80064d2:	785a      	ldrb	r2, [r3, #1]
 80064d4:	4b44      	ldr	r3, [pc, #272]	; (80065e8 <UI_Startup+0x180>)
 80064d6:	791b      	ldrb	r3, [r3, #4]
 80064d8:	4413      	add	r3, r2
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <UI_Startup+0x180>)
 80064de:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 80064e0:	f7fd fdb2 	bl	8004048 <Storage_ResetMemory>
		} while(!Storage_Init());
 80064e4:	f7fd fdfe 	bl	80040e4 <Storage_Init>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f8      	beq.n	80064e0 <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 80064ee:	f001 fa41 	bl	8007974 <HAL_GetTick>
 80064f2:	4603      	mov	r3, r0
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	463b      	mov	r3, r7
 80064fa:	493e      	ldr	r1, [pc, #248]	; (80065f4 <UI_Startup+0x18c>)
 80064fc:	4618      	mov	r0, r3
 80064fe:	f007 f897 	bl	800d630 <siprintf>
	DISP_DisplayText(&startup, buff);
 8006502:	463b      	mov	r3, r7
 8006504:	4619      	mov	r1, r3
 8006506:	4838      	ldr	r0, [pc, #224]	; (80065e8 <UI_Startup+0x180>)
 8006508:	f7fb f9c6 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <UI_Startup+0x180>)
 800650e:	785a      	ldrb	r2, [r3, #1]
 8006510:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <UI_Startup+0x180>)
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	4413      	add	r3, r2
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b33      	ldr	r3, [pc, #204]	; (80065e8 <UI_Startup+0x180>)
 800651a:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 800651c:	f001 fa2a 	bl	8007974 <HAL_GetTick>
 8006520:	4603      	mov	r3, r0
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	463b      	mov	r3, r7
 8006528:	4933      	ldr	r1, [pc, #204]	; (80065f8 <UI_Startup+0x190>)
 800652a:	4618      	mov	r0, r3
 800652c:	f007 f880 	bl	800d630 <siprintf>
	DISP_DisplayText(&startup, buff);
 8006530:	463b      	mov	r3, r7
 8006532:	4619      	mov	r1, r3
 8006534:	482c      	ldr	r0, [pc, #176]	; (80065e8 <UI_Startup+0x180>)
 8006536:	f7fb f9af 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 800653a:	4b2b      	ldr	r3, [pc, #172]	; (80065e8 <UI_Startup+0x180>)
 800653c:	785a      	ldrb	r2, [r3, #1]
 800653e:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <UI_Startup+0x180>)
 8006540:	791b      	ldrb	r3, [r3, #4]
 8006542:	4413      	add	r3, r2
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <UI_Startup+0x180>)
 8006548:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 800654a:	2001      	movs	r0, #1
 800654c:	f001 fa1e 	bl	800798c <HAL_Delay>
	if(!Storage_PlanInit()) {
 8006550:	f7fd fe00 	bl	8004154 <Storage_PlanInit>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d11d      	bne.n	8006596 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 800655a:	f001 fa0b 	bl	8007974 <HAL_GetTick>
 800655e:	4603      	mov	r3, r0
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	463b      	mov	r3, r7
 8006566:	4925      	ldr	r1, [pc, #148]	; (80065fc <UI_Startup+0x194>)
 8006568:	4618      	mov	r0, r3
 800656a:	f007 f861 	bl	800d630 <siprintf>
		DISP_DisplayText(&startup, buff);
 800656e:	463b      	mov	r3, r7
 8006570:	4619      	mov	r1, r3
 8006572:	481d      	ldr	r0, [pc, #116]	; (80065e8 <UI_Startup+0x180>)
 8006574:	f7fb f990 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8006578:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <UI_Startup+0x180>)
 800657a:	785a      	ldrb	r2, [r3, #1]
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <UI_Startup+0x180>)
 800657e:	791b      	ldrb	r3, [r3, #4]
 8006580:	4413      	add	r3, r2
 8006582:	b2da      	uxtb	r2, r3
 8006584:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <UI_Startup+0x180>)
 8006586:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 8006588:	f7fd fcd8 	bl	8003f3c <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 800658c:	f7fd fde2 	bl	8004154 <Storage_PlanInit>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f8      	beq.n	8006588 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <UI_Startup+0x198>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd fe50 	bl	8004240 <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 80065a0:	f001 f9e8 	bl	8007974 <HAL_GetTick>
 80065a4:	4603      	mov	r3, r0
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	463b      	mov	r3, r7
 80065ac:	4915      	ldr	r1, [pc, #84]	; (8006604 <UI_Startup+0x19c>)
 80065ae:	4618      	mov	r0, r3
 80065b0:	f007 f83e 	bl	800d630 <siprintf>
	DISP_DisplayText(&startup, buff);
 80065b4:	463b      	mov	r3, r7
 80065b6:	4619      	mov	r1, r3
 80065b8:	480b      	ldr	r0, [pc, #44]	; (80065e8 <UI_Startup+0x180>)
 80065ba:	f7fb f96d 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <UI_Startup+0x180>)
 80065c0:	785a      	ldrb	r2, [r3, #1]
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <UI_Startup+0x180>)
 80065c4:	791b      	ldrb	r3, [r3, #4]
 80065c6:	4413      	add	r3, r2
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <UI_Startup+0x180>)
 80065cc:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 80065ce:	bf00      	nop
 80065d0:	f7fe fbf6 	bl	8004dc0 <UI_ReadButton>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f8      	bne.n	80065d0 <UI_Startup+0x168>

	return UI_HOMESCREEN;
 80065de:	2302      	movs	r3, #2
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20001040 	.word	0x20001040
 80065ec:	0800fb28 	.word	0x0800fb28
 80065f0:	0800fb3c 	.word	0x0800fb3c
 80065f4:	0800fb50 	.word	0x0800fb50
 80065f8:	0800fb60 	.word	0x0800fb60
 80065fc:	0800fb74 	.word	0x0800fb74
 8006600:	20000da5 	.word	0x20000da5
 8006604:	0800fb88 	.word	0x0800fb88

08006608 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 800660e:	4b2f      	ldr	r3, [pc, #188]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006610:	2203      	movs	r2, #3
 8006612:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 8006614:	4b2d      	ldr	r3, [pc, #180]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006616:	220d      	movs	r2, #13
 8006618:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 800661a:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <UI_CPDisplayInit+0xc4>)
 800661c:	2278      	movs	r2, #120	; 0x78
 800661e:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 8006620:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006622:	220b      	movs	r2, #11
 8006624:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006628:	2200      	movs	r2, #0
 800662a:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 800662c:	4b27      	ldr	r3, [pc, #156]	; (80066cc <UI_CPDisplayInit+0xc4>)
 800662e:	2202      	movs	r2, #2
 8006630:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 8006632:	4b26      	ldr	r3, [pc, #152]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006634:	2202      	movs	r2, #2
 8006636:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8006638:	2301      	movs	r3, #1
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	e027      	b.n	800668e <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 800663e:	4923      	ldr	r1, [pc, #140]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	440b      	add	r3, r1
 800664a:	4a20      	ldr	r2, [pc, #128]	; (80066cc <UI_CPDisplayInit+0xc4>)
 800664c:	6810      	ldr	r0, [r2, #0]
 800664e:	6018      	str	r0, [r3, #0]
 8006650:	8891      	ldrh	r1, [r2, #4]
 8006652:	7992      	ldrb	r2, [r2, #6]
 8006654:	8099      	strh	r1, [r3, #4]
 8006656:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	491b      	ldr	r1, [pc, #108]	; (80066cc <UI_CPDisplayInit+0xc4>)
 800665e:	4613      	mov	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	440b      	add	r3, r1
 8006666:	3301      	adds	r3, #1
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <UI_CPDisplayInit+0xc4>)
 800666c:	791b      	ldrb	r3, [r3, #4]
 800666e:	4413      	add	r3, r2
 8006670:	b2db      	uxtb	r3, r3
 8006672:	3302      	adds	r3, #2
 8006674:	b2d8      	uxtb	r0, r3
 8006676:	4915      	ldr	r1, [pc, #84]	; (80066cc <UI_CPDisplayInit+0xc4>)
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	440b      	add	r3, r1
 8006682:	3301      	adds	r3, #1
 8006684:	4602      	mov	r2, r0
 8006686:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3301      	adds	r3, #1
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b03      	cmp	r3, #3
 8006692:	ddd4      	ble.n	800663e <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 800669c:	2200      	movs	r2, #0
 800669e:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 80066a2:	227f      	movs	r2, #127	; 0x7f
 80066a4:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 80066a8:	220a      	movs	r2, #10
 80066aa:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 80066b4:	2202      	movs	r2, #2
 80066b6:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <UI_CPDisplayInit+0xc8>)
 80066ba:	2202      	movs	r2, #2
 80066bc:	719a      	strb	r2, [r3, #6]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20001048 	.word	0x20001048
 80066d0:	20001064 	.word	0x20001064

080066d4 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	4a31      	ldr	r2, [pc, #196]	; (80067a8 <UI_CPDisplay+0xd4>)
 80066e4:	f992 2000 	ldrsb.w	r2, [r2]
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	dd06      	ble.n	80066fc <UI_CPDisplay+0x28>
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	3b03      	subs	r3, #3
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	b25a      	sxtb	r2, r3
 80066f6:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <UI_CPDisplay+0xd4>)
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	e009      	b.n	8006710 <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	4a2a      	ldr	r2, [pc, #168]	; (80067a8 <UI_CPDisplay+0xd4>)
 8006700:	f992 2000 	ldrsb.w	r2, [r2]
 8006704:	4293      	cmp	r3, r2
 8006706:	da03      	bge.n	8006710 <UI_CPDisplay+0x3c>
 8006708:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800670c:	4b26      	ldr	r3, [pc, #152]	; (80067a8 <UI_CPDisplay+0xd4>)
 800670e:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8006710:	2300      	movs	r3, #0
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
 8006714:	e03f      	b.n	8006796 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <UI_CPDisplay+0xd4>)
 8006718:	f993 3000 	ldrsb.w	r3, [r3]
 800671c:	461a      	mov	r2, r3
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	441a      	add	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d109      	bne.n	800673c <UI_CPDisplay+0x68>
 8006728:	4920      	ldr	r1, [pc, #128]	; (80067ac <UI_CPDisplay+0xd8>)
 800672a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	440b      	add	r3, r1
 8006734:	3302      	adds	r3, #2
 8006736:	2201      	movs	r2, #1
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e008      	b.n	800674e <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 800673c:	491b      	ldr	r1, [pc, #108]	; (80067ac <UI_CPDisplay+0xd8>)
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	440b      	add	r3, r1
 8006748:	3302      	adds	r3, #2
 800674a:	2200      	movs	r2, #0
 800674c:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 800674e:	4b16      	ldr	r3, [pc, #88]	; (80067a8 <UI_CPDisplay+0xd4>)
 8006750:	f993 3000 	ldrsb.w	r3, [r3]
 8006754:	461a      	mov	r2, r3
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	441a      	add	r2, r3
 800675a:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <UI_CPDisplay+0xd4>)
 800675c:	f993 3000 	ldrsb.w	r3, [r3]
 8006760:	4619      	mov	r1, r3
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	440b      	add	r3, r1
 8006766:	4619      	mov	r1, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	440b      	add	r3, r1
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f107 000c 	add.w	r0, r7, #12
 8006772:	490f      	ldr	r1, [pc, #60]	; (80067b0 <UI_CPDisplay+0xdc>)
 8006774:	f006 ff5c 	bl	800d630 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <UI_CPDisplay+0xd8>)
 8006782:	4413      	add	r3, r2
 8006784:	f107 020c 	add.w	r2, r7, #12
 8006788:	4611      	mov	r1, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7fb f884 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	2b03      	cmp	r3, #3
 800679a:	ddbc      	ble.n	8006716 <UI_CPDisplay+0x42>
	}
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	3728      	adds	r7, #40	; 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20001074 	.word	0x20001074
 80067ac:	20001048 	.word	0x20001048
 80067b0:	0800fb98 	.word	0x0800fb98

080067b4 <UI_CP>:

UI_Menu_Lists UI_CP() {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 80067c2:	4949      	ldr	r1, [pc, #292]	; (80068e8 <UI_CP+0x134>)
 80067c4:	4849      	ldr	r0, [pc, #292]	; (80068ec <UI_CP+0x138>)
 80067c6:	f7fb f867 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 80067ca:	79bb      	ldrb	r3, [r7, #6]
 80067cc:	4948      	ldr	r1, [pc, #288]	; (80068f0 <UI_CP+0x13c>)
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff ff80 	bl	80066d4 <UI_CPDisplay>
	tick = HAL_GetTick();
 80067d4:	f001 f8ce 	bl	8007974 <HAL_GetTick>
 80067d8:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80067da:	f001 f8cb 	bl	8007974 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b45      	cmp	r3, #69	; 0x45
 80067e6:	d977      	bls.n	80068d8 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 80067e8:	f7fe faea 	bl	8004dc0 <UI_ReadButton>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d072      	beq.n	80068dc <UI_CP+0x128>
		bt = UI_ReadButton();
 80067f6:	f7fe fae3 	bl	8004dc0 <UI_ReadButton>
 80067fa:	4603      	mov	r3, r0
 80067fc:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8006808:	79bb      	ldrb	r3, [r7, #6]
 800680a:	2b13      	cmp	r3, #19
 800680c:	d102      	bne.n	8006814 <UI_CP+0x60>
 800680e:	2300      	movs	r3, #0
 8006810:	71bb      	strb	r3, [r7, #6]
 8006812:	e7da      	b.n	80067ca <UI_CP+0x16>
 8006814:	79bb      	ldrb	r3, [r7, #6]
 8006816:	3301      	adds	r3, #1
 8006818:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 800681a:	e7d6      	b.n	80067ca <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 8006826:	79bb      	ldrb	r3, [r7, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <UI_CP+0x7e>
 800682c:	2313      	movs	r3, #19
 800682e:	71bb      	strb	r3, [r7, #6]
 8006830:	e7cb      	b.n	80067ca <UI_CP+0x16>
 8006832:	79bb      	ldrb	r3, [r7, #6]
 8006834:	3b01      	subs	r3, #1
 8006836:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8006838:	e7c7      	b.n	80067ca <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d016      	beq.n	8006872 <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8006844:	79bb      	ldrb	r3, [r7, #6]
 8006846:	4a2b      	ldr	r2, [pc, #172]	; (80068f4 <UI_CP+0x140>)
 8006848:	4413      	add	r3, r2
 800684a:	789b      	ldrb	r3, [r3, #2]
 800684c:	2b63      	cmp	r3, #99	; 0x63
 800684e:	d105      	bne.n	800685c <UI_CP+0xa8>
 8006850:	79bb      	ldrb	r3, [r7, #6]
 8006852:	4a28      	ldr	r2, [pc, #160]	; (80068f4 <UI_CP+0x140>)
 8006854:	4413      	add	r3, r2
 8006856:	2200      	movs	r2, #0
 8006858:	709a      	strb	r2, [r3, #2]
 800685a:	e7b6      	b.n	80067ca <UI_CP+0x16>
 800685c:	79bb      	ldrb	r3, [r7, #6]
 800685e:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <UI_CP+0x140>)
 8006860:	441a      	add	r2, r3
 8006862:	7892      	ldrb	r2, [r2, #2]
 8006864:	3201      	adds	r2, #1
 8006866:	b2d1      	uxtb	r1, r2
 8006868:	4a22      	ldr	r2, [pc, #136]	; (80068f4 <UI_CP+0x140>)
 800686a:	4413      	add	r3, r2
 800686c:	460a      	mov	r2, r1
 800686e:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8006870:	e7ab      	b.n	80067ca <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d016      	beq.n	80068aa <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 800687c:	79bb      	ldrb	r3, [r7, #6]
 800687e:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <UI_CP+0x140>)
 8006880:	4413      	add	r3, r2
 8006882:	789b      	ldrb	r3, [r3, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <UI_CP+0xe0>
 8006888:	79bb      	ldrb	r3, [r7, #6]
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <UI_CP+0x140>)
 800688c:	4413      	add	r3, r2
 800688e:	2263      	movs	r2, #99	; 0x63
 8006890:	709a      	strb	r2, [r3, #2]
 8006892:	e79a      	b.n	80067ca <UI_CP+0x16>
 8006894:	79bb      	ldrb	r3, [r7, #6]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <UI_CP+0x140>)
 8006898:	441a      	add	r2, r3
 800689a:	7892      	ldrb	r2, [r2, #2]
 800689c:	3a01      	subs	r2, #1
 800689e:	b2d1      	uxtb	r1, r2
 80068a0:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <UI_CP+0x140>)
 80068a2:	4413      	add	r3, r2
 80068a4:	460a      	mov	r2, r1
 80068a6:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 80068a8:	e78f      	b.n	80067ca <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <UI_CP+0x104>
			return UI_HOMESCREEN;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e013      	b.n	80068e0 <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d08b      	beq.n	80067da <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 80068c2:	490d      	ldr	r1, [pc, #52]	; (80068f8 <UI_CP+0x144>)
 80068c4:	480d      	ldr	r0, [pc, #52]	; (80068fc <UI_CP+0x148>)
 80068c6:	f7fa ffe7 	bl	8001898 <DISP_DisplayText>
			Storage_SetCheckpoint();
 80068ca:	f7fd fd0b 	bl	80042e4 <Storage_SetCheckpoint>
			HAL_Delay(200);
 80068ce:	20c8      	movs	r0, #200	; 0xc8
 80068d0:	f001 f85c 	bl	800798c <HAL_Delay>
			return UI_SET;
 80068d4:	2307      	movs	r3, #7
 80068d6:	e003      	b.n	80068e0 <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80068d8:	bf00      	nop
 80068da:	e77e      	b.n	80067da <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 80068dc:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80068de:	e77c      	b.n	80067da <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	0800fba8 	.word	0x0800fba8
 80068ec:	20001064 	.word	0x20001064
 80068f0:	20000dfe 	.word	0x20000dfe
 80068f4:	20000dfc 	.word	0x20000dfc
 80068f8:	0800fb1c 	.word	0x0800fb1c
 80068fc:	20000f90 	.word	0x20000f90

08006900 <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	4a2c      	ldr	r2, [pc, #176]	; (80069c0 <UI_PlanSelectDisplay+0xc0>)
 800690e:	f992 2000 	ldrsb.w	r2, [r2]
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	2b03      	cmp	r3, #3
 8006916:	dd06      	ble.n	8006926 <UI_PlanSelectDisplay+0x26>
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	3b03      	subs	r3, #3
 800691c:	b2db      	uxtb	r3, r3
 800691e:	b25a      	sxtb	r2, r3
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <UI_PlanSelectDisplay+0xc0>)
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e009      	b.n	800693a <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <UI_PlanSelectDisplay+0xc0>)
 800692a:	f992 2000 	ldrsb.w	r2, [r2]
 800692e:	4293      	cmp	r3, r2
 8006930:	da03      	bge.n	800693a <UI_PlanSelectDisplay+0x3a>
 8006932:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006936:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <UI_PlanSelectDisplay+0xc0>)
 8006938:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800693a:	2300      	movs	r3, #0
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
 800693e:	e036      	b.n	80069ae <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8006940:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <UI_PlanSelectDisplay+0xc0>)
 8006942:	f993 3000 	ldrsb.w	r3, [r3]
 8006946:	461a      	mov	r2, r3
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	441a      	add	r2, r3
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	429a      	cmp	r2, r3
 8006950:	d109      	bne.n	8006966 <UI_PlanSelectDisplay+0x66>
 8006952:	491c      	ldr	r1, [pc, #112]	; (80069c4 <UI_PlanSelectDisplay+0xc4>)
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	440b      	add	r3, r1
 800695e:	3302      	adds	r3, #2
 8006960:	2201      	movs	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e008      	b.n	8006978 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8006966:	4917      	ldr	r1, [pc, #92]	; (80069c4 <UI_PlanSelectDisplay+0xc4>)
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	440b      	add	r3, r1
 8006972:	3302      	adds	r3, #2
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <UI_PlanSelectDisplay+0xc0>)
 800697a:	f993 3000 	ldrsb.w	r3, [r3]
 800697e:	461a      	mov	r2, r3
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	441a      	add	r2, r3
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	490f      	ldr	r1, [pc, #60]	; (80069c8 <UI_PlanSelectDisplay+0xc8>)
 800698a:	4618      	mov	r0, r3
 800698c:	f006 fe50 	bl	800d630 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <UI_PlanSelectDisplay+0xc4>)
 800699a:	4413      	add	r3, r2
 800699c:	f107 020c 	add.w	r2, r7, #12
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fa ff78 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	3301      	adds	r3, #1
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	ddc5      	ble.n	8006940 <UI_PlanSelectDisplay+0x40>
	}
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20001075 	.word	0x20001075
 80069c4:	20001048 	.word	0x20001048
 80069c8:	0800fbb4 	.word	0x0800fbb4

080069cc <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 80069da:	4937      	ldr	r1, [pc, #220]	; (8006ab8 <UI_PlanSelect+0xec>)
 80069dc:	4837      	ldr	r0, [pc, #220]	; (8006abc <UI_PlanSelect+0xf0>)
 80069de:	f7fa ff5b 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 80069e2:	79bb      	ldrb	r3, [r7, #6]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff ff8b 	bl	8006900 <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 80069ea:	f000 ffc3 	bl	8007974 <HAL_GetTick>
 80069ee:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80069f0:	f000 ffc0 	bl	8007974 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b45      	cmp	r3, #69	; 0x45
 80069fc:	d953      	bls.n	8006aa6 <UI_PlanSelect+0xda>
		if(bt == UI_ReadButton()) continue;
 80069fe:	f7fe f9df 	bl	8004dc0 <UI_ReadButton>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461a      	mov	r2, r3
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d04e      	beq.n	8006aaa <UI_PlanSelect+0xde>
		bt = UI_ReadButton();
 8006a0c:	f7fe f9d8 	bl	8004dc0 <UI_ReadButton>
 8006a10:	4603      	mov	r3, r0
 8006a12:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <UI_PlanSelect+0x66>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8006a1e:	79bb      	ldrb	r3, [r7, #6]
 8006a20:	2b0e      	cmp	r3, #14
 8006a22:	d102      	bne.n	8006a2a <UI_PlanSelect+0x5e>
 8006a24:	2300      	movs	r3, #0
 8006a26:	71bb      	strb	r3, [r7, #6]
 8006a28:	e7db      	b.n	80069e2 <UI_PlanSelect+0x16>
 8006a2a:	79bb      	ldrb	r3, [r7, #6]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8006a30:	e7d7      	b.n	80069e2 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <UI_PlanSelect+0x84>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 8006a3c:	79bb      	ldrb	r3, [r7, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <UI_PlanSelect+0x7c>
 8006a42:	230e      	movs	r3, #14
 8006a44:	71bb      	strb	r3, [r7, #6]
 8006a46:	e7cc      	b.n	80069e2 <UI_PlanSelect+0x16>
 8006a48:	79bb      	ldrb	r3, [r7, #6]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8006a4e:	e7c8      	b.n	80069e2 <UI_PlanSelect+0x16>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <UI_PlanSelect+0x92>
			return UI_HOMESCREEN;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e027      	b.n	8006aae <UI_PlanSelect+0xe2>
		}
		else if(bt & SW_OK_PRESS) {
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0c3      	beq.n	80069f0 <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8006a68:	4915      	ldr	r1, [pc, #84]	; (8006ac0 <UI_PlanSelect+0xf4>)
 8006a6a:	4816      	ldr	r0, [pc, #88]	; (8006ac4 <UI_PlanSelect+0xf8>)
 8006a6c:	f7fa ff14 	bl	8001898 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8006a70:	79bb      	ldrb	r3, [r7, #6]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fd fbe4 	bl	8004240 <Storage_GetPlan>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <UI_PlanSelect+0xc8>
				DISP_DisplayText(&short_message, "Reseting...");
 8006a7e:	4912      	ldr	r1, [pc, #72]	; (8006ac8 <UI_PlanSelect+0xfc>)
 8006a80:	4810      	ldr	r0, [pc, #64]	; (8006ac4 <UI_PlanSelect+0xf8>)
 8006a82:	f7fa ff09 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8006a86:	f7fd fa59 	bl	8003f3c <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8006a8a:	f7fd fb63 	bl	8004154 <Storage_PlanInit>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0f8      	beq.n	8006a86 <UI_PlanSelect+0xba>
			}
			DISP_DisplayText(&short_message, "Done!");
 8006a94:	490d      	ldr	r1, [pc, #52]	; (8006acc <UI_PlanSelect+0x100>)
 8006a96:	480b      	ldr	r0, [pc, #44]	; (8006ac4 <UI_PlanSelect+0xf8>)
 8006a98:	f7fa fefe 	bl	8001898 <DISP_DisplayText>
			HAL_Delay(200);
 8006a9c:	20c8      	movs	r0, #200	; 0xc8
 8006a9e:	f000 ff75 	bl	800798c <HAL_Delay>
			return UI_HOMESCREEN;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e003      	b.n	8006aae <UI_PlanSelect+0xe2>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006aa6:	bf00      	nop
 8006aa8:	e7a2      	b.n	80069f0 <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8006aaa:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006aac:	e7a0      	b.n	80069f0 <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	0800fbbc 	.word	0x0800fbbc
 8006abc:	20001064 	.word	0x20001064
 8006ac0:	0800fbc8 	.word	0x0800fbc8
 8006ac4:	20000f90 	.word	0x20000f90
 8006ac8:	0800fbd4 	.word	0x0800fbd4
 8006acc:	0800fbe0 	.word	0x0800fbe0

08006ad0 <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	4a29      	ldr	r2, [pc, #164]	; (8006b84 <UI_MemSettingDisplay+0xb4>)
 8006ade:	f992 2000 	ldrsb.w	r2, [r2]
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	dd06      	ble.n	8006af6 <UI_MemSettingDisplay+0x26>
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	3b03      	subs	r3, #3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	b25a      	sxtb	r2, r3
 8006af0:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <UI_MemSettingDisplay+0xb4>)
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	e009      	b.n	8006b0a <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	4a22      	ldr	r2, [pc, #136]	; (8006b84 <UI_MemSettingDisplay+0xb4>)
 8006afa:	f992 2000 	ldrsb.w	r2, [r2]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	da03      	bge.n	8006b0a <UI_MemSettingDisplay+0x3a>
 8006b02:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006b06:	4b1f      	ldr	r3, [pc, #124]	; (8006b84 <UI_MemSettingDisplay+0xb4>)
 8006b08:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e031      	b.n	8006b74 <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8006b10:	4b1c      	ldr	r3, [pc, #112]	; (8006b84 <UI_MemSettingDisplay+0xb4>)
 8006b12:	f993 3000 	ldrsb.w	r3, [r3]
 8006b16:	461a      	mov	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	441a      	add	r2, r3
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d109      	bne.n	8006b36 <UI_MemSettingDisplay+0x66>
 8006b22:	4919      	ldr	r1, [pc, #100]	; (8006b88 <UI_MemSettingDisplay+0xb8>)
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4613      	mov	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3302      	adds	r3, #2
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e008      	b.n	8006b48 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8006b36:	4914      	ldr	r1, [pc, #80]	; (8006b88 <UI_MemSettingDisplay+0xb8>)
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	440b      	add	r3, r1
 8006b42:	3302      	adds	r3, #2
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	4a0d      	ldr	r2, [pc, #52]	; (8006b88 <UI_MemSettingDisplay+0xb8>)
 8006b52:	441a      	add	r2, r3
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <UI_MemSettingDisplay+0xb4>)
 8006b56:	f993 3000 	ldrsb.w	r3, [r3]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	440b      	add	r3, r1
 8006b60:	490a      	ldr	r1, [pc, #40]	; (8006b8c <UI_MemSettingDisplay+0xbc>)
 8006b62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f7fa fe95 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	ddca      	ble.n	8006b10 <UI_MemSettingDisplay+0x40>
	}
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20001076 	.word	0x20001076
 8006b88:	20000fbc 	.word	0x20000fbc
 8006b8c:	20000304 	.word	0x20000304

08006b90 <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 8006b9a:	495b      	ldr	r1, [pc, #364]	; (8006d08 <UI_MemSetting+0x178>)
 8006b9c:	485b      	ldr	r0, [pc, #364]	; (8006d0c <UI_MemSetting+0x17c>)
 8006b9e:	f7fa fe7b 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <UI_MemSetting+0x180>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff ff92 	bl	8006ad0 <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 8006bac:	f000 fee2 	bl	8007974 <HAL_GetTick>
 8006bb0:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006bb2:	f000 fedf 	bl	8007974 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b45      	cmp	r3, #69	; 0x45
 8006bbe:	f240 8097 	bls.w	8006cf0 <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 8006bc2:	f7fe f8fd 	bl	8004dc0 <UI_ReadButton>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	f000 8091 	beq.w	8006cf4 <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 8006bd2:	f7fe f8f5 	bl	8004dc0 <UI_ReadButton>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8006be4:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <UI_MemSetting+0x180>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d103      	bne.n	8006bf4 <UI_MemSetting+0x64>
 8006bec:	4b48      	ldr	r3, [pc, #288]	; (8006d10 <UI_MemSetting+0x180>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	e7d6      	b.n	8006ba2 <UI_MemSetting+0x12>
 8006bf4:	4b46      	ldr	r3, [pc, #280]	; (8006d10 <UI_MemSetting+0x180>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	4b44      	ldr	r3, [pc, #272]	; (8006d10 <UI_MemSetting+0x180>)
 8006bfe:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8006c00:	e7cf      	b.n	8006ba2 <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 8006c0c:	4b40      	ldr	r3, [pc, #256]	; (8006d10 <UI_MemSetting+0x180>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <UI_MemSetting+0x8c>
 8006c14:	4b3e      	ldr	r3, [pc, #248]	; (8006d10 <UI_MemSetting+0x180>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e7c2      	b.n	8006ba2 <UI_MemSetting+0x12>
 8006c1c:	4b3c      	ldr	r3, [pc, #240]	; (8006d10 <UI_MemSetting+0x180>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <UI_MemSetting+0x180>)
 8006c26:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8006c28:	e7bb      	b.n	8006ba2 <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <UI_MemSetting+0xae>
			num_menu = 0;
 8006c34:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <UI_MemSetting+0x180>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e060      	b.n	8006d00 <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <UI_MemSetting+0xc2>
			num_menu = 0;
 8006c48:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <UI_MemSetting+0x180>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 8006c4e:	2307      	movs	r3, #7
 8006c50:	e056      	b.n	8006d00 <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 8006c52:	4b2f      	ldr	r3, [pc, #188]	; (8006d10 <UI_MemSetting+0x180>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d027      	beq.n	8006caa <UI_MemSetting+0x11a>
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	dca9      	bgt.n	8006bb2 <UI_MemSetting+0x22>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <UI_MemSetting+0xd8>
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d018      	beq.n	8006c98 <UI_MemSetting+0x108>
 8006c66:	e04a      	b.n	8006cfe <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d042      	beq.n	8006cf8 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 8006c72:	4928      	ldr	r1, [pc, #160]	; (8006d14 <UI_MemSetting+0x184>)
 8006c74:	4828      	ldr	r0, [pc, #160]	; (8006d18 <UI_MemSetting+0x188>)
 8006c76:	f7fa fe0f 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8006c7a:	f7fd f95f 	bl	8003f3c <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8006c7e:	f7fd fa69 	bl	8004154 <Storage_PlanInit>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f8      	beq.n	8006c7a <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 8006c88:	4924      	ldr	r1, [pc, #144]	; (8006d1c <UI_MemSetting+0x18c>)
 8006c8a:	4823      	ldr	r0, [pc, #140]	; (8006d18 <UI_MemSetting+0x188>)
 8006c8c:	f7fa fe04 	bl	8001898 <DISP_DisplayText>
				HAL_Delay(200);
 8006c90:	20c8      	movs	r0, #200	; 0xc8
 8006c92:	f000 fe7b 	bl	800798c <HAL_Delay>
				goto ui_mem;
 8006c96:	e784      	b.n	8006ba2 <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02c      	beq.n	8006cfc <UI_MemSetting+0x16c>
				num_menu = 3;
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <UI_MemSetting+0x180>)
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006ca8:	e028      	b.n	8006cfc <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 8006caa:	491d      	ldr	r1, [pc, #116]	; (8006d20 <UI_MemSetting+0x190>)
 8006cac:	481d      	ldr	r0, [pc, #116]	; (8006d24 <UI_MemSetting+0x194>)
 8006cae:	f7fa fdf3 	bl	8001898 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 8006cb2:	f7fe f885 	bl	8004dc0 <UI_ReadButton>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <UI_MemSetting+0x13c>
					num_menu = 1;
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <UI_MemSetting+0x180>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 8006cca:	e76a      	b.n	8006ba2 <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0ed      	beq.n	8006cb2 <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 8006cd6:	4914      	ldr	r1, [pc, #80]	; (8006d28 <UI_MemSetting+0x198>)
 8006cd8:	4812      	ldr	r0, [pc, #72]	; (8006d24 <UI_MemSetting+0x194>)
 8006cda:	f7fa fddd 	bl	8001898 <DISP_DisplayText>
					Storage_CleanInit();
 8006cde:	f7fd fb87 	bl	80043f0 <Storage_CleanInit>
					HAL_Delay(1000);
 8006ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ce6:	f000 fe51 	bl	800798c <HAL_Delay>
					HAL_NVIC_SystemReset();
 8006cea:	f001 fcba 	bl	8008662 <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 8006cee:	e7e0      	b.n	8006cb2 <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006cf0:	bf00      	nop
 8006cf2:	e75e      	b.n	8006bb2 <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 8006cf4:	bf00      	nop
 8006cf6:	e75c      	b.n	8006bb2 <UI_MemSetting+0x22>
			break;
 8006cf8:	bf00      	nop
 8006cfa:	e75a      	b.n	8006bb2 <UI_MemSetting+0x22>
			break;
 8006cfc:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006cfe:	e758      	b.n	8006bb2 <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	0800fc00 	.word	0x0800fc00
 8006d0c:	20000fb4 	.word	0x20000fb4
 8006d10:	20001077 	.word	0x20001077
 8006d14:	0800fbd4 	.word	0x0800fbd4
 8006d18:	20000f90 	.word	0x20000f90
 8006d1c:	0800fbe0 	.word	0x0800fbe0
 8006d20:	0800fc08 	.word	0x0800fc08
 8006d24:	20000fd1 	.word	0x20000fd1
 8006d28:	0800fc18 	.word	0x0800fc18

08006d2c <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	4a4b      	ldr	r2, [pc, #300]	; (8006e68 <UI_PIDSettingDisplay+0x13c>)
 8006d3a:	f992 2000 	ldrsb.w	r2, [r2]
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	dd06      	ble.n	8006d52 <UI_PIDSettingDisplay+0x26>
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	3b03      	subs	r3, #3
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	b25a      	sxtb	r2, r3
 8006d4c:	4b46      	ldr	r3, [pc, #280]	; (8006e68 <UI_PIDSettingDisplay+0x13c>)
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e009      	b.n	8006d66 <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	4a44      	ldr	r2, [pc, #272]	; (8006e68 <UI_PIDSettingDisplay+0x13c>)
 8006d56:	f992 2000 	ldrsb.w	r2, [r2]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	da03      	bge.n	8006d66 <UI_PIDSettingDisplay+0x3a>
 8006d5e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006d62:	4b41      	ldr	r3, [pc, #260]	; (8006e68 <UI_PIDSettingDisplay+0x13c>)
 8006d64:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	e074      	b.n	8006e56 <UI_PIDSettingDisplay+0x12a>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8006d6c:	4b3e      	ldr	r3, [pc, #248]	; (8006e68 <UI_PIDSettingDisplay+0x13c>)
 8006d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	441a      	add	r2, r3
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d109      	bne.n	8006d92 <UI_PIDSettingDisplay+0x66>
 8006d7e:	493b      	ldr	r1, [pc, #236]	; (8006e6c <UI_PIDSettingDisplay+0x140>)
 8006d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	440b      	add	r3, r1
 8006d8a:	3302      	adds	r3, #2
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e008      	b.n	8006da4 <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8006d92:	4936      	ldr	r1, [pc, #216]	; (8006e6c <UI_PIDSettingDisplay+0x140>)
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	3302      	adds	r3, #2
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 8006da4:	4b30      	ldr	r3, [pc, #192]	; (8006e68 <UI_PIDSettingDisplay+0x13c>)
 8006da6:	f993 3000 	ldrsb.w	r3, [r3]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	4413      	add	r3, r2
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d841      	bhi.n	8006e38 <UI_PIDSettingDisplay+0x10c>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <UI_PIDSettingDisplay+0x90>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006dcd 	.word	0x08006dcd
 8006dc0:	08006de7 	.word	0x08006de7
 8006dc4:	08006e01 	.word	0x08006e01
 8006dc8:	08006e1b 	.word	0x08006e1b
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 8006dcc:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <UI_PIDSettingDisplay+0x144>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7f9 fbb9 	bl	8000548 <__aeabi_f2d>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	f107 000c 	add.w	r0, r7, #12
 8006dde:	4925      	ldr	r1, [pc, #148]	; (8006e74 <UI_PIDSettingDisplay+0x148>)
 8006de0:	f006 fc26 	bl	800d630 <siprintf>
			break;
 8006de4:	e028      	b.n	8006e38 <UI_PIDSettingDisplay+0x10c>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <UI_PIDSettingDisplay+0x144>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7f9 fbac 	bl	8000548 <__aeabi_f2d>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	f107 000c 	add.w	r0, r7, #12
 8006df8:	491f      	ldr	r1, [pc, #124]	; (8006e78 <UI_PIDSettingDisplay+0x14c>)
 8006dfa:	f006 fc19 	bl	800d630 <siprintf>
			break;
 8006dfe:	e01b      	b.n	8006e38 <UI_PIDSettingDisplay+0x10c>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 8006e00:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <UI_PIDSettingDisplay+0x144>)
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7f9 fb9f 	bl	8000548 <__aeabi_f2d>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	f107 000c 	add.w	r0, r7, #12
 8006e12:	491a      	ldr	r1, [pc, #104]	; (8006e7c <UI_PIDSettingDisplay+0x150>)
 8006e14:	f006 fc0c 	bl	800d630 <siprintf>
			break;
 8006e18:	e00e      	b.n	8006e38 <UI_PIDSettingDisplay+0x10c>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <UI_PIDSettingDisplay+0x144>)
 8006e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <UI_PIDSettingDisplay+0xfc>
 8006e24:	4a16      	ldr	r2, [pc, #88]	; (8006e80 <UI_PIDSettingDisplay+0x154>)
 8006e26:	e000      	b.n	8006e2a <UI_PIDSettingDisplay+0xfe>
 8006e28:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <UI_PIDSettingDisplay+0x158>)
 8006e2a:	f107 030c 	add.w	r3, r7, #12
 8006e2e:	4916      	ldr	r1, [pc, #88]	; (8006e88 <UI_PIDSettingDisplay+0x15c>)
 8006e30:	4618      	mov	r0, r3
 8006e32:	f006 fbfd 	bl	800d630 <siprintf>
			break;
 8006e36:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8006e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <UI_PIDSettingDisplay+0x140>)
 8006e42:	4413      	add	r3, r2
 8006e44:	f107 020c 	add.w	r2, r7, #12
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa fd24 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	3301      	adds	r3, #1
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	dd87      	ble.n	8006d6c <UI_PIDSettingDisplay+0x40>
	}
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3728      	adds	r7, #40	; 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20001078 	.word	0x20001078
 8006e6c:	20001048 	.word	0x20001048
 8006e70:	20000dfc 	.word	0x20000dfc
 8006e74:	0800fc20 	.word	0x0800fc20
 8006e78:	0800fc2c 	.word	0x0800fc2c
 8006e7c:	0800fc38 	.word	0x0800fc38
 8006e80:	0800fc44 	.word	0x0800fc44
 8006e84:	0800fc4c 	.word	0x0800fc4c
 8006e88:	0800fc54 	.word	0x0800fc54
 8006e8c:	00000000 	.word	0x00000000

08006e90 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 8006e90:	b590      	push	{r4, r7, lr}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 8006e9e:	49a0      	ldr	r1, [pc, #640]	; (8007120 <UI_PIDSetting+0x290>)
 8006ea0:	48a0      	ldr	r0, [pc, #640]	; (8007124 <UI_PIDSetting+0x294>)
 8006ea2:	f7fa fcf9 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 8006ea6:	4ba0      	ldr	r3, [pc, #640]	; (8007128 <UI_PIDSetting+0x298>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ff3e 	bl	8006d2c <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 8006eb0:	f000 fd60 	bl	8007974 <HAL_GetTick>
 8006eb4:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 8006eb6:	f000 fd5d 	bl	8007974 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	7bba      	ldrb	r2, [r7, #14]
 8006ec2:	2a01      	cmp	r2, #1
 8006ec4:	d101      	bne.n	8006eca <UI_PIDSetting+0x3a>
 8006ec6:	2219      	movs	r2, #25
 8006ec8:	e000      	b.n	8006ecc <UI_PIDSetting+0x3c>
 8006eca:	2246      	movs	r2, #70	; 0x46
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	f200 816d 	bhi.w	80071ac <UI_PIDSetting+0x31c>
		bt2 = UI_ReadButton();
 8006ed2:	f7fd ff75 	bl	8004dc0 <UI_ReadButton>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 8006eda:	7bfa      	ldrb	r2, [r7, #15]
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d103      	bne.n	8006eea <UI_PIDSetting+0x5a>
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8163 	beq.w	80071b0 <UI_PIDSetting+0x320>
		bt = bt2;
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <UI_PIDSetting+0x8a>
			if(num_menu==3) num_menu = 0; else num_menu++;
 8006ef8:	4b8b      	ldr	r3, [pc, #556]	; (8007128 <UI_PIDSetting+0x298>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d103      	bne.n	8006f08 <UI_PIDSetting+0x78>
 8006f00:	4b89      	ldr	r3, [pc, #548]	; (8007128 <UI_PIDSetting+0x298>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	e005      	b.n	8006f14 <UI_PIDSetting+0x84>
 8006f08:	4b87      	ldr	r3, [pc, #540]	; (8007128 <UI_PIDSetting+0x298>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	4b85      	ldr	r3, [pc, #532]	; (8007128 <UI_PIDSetting+0x298>)
 8006f12:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 8006f18:	e7c5      	b.n	8006ea6 <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d010      	beq.n	8006f46 <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 3; else num_menu--;
 8006f24:	4b80      	ldr	r3, [pc, #512]	; (8007128 <UI_PIDSetting+0x298>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <UI_PIDSetting+0xa4>
 8006f2c:	4b7e      	ldr	r3, [pc, #504]	; (8007128 <UI_PIDSetting+0x298>)
 8006f2e:	2203      	movs	r2, #3
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e005      	b.n	8006f40 <UI_PIDSetting+0xb0>
 8006f34:	4b7c      	ldr	r3, [pc, #496]	; (8007128 <UI_PIDSetting+0x298>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	4b7a      	ldr	r3, [pc, #488]	; (8007128 <UI_PIDSetting+0x298>)
 8006f3e:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 8006f44:	e7af      	b.n	8006ea6 <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <UI_PIDSetting+0xca>
			num_menu = 0;
 8006f50:	4b75      	ldr	r3, [pc, #468]	; (8007128 <UI_PIDSetting+0x298>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8006f56:	2302      	movs	r3, #2
 8006f58:	e12e      	b.n	80071b8 <UI_PIDSetting+0x328>
		}
		else if(bt & SW_BK_PRESS) {
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UI_PIDSetting+0xea>
			num_menu = 0;
 8006f64:	4b70      	ldr	r3, [pc, #448]	; (8007128 <UI_PIDSetting+0x298>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8006f6a:	4970      	ldr	r1, [pc, #448]	; (800712c <UI_PIDSetting+0x29c>)
 8006f6c:	4870      	ldr	r0, [pc, #448]	; (8007130 <UI_PIDSetting+0x2a0>)
 8006f6e:	f7fa fc93 	bl	8001898 <DISP_DisplayText>
			Storage_SetPID();
 8006f72:	f7fd f9d5 	bl	8004320 <Storage_SetPID>
			return UI_SET;
 8006f76:	2307      	movs	r3, #7
 8006f78:	e11e      	b.n	80071b8 <UI_PIDSetting+0x328>
		}
		switch(num_menu) {
 8006f7a:	4b6b      	ldr	r3, [pc, #428]	; (8007128 <UI_PIDSetting+0x298>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	dc02      	bgt.n	8006f88 <UI_PIDSetting+0xf8>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da04      	bge.n	8006f90 <UI_PIDSetting+0x100>
 8006f86:	e116      	b.n	80071b6 <UI_PIDSetting+0x326>
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	f000 80fa 	beq.w	8007182 <UI_PIDSetting+0x2f2>
 8006f8e:	e112      	b.n	80071b6 <UI_PIDSetting+0x326>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d12c      	bne.n	8006ff4 <UI_PIDSetting+0x164>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=1.0;
 8006f9a:	4b63      	ldr	r3, [pc, #396]	; (8007128 <UI_PIDSetting+0x298>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	4a65      	ldr	r2, [pc, #404]	; (8007134 <UI_PIDSetting+0x2a4>)
 8006fa0:	3306      	adds	r3, #6
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	edd3 7a00 	vldr	s15, [r3]
 8006faa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb2:	d108      	bne.n	8006fc6 <UI_PIDSetting+0x136>
 8006fb4:	4b5c      	ldr	r3, [pc, #368]	; (8007128 <UI_PIDSetting+0x298>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	4a5e      	ldr	r2, [pc, #376]	; (8007134 <UI_PIDSetting+0x2a4>)
 8006fba:	3306      	adds	r3, #6
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	4a5d      	ldr	r2, [pc, #372]	; (8007138 <UI_PIDSetting+0x2a8>)
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e013      	b.n	8006fee <UI_PIDSetting+0x15e>
 8006fc6:	4b58      	ldr	r3, [pc, #352]	; (8007128 <UI_PIDSetting+0x298>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	4a5a      	ldr	r2, [pc, #360]	; (8007134 <UI_PIDSetting+0x2a4>)
 8006fcc:	3306      	adds	r3, #6
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	edd3 7a00 	vldr	s15, [r3]
 8006fd6:	4b54      	ldr	r3, [pc, #336]	; (8007128 <UI_PIDSetting+0x298>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fe2:	4a54      	ldr	r2, [pc, #336]	; (8007134 <UI_PIDSetting+0x2a4>)
 8006fe4:	3306      	adds	r3, #6
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8006ff2:	e758      	b.n	8006ea6 <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d12f      	bne.n	800705e <UI_PIDSetting+0x1ce>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 8006ffe:	4b4a      	ldr	r3, [pc, #296]	; (8007128 <UI_PIDSetting+0x298>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4a4c      	ldr	r2, [pc, #304]	; (8007134 <UI_PIDSetting+0x2a4>)
 8007004:	3306      	adds	r3, #6
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	edd3 7a00 	vldr	s15, [r3]
 800700e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800713c <UI_PIDSetting+0x2ac>
 8007012:	eef4 7a47 	vcmp.f32	s15, s14
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	d109      	bne.n	8007030 <UI_PIDSetting+0x1a0>
 800701c:	4b42      	ldr	r3, [pc, #264]	; (8007128 <UI_PIDSetting+0x298>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	4a44      	ldr	r2, [pc, #272]	; (8007134 <UI_PIDSetting+0x2a4>)
 8007022:	3306      	adds	r3, #6
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e013      	b.n	8007058 <UI_PIDSetting+0x1c8>
 8007030:	4b3d      	ldr	r3, [pc, #244]	; (8007128 <UI_PIDSetting+0x298>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	4a3f      	ldr	r2, [pc, #252]	; (8007134 <UI_PIDSetting+0x2a4>)
 8007036:	3306      	adds	r3, #6
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	edd3 7a00 	vldr	s15, [r3]
 8007040:	4b39      	ldr	r3, [pc, #228]	; (8007128 <UI_PIDSetting+0x298>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800704c:	4a39      	ldr	r2, [pc, #228]	; (8007134 <UI_PIDSetting+0x2a4>)
 800704e:	3306      	adds	r3, #6
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8007058:	2301      	movs	r3, #1
 800705a:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800705c:	e723      	b.n	8006ea6 <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d136      	bne.n	80070d6 <UI_PIDSetting+0x246>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=0.10;
 8007068:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <UI_PIDSetting+0x298>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	4a31      	ldr	r2, [pc, #196]	; (8007134 <UI_PIDSetting+0x2a4>)
 800706e:	3306      	adds	r3, #6
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	edd3 7a00 	vldr	s15, [r3]
 8007078:	eef5 7a40 	vcmp.f32	s15, #0.0
 800707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007080:	d108      	bne.n	8007094 <UI_PIDSetting+0x204>
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <UI_PIDSetting+0x298>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4a2b      	ldr	r2, [pc, #172]	; (8007134 <UI_PIDSetting+0x2a4>)
 8007088:	3306      	adds	r3, #6
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <UI_PIDSetting+0x2a8>)
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e01d      	b.n	80070d0 <UI_PIDSetting+0x240>
 8007094:	4b24      	ldr	r3, [pc, #144]	; (8007128 <UI_PIDSetting+0x298>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	4a26      	ldr	r2, [pc, #152]	; (8007134 <UI_PIDSetting+0x2a4>)
 800709a:	3306      	adds	r3, #6
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7f9 fa50 	bl	8000548 <__aeabi_f2d>
 80070a8:	a31b      	add	r3, pc, #108	; (adr r3, 8007118 <UI_PIDSetting+0x288>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 f8eb 	bl	8000288 <__aeabi_dsub>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	491c      	ldr	r1, [pc, #112]	; (8007128 <UI_PIDSetting+0x298>)
 80070b8:	7809      	ldrb	r1, [r1, #0]
 80070ba:	460c      	mov	r4, r1
 80070bc:	4610      	mov	r0, r2
 80070be:	4619      	mov	r1, r3
 80070c0:	f7f9 fd92 	bl	8000be8 <__aeabi_d2f>
 80070c4:	4602      	mov	r2, r0
 80070c6:	491b      	ldr	r1, [pc, #108]	; (8007134 <UI_PIDSetting+0x2a4>)
 80070c8:	1da3      	adds	r3, r4, #6
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80070d4:	e6e7      	b.n	8006ea6 <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80070dc:	2b22      	cmp	r3, #34	; 0x22
 80070de:	d169      	bne.n	80071b4 <UI_PIDSetting+0x324>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 80070e0:	4b11      	ldr	r3, [pc, #68]	; (8007128 <UI_PIDSetting+0x298>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4a13      	ldr	r2, [pc, #76]	; (8007134 <UI_PIDSetting+0x2a4>)
 80070e6:	3306      	adds	r3, #6
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	edd3 7a00 	vldr	s15, [r3]
 80070f0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800713c <UI_PIDSetting+0x2ac>
 80070f4:	eef4 7a47 	vcmp.f32	s15, s14
 80070f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fc:	d120      	bne.n	8007140 <UI_PIDSetting+0x2b0>
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <UI_PIDSetting+0x298>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <UI_PIDSetting+0x2a4>)
 8007104:	3306      	adds	r3, #6
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	f04f 0200 	mov.w	r2, #0
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	e034      	b.n	800717c <UI_PIDSetting+0x2ec>
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
 8007118:	9999999a 	.word	0x9999999a
 800711c:	3fb99999 	.word	0x3fb99999
 8007120:	0800fc58 	.word	0x0800fc58
 8007124:	20000fb4 	.word	0x20000fb4
 8007128:	20001079 	.word	0x20001079
 800712c:	0800fc5c 	.word	0x0800fc5c
 8007130:	20000f90 	.word	0x20000f90
 8007134:	20000dfc 	.word	0x20000dfc
 8007138:	42c60000 	.word	0x42c60000
 800713c:	42c60000 	.word	0x42c60000
 8007140:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <UI_PIDSetting+0x338>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	4a21      	ldr	r2, [pc, #132]	; (80071cc <UI_PIDSetting+0x33c>)
 8007146:	3306      	adds	r3, #6
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f7f9 f9fa 	bl	8000548 <__aeabi_f2d>
 8007154:	a31a      	add	r3, pc, #104	; (adr r3, 80071c0 <UI_PIDSetting+0x330>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f897 	bl	800028c <__adddf3>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4919      	ldr	r1, [pc, #100]	; (80071c8 <UI_PIDSetting+0x338>)
 8007164:	7809      	ldrb	r1, [r1, #0]
 8007166:	460c      	mov	r4, r1
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	f7f9 fd3c 	bl	8000be8 <__aeabi_d2f>
 8007170:	4602      	mov	r2, r0
 8007172:	4916      	ldr	r1, [pc, #88]	; (80071cc <UI_PIDSetting+0x33c>)
 8007174:	1da3      	adds	r3, r4, #6
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 800717c:	2301      	movs	r3, #1
 800717e:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8007180:	e691      	b.n	8006ea6 <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	f003 0312 	and.w	r3, r3, #18
 8007188:	2b00      	cmp	r3, #0
 800718a:	f43f ae94 	beq.w	8006eb6 <UI_PIDSetting+0x26>
				plan.status_pid = !plan.status_pid;
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <UI_PIDSetting+0x33c>)
 8007190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <UI_PIDSetting+0x33c>)
 80071a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80071aa:	e67c      	b.n	8006ea6 <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80071ac:	bf00      	nop
 80071ae:	e682      	b.n	8006eb6 <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 80071b0:	bf00      	nop
 80071b2:	e680      	b.n	8006eb6 <UI_PIDSetting+0x26>
			break;
 80071b4:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80071b6:	e67e      	b.n	8006eb6 <UI_PIDSetting+0x26>
			}
		}
	}
	return UI_IDLE;
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd90      	pop	{r4, r7, pc}
 80071c0:	9999999a 	.word	0x9999999a
 80071c4:	3fb99999 	.word	0x3fb99999
 80071c8:	20001079 	.word	0x20001079
 80071cc:	20000dfc 	.word	0x20000dfc

080071d0 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
	for(int i=2; i<4; i++) {
 80071da:	2302      	movs	r3, #2
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
 80071de:	e040      	b.n	8007262 <UI_SpeedSetDisplay+0x92>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d109      	bne.n	80071fc <UI_SpeedSetDisplay+0x2c>
 80071e8:	4922      	ldr	r1, [pc, #136]	; (8007274 <UI_SpeedSetDisplay+0xa4>)
 80071ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ec:	4613      	mov	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	440b      	add	r3, r1
 80071f4:	3302      	adds	r3, #2
 80071f6:	2201      	movs	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e008      	b.n	800720e <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80071fc:	491d      	ldr	r1, [pc, #116]	; (8007274 <UI_SpeedSetDisplay+0xa4>)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	440b      	add	r3, r1
 8007208:	3302      	adds	r3, #2
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	2b02      	cmp	r3, #2
 8007212:	d003      	beq.n	800721c <UI_SpeedSetDisplay+0x4c>
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	2b03      	cmp	r3, #3
 8007218:	d00a      	beq.n	8007230 <UI_SpeedSetDisplay+0x60>
 800721a:	e013      	b.n	8007244 <UI_SpeedSetDisplay+0x74>
		case 2:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 800721c:	4b16      	ldr	r3, [pc, #88]	; (8007278 <UI_SpeedSetDisplay+0xa8>)
 800721e:	7d9b      	ldrb	r3, [r3, #22]
 8007220:	461a      	mov	r2, r3
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	4915      	ldr	r1, [pc, #84]	; (800727c <UI_SpeedSetDisplay+0xac>)
 8007228:	4618      	mov	r0, r3
 800722a:	f006 fa01 	bl	800d630 <siprintf>
			break;
 800722e:	e009      	b.n	8007244 <UI_SpeedSetDisplay+0x74>
		case 3:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <UI_SpeedSetDisplay+0xa8>)
 8007232:	7ddb      	ldrb	r3, [r3, #23]
 8007234:	461a      	mov	r2, r3
 8007236:	f107 030c 	add.w	r3, r7, #12
 800723a:	4911      	ldr	r1, [pc, #68]	; (8007280 <UI_SpeedSetDisplay+0xb0>)
 800723c:	4618      	mov	r0, r3
 800723e:	f006 f9f7 	bl	800d630 <siprintf>
			break;
 8007242:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8007244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007246:	4613      	mov	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	4a09      	ldr	r2, [pc, #36]	; (8007274 <UI_SpeedSetDisplay+0xa4>)
 800724e:	4413      	add	r3, r2
 8007250:	f107 020c 	add.w	r2, r7, #12
 8007254:	4611      	mov	r1, r2
 8007256:	4618      	mov	r0, r3
 8007258:	f7fa fb1e 	bl	8001898 <DISP_DisplayText>
	for(int i=2; i<4; i++) {
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	3301      	adds	r3, #1
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2b03      	cmp	r3, #3
 8007266:	ddbb      	ble.n	80071e0 <UI_SpeedSetDisplay+0x10>
	}
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20001048 	.word	0x20001048
 8007278:	20000dfc 	.word	0x20000dfc
 800727c:	0800fc68 	.word	0x0800fc68
 8007280:	0800fc78 	.word	0x0800fc78

08007284 <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 2;
 800728a:	2302      	movs	r3, #2
 800728c:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 8007296:	495e      	ldr	r1, [pc, #376]	; (8007410 <UI_SpeedSetting+0x18c>)
 8007298:	485e      	ldr	r0, [pc, #376]	; (8007414 <UI_SpeedSetting+0x190>)
 800729a:	f7fa fafd 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff ff95 	bl	80071d0 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 80072a6:	f000 fb65 	bl	8007974 <HAL_GetTick>
 80072aa:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 80072ac:	f000 fb62 	bl	8007974 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	7b7a      	ldrb	r2, [r7, #13]
 80072b8:	2a01      	cmp	r2, #1
 80072ba:	d101      	bne.n	80072c0 <UI_SpeedSetting+0x3c>
 80072bc:	221e      	movs	r2, #30
 80072be:	e000      	b.n	80072c2 <UI_SpeedSetting+0x3e>
 80072c0:	2246      	movs	r2, #70	; 0x46
 80072c2:	429a      	cmp	r2, r3
 80072c4:	f200 809c 	bhi.w	8007400 <UI_SpeedSetting+0x17c>
		bt2 = UI_ReadButton();
 80072c8:	f7fd fd7a 	bl	8004dc0 <UI_ReadButton>
 80072cc:	4603      	mov	r3, r0
 80072ce:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d103      	bne.n	80072e0 <UI_SpeedSetting+0x5c>
 80072d8:	7b7b      	ldrb	r3, [r7, #13]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8092 	beq.w	8007404 <UI_SpeedSetting+0x180>
		bt = bt2;
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <UI_SpeedSetting+0x80>
			if(num_menu!=3) num_menu++;
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d002      	beq.n	80072fa <UI_SpeedSetting+0x76>
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	3301      	adds	r3, #1
 80072f8:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 80072fe:	f7fd f845 	bl	800438c <Storage_SetSpeed>
			goto ui_mem;
 8007302:	e7cc      	b.n	800729e <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <UI_SpeedSetting+0xa8>
			if(num_menu==2) {
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d103      	bne.n	800731c <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 8007314:	f7fd f83a 	bl	800438c <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8007318:	2302      	movs	r3, #2
 800731a:	e075      	b.n	8007408 <UI_SpeedSetting+0x184>
			}
			else num_menu--;
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	3b01      	subs	r3, #1
 8007320:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8007326:	f7fd f831 	bl	800438c <Storage_SetSpeed>
			goto ui_mem;
 800732a:	e7b8      	b.n	800729e <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <UI_SpeedSetting+0xbe>
			num_menu = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 800733a:	f7fd f827 	bl	800438c <Storage_SetSpeed>
			return UI_HOMESCREEN;
 800733e:	2302      	movs	r3, #2
 8007340:	e062      	b.n	8007408 <UI_SpeedSetting+0x184>
		}
		switch(num_menu) {
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d002      	beq.n	800734e <UI_SpeedSetting+0xca>
 8007348:	2b03      	cmp	r3, #3
 800734a:	d02c      	beq.n	80073a6 <UI_SpeedSetting+0x122>
 800734c:	e05b      	b.n	8007406 <UI_SpeedSetting+0x182>
		case 2 :
			if(bt & SW_LF_PRESS) {
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b00      	cmp	r3, #0
 8007356:	d010      	beq.n	800737a <UI_SpeedSetting+0xf6>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 8007358:	4b2f      	ldr	r3, [pc, #188]	; (8007418 <UI_SpeedSetting+0x194>)
 800735a:	7d9b      	ldrb	r3, [r3, #22]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d103      	bne.n	8007368 <UI_SpeedSetting+0xe4>
 8007360:	4b2d      	ldr	r3, [pc, #180]	; (8007418 <UI_SpeedSetting+0x194>)
 8007362:	2263      	movs	r2, #99	; 0x63
 8007364:	759a      	strb	r2, [r3, #22]
 8007366:	e005      	b.n	8007374 <UI_SpeedSetting+0xf0>
 8007368:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <UI_SpeedSetting+0x194>)
 800736a:	7d9b      	ldrb	r3, [r3, #22]
 800736c:	3b01      	subs	r3, #1
 800736e:	b2da      	uxtb	r2, r3
 8007370:	4b29      	ldr	r3, [pc, #164]	; (8007418 <UI_SpeedSetting+0x194>)
 8007372:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 8007374:	2301      	movs	r3, #1
 8007376:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8007378:	e791      	b.n	800729e <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <UI_SpeedSetting+0x122>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 8007384:	4b24      	ldr	r3, [pc, #144]	; (8007418 <UI_SpeedSetting+0x194>)
 8007386:	7d9b      	ldrb	r3, [r3, #22]
 8007388:	2b63      	cmp	r3, #99	; 0x63
 800738a:	d103      	bne.n	8007394 <UI_SpeedSetting+0x110>
 800738c:	4b22      	ldr	r3, [pc, #136]	; (8007418 <UI_SpeedSetting+0x194>)
 800738e:	2200      	movs	r2, #0
 8007390:	759a      	strb	r2, [r3, #22]
 8007392:	e005      	b.n	80073a0 <UI_SpeedSetting+0x11c>
 8007394:	4b20      	ldr	r3, [pc, #128]	; (8007418 <UI_SpeedSetting+0x194>)
 8007396:	7d9b      	ldrb	r3, [r3, #22]
 8007398:	3301      	adds	r3, #1
 800739a:	b2da      	uxtb	r2, r3
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <UI_SpeedSetting+0x194>)
 800739e:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 80073a0:	2301      	movs	r3, #1
 80073a2:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80073a4:	e77b      	b.n	800729e <UI_SpeedSetting+0x1a>
			}
		case 3 :
			if(bt & SW_LF_PRESS) {
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <UI_SpeedSetting+0x14e>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 80073b0:	4b19      	ldr	r3, [pc, #100]	; (8007418 <UI_SpeedSetting+0x194>)
 80073b2:	7ddb      	ldrb	r3, [r3, #23]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d103      	bne.n	80073c0 <UI_SpeedSetting+0x13c>
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <UI_SpeedSetting+0x194>)
 80073ba:	2263      	movs	r2, #99	; 0x63
 80073bc:	75da      	strb	r2, [r3, #23]
 80073be:	e005      	b.n	80073cc <UI_SpeedSetting+0x148>
 80073c0:	4b15      	ldr	r3, [pc, #84]	; (8007418 <UI_SpeedSetting+0x194>)
 80073c2:	7ddb      	ldrb	r3, [r3, #23]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	4b13      	ldr	r3, [pc, #76]	; (8007418 <UI_SpeedSetting+0x194>)
 80073ca:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 80073cc:	2301      	movs	r3, #1
 80073ce:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80073d0:	e765      	b.n	800729e <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f43f af67 	beq.w	80072ac <UI_SpeedSetting+0x28>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <UI_SpeedSetting+0x194>)
 80073e0:	7ddb      	ldrb	r3, [r3, #23]
 80073e2:	2b63      	cmp	r3, #99	; 0x63
 80073e4:	d103      	bne.n	80073ee <UI_SpeedSetting+0x16a>
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <UI_SpeedSetting+0x194>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	75da      	strb	r2, [r3, #23]
 80073ec:	e005      	b.n	80073fa <UI_SpeedSetting+0x176>
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <UI_SpeedSetting+0x194>)
 80073f0:	7ddb      	ldrb	r3, [r3, #23]
 80073f2:	3301      	adds	r3, #1
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	4b08      	ldr	r3, [pc, #32]	; (8007418 <UI_SpeedSetting+0x194>)
 80073f8:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 80073fa:	2301      	movs	r3, #1
 80073fc:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80073fe:	e74e      	b.n	800729e <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8007400:	bf00      	nop
 8007402:	e753      	b.n	80072ac <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 8007404:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8007406:	e751      	b.n	80072ac <UI_SpeedSetting+0x28>
			}

		}
	}
	return UI_IDLE;
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	0800fc88 	.word	0x0800fc88
 8007414:	20000fb4 	.word	0x20000fb4
 8007418:	20000dfc 	.word	0x20000dfc

0800741c <UI_Run>:



UI_Menu_Lists UI_Run() {
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 8007422:	f7fb fd79 	bl	8002f18 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 8007426:	f7fb fdb9 	bl	8002f9c <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[num_checkpoint], num_checkpoint, num_plan);
 800742a:	4b3e      	ldr	r3, [pc, #248]	; (8007524 <UI_Run+0x108>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	4b3d      	ldr	r3, [pc, #244]	; (8007528 <UI_Run+0x10c>)
 8007432:	4413      	add	r3, r2
 8007434:	789b      	ldrb	r3, [r3, #2]
 8007436:	461a      	mov	r2, r3
 8007438:	4b3a      	ldr	r3, [pc, #232]	; (8007524 <UI_Run+0x108>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	4619      	mov	r1, r3
 800743e:	4b3b      	ldr	r3, [pc, #236]	; (800752c <UI_Run+0x110>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4638      	mov	r0, r7
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	460b      	mov	r3, r1
 8007448:	4939      	ldr	r1, [pc, #228]	; (8007530 <UI_Run+0x114>)
 800744a:	f006 f8f1 	bl	800d630 <siprintf>
	DISP_DisplayText(&home_status, buff);
 800744e:	463b      	mov	r3, r7
 8007450:	4619      	mov	r1, r3
 8007452:	4838      	ldr	r0, [pc, #224]	; (8007534 <UI_Run+0x118>)
 8007454:	f7fa fa20 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 8007458:	4b37      	ldr	r3, [pc, #220]	; (8007538 <UI_Run+0x11c>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	4b37      	ldr	r3, [pc, #220]	; (800753c <UI_Run+0x120>)
 8007460:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007464:	463b      	mov	r3, r7
 8007466:	4936      	ldr	r1, [pc, #216]	; (8007540 <UI_Run+0x124>)
 8007468:	4618      	mov	r0, r3
 800746a:	f006 f8e1 	bl	800d630 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 800746e:	463b      	mov	r3, r7
 8007470:	4619      	mov	r1, r3
 8007472:	4834      	ldr	r0, [pc, #208]	; (8007544 <UI_Run+0x128>)
 8007474:	f7fa fa10 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 8007478:	4b33      	ldr	r3, [pc, #204]	; (8007548 <UI_Run+0x12c>)
 800747a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800747e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007482:	ee17 3a90 	vmov	r3, s15
 8007486:	b21b      	sxth	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <UI_Run+0x12c>)
 800748c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007494:	ee17 3a90 	vmov	r3, s15
 8007498:	b21b      	sxth	r3, r3
 800749a:	4638      	mov	r0, r7
 800749c:	492b      	ldr	r1, [pc, #172]	; (800754c <UI_Run+0x130>)
 800749e:	f006 f8c7 	bl	800d630 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 80074a2:	463b      	mov	r3, r7
 80074a4:	4619      	mov	r1, r3
 80074a6:	482a      	ldr	r0, [pc, #168]	; (8007550 <UI_Run+0x134>)
 80074a8:	f7fa f9f6 	bl	8001898 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 80074ac:	4b29      	ldr	r3, [pc, #164]	; (8007554 <UI_Run+0x138>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d027      	beq.n	8007508 <UI_Run+0xec>
		Plan_UIRoutine();
 80074b8:	f7fb fd70 	bl	8002f9c <Plan_UIRoutine>
		UI_ShowSensor();
 80074bc:	f7fd fc02 	bl	8004cc4 <UI_ShowSensor>
		bt = UI_ReadButton();
 80074c0:	f7fd fc7e 	bl	8004dc0 <UI_ReadButton>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	4b23      	ldr	r3, [pc, #140]	; (8007558 <UI_Run+0x13c>)
 80074ca:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 80074cc:	4b22      	ldr	r3, [pc, #136]	; (8007558 <UI_Run+0x13c>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UI_Run+0xd2>
			main_flag &=~0x01;
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <UI_Run+0x138>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f023 0301 	bic.w	r3, r3, #1
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <UI_Run+0x138>)
 80074e4:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 80074e6:	f7fb fcff 	bl	8002ee8 <Plan_Stop>
			return UI_HOMESCREEN;
 80074ea:	2302      	movs	r3, #2
 80074ec:	e016      	b.n	800751c <UI_Run+0x100>
		}
		if(main_flag & 0x80) {
 80074ee:	4b19      	ldr	r3, [pc, #100]	; (8007554 <UI_Run+0x138>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b25b      	sxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dad9      	bge.n	80074ac <UI_Run+0x90>
			main_flag &=~0x80;
 80074f8:	4b16      	ldr	r3, [pc, #88]	; (8007554 <UI_Run+0x138>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007500:	b2da      	uxtb	r2, r3
 8007502:	4b14      	ldr	r3, [pc, #80]	; (8007554 <UI_Run+0x138>)
 8007504:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 8007506:	e78e      	b.n	8007426 <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8007508:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 800750a:	4914      	ldr	r1, [pc, #80]	; (800755c <UI_Run+0x140>)
 800750c:	4814      	ldr	r0, [pc, #80]	; (8007560 <UI_Run+0x144>)
 800750e:	f7fa f9c3 	bl	8001898 <DISP_DisplayText>
	HAL_Delay(500);
 8007512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007516:	f000 fa39 	bl	800798c <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 800751a:	2302      	movs	r3, #2
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20000da8 	.word	0x20000da8
 8007528:	20000dfc 	.word	0x20000dfc
 800752c:	20000da5 	.word	0x20000da5
 8007530:	0800f988 	.word	0x0800f988
 8007534:	20000fb4 	.word	0x20000fb4
 8007538:	20000df0 	.word	0x20000df0
 800753c:	200002c4 	.word	0x200002c4
 8007540:	0800fc90 	.word	0x0800fc90
 8007544:	20001056 	.word	0x20001056
 8007548:	20000a84 	.word	0x20000a84
 800754c:	0800fc9c 	.word	0x0800fc9c
 8007550:	2000105d 	.word	0x2000105d
 8007554:	20000a68 	.word	0x20000a68
 8007558:	2000107a 	.word	0x2000107a
 800755c:	0800fca8 	.word	0x0800fca8
 8007560:	20000f90 	.word	0x20000f90

08007564 <UI_Init>:


void UI_Init() {
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 8007568:	f7fd fcae 	bl	8004ec8 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 800756c:	f7fd fe4a 	bl	8005204 <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 8007570:	f7fd ffd8 	bl	8005524 <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 8007574:	f7fe fd9e 	bl	80060b4 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 8007578:	f7ff f846 	bl	8006608 <UI_CPDisplayInit>
}
 800757c:	bf00      	nop
 800757e:	bd80      	pop	{r7, pc}

08007580 <UI_Main>:

void UI_Main() {
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 8007584:	f7fa fb52 	bl	8001c2c <DISP_ClearAll>
	switch(retval) {
 8007588:	4b3b      	ldr	r3, [pc, #236]	; (8007678 <UI_Main+0xf8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	3b01      	subs	r3, #1
 800758e:	2b0c      	cmp	r3, #12
 8007590:	d870      	bhi.n	8007674 <UI_Main+0xf4>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UI_Main+0x18>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075db 	.word	0x080075db
 80075a0:	080075e9 	.word	0x080075e9
 80075a4:	080075f7 	.word	0x080075f7
 80075a8:	08007605 	.word	0x08007605
 80075ac:	08007613 	.word	0x08007613
 80075b0:	08007621 	.word	0x08007621
 80075b4:	0800762f 	.word	0x0800762f
 80075b8:	0800763d 	.word	0x0800763d
 80075bc:	0800764b 	.word	0x0800764b
 80075c0:	08007659 	.word	0x08007659
 80075c4:	08007675 	.word	0x08007675
 80075c8:	08007667 	.word	0x08007667
	case UI_STARTUP:
		retval = UI_Startup();
 80075cc:	f7fe ff4c 	bl	8006468 <UI_Startup>
 80075d0:	4603      	mov	r3, r0
 80075d2:	461a      	mov	r2, r3
 80075d4:	4b28      	ldr	r3, [pc, #160]	; (8007678 <UI_Main+0xf8>)
 80075d6:	701a      	strb	r2, [r3, #0]
		break;
 80075d8:	e04c      	b.n	8007674 <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 80075da:	f7fd fd45 	bl	8005068 <UI_HomeScreen>
 80075de:	4603      	mov	r3, r0
 80075e0:	461a      	mov	r2, r3
 80075e2:	4b25      	ldr	r3, [pc, #148]	; (8007678 <UI_Main+0xf8>)
 80075e4:	701a      	strb	r2, [r3, #0]
		break;
 80075e6:	e045      	b.n	8007674 <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 80075e8:	f7ff fe4c 	bl	8007284 <UI_SpeedSetting>
 80075ec:	4603      	mov	r3, r0
 80075ee:	461a      	mov	r2, r3
 80075f0:	4b21      	ldr	r3, [pc, #132]	; (8007678 <UI_Main+0xf8>)
 80075f2:	701a      	strb	r2, [r3, #0]
		break;
 80075f4:	e03e      	b.n	8007674 <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 80075f6:	f7ff ff11 	bl	800741c <UI_Run>
 80075fa:	4603      	mov	r3, r0
 80075fc:	461a      	mov	r2, r3
 80075fe:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <UI_Main+0xf8>)
 8007600:	701a      	strb	r2, [r3, #0]
		break;
 8007602:	e037      	b.n	8007674 <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 8007604:	f7fe fa68 	bl	8005ad8 <UI_PlanSet>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <UI_Main+0xf8>)
 800760e:	701a      	strb	r2, [r3, #0]
		break;
 8007610:	e030      	b.n	8007674 <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 8007612:	f7ff f9db 	bl	80069cc <UI_PlanSelect>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4b17      	ldr	r3, [pc, #92]	; (8007678 <UI_Main+0xf8>)
 800761c:	701a      	strb	r2, [r3, #0]
		break;
 800761e:	e029      	b.n	8007674 <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 8007620:	f7fd fedc 	bl	80053dc <UI_Setting>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	4b13      	ldr	r3, [pc, #76]	; (8007678 <UI_Main+0xf8>)
 800762a:	701a      	strb	r2, [r3, #0]
		break;
 800762c:	e022      	b.n	8007674 <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 800762e:	f7fe fe03 	bl	8006238 <UI_ADCThreshold>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <UI_Main+0xf8>)
 8007638:	701a      	strb	r2, [r3, #0]
		break;
 800763a:	e01b      	b.n	8007674 <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 800763c:	f7fe fecc 	bl	80063d8 <UI_AutoCalib>
 8007640:	4603      	mov	r3, r0
 8007642:	461a      	mov	r2, r3
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <UI_Main+0xf8>)
 8007646:	701a      	strb	r2, [r3, #0]
		break;
 8007648:	e014      	b.n	8007674 <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 800764a:	f7ff f8b3 	bl	80067b4 <UI_CP>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <UI_Main+0xf8>)
 8007654:	701a      	strb	r2, [r3, #0]
		break;
 8007656:	e00d      	b.n	8007674 <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 8007658:	f7ff fc1a 	bl	8006e90 <UI_PIDSetting>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <UI_Main+0xf8>)
 8007662:	701a      	strb	r2, [r3, #0]
		break;
 8007664:	e006      	b.n	8007674 <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 8007666:	f7ff fa93 	bl	8006b90 <UI_MemSetting>
 800766a:	4603      	mov	r3, r0
 800766c:	461a      	mov	r2, r3
 800766e:	4b02      	ldr	r3, [pc, #8]	; (8007678 <UI_Main+0xf8>)
 8007670:	701a      	strb	r2, [r3, #0]
		break;
 8007672:	bf00      	nop
	default:
		;
	}
}
 8007674:	bf00      	nop
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000315 	.word	0x20000315

0800767c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007680:	4b11      	ldr	r3, [pc, #68]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 8007682:	4a12      	ldr	r2, [pc, #72]	; (80076cc <MX_USART3_UART_Init+0x50>)
 8007684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007686:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 8007688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800768c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800768e:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 8007690:	2200      	movs	r2, #0
 8007692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 8007696:	2200      	movs	r2, #0
 8007698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 800769c:	2200      	movs	r2, #0
 800769e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 80076a2:	220c      	movs	r2, #12
 80076a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <MX_USART3_UART_Init+0x4c>)
 80076b4:	f004 fc4e 	bl	800bf54 <HAL_UART_Init>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80076be:	f7fa fe30 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	2000107c 	.word	0x2000107c
 80076cc:	40004800 	.word	0x40004800

080076d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076d8:	f107 0314 	add.w	r3, r7, #20
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <HAL_UART_MspInit+0x84>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d12c      	bne.n	800774c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	4b18      	ldr	r3, [pc, #96]	; (8007758 <HAL_UART_MspInit+0x88>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	4a17      	ldr	r2, [pc, #92]	; (8007758 <HAL_UART_MspInit+0x88>)
 80076fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007700:	6413      	str	r3, [r2, #64]	; 0x40
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <HAL_UART_MspInit+0x88>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	4b11      	ldr	r3, [pc, #68]	; (8007758 <HAL_UART_MspInit+0x88>)
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	4a10      	ldr	r2, [pc, #64]	; (8007758 <HAL_UART_MspInit+0x88>)
 8007718:	f043 0304 	orr.w	r3, r3, #4
 800771c:	6313      	str	r3, [r2, #48]	; 0x30
 800771e:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <HAL_UART_MspInit+0x88>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800772a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800772e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007730:	2302      	movs	r3, #2
 8007732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007738:	2303      	movs	r3, #3
 800773a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800773c:	2307      	movs	r3, #7
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007740:	f107 0314 	add.w	r3, r7, #20
 8007744:	4619      	mov	r1, r3
 8007746:	4805      	ldr	r0, [pc, #20]	; (800775c <HAL_UART_MspInit+0x8c>)
 8007748:	f001 fb0c 	bl	8008d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800774c:	bf00      	nop
 800774e:	3728      	adds	r7, #40	; 0x28
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40004800 	.word	0x40004800
 8007758:	40023800 	.word	0x40023800
 800775c:	40020800 	.word	0x40020800

08007760 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007764:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800776a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800776e:	2204      	movs	r2, #4
 8007770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007772:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007774:	2202      	movs	r2, #2
 8007776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800777a:	2200      	movs	r2, #0
 800777c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007780:	2202      	movs	r2, #2
 8007782:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007784:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007786:	2200      	movs	r2, #0
 8007788:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800778c:	2200      	movs	r2, #0
 800778e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007792:	2200      	movs	r2, #0
 8007794:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007798:	2200      	movs	r2, #0
 800779a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077a2:	4805      	ldr	r0, [pc, #20]	; (80077b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80077a4:	f002 fc6b 	bl	800a07e <HAL_PCD_Init>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80077ae:	f7fa fdb8 	bl	8002322 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	200010c0 	.word	0x200010c0

080077bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	; 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077c4:	f107 0314 	add.w	r3, r7, #20
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	605a      	str	r2, [r3, #4]
 80077ce:	609a      	str	r2, [r3, #8]
 80077d0:	60da      	str	r2, [r3, #12]
 80077d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077dc:	d132      	bne.n	8007844 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	4b1a      	ldr	r3, [pc, #104]	; (800784c <HAL_PCD_MspInit+0x90>)
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	4a19      	ldr	r2, [pc, #100]	; (800784c <HAL_PCD_MspInit+0x90>)
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	6313      	str	r3, [r2, #48]	; 0x30
 80077ee:	4b17      	ldr	r3, [pc, #92]	; (800784c <HAL_PCD_MspInit+0x90>)
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80077fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007800:	2302      	movs	r3, #2
 8007802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007808:	2303      	movs	r3, #3
 800780a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800780c:	230a      	movs	r3, #10
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	4619      	mov	r1, r3
 8007816:	480e      	ldr	r0, [pc, #56]	; (8007850 <HAL_PCD_MspInit+0x94>)
 8007818:	f001 faa4 	bl	8008d64 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <HAL_PCD_MspInit+0x90>)
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <HAL_PCD_MspInit+0x90>)
 8007822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007826:	6353      	str	r3, [r2, #52]	; 0x34
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <HAL_PCD_MspInit+0x90>)
 800782e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007830:	4a06      	ldr	r2, [pc, #24]	; (800784c <HAL_PCD_MspInit+0x90>)
 8007832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007836:	6453      	str	r3, [r2, #68]	; 0x44
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <HAL_PCD_MspInit+0x90>)
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007844:	bf00      	nop
 8007846:	3728      	adds	r7, #40	; 0x28
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40023800 	.word	0x40023800
 8007850:	40020000 	.word	0x40020000

08007854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800788c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007858:	480d      	ldr	r0, [pc, #52]	; (8007890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800785a:	490e      	ldr	r1, [pc, #56]	; (8007894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800785c:	4a0e      	ldr	r2, [pc, #56]	; (8007898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800785e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007860:	e002      	b.n	8007868 <LoopCopyDataInit>

08007862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007866:	3304      	adds	r3, #4

08007868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800786a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800786c:	d3f9      	bcc.n	8007862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800786e:	4a0b      	ldr	r2, [pc, #44]	; (800789c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007870:	4c0b      	ldr	r4, [pc, #44]	; (80078a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007874:	e001      	b.n	800787a <LoopFillZerobss>

08007876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007878:	3204      	adds	r2, #4

0800787a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800787a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800787c:	d3fb      	bcc.n	8007876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800787e:	f7fc fea1 	bl	80045c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007882:	f005 f931 	bl	800cae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007886:	f7fa fc2d 	bl	80020e4 <main>
  bx  lr    
 800788a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800788c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007894:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 8007898:	080100bc 	.word	0x080100bc
  ldr r2, =_sbss
 800789c:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 80078a0:	200015e0 	.word	0x200015e0

080078a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078a4:	e7fe      	b.n	80078a4 <CAN1_RX0_IRQHandler>
	...

080078a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <HAL_Init+0x40>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <HAL_Init+0x40>)
 80078b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_Init+0x40>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a0a      	ldr	r2, [pc, #40]	; (80078e8 <HAL_Init+0x40>)
 80078be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <HAL_Init+0x40>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <HAL_Init+0x40>)
 80078ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078d0:	2003      	movs	r0, #3
 80078d2:	f000 fe91 	bl	80085f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80078d6:	200f      	movs	r0, #15
 80078d8:	f000 f808 	bl	80078ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80078dc:	f7fc fa40 	bl	8003d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40023c00 	.word	0x40023c00

080078ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078f4:	4b12      	ldr	r3, [pc, #72]	; (8007940 <HAL_InitTick+0x54>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	4b12      	ldr	r3, [pc, #72]	; (8007944 <HAL_InitTick+0x58>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007902:	fbb3 f3f1 	udiv	r3, r3, r1
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fead 	bl	800866a <HAL_SYSTICK_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e00e      	b.n	8007938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b0f      	cmp	r3, #15
 800791e:	d80a      	bhi.n	8007936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007920:	2200      	movs	r2, #0
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	f000 fe71 	bl	800860e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800792c:	4a06      	ldr	r2, [pc, #24]	; (8007948 <HAL_InitTick+0x5c>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	2000028c 	.word	0x2000028c
 8007944:	2000031c 	.word	0x2000031c
 8007948:	20000318 	.word	0x20000318

0800794c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <HAL_IncTick+0x20>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <HAL_IncTick+0x24>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4413      	add	r3, r2
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <HAL_IncTick+0x24>)
 800795e:	6013      	str	r3, [r2, #0]
}
 8007960:	bf00      	nop
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	2000031c 	.word	0x2000031c
 8007970:	200015cc 	.word	0x200015cc

08007974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  return uwTick;
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <HAL_GetTick+0x14>)
 800797a:	681b      	ldr	r3, [r3, #0]
}
 800797c:	4618      	mov	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	200015cc 	.word	0x200015cc

0800798c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007994:	f7ff ffee 	bl	8007974 <HAL_GetTick>
 8007998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d005      	beq.n	80079b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <HAL_Delay+0x44>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80079b2:	bf00      	nop
 80079b4:	f7ff ffde 	bl	8007974 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d8f7      	bhi.n	80079b4 <HAL_Delay+0x28>
  {
  }
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	2000031c 	.word	0x2000031c

080079d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e033      	b.n	8007a52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d109      	bne.n	8007a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 fbd6 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f003 0310 	and.w	r3, r3, #16
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d118      	bne.n	8007a44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a1a:	f023 0302 	bic.w	r3, r3, #2
 8007a1e:	f043 0202 	orr.w	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fb78 	bl	800811c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	f043 0201 	orr.w	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	641a      	str	r2, [r3, #64]	; 0x40
 8007a42:	e001      	b.n	8007a48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d049      	beq.n	8007b24 <HAL_ADC_IRQHandler+0xca>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d046      	beq.n	8007b24 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d12b      	bne.n	8007b14 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d127      	bne.n	8007b14 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d006      	beq.n	8007ae0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d119      	bne.n	8007b14 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0220 	bic.w	r2, r2, #32
 8007aee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	f043 0201 	orr.w	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fa fbf9 	bl	800230c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f06f 0212 	mvn.w	r2, #18
 8007b22:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b32:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d057      	beq.n	8007bea <HAL_ADC_IRQHandler+0x190>
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d054      	beq.n	8007bea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d139      	bne.n	8007bda <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d006      	beq.n	8007b82 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d12b      	bne.n	8007bda <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d124      	bne.n	8007bda <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d11d      	bne.n	8007bda <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d119      	bne.n	8007bda <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bb4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f043 0201 	orr.w	r2, r3, #1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fc1c 	bl	8008418 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 020c 	mvn.w	r2, #12
 8007be8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <HAL_ADC_IRQHandler+0x1d6>
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d014      	beq.n	8007c30 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d10d      	bne.n	8007c30 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f945 	bl	8007eb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f06f 0201 	mvn.w	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c3e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <HAL_ADC_IRQHandler+0x218>
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d012      	beq.n	8007c72 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c50:	f043 0202 	orr.w	r2, r3, #2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0220 	mvn.w	r2, #32
 8007c60:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f92e 	bl	8007ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0220 	mvn.w	r2, #32
 8007c70:	601a      	str	r2, [r3, #0]
  }
}
 8007c72:	bf00      	nop
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_ADC_Start_DMA+0x1e>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e0e9      	b.n	8007e6e <HAL_ADC_Start_DMA+0x1f2>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d018      	beq.n	8007ce2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0201 	orr.w	r2, r2, #1
 8007cbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007cc0:	4b6d      	ldr	r3, [pc, #436]	; (8007e78 <HAL_ADC_Start_DMA+0x1fc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a6d      	ldr	r2, [pc, #436]	; (8007e7c <HAL_ADC_Start_DMA+0x200>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	0c9a      	lsrs	r2, r3, #18
 8007ccc:	4613      	mov	r3, r2
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	4413      	add	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007cd4:	e002      	b.n	8007cdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f9      	bne.n	8007cd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d107      	bne.n	8007d02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	f040 80a1 	bne.w	8007e54 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d106      	bne.n	8007d60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	f023 0206 	bic.w	r2, r3, #6
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8007d5e:	e002      	b.n	8007d66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d6e:	4b44      	ldr	r3, [pc, #272]	; (8007e80 <HAL_ADC_Start_DMA+0x204>)
 8007d70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	4a43      	ldr	r2, [pc, #268]	; (8007e84 <HAL_ADC_Start_DMA+0x208>)
 8007d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	4a42      	ldr	r2, [pc, #264]	; (8007e88 <HAL_ADC_Start_DMA+0x20c>)
 8007d80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	4a41      	ldr	r2, [pc, #260]	; (8007e8c <HAL_ADC_Start_DMA+0x210>)
 8007d88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007d92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007da2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007db2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	334c      	adds	r3, #76	; 0x4c
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f000 fd0c 	bl	80087e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d12a      	bne.n	8007e2a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2d      	ldr	r2, [pc, #180]	; (8007e90 <HAL_ADC_Start_DMA+0x214>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d015      	beq.n	8007e0a <HAL_ADC_Start_DMA+0x18e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <HAL_ADC_Start_DMA+0x218>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d105      	bne.n	8007df4 <HAL_ADC_Start_DMA+0x178>
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_ADC_Start_DMA+0x204>)
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a27      	ldr	r2, [pc, #156]	; (8007e98 <HAL_ADC_Start_DMA+0x21c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d136      	bne.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
 8007dfe:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <HAL_ADC_Start_DMA+0x204>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d130      	bne.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d129      	bne.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	e020      	b.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <HAL_ADC_Start_DMA+0x214>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d11b      	bne.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d114      	bne.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007e50:	609a      	str	r2, [r3, #8]
 8007e52:	e00b      	b.n	8007e6c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f043 0210 	orr.w	r2, r3, #16
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e64:	f043 0201 	orr.w	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	2000028c 	.word	0x2000028c
 8007e7c:	431bde83 	.word	0x431bde83
 8007e80:	40012300 	.word	0x40012300
 8007e84:	08008315 	.word	0x08008315
 8007e88:	080083cf 	.word	0x080083cf
 8007e8c:	080083eb 	.word	0x080083eb
 8007e90:	40012000 	.word	0x40012000
 8007e94:	40012100 	.word	0x40012100
 8007e98:	40012200 	.word	0x40012200

08007e9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_ADC_ConfigChannel+0x1c>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e105      	b.n	8008100 <HAL_ADC_ConfigChannel+0x228>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d925      	bls.n	8007f50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68d9      	ldr	r1, [r3, #12]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	461a      	mov	r2, r3
 8007f12:	4613      	mov	r3, r2
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	4413      	add	r3, r2
 8007f18:	3b1e      	subs	r3, #30
 8007f1a:	2207      	movs	r2, #7
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	43da      	mvns	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	400a      	ands	r2, r1
 8007f28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68d9      	ldr	r1, [r3, #12]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	4403      	add	r3, r0
 8007f42:	3b1e      	subs	r3, #30
 8007f44:	409a      	lsls	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	60da      	str	r2, [r3, #12]
 8007f4e:	e022      	b.n	8007f96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6919      	ldr	r1, [r3, #16]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4613      	mov	r3, r2
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	4413      	add	r3, r2
 8007f64:	2207      	movs	r2, #7
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43da      	mvns	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	400a      	ands	r2, r1
 8007f72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6919      	ldr	r1, [r3, #16]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4618      	mov	r0, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	4403      	add	r3, r0
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b06      	cmp	r3, #6
 8007f9c:	d824      	bhi.n	8007fe8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	3b05      	subs	r3, #5
 8007fb0:	221f      	movs	r2, #31
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	43da      	mvns	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	4618      	mov	r0, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3b05      	subs	r3, #5
 8007fda:	fa00 f203 	lsl.w	r2, r0, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8007fe6:	e04c      	b.n	8008082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	d824      	bhi.n	800803a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	3b23      	subs	r3, #35	; 0x23
 8008002:	221f      	movs	r2, #31
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	43da      	mvns	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	400a      	ands	r2, r1
 8008010:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	4618      	mov	r0, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	3b23      	subs	r3, #35	; 0x23
 800802c:	fa00 f203 	lsl.w	r2, r0, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	631a      	str	r2, [r3, #48]	; 0x30
 8008038:	e023      	b.n	8008082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	3b41      	subs	r3, #65	; 0x41
 800804c:	221f      	movs	r2, #31
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	43da      	mvns	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	400a      	ands	r2, r1
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	b29b      	uxth	r3, r3
 8008068:	4618      	mov	r0, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	3b41      	subs	r3, #65	; 0x41
 8008076:	fa00 f203 	lsl.w	r2, r0, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008082:	4b22      	ldr	r3, [pc, #136]	; (800810c <HAL_ADC_ConfigChannel+0x234>)
 8008084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a21      	ldr	r2, [pc, #132]	; (8008110 <HAL_ADC_ConfigChannel+0x238>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d109      	bne.n	80080a4 <HAL_ADC_ConfigChannel+0x1cc>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b12      	cmp	r3, #18
 8008096:	d105      	bne.n	80080a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a19      	ldr	r2, [pc, #100]	; (8008110 <HAL_ADC_ConfigChannel+0x238>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d123      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x21e>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b10      	cmp	r3, #16
 80080b4:	d003      	beq.n	80080be <HAL_ADC_ConfigChannel+0x1e6>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b11      	cmp	r3, #17
 80080bc:	d11b      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d111      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80080d2:	4b10      	ldr	r3, [pc, #64]	; (8008114 <HAL_ADC_ConfigChannel+0x23c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a10      	ldr	r2, [pc, #64]	; (8008118 <HAL_ADC_ConfigChannel+0x240>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	0c9a      	lsrs	r2, r3, #18
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80080e8:	e002      	b.n	80080f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f9      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40012300 	.word	0x40012300
 8008110:	40012000 	.word	0x40012000
 8008114:	2000028c 	.word	0x2000028c
 8008118:	431bde83 	.word	0x431bde83

0800811c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008124:	4b79      	ldr	r3, [pc, #484]	; (800830c <ADC_Init+0x1f0>)
 8008126:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008150:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6859      	ldr	r1, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	021a      	lsls	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6859      	ldr	r1, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6899      	ldr	r1, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	4a58      	ldr	r2, [pc, #352]	; (8008310 <ADC_Init+0x1f4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d022      	beq.n	80081fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6899      	ldr	r1, [r3, #8]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80081e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6899      	ldr	r1, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	609a      	str	r2, [r3, #8]
 80081f8:	e00f      	b.n	800821a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008218:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0202 	bic.w	r2, r2, #2
 8008228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6899      	ldr	r1, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	7e1b      	ldrb	r3, [r3, #24]
 8008234:	005a      	lsls	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01b      	beq.n	8008280 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008256:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008266:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6859      	ldr	r1, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	3b01      	subs	r3, #1
 8008274:	035a      	lsls	r2, r3, #13
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
 800827e:	e007      	b.n	8008290 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800828e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800829e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	051a      	lsls	r2, r3, #20
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80082c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6899      	ldr	r1, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082d2:	025a      	lsls	r2, r3, #9
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6899      	ldr	r1, [r3, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	029a      	lsls	r2, r3, #10
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	609a      	str	r2, [r3, #8]
}
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40012300 	.word	0x40012300
 8008310:	0f000001 	.word	0x0f000001

08008314 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800832a:	2b00      	cmp	r3, #0
 800832c:	d13c      	bne.n	80083a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d12b      	bne.n	80083a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800834c:	2b00      	cmp	r3, #0
 800834e:	d127      	bne.n	80083a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800835a:	2b00      	cmp	r3, #0
 800835c:	d006      	beq.n	800836c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008368:	2b00      	cmp	r3, #0
 800836a:	d119      	bne.n	80083a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0220 	bic.w	r2, r2, #32
 800837a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	f043 0201 	orr.w	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7f9 ffb3 	bl	800230c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80083a6:	e00e      	b.n	80083c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fd85 	bl	8007ec4 <HAL_ADC_ErrorCallback>
}
 80083ba:	e004      	b.n	80083c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
}
 80083c6:	bf00      	nop
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fd5d 	bl	8007e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2240      	movs	r2, #64	; 0x40
 80083fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008402:	f043 0204 	orr.w	r2, r3, #4
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff fd5a 	bl	8007ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008410:	bf00      	nop
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800843c:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <__NVIC_SetPriorityGrouping+0x44>)
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008448:	4013      	ands	r3, r2
 800844a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800845c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800845e:	4a04      	ldr	r2, [pc, #16]	; (8008470 <__NVIC_SetPriorityGrouping+0x44>)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	60d3      	str	r3, [r2, #12]
}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <__NVIC_GetPriorityGrouping+0x18>)
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	0a1b      	lsrs	r3, r3, #8
 800847e:	f003 0307 	and.w	r3, r3, #7
}
 8008482:	4618      	mov	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	e000ed00 	.word	0xe000ed00

08008490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800849a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	db0b      	blt.n	80084ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	f003 021f 	and.w	r2, r3, #31
 80084a8:	4907      	ldr	r1, [pc, #28]	; (80084c8 <__NVIC_EnableIRQ+0x38>)
 80084aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	2001      	movs	r0, #1
 80084b2:	fa00 f202 	lsl.w	r2, r0, r2
 80084b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	e000e100 	.word	0xe000e100

080084cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	db0a      	blt.n	80084f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	490c      	ldr	r1, [pc, #48]	; (8008518 <__NVIC_SetPriority+0x4c>)
 80084e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ea:	0112      	lsls	r2, r2, #4
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	440b      	add	r3, r1
 80084f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084f4:	e00a      	b.n	800850c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4908      	ldr	r1, [pc, #32]	; (800851c <__NVIC_SetPriority+0x50>)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	f003 030f 	and.w	r3, r3, #15
 8008502:	3b04      	subs	r3, #4
 8008504:	0112      	lsls	r2, r2, #4
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	440b      	add	r3, r1
 800850a:	761a      	strb	r2, [r3, #24]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	e000e100 	.word	0xe000e100
 800851c:	e000ed00 	.word	0xe000ed00

08008520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008520:	b480      	push	{r7}
 8008522:	b089      	sub	sp, #36	; 0x24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f1c3 0307 	rsb	r3, r3, #7
 800853a:	2b04      	cmp	r3, #4
 800853c:	bf28      	it	cs
 800853e:	2304      	movcs	r3, #4
 8008540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	3304      	adds	r3, #4
 8008546:	2b06      	cmp	r3, #6
 8008548:	d902      	bls.n	8008550 <NVIC_EncodePriority+0x30>
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	3b03      	subs	r3, #3
 800854e:	e000      	b.n	8008552 <NVIC_EncodePriority+0x32>
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008554:	f04f 32ff 	mov.w	r2, #4294967295
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	43da      	mvns	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	401a      	ands	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008568:	f04f 31ff 	mov.w	r1, #4294967295
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	fa01 f303 	lsl.w	r3, r1, r3
 8008572:	43d9      	mvns	r1, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008578:	4313      	orrs	r3, r2
         );
}
 800857a:	4618      	mov	r0, r3
 800857c:	3724      	adds	r7, #36	; 0x24
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800858c:	f3bf 8f4f 	dsb	sy
}
 8008590:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008592:	4b06      	ldr	r3, [pc, #24]	; (80085ac <__NVIC_SystemReset+0x24>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800859a:	4904      	ldr	r1, [pc, #16]	; (80085ac <__NVIC_SystemReset+0x24>)
 800859c:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <__NVIC_SystemReset+0x28>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80085a2:	f3bf 8f4f 	dsb	sy
}
 80085a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80085a8:	bf00      	nop
 80085aa:	e7fd      	b.n	80085a8 <__NVIC_SystemReset+0x20>
 80085ac:	e000ed00 	.word	0xe000ed00
 80085b0:	05fa0004 	.word	0x05fa0004

080085b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3b01      	subs	r3, #1
 80085c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085c4:	d301      	bcc.n	80085ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80085c6:	2301      	movs	r3, #1
 80085c8:	e00f      	b.n	80085ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085ca:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <SysTick_Config+0x40>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80085d2:	210f      	movs	r1, #15
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	f7ff ff78 	bl	80084cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <SysTick_Config+0x40>)
 80085de:	2200      	movs	r2, #0
 80085e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085e2:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <SysTick_Config+0x40>)
 80085e4:	2207      	movs	r2, #7
 80085e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	e000e010 	.word	0xe000e010

080085f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff ff13 	bl	800842c <__NVIC_SetPriorityGrouping>
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800860e:	b580      	push	{r7, lr}
 8008610:	b086      	sub	sp, #24
 8008612:	af00      	add	r7, sp, #0
 8008614:	4603      	mov	r3, r0
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008620:	f7ff ff28 	bl	8008474 <__NVIC_GetPriorityGrouping>
 8008624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	6978      	ldr	r0, [r7, #20]
 800862c:	f7ff ff78 	bl	8008520 <NVIC_EncodePriority>
 8008630:	4602      	mov	r2, r0
 8008632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff ff47 	bl	80084cc <__NVIC_SetPriority>
}
 800863e:	bf00      	nop
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	4603      	mov	r3, r0
 800864e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff ff1b 	bl	8008490 <__NVIC_EnableIRQ>
}
 800865a:	bf00      	nop
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008666:	f7ff ff8f 	bl	8008588 <__NVIC_SystemReset>

0800866a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff ff9e 	bl	80085b4 <SysTick_Config>
 8008678:	4603      	mov	r3, r0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008690:	f7ff f970 	bl	8007974 <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e099      	b.n	80087d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086c0:	e00f      	b.n	80086e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086c2:	f7ff f957 	bl	8007974 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b05      	cmp	r3, #5
 80086ce:	d908      	bls.n	80086e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2203      	movs	r2, #3
 80086da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e078      	b.n	80087d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e8      	bne.n	80086c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4b38      	ldr	r3, [pc, #224]	; (80087dc <HAL_DMA_Init+0x158>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800870e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800871a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b04      	cmp	r3, #4
 800873a:	d107      	bne.n	800874c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008744:	4313      	orrs	r3, r2
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0307 	bic.w	r3, r3, #7
 8008762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	2b04      	cmp	r3, #4
 8008774:	d117      	bne.n	80087a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00e      	beq.n	80087a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fa6f 	bl	8008c6c <DMA_CheckFifoParam>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d008      	beq.n	80087a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2240      	movs	r2, #64	; 0x40
 8008798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80087a2:	2301      	movs	r3, #1
 80087a4:	e016      	b.n	80087d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa26 	bl	8008c00 <DMA_CalcBaseAndBitshift>
 80087b4:	4603      	mov	r3, r0
 80087b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087bc:	223f      	movs	r2, #63	; 0x3f
 80087be:	409a      	lsls	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	f010803f 	.word	0xf010803f

080087e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_DMA_Start_IT+0x26>
 8008802:	2302      	movs	r3, #2
 8008804:	e040      	b.n	8008888 <HAL_DMA_Start_IT+0xa8>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b01      	cmp	r3, #1
 8008818:	d12f      	bne.n	800887a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2202      	movs	r2, #2
 800881e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 f9b8 	bl	8008ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008838:	223f      	movs	r2, #63	; 0x3f
 800883a:	409a      	lsls	r2, r3
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0216 	orr.w	r2, r2, #22
 800884e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	d007      	beq.n	8008868 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0208 	orr.w	r2, r2, #8
 8008866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0201 	orr.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	e005      	b.n	8008886 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008882:	2302      	movs	r3, #2
 8008884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800889c:	4b8e      	ldr	r3, [pc, #568]	; (8008ad8 <HAL_DMA_IRQHandler+0x248>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a8e      	ldr	r2, [pc, #568]	; (8008adc <HAL_DMA_IRQHandler+0x24c>)
 80088a2:	fba2 2303 	umull	r2, r3, r2, r3
 80088a6:	0a9b      	lsrs	r3, r3, #10
 80088a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ba:	2208      	movs	r2, #8
 80088bc:	409a      	lsls	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4013      	ands	r3, r2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01a      	beq.n	80088fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d013      	beq.n	80088fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0204 	bic.w	r2, r2, #4
 80088e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e8:	2208      	movs	r2, #8
 80088ea:	409a      	lsls	r2, r3
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f4:	f043 0201 	orr.w	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008900:	2201      	movs	r2, #1
 8008902:	409a      	lsls	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4013      	ands	r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d012      	beq.n	8008932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891e:	2201      	movs	r2, #1
 8008920:	409a      	lsls	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	f043 0202 	orr.w	r2, r3, #2
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008936:	2204      	movs	r2, #4
 8008938:	409a      	lsls	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4013      	ands	r3, r2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d012      	beq.n	8008968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008954:	2204      	movs	r2, #4
 8008956:	409a      	lsls	r2, r3
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008960:	f043 0204 	orr.w	r2, r3, #4
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896c:	2210      	movs	r2, #16
 800896e:	409a      	lsls	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4013      	ands	r3, r2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d043      	beq.n	8008a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d03c      	beq.n	8008a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	2210      	movs	r2, #16
 800898c:	409a      	lsls	r2, r3
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d018      	beq.n	80089d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d108      	bne.n	80089c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d024      	beq.n	8008a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	4798      	blx	r3
 80089be:	e01f      	b.n	8008a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01b      	beq.n	8008a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3
 80089d0:	e016      	b.n	8008a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d107      	bne.n	80089f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0208 	bic.w	r2, r2, #8
 80089ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a04:	2220      	movs	r2, #32
 8008a06:	409a      	lsls	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 808f 	beq.w	8008b30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8087 	beq.w	8008b30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a26:	2220      	movs	r2, #32
 8008a28:	409a      	lsls	r2, r3
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d136      	bne.n	8008aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0216 	bic.w	r2, r2, #22
 8008a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	695a      	ldr	r2, [r3, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <HAL_DMA_IRQHandler+0x1da>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0208 	bic.w	r2, r2, #8
 8008a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7e:	223f      	movs	r2, #63	; 0x3f
 8008a80:	409a      	lsls	r2, r3
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d07e      	beq.n	8008b9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
        }
        return;
 8008aa6:	e079      	b.n	8008b9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01d      	beq.n	8008af2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10d      	bne.n	8008ae0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d031      	beq.n	8008b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
 8008ad4:	e02c      	b.n	8008b30 <HAL_DMA_IRQHandler+0x2a0>
 8008ad6:	bf00      	nop
 8008ad8:	2000028c 	.word	0x2000028c
 8008adc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d023      	beq.n	8008b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	4798      	blx	r3
 8008af0:	e01e      	b.n	8008b30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10f      	bne.n	8008b20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0210 	bic.w	r2, r2, #16
 8008b0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d032      	beq.n	8008b9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d022      	beq.n	8008b8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2205      	movs	r2, #5
 8008b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0201 	bic.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	60bb      	str	r3, [r7, #8]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d307      	bcc.n	8008b78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f2      	bne.n	8008b5c <HAL_DMA_IRQHandler+0x2cc>
 8008b76:	e000      	b.n	8008b7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008b78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
 8008b9a:	e000      	b.n	8008b9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8008b9c:	bf00      	nop
    }
  }
}
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d108      	bne.n	8008be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008be2:	e007      	b.n	8008bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	60da      	str	r2, [r3, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	3b10      	subs	r3, #16
 8008c10:	4a14      	ldr	r2, [pc, #80]	; (8008c64 <DMA_CalcBaseAndBitshift+0x64>)
 8008c12:	fba2 2303 	umull	r2, r3, r2, r3
 8008c16:	091b      	lsrs	r3, r3, #4
 8008c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c1a:	4a13      	ldr	r2, [pc, #76]	; (8008c68 <DMA_CalcBaseAndBitshift+0x68>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d909      	bls.n	8008c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8008c40:	e007      	b.n	8008c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c4a:	f023 0303 	bic.w	r3, r3, #3
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	aaaaaaab 	.word	0xaaaaaaab
 8008c68:	0800fcc8 	.word	0x0800fcc8

08008c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d11f      	bne.n	8008cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d856      	bhi.n	8008d3a <DMA_CheckFifoParam+0xce>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <DMA_CheckFifoParam+0x28>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008cb7 	.word	0x08008cb7
 8008c9c:	08008ca5 	.word	0x08008ca5
 8008ca0:	08008d3b 	.word	0x08008d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d046      	beq.n	8008d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cb4:	e043      	b.n	8008d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cbe:	d140      	bne.n	8008d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cc4:	e03d      	b.n	8008d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cce:	d121      	bne.n	8008d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d837      	bhi.n	8008d46 <DMA_CheckFifoParam+0xda>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <DMA_CheckFifoParam+0x70>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cf3 	.word	0x08008cf3
 8008ce4:	08008ced 	.word	0x08008ced
 8008ce8:	08008d05 	.word	0x08008d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf0:	e030      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d025      	beq.n	8008d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d02:	e022      	b.n	8008d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d0c:	d11f      	bne.n	8008d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d12:	e01c      	b.n	8008d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d903      	bls.n	8008d22 <DMA_CheckFifoParam+0xb6>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d003      	beq.n	8008d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d20:	e018      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
      break;
 8008d26:	e015      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00e      	beq.n	8008d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	e00b      	b.n	8008d52 <DMA_CheckFifoParam+0xe6>
      break;
 8008d3a:	bf00      	nop
 8008d3c:	e00a      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e008      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      break;
 8008d42:	bf00      	nop
 8008d44:	e006      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      break;
 8008d46:	bf00      	nop
 8008d48:	e004      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e002      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8008d4e:	bf00      	nop
 8008d50:	e000      	b.n	8008d54 <DMA_CheckFifoParam+0xe8>
      break;
 8008d52:	bf00      	nop
    }
  } 
  
  return status; 
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop

08008d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	; 0x24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	e16b      	b.n	8009058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008d80:	2201      	movs	r2, #1
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	fa02 f303 	lsl.w	r3, r2, r3
 8008d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4013      	ands	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	f040 815a 	bne.w	8009052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d005      	beq.n	8008db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d130      	bne.n	8008e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008dec:	2201      	movs	r2, #1
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	fa02 f303 	lsl.w	r3, r2, r3
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	091b      	lsrs	r3, r3, #4
 8008e02:	f003 0201 	and.w	r2, r3, #1
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d017      	beq.n	8008e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	2203      	movs	r2, #3
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	43db      	mvns	r3, r3
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d123      	bne.n	8008ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	08da      	lsrs	r2, r3, #3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3208      	adds	r2, #8
 8008e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	f003 0307 	and.w	r3, r3, #7
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	220f      	movs	r2, #15
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	4013      	ands	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	08da      	lsrs	r2, r3, #3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3208      	adds	r2, #8
 8008ea2:	69b9      	ldr	r1, [r7, #24]
 8008ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f003 0203 	and.w	r2, r3, #3
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 80b4 	beq.w	8009052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	4b60      	ldr	r3, [pc, #384]	; (8009070 <HAL_GPIO_Init+0x30c>)
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef2:	4a5f      	ldr	r2, [pc, #380]	; (8009070 <HAL_GPIO_Init+0x30c>)
 8008ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8008efa:	4b5d      	ldr	r3, [pc, #372]	; (8009070 <HAL_GPIO_Init+0x30c>)
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008f06:	4a5b      	ldr	r2, [pc, #364]	; (8009074 <HAL_GPIO_Init+0x310>)
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	089b      	lsrs	r3, r3, #2
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	220f      	movs	r2, #15
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	43db      	mvns	r3, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4013      	ands	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a52      	ldr	r2, [pc, #328]	; (8009078 <HAL_GPIO_Init+0x314>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d02b      	beq.n	8008f8a <HAL_GPIO_Init+0x226>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a51      	ldr	r2, [pc, #324]	; (800907c <HAL_GPIO_Init+0x318>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d025      	beq.n	8008f86 <HAL_GPIO_Init+0x222>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a50      	ldr	r2, [pc, #320]	; (8009080 <HAL_GPIO_Init+0x31c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d01f      	beq.n	8008f82 <HAL_GPIO_Init+0x21e>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a4f      	ldr	r2, [pc, #316]	; (8009084 <HAL_GPIO_Init+0x320>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d019      	beq.n	8008f7e <HAL_GPIO_Init+0x21a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a4e      	ldr	r2, [pc, #312]	; (8009088 <HAL_GPIO_Init+0x324>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d013      	beq.n	8008f7a <HAL_GPIO_Init+0x216>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a4d      	ldr	r2, [pc, #308]	; (800908c <HAL_GPIO_Init+0x328>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00d      	beq.n	8008f76 <HAL_GPIO_Init+0x212>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a4c      	ldr	r2, [pc, #304]	; (8009090 <HAL_GPIO_Init+0x32c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <HAL_GPIO_Init+0x20e>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a4b      	ldr	r2, [pc, #300]	; (8009094 <HAL_GPIO_Init+0x330>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d101      	bne.n	8008f6e <HAL_GPIO_Init+0x20a>
 8008f6a:	2307      	movs	r3, #7
 8008f6c:	e00e      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f6e:	2308      	movs	r3, #8
 8008f70:	e00c      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f72:	2306      	movs	r3, #6
 8008f74:	e00a      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f76:	2305      	movs	r3, #5
 8008f78:	e008      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	e006      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e004      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e002      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <HAL_GPIO_Init+0x228>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	f002 0203 	and.w	r2, r2, #3
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	4093      	lsls	r3, r2
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f9c:	4935      	ldr	r1, [pc, #212]	; (8009074 <HAL_GPIO_Init+0x310>)
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	089b      	lsrs	r3, r3, #2
 8008fa2:	3302      	adds	r3, #2
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008faa:	4b3b      	ldr	r3, [pc, #236]	; (8009098 <HAL_GPIO_Init+0x334>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	43db      	mvns	r3, r3
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008fce:	4a32      	ldr	r2, [pc, #200]	; (8009098 <HAL_GPIO_Init+0x334>)
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008fd4:	4b30      	ldr	r3, [pc, #192]	; (8009098 <HAL_GPIO_Init+0x334>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ff8:	4a27      	ldr	r2, [pc, #156]	; (8009098 <HAL_GPIO_Init+0x334>)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ffe:	4b26      	ldr	r3, [pc, #152]	; (8009098 <HAL_GPIO_Init+0x334>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	43db      	mvns	r3, r3
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	4013      	ands	r3, r2
 800900c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	4313      	orrs	r3, r2
 8009020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009022:	4a1d      	ldr	r2, [pc, #116]	; (8009098 <HAL_GPIO_Init+0x334>)
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <HAL_GPIO_Init+0x334>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	43db      	mvns	r3, r3
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	4013      	ands	r3, r2
 8009036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d003      	beq.n	800904c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	4313      	orrs	r3, r2
 800904a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800904c:	4a12      	ldr	r2, [pc, #72]	; (8009098 <HAL_GPIO_Init+0x334>)
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3301      	adds	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	2b0f      	cmp	r3, #15
 800905c:	f67f ae90 	bls.w	8008d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	3724      	adds	r7, #36	; 0x24
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40023800 	.word	0x40023800
 8009074:	40013800 	.word	0x40013800
 8009078:	40020000 	.word	0x40020000
 800907c:	40020400 	.word	0x40020400
 8009080:	40020800 	.word	0x40020800
 8009084:	40020c00 	.word	0x40020c00
 8009088:	40021000 	.word	0x40021000
 800908c:	40021400 	.word	0x40021400
 8009090:	40021800 	.word	0x40021800
 8009094:	40021c00 	.word	0x40021c00
 8009098:	40013c00 	.word	0x40013c00

0800909c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	887b      	ldrh	r3, [r7, #2]
 80090ae:	4013      	ands	r3, r2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090b4:	2301      	movs	r3, #1
 80090b6:	73fb      	strb	r3, [r7, #15]
 80090b8:	e001      	b.n	80090be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090be:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	807b      	strh	r3, [r7, #2]
 80090d8:	4613      	mov	r3, r2
 80090da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80090dc:	787b      	ldrb	r3, [r7, #1]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090e2:	887a      	ldrh	r2, [r7, #2]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80090e8:	e003      	b.n	80090f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80090ea:	887b      	ldrh	r3, [r7, #2]
 80090ec:	041a      	lsls	r2, r3, #16
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	619a      	str	r2, [r3, #24]
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
	...

08009100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e12b      	b.n	800936a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7f8 ff5e 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2224      	movs	r2, #36	; 0x24
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0201 	bic.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009164:	f001 fd16 	bl	800ab94 <HAL_RCC_GetPCLK1Freq>
 8009168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4a81      	ldr	r2, [pc, #516]	; (8009374 <HAL_I2C_Init+0x274>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d807      	bhi.n	8009184 <HAL_I2C_Init+0x84>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a80      	ldr	r2, [pc, #512]	; (8009378 <HAL_I2C_Init+0x278>)
 8009178:	4293      	cmp	r3, r2
 800917a:	bf94      	ite	ls
 800917c:	2301      	movls	r3, #1
 800917e:	2300      	movhi	r3, #0
 8009180:	b2db      	uxtb	r3, r3
 8009182:	e006      	b.n	8009192 <HAL_I2C_Init+0x92>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a7d      	ldr	r2, [pc, #500]	; (800937c <HAL_I2C_Init+0x27c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	bf94      	ite	ls
 800918c:	2301      	movls	r3, #1
 800918e:	2300      	movhi	r3, #0
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e0e7      	b.n	800936a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4a78      	ldr	r2, [pc, #480]	; (8009380 <HAL_I2C_Init+0x280>)
 800919e:	fba2 2303 	umull	r2, r3, r2, r3
 80091a2:	0c9b      	lsrs	r3, r3, #18
 80091a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4a6a      	ldr	r2, [pc, #424]	; (8009374 <HAL_I2C_Init+0x274>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d802      	bhi.n	80091d4 <HAL_I2C_Init+0xd4>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	3301      	adds	r3, #1
 80091d2:	e009      	b.n	80091e8 <HAL_I2C_Init+0xe8>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091da:	fb02 f303 	mul.w	r3, r2, r3
 80091de:	4a69      	ldr	r2, [pc, #420]	; (8009384 <HAL_I2C_Init+0x284>)
 80091e0:	fba2 2303 	umull	r2, r3, r2, r3
 80091e4:	099b      	lsrs	r3, r3, #6
 80091e6:	3301      	adds	r3, #1
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	430b      	orrs	r3, r1
 80091ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	495c      	ldr	r1, [pc, #368]	; (8009374 <HAL_I2C_Init+0x274>)
 8009204:	428b      	cmp	r3, r1
 8009206:	d819      	bhi.n	800923c <HAL_I2C_Init+0x13c>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	1e59      	subs	r1, r3, #1
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	fbb1 f3f3 	udiv	r3, r1, r3
 8009216:	1c59      	adds	r1, r3, #1
 8009218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800921c:	400b      	ands	r3, r1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <HAL_I2C_Init+0x138>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1e59      	subs	r1, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009230:	3301      	adds	r3, #1
 8009232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009236:	e051      	b.n	80092dc <HAL_I2C_Init+0x1dc>
 8009238:	2304      	movs	r3, #4
 800923a:	e04f      	b.n	80092dc <HAL_I2C_Init+0x1dc>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d111      	bne.n	8009268 <HAL_I2C_Init+0x168>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	1e58      	subs	r0, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6859      	ldr	r1, [r3, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	440b      	add	r3, r1
 8009252:	fbb0 f3f3 	udiv	r3, r0, r3
 8009256:	3301      	adds	r3, #1
 8009258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf0c      	ite	eq
 8009260:	2301      	moveq	r3, #1
 8009262:	2300      	movne	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	e012      	b.n	800928e <HAL_I2C_Init+0x18e>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	1e58      	subs	r0, r3, #1
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6859      	ldr	r1, [r3, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	0099      	lsls	r1, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	fbb0 f3f3 	udiv	r3, r0, r3
 800927e:	3301      	adds	r3, #1
 8009280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009284:	2b00      	cmp	r3, #0
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <HAL_I2C_Init+0x196>
 8009292:	2301      	movs	r3, #1
 8009294:	e022      	b.n	80092dc <HAL_I2C_Init+0x1dc>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10e      	bne.n	80092bc <HAL_I2C_Init+0x1bc>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1e58      	subs	r0, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6859      	ldr	r1, [r3, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	440b      	add	r3, r1
 80092ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80092b0:	3301      	adds	r3, #1
 80092b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ba:	e00f      	b.n	80092dc <HAL_I2C_Init+0x1dc>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	1e58      	subs	r0, r3, #1
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6859      	ldr	r1, [r3, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	0099      	lsls	r1, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80092d2:	3301      	adds	r3, #1
 80092d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	6809      	ldr	r1, [r1, #0]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	69da      	ldr	r2, [r3, #28]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800930a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6911      	ldr	r1, [r2, #16]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	68d2      	ldr	r2, [r2, #12]
 8009316:	4311      	orrs	r1, r2
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	430b      	orrs	r3, r1
 800931e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695a      	ldr	r2, [r3, #20]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0201 	orr.w	r2, r2, #1
 800934a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	000186a0 	.word	0x000186a0
 8009378:	001e847f 	.word	0x001e847f
 800937c:	003d08ff 	.word	0x003d08ff
 8009380:	431bde83 	.word	0x431bde83
 8009384:	10624dd3 	.word	0x10624dd3

08009388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af02      	add	r7, sp, #8
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	461a      	mov	r2, r3
 8009396:	4603      	mov	r3, r0
 8009398:	817b      	strh	r3, [r7, #10]
 800939a:	460b      	mov	r3, r1
 800939c:	813b      	strh	r3, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093a2:	f7fe fae7 	bl	8007974 <HAL_GetTick>
 80093a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b20      	cmp	r3, #32
 80093b2:	f040 80d9 	bne.w	8009568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	2319      	movs	r3, #25
 80093bc:	2201      	movs	r2, #1
 80093be:	496d      	ldr	r1, [pc, #436]	; (8009574 <HAL_I2C_Mem_Write+0x1ec>)
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fc7f 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80093cc:	2302      	movs	r3, #2
 80093ce:	e0cc      	b.n	800956a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d101      	bne.n	80093de <HAL_I2C_Mem_Write+0x56>
 80093da:	2302      	movs	r3, #2
 80093dc:	e0c5      	b.n	800956a <HAL_I2C_Mem_Write+0x1e2>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d007      	beq.n	8009404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2221      	movs	r2, #33	; 0x21
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2240      	movs	r2, #64	; 0x40
 8009420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6a3a      	ldr	r2, [r7, #32]
 800942e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a4d      	ldr	r2, [pc, #308]	; (8009578 <HAL_I2C_Mem_Write+0x1f0>)
 8009444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009446:	88f8      	ldrh	r0, [r7, #6]
 8009448:	893a      	ldrh	r2, [r7, #8]
 800944a:	8979      	ldrh	r1, [r7, #10]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4603      	mov	r3, r0
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fab6 	bl	80099c8 <I2C_RequestMemoryWrite>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d052      	beq.n	8009508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e081      	b.n	800956a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fd00 	bl	8009e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00d      	beq.n	8009492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	2b04      	cmp	r3, #4
 800947c:	d107      	bne.n	800948e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800948c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e06b      	b.n	800956a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	781a      	ldrb	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d11b      	bne.n	8009508 <HAL_I2C_Mem_Write+0x180>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d017      	beq.n	8009508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	781a      	ldrb	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1aa      	bne.n	8009466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 fcec 	bl	8009ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00d      	beq.n	800953c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009524:	2b04      	cmp	r3, #4
 8009526:	d107      	bne.n	8009538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e016      	b.n	800956a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2220      	movs	r2, #32
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	e000      	b.n	800956a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009568:	2302      	movs	r3, #2
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	00100002 	.word	0x00100002
 8009578:	ffff0000 	.word	0xffff0000

0800957c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08c      	sub	sp, #48	; 0x30
 8009580:	af02      	add	r7, sp, #8
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	461a      	mov	r2, r3
 800958a:	4603      	mov	r3, r0
 800958c:	817b      	strh	r3, [r7, #10]
 800958e:	460b      	mov	r3, r1
 8009590:	813b      	strh	r3, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009596:	f7fe f9ed 	bl	8007974 <HAL_GetTick>
 800959a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	f040 8208 	bne.w	80099ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2319      	movs	r3, #25
 80095b0:	2201      	movs	r2, #1
 80095b2:	497b      	ldr	r1, [pc, #492]	; (80097a0 <HAL_I2C_Mem_Read+0x224>)
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 fb85 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80095c0:	2302      	movs	r3, #2
 80095c2:	e1fb      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d101      	bne.n	80095d2 <HAL_I2C_Mem_Read+0x56>
 80095ce:	2302      	movs	r3, #2
 80095d0:	e1f4      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d007      	beq.n	80095f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2222      	movs	r2, #34	; 0x22
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2240      	movs	r2, #64	; 0x40
 8009614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4a5b      	ldr	r2, [pc, #364]	; (80097a4 <HAL_I2C_Mem_Read+0x228>)
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800963a:	88f8      	ldrh	r0, [r7, #6]
 800963c:	893a      	ldrh	r2, [r7, #8]
 800963e:	8979      	ldrh	r1, [r7, #10]
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4603      	mov	r3, r0
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f000 fa52 	bl	8009af4 <I2C_RequestMemoryRead>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e1b0      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d113      	bne.n	800968a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009662:	2300      	movs	r3, #0
 8009664:	623b      	str	r3, [r7, #32]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	623b      	str	r3, [r7, #32]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	623b      	str	r3, [r7, #32]
 8009676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e184      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968e:	2b01      	cmp	r3, #1
 8009690:	d11b      	bne.n	80096ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096a2:	2300      	movs	r3, #0
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	61fb      	str	r3, [r7, #28]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	61fb      	str	r3, [r7, #28]
 80096b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e164      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d11b      	bne.n	800970a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096f2:	2300      	movs	r3, #0
 80096f4:	61bb      	str	r3, [r7, #24]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	e144      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009720:	e138      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009726:	2b03      	cmp	r3, #3
 8009728:	f200 80f1 	bhi.w	800990e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009730:	2b01      	cmp	r3, #1
 8009732:	d123      	bne.n	800977c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 fc1b 	bl	8009f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e139      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009764:	3b01      	subs	r3, #1
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009770:	b29b      	uxth	r3, r3
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800977a:	e10b      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009780:	2b02      	cmp	r3, #2
 8009782:	d14e      	bne.n	8009822 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	2200      	movs	r2, #0
 800978c:	4906      	ldr	r1, [pc, #24]	; (80097a8 <HAL_I2C_Mem_Read+0x22c>)
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fa98 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d008      	beq.n	80097ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e10e      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
 800979e:	bf00      	nop
 80097a0:	00100002 	.word	0x00100002
 80097a4:	ffff0000 	.word	0xffff0000
 80097a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691a      	ldr	r2, [r3, #16]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	691a      	ldr	r2, [r3, #16]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980a:	3b01      	subs	r3, #1
 800980c:	b29a      	uxth	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009816:	b29b      	uxth	r3, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009820:	e0b8      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	2200      	movs	r2, #0
 800982a:	4966      	ldr	r1, [pc, #408]	; (80099c4 <HAL_I2C_Mem_Read+0x448>)
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fa49 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e0bf      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800984a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691a      	ldr	r2, [r3, #16]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	b2d2      	uxtb	r2, r2
 8009858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	1c5a      	adds	r2, r3, #1
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009868:	3b01      	subs	r3, #1
 800986a:	b29a      	uxth	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009874:	b29b      	uxth	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	b29a      	uxth	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	2200      	movs	r2, #0
 8009886:	494f      	ldr	r1, [pc, #316]	; (80099c4 <HAL_I2C_Mem_Read+0x448>)
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 fa1b 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e091      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	691a      	ldr	r2, [r3, #16]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009902:	b29b      	uxth	r3, r3
 8009904:	3b01      	subs	r3, #1
 8009906:	b29a      	uxth	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800990c:	e042      	b.n	8009994 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800990e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fb2e 	bl	8009f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e04c      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691a      	ldr	r2, [r3, #16]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	b2d2      	uxtb	r2, r2
 800992e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800993e:	3b01      	subs	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	2b04      	cmp	r3, #4
 8009960:	d118      	bne.n	8009994 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	b2d2      	uxtb	r2, r2
 800996e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998a:	b29b      	uxth	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	f47f aec2 	bne.w	8009722 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e000      	b.n	80099bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80099ba:	2302      	movs	r3, #2
  }
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3728      	adds	r7, #40	; 0x28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	00010004 	.word	0x00010004

080099c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	4608      	mov	r0, r1
 80099d2:	4611      	mov	r1, r2
 80099d4:	461a      	mov	r2, r3
 80099d6:	4603      	mov	r3, r0
 80099d8:	817b      	strh	r3, [r7, #10]
 80099da:	460b      	mov	r3, r1
 80099dc:	813b      	strh	r3, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 f960 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a18:	d103      	bne.n	8009a22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e05f      	b.n	8009ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a26:	897b      	ldrh	r3, [r7, #10]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	6a3a      	ldr	r2, [r7, #32]
 8009a3a:	492d      	ldr	r1, [pc, #180]	; (8009af0 <I2C_RequestMemoryWrite+0x128>)
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f998 	bl	8009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e04c      	b.n	8009ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a64:	6a39      	ldr	r1, [r7, #32]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fa02 	bl	8009e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00d      	beq.n	8009a8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d107      	bne.n	8009a8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e02b      	b.n	8009ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d105      	bne.n	8009aa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a94:	893b      	ldrh	r3, [r7, #8]
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	611a      	str	r2, [r3, #16]
 8009a9e:	e021      	b.n	8009ae4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009aa0:	893b      	ldrh	r3, [r7, #8]
 8009aa2:	0a1b      	lsrs	r3, r3, #8
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab0:	6a39      	ldr	r1, [r7, #32]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f9dc 	bl	8009e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00d      	beq.n	8009ada <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d107      	bne.n	8009ad6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e005      	b.n	8009ae6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ada:	893b      	ldrh	r3, [r7, #8]
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	00010002 	.word	0x00010002

08009af4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	817b      	strh	r3, [r7, #10]
 8009b06:	460b      	mov	r3, r1
 8009b08:	813b      	strh	r3, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f8c2 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00d      	beq.n	8009b62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b54:	d103      	bne.n	8009b5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e0aa      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b62:	897b      	ldrh	r3, [r7, #10]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	6a3a      	ldr	r2, [r7, #32]
 8009b76:	4952      	ldr	r1, [pc, #328]	; (8009cc0 <I2C_RequestMemoryRead+0x1cc>)
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f8fa 	bl	8009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e097      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba0:	6a39      	ldr	r1, [r7, #32]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f964 	bl	8009e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00d      	beq.n	8009bca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d107      	bne.n	8009bc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e076      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d105      	bne.n	8009bdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bd0:	893b      	ldrh	r3, [r7, #8]
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	611a      	str	r2, [r3, #16]
 8009bda:	e021      	b.n	8009c20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bdc:	893b      	ldrh	r3, [r7, #8]
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bec:	6a39      	ldr	r1, [r7, #32]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f93e 	bl	8009e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00d      	beq.n	8009c16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d107      	bne.n	8009c12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e050      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c16:	893b      	ldrh	r3, [r7, #8]
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	6a39      	ldr	r1, [r7, #32]
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 f923 	bl	8009e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00d      	beq.n	8009c4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	d107      	bne.n	8009c48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e035      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f82b 	bl	8009cc4 <I2C_WaitOnFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00d      	beq.n	8009c90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c82:	d103      	bne.n	8009c8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e013      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c90:	897b      	ldrh	r3, [r7, #10]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f043 0301 	orr.w	r3, r3, #1
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	6a3a      	ldr	r2, [r7, #32]
 8009ca4:	4906      	ldr	r1, [pc, #24]	; (8009cc0 <I2C_RequestMemoryRead+0x1cc>)
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 f863 	bl	8009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e000      	b.n	8009cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	00010002 	.word	0x00010002

08009cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cd4:	e025      	b.n	8009d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d021      	beq.n	8009d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cde:	f7fd fe49 	bl	8007974 <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	683a      	ldr	r2, [r7, #0]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d302      	bcc.n	8009cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d116      	bne.n	8009d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	f043 0220 	orr.w	r2, r3, #32
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e023      	b.n	8009d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d10d      	bne.n	8009d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	43da      	mvns	r2, r3
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4013      	ands	r3, r2
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	e00c      	b.n	8009d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	43da      	mvns	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	4013      	ands	r3, r2
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bf0c      	ite	eq
 8009d5a:	2301      	moveq	r3, #1
 8009d5c:	2300      	movne	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d0b6      	beq.n	8009cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d80:	e051      	b.n	8009e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d90:	d123      	bne.n	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	f043 0204 	orr.w	r2, r3, #4
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e046      	b.n	8009e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de0:	d021      	beq.n	8009e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009de2:	f7fd fdc7 	bl	8007974 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d302      	bcc.n	8009df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d116      	bne.n	8009e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	f043 0220 	orr.w	r2, r3, #32
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e020      	b.n	8009e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	0c1b      	lsrs	r3, r3, #16
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d10c      	bne.n	8009e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	43da      	mvns	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bf14      	ite	ne
 8009e42:	2301      	movne	r3, #1
 8009e44:	2300      	moveq	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	e00b      	b.n	8009e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	43da      	mvns	r2, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	4013      	ands	r3, r2
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bf14      	ite	ne
 8009e5c:	2301      	movne	r3, #1
 8009e5e:	2300      	moveq	r3, #0
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d18d      	bne.n	8009d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e7c:	e02d      	b.n	8009eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 f8ce 	bl	800a020 <I2C_IsAcknowledgeFailed>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e02d      	b.n	8009eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	d021      	beq.n	8009eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e96:	f7fd fd6d 	bl	8007974 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d302      	bcc.n	8009eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d116      	bne.n	8009eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	f043 0220 	orr.w	r2, r3, #32
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e007      	b.n	8009eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee4:	2b80      	cmp	r3, #128	; 0x80
 8009ee6:	d1ca      	bne.n	8009e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009efe:	e02d      	b.n	8009f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f88d 	bl	800a020 <I2C_IsAcknowledgeFailed>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e02d      	b.n	8009f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f16:	d021      	beq.n	8009f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f18:	f7fd fd2c 	bl	8007974 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d302      	bcc.n	8009f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d116      	bne.n	8009f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2220      	movs	r2, #32
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f48:	f043 0220 	orr.w	r2, r3, #32
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e007      	b.n	8009f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	d1ca      	bne.n	8009f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f80:	e042      	b.n	800a008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	f003 0310 	and.w	r3, r3, #16
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d119      	bne.n	8009fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f06f 0210 	mvn.w	r2, #16
 8009f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e029      	b.n	800a018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fc4:	f7fd fcd6 	bl	8007974 <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d302      	bcc.n	8009fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d116      	bne.n	800a008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	f043 0220 	orr.w	r2, r3, #32
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e007      	b.n	800a018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a012:	2b40      	cmp	r3, #64	; 0x40
 800a014:	d1b5      	bne.n	8009f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a036:	d11b      	bne.n	800a070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	f043 0204 	orr.w	r2, r3, #4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a07e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a080:	b08f      	sub	sp, #60	; 0x3c
 800a082:	af0a      	add	r7, sp, #40	; 0x28
 800a084:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e10f      	b.n	800a2b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7fd fb86 	bl	80077bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f002 fa63 	bl	800c59a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	603b      	str	r3, [r7, #0]
 800a0da:	687e      	ldr	r6, [r7, #4]
 800a0dc:	466d      	mov	r5, sp
 800a0de:	f106 0410 	add.w	r4, r6, #16
 800a0e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0ee:	e885 0003 	stmia.w	r5, {r0, r1}
 800a0f2:	1d33      	adds	r3, r6, #4
 800a0f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0f6:	6838      	ldr	r0, [r7, #0]
 800a0f8:	f002 f9ee 	bl	800c4d8 <USB_CoreInit>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e0d0      	b.n	800a2b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f002 fa51 	bl	800c5bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
 800a11e:	e04a      	b.n	800a1b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a120:	7bfa      	ldrb	r2, [r7, #15]
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	333d      	adds	r3, #61	; 0x3d
 800a130:	2201      	movs	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a134:	7bfa      	ldrb	r2, [r7, #15]
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4613      	mov	r3, r2
 800a13a:	00db      	lsls	r3, r3, #3
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	440b      	add	r3, r1
 800a142:	333c      	adds	r3, #60	; 0x3c
 800a144:	7bfa      	ldrb	r2, [r7, #15]
 800a146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a148:	7bfa      	ldrb	r2, [r7, #15]
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	b298      	uxth	r0, r3
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	4613      	mov	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	440b      	add	r3, r1
 800a15a:	3344      	adds	r3, #68	; 0x44
 800a15c:	4602      	mov	r2, r0
 800a15e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a160:	7bfa      	ldrb	r2, [r7, #15]
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	4613      	mov	r3, r2
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	4413      	add	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	440b      	add	r3, r1
 800a16e:	3340      	adds	r3, #64	; 0x40
 800a170:	2200      	movs	r2, #0
 800a172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a174:	7bfa      	ldrb	r2, [r7, #15]
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	4613      	mov	r3, r2
 800a17a:	00db      	lsls	r3, r3, #3
 800a17c:	4413      	add	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	440b      	add	r3, r1
 800a182:	3348      	adds	r3, #72	; 0x48
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a188:	7bfa      	ldrb	r2, [r7, #15]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4613      	mov	r3, r2
 800a18e:	00db      	lsls	r3, r3, #3
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	334c      	adds	r3, #76	; 0x4c
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a19c:	7bfa      	ldrb	r2, [r7, #15]
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	3354      	adds	r3, #84	; 0x54
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	73fb      	strb	r3, [r7, #15]
 800a1b6:	7bfa      	ldrb	r2, [r7, #15]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d3af      	bcc.n	800a120 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e044      	b.n	800a250 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a1c6:	7bfa      	ldrb	r2, [r7, #15]
 800a1c8:	6879      	ldr	r1, [r7, #4]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	440b      	add	r3, r1
 800a1d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1dc:	7bfa      	ldrb	r2, [r7, #15]
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a1ee:	7bfa      	ldrb	r2, [r7, #15]
 800a1f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1f2:	7bfa      	ldrb	r2, [r7, #15]
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a204:	2200      	movs	r2, #0
 800a206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a208:	7bfa      	ldrb	r2, [r7, #15]
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	4613      	mov	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	4413      	add	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a21e:	7bfa      	ldrb	r2, [r7, #15]
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a234:	7bfa      	ldrb	r2, [r7, #15]
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4613      	mov	r3, r2
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	3301      	adds	r3, #1
 800a24e:	73fb      	strb	r3, [r7, #15]
 800a250:	7bfa      	ldrb	r2, [r7, #15]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	d3b5      	bcc.n	800a1c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	687e      	ldr	r6, [r7, #4]
 800a262:	466d      	mov	r5, sp
 800a264:	f106 0410 	add.w	r4, r6, #16
 800a268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a26a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a26c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a26e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a270:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a274:	e885 0003 	stmia.w	r5, {r0, r1}
 800a278:	1d33      	adds	r3, r6, #4
 800a27a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a27c:	6838      	ldr	r0, [r7, #0]
 800a27e:	f002 f9e9 	bl	800c654 <USB_DevInit>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e00d      	b.n	800a2b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f002 fbb4 	bl	800ca16 <USB_DevDisconnect>

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e267      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d075      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a2d6:	4b88      	ldr	r3, [pc, #544]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f003 030c 	and.w	r3, r3, #12
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d00c      	beq.n	800a2fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2e2:	4b85      	ldr	r3, [pc, #532]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d112      	bne.n	800a314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2ee:	4b82      	ldr	r3, [pc, #520]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2fa:	d10b      	bne.n	800a314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2fc:	4b7e      	ldr	r3, [pc, #504]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d05b      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x108>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d157      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e242      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a31c:	d106      	bne.n	800a32c <HAL_RCC_OscConfig+0x74>
 800a31e:	4b76      	ldr	r3, [pc, #472]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a75      	ldr	r2, [pc, #468]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	e01d      	b.n	800a368 <HAL_RCC_OscConfig+0xb0>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a334:	d10c      	bne.n	800a350 <HAL_RCC_OscConfig+0x98>
 800a336:	4b70      	ldr	r3, [pc, #448]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a6f      	ldr	r2, [pc, #444]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a33c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	4b6d      	ldr	r3, [pc, #436]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a6c      	ldr	r2, [pc, #432]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	e00b      	b.n	800a368 <HAL_RCC_OscConfig+0xb0>
 800a350:	4b69      	ldr	r3, [pc, #420]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a68      	ldr	r2, [pc, #416]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	4b66      	ldr	r3, [pc, #408]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a65      	ldr	r2, [pc, #404]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d013      	beq.n	800a398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a370:	f7fd fb00 	bl	8007974 <HAL_GetTick>
 800a374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a376:	e008      	b.n	800a38a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a378:	f7fd fafc 	bl	8007974 <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b64      	cmp	r3, #100	; 0x64
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e207      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a38a:	4b5b      	ldr	r3, [pc, #364]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0f0      	beq.n	800a378 <HAL_RCC_OscConfig+0xc0>
 800a396:	e014      	b.n	800a3c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a398:	f7fd faec 	bl	8007974 <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3a0:	f7fd fae8 	bl	8007974 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b64      	cmp	r3, #100	; 0x64
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e1f3      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3b2:	4b51      	ldr	r3, [pc, #324]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <HAL_RCC_OscConfig+0xe8>
 800a3be:	e000      	b.n	800a3c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d063      	beq.n	800a496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a3ce:	4b4a      	ldr	r3, [pc, #296]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f003 030c 	and.w	r3, r3, #12
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00b      	beq.n	800a3f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a3da:	4b47      	ldr	r3, [pc, #284]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	d11c      	bne.n	800a420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a3e6:	4b44      	ldr	r3, [pc, #272]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d116      	bne.n	800a420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3f2:	4b41      	ldr	r3, [pc, #260]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <HAL_RCC_OscConfig+0x152>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d001      	beq.n	800a40a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e1c7      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a40a:	4b3b      	ldr	r3, [pc, #236]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4937      	ldr	r1, [pc, #220]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a41e:	e03a      	b.n	800a496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d020      	beq.n	800a46a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a428:	4b34      	ldr	r3, [pc, #208]	; (800a4fc <HAL_RCC_OscConfig+0x244>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a42e:	f7fd faa1 	bl	8007974 <HAL_GetTick>
 800a432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a434:	e008      	b.n	800a448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a436:	f7fd fa9d 	bl	8007974 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b02      	cmp	r3, #2
 800a442:	d901      	bls.n	800a448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e1a8      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a448:	4b2b      	ldr	r3, [pc, #172]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0302 	and.w	r3, r3, #2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0f0      	beq.n	800a436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a454:	4b28      	ldr	r3, [pc, #160]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4925      	ldr	r1, [pc, #148]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a464:	4313      	orrs	r3, r2
 800a466:	600b      	str	r3, [r1, #0]
 800a468:	e015      	b.n	800a496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a46a:	4b24      	ldr	r3, [pc, #144]	; (800a4fc <HAL_RCC_OscConfig+0x244>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a470:	f7fd fa80 	bl	8007974 <HAL_GetTick>
 800a474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a476:	e008      	b.n	800a48a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a478:	f7fd fa7c 	bl	8007974 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e187      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a48a:	4b1b      	ldr	r3, [pc, #108]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1f0      	bne.n	800a478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0308 	and.w	r3, r3, #8
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d036      	beq.n	800a510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d016      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4aa:	4b15      	ldr	r3, [pc, #84]	; (800a500 <HAL_RCC_OscConfig+0x248>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4b0:	f7fd fa60 	bl	8007974 <HAL_GetTick>
 800a4b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a4b6:	e008      	b.n	800a4ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4b8:	f7fd fa5c 	bl	8007974 <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e167      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <HAL_RCC_OscConfig+0x240>)
 800a4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0f0      	beq.n	800a4b8 <HAL_RCC_OscConfig+0x200>
 800a4d6:	e01b      	b.n	800a510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4d8:	4b09      	ldr	r3, [pc, #36]	; (800a500 <HAL_RCC_OscConfig+0x248>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4de:	f7fd fa49 	bl	8007974 <HAL_GetTick>
 800a4e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4e4:	e00e      	b.n	800a504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4e6:	f7fd fa45 	bl	8007974 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d907      	bls.n	800a504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e150      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
 800a4f8:	40023800 	.word	0x40023800
 800a4fc:	42470000 	.word	0x42470000
 800a500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a504:	4b88      	ldr	r3, [pc, #544]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1ea      	bne.n	800a4e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 8097 	beq.w	800a64c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a51e:	2300      	movs	r3, #0
 800a520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a522:	4b81      	ldr	r3, [pc, #516]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10f      	bne.n	800a54e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]
 800a532:	4b7d      	ldr	r3, [pc, #500]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	4a7c      	ldr	r2, [pc, #496]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a53c:	6413      	str	r3, [r2, #64]	; 0x40
 800a53e:	4b7a      	ldr	r3, [pc, #488]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a546:	60bb      	str	r3, [r7, #8]
 800a548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a54e:	4b77      	ldr	r3, [pc, #476]	; (800a72c <HAL_RCC_OscConfig+0x474>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a556:	2b00      	cmp	r3, #0
 800a558:	d118      	bne.n	800a58c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a55a:	4b74      	ldr	r3, [pc, #464]	; (800a72c <HAL_RCC_OscConfig+0x474>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a73      	ldr	r2, [pc, #460]	; (800a72c <HAL_RCC_OscConfig+0x474>)
 800a560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a566:	f7fd fa05 	bl	8007974 <HAL_GetTick>
 800a56a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a56c:	e008      	b.n	800a580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a56e:	f7fd fa01 	bl	8007974 <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d901      	bls.n	800a580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e10c      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a580:	4b6a      	ldr	r3, [pc, #424]	; (800a72c <HAL_RCC_OscConfig+0x474>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0f0      	beq.n	800a56e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d106      	bne.n	800a5a2 <HAL_RCC_OscConfig+0x2ea>
 800a594:	4b64      	ldr	r3, [pc, #400]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a598:	4a63      	ldr	r2, [pc, #396]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a59a:	f043 0301 	orr.w	r3, r3, #1
 800a59e:	6713      	str	r3, [r2, #112]	; 0x70
 800a5a0:	e01c      	b.n	800a5dc <HAL_RCC_OscConfig+0x324>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	2b05      	cmp	r3, #5
 800a5a8:	d10c      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x30c>
 800a5aa:	4b5f      	ldr	r3, [pc, #380]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ae:	4a5e      	ldr	r2, [pc, #376]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5b0:	f043 0304 	orr.w	r3, r3, #4
 800a5b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a5b6:	4b5c      	ldr	r3, [pc, #368]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ba:	4a5b      	ldr	r2, [pc, #364]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a5c2:	e00b      	b.n	800a5dc <HAL_RCC_OscConfig+0x324>
 800a5c4:	4b58      	ldr	r3, [pc, #352]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c8:	4a57      	ldr	r2, [pc, #348]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5ca:	f023 0301 	bic.w	r3, r3, #1
 800a5ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a5d0:	4b55      	ldr	r3, [pc, #340]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d4:	4a54      	ldr	r2, [pc, #336]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a5d6:	f023 0304 	bic.w	r3, r3, #4
 800a5da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d015      	beq.n	800a610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e4:	f7fd f9c6 	bl	8007974 <HAL_GetTick>
 800a5e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5ea:	e00a      	b.n	800a602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5ec:	f7fd f9c2 	bl	8007974 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d901      	bls.n	800a602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e0cb      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a602:	4b49      	ldr	r3, [pc, #292]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d0ee      	beq.n	800a5ec <HAL_RCC_OscConfig+0x334>
 800a60e:	e014      	b.n	800a63a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a610:	f7fd f9b0 	bl	8007974 <HAL_GetTick>
 800a614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a616:	e00a      	b.n	800a62e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a618:	f7fd f9ac 	bl	8007974 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	f241 3288 	movw	r2, #5000	; 0x1388
 800a626:	4293      	cmp	r3, r2
 800a628:	d901      	bls.n	800a62e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e0b5      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a62e:	4b3e      	ldr	r3, [pc, #248]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ee      	bne.n	800a618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d105      	bne.n	800a64c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a640:	4b39      	ldr	r3, [pc, #228]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	4a38      	ldr	r2, [pc, #224]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a64a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 80a1 	beq.w	800a798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a656:	4b34      	ldr	r3, [pc, #208]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 030c 	and.w	r3, r3, #12
 800a65e:	2b08      	cmp	r3, #8
 800a660:	d05c      	beq.n	800a71c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d141      	bne.n	800a6ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a66a:	4b31      	ldr	r3, [pc, #196]	; (800a730 <HAL_RCC_OscConfig+0x478>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a670:	f7fd f980 	bl	8007974 <HAL_GetTick>
 800a674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a676:	e008      	b.n	800a68a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a678:	f7fd f97c 	bl	8007974 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d901      	bls.n	800a68a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e087      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a68a:	4b27      	ldr	r3, [pc, #156]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f0      	bne.n	800a678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69da      	ldr	r2, [r3, #28]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	019b      	lsls	r3, r3, #6
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	085b      	lsrs	r3, r3, #1
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	041b      	lsls	r3, r3, #16
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	061b      	lsls	r3, r3, #24
 800a6ba:	491b      	ldr	r1, [pc, #108]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6c0:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <HAL_RCC_OscConfig+0x478>)
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6c6:	f7fd f955 	bl	8007974 <HAL_GetTick>
 800a6ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6cc:	e008      	b.n	800a6e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6ce:	f7fd f951 	bl	8007974 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e05c      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6e0:	4b11      	ldr	r3, [pc, #68]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0f0      	beq.n	800a6ce <HAL_RCC_OscConfig+0x416>
 800a6ec:	e054      	b.n	800a798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6ee:	4b10      	ldr	r3, [pc, #64]	; (800a730 <HAL_RCC_OscConfig+0x478>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f4:	f7fd f93e 	bl	8007974 <HAL_GetTick>
 800a6f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6fa:	e008      	b.n	800a70e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6fc:	f7fd f93a 	bl	8007974 <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b02      	cmp	r3, #2
 800a708:	d901      	bls.n	800a70e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e045      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a70e:	4b06      	ldr	r3, [pc, #24]	; (800a728 <HAL_RCC_OscConfig+0x470>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1f0      	bne.n	800a6fc <HAL_RCC_OscConfig+0x444>
 800a71a:	e03d      	b.n	800a798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d107      	bne.n	800a734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e038      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
 800a728:	40023800 	.word	0x40023800
 800a72c:	40007000 	.word	0x40007000
 800a730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a734:	4b1b      	ldr	r3, [pc, #108]	; (800a7a4 <HAL_RCC_OscConfig+0x4ec>)
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d028      	beq.n	800a794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d121      	bne.n	800a794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d11a      	bne.n	800a794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a764:	4013      	ands	r3, r2
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a76a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d111      	bne.n	800a794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	085b      	lsrs	r3, r3, #1
 800a77c:	3b01      	subs	r3, #1
 800a77e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a780:	429a      	cmp	r2, r3
 800a782:	d107      	bne.n	800a794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a790:	429a      	cmp	r2, r3
 800a792:	d001      	beq.n	800a798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e000      	b.n	800a79a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40023800 	.word	0x40023800

0800a7a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e0cc      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a7bc:	4b68      	ldr	r3, [pc, #416]	; (800a960 <HAL_RCC_ClockConfig+0x1b8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0307 	and.w	r3, r3, #7
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d90c      	bls.n	800a7e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7ca:	4b65      	ldr	r3, [pc, #404]	; (800a960 <HAL_RCC_ClockConfig+0x1b8>)
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7d2:	4b63      	ldr	r3, [pc, #396]	; (800a960 <HAL_RCC_ClockConfig+0x1b8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d001      	beq.n	800a7e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e0b8      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0302 	and.w	r3, r3, #2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d020      	beq.n	800a832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a7fc:	4b59      	ldr	r3, [pc, #356]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	4a58      	ldr	r2, [pc, #352]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0308 	and.w	r3, r3, #8
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a814:	4b53      	ldr	r3, [pc, #332]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	4a52      	ldr	r2, [pc, #328]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a81a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a81e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a820:	4b50      	ldr	r3, [pc, #320]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	494d      	ldr	r1, [pc, #308]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d044      	beq.n	800a8c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d107      	bne.n	800a856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a846:	4b47      	ldr	r3, [pc, #284]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d119      	bne.n	800a886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e07f      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d003      	beq.n	800a866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a862:	2b03      	cmp	r3, #3
 800a864:	d107      	bne.n	800a876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a866:	4b3f      	ldr	r3, [pc, #252]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e06f      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a876:	4b3b      	ldr	r3, [pc, #236]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e067      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a886:	4b37      	ldr	r3, [pc, #220]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f023 0203 	bic.w	r2, r3, #3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4934      	ldr	r1, [pc, #208]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a894:	4313      	orrs	r3, r2
 800a896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a898:	f7fd f86c 	bl	8007974 <HAL_GetTick>
 800a89c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a89e:	e00a      	b.n	800a8b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8a0:	f7fd f868 	bl	8007974 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d901      	bls.n	800a8b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e04f      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8b6:	4b2b      	ldr	r3, [pc, #172]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f003 020c 	and.w	r2, r3, #12
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d1eb      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a8c8:	4b25      	ldr	r3, [pc, #148]	; (800a960 <HAL_RCC_ClockConfig+0x1b8>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0307 	and.w	r3, r3, #7
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d20c      	bcs.n	800a8f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8d6:	4b22      	ldr	r3, [pc, #136]	; (800a960 <HAL_RCC_ClockConfig+0x1b8>)
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	b2d2      	uxtb	r2, r2
 800a8dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8de:	4b20      	ldr	r3, [pc, #128]	; (800a960 <HAL_RCC_ClockConfig+0x1b8>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0307 	and.w	r3, r3, #7
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d001      	beq.n	800a8f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e032      	b.n	800a956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d008      	beq.n	800a90e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8fc:	4b19      	ldr	r3, [pc, #100]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	4916      	ldr	r1, [pc, #88]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0308 	and.w	r3, r3, #8
 800a916:	2b00      	cmp	r3, #0
 800a918:	d009      	beq.n	800a92e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a91a:	4b12      	ldr	r3, [pc, #72]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	00db      	lsls	r3, r3, #3
 800a928:	490e      	ldr	r1, [pc, #56]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a92e:	f000 f821 	bl	800a974 <HAL_RCC_GetSysClockFreq>
 800a932:	4602      	mov	r2, r0
 800a934:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <HAL_RCC_ClockConfig+0x1bc>)
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	091b      	lsrs	r3, r3, #4
 800a93a:	f003 030f 	and.w	r3, r3, #15
 800a93e:	490a      	ldr	r1, [pc, #40]	; (800a968 <HAL_RCC_ClockConfig+0x1c0>)
 800a940:	5ccb      	ldrb	r3, [r1, r3]
 800a942:	fa22 f303 	lsr.w	r3, r2, r3
 800a946:	4a09      	ldr	r2, [pc, #36]	; (800a96c <HAL_RCC_ClockConfig+0x1c4>)
 800a948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <HAL_RCC_ClockConfig+0x1c8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fc ffcc 	bl	80078ec <HAL_InitTick>

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	40023c00 	.word	0x40023c00
 800a964:	40023800 	.word	0x40023800
 800a968:	0800fcb0 	.word	0x0800fcb0
 800a96c:	2000028c 	.word	0x2000028c
 800a970:	20000318 	.word	0x20000318

0800a974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a978:	b094      	sub	sp, #80	; 0x50
 800a97a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a97c:	2300      	movs	r3, #0
 800a97e:	647b      	str	r3, [r7, #68]	; 0x44
 800a980:	2300      	movs	r3, #0
 800a982:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a984:	2300      	movs	r3, #0
 800a986:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a98c:	4b79      	ldr	r3, [pc, #484]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x200>)
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f003 030c 	and.w	r3, r3, #12
 800a994:	2b08      	cmp	r3, #8
 800a996:	d00d      	beq.n	800a9b4 <HAL_RCC_GetSysClockFreq+0x40>
 800a998:	2b08      	cmp	r3, #8
 800a99a:	f200 80e1 	bhi.w	800ab60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <HAL_RCC_GetSysClockFreq+0x34>
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d003      	beq.n	800a9ae <HAL_RCC_GetSysClockFreq+0x3a>
 800a9a6:	e0db      	b.n	800ab60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a9a8:	4b73      	ldr	r3, [pc, #460]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x204>)
 800a9aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a9ac:	e0db      	b.n	800ab66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a9ae:	4b72      	ldr	r3, [pc, #456]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x204>)
 800a9b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a9b2:	e0d8      	b.n	800ab66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a9b4:	4b6f      	ldr	r3, [pc, #444]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x200>)
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a9be:	4b6d      	ldr	r3, [pc, #436]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x200>)
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d063      	beq.n	800aa92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9ca:	4b6a      	ldr	r3, [pc, #424]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x200>)
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	099b      	lsrs	r3, r3, #6
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9dc:	633b      	str	r3, [r7, #48]	; 0x30
 800a9de:	2300      	movs	r3, #0
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	462b      	mov	r3, r5
 800a9ea:	f04f 0000 	mov.w	r0, #0
 800a9ee:	f04f 0100 	mov.w	r1, #0
 800a9f2:	0159      	lsls	r1, r3, #5
 800a9f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a9f8:	0150      	lsls	r0, r2, #5
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4621      	mov	r1, r4
 800aa00:	1a51      	subs	r1, r2, r1
 800aa02:	6139      	str	r1, [r7, #16]
 800aa04:	4629      	mov	r1, r5
 800aa06:	eb63 0301 	sbc.w	r3, r3, r1
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa18:	4659      	mov	r1, fp
 800aa1a:	018b      	lsls	r3, r1, #6
 800aa1c:	4651      	mov	r1, sl
 800aa1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aa22:	4651      	mov	r1, sl
 800aa24:	018a      	lsls	r2, r1, #6
 800aa26:	4651      	mov	r1, sl
 800aa28:	ebb2 0801 	subs.w	r8, r2, r1
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	eb63 0901 	sbc.w	r9, r3, r1
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	f04f 0300 	mov.w	r3, #0
 800aa3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aa3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aa42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aa46:	4690      	mov	r8, r2
 800aa48:	4699      	mov	r9, r3
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	eb18 0303 	adds.w	r3, r8, r3
 800aa50:	60bb      	str	r3, [r7, #8]
 800aa52:	462b      	mov	r3, r5
 800aa54:	eb49 0303 	adc.w	r3, r9, r3
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	f04f 0200 	mov.w	r2, #0
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800aa66:	4629      	mov	r1, r5
 800aa68:	028b      	lsls	r3, r1, #10
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa70:	4621      	mov	r1, r4
 800aa72:	028a      	lsls	r2, r1, #10
 800aa74:	4610      	mov	r0, r2
 800aa76:	4619      	mov	r1, r3
 800aa78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa84:	f7f6 f900 	bl	8000c88 <__aeabi_uldivmod>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa90:	e058      	b.n	800ab44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa92:	4b38      	ldr	r3, [pc, #224]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x200>)
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	099b      	lsrs	r3, r3, #6
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aaa2:	623b      	str	r3, [r7, #32]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
 800aaa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	f04f 0000 	mov.w	r0, #0
 800aab4:	f04f 0100 	mov.w	r1, #0
 800aab8:	0159      	lsls	r1, r3, #5
 800aaba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aabe:	0150      	lsls	r0, r2, #5
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4641      	mov	r1, r8
 800aac6:	ebb2 0a01 	subs.w	sl, r2, r1
 800aaca:	4649      	mov	r1, r9
 800aacc:	eb63 0b01 	sbc.w	fp, r3, r1
 800aad0:	f04f 0200 	mov.w	r2, #0
 800aad4:	f04f 0300 	mov.w	r3, #0
 800aad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aadc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aae4:	ebb2 040a 	subs.w	r4, r2, sl
 800aae8:	eb63 050b 	sbc.w	r5, r3, fp
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	00eb      	lsls	r3, r5, #3
 800aaf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aafa:	00e2      	lsls	r2, r4, #3
 800aafc:	4614      	mov	r4, r2
 800aafe:	461d      	mov	r5, r3
 800ab00:	4643      	mov	r3, r8
 800ab02:	18e3      	adds	r3, r4, r3
 800ab04:	603b      	str	r3, [r7, #0]
 800ab06:	464b      	mov	r3, r9
 800ab08:	eb45 0303 	adc.w	r3, r5, r3
 800ab0c:	607b      	str	r3, [r7, #4]
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	028b      	lsls	r3, r1, #10
 800ab1e:	4621      	mov	r1, r4
 800ab20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab24:	4621      	mov	r1, r4
 800ab26:	028a      	lsls	r2, r1, #10
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab2e:	2200      	movs	r2, #0
 800ab30:	61bb      	str	r3, [r7, #24]
 800ab32:	61fa      	str	r2, [r7, #28]
 800ab34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab38:	f7f6 f8a6 	bl	8000c88 <__aeabi_uldivmod>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4613      	mov	r3, r2
 800ab42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x200>)
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	0c1b      	lsrs	r3, r3, #16
 800ab4a:	f003 0303 	and.w	r3, r3, #3
 800ab4e:	3301      	adds	r3, #1
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800ab54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ab5e:	e002      	b.n	800ab66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab60:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x204>)
 800ab62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ab64:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3750      	adds	r7, #80	; 0x50
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab72:	bf00      	nop
 800ab74:	40023800 	.word	0x40023800
 800ab78:	00f42400 	.word	0x00f42400

0800ab7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab80:	4b03      	ldr	r3, [pc, #12]	; (800ab90 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab82:	681b      	ldr	r3, [r3, #0]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	2000028c 	.word	0x2000028c

0800ab94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ab98:	f7ff fff0 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	0a9b      	lsrs	r3, r3, #10
 800aba4:	f003 0307 	and.w	r3, r3, #7
 800aba8:	4903      	ldr	r1, [pc, #12]	; (800abb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abaa:	5ccb      	ldrb	r3, [r1, r3]
 800abac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	40023800 	.word	0x40023800
 800abb8:	0800fcc0 	.word	0x0800fcc0

0800abbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800abc0:	f7ff ffdc 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800abc4:	4602      	mov	r2, r0
 800abc6:	4b05      	ldr	r3, [pc, #20]	; (800abdc <HAL_RCC_GetPCLK2Freq+0x20>)
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	0b5b      	lsrs	r3, r3, #13
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	4903      	ldr	r1, [pc, #12]	; (800abe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800abd2:	5ccb      	ldrb	r3, [r1, r3]
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abd8:	4618      	mov	r0, r3
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	40023800 	.word	0x40023800
 800abe0:	0800fcc0 	.word	0x0800fcc0

0800abe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e041      	b.n	800ac7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7f9 fefc 	bl	8004a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f000 fda4 	bl	800b770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d001      	beq.n	800ac9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e04e      	b.n	800ad3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68da      	ldr	r2, [r3, #12]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f042 0201 	orr.w	r2, r2, #1
 800acb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a23      	ldr	r2, [pc, #140]	; (800ad48 <HAL_TIM_Base_Start_IT+0xc4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d022      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc6:	d01d      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a1f      	ldr	r2, [pc, #124]	; (800ad4c <HAL_TIM_Base_Start_IT+0xc8>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d018      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a1e      	ldr	r2, [pc, #120]	; (800ad50 <HAL_TIM_Base_Start_IT+0xcc>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d013      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a1c      	ldr	r2, [pc, #112]	; (800ad54 <HAL_TIM_Base_Start_IT+0xd0>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d00e      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a1b      	ldr	r2, [pc, #108]	; (800ad58 <HAL_TIM_Base_Start_IT+0xd4>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d009      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a19      	ldr	r2, [pc, #100]	; (800ad5c <HAL_TIM_Base_Start_IT+0xd8>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d004      	beq.n	800ad04 <HAL_TIM_Base_Start_IT+0x80>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a18      	ldr	r2, [pc, #96]	; (800ad60 <HAL_TIM_Base_Start_IT+0xdc>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d111      	bne.n	800ad28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 0307 	and.w	r3, r3, #7
 800ad0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b06      	cmp	r3, #6
 800ad14:	d010      	beq.n	800ad38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0201 	orr.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad26:	e007      	b.n	800ad38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f042 0201 	orr.w	r2, r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40000400 	.word	0x40000400
 800ad50:	40000800 	.word	0x40000800
 800ad54:	40000c00 	.word	0x40000c00
 800ad58:	40010400 	.word	0x40010400
 800ad5c:	40014000 	.word	0x40014000
 800ad60:	40001800 	.word	0x40001800

0800ad64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e041      	b.n	800adfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7f9 ff14 	bl	8004bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2202      	movs	r2, #2
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4619      	mov	r1, r3
 800ada2:	4610      	mov	r0, r2
 800ada4:	f000 fce4 	bl	800b770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d109      	bne.n	800ae28 <HAL_TIM_PWM_Start+0x24>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	bf14      	ite	ne
 800ae20:	2301      	movne	r3, #1
 800ae22:	2300      	moveq	r3, #0
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	e022      	b.n	800ae6e <HAL_TIM_PWM_Start+0x6a>
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	d109      	bne.n	800ae42 <HAL_TIM_PWM_Start+0x3e>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	bf14      	ite	ne
 800ae3a:	2301      	movne	r3, #1
 800ae3c:	2300      	moveq	r3, #0
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	e015      	b.n	800ae6e <HAL_TIM_PWM_Start+0x6a>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d109      	bne.n	800ae5c <HAL_TIM_PWM_Start+0x58>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	bf14      	ite	ne
 800ae54:	2301      	movne	r3, #1
 800ae56:	2300      	moveq	r3, #0
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	e008      	b.n	800ae6e <HAL_TIM_PWM_Start+0x6a>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	bf14      	ite	ne
 800ae68:	2301      	movne	r3, #1
 800ae6a:	2300      	moveq	r3, #0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e07c      	b.n	800af70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <HAL_TIM_PWM_Start+0x82>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae84:	e013      	b.n	800aeae <HAL_TIM_PWM_Start+0xaa>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d104      	bne.n	800ae96 <HAL_TIM_PWM_Start+0x92>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae94:	e00b      	b.n	800aeae <HAL_TIM_PWM_Start+0xaa>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d104      	bne.n	800aea6 <HAL_TIM_PWM_Start+0xa2>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aea4:	e003      	b.n	800aeae <HAL_TIM_PWM_Start+0xaa>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 ff44 	bl	800bd44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a2d      	ldr	r2, [pc, #180]	; (800af78 <HAL_TIM_PWM_Start+0x174>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d004      	beq.n	800aed0 <HAL_TIM_PWM_Start+0xcc>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a2c      	ldr	r2, [pc, #176]	; (800af7c <HAL_TIM_PWM_Start+0x178>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d101      	bne.n	800aed4 <HAL_TIM_PWM_Start+0xd0>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e000      	b.n	800aed6 <HAL_TIM_PWM_Start+0xd2>
 800aed4:	2300      	movs	r3, #0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d007      	beq.n	800aeea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a22      	ldr	r2, [pc, #136]	; (800af78 <HAL_TIM_PWM_Start+0x174>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d022      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aefc:	d01d      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a1f      	ldr	r2, [pc, #124]	; (800af80 <HAL_TIM_PWM_Start+0x17c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d018      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1d      	ldr	r2, [pc, #116]	; (800af84 <HAL_TIM_PWM_Start+0x180>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d013      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a1c      	ldr	r2, [pc, #112]	; (800af88 <HAL_TIM_PWM_Start+0x184>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00e      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a16      	ldr	r2, [pc, #88]	; (800af7c <HAL_TIM_PWM_Start+0x178>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d009      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a18      	ldr	r2, [pc, #96]	; (800af8c <HAL_TIM_PWM_Start+0x188>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d004      	beq.n	800af3a <HAL_TIM_PWM_Start+0x136>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a16      	ldr	r2, [pc, #88]	; (800af90 <HAL_TIM_PWM_Start+0x18c>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d111      	bne.n	800af5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b06      	cmp	r3, #6
 800af4a:	d010      	beq.n	800af6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f042 0201 	orr.w	r2, r2, #1
 800af5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af5c:	e007      	b.n	800af6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f042 0201 	orr.w	r2, r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	40010000 	.word	0x40010000
 800af7c:	40010400 	.word	0x40010400
 800af80:	40000400 	.word	0x40000400
 800af84:	40000800 	.word	0x40000800
 800af88:	40000c00 	.word	0x40000c00
 800af8c:	40014000 	.word	0x40014000
 800af90:	40001800 	.word	0x40001800

0800af94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e097      	b.n	800b0d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7f9 fd61 	bl	8004a84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afd8:	f023 0307 	bic.w	r3, r3, #7
 800afdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3304      	adds	r3, #4
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f000 fbc1 	bl	800b770 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b016:	f023 0303 	bic.w	r3, r3, #3
 800b01a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	021b      	lsls	r3, r3, #8
 800b026:	4313      	orrs	r3, r2
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b034:	f023 030c 	bic.w	r3, r3, #12
 800b038:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	021b      	lsls	r3, r3, #8
 800b050:	4313      	orrs	r3, r2
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	011a      	lsls	r2, r3, #4
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	031b      	lsls	r3, r3, #12
 800b064:	4313      	orrs	r3, r2
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	4313      	orrs	r3, r2
 800b06a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b072:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b07a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	011b      	lsls	r3, r3, #4
 800b086:	4313      	orrs	r3, r2
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b100:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b108:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d110      	bne.n	800b132 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d102      	bne.n	800b11c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b116:	7b7b      	ldrb	r3, [r7, #13]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d001      	beq.n	800b120 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e069      	b.n	800b1f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b130:	e031      	b.n	800b196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b04      	cmp	r3, #4
 800b136:	d110      	bne.n	800b15a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d102      	bne.n	800b144 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b13e:	7b3b      	ldrb	r3, [r7, #12]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d001      	beq.n	800b148 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e055      	b.n	800b1f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b158:	e01d      	b.n	800b196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d108      	bne.n	800b172 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d105      	bne.n	800b172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b166:	7b7b      	ldrb	r3, [r7, #13]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d102      	bne.n	800b172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b16c:	7b3b      	ldrb	r3, [r7, #12]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d001      	beq.n	800b176 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e03e      	b.n	800b1f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2202      	movs	r2, #2
 800b182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <HAL_TIM_Encoder_Start+0xc4>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d008      	beq.n	800b1b4 <HAL_TIM_Encoder_Start+0xd4>
 800b1a2:	e00f      	b.n	800b1c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fdc9 	bl	800bd44 <TIM_CCxChannelCmd>
      break;
 800b1b2:	e016      	b.n	800b1e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fdc1 	bl	800bd44 <TIM_CCxChannelCmd>
      break;
 800b1c2:	e00e      	b.n	800b1e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fdb9 	bl	800bd44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	2104      	movs	r1, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fdb2 	bl	800bd44 <TIM_CCxChannelCmd>
      break;
 800b1e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0201 	orr.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d122      	bne.n	800b258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d11b      	bne.n	800b258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f06f 0202 	mvn.w	r2, #2
 800b228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	f003 0303 	and.w	r3, r3, #3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fa77 	bl	800b732 <HAL_TIM_IC_CaptureCallback>
 800b244:	e005      	b.n	800b252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa69 	bl	800b71e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fa7a 	bl	800b746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b04      	cmp	r3, #4
 800b264:	d122      	bne.n	800b2ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b04      	cmp	r3, #4
 800b272:	d11b      	bne.n	800b2ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0204 	mvn.w	r2, #4
 800b27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2202      	movs	r2, #2
 800b282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fa4d 	bl	800b732 <HAL_TIM_IC_CaptureCallback>
 800b298:	e005      	b.n	800b2a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa3f 	bl	800b71e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fa50 	bl	800b746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f003 0308 	and.w	r3, r3, #8
 800b2b6:	2b08      	cmp	r3, #8
 800b2b8:	d122      	bne.n	800b300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d11b      	bne.n	800b300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f06f 0208 	mvn.w	r2, #8
 800b2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2204      	movs	r2, #4
 800b2d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f003 0303 	and.w	r3, r3, #3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa23 	bl	800b732 <HAL_TIM_IC_CaptureCallback>
 800b2ec:	e005      	b.n	800b2fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa15 	bl	800b71e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fa26 	bl	800b746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	f003 0310 	and.w	r3, r3, #16
 800b30a:	2b10      	cmp	r3, #16
 800b30c:	d122      	bne.n	800b354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	f003 0310 	and.w	r3, r3, #16
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d11b      	bne.n	800b354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f06f 0210 	mvn.w	r2, #16
 800b324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2208      	movs	r2, #8
 800b32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f9f9 	bl	800b732 <HAL_TIM_IC_CaptureCallback>
 800b340:	e005      	b.n	800b34e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f9eb 	bl	800b71e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f9fc 	bl	800b746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d10e      	bne.n	800b380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d107      	bne.n	800b380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f06f 0201 	mvn.w	r2, #1
 800b378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7f6 ff82 	bl	8002284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b38a:	2b80      	cmp	r3, #128	; 0x80
 800b38c:	d10e      	bne.n	800b3ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b398:	2b80      	cmp	r3, #128	; 0x80
 800b39a:	d107      	bne.n	800b3ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fdca 	bl	800bf40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	d10e      	bne.n	800b3d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c4:	2b40      	cmp	r3, #64	; 0x40
 800b3c6:	d107      	bne.n	800b3d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f9c1 	bl	800b75a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	f003 0320 	and.w	r3, r3, #32
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d10e      	bne.n	800b404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d107      	bne.n	800b404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f06f 0220 	mvn.w	r2, #32
 800b3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fd94 	bl	800bf2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b422:	2b01      	cmp	r3, #1
 800b424:	d101      	bne.n	800b42a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b426:	2302      	movs	r3, #2
 800b428:	e0ae      	b.n	800b588 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b0c      	cmp	r3, #12
 800b436:	f200 809f 	bhi.w	800b578 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b43a:	a201      	add	r2, pc, #4	; (adr r2, 800b440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b475 	.word	0x0800b475
 800b444:	0800b579 	.word	0x0800b579
 800b448:	0800b579 	.word	0x0800b579
 800b44c:	0800b579 	.word	0x0800b579
 800b450:	0800b4b5 	.word	0x0800b4b5
 800b454:	0800b579 	.word	0x0800b579
 800b458:	0800b579 	.word	0x0800b579
 800b45c:	0800b579 	.word	0x0800b579
 800b460:	0800b4f7 	.word	0x0800b4f7
 800b464:	0800b579 	.word	0x0800b579
 800b468:	0800b579 	.word	0x0800b579
 800b46c:	0800b579 	.word	0x0800b579
 800b470:	0800b537 	.word	0x0800b537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68b9      	ldr	r1, [r7, #8]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fa18 	bl	800b8b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0208 	orr.w	r2, r2, #8
 800b48e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	699a      	ldr	r2, [r3, #24]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f022 0204 	bic.w	r2, r2, #4
 800b49e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6999      	ldr	r1, [r3, #24]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	619a      	str	r2, [r3, #24]
      break;
 800b4b2:	e064      	b.n	800b57e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68b9      	ldr	r1, [r7, #8]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 fa68 	bl	800b990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	699a      	ldr	r2, [r3, #24]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699a      	ldr	r2, [r3, #24]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6999      	ldr	r1, [r3, #24]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	021a      	lsls	r2, r3, #8
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	430a      	orrs	r2, r1
 800b4f2:	619a      	str	r2, [r3, #24]
      break;
 800b4f4:	e043      	b.n	800b57e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68b9      	ldr	r1, [r7, #8]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 fabd 	bl	800ba7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69da      	ldr	r2, [r3, #28]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f042 0208 	orr.w	r2, r2, #8
 800b510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69da      	ldr	r2, [r3, #28]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 0204 	bic.w	r2, r2, #4
 800b520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69d9      	ldr	r1, [r3, #28]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	691a      	ldr	r2, [r3, #16]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	430a      	orrs	r2, r1
 800b532:	61da      	str	r2, [r3, #28]
      break;
 800b534:	e023      	b.n	800b57e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fb11 	bl	800bb64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69da      	ldr	r2, [r3, #28]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	69da      	ldr	r2, [r3, #28]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	69d9      	ldr	r1, [r3, #28]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	021a      	lsls	r2, r3, #8
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	61da      	str	r2, [r3, #28]
      break;
 800b576:	e002      	b.n	800b57e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	75fb      	strb	r3, [r7, #23]
      break;
 800b57c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b586:	7dfb      	ldrb	r3, [r7, #23]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d101      	bne.n	800b5ac <HAL_TIM_ConfigClockSource+0x1c>
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	e0b4      	b.n	800b716 <HAL_TIM_ConfigClockSource+0x186>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b5ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5e4:	d03e      	beq.n	800b664 <HAL_TIM_ConfigClockSource+0xd4>
 800b5e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ea:	f200 8087 	bhi.w	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f2:	f000 8086 	beq.w	800b702 <HAL_TIM_ConfigClockSource+0x172>
 800b5f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5fa:	d87f      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b5fc:	2b70      	cmp	r3, #112	; 0x70
 800b5fe:	d01a      	beq.n	800b636 <HAL_TIM_ConfigClockSource+0xa6>
 800b600:	2b70      	cmp	r3, #112	; 0x70
 800b602:	d87b      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b604:	2b60      	cmp	r3, #96	; 0x60
 800b606:	d050      	beq.n	800b6aa <HAL_TIM_ConfigClockSource+0x11a>
 800b608:	2b60      	cmp	r3, #96	; 0x60
 800b60a:	d877      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b60c:	2b50      	cmp	r3, #80	; 0x50
 800b60e:	d03c      	beq.n	800b68a <HAL_TIM_ConfigClockSource+0xfa>
 800b610:	2b50      	cmp	r3, #80	; 0x50
 800b612:	d873      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b614:	2b40      	cmp	r3, #64	; 0x40
 800b616:	d058      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x13a>
 800b618:	2b40      	cmp	r3, #64	; 0x40
 800b61a:	d86f      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b61c:	2b30      	cmp	r3, #48	; 0x30
 800b61e:	d064      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x15a>
 800b620:	2b30      	cmp	r3, #48	; 0x30
 800b622:	d86b      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b624:	2b20      	cmp	r3, #32
 800b626:	d060      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x15a>
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d867      	bhi.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d05c      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x15a>
 800b630:	2b10      	cmp	r3, #16
 800b632:	d05a      	beq.n	800b6ea <HAL_TIM_ConfigClockSource+0x15a>
 800b634:	e062      	b.n	800b6fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6818      	ldr	r0, [r3, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	6899      	ldr	r1, [r3, #8]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	f000 fb5d 	bl	800bd04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	609a      	str	r2, [r3, #8]
      break;
 800b662:	e04f      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	6899      	ldr	r1, [r3, #8]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	f000 fb46 	bl	800bd04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b686:	609a      	str	r2, [r3, #8]
      break;
 800b688:	e03c      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6859      	ldr	r1, [r3, #4]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	461a      	mov	r2, r3
 800b698:	f000 faba 	bl	800bc10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2150      	movs	r1, #80	; 0x50
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 fb13 	bl	800bcce <TIM_ITRx_SetConfig>
      break;
 800b6a8:	e02c      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	6859      	ldr	r1, [r3, #4]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f000 fad9 	bl	800bc6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2160      	movs	r1, #96	; 0x60
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 fb03 	bl	800bcce <TIM_ITRx_SetConfig>
      break;
 800b6c8:	e01c      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6859      	ldr	r1, [r3, #4]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f000 fa9a 	bl	800bc10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2140      	movs	r1, #64	; 0x40
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 faf3 	bl	800bcce <TIM_ITRx_SetConfig>
      break;
 800b6e8:	e00c      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	f000 faea 	bl	800bcce <TIM_ITRx_SetConfig>
      break;
 800b6fa:	e003      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b700:	e000      	b.n	800b704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b714:	7bfb      	ldrb	r3, [r7, #15]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b726:	bf00      	nop
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b746:	b480      	push	{r7}
 800b748:	b083      	sub	sp, #12
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b74e:	bf00      	nop
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b762:	bf00      	nop
 800b764:	370c      	adds	r7, #12
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
	...

0800b770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a40      	ldr	r2, [pc, #256]	; (800b884 <TIM_Base_SetConfig+0x114>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d013      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b78e:	d00f      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a3d      	ldr	r2, [pc, #244]	; (800b888 <TIM_Base_SetConfig+0x118>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00b      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a3c      	ldr	r2, [pc, #240]	; (800b88c <TIM_Base_SetConfig+0x11c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d007      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a3b      	ldr	r2, [pc, #236]	; (800b890 <TIM_Base_SetConfig+0x120>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_Base_SetConfig+0x40>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a3a      	ldr	r2, [pc, #232]	; (800b894 <TIM_Base_SetConfig+0x124>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d108      	bne.n	800b7c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a2f      	ldr	r2, [pc, #188]	; (800b884 <TIM_Base_SetConfig+0x114>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d02b      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d0:	d027      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <TIM_Base_SetConfig+0x118>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d023      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a2b      	ldr	r2, [pc, #172]	; (800b88c <TIM_Base_SetConfig+0x11c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d01f      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <TIM_Base_SetConfig+0x120>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d01b      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a29      	ldr	r2, [pc, #164]	; (800b894 <TIM_Base_SetConfig+0x124>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d017      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a28      	ldr	r2, [pc, #160]	; (800b898 <TIM_Base_SetConfig+0x128>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d013      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a27      	ldr	r2, [pc, #156]	; (800b89c <TIM_Base_SetConfig+0x12c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d00f      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a26      	ldr	r2, [pc, #152]	; (800b8a0 <TIM_Base_SetConfig+0x130>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00b      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a25      	ldr	r2, [pc, #148]	; (800b8a4 <TIM_Base_SetConfig+0x134>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d007      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a24      	ldr	r2, [pc, #144]	; (800b8a8 <TIM_Base_SetConfig+0x138>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d003      	beq.n	800b822 <TIM_Base_SetConfig+0xb2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a23      	ldr	r2, [pc, #140]	; (800b8ac <TIM_Base_SetConfig+0x13c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d108      	bne.n	800b834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a0a      	ldr	r2, [pc, #40]	; (800b884 <TIM_Base_SetConfig+0x114>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d003      	beq.n	800b868 <TIM_Base_SetConfig+0xf8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a0c      	ldr	r2, [pc, #48]	; (800b894 <TIM_Base_SetConfig+0x124>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d103      	bne.n	800b870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	691a      	ldr	r2, [r3, #16]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	615a      	str	r2, [r3, #20]
}
 800b876:	bf00      	nop
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40010000 	.word	0x40010000
 800b888:	40000400 	.word	0x40000400
 800b88c:	40000800 	.word	0x40000800
 800b890:	40000c00 	.word	0x40000c00
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40014400 	.word	0x40014400
 800b8a0:	40014800 	.word	0x40014800
 800b8a4:	40001800 	.word	0x40001800
 800b8a8:	40001c00 	.word	0x40001c00
 800b8ac:	40002000 	.word	0x40002000

0800b8b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f023 0201 	bic.w	r2, r3, #1
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f023 0302 	bic.w	r3, r3, #2
 800b8f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	4313      	orrs	r3, r2
 800b902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a20      	ldr	r2, [pc, #128]	; (800b988 <TIM_OC1_SetConfig+0xd8>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d003      	beq.n	800b914 <TIM_OC1_SetConfig+0x64>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a1f      	ldr	r2, [pc, #124]	; (800b98c <TIM_OC1_SetConfig+0xdc>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d10c      	bne.n	800b92e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f023 0308 	bic.w	r3, r3, #8
 800b91a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	4313      	orrs	r3, r2
 800b924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f023 0304 	bic.w	r3, r3, #4
 800b92c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4a15      	ldr	r2, [pc, #84]	; (800b988 <TIM_OC1_SetConfig+0xd8>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d003      	beq.n	800b93e <TIM_OC1_SetConfig+0x8e>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4a14      	ldr	r2, [pc, #80]	; (800b98c <TIM_OC1_SetConfig+0xdc>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d111      	bne.n	800b962 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b94c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	4313      	orrs	r3, r2
 800b956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	4313      	orrs	r3, r2
 800b960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	621a      	str	r2, [r3, #32]
}
 800b97c:	bf00      	nop
 800b97e:	371c      	adds	r7, #28
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	40010000 	.word	0x40010000
 800b98c:	40010400 	.word	0x40010400

0800b990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b990:	b480      	push	{r7}
 800b992:	b087      	sub	sp, #28
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	f023 0210 	bic.w	r2, r3, #16
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a1b      	ldr	r3, [r3, #32]
 800b9aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	021b      	lsls	r3, r3, #8
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f023 0320 	bic.w	r3, r3, #32
 800b9da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	011b      	lsls	r3, r3, #4
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a22      	ldr	r2, [pc, #136]	; (800ba74 <TIM_OC2_SetConfig+0xe4>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_OC2_SetConfig+0x68>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a21      	ldr	r2, [pc, #132]	; (800ba78 <TIM_OC2_SetConfig+0xe8>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d10d      	bne.n	800ba14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	011b      	lsls	r3, r3, #4
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a17      	ldr	r2, [pc, #92]	; (800ba74 <TIM_OC2_SetConfig+0xe4>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d003      	beq.n	800ba24 <TIM_OC2_SetConfig+0x94>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a16      	ldr	r2, [pc, #88]	; (800ba78 <TIM_OC2_SetConfig+0xe8>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d113      	bne.n	800ba4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	621a      	str	r2, [r3, #32]
}
 800ba66:	bf00      	nop
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	40010000 	.word	0x40010000
 800ba78:	40010400 	.word	0x40010400

0800ba7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f023 0303 	bic.w	r3, r3, #3
 800bab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	021b      	lsls	r3, r3, #8
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a21      	ldr	r2, [pc, #132]	; (800bb5c <TIM_OC3_SetConfig+0xe0>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d003      	beq.n	800bae2 <TIM_OC3_SetConfig+0x66>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a20      	ldr	r2, [pc, #128]	; (800bb60 <TIM_OC3_SetConfig+0xe4>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d10d      	bne.n	800bafe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	697a      	ldr	r2, [r7, #20]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bafc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a16      	ldr	r2, [pc, #88]	; (800bb5c <TIM_OC3_SetConfig+0xe0>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d003      	beq.n	800bb0e <TIM_OC3_SetConfig+0x92>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a15      	ldr	r2, [pc, #84]	; (800bb60 <TIM_OC3_SetConfig+0xe4>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d113      	bne.n	800bb36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	685a      	ldr	r2, [r3, #4]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	621a      	str	r2, [r3, #32]
}
 800bb50:	bf00      	nop
 800bb52:	371c      	adds	r7, #28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	40010000 	.word	0x40010000
 800bb60:	40010400 	.word	0x40010400

0800bb64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	031b      	lsls	r3, r3, #12
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a12      	ldr	r2, [pc, #72]	; (800bc08 <TIM_OC4_SetConfig+0xa4>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d003      	beq.n	800bbcc <TIM_OC4_SetConfig+0x68>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a11      	ldr	r2, [pc, #68]	; (800bc0c <TIM_OC4_SetConfig+0xa8>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d109      	bne.n	800bbe0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	019b      	lsls	r3, r3, #6
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	621a      	str	r2, [r3, #32]
}
 800bbfa:	bf00      	nop
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	40010000 	.word	0x40010000
 800bc0c:	40010400 	.word	0x40010400

0800bc10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	f023 0201 	bic.w	r2, r3, #1
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f023 030a 	bic.w	r3, r3, #10
 800bc4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	621a      	str	r2, [r3, #32]
}
 800bc62:	bf00      	nop
 800bc64:	371c      	adds	r7, #28
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b087      	sub	sp, #28
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	60f8      	str	r0, [r7, #12]
 800bc76:	60b9      	str	r1, [r7, #8]
 800bc78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	f023 0210 	bic.w	r2, r3, #16
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	031b      	lsls	r3, r3, #12
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	011b      	lsls	r3, r3, #4
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	621a      	str	r2, [r3, #32]
}
 800bcc2:	bf00      	nop
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b085      	sub	sp, #20
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f043 0307 	orr.w	r3, r3, #7
 800bcf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	609a      	str	r2, [r3, #8]
}
 800bcf8:	bf00      	nop
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	021a      	lsls	r2, r3, #8
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	431a      	orrs	r2, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	609a      	str	r2, [r3, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	371c      	adds	r7, #28
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f003 031f 	and.w	r3, r3, #31
 800bd56:	2201      	movs	r2, #1
 800bd58:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a1a      	ldr	r2, [r3, #32]
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	43db      	mvns	r3, r3
 800bd66:	401a      	ands	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6a1a      	ldr	r2, [r3, #32]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	fa01 f303 	lsl.w	r3, r1, r3
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	621a      	str	r2, [r3, #32]
}
 800bd82:	bf00      	nop
 800bd84:	371c      	adds	r7, #28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
	...

0800bd90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d101      	bne.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bda4:	2302      	movs	r3, #2
 800bda6:	e05a      	b.n	800be5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a21      	ldr	r2, [pc, #132]	; (800be6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d022      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf4:	d01d      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a1d      	ldr	r2, [pc, #116]	; (800be70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d018      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a1b      	ldr	r2, [pc, #108]	; (800be74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d013      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a1a      	ldr	r2, [pc, #104]	; (800be78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d00e      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a18      	ldr	r2, [pc, #96]	; (800be7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d009      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a17      	ldr	r2, [pc, #92]	; (800be80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d004      	beq.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a15      	ldr	r2, [pc, #84]	; (800be84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d10c      	bne.n	800be4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	4313      	orrs	r3, r2
 800be42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	40010000 	.word	0x40010000
 800be70:	40000400 	.word	0x40000400
 800be74:	40000800 	.word	0x40000800
 800be78:	40000c00 	.word	0x40000c00
 800be7c:	40010400 	.word	0x40010400
 800be80:	40014000 	.word	0x40014000
 800be84:	40001800 	.word	0x40001800

0800be88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be92:	2300      	movs	r3, #0
 800be94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d101      	bne.n	800bea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bea0:	2302      	movs	r3, #2
 800bea2:	e03d      	b.n	800bf20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	4313      	orrs	r3, r2
 800bef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	4313      	orrs	r3, r2
 800befe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d101      	bne.n	800bf66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e03f      	b.n	800bfe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7fb fba8 	bl	80076d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2224      	movs	r2, #36	; 0x24
 800bf84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68da      	ldr	r2, [r3, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f829 	bl	800bff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	691a      	ldr	r2, [r3, #16]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	695a      	ldr	r2, [r3, #20]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bff4:	b0c0      	sub	sp, #256	; 0x100
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c00c:	68d9      	ldr	r1, [r3, #12]
 800c00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	ea40 0301 	orr.w	r3, r0, r1
 800c018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	431a      	orrs	r2, r3
 800c028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	431a      	orrs	r2, r3
 800c030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	4313      	orrs	r3, r2
 800c038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c048:	f021 010c 	bic.w	r1, r1, #12
 800c04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c056:	430b      	orrs	r3, r1
 800c058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c06a:	6999      	ldr	r1, [r3, #24]
 800c06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	ea40 0301 	orr.w	r3, r0, r1
 800c076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	4b8f      	ldr	r3, [pc, #572]	; (800c2bc <UART_SetConfig+0x2cc>)
 800c080:	429a      	cmp	r2, r3
 800c082:	d005      	beq.n	800c090 <UART_SetConfig+0xa0>
 800c084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	4b8d      	ldr	r3, [pc, #564]	; (800c2c0 <UART_SetConfig+0x2d0>)
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d104      	bne.n	800c09a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c090:	f7fe fd94 	bl	800abbc <HAL_RCC_GetPCLK2Freq>
 800c094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c098:	e003      	b.n	800c0a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c09a:	f7fe fd7b 	bl	800ab94 <HAL_RCC_GetPCLK1Freq>
 800c09e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0ac:	f040 810c 	bne.w	800c2c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c0b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c0be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c0c2:	4622      	mov	r2, r4
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	1891      	adds	r1, r2, r2
 800c0c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800c0ca:	415b      	adcs	r3, r3
 800c0cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	eb12 0801 	adds.w	r8, r2, r1
 800c0d8:	4629      	mov	r1, r5
 800c0da:	eb43 0901 	adc.w	r9, r3, r1
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	f04f 0300 	mov.w	r3, #0
 800c0e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c0ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c0ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c0f2:	4690      	mov	r8, r2
 800c0f4:	4699      	mov	r9, r3
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	eb18 0303 	adds.w	r3, r8, r3
 800c0fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c100:	462b      	mov	r3, r5
 800c102:	eb49 0303 	adc.w	r3, r9, r3
 800c106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c11a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c11e:	460b      	mov	r3, r1
 800c120:	18db      	adds	r3, r3, r3
 800c122:	653b      	str	r3, [r7, #80]	; 0x50
 800c124:	4613      	mov	r3, r2
 800c126:	eb42 0303 	adc.w	r3, r2, r3
 800c12a:	657b      	str	r3, [r7, #84]	; 0x54
 800c12c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c134:	f7f4 fda8 	bl	8000c88 <__aeabi_uldivmod>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4b61      	ldr	r3, [pc, #388]	; (800c2c4 <UART_SetConfig+0x2d4>)
 800c13e:	fba3 2302 	umull	r2, r3, r3, r2
 800c142:	095b      	lsrs	r3, r3, #5
 800c144:	011c      	lsls	r4, r3, #4
 800c146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c158:	4642      	mov	r2, r8
 800c15a:	464b      	mov	r3, r9
 800c15c:	1891      	adds	r1, r2, r2
 800c15e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c160:	415b      	adcs	r3, r3
 800c162:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c168:	4641      	mov	r1, r8
 800c16a:	eb12 0a01 	adds.w	sl, r2, r1
 800c16e:	4649      	mov	r1, r9
 800c170:	eb43 0b01 	adc.w	fp, r3, r1
 800c174:	f04f 0200 	mov.w	r2, #0
 800c178:	f04f 0300 	mov.w	r3, #0
 800c17c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c188:	4692      	mov	sl, r2
 800c18a:	469b      	mov	fp, r3
 800c18c:	4643      	mov	r3, r8
 800c18e:	eb1a 0303 	adds.w	r3, sl, r3
 800c192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c196:	464b      	mov	r3, r9
 800c198:	eb4b 0303 	adc.w	r3, fp, r3
 800c19c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c1b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	18db      	adds	r3, r3, r3
 800c1b8:	643b      	str	r3, [r7, #64]	; 0x40
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	eb42 0303 	adc.w	r3, r2, r3
 800c1c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c1c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c1c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c1ca:	f7f4 fd5d 	bl	8000c88 <__aeabi_uldivmod>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4b3b      	ldr	r3, [pc, #236]	; (800c2c4 <UART_SetConfig+0x2d4>)
 800c1d6:	fba3 2301 	umull	r2, r3, r3, r1
 800c1da:	095b      	lsrs	r3, r3, #5
 800c1dc:	2264      	movs	r2, #100	; 0x64
 800c1de:	fb02 f303 	mul.w	r3, r2, r3
 800c1e2:	1acb      	subs	r3, r1, r3
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c1ea:	4b36      	ldr	r3, [pc, #216]	; (800c2c4 <UART_SetConfig+0x2d4>)
 800c1ec:	fba3 2302 	umull	r2, r3, r3, r2
 800c1f0:	095b      	lsrs	r3, r3, #5
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c1f8:	441c      	add	r4, r3
 800c1fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c20c:	4642      	mov	r2, r8
 800c20e:	464b      	mov	r3, r9
 800c210:	1891      	adds	r1, r2, r2
 800c212:	63b9      	str	r1, [r7, #56]	; 0x38
 800c214:	415b      	adcs	r3, r3
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c21c:	4641      	mov	r1, r8
 800c21e:	1851      	adds	r1, r2, r1
 800c220:	6339      	str	r1, [r7, #48]	; 0x30
 800c222:	4649      	mov	r1, r9
 800c224:	414b      	adcs	r3, r1
 800c226:	637b      	str	r3, [r7, #52]	; 0x34
 800c228:	f04f 0200 	mov.w	r2, #0
 800c22c:	f04f 0300 	mov.w	r3, #0
 800c230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c234:	4659      	mov	r1, fp
 800c236:	00cb      	lsls	r3, r1, #3
 800c238:	4651      	mov	r1, sl
 800c23a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c23e:	4651      	mov	r1, sl
 800c240:	00ca      	lsls	r2, r1, #3
 800c242:	4610      	mov	r0, r2
 800c244:	4619      	mov	r1, r3
 800c246:	4603      	mov	r3, r0
 800c248:	4642      	mov	r2, r8
 800c24a:	189b      	adds	r3, r3, r2
 800c24c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c250:	464b      	mov	r3, r9
 800c252:	460a      	mov	r2, r1
 800c254:	eb42 0303 	adc.w	r3, r2, r3
 800c258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c26c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c270:	460b      	mov	r3, r1
 800c272:	18db      	adds	r3, r3, r3
 800c274:	62bb      	str	r3, [r7, #40]	; 0x28
 800c276:	4613      	mov	r3, r2
 800c278:	eb42 0303 	adc.w	r3, r2, r3
 800c27c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c27e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c286:	f7f4 fcff 	bl	8000c88 <__aeabi_uldivmod>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <UART_SetConfig+0x2d4>)
 800c290:	fba3 1302 	umull	r1, r3, r3, r2
 800c294:	095b      	lsrs	r3, r3, #5
 800c296:	2164      	movs	r1, #100	; 0x64
 800c298:	fb01 f303 	mul.w	r3, r1, r3
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	3332      	adds	r3, #50	; 0x32
 800c2a2:	4a08      	ldr	r2, [pc, #32]	; (800c2c4 <UART_SetConfig+0x2d4>)
 800c2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a8:	095b      	lsrs	r3, r3, #5
 800c2aa:	f003 0207 	and.w	r2, r3, #7
 800c2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4422      	add	r2, r4
 800c2b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c2b8:	e105      	b.n	800c4c6 <UART_SetConfig+0x4d6>
 800c2ba:	bf00      	nop
 800c2bc:	40011000 	.word	0x40011000
 800c2c0:	40011400 	.word	0x40011400
 800c2c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c2d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c2da:	4642      	mov	r2, r8
 800c2dc:	464b      	mov	r3, r9
 800c2de:	1891      	adds	r1, r2, r2
 800c2e0:	6239      	str	r1, [r7, #32]
 800c2e2:	415b      	adcs	r3, r3
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c2ea:	4641      	mov	r1, r8
 800c2ec:	1854      	adds	r4, r2, r1
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	eb43 0501 	adc.w	r5, r3, r1
 800c2f4:	f04f 0200 	mov.w	r2, #0
 800c2f8:	f04f 0300 	mov.w	r3, #0
 800c2fc:	00eb      	lsls	r3, r5, #3
 800c2fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c302:	00e2      	lsls	r2, r4, #3
 800c304:	4614      	mov	r4, r2
 800c306:	461d      	mov	r5, r3
 800c308:	4643      	mov	r3, r8
 800c30a:	18e3      	adds	r3, r4, r3
 800c30c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c310:	464b      	mov	r3, r9
 800c312:	eb45 0303 	adc.w	r3, r5, r3
 800c316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c32a:	f04f 0200 	mov.w	r2, #0
 800c32e:	f04f 0300 	mov.w	r3, #0
 800c332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c336:	4629      	mov	r1, r5
 800c338:	008b      	lsls	r3, r1, #2
 800c33a:	4621      	mov	r1, r4
 800c33c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c340:	4621      	mov	r1, r4
 800c342:	008a      	lsls	r2, r1, #2
 800c344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c348:	f7f4 fc9e 	bl	8000c88 <__aeabi_uldivmod>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	4b60      	ldr	r3, [pc, #384]	; (800c4d4 <UART_SetConfig+0x4e4>)
 800c352:	fba3 2302 	umull	r2, r3, r3, r2
 800c356:	095b      	lsrs	r3, r3, #5
 800c358:	011c      	lsls	r4, r3, #4
 800c35a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c35e:	2200      	movs	r2, #0
 800c360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c36c:	4642      	mov	r2, r8
 800c36e:	464b      	mov	r3, r9
 800c370:	1891      	adds	r1, r2, r2
 800c372:	61b9      	str	r1, [r7, #24]
 800c374:	415b      	adcs	r3, r3
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c37c:	4641      	mov	r1, r8
 800c37e:	1851      	adds	r1, r2, r1
 800c380:	6139      	str	r1, [r7, #16]
 800c382:	4649      	mov	r1, r9
 800c384:	414b      	adcs	r3, r1
 800c386:	617b      	str	r3, [r7, #20]
 800c388:	f04f 0200 	mov.w	r2, #0
 800c38c:	f04f 0300 	mov.w	r3, #0
 800c390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c394:	4659      	mov	r1, fp
 800c396:	00cb      	lsls	r3, r1, #3
 800c398:	4651      	mov	r1, sl
 800c39a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c39e:	4651      	mov	r1, sl
 800c3a0:	00ca      	lsls	r2, r1, #3
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	4642      	mov	r2, r8
 800c3aa:	189b      	adds	r3, r3, r2
 800c3ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3b0:	464b      	mov	r3, r9
 800c3b2:	460a      	mov	r2, r1
 800c3b4:	eb42 0303 	adc.w	r3, r2, r3
 800c3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c3c8:	f04f 0200 	mov.w	r2, #0
 800c3cc:	f04f 0300 	mov.w	r3, #0
 800c3d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	008b      	lsls	r3, r1, #2
 800c3d8:	4641      	mov	r1, r8
 800c3da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3de:	4641      	mov	r1, r8
 800c3e0:	008a      	lsls	r2, r1, #2
 800c3e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c3e6:	f7f4 fc4f 	bl	8000c88 <__aeabi_uldivmod>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4b39      	ldr	r3, [pc, #228]	; (800c4d4 <UART_SetConfig+0x4e4>)
 800c3f0:	fba3 1302 	umull	r1, r3, r3, r2
 800c3f4:	095b      	lsrs	r3, r3, #5
 800c3f6:	2164      	movs	r1, #100	; 0x64
 800c3f8:	fb01 f303 	mul.w	r3, r1, r3
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	3332      	adds	r3, #50	; 0x32
 800c402:	4a34      	ldr	r2, [pc, #208]	; (800c4d4 <UART_SetConfig+0x4e4>)
 800c404:	fba2 2303 	umull	r2, r3, r2, r3
 800c408:	095b      	lsrs	r3, r3, #5
 800c40a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c40e:	441c      	add	r4, r3
 800c410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c414:	2200      	movs	r2, #0
 800c416:	673b      	str	r3, [r7, #112]	; 0x70
 800c418:	677a      	str	r2, [r7, #116]	; 0x74
 800c41a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c41e:	4642      	mov	r2, r8
 800c420:	464b      	mov	r3, r9
 800c422:	1891      	adds	r1, r2, r2
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	415b      	adcs	r3, r3
 800c428:	60fb      	str	r3, [r7, #12]
 800c42a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c42e:	4641      	mov	r1, r8
 800c430:	1851      	adds	r1, r2, r1
 800c432:	6039      	str	r1, [r7, #0]
 800c434:	4649      	mov	r1, r9
 800c436:	414b      	adcs	r3, r1
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	f04f 0200 	mov.w	r2, #0
 800c43e:	f04f 0300 	mov.w	r3, #0
 800c442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c446:	4659      	mov	r1, fp
 800c448:	00cb      	lsls	r3, r1, #3
 800c44a:	4651      	mov	r1, sl
 800c44c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c450:	4651      	mov	r1, sl
 800c452:	00ca      	lsls	r2, r1, #3
 800c454:	4610      	mov	r0, r2
 800c456:	4619      	mov	r1, r3
 800c458:	4603      	mov	r3, r0
 800c45a:	4642      	mov	r2, r8
 800c45c:	189b      	adds	r3, r3, r2
 800c45e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c460:	464b      	mov	r3, r9
 800c462:	460a      	mov	r2, r1
 800c464:	eb42 0303 	adc.w	r3, r2, r3
 800c468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c46a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	663b      	str	r3, [r7, #96]	; 0x60
 800c474:	667a      	str	r2, [r7, #100]	; 0x64
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	f04f 0300 	mov.w	r3, #0
 800c47e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c482:	4649      	mov	r1, r9
 800c484:	008b      	lsls	r3, r1, #2
 800c486:	4641      	mov	r1, r8
 800c488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c48c:	4641      	mov	r1, r8
 800c48e:	008a      	lsls	r2, r1, #2
 800c490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c494:	f7f4 fbf8 	bl	8000c88 <__aeabi_uldivmod>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <UART_SetConfig+0x4e4>)
 800c49e:	fba3 1302 	umull	r1, r3, r3, r2
 800c4a2:	095b      	lsrs	r3, r3, #5
 800c4a4:	2164      	movs	r1, #100	; 0x64
 800c4a6:	fb01 f303 	mul.w	r3, r1, r3
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	011b      	lsls	r3, r3, #4
 800c4ae:	3332      	adds	r3, #50	; 0x32
 800c4b0:	4a08      	ldr	r2, [pc, #32]	; (800c4d4 <UART_SetConfig+0x4e4>)
 800c4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b6:	095b      	lsrs	r3, r3, #5
 800c4b8:	f003 020f 	and.w	r2, r3, #15
 800c4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4422      	add	r2, r4
 800c4c4:	609a      	str	r2, [r3, #8]
}
 800c4c6:	bf00      	nop
 800c4c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d2:	bf00      	nop
 800c4d4:	51eb851f 	.word	0x51eb851f

0800c4d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4d8:	b084      	sub	sp, #16
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b084      	sub	sp, #16
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	f107 001c 	add.w	r0, r7, #28
 800c4e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d122      	bne.n	800c536 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d105      	bne.n	800c52a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 faa2 	bl	800ca74 <USB_CoreReset>
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
 800c534:	e01a      	b.n	800c56c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fa96 	bl	800ca74 <USB_CoreReset>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d106      	bne.n	800c560 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	639a      	str	r2, [r3, #56]	; 0x38
 800c55e:	e005      	b.n	800c56c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d10b      	bne.n	800c58a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	f043 0206 	orr.w	r2, r3, #6
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f043 0220 	orr.w	r2, r3, #32
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c596:	b004      	add	sp, #16
 800c598:	4770      	bx	lr

0800c59a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b083      	sub	sp, #12
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f023 0201 	bic.w	r2, r3, #1
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c5d8:	78fb      	ldrb	r3, [r7, #3]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d115      	bne.n	800c60a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	f7fb f9ce 	bl	800798c <HAL_Delay>
      ms++;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa2e 	bl	800ca58 <USB_GetMode>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d01e      	beq.n	800c640 <USB_SetCurrentMode+0x84>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b31      	cmp	r3, #49	; 0x31
 800c606:	d9f0      	bls.n	800c5ea <USB_SetCurrentMode+0x2e>
 800c608:	e01a      	b.n	800c640 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c60a:	78fb      	ldrb	r3, [r7, #3]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d115      	bne.n	800c63c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c61c:	2001      	movs	r0, #1
 800c61e:	f7fb f9b5 	bl	800798c <HAL_Delay>
      ms++;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3301      	adds	r3, #1
 800c626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa15 	bl	800ca58 <USB_GetMode>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d005      	beq.n	800c640 <USB_SetCurrentMode+0x84>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b31      	cmp	r3, #49	; 0x31
 800c638:	d9f0      	bls.n	800c61c <USB_SetCurrentMode+0x60>
 800c63a:	e001      	b.n	800c640 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e005      	b.n	800c64c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b32      	cmp	r3, #50	; 0x32
 800c644:	d101      	bne.n	800c64a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e000      	b.n	800c64c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c654:	b084      	sub	sp, #16
 800c656:	b580      	push	{r7, lr}
 800c658:	b086      	sub	sp, #24
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c66e:	2300      	movs	r3, #0
 800c670:	613b      	str	r3, [r7, #16]
 800c672:	e009      	b.n	800c688 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	3340      	adds	r3, #64	; 0x40
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	2200      	movs	r2, #0
 800c680:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	3301      	adds	r3, #1
 800c686:	613b      	str	r3, [r7, #16]
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b0e      	cmp	r3, #14
 800c68c:	d9f2      	bls.n	800c674 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d11c      	bne.n	800c6ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6a2:	f043 0302 	orr.w	r3, r3, #2
 800c6a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	639a      	str	r2, [r3, #56]	; 0x38
 800c6cc:	e00b      	b.n	800c6e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c700:	461a      	mov	r2, r3
 800c702:	680b      	ldr	r3, [r1, #0]
 800c704:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d10c      	bne.n	800c726 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d104      	bne.n	800c71c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c712:	2100      	movs	r1, #0
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f965 	bl	800c9e4 <USB_SetDevSpeed>
 800c71a:	e008      	b.n	800c72e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c71c:	2101      	movs	r1, #1
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f960 	bl	800c9e4 <USB_SetDevSpeed>
 800c724:	e003      	b.n	800c72e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c726:	2103      	movs	r1, #3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f95b 	bl	800c9e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c72e:	2110      	movs	r1, #16
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f8f3 	bl	800c91c <USB_FlushTxFifo>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f91f 	bl	800c984 <USB_FlushRxFifo>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c756:	461a      	mov	r2, r3
 800c758:	2300      	movs	r3, #0
 800c75a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c762:	461a      	mov	r2, r3
 800c764:	2300      	movs	r3, #0
 800c766:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76e:	461a      	mov	r2, r3
 800c770:	2300      	movs	r3, #0
 800c772:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c774:	2300      	movs	r3, #0
 800c776:	613b      	str	r3, [r7, #16]
 800c778:	e043      	b.n	800c802 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	015a      	lsls	r2, r3, #5
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	4413      	add	r3, r2
 800c782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c78c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c790:	d118      	bne.n	800c7c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	e013      	b.n	800c7d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	015a      	lsls	r2, r3, #5
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	e008      	b.n	800c7d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	015a      	lsls	r2, r3, #5
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	4413      	add	r3, r2
 800c7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	015a      	lsls	r2, r3, #5
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	3301      	adds	r3, #1
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	429a      	cmp	r2, r3
 800c808:	d3b7      	bcc.n	800c77a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c80a:	2300      	movs	r3, #0
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	e043      	b.n	800c898 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c826:	d118      	bne.n	800c85a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10a      	bne.n	800c844 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	015a      	lsls	r2, r3, #5
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	4413      	add	r3, r2
 800c836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83a:	461a      	mov	r2, r3
 800c83c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	e013      	b.n	800c86c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c850:	461a      	mov	r2, r3
 800c852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	e008      	b.n	800c86c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	015a      	lsls	r2, r3, #5
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c866:	461a      	mov	r2, r3
 800c868:	2300      	movs	r3, #0
 800c86a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c878:	461a      	mov	r2, r3
 800c87a:	2300      	movs	r3, #0
 800c87c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88a:	461a      	mov	r2, r3
 800c88c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c890:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	3301      	adds	r3, #1
 800c896:	613b      	str	r3, [r7, #16]
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d3b7      	bcc.n	800c810 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c8c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d105      	bne.n	800c8d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	f043 0210 	orr.w	r2, r3, #16
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	699a      	ldr	r2, [r3, #24]
 800c8d8:	4b0f      	ldr	r3, [pc, #60]	; (800c918 <USB_DevInit+0x2c4>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d005      	beq.n	800c8f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	f043 0208 	orr.w	r2, r3, #8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d107      	bne.n	800c908 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c900:	f043 0304 	orr.w	r3, r3, #4
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c914:	b004      	add	sp, #16
 800c916:	4770      	bx	lr
 800c918:	803c3800 	.word	0x803c3800

0800c91c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4a13      	ldr	r2, [pc, #76]	; (800c980 <USB_FlushTxFifo+0x64>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d901      	bls.n	800c93c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e01b      	b.n	800c974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	2b00      	cmp	r3, #0
 800c942:	daf2      	bge.n	800c92a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	019b      	lsls	r3, r3, #6
 800c94c:	f043 0220 	orr.w	r2, r3, #32
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3301      	adds	r3, #1
 800c958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4a08      	ldr	r2, [pc, #32]	; (800c980 <USB_FlushTxFifo+0x64>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d901      	bls.n	800c966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e006      	b.n	800c974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b20      	cmp	r3, #32
 800c970:	d0f0      	beq.n	800c954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	00030d40 	.word	0x00030d40

0800c984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c98c:	2300      	movs	r3, #0
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	3301      	adds	r3, #1
 800c994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	4a11      	ldr	r2, [pc, #68]	; (800c9e0 <USB_FlushRxFifo+0x5c>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d901      	bls.n	800c9a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e018      	b.n	800c9d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	daf2      	bge.n	800c990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2210      	movs	r2, #16
 800c9b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	4a08      	ldr	r2, [pc, #32]	; (800c9e0 <USB_FlushRxFifo+0x5c>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d901      	bls.n	800c9c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e006      	b.n	800c9d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	f003 0310 	and.w	r3, r3, #16
 800c9ce:	2b10      	cmp	r3, #16
 800c9d0:	d0f0      	beq.n	800c9b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	00030d40 	.word	0x00030d40

0800c9e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	68f9      	ldr	r1, [r7, #12]
 800ca00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca04:	4313      	orrs	r3, r2
 800ca06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	68fa      	ldr	r2, [r7, #12]
 800ca2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca30:	f023 0303 	bic.w	r3, r3, #3
 800ca34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca44:	f043 0302 	orr.w	r3, r3, #2
 800ca48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	695b      	ldr	r3, [r3, #20]
 800ca64:	f003 0301 	and.w	r3, r3, #1
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	3301      	adds	r3, #1
 800ca84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4a13      	ldr	r2, [pc, #76]	; (800cad8 <USB_CoreReset+0x64>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d901      	bls.n	800ca92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e01b      	b.n	800caca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	daf2      	bge.n	800ca80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	f043 0201 	orr.w	r2, r3, #1
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3301      	adds	r3, #1
 800caae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4a09      	ldr	r2, [pc, #36]	; (800cad8 <USB_CoreReset+0x64>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d901      	bls.n	800cabc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e006      	b.n	800caca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d0f0      	beq.n	800caaa <USB_CoreReset+0x36>

  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	00030d40 	.word	0x00030d40

0800cadc <__errno>:
 800cadc:	4b01      	ldr	r3, [pc, #4]	; (800cae4 <__errno+0x8>)
 800cade:	6818      	ldr	r0, [r3, #0]
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	20000320 	.word	0x20000320

0800cae8 <__libc_init_array>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	4d0d      	ldr	r5, [pc, #52]	; (800cb20 <__libc_init_array+0x38>)
 800caec:	4c0d      	ldr	r4, [pc, #52]	; (800cb24 <__libc_init_array+0x3c>)
 800caee:	1b64      	subs	r4, r4, r5
 800caf0:	10a4      	asrs	r4, r4, #2
 800caf2:	2600      	movs	r6, #0
 800caf4:	42a6      	cmp	r6, r4
 800caf6:	d109      	bne.n	800cb0c <__libc_init_array+0x24>
 800caf8:	4d0b      	ldr	r5, [pc, #44]	; (800cb28 <__libc_init_array+0x40>)
 800cafa:	4c0c      	ldr	r4, [pc, #48]	; (800cb2c <__libc_init_array+0x44>)
 800cafc:	f002 ff0a 	bl	800f914 <_init>
 800cb00:	1b64      	subs	r4, r4, r5
 800cb02:	10a4      	asrs	r4, r4, #2
 800cb04:	2600      	movs	r6, #0
 800cb06:	42a6      	cmp	r6, r4
 800cb08:	d105      	bne.n	800cb16 <__libc_init_array+0x2e>
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
 800cb0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb10:	4798      	blx	r3
 800cb12:	3601      	adds	r6, #1
 800cb14:	e7ee      	b.n	800caf4 <__libc_init_array+0xc>
 800cb16:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb1a:	4798      	blx	r3
 800cb1c:	3601      	adds	r6, #1
 800cb1e:	e7f2      	b.n	800cb06 <__libc_init_array+0x1e>
 800cb20:	080100b4 	.word	0x080100b4
 800cb24:	080100b4 	.word	0x080100b4
 800cb28:	080100b4 	.word	0x080100b4
 800cb2c:	080100b8 	.word	0x080100b8

0800cb30 <malloc>:
 800cb30:	4b02      	ldr	r3, [pc, #8]	; (800cb3c <malloc+0xc>)
 800cb32:	4601      	mov	r1, r0
 800cb34:	6818      	ldr	r0, [r3, #0]
 800cb36:	f000 b88d 	b.w	800cc54 <_malloc_r>
 800cb3a:	bf00      	nop
 800cb3c:	20000320 	.word	0x20000320

0800cb40 <free>:
 800cb40:	4b02      	ldr	r3, [pc, #8]	; (800cb4c <free+0xc>)
 800cb42:	4601      	mov	r1, r0
 800cb44:	6818      	ldr	r0, [r3, #0]
 800cb46:	f000 b819 	b.w	800cb7c <_free_r>
 800cb4a:	bf00      	nop
 800cb4c:	20000320 	.word	0x20000320

0800cb50 <memcpy>:
 800cb50:	440a      	add	r2, r1
 800cb52:	4291      	cmp	r1, r2
 800cb54:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb58:	d100      	bne.n	800cb5c <memcpy+0xc>
 800cb5a:	4770      	bx	lr
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb66:	4291      	cmp	r1, r2
 800cb68:	d1f9      	bne.n	800cb5e <memcpy+0xe>
 800cb6a:	bd10      	pop	{r4, pc}

0800cb6c <memset>:
 800cb6c:	4402      	add	r2, r0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d100      	bne.n	800cb76 <memset+0xa>
 800cb74:	4770      	bx	lr
 800cb76:	f803 1b01 	strb.w	r1, [r3], #1
 800cb7a:	e7f9      	b.n	800cb70 <memset+0x4>

0800cb7c <_free_r>:
 800cb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	d044      	beq.n	800cc0c <_free_r+0x90>
 800cb82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb86:	9001      	str	r0, [sp, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb8e:	bfb8      	it	lt
 800cb90:	18e4      	addlt	r4, r4, r3
 800cb92:	f001 fbeb 	bl	800e36c <__malloc_lock>
 800cb96:	4a1e      	ldr	r2, [pc, #120]	; (800cc10 <_free_r+0x94>)
 800cb98:	9801      	ldr	r0, [sp, #4]
 800cb9a:	6813      	ldr	r3, [r2, #0]
 800cb9c:	b933      	cbnz	r3, 800cbac <_free_r+0x30>
 800cb9e:	6063      	str	r3, [r4, #4]
 800cba0:	6014      	str	r4, [r2, #0]
 800cba2:	b003      	add	sp, #12
 800cba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cba8:	f001 bbe6 	b.w	800e378 <__malloc_unlock>
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	d908      	bls.n	800cbc2 <_free_r+0x46>
 800cbb0:	6825      	ldr	r5, [r4, #0]
 800cbb2:	1961      	adds	r1, r4, r5
 800cbb4:	428b      	cmp	r3, r1
 800cbb6:	bf01      	itttt	eq
 800cbb8:	6819      	ldreq	r1, [r3, #0]
 800cbba:	685b      	ldreq	r3, [r3, #4]
 800cbbc:	1949      	addeq	r1, r1, r5
 800cbbe:	6021      	streq	r1, [r4, #0]
 800cbc0:	e7ed      	b.n	800cb9e <_free_r+0x22>
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	b10b      	cbz	r3, 800cbcc <_free_r+0x50>
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	d9fa      	bls.n	800cbc2 <_free_r+0x46>
 800cbcc:	6811      	ldr	r1, [r2, #0]
 800cbce:	1855      	adds	r5, r2, r1
 800cbd0:	42a5      	cmp	r5, r4
 800cbd2:	d10b      	bne.n	800cbec <_free_r+0x70>
 800cbd4:	6824      	ldr	r4, [r4, #0]
 800cbd6:	4421      	add	r1, r4
 800cbd8:	1854      	adds	r4, r2, r1
 800cbda:	42a3      	cmp	r3, r4
 800cbdc:	6011      	str	r1, [r2, #0]
 800cbde:	d1e0      	bne.n	800cba2 <_free_r+0x26>
 800cbe0:	681c      	ldr	r4, [r3, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	6053      	str	r3, [r2, #4]
 800cbe6:	4421      	add	r1, r4
 800cbe8:	6011      	str	r1, [r2, #0]
 800cbea:	e7da      	b.n	800cba2 <_free_r+0x26>
 800cbec:	d902      	bls.n	800cbf4 <_free_r+0x78>
 800cbee:	230c      	movs	r3, #12
 800cbf0:	6003      	str	r3, [r0, #0]
 800cbf2:	e7d6      	b.n	800cba2 <_free_r+0x26>
 800cbf4:	6825      	ldr	r5, [r4, #0]
 800cbf6:	1961      	adds	r1, r4, r5
 800cbf8:	428b      	cmp	r3, r1
 800cbfa:	bf04      	itt	eq
 800cbfc:	6819      	ldreq	r1, [r3, #0]
 800cbfe:	685b      	ldreq	r3, [r3, #4]
 800cc00:	6063      	str	r3, [r4, #4]
 800cc02:	bf04      	itt	eq
 800cc04:	1949      	addeq	r1, r1, r5
 800cc06:	6021      	streq	r1, [r4, #0]
 800cc08:	6054      	str	r4, [r2, #4]
 800cc0a:	e7ca      	b.n	800cba2 <_free_r+0x26>
 800cc0c:	b003      	add	sp, #12
 800cc0e:	bd30      	pop	{r4, r5, pc}
 800cc10:	200015d0 	.word	0x200015d0

0800cc14 <sbrk_aligned>:
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	4e0e      	ldr	r6, [pc, #56]	; (800cc50 <sbrk_aligned+0x3c>)
 800cc18:	460c      	mov	r4, r1
 800cc1a:	6831      	ldr	r1, [r6, #0]
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	b911      	cbnz	r1, 800cc26 <sbrk_aligned+0x12>
 800cc20:	f000 fcf6 	bl	800d610 <_sbrk_r>
 800cc24:	6030      	str	r0, [r6, #0]
 800cc26:	4621      	mov	r1, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f000 fcf1 	bl	800d610 <_sbrk_r>
 800cc2e:	1c43      	adds	r3, r0, #1
 800cc30:	d00a      	beq.n	800cc48 <sbrk_aligned+0x34>
 800cc32:	1cc4      	adds	r4, r0, #3
 800cc34:	f024 0403 	bic.w	r4, r4, #3
 800cc38:	42a0      	cmp	r0, r4
 800cc3a:	d007      	beq.n	800cc4c <sbrk_aligned+0x38>
 800cc3c:	1a21      	subs	r1, r4, r0
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f000 fce6 	bl	800d610 <_sbrk_r>
 800cc44:	3001      	adds	r0, #1
 800cc46:	d101      	bne.n	800cc4c <sbrk_aligned+0x38>
 800cc48:	f04f 34ff 	mov.w	r4, #4294967295
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	bd70      	pop	{r4, r5, r6, pc}
 800cc50:	200015d4 	.word	0x200015d4

0800cc54 <_malloc_r>:
 800cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc58:	1ccd      	adds	r5, r1, #3
 800cc5a:	f025 0503 	bic.w	r5, r5, #3
 800cc5e:	3508      	adds	r5, #8
 800cc60:	2d0c      	cmp	r5, #12
 800cc62:	bf38      	it	cc
 800cc64:	250c      	movcc	r5, #12
 800cc66:	2d00      	cmp	r5, #0
 800cc68:	4607      	mov	r7, r0
 800cc6a:	db01      	blt.n	800cc70 <_malloc_r+0x1c>
 800cc6c:	42a9      	cmp	r1, r5
 800cc6e:	d905      	bls.n	800cc7c <_malloc_r+0x28>
 800cc70:	230c      	movs	r3, #12
 800cc72:	603b      	str	r3, [r7, #0]
 800cc74:	2600      	movs	r6, #0
 800cc76:	4630      	mov	r0, r6
 800cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7c:	4e2e      	ldr	r6, [pc, #184]	; (800cd38 <_malloc_r+0xe4>)
 800cc7e:	f001 fb75 	bl	800e36c <__malloc_lock>
 800cc82:	6833      	ldr	r3, [r6, #0]
 800cc84:	461c      	mov	r4, r3
 800cc86:	bb34      	cbnz	r4, 800ccd6 <_malloc_r+0x82>
 800cc88:	4629      	mov	r1, r5
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	f7ff ffc2 	bl	800cc14 <sbrk_aligned>
 800cc90:	1c43      	adds	r3, r0, #1
 800cc92:	4604      	mov	r4, r0
 800cc94:	d14d      	bne.n	800cd32 <_malloc_r+0xde>
 800cc96:	6834      	ldr	r4, [r6, #0]
 800cc98:	4626      	mov	r6, r4
 800cc9a:	2e00      	cmp	r6, #0
 800cc9c:	d140      	bne.n	800cd20 <_malloc_r+0xcc>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	4631      	mov	r1, r6
 800cca2:	4638      	mov	r0, r7
 800cca4:	eb04 0803 	add.w	r8, r4, r3
 800cca8:	f000 fcb2 	bl	800d610 <_sbrk_r>
 800ccac:	4580      	cmp	r8, r0
 800ccae:	d13a      	bne.n	800cd26 <_malloc_r+0xd2>
 800ccb0:	6821      	ldr	r1, [r4, #0]
 800ccb2:	3503      	adds	r5, #3
 800ccb4:	1a6d      	subs	r5, r5, r1
 800ccb6:	f025 0503 	bic.w	r5, r5, #3
 800ccba:	3508      	adds	r5, #8
 800ccbc:	2d0c      	cmp	r5, #12
 800ccbe:	bf38      	it	cc
 800ccc0:	250c      	movcc	r5, #12
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4638      	mov	r0, r7
 800ccc6:	f7ff ffa5 	bl	800cc14 <sbrk_aligned>
 800ccca:	3001      	adds	r0, #1
 800cccc:	d02b      	beq.n	800cd26 <_malloc_r+0xd2>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	442b      	add	r3, r5
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	e00e      	b.n	800ccf4 <_malloc_r+0xa0>
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	1b52      	subs	r2, r2, r5
 800ccda:	d41e      	bmi.n	800cd1a <_malloc_r+0xc6>
 800ccdc:	2a0b      	cmp	r2, #11
 800ccde:	d916      	bls.n	800cd0e <_malloc_r+0xba>
 800cce0:	1961      	adds	r1, r4, r5
 800cce2:	42a3      	cmp	r3, r4
 800cce4:	6025      	str	r5, [r4, #0]
 800cce6:	bf18      	it	ne
 800cce8:	6059      	strne	r1, [r3, #4]
 800ccea:	6863      	ldr	r3, [r4, #4]
 800ccec:	bf08      	it	eq
 800ccee:	6031      	streq	r1, [r6, #0]
 800ccf0:	5162      	str	r2, [r4, r5]
 800ccf2:	604b      	str	r3, [r1, #4]
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	f104 060b 	add.w	r6, r4, #11
 800ccfa:	f001 fb3d 	bl	800e378 <__malloc_unlock>
 800ccfe:	f026 0607 	bic.w	r6, r6, #7
 800cd02:	1d23      	adds	r3, r4, #4
 800cd04:	1af2      	subs	r2, r6, r3
 800cd06:	d0b6      	beq.n	800cc76 <_malloc_r+0x22>
 800cd08:	1b9b      	subs	r3, r3, r6
 800cd0a:	50a3      	str	r3, [r4, r2]
 800cd0c:	e7b3      	b.n	800cc76 <_malloc_r+0x22>
 800cd0e:	6862      	ldr	r2, [r4, #4]
 800cd10:	42a3      	cmp	r3, r4
 800cd12:	bf0c      	ite	eq
 800cd14:	6032      	streq	r2, [r6, #0]
 800cd16:	605a      	strne	r2, [r3, #4]
 800cd18:	e7ec      	b.n	800ccf4 <_malloc_r+0xa0>
 800cd1a:	4623      	mov	r3, r4
 800cd1c:	6864      	ldr	r4, [r4, #4]
 800cd1e:	e7b2      	b.n	800cc86 <_malloc_r+0x32>
 800cd20:	4634      	mov	r4, r6
 800cd22:	6876      	ldr	r6, [r6, #4]
 800cd24:	e7b9      	b.n	800cc9a <_malloc_r+0x46>
 800cd26:	230c      	movs	r3, #12
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	f001 fb24 	bl	800e378 <__malloc_unlock>
 800cd30:	e7a1      	b.n	800cc76 <_malloc_r+0x22>
 800cd32:	6025      	str	r5, [r4, #0]
 800cd34:	e7de      	b.n	800ccf4 <_malloc_r+0xa0>
 800cd36:	bf00      	nop
 800cd38:	200015d0 	.word	0x200015d0

0800cd3c <__cvt>:
 800cd3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd40:	ec55 4b10 	vmov	r4, r5, d0
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	460e      	mov	r6, r1
 800cd48:	4619      	mov	r1, r3
 800cd4a:	462b      	mov	r3, r5
 800cd4c:	bfbb      	ittet	lt
 800cd4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cd52:	461d      	movlt	r5, r3
 800cd54:	2300      	movge	r3, #0
 800cd56:	232d      	movlt	r3, #45	; 0x2d
 800cd58:	700b      	strb	r3, [r1, #0]
 800cd5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cd60:	4691      	mov	r9, r2
 800cd62:	f023 0820 	bic.w	r8, r3, #32
 800cd66:	bfbc      	itt	lt
 800cd68:	4622      	movlt	r2, r4
 800cd6a:	4614      	movlt	r4, r2
 800cd6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd70:	d005      	beq.n	800cd7e <__cvt+0x42>
 800cd72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cd76:	d100      	bne.n	800cd7a <__cvt+0x3e>
 800cd78:	3601      	adds	r6, #1
 800cd7a:	2102      	movs	r1, #2
 800cd7c:	e000      	b.n	800cd80 <__cvt+0x44>
 800cd7e:	2103      	movs	r1, #3
 800cd80:	ab03      	add	r3, sp, #12
 800cd82:	9301      	str	r3, [sp, #4]
 800cd84:	ab02      	add	r3, sp, #8
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	ec45 4b10 	vmov	d0, r4, r5
 800cd8c:	4653      	mov	r3, sl
 800cd8e:	4632      	mov	r2, r6
 800cd90:	f000 fcfa 	bl	800d788 <_dtoa_r>
 800cd94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd98:	4607      	mov	r7, r0
 800cd9a:	d102      	bne.n	800cda2 <__cvt+0x66>
 800cd9c:	f019 0f01 	tst.w	r9, #1
 800cda0:	d022      	beq.n	800cde8 <__cvt+0xac>
 800cda2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cda6:	eb07 0906 	add.w	r9, r7, r6
 800cdaa:	d110      	bne.n	800cdce <__cvt+0x92>
 800cdac:	783b      	ldrb	r3, [r7, #0]
 800cdae:	2b30      	cmp	r3, #48	; 0x30
 800cdb0:	d10a      	bne.n	800cdc8 <__cvt+0x8c>
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7f3 fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdbe:	b918      	cbnz	r0, 800cdc8 <__cvt+0x8c>
 800cdc0:	f1c6 0601 	rsb	r6, r6, #1
 800cdc4:	f8ca 6000 	str.w	r6, [sl]
 800cdc8:	f8da 3000 	ldr.w	r3, [sl]
 800cdcc:	4499      	add	r9, r3
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	f7f3 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdda:	b108      	cbz	r0, 800cde0 <__cvt+0xa4>
 800cddc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cde0:	2230      	movs	r2, #48	; 0x30
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	454b      	cmp	r3, r9
 800cde6:	d307      	bcc.n	800cdf8 <__cvt+0xbc>
 800cde8:	9b03      	ldr	r3, [sp, #12]
 800cdea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdec:	1bdb      	subs	r3, r3, r7
 800cdee:	4638      	mov	r0, r7
 800cdf0:	6013      	str	r3, [r2, #0]
 800cdf2:	b004      	add	sp, #16
 800cdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf8:	1c59      	adds	r1, r3, #1
 800cdfa:	9103      	str	r1, [sp, #12]
 800cdfc:	701a      	strb	r2, [r3, #0]
 800cdfe:	e7f0      	b.n	800cde2 <__cvt+0xa6>

0800ce00 <__exponent>:
 800ce00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce02:	4603      	mov	r3, r0
 800ce04:	2900      	cmp	r1, #0
 800ce06:	bfb8      	it	lt
 800ce08:	4249      	neglt	r1, r1
 800ce0a:	f803 2b02 	strb.w	r2, [r3], #2
 800ce0e:	bfb4      	ite	lt
 800ce10:	222d      	movlt	r2, #45	; 0x2d
 800ce12:	222b      	movge	r2, #43	; 0x2b
 800ce14:	2909      	cmp	r1, #9
 800ce16:	7042      	strb	r2, [r0, #1]
 800ce18:	dd2a      	ble.n	800ce70 <__exponent+0x70>
 800ce1a:	f10d 0407 	add.w	r4, sp, #7
 800ce1e:	46a4      	mov	ip, r4
 800ce20:	270a      	movs	r7, #10
 800ce22:	46a6      	mov	lr, r4
 800ce24:	460a      	mov	r2, r1
 800ce26:	fb91 f6f7 	sdiv	r6, r1, r7
 800ce2a:	fb07 1516 	mls	r5, r7, r6, r1
 800ce2e:	3530      	adds	r5, #48	; 0x30
 800ce30:	2a63      	cmp	r2, #99	; 0x63
 800ce32:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ce3a:	4631      	mov	r1, r6
 800ce3c:	dcf1      	bgt.n	800ce22 <__exponent+0x22>
 800ce3e:	3130      	adds	r1, #48	; 0x30
 800ce40:	f1ae 0502 	sub.w	r5, lr, #2
 800ce44:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ce48:	1c44      	adds	r4, r0, #1
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4561      	cmp	r1, ip
 800ce4e:	d30a      	bcc.n	800ce66 <__exponent+0x66>
 800ce50:	f10d 0209 	add.w	r2, sp, #9
 800ce54:	eba2 020e 	sub.w	r2, r2, lr
 800ce58:	4565      	cmp	r5, ip
 800ce5a:	bf88      	it	hi
 800ce5c:	2200      	movhi	r2, #0
 800ce5e:	4413      	add	r3, r2
 800ce60:	1a18      	subs	r0, r3, r0
 800ce62:	b003      	add	sp, #12
 800ce64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ce6e:	e7ed      	b.n	800ce4c <__exponent+0x4c>
 800ce70:	2330      	movs	r3, #48	; 0x30
 800ce72:	3130      	adds	r1, #48	; 0x30
 800ce74:	7083      	strb	r3, [r0, #2]
 800ce76:	70c1      	strb	r1, [r0, #3]
 800ce78:	1d03      	adds	r3, r0, #4
 800ce7a:	e7f1      	b.n	800ce60 <__exponent+0x60>

0800ce7c <_printf_float>:
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	ed2d 8b02 	vpush	{d8}
 800ce84:	b08d      	sub	sp, #52	; 0x34
 800ce86:	460c      	mov	r4, r1
 800ce88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce8c:	4616      	mov	r6, r2
 800ce8e:	461f      	mov	r7, r3
 800ce90:	4605      	mov	r5, r0
 800ce92:	f001 fa67 	bl	800e364 <_localeconv_r>
 800ce96:	f8d0 a000 	ldr.w	sl, [r0]
 800ce9a:	4650      	mov	r0, sl
 800ce9c:	f7f3 f998 	bl	80001d0 <strlen>
 800cea0:	2300      	movs	r3, #0
 800cea2:	930a      	str	r3, [sp, #40]	; 0x28
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	9305      	str	r3, [sp, #20]
 800cea8:	f8d8 3000 	ldr.w	r3, [r8]
 800ceac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ceb0:	3307      	adds	r3, #7
 800ceb2:	f023 0307 	bic.w	r3, r3, #7
 800ceb6:	f103 0208 	add.w	r2, r3, #8
 800ceba:	f8c8 2000 	str.w	r2, [r8]
 800cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cec6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ceca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cece:	9307      	str	r3, [sp, #28]
 800ced0:	f8cd 8018 	str.w	r8, [sp, #24]
 800ced4:	ee08 0a10 	vmov	s16, r0
 800ced8:	4b9f      	ldr	r3, [pc, #636]	; (800d158 <_printf_float+0x2dc>)
 800ceda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cede:	f04f 32ff 	mov.w	r2, #4294967295
 800cee2:	f7f3 fe23 	bl	8000b2c <__aeabi_dcmpun>
 800cee6:	bb88      	cbnz	r0, 800cf4c <_printf_float+0xd0>
 800cee8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ceec:	4b9a      	ldr	r3, [pc, #616]	; (800d158 <_printf_float+0x2dc>)
 800ceee:	f04f 32ff 	mov.w	r2, #4294967295
 800cef2:	f7f3 fdfd 	bl	8000af0 <__aeabi_dcmple>
 800cef6:	bb48      	cbnz	r0, 800cf4c <_printf_float+0xd0>
 800cef8:	2200      	movs	r2, #0
 800cefa:	2300      	movs	r3, #0
 800cefc:	4640      	mov	r0, r8
 800cefe:	4649      	mov	r1, r9
 800cf00:	f7f3 fdec 	bl	8000adc <__aeabi_dcmplt>
 800cf04:	b110      	cbz	r0, 800cf0c <_printf_float+0x90>
 800cf06:	232d      	movs	r3, #45	; 0x2d
 800cf08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf0c:	4b93      	ldr	r3, [pc, #588]	; (800d15c <_printf_float+0x2e0>)
 800cf0e:	4894      	ldr	r0, [pc, #592]	; (800d160 <_printf_float+0x2e4>)
 800cf10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cf14:	bf94      	ite	ls
 800cf16:	4698      	movls	r8, r3
 800cf18:	4680      	movhi	r8, r0
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	6123      	str	r3, [r4, #16]
 800cf1e:	9b05      	ldr	r3, [sp, #20]
 800cf20:	f023 0204 	bic.w	r2, r3, #4
 800cf24:	6022      	str	r2, [r4, #0]
 800cf26:	f04f 0900 	mov.w	r9, #0
 800cf2a:	9700      	str	r7, [sp, #0]
 800cf2c:	4633      	mov	r3, r6
 800cf2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cf30:	4621      	mov	r1, r4
 800cf32:	4628      	mov	r0, r5
 800cf34:	f000 f9d8 	bl	800d2e8 <_printf_common>
 800cf38:	3001      	adds	r0, #1
 800cf3a:	f040 8090 	bne.w	800d05e <_printf_float+0x1e2>
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf42:	b00d      	add	sp, #52	; 0x34
 800cf44:	ecbd 8b02 	vpop	{d8}
 800cf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4c:	4642      	mov	r2, r8
 800cf4e:	464b      	mov	r3, r9
 800cf50:	4640      	mov	r0, r8
 800cf52:	4649      	mov	r1, r9
 800cf54:	f7f3 fdea 	bl	8000b2c <__aeabi_dcmpun>
 800cf58:	b140      	cbz	r0, 800cf6c <_printf_float+0xf0>
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	bfbc      	itt	lt
 800cf60:	232d      	movlt	r3, #45	; 0x2d
 800cf62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cf66:	487f      	ldr	r0, [pc, #508]	; (800d164 <_printf_float+0x2e8>)
 800cf68:	4b7f      	ldr	r3, [pc, #508]	; (800d168 <_printf_float+0x2ec>)
 800cf6a:	e7d1      	b.n	800cf10 <_printf_float+0x94>
 800cf6c:	6863      	ldr	r3, [r4, #4]
 800cf6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cf72:	9206      	str	r2, [sp, #24]
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	d13f      	bne.n	800cff8 <_printf_float+0x17c>
 800cf78:	2306      	movs	r3, #6
 800cf7a:	6063      	str	r3, [r4, #4]
 800cf7c:	9b05      	ldr	r3, [sp, #20]
 800cf7e:	6861      	ldr	r1, [r4, #4]
 800cf80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf84:	2300      	movs	r3, #0
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	ab0a      	add	r3, sp, #40	; 0x28
 800cf8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf8e:	ab09      	add	r3, sp, #36	; 0x24
 800cf90:	ec49 8b10 	vmov	d0, r8, r9
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	6022      	str	r2, [r4, #0]
 800cf98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f7ff fecd 	bl	800cd3c <__cvt>
 800cfa2:	9b06      	ldr	r3, [sp, #24]
 800cfa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfa6:	2b47      	cmp	r3, #71	; 0x47
 800cfa8:	4680      	mov	r8, r0
 800cfaa:	d108      	bne.n	800cfbe <_printf_float+0x142>
 800cfac:	1cc8      	adds	r0, r1, #3
 800cfae:	db02      	blt.n	800cfb6 <_printf_float+0x13a>
 800cfb0:	6863      	ldr	r3, [r4, #4]
 800cfb2:	4299      	cmp	r1, r3
 800cfb4:	dd41      	ble.n	800d03a <_printf_float+0x1be>
 800cfb6:	f1ab 0b02 	sub.w	fp, fp, #2
 800cfba:	fa5f fb8b 	uxtb.w	fp, fp
 800cfbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cfc2:	d820      	bhi.n	800d006 <_printf_float+0x18a>
 800cfc4:	3901      	subs	r1, #1
 800cfc6:	465a      	mov	r2, fp
 800cfc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cfcc:	9109      	str	r1, [sp, #36]	; 0x24
 800cfce:	f7ff ff17 	bl	800ce00 <__exponent>
 800cfd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfd4:	1813      	adds	r3, r2, r0
 800cfd6:	2a01      	cmp	r2, #1
 800cfd8:	4681      	mov	r9, r0
 800cfda:	6123      	str	r3, [r4, #16]
 800cfdc:	dc02      	bgt.n	800cfe4 <_printf_float+0x168>
 800cfde:	6822      	ldr	r2, [r4, #0]
 800cfe0:	07d2      	lsls	r2, r2, #31
 800cfe2:	d501      	bpl.n	800cfe8 <_printf_float+0x16c>
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	6123      	str	r3, [r4, #16]
 800cfe8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d09c      	beq.n	800cf2a <_printf_float+0xae>
 800cff0:	232d      	movs	r3, #45	; 0x2d
 800cff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff6:	e798      	b.n	800cf2a <_printf_float+0xae>
 800cff8:	9a06      	ldr	r2, [sp, #24]
 800cffa:	2a47      	cmp	r2, #71	; 0x47
 800cffc:	d1be      	bne.n	800cf7c <_printf_float+0x100>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1bc      	bne.n	800cf7c <_printf_float+0x100>
 800d002:	2301      	movs	r3, #1
 800d004:	e7b9      	b.n	800cf7a <_printf_float+0xfe>
 800d006:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d00a:	d118      	bne.n	800d03e <_printf_float+0x1c2>
 800d00c:	2900      	cmp	r1, #0
 800d00e:	6863      	ldr	r3, [r4, #4]
 800d010:	dd0b      	ble.n	800d02a <_printf_float+0x1ae>
 800d012:	6121      	str	r1, [r4, #16]
 800d014:	b913      	cbnz	r3, 800d01c <_printf_float+0x1a0>
 800d016:	6822      	ldr	r2, [r4, #0]
 800d018:	07d0      	lsls	r0, r2, #31
 800d01a:	d502      	bpl.n	800d022 <_printf_float+0x1a6>
 800d01c:	3301      	adds	r3, #1
 800d01e:	440b      	add	r3, r1
 800d020:	6123      	str	r3, [r4, #16]
 800d022:	65a1      	str	r1, [r4, #88]	; 0x58
 800d024:	f04f 0900 	mov.w	r9, #0
 800d028:	e7de      	b.n	800cfe8 <_printf_float+0x16c>
 800d02a:	b913      	cbnz	r3, 800d032 <_printf_float+0x1b6>
 800d02c:	6822      	ldr	r2, [r4, #0]
 800d02e:	07d2      	lsls	r2, r2, #31
 800d030:	d501      	bpl.n	800d036 <_printf_float+0x1ba>
 800d032:	3302      	adds	r3, #2
 800d034:	e7f4      	b.n	800d020 <_printf_float+0x1a4>
 800d036:	2301      	movs	r3, #1
 800d038:	e7f2      	b.n	800d020 <_printf_float+0x1a4>
 800d03a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d040:	4299      	cmp	r1, r3
 800d042:	db05      	blt.n	800d050 <_printf_float+0x1d4>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	6121      	str	r1, [r4, #16]
 800d048:	07d8      	lsls	r0, r3, #31
 800d04a:	d5ea      	bpl.n	800d022 <_printf_float+0x1a6>
 800d04c:	1c4b      	adds	r3, r1, #1
 800d04e:	e7e7      	b.n	800d020 <_printf_float+0x1a4>
 800d050:	2900      	cmp	r1, #0
 800d052:	bfd4      	ite	le
 800d054:	f1c1 0202 	rsble	r2, r1, #2
 800d058:	2201      	movgt	r2, #1
 800d05a:	4413      	add	r3, r2
 800d05c:	e7e0      	b.n	800d020 <_printf_float+0x1a4>
 800d05e:	6823      	ldr	r3, [r4, #0]
 800d060:	055a      	lsls	r2, r3, #21
 800d062:	d407      	bmi.n	800d074 <_printf_float+0x1f8>
 800d064:	6923      	ldr	r3, [r4, #16]
 800d066:	4642      	mov	r2, r8
 800d068:	4631      	mov	r1, r6
 800d06a:	4628      	mov	r0, r5
 800d06c:	47b8      	blx	r7
 800d06e:	3001      	adds	r0, #1
 800d070:	d12c      	bne.n	800d0cc <_printf_float+0x250>
 800d072:	e764      	b.n	800cf3e <_printf_float+0xc2>
 800d074:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d078:	f240 80e0 	bls.w	800d23c <_printf_float+0x3c0>
 800d07c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d080:	2200      	movs	r2, #0
 800d082:	2300      	movs	r3, #0
 800d084:	f7f3 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d034      	beq.n	800d0f6 <_printf_float+0x27a>
 800d08c:	4a37      	ldr	r2, [pc, #220]	; (800d16c <_printf_float+0x2f0>)
 800d08e:	2301      	movs	r3, #1
 800d090:	4631      	mov	r1, r6
 800d092:	4628      	mov	r0, r5
 800d094:	47b8      	blx	r7
 800d096:	3001      	adds	r0, #1
 800d098:	f43f af51 	beq.w	800cf3e <_printf_float+0xc2>
 800d09c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	db02      	blt.n	800d0aa <_printf_float+0x22e>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	07d8      	lsls	r0, r3, #31
 800d0a8:	d510      	bpl.n	800d0cc <_printf_float+0x250>
 800d0aa:	ee18 3a10 	vmov	r3, s16
 800d0ae:	4652      	mov	r2, sl
 800d0b0:	4631      	mov	r1, r6
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	47b8      	blx	r7
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	f43f af41 	beq.w	800cf3e <_printf_float+0xc2>
 800d0bc:	f04f 0800 	mov.w	r8, #0
 800d0c0:	f104 091a 	add.w	r9, r4, #26
 800d0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	4543      	cmp	r3, r8
 800d0ca:	dc09      	bgt.n	800d0e0 <_printf_float+0x264>
 800d0cc:	6823      	ldr	r3, [r4, #0]
 800d0ce:	079b      	lsls	r3, r3, #30
 800d0d0:	f100 8105 	bmi.w	800d2de <_printf_float+0x462>
 800d0d4:	68e0      	ldr	r0, [r4, #12]
 800d0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0d8:	4298      	cmp	r0, r3
 800d0da:	bfb8      	it	lt
 800d0dc:	4618      	movlt	r0, r3
 800d0de:	e730      	b.n	800cf42 <_printf_float+0xc6>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	464a      	mov	r2, r9
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	47b8      	blx	r7
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	f43f af27 	beq.w	800cf3e <_printf_float+0xc2>
 800d0f0:	f108 0801 	add.w	r8, r8, #1
 800d0f4:	e7e6      	b.n	800d0c4 <_printf_float+0x248>
 800d0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	dc39      	bgt.n	800d170 <_printf_float+0x2f4>
 800d0fc:	4a1b      	ldr	r2, [pc, #108]	; (800d16c <_printf_float+0x2f0>)
 800d0fe:	2301      	movs	r3, #1
 800d100:	4631      	mov	r1, r6
 800d102:	4628      	mov	r0, r5
 800d104:	47b8      	blx	r7
 800d106:	3001      	adds	r0, #1
 800d108:	f43f af19 	beq.w	800cf3e <_printf_float+0xc2>
 800d10c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d110:	4313      	orrs	r3, r2
 800d112:	d102      	bne.n	800d11a <_printf_float+0x29e>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	07d9      	lsls	r1, r3, #31
 800d118:	d5d8      	bpl.n	800d0cc <_printf_float+0x250>
 800d11a:	ee18 3a10 	vmov	r3, s16
 800d11e:	4652      	mov	r2, sl
 800d120:	4631      	mov	r1, r6
 800d122:	4628      	mov	r0, r5
 800d124:	47b8      	blx	r7
 800d126:	3001      	adds	r0, #1
 800d128:	f43f af09 	beq.w	800cf3e <_printf_float+0xc2>
 800d12c:	f04f 0900 	mov.w	r9, #0
 800d130:	f104 0a1a 	add.w	sl, r4, #26
 800d134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d136:	425b      	negs	r3, r3
 800d138:	454b      	cmp	r3, r9
 800d13a:	dc01      	bgt.n	800d140 <_printf_float+0x2c4>
 800d13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d13e:	e792      	b.n	800d066 <_printf_float+0x1ea>
 800d140:	2301      	movs	r3, #1
 800d142:	4652      	mov	r2, sl
 800d144:	4631      	mov	r1, r6
 800d146:	4628      	mov	r0, r5
 800d148:	47b8      	blx	r7
 800d14a:	3001      	adds	r0, #1
 800d14c:	f43f aef7 	beq.w	800cf3e <_printf_float+0xc2>
 800d150:	f109 0901 	add.w	r9, r9, #1
 800d154:	e7ee      	b.n	800d134 <_printf_float+0x2b8>
 800d156:	bf00      	nop
 800d158:	7fefffff 	.word	0x7fefffff
 800d15c:	0800fcd4 	.word	0x0800fcd4
 800d160:	0800fcd8 	.word	0x0800fcd8
 800d164:	0800fce0 	.word	0x0800fce0
 800d168:	0800fcdc 	.word	0x0800fcdc
 800d16c:	0800fce4 	.word	0x0800fce4
 800d170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d174:	429a      	cmp	r2, r3
 800d176:	bfa8      	it	ge
 800d178:	461a      	movge	r2, r3
 800d17a:	2a00      	cmp	r2, #0
 800d17c:	4691      	mov	r9, r2
 800d17e:	dc37      	bgt.n	800d1f0 <_printf_float+0x374>
 800d180:	f04f 0b00 	mov.w	fp, #0
 800d184:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d188:	f104 021a 	add.w	r2, r4, #26
 800d18c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d18e:	9305      	str	r3, [sp, #20]
 800d190:	eba3 0309 	sub.w	r3, r3, r9
 800d194:	455b      	cmp	r3, fp
 800d196:	dc33      	bgt.n	800d200 <_printf_float+0x384>
 800d198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d19c:	429a      	cmp	r2, r3
 800d19e:	db3b      	blt.n	800d218 <_printf_float+0x39c>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	07da      	lsls	r2, r3, #31
 800d1a4:	d438      	bmi.n	800d218 <_printf_float+0x39c>
 800d1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a8:	9a05      	ldr	r2, [sp, #20]
 800d1aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1ac:	1a9a      	subs	r2, r3, r2
 800d1ae:	eba3 0901 	sub.w	r9, r3, r1
 800d1b2:	4591      	cmp	r9, r2
 800d1b4:	bfa8      	it	ge
 800d1b6:	4691      	movge	r9, r2
 800d1b8:	f1b9 0f00 	cmp.w	r9, #0
 800d1bc:	dc35      	bgt.n	800d22a <_printf_float+0x3ae>
 800d1be:	f04f 0800 	mov.w	r8, #0
 800d1c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1c6:	f104 0a1a 	add.w	sl, r4, #26
 800d1ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	eba3 0309 	sub.w	r3, r3, r9
 800d1d4:	4543      	cmp	r3, r8
 800d1d6:	f77f af79 	ble.w	800d0cc <_printf_float+0x250>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4652      	mov	r2, sl
 800d1de:	4631      	mov	r1, r6
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	47b8      	blx	r7
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	f43f aeaa 	beq.w	800cf3e <_printf_float+0xc2>
 800d1ea:	f108 0801 	add.w	r8, r8, #1
 800d1ee:	e7ec      	b.n	800d1ca <_printf_float+0x34e>
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	47b8      	blx	r7
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d1c0      	bne.n	800d180 <_printf_float+0x304>
 800d1fe:	e69e      	b.n	800cf3e <_printf_float+0xc2>
 800d200:	2301      	movs	r3, #1
 800d202:	4631      	mov	r1, r6
 800d204:	4628      	mov	r0, r5
 800d206:	9205      	str	r2, [sp, #20]
 800d208:	47b8      	blx	r7
 800d20a:	3001      	adds	r0, #1
 800d20c:	f43f ae97 	beq.w	800cf3e <_printf_float+0xc2>
 800d210:	9a05      	ldr	r2, [sp, #20]
 800d212:	f10b 0b01 	add.w	fp, fp, #1
 800d216:	e7b9      	b.n	800d18c <_printf_float+0x310>
 800d218:	ee18 3a10 	vmov	r3, s16
 800d21c:	4652      	mov	r2, sl
 800d21e:	4631      	mov	r1, r6
 800d220:	4628      	mov	r0, r5
 800d222:	47b8      	blx	r7
 800d224:	3001      	adds	r0, #1
 800d226:	d1be      	bne.n	800d1a6 <_printf_float+0x32a>
 800d228:	e689      	b.n	800cf3e <_printf_float+0xc2>
 800d22a:	9a05      	ldr	r2, [sp, #20]
 800d22c:	464b      	mov	r3, r9
 800d22e:	4442      	add	r2, r8
 800d230:	4631      	mov	r1, r6
 800d232:	4628      	mov	r0, r5
 800d234:	47b8      	blx	r7
 800d236:	3001      	adds	r0, #1
 800d238:	d1c1      	bne.n	800d1be <_printf_float+0x342>
 800d23a:	e680      	b.n	800cf3e <_printf_float+0xc2>
 800d23c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d23e:	2a01      	cmp	r2, #1
 800d240:	dc01      	bgt.n	800d246 <_printf_float+0x3ca>
 800d242:	07db      	lsls	r3, r3, #31
 800d244:	d538      	bpl.n	800d2b8 <_printf_float+0x43c>
 800d246:	2301      	movs	r3, #1
 800d248:	4642      	mov	r2, r8
 800d24a:	4631      	mov	r1, r6
 800d24c:	4628      	mov	r0, r5
 800d24e:	47b8      	blx	r7
 800d250:	3001      	adds	r0, #1
 800d252:	f43f ae74 	beq.w	800cf3e <_printf_float+0xc2>
 800d256:	ee18 3a10 	vmov	r3, s16
 800d25a:	4652      	mov	r2, sl
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f ae6b 	beq.w	800cf3e <_printf_float+0xc2>
 800d268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	f7f3 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d274:	b9d8      	cbnz	r0, 800d2ae <_printf_float+0x432>
 800d276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d278:	f108 0201 	add.w	r2, r8, #1
 800d27c:	3b01      	subs	r3, #1
 800d27e:	4631      	mov	r1, r6
 800d280:	4628      	mov	r0, r5
 800d282:	47b8      	blx	r7
 800d284:	3001      	adds	r0, #1
 800d286:	d10e      	bne.n	800d2a6 <_printf_float+0x42a>
 800d288:	e659      	b.n	800cf3e <_printf_float+0xc2>
 800d28a:	2301      	movs	r3, #1
 800d28c:	4652      	mov	r2, sl
 800d28e:	4631      	mov	r1, r6
 800d290:	4628      	mov	r0, r5
 800d292:	47b8      	blx	r7
 800d294:	3001      	adds	r0, #1
 800d296:	f43f ae52 	beq.w	800cf3e <_printf_float+0xc2>
 800d29a:	f108 0801 	add.w	r8, r8, #1
 800d29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	4543      	cmp	r3, r8
 800d2a4:	dcf1      	bgt.n	800d28a <_printf_float+0x40e>
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d2ac:	e6dc      	b.n	800d068 <_printf_float+0x1ec>
 800d2ae:	f04f 0800 	mov.w	r8, #0
 800d2b2:	f104 0a1a 	add.w	sl, r4, #26
 800d2b6:	e7f2      	b.n	800d29e <_printf_float+0x422>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	4642      	mov	r2, r8
 800d2bc:	e7df      	b.n	800d27e <_printf_float+0x402>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	464a      	mov	r2, r9
 800d2c2:	4631      	mov	r1, r6
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	47b8      	blx	r7
 800d2c8:	3001      	adds	r0, #1
 800d2ca:	f43f ae38 	beq.w	800cf3e <_printf_float+0xc2>
 800d2ce:	f108 0801 	add.w	r8, r8, #1
 800d2d2:	68e3      	ldr	r3, [r4, #12]
 800d2d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2d6:	1a5b      	subs	r3, r3, r1
 800d2d8:	4543      	cmp	r3, r8
 800d2da:	dcf0      	bgt.n	800d2be <_printf_float+0x442>
 800d2dc:	e6fa      	b.n	800d0d4 <_printf_float+0x258>
 800d2de:	f04f 0800 	mov.w	r8, #0
 800d2e2:	f104 0919 	add.w	r9, r4, #25
 800d2e6:	e7f4      	b.n	800d2d2 <_printf_float+0x456>

0800d2e8 <_printf_common>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	4616      	mov	r6, r2
 800d2ee:	4699      	mov	r9, r3
 800d2f0:	688a      	ldr	r2, [r1, #8]
 800d2f2:	690b      	ldr	r3, [r1, #16]
 800d2f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	bfb8      	it	lt
 800d2fc:	4613      	movlt	r3, r2
 800d2fe:	6033      	str	r3, [r6, #0]
 800d300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d304:	4607      	mov	r7, r0
 800d306:	460c      	mov	r4, r1
 800d308:	b10a      	cbz	r2, 800d30e <_printf_common+0x26>
 800d30a:	3301      	adds	r3, #1
 800d30c:	6033      	str	r3, [r6, #0]
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	0699      	lsls	r1, r3, #26
 800d312:	bf42      	ittt	mi
 800d314:	6833      	ldrmi	r3, [r6, #0]
 800d316:	3302      	addmi	r3, #2
 800d318:	6033      	strmi	r3, [r6, #0]
 800d31a:	6825      	ldr	r5, [r4, #0]
 800d31c:	f015 0506 	ands.w	r5, r5, #6
 800d320:	d106      	bne.n	800d330 <_printf_common+0x48>
 800d322:	f104 0a19 	add.w	sl, r4, #25
 800d326:	68e3      	ldr	r3, [r4, #12]
 800d328:	6832      	ldr	r2, [r6, #0]
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	42ab      	cmp	r3, r5
 800d32e:	dc26      	bgt.n	800d37e <_printf_common+0x96>
 800d330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d334:	1e13      	subs	r3, r2, #0
 800d336:	6822      	ldr	r2, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	2301      	movne	r3, #1
 800d33c:	0692      	lsls	r2, r2, #26
 800d33e:	d42b      	bmi.n	800d398 <_printf_common+0xb0>
 800d340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d344:	4649      	mov	r1, r9
 800d346:	4638      	mov	r0, r7
 800d348:	47c0      	blx	r8
 800d34a:	3001      	adds	r0, #1
 800d34c:	d01e      	beq.n	800d38c <_printf_common+0xa4>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	68e5      	ldr	r5, [r4, #12]
 800d352:	6832      	ldr	r2, [r6, #0]
 800d354:	f003 0306 	and.w	r3, r3, #6
 800d358:	2b04      	cmp	r3, #4
 800d35a:	bf08      	it	eq
 800d35c:	1aad      	subeq	r5, r5, r2
 800d35e:	68a3      	ldr	r3, [r4, #8]
 800d360:	6922      	ldr	r2, [r4, #16]
 800d362:	bf0c      	ite	eq
 800d364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d368:	2500      	movne	r5, #0
 800d36a:	4293      	cmp	r3, r2
 800d36c:	bfc4      	itt	gt
 800d36e:	1a9b      	subgt	r3, r3, r2
 800d370:	18ed      	addgt	r5, r5, r3
 800d372:	2600      	movs	r6, #0
 800d374:	341a      	adds	r4, #26
 800d376:	42b5      	cmp	r5, r6
 800d378:	d11a      	bne.n	800d3b0 <_printf_common+0xc8>
 800d37a:	2000      	movs	r0, #0
 800d37c:	e008      	b.n	800d390 <_printf_common+0xa8>
 800d37e:	2301      	movs	r3, #1
 800d380:	4652      	mov	r2, sl
 800d382:	4649      	mov	r1, r9
 800d384:	4638      	mov	r0, r7
 800d386:	47c0      	blx	r8
 800d388:	3001      	adds	r0, #1
 800d38a:	d103      	bne.n	800d394 <_printf_common+0xac>
 800d38c:	f04f 30ff 	mov.w	r0, #4294967295
 800d390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d394:	3501      	adds	r5, #1
 800d396:	e7c6      	b.n	800d326 <_printf_common+0x3e>
 800d398:	18e1      	adds	r1, r4, r3
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	2030      	movs	r0, #48	; 0x30
 800d39e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3a2:	4422      	add	r2, r4
 800d3a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3ac:	3302      	adds	r3, #2
 800d3ae:	e7c7      	b.n	800d340 <_printf_common+0x58>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	4622      	mov	r2, r4
 800d3b4:	4649      	mov	r1, r9
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	47c0      	blx	r8
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	d0e6      	beq.n	800d38c <_printf_common+0xa4>
 800d3be:	3601      	adds	r6, #1
 800d3c0:	e7d9      	b.n	800d376 <_printf_common+0x8e>
	...

0800d3c4 <_printf_i>:
 800d3c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c8:	7e0f      	ldrb	r7, [r1, #24]
 800d3ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3cc:	2f78      	cmp	r7, #120	; 0x78
 800d3ce:	4691      	mov	r9, r2
 800d3d0:	4680      	mov	r8, r0
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	469a      	mov	sl, r3
 800d3d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3da:	d807      	bhi.n	800d3ec <_printf_i+0x28>
 800d3dc:	2f62      	cmp	r7, #98	; 0x62
 800d3de:	d80a      	bhi.n	800d3f6 <_printf_i+0x32>
 800d3e0:	2f00      	cmp	r7, #0
 800d3e2:	f000 80d8 	beq.w	800d596 <_printf_i+0x1d2>
 800d3e6:	2f58      	cmp	r7, #88	; 0x58
 800d3e8:	f000 80a3 	beq.w	800d532 <_printf_i+0x16e>
 800d3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3f4:	e03a      	b.n	800d46c <_printf_i+0xa8>
 800d3f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3fa:	2b15      	cmp	r3, #21
 800d3fc:	d8f6      	bhi.n	800d3ec <_printf_i+0x28>
 800d3fe:	a101      	add	r1, pc, #4	; (adr r1, 800d404 <_printf_i+0x40>)
 800d400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d404:	0800d45d 	.word	0x0800d45d
 800d408:	0800d471 	.word	0x0800d471
 800d40c:	0800d3ed 	.word	0x0800d3ed
 800d410:	0800d3ed 	.word	0x0800d3ed
 800d414:	0800d3ed 	.word	0x0800d3ed
 800d418:	0800d3ed 	.word	0x0800d3ed
 800d41c:	0800d471 	.word	0x0800d471
 800d420:	0800d3ed 	.word	0x0800d3ed
 800d424:	0800d3ed 	.word	0x0800d3ed
 800d428:	0800d3ed 	.word	0x0800d3ed
 800d42c:	0800d3ed 	.word	0x0800d3ed
 800d430:	0800d57d 	.word	0x0800d57d
 800d434:	0800d4a1 	.word	0x0800d4a1
 800d438:	0800d55f 	.word	0x0800d55f
 800d43c:	0800d3ed 	.word	0x0800d3ed
 800d440:	0800d3ed 	.word	0x0800d3ed
 800d444:	0800d59f 	.word	0x0800d59f
 800d448:	0800d3ed 	.word	0x0800d3ed
 800d44c:	0800d4a1 	.word	0x0800d4a1
 800d450:	0800d3ed 	.word	0x0800d3ed
 800d454:	0800d3ed 	.word	0x0800d3ed
 800d458:	0800d567 	.word	0x0800d567
 800d45c:	682b      	ldr	r3, [r5, #0]
 800d45e:	1d1a      	adds	r2, r3, #4
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	602a      	str	r2, [r5, #0]
 800d464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d46c:	2301      	movs	r3, #1
 800d46e:	e0a3      	b.n	800d5b8 <_printf_i+0x1f4>
 800d470:	6820      	ldr	r0, [r4, #0]
 800d472:	6829      	ldr	r1, [r5, #0]
 800d474:	0606      	lsls	r6, r0, #24
 800d476:	f101 0304 	add.w	r3, r1, #4
 800d47a:	d50a      	bpl.n	800d492 <_printf_i+0xce>
 800d47c:	680e      	ldr	r6, [r1, #0]
 800d47e:	602b      	str	r3, [r5, #0]
 800d480:	2e00      	cmp	r6, #0
 800d482:	da03      	bge.n	800d48c <_printf_i+0xc8>
 800d484:	232d      	movs	r3, #45	; 0x2d
 800d486:	4276      	negs	r6, r6
 800d488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d48c:	485e      	ldr	r0, [pc, #376]	; (800d608 <_printf_i+0x244>)
 800d48e:	230a      	movs	r3, #10
 800d490:	e019      	b.n	800d4c6 <_printf_i+0x102>
 800d492:	680e      	ldr	r6, [r1, #0]
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d49a:	bf18      	it	ne
 800d49c:	b236      	sxthne	r6, r6
 800d49e:	e7ef      	b.n	800d480 <_printf_i+0xbc>
 800d4a0:	682b      	ldr	r3, [r5, #0]
 800d4a2:	6820      	ldr	r0, [r4, #0]
 800d4a4:	1d19      	adds	r1, r3, #4
 800d4a6:	6029      	str	r1, [r5, #0]
 800d4a8:	0601      	lsls	r1, r0, #24
 800d4aa:	d501      	bpl.n	800d4b0 <_printf_i+0xec>
 800d4ac:	681e      	ldr	r6, [r3, #0]
 800d4ae:	e002      	b.n	800d4b6 <_printf_i+0xf2>
 800d4b0:	0646      	lsls	r6, r0, #25
 800d4b2:	d5fb      	bpl.n	800d4ac <_printf_i+0xe8>
 800d4b4:	881e      	ldrh	r6, [r3, #0]
 800d4b6:	4854      	ldr	r0, [pc, #336]	; (800d608 <_printf_i+0x244>)
 800d4b8:	2f6f      	cmp	r7, #111	; 0x6f
 800d4ba:	bf0c      	ite	eq
 800d4bc:	2308      	moveq	r3, #8
 800d4be:	230a      	movne	r3, #10
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4c6:	6865      	ldr	r5, [r4, #4]
 800d4c8:	60a5      	str	r5, [r4, #8]
 800d4ca:	2d00      	cmp	r5, #0
 800d4cc:	bfa2      	ittt	ge
 800d4ce:	6821      	ldrge	r1, [r4, #0]
 800d4d0:	f021 0104 	bicge.w	r1, r1, #4
 800d4d4:	6021      	strge	r1, [r4, #0]
 800d4d6:	b90e      	cbnz	r6, 800d4dc <_printf_i+0x118>
 800d4d8:	2d00      	cmp	r5, #0
 800d4da:	d04d      	beq.n	800d578 <_printf_i+0x1b4>
 800d4dc:	4615      	mov	r5, r2
 800d4de:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4e2:	fb03 6711 	mls	r7, r3, r1, r6
 800d4e6:	5dc7      	ldrb	r7, [r0, r7]
 800d4e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4ec:	4637      	mov	r7, r6
 800d4ee:	42bb      	cmp	r3, r7
 800d4f0:	460e      	mov	r6, r1
 800d4f2:	d9f4      	bls.n	800d4de <_printf_i+0x11a>
 800d4f4:	2b08      	cmp	r3, #8
 800d4f6:	d10b      	bne.n	800d510 <_printf_i+0x14c>
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	07de      	lsls	r6, r3, #31
 800d4fc:	d508      	bpl.n	800d510 <_printf_i+0x14c>
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	6861      	ldr	r1, [r4, #4]
 800d502:	4299      	cmp	r1, r3
 800d504:	bfde      	ittt	le
 800d506:	2330      	movle	r3, #48	; 0x30
 800d508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d50c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d510:	1b52      	subs	r2, r2, r5
 800d512:	6122      	str	r2, [r4, #16]
 800d514:	f8cd a000 	str.w	sl, [sp]
 800d518:	464b      	mov	r3, r9
 800d51a:	aa03      	add	r2, sp, #12
 800d51c:	4621      	mov	r1, r4
 800d51e:	4640      	mov	r0, r8
 800d520:	f7ff fee2 	bl	800d2e8 <_printf_common>
 800d524:	3001      	adds	r0, #1
 800d526:	d14c      	bne.n	800d5c2 <_printf_i+0x1fe>
 800d528:	f04f 30ff 	mov.w	r0, #4294967295
 800d52c:	b004      	add	sp, #16
 800d52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d532:	4835      	ldr	r0, [pc, #212]	; (800d608 <_printf_i+0x244>)
 800d534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d538:	6829      	ldr	r1, [r5, #0]
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d540:	6029      	str	r1, [r5, #0]
 800d542:	061d      	lsls	r5, r3, #24
 800d544:	d514      	bpl.n	800d570 <_printf_i+0x1ac>
 800d546:	07df      	lsls	r7, r3, #31
 800d548:	bf44      	itt	mi
 800d54a:	f043 0320 	orrmi.w	r3, r3, #32
 800d54e:	6023      	strmi	r3, [r4, #0]
 800d550:	b91e      	cbnz	r6, 800d55a <_printf_i+0x196>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	f023 0320 	bic.w	r3, r3, #32
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	2310      	movs	r3, #16
 800d55c:	e7b0      	b.n	800d4c0 <_printf_i+0xfc>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	f043 0320 	orr.w	r3, r3, #32
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	2378      	movs	r3, #120	; 0x78
 800d568:	4828      	ldr	r0, [pc, #160]	; (800d60c <_printf_i+0x248>)
 800d56a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d56e:	e7e3      	b.n	800d538 <_printf_i+0x174>
 800d570:	0659      	lsls	r1, r3, #25
 800d572:	bf48      	it	mi
 800d574:	b2b6      	uxthmi	r6, r6
 800d576:	e7e6      	b.n	800d546 <_printf_i+0x182>
 800d578:	4615      	mov	r5, r2
 800d57a:	e7bb      	b.n	800d4f4 <_printf_i+0x130>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	6826      	ldr	r6, [r4, #0]
 800d580:	6961      	ldr	r1, [r4, #20]
 800d582:	1d18      	adds	r0, r3, #4
 800d584:	6028      	str	r0, [r5, #0]
 800d586:	0635      	lsls	r5, r6, #24
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	d501      	bpl.n	800d590 <_printf_i+0x1cc>
 800d58c:	6019      	str	r1, [r3, #0]
 800d58e:	e002      	b.n	800d596 <_printf_i+0x1d2>
 800d590:	0670      	lsls	r0, r6, #25
 800d592:	d5fb      	bpl.n	800d58c <_printf_i+0x1c8>
 800d594:	8019      	strh	r1, [r3, #0]
 800d596:	2300      	movs	r3, #0
 800d598:	6123      	str	r3, [r4, #16]
 800d59a:	4615      	mov	r5, r2
 800d59c:	e7ba      	b.n	800d514 <_printf_i+0x150>
 800d59e:	682b      	ldr	r3, [r5, #0]
 800d5a0:	1d1a      	adds	r2, r3, #4
 800d5a2:	602a      	str	r2, [r5, #0]
 800d5a4:	681d      	ldr	r5, [r3, #0]
 800d5a6:	6862      	ldr	r2, [r4, #4]
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f7f2 fe18 	bl	80001e0 <memchr>
 800d5b0:	b108      	cbz	r0, 800d5b6 <_printf_i+0x1f2>
 800d5b2:	1b40      	subs	r0, r0, r5
 800d5b4:	6060      	str	r0, [r4, #4]
 800d5b6:	6863      	ldr	r3, [r4, #4]
 800d5b8:	6123      	str	r3, [r4, #16]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c0:	e7a8      	b.n	800d514 <_printf_i+0x150>
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	47d0      	blx	sl
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	d0ab      	beq.n	800d528 <_printf_i+0x164>
 800d5d0:	6823      	ldr	r3, [r4, #0]
 800d5d2:	079b      	lsls	r3, r3, #30
 800d5d4:	d413      	bmi.n	800d5fe <_printf_i+0x23a>
 800d5d6:	68e0      	ldr	r0, [r4, #12]
 800d5d8:	9b03      	ldr	r3, [sp, #12]
 800d5da:	4298      	cmp	r0, r3
 800d5dc:	bfb8      	it	lt
 800d5de:	4618      	movlt	r0, r3
 800d5e0:	e7a4      	b.n	800d52c <_printf_i+0x168>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	4632      	mov	r2, r6
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	47d0      	blx	sl
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	d09b      	beq.n	800d528 <_printf_i+0x164>
 800d5f0:	3501      	adds	r5, #1
 800d5f2:	68e3      	ldr	r3, [r4, #12]
 800d5f4:	9903      	ldr	r1, [sp, #12]
 800d5f6:	1a5b      	subs	r3, r3, r1
 800d5f8:	42ab      	cmp	r3, r5
 800d5fa:	dcf2      	bgt.n	800d5e2 <_printf_i+0x21e>
 800d5fc:	e7eb      	b.n	800d5d6 <_printf_i+0x212>
 800d5fe:	2500      	movs	r5, #0
 800d600:	f104 0619 	add.w	r6, r4, #25
 800d604:	e7f5      	b.n	800d5f2 <_printf_i+0x22e>
 800d606:	bf00      	nop
 800d608:	0800fce6 	.word	0x0800fce6
 800d60c:	0800fcf7 	.word	0x0800fcf7

0800d610 <_sbrk_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d06      	ldr	r5, [pc, #24]	; (800d62c <_sbrk_r+0x1c>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	f7f6 ff9c 	bl	8004558 <_sbrk>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_sbrk_r+0x1a>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_sbrk_r+0x1a>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	200015d8 	.word	0x200015d8

0800d630 <siprintf>:
 800d630:	b40e      	push	{r1, r2, r3}
 800d632:	b500      	push	{lr}
 800d634:	b09c      	sub	sp, #112	; 0x70
 800d636:	ab1d      	add	r3, sp, #116	; 0x74
 800d638:	9002      	str	r0, [sp, #8]
 800d63a:	9006      	str	r0, [sp, #24]
 800d63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d640:	4809      	ldr	r0, [pc, #36]	; (800d668 <siprintf+0x38>)
 800d642:	9107      	str	r1, [sp, #28]
 800d644:	9104      	str	r1, [sp, #16]
 800d646:	4909      	ldr	r1, [pc, #36]	; (800d66c <siprintf+0x3c>)
 800d648:	f853 2b04 	ldr.w	r2, [r3], #4
 800d64c:	9105      	str	r1, [sp, #20]
 800d64e:	6800      	ldr	r0, [r0, #0]
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	a902      	add	r1, sp, #8
 800d654:	f001 fa8c 	bl	800eb70 <_svfiprintf_r>
 800d658:	9b02      	ldr	r3, [sp, #8]
 800d65a:	2200      	movs	r2, #0
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	b01c      	add	sp, #112	; 0x70
 800d660:	f85d eb04 	ldr.w	lr, [sp], #4
 800d664:	b003      	add	sp, #12
 800d666:	4770      	bx	lr
 800d668:	20000320 	.word	0x20000320
 800d66c:	ffff0208 	.word	0xffff0208

0800d670 <quorem>:
 800d670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	6903      	ldr	r3, [r0, #16]
 800d676:	690c      	ldr	r4, [r1, #16]
 800d678:	42a3      	cmp	r3, r4
 800d67a:	4607      	mov	r7, r0
 800d67c:	f2c0 8081 	blt.w	800d782 <quorem+0x112>
 800d680:	3c01      	subs	r4, #1
 800d682:	f101 0814 	add.w	r8, r1, #20
 800d686:	f100 0514 	add.w	r5, r0, #20
 800d68a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d698:	3301      	adds	r3, #1
 800d69a:	429a      	cmp	r2, r3
 800d69c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d6a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6a8:	d331      	bcc.n	800d70e <quorem+0x9e>
 800d6aa:	f04f 0e00 	mov.w	lr, #0
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	46ac      	mov	ip, r5
 800d6b2:	46f2      	mov	sl, lr
 800d6b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d6b8:	b293      	uxth	r3, r2
 800d6ba:	fb06 e303 	mla	r3, r6, r3, lr
 800d6be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	ebaa 0303 	sub.w	r3, sl, r3
 800d6c8:	f8dc a000 	ldr.w	sl, [ip]
 800d6cc:	0c12      	lsrs	r2, r2, #16
 800d6ce:	fa13 f38a 	uxtah	r3, r3, sl
 800d6d2:	fb06 e202 	mla	r2, r6, r2, lr
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6de:	b292      	uxth	r2, r2
 800d6e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d6e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6ec:	4581      	cmp	r9, r0
 800d6ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6f2:	f84c 3b04 	str.w	r3, [ip], #4
 800d6f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6fa:	d2db      	bcs.n	800d6b4 <quorem+0x44>
 800d6fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800d700:	b92b      	cbnz	r3, 800d70e <quorem+0x9e>
 800d702:	9b01      	ldr	r3, [sp, #4]
 800d704:	3b04      	subs	r3, #4
 800d706:	429d      	cmp	r5, r3
 800d708:	461a      	mov	r2, r3
 800d70a:	d32e      	bcc.n	800d76a <quorem+0xfa>
 800d70c:	613c      	str	r4, [r7, #16]
 800d70e:	4638      	mov	r0, r7
 800d710:	f001 f8ba 	bl	800e888 <__mcmp>
 800d714:	2800      	cmp	r0, #0
 800d716:	db24      	blt.n	800d762 <quorem+0xf2>
 800d718:	3601      	adds	r6, #1
 800d71a:	4628      	mov	r0, r5
 800d71c:	f04f 0c00 	mov.w	ip, #0
 800d720:	f858 2b04 	ldr.w	r2, [r8], #4
 800d724:	f8d0 e000 	ldr.w	lr, [r0]
 800d728:	b293      	uxth	r3, r2
 800d72a:	ebac 0303 	sub.w	r3, ip, r3
 800d72e:	0c12      	lsrs	r2, r2, #16
 800d730:	fa13 f38e 	uxtah	r3, r3, lr
 800d734:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d742:	45c1      	cmp	r9, r8
 800d744:	f840 3b04 	str.w	r3, [r0], #4
 800d748:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d74c:	d2e8      	bcs.n	800d720 <quorem+0xb0>
 800d74e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d756:	b922      	cbnz	r2, 800d762 <quorem+0xf2>
 800d758:	3b04      	subs	r3, #4
 800d75a:	429d      	cmp	r5, r3
 800d75c:	461a      	mov	r2, r3
 800d75e:	d30a      	bcc.n	800d776 <quorem+0x106>
 800d760:	613c      	str	r4, [r7, #16]
 800d762:	4630      	mov	r0, r6
 800d764:	b003      	add	sp, #12
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76a:	6812      	ldr	r2, [r2, #0]
 800d76c:	3b04      	subs	r3, #4
 800d76e:	2a00      	cmp	r2, #0
 800d770:	d1cc      	bne.n	800d70c <quorem+0x9c>
 800d772:	3c01      	subs	r4, #1
 800d774:	e7c7      	b.n	800d706 <quorem+0x96>
 800d776:	6812      	ldr	r2, [r2, #0]
 800d778:	3b04      	subs	r3, #4
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	d1f0      	bne.n	800d760 <quorem+0xf0>
 800d77e:	3c01      	subs	r4, #1
 800d780:	e7eb      	b.n	800d75a <quorem+0xea>
 800d782:	2000      	movs	r0, #0
 800d784:	e7ee      	b.n	800d764 <quorem+0xf4>
	...

0800d788 <_dtoa_r>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	ed2d 8b04 	vpush	{d8-d9}
 800d790:	ec57 6b10 	vmov	r6, r7, d0
 800d794:	b093      	sub	sp, #76	; 0x4c
 800d796:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d798:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d79c:	9106      	str	r1, [sp, #24]
 800d79e:	ee10 aa10 	vmov	sl, s0
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d7a6:	930c      	str	r3, [sp, #48]	; 0x30
 800d7a8:	46bb      	mov	fp, r7
 800d7aa:	b975      	cbnz	r5, 800d7ca <_dtoa_r+0x42>
 800d7ac:	2010      	movs	r0, #16
 800d7ae:	f7ff f9bf 	bl	800cb30 <malloc>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	6260      	str	r0, [r4, #36]	; 0x24
 800d7b6:	b920      	cbnz	r0, 800d7c2 <_dtoa_r+0x3a>
 800d7b8:	4ba7      	ldr	r3, [pc, #668]	; (800da58 <_dtoa_r+0x2d0>)
 800d7ba:	21ea      	movs	r1, #234	; 0xea
 800d7bc:	48a7      	ldr	r0, [pc, #668]	; (800da5c <_dtoa_r+0x2d4>)
 800d7be:	f001 fad7 	bl	800ed70 <__assert_func>
 800d7c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d7c6:	6005      	str	r5, [r0, #0]
 800d7c8:	60c5      	str	r5, [r0, #12]
 800d7ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7cc:	6819      	ldr	r1, [r3, #0]
 800d7ce:	b151      	cbz	r1, 800d7e6 <_dtoa_r+0x5e>
 800d7d0:	685a      	ldr	r2, [r3, #4]
 800d7d2:	604a      	str	r2, [r1, #4]
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	4093      	lsls	r3, r2
 800d7d8:	608b      	str	r3, [r1, #8]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f000 fe12 	bl	800e404 <_Bfree>
 800d7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	1e3b      	subs	r3, r7, #0
 800d7e8:	bfaa      	itet	ge
 800d7ea:	2300      	movge	r3, #0
 800d7ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d7f0:	f8c8 3000 	strge.w	r3, [r8]
 800d7f4:	4b9a      	ldr	r3, [pc, #616]	; (800da60 <_dtoa_r+0x2d8>)
 800d7f6:	bfbc      	itt	lt
 800d7f8:	2201      	movlt	r2, #1
 800d7fa:	f8c8 2000 	strlt.w	r2, [r8]
 800d7fe:	ea33 030b 	bics.w	r3, r3, fp
 800d802:	d11b      	bne.n	800d83c <_dtoa_r+0xb4>
 800d804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d806:	f242 730f 	movw	r3, #9999	; 0x270f
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d810:	4333      	orrs	r3, r6
 800d812:	f000 8592 	beq.w	800e33a <_dtoa_r+0xbb2>
 800d816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d818:	b963      	cbnz	r3, 800d834 <_dtoa_r+0xac>
 800d81a:	4b92      	ldr	r3, [pc, #584]	; (800da64 <_dtoa_r+0x2dc>)
 800d81c:	e022      	b.n	800d864 <_dtoa_r+0xdc>
 800d81e:	4b92      	ldr	r3, [pc, #584]	; (800da68 <_dtoa_r+0x2e0>)
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	3308      	adds	r3, #8
 800d824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	9801      	ldr	r0, [sp, #4]
 800d82a:	b013      	add	sp, #76	; 0x4c
 800d82c:	ecbd 8b04 	vpop	{d8-d9}
 800d830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d834:	4b8b      	ldr	r3, [pc, #556]	; (800da64 <_dtoa_r+0x2dc>)
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	3303      	adds	r3, #3
 800d83a:	e7f3      	b.n	800d824 <_dtoa_r+0x9c>
 800d83c:	2200      	movs	r2, #0
 800d83e:	2300      	movs	r3, #0
 800d840:	4650      	mov	r0, sl
 800d842:	4659      	mov	r1, fp
 800d844:	f7f3 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 800d848:	ec4b ab19 	vmov	d9, sl, fp
 800d84c:	4680      	mov	r8, r0
 800d84e:	b158      	cbz	r0, 800d868 <_dtoa_r+0xe0>
 800d850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d852:	2301      	movs	r3, #1
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f000 856b 	beq.w	800e334 <_dtoa_r+0xbac>
 800d85e:	4883      	ldr	r0, [pc, #524]	; (800da6c <_dtoa_r+0x2e4>)
 800d860:	6018      	str	r0, [r3, #0]
 800d862:	1e43      	subs	r3, r0, #1
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	e7df      	b.n	800d828 <_dtoa_r+0xa0>
 800d868:	ec4b ab10 	vmov	d0, sl, fp
 800d86c:	aa10      	add	r2, sp, #64	; 0x40
 800d86e:	a911      	add	r1, sp, #68	; 0x44
 800d870:	4620      	mov	r0, r4
 800d872:	f001 f8af 	bl	800e9d4 <__d2b>
 800d876:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d87a:	ee08 0a10 	vmov	s16, r0
 800d87e:	2d00      	cmp	r5, #0
 800d880:	f000 8084 	beq.w	800d98c <_dtoa_r+0x204>
 800d884:	ee19 3a90 	vmov	r3, s19
 800d888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d88c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d890:	4656      	mov	r6, sl
 800d892:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d89a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d89e:	4b74      	ldr	r3, [pc, #464]	; (800da70 <_dtoa_r+0x2e8>)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f7f2 fcef 	bl	8000288 <__aeabi_dsub>
 800d8aa:	a365      	add	r3, pc, #404	; (adr r3, 800da40 <_dtoa_r+0x2b8>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fea2 	bl	80005f8 <__aeabi_dmul>
 800d8b4:	a364      	add	r3, pc, #400	; (adr r3, 800da48 <_dtoa_r+0x2c0>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	f7f2 fce7 	bl	800028c <__adddf3>
 800d8be:	4606      	mov	r6, r0
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	460f      	mov	r7, r1
 800d8c4:	f7f2 fe2e 	bl	8000524 <__aeabi_i2d>
 800d8c8:	a361      	add	r3, pc, #388	; (adr r3, 800da50 <_dtoa_r+0x2c8>)
 800d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ce:	f7f2 fe93 	bl	80005f8 <__aeabi_dmul>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 fcd7 	bl	800028c <__adddf3>
 800d8de:	4606      	mov	r6, r0
 800d8e0:	460f      	mov	r7, r1
 800d8e2:	f7f3 f939 	bl	8000b58 <__aeabi_d2iz>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	9000      	str	r0, [sp, #0]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	4639      	mov	r1, r7
 800d8f0:	f7f3 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800d8f4:	b150      	cbz	r0, 800d90c <_dtoa_r+0x184>
 800d8f6:	9800      	ldr	r0, [sp, #0]
 800d8f8:	f7f2 fe14 	bl	8000524 <__aeabi_i2d>
 800d8fc:	4632      	mov	r2, r6
 800d8fe:	463b      	mov	r3, r7
 800d900:	f7f3 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d904:	b910      	cbnz	r0, 800d90c <_dtoa_r+0x184>
 800d906:	9b00      	ldr	r3, [sp, #0]
 800d908:	3b01      	subs	r3, #1
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	2b16      	cmp	r3, #22
 800d910:	d85a      	bhi.n	800d9c8 <_dtoa_r+0x240>
 800d912:	9a00      	ldr	r2, [sp, #0]
 800d914:	4b57      	ldr	r3, [pc, #348]	; (800da74 <_dtoa_r+0x2ec>)
 800d916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	ec51 0b19 	vmov	r0, r1, d9
 800d922:	f7f3 f8db 	bl	8000adc <__aeabi_dcmplt>
 800d926:	2800      	cmp	r0, #0
 800d928:	d050      	beq.n	800d9cc <_dtoa_r+0x244>
 800d92a:	9b00      	ldr	r3, [sp, #0]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	2300      	movs	r3, #0
 800d932:	930b      	str	r3, [sp, #44]	; 0x2c
 800d934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d936:	1b5d      	subs	r5, r3, r5
 800d938:	1e6b      	subs	r3, r5, #1
 800d93a:	9305      	str	r3, [sp, #20]
 800d93c:	bf45      	ittet	mi
 800d93e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d942:	9304      	strmi	r3, [sp, #16]
 800d944:	2300      	movpl	r3, #0
 800d946:	2300      	movmi	r3, #0
 800d948:	bf4c      	ite	mi
 800d94a:	9305      	strmi	r3, [sp, #20]
 800d94c:	9304      	strpl	r3, [sp, #16]
 800d94e:	9b00      	ldr	r3, [sp, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	db3d      	blt.n	800d9d0 <_dtoa_r+0x248>
 800d954:	9b05      	ldr	r3, [sp, #20]
 800d956:	9a00      	ldr	r2, [sp, #0]
 800d958:	920a      	str	r2, [sp, #40]	; 0x28
 800d95a:	4413      	add	r3, r2
 800d95c:	9305      	str	r3, [sp, #20]
 800d95e:	2300      	movs	r3, #0
 800d960:	9307      	str	r3, [sp, #28]
 800d962:	9b06      	ldr	r3, [sp, #24]
 800d964:	2b09      	cmp	r3, #9
 800d966:	f200 8089 	bhi.w	800da7c <_dtoa_r+0x2f4>
 800d96a:	2b05      	cmp	r3, #5
 800d96c:	bfc4      	itt	gt
 800d96e:	3b04      	subgt	r3, #4
 800d970:	9306      	strgt	r3, [sp, #24]
 800d972:	9b06      	ldr	r3, [sp, #24]
 800d974:	f1a3 0302 	sub.w	r3, r3, #2
 800d978:	bfcc      	ite	gt
 800d97a:	2500      	movgt	r5, #0
 800d97c:	2501      	movle	r5, #1
 800d97e:	2b03      	cmp	r3, #3
 800d980:	f200 8087 	bhi.w	800da92 <_dtoa_r+0x30a>
 800d984:	e8df f003 	tbb	[pc, r3]
 800d988:	59383a2d 	.word	0x59383a2d
 800d98c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d990:	441d      	add	r5, r3
 800d992:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d996:	2b20      	cmp	r3, #32
 800d998:	bfc1      	itttt	gt
 800d99a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d99e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d9a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d9a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d9aa:	bfda      	itte	le
 800d9ac:	f1c3 0320 	rsble	r3, r3, #32
 800d9b0:	fa06 f003 	lslle.w	r0, r6, r3
 800d9b4:	4318      	orrgt	r0, r3
 800d9b6:	f7f2 fda5 	bl	8000504 <__aeabi_ui2d>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	4606      	mov	r6, r0
 800d9be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d9c2:	3d01      	subs	r5, #1
 800d9c4:	930e      	str	r3, [sp, #56]	; 0x38
 800d9c6:	e76a      	b.n	800d89e <_dtoa_r+0x116>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e7b2      	b.n	800d932 <_dtoa_r+0x1aa>
 800d9cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9ce:	e7b1      	b.n	800d934 <_dtoa_r+0x1ac>
 800d9d0:	9b04      	ldr	r3, [sp, #16]
 800d9d2:	9a00      	ldr	r2, [sp, #0]
 800d9d4:	1a9b      	subs	r3, r3, r2
 800d9d6:	9304      	str	r3, [sp, #16]
 800d9d8:	4253      	negs	r3, r2
 800d9da:	9307      	str	r3, [sp, #28]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	930a      	str	r3, [sp, #40]	; 0x28
 800d9e0:	e7bf      	b.n	800d962 <_dtoa_r+0x1da>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	9308      	str	r3, [sp, #32]
 800d9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	dc55      	bgt.n	800da98 <_dtoa_r+0x310>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9f6:	e00c      	b.n	800da12 <_dtoa_r+0x28a>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e7f3      	b.n	800d9e4 <_dtoa_r+0x25c>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da00:	9308      	str	r3, [sp, #32]
 800da02:	9b00      	ldr	r3, [sp, #0]
 800da04:	4413      	add	r3, r2
 800da06:	9302      	str	r3, [sp, #8]
 800da08:	3301      	adds	r3, #1
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	9303      	str	r3, [sp, #12]
 800da0e:	bfb8      	it	lt
 800da10:	2301      	movlt	r3, #1
 800da12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da14:	2200      	movs	r2, #0
 800da16:	6042      	str	r2, [r0, #4]
 800da18:	2204      	movs	r2, #4
 800da1a:	f102 0614 	add.w	r6, r2, #20
 800da1e:	429e      	cmp	r6, r3
 800da20:	6841      	ldr	r1, [r0, #4]
 800da22:	d93d      	bls.n	800daa0 <_dtoa_r+0x318>
 800da24:	4620      	mov	r0, r4
 800da26:	f000 fcad 	bl	800e384 <_Balloc>
 800da2a:	9001      	str	r0, [sp, #4]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d13b      	bne.n	800daa8 <_dtoa_r+0x320>
 800da30:	4b11      	ldr	r3, [pc, #68]	; (800da78 <_dtoa_r+0x2f0>)
 800da32:	4602      	mov	r2, r0
 800da34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da38:	e6c0      	b.n	800d7bc <_dtoa_r+0x34>
 800da3a:	2301      	movs	r3, #1
 800da3c:	e7df      	b.n	800d9fe <_dtoa_r+0x276>
 800da3e:	bf00      	nop
 800da40:	636f4361 	.word	0x636f4361
 800da44:	3fd287a7 	.word	0x3fd287a7
 800da48:	8b60c8b3 	.word	0x8b60c8b3
 800da4c:	3fc68a28 	.word	0x3fc68a28
 800da50:	509f79fb 	.word	0x509f79fb
 800da54:	3fd34413 	.word	0x3fd34413
 800da58:	0800fd15 	.word	0x0800fd15
 800da5c:	0800fd2c 	.word	0x0800fd2c
 800da60:	7ff00000 	.word	0x7ff00000
 800da64:	0800fd11 	.word	0x0800fd11
 800da68:	0800fd08 	.word	0x0800fd08
 800da6c:	0800fce5 	.word	0x0800fce5
 800da70:	3ff80000 	.word	0x3ff80000
 800da74:	0800fe20 	.word	0x0800fe20
 800da78:	0800fd87 	.word	0x0800fd87
 800da7c:	2501      	movs	r5, #1
 800da7e:	2300      	movs	r3, #0
 800da80:	9306      	str	r3, [sp, #24]
 800da82:	9508      	str	r5, [sp, #32]
 800da84:	f04f 33ff 	mov.w	r3, #4294967295
 800da88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da8c:	2200      	movs	r2, #0
 800da8e:	2312      	movs	r3, #18
 800da90:	e7b0      	b.n	800d9f4 <_dtoa_r+0x26c>
 800da92:	2301      	movs	r3, #1
 800da94:	9308      	str	r3, [sp, #32]
 800da96:	e7f5      	b.n	800da84 <_dtoa_r+0x2fc>
 800da98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da9e:	e7b8      	b.n	800da12 <_dtoa_r+0x28a>
 800daa0:	3101      	adds	r1, #1
 800daa2:	6041      	str	r1, [r0, #4]
 800daa4:	0052      	lsls	r2, r2, #1
 800daa6:	e7b8      	b.n	800da1a <_dtoa_r+0x292>
 800daa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daaa:	9a01      	ldr	r2, [sp, #4]
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	9b03      	ldr	r3, [sp, #12]
 800dab0:	2b0e      	cmp	r3, #14
 800dab2:	f200 809d 	bhi.w	800dbf0 <_dtoa_r+0x468>
 800dab6:	2d00      	cmp	r5, #0
 800dab8:	f000 809a 	beq.w	800dbf0 <_dtoa_r+0x468>
 800dabc:	9b00      	ldr	r3, [sp, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dd32      	ble.n	800db28 <_dtoa_r+0x3a0>
 800dac2:	4ab7      	ldr	r2, [pc, #732]	; (800dda0 <_dtoa_r+0x618>)
 800dac4:	f003 030f 	and.w	r3, r3, #15
 800dac8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dacc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dad0:	9b00      	ldr	r3, [sp, #0]
 800dad2:	05d8      	lsls	r0, r3, #23
 800dad4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dad8:	d516      	bpl.n	800db08 <_dtoa_r+0x380>
 800dada:	4bb2      	ldr	r3, [pc, #712]	; (800dda4 <_dtoa_r+0x61c>)
 800dadc:	ec51 0b19 	vmov	r0, r1, d9
 800dae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dae4:	f7f2 feb2 	bl	800084c <__aeabi_ddiv>
 800dae8:	f007 070f 	and.w	r7, r7, #15
 800daec:	4682      	mov	sl, r0
 800daee:	468b      	mov	fp, r1
 800daf0:	2503      	movs	r5, #3
 800daf2:	4eac      	ldr	r6, [pc, #688]	; (800dda4 <_dtoa_r+0x61c>)
 800daf4:	b957      	cbnz	r7, 800db0c <_dtoa_r+0x384>
 800daf6:	4642      	mov	r2, r8
 800daf8:	464b      	mov	r3, r9
 800dafa:	4650      	mov	r0, sl
 800dafc:	4659      	mov	r1, fp
 800dafe:	f7f2 fea5 	bl	800084c <__aeabi_ddiv>
 800db02:	4682      	mov	sl, r0
 800db04:	468b      	mov	fp, r1
 800db06:	e028      	b.n	800db5a <_dtoa_r+0x3d2>
 800db08:	2502      	movs	r5, #2
 800db0a:	e7f2      	b.n	800daf2 <_dtoa_r+0x36a>
 800db0c:	07f9      	lsls	r1, r7, #31
 800db0e:	d508      	bpl.n	800db22 <_dtoa_r+0x39a>
 800db10:	4640      	mov	r0, r8
 800db12:	4649      	mov	r1, r9
 800db14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db18:	f7f2 fd6e 	bl	80005f8 <__aeabi_dmul>
 800db1c:	3501      	adds	r5, #1
 800db1e:	4680      	mov	r8, r0
 800db20:	4689      	mov	r9, r1
 800db22:	107f      	asrs	r7, r7, #1
 800db24:	3608      	adds	r6, #8
 800db26:	e7e5      	b.n	800daf4 <_dtoa_r+0x36c>
 800db28:	f000 809b 	beq.w	800dc62 <_dtoa_r+0x4da>
 800db2c:	9b00      	ldr	r3, [sp, #0]
 800db2e:	4f9d      	ldr	r7, [pc, #628]	; (800dda4 <_dtoa_r+0x61c>)
 800db30:	425e      	negs	r6, r3
 800db32:	4b9b      	ldr	r3, [pc, #620]	; (800dda0 <_dtoa_r+0x618>)
 800db34:	f006 020f 	and.w	r2, r6, #15
 800db38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	ec51 0b19 	vmov	r0, r1, d9
 800db44:	f7f2 fd58 	bl	80005f8 <__aeabi_dmul>
 800db48:	1136      	asrs	r6, r6, #4
 800db4a:	4682      	mov	sl, r0
 800db4c:	468b      	mov	fp, r1
 800db4e:	2300      	movs	r3, #0
 800db50:	2502      	movs	r5, #2
 800db52:	2e00      	cmp	r6, #0
 800db54:	d17a      	bne.n	800dc4c <_dtoa_r+0x4c4>
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1d3      	bne.n	800db02 <_dtoa_r+0x37a>
 800db5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 8082 	beq.w	800dc66 <_dtoa_r+0x4de>
 800db62:	4b91      	ldr	r3, [pc, #580]	; (800dda8 <_dtoa_r+0x620>)
 800db64:	2200      	movs	r2, #0
 800db66:	4650      	mov	r0, sl
 800db68:	4659      	mov	r1, fp
 800db6a:	f7f2 ffb7 	bl	8000adc <__aeabi_dcmplt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d079      	beq.n	800dc66 <_dtoa_r+0x4de>
 800db72:	9b03      	ldr	r3, [sp, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d076      	beq.n	800dc66 <_dtoa_r+0x4de>
 800db78:	9b02      	ldr	r3, [sp, #8]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	dd36      	ble.n	800dbec <_dtoa_r+0x464>
 800db7e:	9b00      	ldr	r3, [sp, #0]
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	1e5f      	subs	r7, r3, #1
 800db86:	2200      	movs	r2, #0
 800db88:	4b88      	ldr	r3, [pc, #544]	; (800ddac <_dtoa_r+0x624>)
 800db8a:	f7f2 fd35 	bl	80005f8 <__aeabi_dmul>
 800db8e:	9e02      	ldr	r6, [sp, #8]
 800db90:	4682      	mov	sl, r0
 800db92:	468b      	mov	fp, r1
 800db94:	3501      	adds	r5, #1
 800db96:	4628      	mov	r0, r5
 800db98:	f7f2 fcc4 	bl	8000524 <__aeabi_i2d>
 800db9c:	4652      	mov	r2, sl
 800db9e:	465b      	mov	r3, fp
 800dba0:	f7f2 fd2a 	bl	80005f8 <__aeabi_dmul>
 800dba4:	4b82      	ldr	r3, [pc, #520]	; (800ddb0 <_dtoa_r+0x628>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	f7f2 fb70 	bl	800028c <__adddf3>
 800dbac:	46d0      	mov	r8, sl
 800dbae:	46d9      	mov	r9, fp
 800dbb0:	4682      	mov	sl, r0
 800dbb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	d158      	bne.n	800dc6c <_dtoa_r+0x4e4>
 800dbba:	4b7e      	ldr	r3, [pc, #504]	; (800ddb4 <_dtoa_r+0x62c>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	f7f2 fb61 	bl	8000288 <__aeabi_dsub>
 800dbc6:	4652      	mov	r2, sl
 800dbc8:	465b      	mov	r3, fp
 800dbca:	4680      	mov	r8, r0
 800dbcc:	4689      	mov	r9, r1
 800dbce:	f7f2 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	f040 8295 	bne.w	800e102 <_dtoa_r+0x97a>
 800dbd8:	4652      	mov	r2, sl
 800dbda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dbde:	4640      	mov	r0, r8
 800dbe0:	4649      	mov	r1, r9
 800dbe2:	f7f2 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f040 8289 	bne.w	800e0fe <_dtoa_r+0x976>
 800dbec:	ec5b ab19 	vmov	sl, fp, d9
 800dbf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f2c0 8148 	blt.w	800de88 <_dtoa_r+0x700>
 800dbf8:	9a00      	ldr	r2, [sp, #0]
 800dbfa:	2a0e      	cmp	r2, #14
 800dbfc:	f300 8144 	bgt.w	800de88 <_dtoa_r+0x700>
 800dc00:	4b67      	ldr	r3, [pc, #412]	; (800dda0 <_dtoa_r+0x618>)
 800dc02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f280 80d5 	bge.w	800ddbc <_dtoa_r+0x634>
 800dc12:	9b03      	ldr	r3, [sp, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f300 80d1 	bgt.w	800ddbc <_dtoa_r+0x634>
 800dc1a:	f040 826f 	bne.w	800e0fc <_dtoa_r+0x974>
 800dc1e:	4b65      	ldr	r3, [pc, #404]	; (800ddb4 <_dtoa_r+0x62c>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	4640      	mov	r0, r8
 800dc24:	4649      	mov	r1, r9
 800dc26:	f7f2 fce7 	bl	80005f8 <__aeabi_dmul>
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	465b      	mov	r3, fp
 800dc2e:	f7f2 ff69 	bl	8000b04 <__aeabi_dcmpge>
 800dc32:	9e03      	ldr	r6, [sp, #12]
 800dc34:	4637      	mov	r7, r6
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f040 8245 	bne.w	800e0c6 <_dtoa_r+0x93e>
 800dc3c:	9d01      	ldr	r5, [sp, #4]
 800dc3e:	2331      	movs	r3, #49	; 0x31
 800dc40:	f805 3b01 	strb.w	r3, [r5], #1
 800dc44:	9b00      	ldr	r3, [sp, #0]
 800dc46:	3301      	adds	r3, #1
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	e240      	b.n	800e0ce <_dtoa_r+0x946>
 800dc4c:	07f2      	lsls	r2, r6, #31
 800dc4e:	d505      	bpl.n	800dc5c <_dtoa_r+0x4d4>
 800dc50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc54:	f7f2 fcd0 	bl	80005f8 <__aeabi_dmul>
 800dc58:	3501      	adds	r5, #1
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	1076      	asrs	r6, r6, #1
 800dc5e:	3708      	adds	r7, #8
 800dc60:	e777      	b.n	800db52 <_dtoa_r+0x3ca>
 800dc62:	2502      	movs	r5, #2
 800dc64:	e779      	b.n	800db5a <_dtoa_r+0x3d2>
 800dc66:	9f00      	ldr	r7, [sp, #0]
 800dc68:	9e03      	ldr	r6, [sp, #12]
 800dc6a:	e794      	b.n	800db96 <_dtoa_r+0x40e>
 800dc6c:	9901      	ldr	r1, [sp, #4]
 800dc6e:	4b4c      	ldr	r3, [pc, #304]	; (800dda0 <_dtoa_r+0x618>)
 800dc70:	4431      	add	r1, r6
 800dc72:	910d      	str	r1, [sp, #52]	; 0x34
 800dc74:	9908      	ldr	r1, [sp, #32]
 800dc76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc7e:	2900      	cmp	r1, #0
 800dc80:	d043      	beq.n	800dd0a <_dtoa_r+0x582>
 800dc82:	494d      	ldr	r1, [pc, #308]	; (800ddb8 <_dtoa_r+0x630>)
 800dc84:	2000      	movs	r0, #0
 800dc86:	f7f2 fde1 	bl	800084c <__aeabi_ddiv>
 800dc8a:	4652      	mov	r2, sl
 800dc8c:	465b      	mov	r3, fp
 800dc8e:	f7f2 fafb 	bl	8000288 <__aeabi_dsub>
 800dc92:	9d01      	ldr	r5, [sp, #4]
 800dc94:	4682      	mov	sl, r0
 800dc96:	468b      	mov	fp, r1
 800dc98:	4649      	mov	r1, r9
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	f7f2 ff5c 	bl	8000b58 <__aeabi_d2iz>
 800dca0:	4606      	mov	r6, r0
 800dca2:	f7f2 fc3f 	bl	8000524 <__aeabi_i2d>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4649      	mov	r1, r9
 800dcae:	f7f2 faeb 	bl	8000288 <__aeabi_dsub>
 800dcb2:	3630      	adds	r6, #48	; 0x30
 800dcb4:	f805 6b01 	strb.w	r6, [r5], #1
 800dcb8:	4652      	mov	r2, sl
 800dcba:	465b      	mov	r3, fp
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	f7f2 ff0c 	bl	8000adc <__aeabi_dcmplt>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d163      	bne.n	800dd90 <_dtoa_r+0x608>
 800dcc8:	4642      	mov	r2, r8
 800dcca:	464b      	mov	r3, r9
 800dccc:	4936      	ldr	r1, [pc, #216]	; (800dda8 <_dtoa_r+0x620>)
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f7f2 fada 	bl	8000288 <__aeabi_dsub>
 800dcd4:	4652      	mov	r2, sl
 800dcd6:	465b      	mov	r3, fp
 800dcd8:	f7f2 ff00 	bl	8000adc <__aeabi_dcmplt>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	f040 80b5 	bne.w	800de4c <_dtoa_r+0x6c4>
 800dce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce4:	429d      	cmp	r5, r3
 800dce6:	d081      	beq.n	800dbec <_dtoa_r+0x464>
 800dce8:	4b30      	ldr	r3, [pc, #192]	; (800ddac <_dtoa_r+0x624>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	4650      	mov	r0, sl
 800dcee:	4659      	mov	r1, fp
 800dcf0:	f7f2 fc82 	bl	80005f8 <__aeabi_dmul>
 800dcf4:	4b2d      	ldr	r3, [pc, #180]	; (800ddac <_dtoa_r+0x624>)
 800dcf6:	4682      	mov	sl, r0
 800dcf8:	468b      	mov	fp, r1
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	4649      	mov	r1, r9
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f7f2 fc7a 	bl	80005f8 <__aeabi_dmul>
 800dd04:	4680      	mov	r8, r0
 800dd06:	4689      	mov	r9, r1
 800dd08:	e7c6      	b.n	800dc98 <_dtoa_r+0x510>
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	4659      	mov	r1, fp
 800dd0e:	f7f2 fc73 	bl	80005f8 <__aeabi_dmul>
 800dd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd14:	9d01      	ldr	r5, [sp, #4]
 800dd16:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd18:	4682      	mov	sl, r0
 800dd1a:	468b      	mov	fp, r1
 800dd1c:	4649      	mov	r1, r9
 800dd1e:	4640      	mov	r0, r8
 800dd20:	f7f2 ff1a 	bl	8000b58 <__aeabi_d2iz>
 800dd24:	4606      	mov	r6, r0
 800dd26:	f7f2 fbfd 	bl	8000524 <__aeabi_i2d>
 800dd2a:	3630      	adds	r6, #48	; 0x30
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	460b      	mov	r3, r1
 800dd30:	4640      	mov	r0, r8
 800dd32:	4649      	mov	r1, r9
 800dd34:	f7f2 faa8 	bl	8000288 <__aeabi_dsub>
 800dd38:	f805 6b01 	strb.w	r6, [r5], #1
 800dd3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd3e:	429d      	cmp	r5, r3
 800dd40:	4680      	mov	r8, r0
 800dd42:	4689      	mov	r9, r1
 800dd44:	f04f 0200 	mov.w	r2, #0
 800dd48:	d124      	bne.n	800dd94 <_dtoa_r+0x60c>
 800dd4a:	4b1b      	ldr	r3, [pc, #108]	; (800ddb8 <_dtoa_r+0x630>)
 800dd4c:	4650      	mov	r0, sl
 800dd4e:	4659      	mov	r1, fp
 800dd50:	f7f2 fa9c 	bl	800028c <__adddf3>
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	4640      	mov	r0, r8
 800dd5a:	4649      	mov	r1, r9
 800dd5c:	f7f2 fedc 	bl	8000b18 <__aeabi_dcmpgt>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d173      	bne.n	800de4c <_dtoa_r+0x6c4>
 800dd64:	4652      	mov	r2, sl
 800dd66:	465b      	mov	r3, fp
 800dd68:	4913      	ldr	r1, [pc, #76]	; (800ddb8 <_dtoa_r+0x630>)
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	f7f2 fa8c 	bl	8000288 <__aeabi_dsub>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4640      	mov	r0, r8
 800dd76:	4649      	mov	r1, r9
 800dd78:	f7f2 feb0 	bl	8000adc <__aeabi_dcmplt>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	f43f af35 	beq.w	800dbec <_dtoa_r+0x464>
 800dd82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd84:	1e6b      	subs	r3, r5, #1
 800dd86:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd8c:	2b30      	cmp	r3, #48	; 0x30
 800dd8e:	d0f8      	beq.n	800dd82 <_dtoa_r+0x5fa>
 800dd90:	9700      	str	r7, [sp, #0]
 800dd92:	e049      	b.n	800de28 <_dtoa_r+0x6a0>
 800dd94:	4b05      	ldr	r3, [pc, #20]	; (800ddac <_dtoa_r+0x624>)
 800dd96:	f7f2 fc2f 	bl	80005f8 <__aeabi_dmul>
 800dd9a:	4680      	mov	r8, r0
 800dd9c:	4689      	mov	r9, r1
 800dd9e:	e7bd      	b.n	800dd1c <_dtoa_r+0x594>
 800dda0:	0800fe20 	.word	0x0800fe20
 800dda4:	0800fdf8 	.word	0x0800fdf8
 800dda8:	3ff00000 	.word	0x3ff00000
 800ddac:	40240000 	.word	0x40240000
 800ddb0:	401c0000 	.word	0x401c0000
 800ddb4:	40140000 	.word	0x40140000
 800ddb8:	3fe00000 	.word	0x3fe00000
 800ddbc:	9d01      	ldr	r5, [sp, #4]
 800ddbe:	4656      	mov	r6, sl
 800ddc0:	465f      	mov	r7, fp
 800ddc2:	4642      	mov	r2, r8
 800ddc4:	464b      	mov	r3, r9
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	4639      	mov	r1, r7
 800ddca:	f7f2 fd3f 	bl	800084c <__aeabi_ddiv>
 800ddce:	f7f2 fec3 	bl	8000b58 <__aeabi_d2iz>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	f7f2 fba6 	bl	8000524 <__aeabi_i2d>
 800ddd8:	4642      	mov	r2, r8
 800ddda:	464b      	mov	r3, r9
 800dddc:	f7f2 fc0c 	bl	80005f8 <__aeabi_dmul>
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4630      	mov	r0, r6
 800dde6:	4639      	mov	r1, r7
 800dde8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ddec:	f7f2 fa4c 	bl	8000288 <__aeabi_dsub>
 800ddf0:	f805 6b01 	strb.w	r6, [r5], #1
 800ddf4:	9e01      	ldr	r6, [sp, #4]
 800ddf6:	9f03      	ldr	r7, [sp, #12]
 800ddf8:	1bae      	subs	r6, r5, r6
 800ddfa:	42b7      	cmp	r7, r6
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	d135      	bne.n	800de6e <_dtoa_r+0x6e6>
 800de02:	f7f2 fa43 	bl	800028c <__adddf3>
 800de06:	4642      	mov	r2, r8
 800de08:	464b      	mov	r3, r9
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	f7f2 fe83 	bl	8000b18 <__aeabi_dcmpgt>
 800de12:	b9d0      	cbnz	r0, 800de4a <_dtoa_r+0x6c2>
 800de14:	4642      	mov	r2, r8
 800de16:	464b      	mov	r3, r9
 800de18:	4630      	mov	r0, r6
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 800de20:	b110      	cbz	r0, 800de28 <_dtoa_r+0x6a0>
 800de22:	f01a 0f01 	tst.w	sl, #1
 800de26:	d110      	bne.n	800de4a <_dtoa_r+0x6c2>
 800de28:	4620      	mov	r0, r4
 800de2a:	ee18 1a10 	vmov	r1, s16
 800de2e:	f000 fae9 	bl	800e404 <_Bfree>
 800de32:	2300      	movs	r3, #0
 800de34:	9800      	ldr	r0, [sp, #0]
 800de36:	702b      	strb	r3, [r5, #0]
 800de38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de3a:	3001      	adds	r0, #1
 800de3c:	6018      	str	r0, [r3, #0]
 800de3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de40:	2b00      	cmp	r3, #0
 800de42:	f43f acf1 	beq.w	800d828 <_dtoa_r+0xa0>
 800de46:	601d      	str	r5, [r3, #0]
 800de48:	e4ee      	b.n	800d828 <_dtoa_r+0xa0>
 800de4a:	9f00      	ldr	r7, [sp, #0]
 800de4c:	462b      	mov	r3, r5
 800de4e:	461d      	mov	r5, r3
 800de50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de54:	2a39      	cmp	r2, #57	; 0x39
 800de56:	d106      	bne.n	800de66 <_dtoa_r+0x6de>
 800de58:	9a01      	ldr	r2, [sp, #4]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d1f7      	bne.n	800de4e <_dtoa_r+0x6c6>
 800de5e:	9901      	ldr	r1, [sp, #4]
 800de60:	2230      	movs	r2, #48	; 0x30
 800de62:	3701      	adds	r7, #1
 800de64:	700a      	strb	r2, [r1, #0]
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	3201      	adds	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	e790      	b.n	800dd90 <_dtoa_r+0x608>
 800de6e:	4ba6      	ldr	r3, [pc, #664]	; (800e108 <_dtoa_r+0x980>)
 800de70:	2200      	movs	r2, #0
 800de72:	f7f2 fbc1 	bl	80005f8 <__aeabi_dmul>
 800de76:	2200      	movs	r2, #0
 800de78:	2300      	movs	r3, #0
 800de7a:	4606      	mov	r6, r0
 800de7c:	460f      	mov	r7, r1
 800de7e:	f7f2 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 800de82:	2800      	cmp	r0, #0
 800de84:	d09d      	beq.n	800ddc2 <_dtoa_r+0x63a>
 800de86:	e7cf      	b.n	800de28 <_dtoa_r+0x6a0>
 800de88:	9a08      	ldr	r2, [sp, #32]
 800de8a:	2a00      	cmp	r2, #0
 800de8c:	f000 80d7 	beq.w	800e03e <_dtoa_r+0x8b6>
 800de90:	9a06      	ldr	r2, [sp, #24]
 800de92:	2a01      	cmp	r2, #1
 800de94:	f300 80ba 	bgt.w	800e00c <_dtoa_r+0x884>
 800de98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de9a:	2a00      	cmp	r2, #0
 800de9c:	f000 80b2 	beq.w	800e004 <_dtoa_r+0x87c>
 800dea0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dea4:	9e07      	ldr	r6, [sp, #28]
 800dea6:	9d04      	ldr	r5, [sp, #16]
 800dea8:	9a04      	ldr	r2, [sp, #16]
 800deaa:	441a      	add	r2, r3
 800deac:	9204      	str	r2, [sp, #16]
 800deae:	9a05      	ldr	r2, [sp, #20]
 800deb0:	2101      	movs	r1, #1
 800deb2:	441a      	add	r2, r3
 800deb4:	4620      	mov	r0, r4
 800deb6:	9205      	str	r2, [sp, #20]
 800deb8:	f000 fb5c 	bl	800e574 <__i2b>
 800debc:	4607      	mov	r7, r0
 800debe:	2d00      	cmp	r5, #0
 800dec0:	dd0c      	ble.n	800dedc <_dtoa_r+0x754>
 800dec2:	9b05      	ldr	r3, [sp, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd09      	ble.n	800dedc <_dtoa_r+0x754>
 800dec8:	42ab      	cmp	r3, r5
 800deca:	9a04      	ldr	r2, [sp, #16]
 800decc:	bfa8      	it	ge
 800dece:	462b      	movge	r3, r5
 800ded0:	1ad2      	subs	r2, r2, r3
 800ded2:	9204      	str	r2, [sp, #16]
 800ded4:	9a05      	ldr	r2, [sp, #20]
 800ded6:	1aed      	subs	r5, r5, r3
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	9305      	str	r3, [sp, #20]
 800dedc:	9b07      	ldr	r3, [sp, #28]
 800dede:	b31b      	cbz	r3, 800df28 <_dtoa_r+0x7a0>
 800dee0:	9b08      	ldr	r3, [sp, #32]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f000 80af 	beq.w	800e046 <_dtoa_r+0x8be>
 800dee8:	2e00      	cmp	r6, #0
 800deea:	dd13      	ble.n	800df14 <_dtoa_r+0x78c>
 800deec:	4639      	mov	r1, r7
 800deee:	4632      	mov	r2, r6
 800def0:	4620      	mov	r0, r4
 800def2:	f000 fbff 	bl	800e6f4 <__pow5mult>
 800def6:	ee18 2a10 	vmov	r2, s16
 800defa:	4601      	mov	r1, r0
 800defc:	4607      	mov	r7, r0
 800defe:	4620      	mov	r0, r4
 800df00:	f000 fb4e 	bl	800e5a0 <__multiply>
 800df04:	ee18 1a10 	vmov	r1, s16
 800df08:	4680      	mov	r8, r0
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 fa7a 	bl	800e404 <_Bfree>
 800df10:	ee08 8a10 	vmov	s16, r8
 800df14:	9b07      	ldr	r3, [sp, #28]
 800df16:	1b9a      	subs	r2, r3, r6
 800df18:	d006      	beq.n	800df28 <_dtoa_r+0x7a0>
 800df1a:	ee18 1a10 	vmov	r1, s16
 800df1e:	4620      	mov	r0, r4
 800df20:	f000 fbe8 	bl	800e6f4 <__pow5mult>
 800df24:	ee08 0a10 	vmov	s16, r0
 800df28:	2101      	movs	r1, #1
 800df2a:	4620      	mov	r0, r4
 800df2c:	f000 fb22 	bl	800e574 <__i2b>
 800df30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df32:	2b00      	cmp	r3, #0
 800df34:	4606      	mov	r6, r0
 800df36:	f340 8088 	ble.w	800e04a <_dtoa_r+0x8c2>
 800df3a:	461a      	mov	r2, r3
 800df3c:	4601      	mov	r1, r0
 800df3e:	4620      	mov	r0, r4
 800df40:	f000 fbd8 	bl	800e6f4 <__pow5mult>
 800df44:	9b06      	ldr	r3, [sp, #24]
 800df46:	2b01      	cmp	r3, #1
 800df48:	4606      	mov	r6, r0
 800df4a:	f340 8081 	ble.w	800e050 <_dtoa_r+0x8c8>
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	6933      	ldr	r3, [r6, #16]
 800df54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df58:	6918      	ldr	r0, [r3, #16]
 800df5a:	f000 fabb 	bl	800e4d4 <__hi0bits>
 800df5e:	f1c0 0020 	rsb	r0, r0, #32
 800df62:	9b05      	ldr	r3, [sp, #20]
 800df64:	4418      	add	r0, r3
 800df66:	f010 001f 	ands.w	r0, r0, #31
 800df6a:	f000 8092 	beq.w	800e092 <_dtoa_r+0x90a>
 800df6e:	f1c0 0320 	rsb	r3, r0, #32
 800df72:	2b04      	cmp	r3, #4
 800df74:	f340 808a 	ble.w	800e08c <_dtoa_r+0x904>
 800df78:	f1c0 001c 	rsb	r0, r0, #28
 800df7c:	9b04      	ldr	r3, [sp, #16]
 800df7e:	4403      	add	r3, r0
 800df80:	9304      	str	r3, [sp, #16]
 800df82:	9b05      	ldr	r3, [sp, #20]
 800df84:	4403      	add	r3, r0
 800df86:	4405      	add	r5, r0
 800df88:	9305      	str	r3, [sp, #20]
 800df8a:	9b04      	ldr	r3, [sp, #16]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dd07      	ble.n	800dfa0 <_dtoa_r+0x818>
 800df90:	ee18 1a10 	vmov	r1, s16
 800df94:	461a      	mov	r2, r3
 800df96:	4620      	mov	r0, r4
 800df98:	f000 fc06 	bl	800e7a8 <__lshift>
 800df9c:	ee08 0a10 	vmov	s16, r0
 800dfa0:	9b05      	ldr	r3, [sp, #20]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	dd05      	ble.n	800dfb2 <_dtoa_r+0x82a>
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f000 fbfc 	bl	800e7a8 <__lshift>
 800dfb0:	4606      	mov	r6, r0
 800dfb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d06e      	beq.n	800e096 <_dtoa_r+0x90e>
 800dfb8:	ee18 0a10 	vmov	r0, s16
 800dfbc:	4631      	mov	r1, r6
 800dfbe:	f000 fc63 	bl	800e888 <__mcmp>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	da67      	bge.n	800e096 <_dtoa_r+0x90e>
 800dfc6:	9b00      	ldr	r3, [sp, #0]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	ee18 1a10 	vmov	r1, s16
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	220a      	movs	r2, #10
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 fa37 	bl	800e448 <__multadd>
 800dfda:	9b08      	ldr	r3, [sp, #32]
 800dfdc:	ee08 0a10 	vmov	s16, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 81b1 	beq.w	800e348 <_dtoa_r+0xbc0>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4639      	mov	r1, r7
 800dfea:	220a      	movs	r2, #10
 800dfec:	4620      	mov	r0, r4
 800dfee:	f000 fa2b 	bl	800e448 <__multadd>
 800dff2:	9b02      	ldr	r3, [sp, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	4607      	mov	r7, r0
 800dff8:	f300 808e 	bgt.w	800e118 <_dtoa_r+0x990>
 800dffc:	9b06      	ldr	r3, [sp, #24]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	dc51      	bgt.n	800e0a6 <_dtoa_r+0x91e>
 800e002:	e089      	b.n	800e118 <_dtoa_r+0x990>
 800e004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e00a:	e74b      	b.n	800dea4 <_dtoa_r+0x71c>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1e5e      	subs	r6, r3, #1
 800e010:	9b07      	ldr	r3, [sp, #28]
 800e012:	42b3      	cmp	r3, r6
 800e014:	bfbf      	itttt	lt
 800e016:	9b07      	ldrlt	r3, [sp, #28]
 800e018:	9607      	strlt	r6, [sp, #28]
 800e01a:	1af2      	sublt	r2, r6, r3
 800e01c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e01e:	bfb6      	itet	lt
 800e020:	189b      	addlt	r3, r3, r2
 800e022:	1b9e      	subge	r6, r3, r6
 800e024:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e026:	9b03      	ldr	r3, [sp, #12]
 800e028:	bfb8      	it	lt
 800e02a:	2600      	movlt	r6, #0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	bfb7      	itett	lt
 800e030:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e034:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e038:	1a9d      	sublt	r5, r3, r2
 800e03a:	2300      	movlt	r3, #0
 800e03c:	e734      	b.n	800dea8 <_dtoa_r+0x720>
 800e03e:	9e07      	ldr	r6, [sp, #28]
 800e040:	9d04      	ldr	r5, [sp, #16]
 800e042:	9f08      	ldr	r7, [sp, #32]
 800e044:	e73b      	b.n	800debe <_dtoa_r+0x736>
 800e046:	9a07      	ldr	r2, [sp, #28]
 800e048:	e767      	b.n	800df1a <_dtoa_r+0x792>
 800e04a:	9b06      	ldr	r3, [sp, #24]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	dc18      	bgt.n	800e082 <_dtoa_r+0x8fa>
 800e050:	f1ba 0f00 	cmp.w	sl, #0
 800e054:	d115      	bne.n	800e082 <_dtoa_r+0x8fa>
 800e056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e05a:	b993      	cbnz	r3, 800e082 <_dtoa_r+0x8fa>
 800e05c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e060:	0d1b      	lsrs	r3, r3, #20
 800e062:	051b      	lsls	r3, r3, #20
 800e064:	b183      	cbz	r3, 800e088 <_dtoa_r+0x900>
 800e066:	9b04      	ldr	r3, [sp, #16]
 800e068:	3301      	adds	r3, #1
 800e06a:	9304      	str	r3, [sp, #16]
 800e06c:	9b05      	ldr	r3, [sp, #20]
 800e06e:	3301      	adds	r3, #1
 800e070:	9305      	str	r3, [sp, #20]
 800e072:	f04f 0801 	mov.w	r8, #1
 800e076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f47f af6a 	bne.w	800df52 <_dtoa_r+0x7ca>
 800e07e:	2001      	movs	r0, #1
 800e080:	e76f      	b.n	800df62 <_dtoa_r+0x7da>
 800e082:	f04f 0800 	mov.w	r8, #0
 800e086:	e7f6      	b.n	800e076 <_dtoa_r+0x8ee>
 800e088:	4698      	mov	r8, r3
 800e08a:	e7f4      	b.n	800e076 <_dtoa_r+0x8ee>
 800e08c:	f43f af7d 	beq.w	800df8a <_dtoa_r+0x802>
 800e090:	4618      	mov	r0, r3
 800e092:	301c      	adds	r0, #28
 800e094:	e772      	b.n	800df7c <_dtoa_r+0x7f4>
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	dc37      	bgt.n	800e10c <_dtoa_r+0x984>
 800e09c:	9b06      	ldr	r3, [sp, #24]
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	dd34      	ble.n	800e10c <_dtoa_r+0x984>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	9302      	str	r3, [sp, #8]
 800e0a6:	9b02      	ldr	r3, [sp, #8]
 800e0a8:	b96b      	cbnz	r3, 800e0c6 <_dtoa_r+0x93e>
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	2205      	movs	r2, #5
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f000 f9ca 	bl	800e448 <__multadd>
 800e0b4:	4601      	mov	r1, r0
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	ee18 0a10 	vmov	r0, s16
 800e0bc:	f000 fbe4 	bl	800e888 <__mcmp>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f73f adbb 	bgt.w	800dc3c <_dtoa_r+0x4b4>
 800e0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c8:	9d01      	ldr	r5, [sp, #4]
 800e0ca:	43db      	mvns	r3, r3
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	f04f 0800 	mov.w	r8, #0
 800e0d2:	4631      	mov	r1, r6
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f000 f995 	bl	800e404 <_Bfree>
 800e0da:	2f00      	cmp	r7, #0
 800e0dc:	f43f aea4 	beq.w	800de28 <_dtoa_r+0x6a0>
 800e0e0:	f1b8 0f00 	cmp.w	r8, #0
 800e0e4:	d005      	beq.n	800e0f2 <_dtoa_r+0x96a>
 800e0e6:	45b8      	cmp	r8, r7
 800e0e8:	d003      	beq.n	800e0f2 <_dtoa_r+0x96a>
 800e0ea:	4641      	mov	r1, r8
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f000 f989 	bl	800e404 <_Bfree>
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f000 f985 	bl	800e404 <_Bfree>
 800e0fa:	e695      	b.n	800de28 <_dtoa_r+0x6a0>
 800e0fc:	2600      	movs	r6, #0
 800e0fe:	4637      	mov	r7, r6
 800e100:	e7e1      	b.n	800e0c6 <_dtoa_r+0x93e>
 800e102:	9700      	str	r7, [sp, #0]
 800e104:	4637      	mov	r7, r6
 800e106:	e599      	b.n	800dc3c <_dtoa_r+0x4b4>
 800e108:	40240000 	.word	0x40240000
 800e10c:	9b08      	ldr	r3, [sp, #32]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 80ca 	beq.w	800e2a8 <_dtoa_r+0xb20>
 800e114:	9b03      	ldr	r3, [sp, #12]
 800e116:	9302      	str	r3, [sp, #8]
 800e118:	2d00      	cmp	r5, #0
 800e11a:	dd05      	ble.n	800e128 <_dtoa_r+0x9a0>
 800e11c:	4639      	mov	r1, r7
 800e11e:	462a      	mov	r2, r5
 800e120:	4620      	mov	r0, r4
 800e122:	f000 fb41 	bl	800e7a8 <__lshift>
 800e126:	4607      	mov	r7, r0
 800e128:	f1b8 0f00 	cmp.w	r8, #0
 800e12c:	d05b      	beq.n	800e1e6 <_dtoa_r+0xa5e>
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	4620      	mov	r0, r4
 800e132:	f000 f927 	bl	800e384 <_Balloc>
 800e136:	4605      	mov	r5, r0
 800e138:	b928      	cbnz	r0, 800e146 <_dtoa_r+0x9be>
 800e13a:	4b87      	ldr	r3, [pc, #540]	; (800e358 <_dtoa_r+0xbd0>)
 800e13c:	4602      	mov	r2, r0
 800e13e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e142:	f7ff bb3b 	b.w	800d7bc <_dtoa_r+0x34>
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	3202      	adds	r2, #2
 800e14a:	0092      	lsls	r2, r2, #2
 800e14c:	f107 010c 	add.w	r1, r7, #12
 800e150:	300c      	adds	r0, #12
 800e152:	f7fe fcfd 	bl	800cb50 <memcpy>
 800e156:	2201      	movs	r2, #1
 800e158:	4629      	mov	r1, r5
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 fb24 	bl	800e7a8 <__lshift>
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	f103 0901 	add.w	r9, r3, #1
 800e166:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e16a:	4413      	add	r3, r2
 800e16c:	9305      	str	r3, [sp, #20]
 800e16e:	f00a 0301 	and.w	r3, sl, #1
 800e172:	46b8      	mov	r8, r7
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	4607      	mov	r7, r0
 800e178:	4631      	mov	r1, r6
 800e17a:	ee18 0a10 	vmov	r0, s16
 800e17e:	f7ff fa77 	bl	800d670 <quorem>
 800e182:	4641      	mov	r1, r8
 800e184:	9002      	str	r0, [sp, #8]
 800e186:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e18a:	ee18 0a10 	vmov	r0, s16
 800e18e:	f000 fb7b 	bl	800e888 <__mcmp>
 800e192:	463a      	mov	r2, r7
 800e194:	9003      	str	r0, [sp, #12]
 800e196:	4631      	mov	r1, r6
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 fb91 	bl	800e8c0 <__mdiff>
 800e19e:	68c2      	ldr	r2, [r0, #12]
 800e1a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	bb02      	cbnz	r2, 800e1ea <_dtoa_r+0xa62>
 800e1a8:	4601      	mov	r1, r0
 800e1aa:	ee18 0a10 	vmov	r0, s16
 800e1ae:	f000 fb6b 	bl	800e888 <__mcmp>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	9207      	str	r2, [sp, #28]
 800e1ba:	f000 f923 	bl	800e404 <_Bfree>
 800e1be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e1c2:	ea43 0102 	orr.w	r1, r3, r2
 800e1c6:	9b04      	ldr	r3, [sp, #16]
 800e1c8:	430b      	orrs	r3, r1
 800e1ca:	464d      	mov	r5, r9
 800e1cc:	d10f      	bne.n	800e1ee <_dtoa_r+0xa66>
 800e1ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1d2:	d02a      	beq.n	800e22a <_dtoa_r+0xaa2>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	dd02      	ble.n	800e1e0 <_dtoa_r+0xa58>
 800e1da:	9b02      	ldr	r3, [sp, #8]
 800e1dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e1e0:	f88b a000 	strb.w	sl, [fp]
 800e1e4:	e775      	b.n	800e0d2 <_dtoa_r+0x94a>
 800e1e6:	4638      	mov	r0, r7
 800e1e8:	e7ba      	b.n	800e160 <_dtoa_r+0x9d8>
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	e7e2      	b.n	800e1b4 <_dtoa_r+0xa2c>
 800e1ee:	9b03      	ldr	r3, [sp, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	db04      	blt.n	800e1fe <_dtoa_r+0xa76>
 800e1f4:	9906      	ldr	r1, [sp, #24]
 800e1f6:	430b      	orrs	r3, r1
 800e1f8:	9904      	ldr	r1, [sp, #16]
 800e1fa:	430b      	orrs	r3, r1
 800e1fc:	d122      	bne.n	800e244 <_dtoa_r+0xabc>
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	ddee      	ble.n	800e1e0 <_dtoa_r+0xa58>
 800e202:	ee18 1a10 	vmov	r1, s16
 800e206:	2201      	movs	r2, #1
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 facd 	bl	800e7a8 <__lshift>
 800e20e:	4631      	mov	r1, r6
 800e210:	ee08 0a10 	vmov	s16, r0
 800e214:	f000 fb38 	bl	800e888 <__mcmp>
 800e218:	2800      	cmp	r0, #0
 800e21a:	dc03      	bgt.n	800e224 <_dtoa_r+0xa9c>
 800e21c:	d1e0      	bne.n	800e1e0 <_dtoa_r+0xa58>
 800e21e:	f01a 0f01 	tst.w	sl, #1
 800e222:	d0dd      	beq.n	800e1e0 <_dtoa_r+0xa58>
 800e224:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e228:	d1d7      	bne.n	800e1da <_dtoa_r+0xa52>
 800e22a:	2339      	movs	r3, #57	; 0x39
 800e22c:	f88b 3000 	strb.w	r3, [fp]
 800e230:	462b      	mov	r3, r5
 800e232:	461d      	mov	r5, r3
 800e234:	3b01      	subs	r3, #1
 800e236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e23a:	2a39      	cmp	r2, #57	; 0x39
 800e23c:	d071      	beq.n	800e322 <_dtoa_r+0xb9a>
 800e23e:	3201      	adds	r2, #1
 800e240:	701a      	strb	r2, [r3, #0]
 800e242:	e746      	b.n	800e0d2 <_dtoa_r+0x94a>
 800e244:	2a00      	cmp	r2, #0
 800e246:	dd07      	ble.n	800e258 <_dtoa_r+0xad0>
 800e248:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e24c:	d0ed      	beq.n	800e22a <_dtoa_r+0xaa2>
 800e24e:	f10a 0301 	add.w	r3, sl, #1
 800e252:	f88b 3000 	strb.w	r3, [fp]
 800e256:	e73c      	b.n	800e0d2 <_dtoa_r+0x94a>
 800e258:	9b05      	ldr	r3, [sp, #20]
 800e25a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e25e:	4599      	cmp	r9, r3
 800e260:	d047      	beq.n	800e2f2 <_dtoa_r+0xb6a>
 800e262:	ee18 1a10 	vmov	r1, s16
 800e266:	2300      	movs	r3, #0
 800e268:	220a      	movs	r2, #10
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 f8ec 	bl	800e448 <__multadd>
 800e270:	45b8      	cmp	r8, r7
 800e272:	ee08 0a10 	vmov	s16, r0
 800e276:	f04f 0300 	mov.w	r3, #0
 800e27a:	f04f 020a 	mov.w	r2, #10
 800e27e:	4641      	mov	r1, r8
 800e280:	4620      	mov	r0, r4
 800e282:	d106      	bne.n	800e292 <_dtoa_r+0xb0a>
 800e284:	f000 f8e0 	bl	800e448 <__multadd>
 800e288:	4680      	mov	r8, r0
 800e28a:	4607      	mov	r7, r0
 800e28c:	f109 0901 	add.w	r9, r9, #1
 800e290:	e772      	b.n	800e178 <_dtoa_r+0x9f0>
 800e292:	f000 f8d9 	bl	800e448 <__multadd>
 800e296:	4639      	mov	r1, r7
 800e298:	4680      	mov	r8, r0
 800e29a:	2300      	movs	r3, #0
 800e29c:	220a      	movs	r2, #10
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f000 f8d2 	bl	800e448 <__multadd>
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	e7f1      	b.n	800e28c <_dtoa_r+0xb04>
 800e2a8:	9b03      	ldr	r3, [sp, #12]
 800e2aa:	9302      	str	r3, [sp, #8]
 800e2ac:	9d01      	ldr	r5, [sp, #4]
 800e2ae:	ee18 0a10 	vmov	r0, s16
 800e2b2:	4631      	mov	r1, r6
 800e2b4:	f7ff f9dc 	bl	800d670 <quorem>
 800e2b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e2bc:	9b01      	ldr	r3, [sp, #4]
 800e2be:	f805 ab01 	strb.w	sl, [r5], #1
 800e2c2:	1aea      	subs	r2, r5, r3
 800e2c4:	9b02      	ldr	r3, [sp, #8]
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	dd09      	ble.n	800e2de <_dtoa_r+0xb56>
 800e2ca:	ee18 1a10 	vmov	r1, s16
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	220a      	movs	r2, #10
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 f8b8 	bl	800e448 <__multadd>
 800e2d8:	ee08 0a10 	vmov	s16, r0
 800e2dc:	e7e7      	b.n	800e2ae <_dtoa_r+0xb26>
 800e2de:	9b02      	ldr	r3, [sp, #8]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	bfc8      	it	gt
 800e2e4:	461d      	movgt	r5, r3
 800e2e6:	9b01      	ldr	r3, [sp, #4]
 800e2e8:	bfd8      	it	le
 800e2ea:	2501      	movle	r5, #1
 800e2ec:	441d      	add	r5, r3
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	ee18 1a10 	vmov	r1, s16
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f000 fa55 	bl	800e7a8 <__lshift>
 800e2fe:	4631      	mov	r1, r6
 800e300:	ee08 0a10 	vmov	s16, r0
 800e304:	f000 fac0 	bl	800e888 <__mcmp>
 800e308:	2800      	cmp	r0, #0
 800e30a:	dc91      	bgt.n	800e230 <_dtoa_r+0xaa8>
 800e30c:	d102      	bne.n	800e314 <_dtoa_r+0xb8c>
 800e30e:	f01a 0f01 	tst.w	sl, #1
 800e312:	d18d      	bne.n	800e230 <_dtoa_r+0xaa8>
 800e314:	462b      	mov	r3, r5
 800e316:	461d      	mov	r5, r3
 800e318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e31c:	2a30      	cmp	r2, #48	; 0x30
 800e31e:	d0fa      	beq.n	800e316 <_dtoa_r+0xb8e>
 800e320:	e6d7      	b.n	800e0d2 <_dtoa_r+0x94a>
 800e322:	9a01      	ldr	r2, [sp, #4]
 800e324:	429a      	cmp	r2, r3
 800e326:	d184      	bne.n	800e232 <_dtoa_r+0xaaa>
 800e328:	9b00      	ldr	r3, [sp, #0]
 800e32a:	3301      	adds	r3, #1
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	2331      	movs	r3, #49	; 0x31
 800e330:	7013      	strb	r3, [r2, #0]
 800e332:	e6ce      	b.n	800e0d2 <_dtoa_r+0x94a>
 800e334:	4b09      	ldr	r3, [pc, #36]	; (800e35c <_dtoa_r+0xbd4>)
 800e336:	f7ff ba95 	b.w	800d864 <_dtoa_r+0xdc>
 800e33a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f47f aa6e 	bne.w	800d81e <_dtoa_r+0x96>
 800e342:	4b07      	ldr	r3, [pc, #28]	; (800e360 <_dtoa_r+0xbd8>)
 800e344:	f7ff ba8e 	b.w	800d864 <_dtoa_r+0xdc>
 800e348:	9b02      	ldr	r3, [sp, #8]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	dcae      	bgt.n	800e2ac <_dtoa_r+0xb24>
 800e34e:	9b06      	ldr	r3, [sp, #24]
 800e350:	2b02      	cmp	r3, #2
 800e352:	f73f aea8 	bgt.w	800e0a6 <_dtoa_r+0x91e>
 800e356:	e7a9      	b.n	800e2ac <_dtoa_r+0xb24>
 800e358:	0800fd87 	.word	0x0800fd87
 800e35c:	0800fce4 	.word	0x0800fce4
 800e360:	0800fd08 	.word	0x0800fd08

0800e364 <_localeconv_r>:
 800e364:	4800      	ldr	r0, [pc, #0]	; (800e368 <_localeconv_r+0x4>)
 800e366:	4770      	bx	lr
 800e368:	20000474 	.word	0x20000474

0800e36c <__malloc_lock>:
 800e36c:	4801      	ldr	r0, [pc, #4]	; (800e374 <__malloc_lock+0x8>)
 800e36e:	f000 bd30 	b.w	800edd2 <__retarget_lock_acquire_recursive>
 800e372:	bf00      	nop
 800e374:	200015dc 	.word	0x200015dc

0800e378 <__malloc_unlock>:
 800e378:	4801      	ldr	r0, [pc, #4]	; (800e380 <__malloc_unlock+0x8>)
 800e37a:	f000 bd2b 	b.w	800edd4 <__retarget_lock_release_recursive>
 800e37e:	bf00      	nop
 800e380:	200015dc 	.word	0x200015dc

0800e384 <_Balloc>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e388:	4604      	mov	r4, r0
 800e38a:	460d      	mov	r5, r1
 800e38c:	b976      	cbnz	r6, 800e3ac <_Balloc+0x28>
 800e38e:	2010      	movs	r0, #16
 800e390:	f7fe fbce 	bl	800cb30 <malloc>
 800e394:	4602      	mov	r2, r0
 800e396:	6260      	str	r0, [r4, #36]	; 0x24
 800e398:	b920      	cbnz	r0, 800e3a4 <_Balloc+0x20>
 800e39a:	4b18      	ldr	r3, [pc, #96]	; (800e3fc <_Balloc+0x78>)
 800e39c:	4818      	ldr	r0, [pc, #96]	; (800e400 <_Balloc+0x7c>)
 800e39e:	2166      	movs	r1, #102	; 0x66
 800e3a0:	f000 fce6 	bl	800ed70 <__assert_func>
 800e3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3a8:	6006      	str	r6, [r0, #0]
 800e3aa:	60c6      	str	r6, [r0, #12]
 800e3ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e3ae:	68f3      	ldr	r3, [r6, #12]
 800e3b0:	b183      	cbz	r3, 800e3d4 <_Balloc+0x50>
 800e3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3ba:	b9b8      	cbnz	r0, 800e3ec <_Balloc+0x68>
 800e3bc:	2101      	movs	r1, #1
 800e3be:	fa01 f605 	lsl.w	r6, r1, r5
 800e3c2:	1d72      	adds	r2, r6, #5
 800e3c4:	0092      	lsls	r2, r2, #2
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f000 fb60 	bl	800ea8c <_calloc_r>
 800e3cc:	b160      	cbz	r0, 800e3e8 <_Balloc+0x64>
 800e3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3d2:	e00e      	b.n	800e3f2 <_Balloc+0x6e>
 800e3d4:	2221      	movs	r2, #33	; 0x21
 800e3d6:	2104      	movs	r1, #4
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 fb57 	bl	800ea8c <_calloc_r>
 800e3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3e0:	60f0      	str	r0, [r6, #12]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1e4      	bne.n	800e3b2 <_Balloc+0x2e>
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	bd70      	pop	{r4, r5, r6, pc}
 800e3ec:	6802      	ldr	r2, [r0, #0]
 800e3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3f8:	e7f7      	b.n	800e3ea <_Balloc+0x66>
 800e3fa:	bf00      	nop
 800e3fc:	0800fd15 	.word	0x0800fd15
 800e400:	0800fd98 	.word	0x0800fd98

0800e404 <_Bfree>:
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e408:	4605      	mov	r5, r0
 800e40a:	460c      	mov	r4, r1
 800e40c:	b976      	cbnz	r6, 800e42c <_Bfree+0x28>
 800e40e:	2010      	movs	r0, #16
 800e410:	f7fe fb8e 	bl	800cb30 <malloc>
 800e414:	4602      	mov	r2, r0
 800e416:	6268      	str	r0, [r5, #36]	; 0x24
 800e418:	b920      	cbnz	r0, 800e424 <_Bfree+0x20>
 800e41a:	4b09      	ldr	r3, [pc, #36]	; (800e440 <_Bfree+0x3c>)
 800e41c:	4809      	ldr	r0, [pc, #36]	; (800e444 <_Bfree+0x40>)
 800e41e:	218a      	movs	r1, #138	; 0x8a
 800e420:	f000 fca6 	bl	800ed70 <__assert_func>
 800e424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e428:	6006      	str	r6, [r0, #0]
 800e42a:	60c6      	str	r6, [r0, #12]
 800e42c:	b13c      	cbz	r4, 800e43e <_Bfree+0x3a>
 800e42e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e430:	6862      	ldr	r2, [r4, #4]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e438:	6021      	str	r1, [r4, #0]
 800e43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	0800fd15 	.word	0x0800fd15
 800e444:	0800fd98 	.word	0x0800fd98

0800e448 <__multadd>:
 800e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e44c:	690d      	ldr	r5, [r1, #16]
 800e44e:	4607      	mov	r7, r0
 800e450:	460c      	mov	r4, r1
 800e452:	461e      	mov	r6, r3
 800e454:	f101 0c14 	add.w	ip, r1, #20
 800e458:	2000      	movs	r0, #0
 800e45a:	f8dc 3000 	ldr.w	r3, [ip]
 800e45e:	b299      	uxth	r1, r3
 800e460:	fb02 6101 	mla	r1, r2, r1, r6
 800e464:	0c1e      	lsrs	r6, r3, #16
 800e466:	0c0b      	lsrs	r3, r1, #16
 800e468:	fb02 3306 	mla	r3, r2, r6, r3
 800e46c:	b289      	uxth	r1, r1
 800e46e:	3001      	adds	r0, #1
 800e470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e474:	4285      	cmp	r5, r0
 800e476:	f84c 1b04 	str.w	r1, [ip], #4
 800e47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e47e:	dcec      	bgt.n	800e45a <__multadd+0x12>
 800e480:	b30e      	cbz	r6, 800e4c6 <__multadd+0x7e>
 800e482:	68a3      	ldr	r3, [r4, #8]
 800e484:	42ab      	cmp	r3, r5
 800e486:	dc19      	bgt.n	800e4bc <__multadd+0x74>
 800e488:	6861      	ldr	r1, [r4, #4]
 800e48a:	4638      	mov	r0, r7
 800e48c:	3101      	adds	r1, #1
 800e48e:	f7ff ff79 	bl	800e384 <_Balloc>
 800e492:	4680      	mov	r8, r0
 800e494:	b928      	cbnz	r0, 800e4a2 <__multadd+0x5a>
 800e496:	4602      	mov	r2, r0
 800e498:	4b0c      	ldr	r3, [pc, #48]	; (800e4cc <__multadd+0x84>)
 800e49a:	480d      	ldr	r0, [pc, #52]	; (800e4d0 <__multadd+0x88>)
 800e49c:	21b5      	movs	r1, #181	; 0xb5
 800e49e:	f000 fc67 	bl	800ed70 <__assert_func>
 800e4a2:	6922      	ldr	r2, [r4, #16]
 800e4a4:	3202      	adds	r2, #2
 800e4a6:	f104 010c 	add.w	r1, r4, #12
 800e4aa:	0092      	lsls	r2, r2, #2
 800e4ac:	300c      	adds	r0, #12
 800e4ae:	f7fe fb4f 	bl	800cb50 <memcpy>
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	f7ff ffa5 	bl	800e404 <_Bfree>
 800e4ba:	4644      	mov	r4, r8
 800e4bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4c0:	3501      	adds	r5, #1
 800e4c2:	615e      	str	r6, [r3, #20]
 800e4c4:	6125      	str	r5, [r4, #16]
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4cc:	0800fd87 	.word	0x0800fd87
 800e4d0:	0800fd98 	.word	0x0800fd98

0800e4d4 <__hi0bits>:
 800e4d4:	0c03      	lsrs	r3, r0, #16
 800e4d6:	041b      	lsls	r3, r3, #16
 800e4d8:	b9d3      	cbnz	r3, 800e510 <__hi0bits+0x3c>
 800e4da:	0400      	lsls	r0, r0, #16
 800e4dc:	2310      	movs	r3, #16
 800e4de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e4e2:	bf04      	itt	eq
 800e4e4:	0200      	lsleq	r0, r0, #8
 800e4e6:	3308      	addeq	r3, #8
 800e4e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e4ec:	bf04      	itt	eq
 800e4ee:	0100      	lsleq	r0, r0, #4
 800e4f0:	3304      	addeq	r3, #4
 800e4f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e4f6:	bf04      	itt	eq
 800e4f8:	0080      	lsleq	r0, r0, #2
 800e4fa:	3302      	addeq	r3, #2
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	db05      	blt.n	800e50c <__hi0bits+0x38>
 800e500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e504:	f103 0301 	add.w	r3, r3, #1
 800e508:	bf08      	it	eq
 800e50a:	2320      	moveq	r3, #32
 800e50c:	4618      	mov	r0, r3
 800e50e:	4770      	bx	lr
 800e510:	2300      	movs	r3, #0
 800e512:	e7e4      	b.n	800e4de <__hi0bits+0xa>

0800e514 <__lo0bits>:
 800e514:	6803      	ldr	r3, [r0, #0]
 800e516:	f013 0207 	ands.w	r2, r3, #7
 800e51a:	4601      	mov	r1, r0
 800e51c:	d00b      	beq.n	800e536 <__lo0bits+0x22>
 800e51e:	07da      	lsls	r2, r3, #31
 800e520:	d423      	bmi.n	800e56a <__lo0bits+0x56>
 800e522:	0798      	lsls	r0, r3, #30
 800e524:	bf49      	itett	mi
 800e526:	085b      	lsrmi	r3, r3, #1
 800e528:	089b      	lsrpl	r3, r3, #2
 800e52a:	2001      	movmi	r0, #1
 800e52c:	600b      	strmi	r3, [r1, #0]
 800e52e:	bf5c      	itt	pl
 800e530:	600b      	strpl	r3, [r1, #0]
 800e532:	2002      	movpl	r0, #2
 800e534:	4770      	bx	lr
 800e536:	b298      	uxth	r0, r3
 800e538:	b9a8      	cbnz	r0, 800e566 <__lo0bits+0x52>
 800e53a:	0c1b      	lsrs	r3, r3, #16
 800e53c:	2010      	movs	r0, #16
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	b90a      	cbnz	r2, 800e546 <__lo0bits+0x32>
 800e542:	3008      	adds	r0, #8
 800e544:	0a1b      	lsrs	r3, r3, #8
 800e546:	071a      	lsls	r2, r3, #28
 800e548:	bf04      	itt	eq
 800e54a:	091b      	lsreq	r3, r3, #4
 800e54c:	3004      	addeq	r0, #4
 800e54e:	079a      	lsls	r2, r3, #30
 800e550:	bf04      	itt	eq
 800e552:	089b      	lsreq	r3, r3, #2
 800e554:	3002      	addeq	r0, #2
 800e556:	07da      	lsls	r2, r3, #31
 800e558:	d403      	bmi.n	800e562 <__lo0bits+0x4e>
 800e55a:	085b      	lsrs	r3, r3, #1
 800e55c:	f100 0001 	add.w	r0, r0, #1
 800e560:	d005      	beq.n	800e56e <__lo0bits+0x5a>
 800e562:	600b      	str	r3, [r1, #0]
 800e564:	4770      	bx	lr
 800e566:	4610      	mov	r0, r2
 800e568:	e7e9      	b.n	800e53e <__lo0bits+0x2a>
 800e56a:	2000      	movs	r0, #0
 800e56c:	4770      	bx	lr
 800e56e:	2020      	movs	r0, #32
 800e570:	4770      	bx	lr
	...

0800e574 <__i2b>:
 800e574:	b510      	push	{r4, lr}
 800e576:	460c      	mov	r4, r1
 800e578:	2101      	movs	r1, #1
 800e57a:	f7ff ff03 	bl	800e384 <_Balloc>
 800e57e:	4602      	mov	r2, r0
 800e580:	b928      	cbnz	r0, 800e58e <__i2b+0x1a>
 800e582:	4b05      	ldr	r3, [pc, #20]	; (800e598 <__i2b+0x24>)
 800e584:	4805      	ldr	r0, [pc, #20]	; (800e59c <__i2b+0x28>)
 800e586:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e58a:	f000 fbf1 	bl	800ed70 <__assert_func>
 800e58e:	2301      	movs	r3, #1
 800e590:	6144      	str	r4, [r0, #20]
 800e592:	6103      	str	r3, [r0, #16]
 800e594:	bd10      	pop	{r4, pc}
 800e596:	bf00      	nop
 800e598:	0800fd87 	.word	0x0800fd87
 800e59c:	0800fd98 	.word	0x0800fd98

0800e5a0 <__multiply>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	4691      	mov	r9, r2
 800e5a6:	690a      	ldr	r2, [r1, #16]
 800e5a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	bfb8      	it	lt
 800e5b0:	460b      	movlt	r3, r1
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	bfbc      	itt	lt
 800e5b6:	464c      	movlt	r4, r9
 800e5b8:	4699      	movlt	r9, r3
 800e5ba:	6927      	ldr	r7, [r4, #16]
 800e5bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5c0:	68a3      	ldr	r3, [r4, #8]
 800e5c2:	6861      	ldr	r1, [r4, #4]
 800e5c4:	eb07 060a 	add.w	r6, r7, sl
 800e5c8:	42b3      	cmp	r3, r6
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	bfb8      	it	lt
 800e5ce:	3101      	addlt	r1, #1
 800e5d0:	f7ff fed8 	bl	800e384 <_Balloc>
 800e5d4:	b930      	cbnz	r0, 800e5e4 <__multiply+0x44>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	4b44      	ldr	r3, [pc, #272]	; (800e6ec <__multiply+0x14c>)
 800e5da:	4845      	ldr	r0, [pc, #276]	; (800e6f0 <__multiply+0x150>)
 800e5dc:	f240 115d 	movw	r1, #349	; 0x15d
 800e5e0:	f000 fbc6 	bl	800ed70 <__assert_func>
 800e5e4:	f100 0514 	add.w	r5, r0, #20
 800e5e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	4543      	cmp	r3, r8
 800e5f2:	d321      	bcc.n	800e638 <__multiply+0x98>
 800e5f4:	f104 0314 	add.w	r3, r4, #20
 800e5f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e5fc:	f109 0314 	add.w	r3, r9, #20
 800e600:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e604:	9202      	str	r2, [sp, #8]
 800e606:	1b3a      	subs	r2, r7, r4
 800e608:	3a15      	subs	r2, #21
 800e60a:	f022 0203 	bic.w	r2, r2, #3
 800e60e:	3204      	adds	r2, #4
 800e610:	f104 0115 	add.w	r1, r4, #21
 800e614:	428f      	cmp	r7, r1
 800e616:	bf38      	it	cc
 800e618:	2204      	movcc	r2, #4
 800e61a:	9201      	str	r2, [sp, #4]
 800e61c:	9a02      	ldr	r2, [sp, #8]
 800e61e:	9303      	str	r3, [sp, #12]
 800e620:	429a      	cmp	r2, r3
 800e622:	d80c      	bhi.n	800e63e <__multiply+0x9e>
 800e624:	2e00      	cmp	r6, #0
 800e626:	dd03      	ble.n	800e630 <__multiply+0x90>
 800e628:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d05a      	beq.n	800e6e6 <__multiply+0x146>
 800e630:	6106      	str	r6, [r0, #16]
 800e632:	b005      	add	sp, #20
 800e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e638:	f843 2b04 	str.w	r2, [r3], #4
 800e63c:	e7d8      	b.n	800e5f0 <__multiply+0x50>
 800e63e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e642:	f1ba 0f00 	cmp.w	sl, #0
 800e646:	d024      	beq.n	800e692 <__multiply+0xf2>
 800e648:	f104 0e14 	add.w	lr, r4, #20
 800e64c:	46a9      	mov	r9, r5
 800e64e:	f04f 0c00 	mov.w	ip, #0
 800e652:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e656:	f8d9 1000 	ldr.w	r1, [r9]
 800e65a:	fa1f fb82 	uxth.w	fp, r2
 800e65e:	b289      	uxth	r1, r1
 800e660:	fb0a 110b 	mla	r1, sl, fp, r1
 800e664:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e668:	f8d9 2000 	ldr.w	r2, [r9]
 800e66c:	4461      	add	r1, ip
 800e66e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e672:	fb0a c20b 	mla	r2, sl, fp, ip
 800e676:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e67a:	b289      	uxth	r1, r1
 800e67c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e680:	4577      	cmp	r7, lr
 800e682:	f849 1b04 	str.w	r1, [r9], #4
 800e686:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e68a:	d8e2      	bhi.n	800e652 <__multiply+0xb2>
 800e68c:	9a01      	ldr	r2, [sp, #4]
 800e68e:	f845 c002 	str.w	ip, [r5, r2]
 800e692:	9a03      	ldr	r2, [sp, #12]
 800e694:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e698:	3304      	adds	r3, #4
 800e69a:	f1b9 0f00 	cmp.w	r9, #0
 800e69e:	d020      	beq.n	800e6e2 <__multiply+0x142>
 800e6a0:	6829      	ldr	r1, [r5, #0]
 800e6a2:	f104 0c14 	add.w	ip, r4, #20
 800e6a6:	46ae      	mov	lr, r5
 800e6a8:	f04f 0a00 	mov.w	sl, #0
 800e6ac:	f8bc b000 	ldrh.w	fp, [ip]
 800e6b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e6b4:	fb09 220b 	mla	r2, r9, fp, r2
 800e6b8:	4492      	add	sl, r2
 800e6ba:	b289      	uxth	r1, r1
 800e6bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e6c0:	f84e 1b04 	str.w	r1, [lr], #4
 800e6c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e6c8:	f8be 1000 	ldrh.w	r1, [lr]
 800e6cc:	0c12      	lsrs	r2, r2, #16
 800e6ce:	fb09 1102 	mla	r1, r9, r2, r1
 800e6d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e6d6:	4567      	cmp	r7, ip
 800e6d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e6dc:	d8e6      	bhi.n	800e6ac <__multiply+0x10c>
 800e6de:	9a01      	ldr	r2, [sp, #4]
 800e6e0:	50a9      	str	r1, [r5, r2]
 800e6e2:	3504      	adds	r5, #4
 800e6e4:	e79a      	b.n	800e61c <__multiply+0x7c>
 800e6e6:	3e01      	subs	r6, #1
 800e6e8:	e79c      	b.n	800e624 <__multiply+0x84>
 800e6ea:	bf00      	nop
 800e6ec:	0800fd87 	.word	0x0800fd87
 800e6f0:	0800fd98 	.word	0x0800fd98

0800e6f4 <__pow5mult>:
 800e6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	f012 0203 	ands.w	r2, r2, #3
 800e6fe:	4606      	mov	r6, r0
 800e700:	460f      	mov	r7, r1
 800e702:	d007      	beq.n	800e714 <__pow5mult+0x20>
 800e704:	4c25      	ldr	r4, [pc, #148]	; (800e79c <__pow5mult+0xa8>)
 800e706:	3a01      	subs	r2, #1
 800e708:	2300      	movs	r3, #0
 800e70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e70e:	f7ff fe9b 	bl	800e448 <__multadd>
 800e712:	4607      	mov	r7, r0
 800e714:	10ad      	asrs	r5, r5, #2
 800e716:	d03d      	beq.n	800e794 <__pow5mult+0xa0>
 800e718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e71a:	b97c      	cbnz	r4, 800e73c <__pow5mult+0x48>
 800e71c:	2010      	movs	r0, #16
 800e71e:	f7fe fa07 	bl	800cb30 <malloc>
 800e722:	4602      	mov	r2, r0
 800e724:	6270      	str	r0, [r6, #36]	; 0x24
 800e726:	b928      	cbnz	r0, 800e734 <__pow5mult+0x40>
 800e728:	4b1d      	ldr	r3, [pc, #116]	; (800e7a0 <__pow5mult+0xac>)
 800e72a:	481e      	ldr	r0, [pc, #120]	; (800e7a4 <__pow5mult+0xb0>)
 800e72c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e730:	f000 fb1e 	bl	800ed70 <__assert_func>
 800e734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e738:	6004      	str	r4, [r0, #0]
 800e73a:	60c4      	str	r4, [r0, #12]
 800e73c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e744:	b94c      	cbnz	r4, 800e75a <__pow5mult+0x66>
 800e746:	f240 2171 	movw	r1, #625	; 0x271
 800e74a:	4630      	mov	r0, r6
 800e74c:	f7ff ff12 	bl	800e574 <__i2b>
 800e750:	2300      	movs	r3, #0
 800e752:	f8c8 0008 	str.w	r0, [r8, #8]
 800e756:	4604      	mov	r4, r0
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	f04f 0900 	mov.w	r9, #0
 800e75e:	07eb      	lsls	r3, r5, #31
 800e760:	d50a      	bpl.n	800e778 <__pow5mult+0x84>
 800e762:	4639      	mov	r1, r7
 800e764:	4622      	mov	r2, r4
 800e766:	4630      	mov	r0, r6
 800e768:	f7ff ff1a 	bl	800e5a0 <__multiply>
 800e76c:	4639      	mov	r1, r7
 800e76e:	4680      	mov	r8, r0
 800e770:	4630      	mov	r0, r6
 800e772:	f7ff fe47 	bl	800e404 <_Bfree>
 800e776:	4647      	mov	r7, r8
 800e778:	106d      	asrs	r5, r5, #1
 800e77a:	d00b      	beq.n	800e794 <__pow5mult+0xa0>
 800e77c:	6820      	ldr	r0, [r4, #0]
 800e77e:	b938      	cbnz	r0, 800e790 <__pow5mult+0x9c>
 800e780:	4622      	mov	r2, r4
 800e782:	4621      	mov	r1, r4
 800e784:	4630      	mov	r0, r6
 800e786:	f7ff ff0b 	bl	800e5a0 <__multiply>
 800e78a:	6020      	str	r0, [r4, #0]
 800e78c:	f8c0 9000 	str.w	r9, [r0]
 800e790:	4604      	mov	r4, r0
 800e792:	e7e4      	b.n	800e75e <__pow5mult+0x6a>
 800e794:	4638      	mov	r0, r7
 800e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79a:	bf00      	nop
 800e79c:	0800fee8 	.word	0x0800fee8
 800e7a0:	0800fd15 	.word	0x0800fd15
 800e7a4:	0800fd98 	.word	0x0800fd98

0800e7a8 <__lshift>:
 800e7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	6849      	ldr	r1, [r1, #4]
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7b6:	68a3      	ldr	r3, [r4, #8]
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	4691      	mov	r9, r2
 800e7bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7c0:	f108 0601 	add.w	r6, r8, #1
 800e7c4:	42b3      	cmp	r3, r6
 800e7c6:	db0b      	blt.n	800e7e0 <__lshift+0x38>
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	f7ff fddb 	bl	800e384 <_Balloc>
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	b948      	cbnz	r0, 800e7e6 <__lshift+0x3e>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	4b2a      	ldr	r3, [pc, #168]	; (800e880 <__lshift+0xd8>)
 800e7d6:	482b      	ldr	r0, [pc, #172]	; (800e884 <__lshift+0xdc>)
 800e7d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e7dc:	f000 fac8 	bl	800ed70 <__assert_func>
 800e7e0:	3101      	adds	r1, #1
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	e7ee      	b.n	800e7c4 <__lshift+0x1c>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	f100 0114 	add.w	r1, r0, #20
 800e7ec:	f100 0210 	add.w	r2, r0, #16
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	4553      	cmp	r3, sl
 800e7f4:	db37      	blt.n	800e866 <__lshift+0xbe>
 800e7f6:	6920      	ldr	r0, [r4, #16]
 800e7f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7fc:	f104 0314 	add.w	r3, r4, #20
 800e800:	f019 091f 	ands.w	r9, r9, #31
 800e804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e808:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e80c:	d02f      	beq.n	800e86e <__lshift+0xc6>
 800e80e:	f1c9 0e20 	rsb	lr, r9, #32
 800e812:	468a      	mov	sl, r1
 800e814:	f04f 0c00 	mov.w	ip, #0
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	fa02 f209 	lsl.w	r2, r2, r9
 800e81e:	ea42 020c 	orr.w	r2, r2, ip
 800e822:	f84a 2b04 	str.w	r2, [sl], #4
 800e826:	f853 2b04 	ldr.w	r2, [r3], #4
 800e82a:	4298      	cmp	r0, r3
 800e82c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e830:	d8f2      	bhi.n	800e818 <__lshift+0x70>
 800e832:	1b03      	subs	r3, r0, r4
 800e834:	3b15      	subs	r3, #21
 800e836:	f023 0303 	bic.w	r3, r3, #3
 800e83a:	3304      	adds	r3, #4
 800e83c:	f104 0215 	add.w	r2, r4, #21
 800e840:	4290      	cmp	r0, r2
 800e842:	bf38      	it	cc
 800e844:	2304      	movcc	r3, #4
 800e846:	f841 c003 	str.w	ip, [r1, r3]
 800e84a:	f1bc 0f00 	cmp.w	ip, #0
 800e84e:	d001      	beq.n	800e854 <__lshift+0xac>
 800e850:	f108 0602 	add.w	r6, r8, #2
 800e854:	3e01      	subs	r6, #1
 800e856:	4638      	mov	r0, r7
 800e858:	612e      	str	r6, [r5, #16]
 800e85a:	4621      	mov	r1, r4
 800e85c:	f7ff fdd2 	bl	800e404 <_Bfree>
 800e860:	4628      	mov	r0, r5
 800e862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e866:	f842 0f04 	str.w	r0, [r2, #4]!
 800e86a:	3301      	adds	r3, #1
 800e86c:	e7c1      	b.n	800e7f2 <__lshift+0x4a>
 800e86e:	3904      	subs	r1, #4
 800e870:	f853 2b04 	ldr.w	r2, [r3], #4
 800e874:	f841 2f04 	str.w	r2, [r1, #4]!
 800e878:	4298      	cmp	r0, r3
 800e87a:	d8f9      	bhi.n	800e870 <__lshift+0xc8>
 800e87c:	e7ea      	b.n	800e854 <__lshift+0xac>
 800e87e:	bf00      	nop
 800e880:	0800fd87 	.word	0x0800fd87
 800e884:	0800fd98 	.word	0x0800fd98

0800e888 <__mcmp>:
 800e888:	b530      	push	{r4, r5, lr}
 800e88a:	6902      	ldr	r2, [r0, #16]
 800e88c:	690c      	ldr	r4, [r1, #16]
 800e88e:	1b12      	subs	r2, r2, r4
 800e890:	d10e      	bne.n	800e8b0 <__mcmp+0x28>
 800e892:	f100 0314 	add.w	r3, r0, #20
 800e896:	3114      	adds	r1, #20
 800e898:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e89c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e8a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e8a8:	42a5      	cmp	r5, r4
 800e8aa:	d003      	beq.n	800e8b4 <__mcmp+0x2c>
 800e8ac:	d305      	bcc.n	800e8ba <__mcmp+0x32>
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	bd30      	pop	{r4, r5, pc}
 800e8b4:	4283      	cmp	r3, r0
 800e8b6:	d3f3      	bcc.n	800e8a0 <__mcmp+0x18>
 800e8b8:	e7fa      	b.n	800e8b0 <__mcmp+0x28>
 800e8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e8be:	e7f7      	b.n	800e8b0 <__mcmp+0x28>

0800e8c0 <__mdiff>:
 800e8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	4690      	mov	r8, r2
 800e8ce:	f7ff ffdb 	bl	800e888 <__mcmp>
 800e8d2:	1e05      	subs	r5, r0, #0
 800e8d4:	d110      	bne.n	800e8f8 <__mdiff+0x38>
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f7ff fd53 	bl	800e384 <_Balloc>
 800e8de:	b930      	cbnz	r0, 800e8ee <__mdiff+0x2e>
 800e8e0:	4b3a      	ldr	r3, [pc, #232]	; (800e9cc <__mdiff+0x10c>)
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	f240 2132 	movw	r1, #562	; 0x232
 800e8e8:	4839      	ldr	r0, [pc, #228]	; (800e9d0 <__mdiff+0x110>)
 800e8ea:	f000 fa41 	bl	800ed70 <__assert_func>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f8:	bfa4      	itt	ge
 800e8fa:	4643      	movge	r3, r8
 800e8fc:	46a0      	movge	r8, r4
 800e8fe:	4630      	mov	r0, r6
 800e900:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e904:	bfa6      	itte	ge
 800e906:	461c      	movge	r4, r3
 800e908:	2500      	movge	r5, #0
 800e90a:	2501      	movlt	r5, #1
 800e90c:	f7ff fd3a 	bl	800e384 <_Balloc>
 800e910:	b920      	cbnz	r0, 800e91c <__mdiff+0x5c>
 800e912:	4b2e      	ldr	r3, [pc, #184]	; (800e9cc <__mdiff+0x10c>)
 800e914:	4602      	mov	r2, r0
 800e916:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e91a:	e7e5      	b.n	800e8e8 <__mdiff+0x28>
 800e91c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e920:	6926      	ldr	r6, [r4, #16]
 800e922:	60c5      	str	r5, [r0, #12]
 800e924:	f104 0914 	add.w	r9, r4, #20
 800e928:	f108 0514 	add.w	r5, r8, #20
 800e92c:	f100 0e14 	add.w	lr, r0, #20
 800e930:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e934:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e938:	f108 0210 	add.w	r2, r8, #16
 800e93c:	46f2      	mov	sl, lr
 800e93e:	2100      	movs	r1, #0
 800e940:	f859 3b04 	ldr.w	r3, [r9], #4
 800e944:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e948:	fa1f f883 	uxth.w	r8, r3
 800e94c:	fa11 f18b 	uxtah	r1, r1, fp
 800e950:	0c1b      	lsrs	r3, r3, #16
 800e952:	eba1 0808 	sub.w	r8, r1, r8
 800e956:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e95a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e95e:	fa1f f888 	uxth.w	r8, r8
 800e962:	1419      	asrs	r1, r3, #16
 800e964:	454e      	cmp	r6, r9
 800e966:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e96a:	f84a 3b04 	str.w	r3, [sl], #4
 800e96e:	d8e7      	bhi.n	800e940 <__mdiff+0x80>
 800e970:	1b33      	subs	r3, r6, r4
 800e972:	3b15      	subs	r3, #21
 800e974:	f023 0303 	bic.w	r3, r3, #3
 800e978:	3304      	adds	r3, #4
 800e97a:	3415      	adds	r4, #21
 800e97c:	42a6      	cmp	r6, r4
 800e97e:	bf38      	it	cc
 800e980:	2304      	movcc	r3, #4
 800e982:	441d      	add	r5, r3
 800e984:	4473      	add	r3, lr
 800e986:	469e      	mov	lr, r3
 800e988:	462e      	mov	r6, r5
 800e98a:	4566      	cmp	r6, ip
 800e98c:	d30e      	bcc.n	800e9ac <__mdiff+0xec>
 800e98e:	f10c 0203 	add.w	r2, ip, #3
 800e992:	1b52      	subs	r2, r2, r5
 800e994:	f022 0203 	bic.w	r2, r2, #3
 800e998:	3d03      	subs	r5, #3
 800e99a:	45ac      	cmp	ip, r5
 800e99c:	bf38      	it	cc
 800e99e:	2200      	movcc	r2, #0
 800e9a0:	441a      	add	r2, r3
 800e9a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e9a6:	b17b      	cbz	r3, 800e9c8 <__mdiff+0x108>
 800e9a8:	6107      	str	r7, [r0, #16]
 800e9aa:	e7a3      	b.n	800e8f4 <__mdiff+0x34>
 800e9ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800e9b0:	fa11 f288 	uxtah	r2, r1, r8
 800e9b4:	1414      	asrs	r4, r2, #16
 800e9b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e9ba:	b292      	uxth	r2, r2
 800e9bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e9c0:	f84e 2b04 	str.w	r2, [lr], #4
 800e9c4:	1421      	asrs	r1, r4, #16
 800e9c6:	e7e0      	b.n	800e98a <__mdiff+0xca>
 800e9c8:	3f01      	subs	r7, #1
 800e9ca:	e7ea      	b.n	800e9a2 <__mdiff+0xe2>
 800e9cc:	0800fd87 	.word	0x0800fd87
 800e9d0:	0800fd98 	.word	0x0800fd98

0800e9d4 <__d2b>:
 800e9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9d8:	4689      	mov	r9, r1
 800e9da:	2101      	movs	r1, #1
 800e9dc:	ec57 6b10 	vmov	r6, r7, d0
 800e9e0:	4690      	mov	r8, r2
 800e9e2:	f7ff fccf 	bl	800e384 <_Balloc>
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	b930      	cbnz	r0, 800e9f8 <__d2b+0x24>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	4b25      	ldr	r3, [pc, #148]	; (800ea84 <__d2b+0xb0>)
 800e9ee:	4826      	ldr	r0, [pc, #152]	; (800ea88 <__d2b+0xb4>)
 800e9f0:	f240 310a 	movw	r1, #778	; 0x30a
 800e9f4:	f000 f9bc 	bl	800ed70 <__assert_func>
 800e9f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e9fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea00:	bb35      	cbnz	r5, 800ea50 <__d2b+0x7c>
 800ea02:	2e00      	cmp	r6, #0
 800ea04:	9301      	str	r3, [sp, #4]
 800ea06:	d028      	beq.n	800ea5a <__d2b+0x86>
 800ea08:	4668      	mov	r0, sp
 800ea0a:	9600      	str	r6, [sp, #0]
 800ea0c:	f7ff fd82 	bl	800e514 <__lo0bits>
 800ea10:	9900      	ldr	r1, [sp, #0]
 800ea12:	b300      	cbz	r0, 800ea56 <__d2b+0x82>
 800ea14:	9a01      	ldr	r2, [sp, #4]
 800ea16:	f1c0 0320 	rsb	r3, r0, #32
 800ea1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea1e:	430b      	orrs	r3, r1
 800ea20:	40c2      	lsrs	r2, r0
 800ea22:	6163      	str	r3, [r4, #20]
 800ea24:	9201      	str	r2, [sp, #4]
 800ea26:	9b01      	ldr	r3, [sp, #4]
 800ea28:	61a3      	str	r3, [r4, #24]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	bf14      	ite	ne
 800ea2e:	2202      	movne	r2, #2
 800ea30:	2201      	moveq	r2, #1
 800ea32:	6122      	str	r2, [r4, #16]
 800ea34:	b1d5      	cbz	r5, 800ea6c <__d2b+0x98>
 800ea36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea3a:	4405      	add	r5, r0
 800ea3c:	f8c9 5000 	str.w	r5, [r9]
 800ea40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea44:	f8c8 0000 	str.w	r0, [r8]
 800ea48:	4620      	mov	r0, r4
 800ea4a:	b003      	add	sp, #12
 800ea4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea54:	e7d5      	b.n	800ea02 <__d2b+0x2e>
 800ea56:	6161      	str	r1, [r4, #20]
 800ea58:	e7e5      	b.n	800ea26 <__d2b+0x52>
 800ea5a:	a801      	add	r0, sp, #4
 800ea5c:	f7ff fd5a 	bl	800e514 <__lo0bits>
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	6163      	str	r3, [r4, #20]
 800ea64:	2201      	movs	r2, #1
 800ea66:	6122      	str	r2, [r4, #16]
 800ea68:	3020      	adds	r0, #32
 800ea6a:	e7e3      	b.n	800ea34 <__d2b+0x60>
 800ea6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea74:	f8c9 0000 	str.w	r0, [r9]
 800ea78:	6918      	ldr	r0, [r3, #16]
 800ea7a:	f7ff fd2b 	bl	800e4d4 <__hi0bits>
 800ea7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea82:	e7df      	b.n	800ea44 <__d2b+0x70>
 800ea84:	0800fd87 	.word	0x0800fd87
 800ea88:	0800fd98 	.word	0x0800fd98

0800ea8c <_calloc_r>:
 800ea8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea8e:	fba1 2402 	umull	r2, r4, r1, r2
 800ea92:	b94c      	cbnz	r4, 800eaa8 <_calloc_r+0x1c>
 800ea94:	4611      	mov	r1, r2
 800ea96:	9201      	str	r2, [sp, #4]
 800ea98:	f7fe f8dc 	bl	800cc54 <_malloc_r>
 800ea9c:	9a01      	ldr	r2, [sp, #4]
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	b930      	cbnz	r0, 800eab0 <_calloc_r+0x24>
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	b003      	add	sp, #12
 800eaa6:	bd30      	pop	{r4, r5, pc}
 800eaa8:	220c      	movs	r2, #12
 800eaaa:	6002      	str	r2, [r0, #0]
 800eaac:	2500      	movs	r5, #0
 800eaae:	e7f8      	b.n	800eaa2 <_calloc_r+0x16>
 800eab0:	4621      	mov	r1, r4
 800eab2:	f7fe f85b 	bl	800cb6c <memset>
 800eab6:	e7f4      	b.n	800eaa2 <_calloc_r+0x16>

0800eab8 <__ssputs_r>:
 800eab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eabc:	688e      	ldr	r6, [r1, #8]
 800eabe:	429e      	cmp	r6, r3
 800eac0:	4682      	mov	sl, r0
 800eac2:	460c      	mov	r4, r1
 800eac4:	4690      	mov	r8, r2
 800eac6:	461f      	mov	r7, r3
 800eac8:	d838      	bhi.n	800eb3c <__ssputs_r+0x84>
 800eaca:	898a      	ldrh	r2, [r1, #12]
 800eacc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ead0:	d032      	beq.n	800eb38 <__ssputs_r+0x80>
 800ead2:	6825      	ldr	r5, [r4, #0]
 800ead4:	6909      	ldr	r1, [r1, #16]
 800ead6:	eba5 0901 	sub.w	r9, r5, r1
 800eada:	6965      	ldr	r5, [r4, #20]
 800eadc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eae4:	3301      	adds	r3, #1
 800eae6:	444b      	add	r3, r9
 800eae8:	106d      	asrs	r5, r5, #1
 800eaea:	429d      	cmp	r5, r3
 800eaec:	bf38      	it	cc
 800eaee:	461d      	movcc	r5, r3
 800eaf0:	0553      	lsls	r3, r2, #21
 800eaf2:	d531      	bpl.n	800eb58 <__ssputs_r+0xa0>
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	f7fe f8ad 	bl	800cc54 <_malloc_r>
 800eafa:	4606      	mov	r6, r0
 800eafc:	b950      	cbnz	r0, 800eb14 <__ssputs_r+0x5c>
 800eafe:	230c      	movs	r3, #12
 800eb00:	f8ca 3000 	str.w	r3, [sl]
 800eb04:	89a3      	ldrh	r3, [r4, #12]
 800eb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb0a:	81a3      	strh	r3, [r4, #12]
 800eb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb14:	6921      	ldr	r1, [r4, #16]
 800eb16:	464a      	mov	r2, r9
 800eb18:	f7fe f81a 	bl	800cb50 <memcpy>
 800eb1c:	89a3      	ldrh	r3, [r4, #12]
 800eb1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb26:	81a3      	strh	r3, [r4, #12]
 800eb28:	6126      	str	r6, [r4, #16]
 800eb2a:	6165      	str	r5, [r4, #20]
 800eb2c:	444e      	add	r6, r9
 800eb2e:	eba5 0509 	sub.w	r5, r5, r9
 800eb32:	6026      	str	r6, [r4, #0]
 800eb34:	60a5      	str	r5, [r4, #8]
 800eb36:	463e      	mov	r6, r7
 800eb38:	42be      	cmp	r6, r7
 800eb3a:	d900      	bls.n	800eb3e <__ssputs_r+0x86>
 800eb3c:	463e      	mov	r6, r7
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	4632      	mov	r2, r6
 800eb42:	4641      	mov	r1, r8
 800eb44:	f000 f959 	bl	800edfa <memmove>
 800eb48:	68a3      	ldr	r3, [r4, #8]
 800eb4a:	1b9b      	subs	r3, r3, r6
 800eb4c:	60a3      	str	r3, [r4, #8]
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	4433      	add	r3, r6
 800eb52:	6023      	str	r3, [r4, #0]
 800eb54:	2000      	movs	r0, #0
 800eb56:	e7db      	b.n	800eb10 <__ssputs_r+0x58>
 800eb58:	462a      	mov	r2, r5
 800eb5a:	f000 f968 	bl	800ee2e <_realloc_r>
 800eb5e:	4606      	mov	r6, r0
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d1e1      	bne.n	800eb28 <__ssputs_r+0x70>
 800eb64:	6921      	ldr	r1, [r4, #16]
 800eb66:	4650      	mov	r0, sl
 800eb68:	f7fe f808 	bl	800cb7c <_free_r>
 800eb6c:	e7c7      	b.n	800eafe <__ssputs_r+0x46>
	...

0800eb70 <_svfiprintf_r>:
 800eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	4698      	mov	r8, r3
 800eb76:	898b      	ldrh	r3, [r1, #12]
 800eb78:	061b      	lsls	r3, r3, #24
 800eb7a:	b09d      	sub	sp, #116	; 0x74
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	460d      	mov	r5, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	d50e      	bpl.n	800eba2 <_svfiprintf_r+0x32>
 800eb84:	690b      	ldr	r3, [r1, #16]
 800eb86:	b963      	cbnz	r3, 800eba2 <_svfiprintf_r+0x32>
 800eb88:	2140      	movs	r1, #64	; 0x40
 800eb8a:	f7fe f863 	bl	800cc54 <_malloc_r>
 800eb8e:	6028      	str	r0, [r5, #0]
 800eb90:	6128      	str	r0, [r5, #16]
 800eb92:	b920      	cbnz	r0, 800eb9e <_svfiprintf_r+0x2e>
 800eb94:	230c      	movs	r3, #12
 800eb96:	603b      	str	r3, [r7, #0]
 800eb98:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9c:	e0d1      	b.n	800ed42 <_svfiprintf_r+0x1d2>
 800eb9e:	2340      	movs	r3, #64	; 0x40
 800eba0:	616b      	str	r3, [r5, #20]
 800eba2:	2300      	movs	r3, #0
 800eba4:	9309      	str	r3, [sp, #36]	; 0x24
 800eba6:	2320      	movs	r3, #32
 800eba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebb0:	2330      	movs	r3, #48	; 0x30
 800ebb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed5c <_svfiprintf_r+0x1ec>
 800ebb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebba:	f04f 0901 	mov.w	r9, #1
 800ebbe:	4623      	mov	r3, r4
 800ebc0:	469a      	mov	sl, r3
 800ebc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebc6:	b10a      	cbz	r2, 800ebcc <_svfiprintf_r+0x5c>
 800ebc8:	2a25      	cmp	r2, #37	; 0x25
 800ebca:	d1f9      	bne.n	800ebc0 <_svfiprintf_r+0x50>
 800ebcc:	ebba 0b04 	subs.w	fp, sl, r4
 800ebd0:	d00b      	beq.n	800ebea <_svfiprintf_r+0x7a>
 800ebd2:	465b      	mov	r3, fp
 800ebd4:	4622      	mov	r2, r4
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	4638      	mov	r0, r7
 800ebda:	f7ff ff6d 	bl	800eab8 <__ssputs_r>
 800ebde:	3001      	adds	r0, #1
 800ebe0:	f000 80aa 	beq.w	800ed38 <_svfiprintf_r+0x1c8>
 800ebe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebe6:	445a      	add	r2, fp
 800ebe8:	9209      	str	r2, [sp, #36]	; 0x24
 800ebea:	f89a 3000 	ldrb.w	r3, [sl]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f000 80a2 	beq.w	800ed38 <_svfiprintf_r+0x1c8>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebfe:	f10a 0a01 	add.w	sl, sl, #1
 800ec02:	9304      	str	r3, [sp, #16]
 800ec04:	9307      	str	r3, [sp, #28]
 800ec06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ec0c:	4654      	mov	r4, sl
 800ec0e:	2205      	movs	r2, #5
 800ec10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec14:	4851      	ldr	r0, [pc, #324]	; (800ed5c <_svfiprintf_r+0x1ec>)
 800ec16:	f7f1 fae3 	bl	80001e0 <memchr>
 800ec1a:	9a04      	ldr	r2, [sp, #16]
 800ec1c:	b9d8      	cbnz	r0, 800ec56 <_svfiprintf_r+0xe6>
 800ec1e:	06d0      	lsls	r0, r2, #27
 800ec20:	bf44      	itt	mi
 800ec22:	2320      	movmi	r3, #32
 800ec24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec28:	0711      	lsls	r1, r2, #28
 800ec2a:	bf44      	itt	mi
 800ec2c:	232b      	movmi	r3, #43	; 0x2b
 800ec2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec32:	f89a 3000 	ldrb.w	r3, [sl]
 800ec36:	2b2a      	cmp	r3, #42	; 0x2a
 800ec38:	d015      	beq.n	800ec66 <_svfiprintf_r+0xf6>
 800ec3a:	9a07      	ldr	r2, [sp, #28]
 800ec3c:	4654      	mov	r4, sl
 800ec3e:	2000      	movs	r0, #0
 800ec40:	f04f 0c0a 	mov.w	ip, #10
 800ec44:	4621      	mov	r1, r4
 800ec46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec4a:	3b30      	subs	r3, #48	; 0x30
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	d94e      	bls.n	800ecee <_svfiprintf_r+0x17e>
 800ec50:	b1b0      	cbz	r0, 800ec80 <_svfiprintf_r+0x110>
 800ec52:	9207      	str	r2, [sp, #28]
 800ec54:	e014      	b.n	800ec80 <_svfiprintf_r+0x110>
 800ec56:	eba0 0308 	sub.w	r3, r0, r8
 800ec5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	9304      	str	r3, [sp, #16]
 800ec62:	46a2      	mov	sl, r4
 800ec64:	e7d2      	b.n	800ec0c <_svfiprintf_r+0x9c>
 800ec66:	9b03      	ldr	r3, [sp, #12]
 800ec68:	1d19      	adds	r1, r3, #4
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	9103      	str	r1, [sp, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	bfbb      	ittet	lt
 800ec72:	425b      	neglt	r3, r3
 800ec74:	f042 0202 	orrlt.w	r2, r2, #2
 800ec78:	9307      	strge	r3, [sp, #28]
 800ec7a:	9307      	strlt	r3, [sp, #28]
 800ec7c:	bfb8      	it	lt
 800ec7e:	9204      	strlt	r2, [sp, #16]
 800ec80:	7823      	ldrb	r3, [r4, #0]
 800ec82:	2b2e      	cmp	r3, #46	; 0x2e
 800ec84:	d10c      	bne.n	800eca0 <_svfiprintf_r+0x130>
 800ec86:	7863      	ldrb	r3, [r4, #1]
 800ec88:	2b2a      	cmp	r3, #42	; 0x2a
 800ec8a:	d135      	bne.n	800ecf8 <_svfiprintf_r+0x188>
 800ec8c:	9b03      	ldr	r3, [sp, #12]
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	9203      	str	r2, [sp, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bfb8      	it	lt
 800ec98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec9c:	3402      	adds	r4, #2
 800ec9e:	9305      	str	r3, [sp, #20]
 800eca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed6c <_svfiprintf_r+0x1fc>
 800eca4:	7821      	ldrb	r1, [r4, #0]
 800eca6:	2203      	movs	r2, #3
 800eca8:	4650      	mov	r0, sl
 800ecaa:	f7f1 fa99 	bl	80001e0 <memchr>
 800ecae:	b140      	cbz	r0, 800ecc2 <_svfiprintf_r+0x152>
 800ecb0:	2340      	movs	r3, #64	; 0x40
 800ecb2:	eba0 000a 	sub.w	r0, r0, sl
 800ecb6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecba:	9b04      	ldr	r3, [sp, #16]
 800ecbc:	4303      	orrs	r3, r0
 800ecbe:	3401      	adds	r4, #1
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc6:	4826      	ldr	r0, [pc, #152]	; (800ed60 <_svfiprintf_r+0x1f0>)
 800ecc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eccc:	2206      	movs	r2, #6
 800ecce:	f7f1 fa87 	bl	80001e0 <memchr>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d038      	beq.n	800ed48 <_svfiprintf_r+0x1d8>
 800ecd6:	4b23      	ldr	r3, [pc, #140]	; (800ed64 <_svfiprintf_r+0x1f4>)
 800ecd8:	bb1b      	cbnz	r3, 800ed22 <_svfiprintf_r+0x1b2>
 800ecda:	9b03      	ldr	r3, [sp, #12]
 800ecdc:	3307      	adds	r3, #7
 800ecde:	f023 0307 	bic.w	r3, r3, #7
 800ece2:	3308      	adds	r3, #8
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece8:	4433      	add	r3, r6
 800ecea:	9309      	str	r3, [sp, #36]	; 0x24
 800ecec:	e767      	b.n	800ebbe <_svfiprintf_r+0x4e>
 800ecee:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	e7a5      	b.n	800ec44 <_svfiprintf_r+0xd4>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	3401      	adds	r4, #1
 800ecfc:	9305      	str	r3, [sp, #20]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	f04f 0c0a 	mov.w	ip, #10
 800ed04:	4620      	mov	r0, r4
 800ed06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed0a:	3a30      	subs	r2, #48	; 0x30
 800ed0c:	2a09      	cmp	r2, #9
 800ed0e:	d903      	bls.n	800ed18 <_svfiprintf_r+0x1a8>
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0c5      	beq.n	800eca0 <_svfiprintf_r+0x130>
 800ed14:	9105      	str	r1, [sp, #20]
 800ed16:	e7c3      	b.n	800eca0 <_svfiprintf_r+0x130>
 800ed18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e7f0      	b.n	800ed04 <_svfiprintf_r+0x194>
 800ed22:	ab03      	add	r3, sp, #12
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	462a      	mov	r2, r5
 800ed28:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <_svfiprintf_r+0x1f8>)
 800ed2a:	a904      	add	r1, sp, #16
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7fe f8a5 	bl	800ce7c <_printf_float>
 800ed32:	1c42      	adds	r2, r0, #1
 800ed34:	4606      	mov	r6, r0
 800ed36:	d1d6      	bne.n	800ece6 <_svfiprintf_r+0x176>
 800ed38:	89ab      	ldrh	r3, [r5, #12]
 800ed3a:	065b      	lsls	r3, r3, #25
 800ed3c:	f53f af2c 	bmi.w	800eb98 <_svfiprintf_r+0x28>
 800ed40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed42:	b01d      	add	sp, #116	; 0x74
 800ed44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed48:	ab03      	add	r3, sp, #12
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <_svfiprintf_r+0x1f8>)
 800ed50:	a904      	add	r1, sp, #16
 800ed52:	4638      	mov	r0, r7
 800ed54:	f7fe fb36 	bl	800d3c4 <_printf_i>
 800ed58:	e7eb      	b.n	800ed32 <_svfiprintf_r+0x1c2>
 800ed5a:	bf00      	nop
 800ed5c:	0800fef4 	.word	0x0800fef4
 800ed60:	0800fefe 	.word	0x0800fefe
 800ed64:	0800ce7d 	.word	0x0800ce7d
 800ed68:	0800eab9 	.word	0x0800eab9
 800ed6c:	0800fefa 	.word	0x0800fefa

0800ed70 <__assert_func>:
 800ed70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed72:	4614      	mov	r4, r2
 800ed74:	461a      	mov	r2, r3
 800ed76:	4b09      	ldr	r3, [pc, #36]	; (800ed9c <__assert_func+0x2c>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	68d8      	ldr	r0, [r3, #12]
 800ed7e:	b14c      	cbz	r4, 800ed94 <__assert_func+0x24>
 800ed80:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <__assert_func+0x30>)
 800ed82:	9100      	str	r1, [sp, #0]
 800ed84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed88:	4906      	ldr	r1, [pc, #24]	; (800eda4 <__assert_func+0x34>)
 800ed8a:	462b      	mov	r3, r5
 800ed8c:	f000 f80e 	bl	800edac <fiprintf>
 800ed90:	f000 faa4 	bl	800f2dc <abort>
 800ed94:	4b04      	ldr	r3, [pc, #16]	; (800eda8 <__assert_func+0x38>)
 800ed96:	461c      	mov	r4, r3
 800ed98:	e7f3      	b.n	800ed82 <__assert_func+0x12>
 800ed9a:	bf00      	nop
 800ed9c:	20000320 	.word	0x20000320
 800eda0:	0800ff05 	.word	0x0800ff05
 800eda4:	0800ff12 	.word	0x0800ff12
 800eda8:	0800ff40 	.word	0x0800ff40

0800edac <fiprintf>:
 800edac:	b40e      	push	{r1, r2, r3}
 800edae:	b503      	push	{r0, r1, lr}
 800edb0:	4601      	mov	r1, r0
 800edb2:	ab03      	add	r3, sp, #12
 800edb4:	4805      	ldr	r0, [pc, #20]	; (800edcc <fiprintf+0x20>)
 800edb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800edba:	6800      	ldr	r0, [r0, #0]
 800edbc:	9301      	str	r3, [sp, #4]
 800edbe:	f000 f88f 	bl	800eee0 <_vfiprintf_r>
 800edc2:	b002      	add	sp, #8
 800edc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc8:	b003      	add	sp, #12
 800edca:	4770      	bx	lr
 800edcc:	20000320 	.word	0x20000320

0800edd0 <__retarget_lock_init_recursive>:
 800edd0:	4770      	bx	lr

0800edd2 <__retarget_lock_acquire_recursive>:
 800edd2:	4770      	bx	lr

0800edd4 <__retarget_lock_release_recursive>:
 800edd4:	4770      	bx	lr

0800edd6 <__ascii_mbtowc>:
 800edd6:	b082      	sub	sp, #8
 800edd8:	b901      	cbnz	r1, 800eddc <__ascii_mbtowc+0x6>
 800edda:	a901      	add	r1, sp, #4
 800eddc:	b142      	cbz	r2, 800edf0 <__ascii_mbtowc+0x1a>
 800edde:	b14b      	cbz	r3, 800edf4 <__ascii_mbtowc+0x1e>
 800ede0:	7813      	ldrb	r3, [r2, #0]
 800ede2:	600b      	str	r3, [r1, #0]
 800ede4:	7812      	ldrb	r2, [r2, #0]
 800ede6:	1e10      	subs	r0, r2, #0
 800ede8:	bf18      	it	ne
 800edea:	2001      	movne	r0, #1
 800edec:	b002      	add	sp, #8
 800edee:	4770      	bx	lr
 800edf0:	4610      	mov	r0, r2
 800edf2:	e7fb      	b.n	800edec <__ascii_mbtowc+0x16>
 800edf4:	f06f 0001 	mvn.w	r0, #1
 800edf8:	e7f8      	b.n	800edec <__ascii_mbtowc+0x16>

0800edfa <memmove>:
 800edfa:	4288      	cmp	r0, r1
 800edfc:	b510      	push	{r4, lr}
 800edfe:	eb01 0402 	add.w	r4, r1, r2
 800ee02:	d902      	bls.n	800ee0a <memmove+0x10>
 800ee04:	4284      	cmp	r4, r0
 800ee06:	4623      	mov	r3, r4
 800ee08:	d807      	bhi.n	800ee1a <memmove+0x20>
 800ee0a:	1e43      	subs	r3, r0, #1
 800ee0c:	42a1      	cmp	r1, r4
 800ee0e:	d008      	beq.n	800ee22 <memmove+0x28>
 800ee10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee18:	e7f8      	b.n	800ee0c <memmove+0x12>
 800ee1a:	4402      	add	r2, r0
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	428a      	cmp	r2, r1
 800ee20:	d100      	bne.n	800ee24 <memmove+0x2a>
 800ee22:	bd10      	pop	{r4, pc}
 800ee24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee2c:	e7f7      	b.n	800ee1e <memmove+0x24>

0800ee2e <_realloc_r>:
 800ee2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee32:	4680      	mov	r8, r0
 800ee34:	4614      	mov	r4, r2
 800ee36:	460e      	mov	r6, r1
 800ee38:	b921      	cbnz	r1, 800ee44 <_realloc_r+0x16>
 800ee3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee3e:	4611      	mov	r1, r2
 800ee40:	f7fd bf08 	b.w	800cc54 <_malloc_r>
 800ee44:	b92a      	cbnz	r2, 800ee52 <_realloc_r+0x24>
 800ee46:	f7fd fe99 	bl	800cb7c <_free_r>
 800ee4a:	4625      	mov	r5, r4
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee52:	f000 fc67 	bl	800f724 <_malloc_usable_size_r>
 800ee56:	4284      	cmp	r4, r0
 800ee58:	4607      	mov	r7, r0
 800ee5a:	d802      	bhi.n	800ee62 <_realloc_r+0x34>
 800ee5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee60:	d812      	bhi.n	800ee88 <_realloc_r+0x5a>
 800ee62:	4621      	mov	r1, r4
 800ee64:	4640      	mov	r0, r8
 800ee66:	f7fd fef5 	bl	800cc54 <_malloc_r>
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0ed      	beq.n	800ee4c <_realloc_r+0x1e>
 800ee70:	42bc      	cmp	r4, r7
 800ee72:	4622      	mov	r2, r4
 800ee74:	4631      	mov	r1, r6
 800ee76:	bf28      	it	cs
 800ee78:	463a      	movcs	r2, r7
 800ee7a:	f7fd fe69 	bl	800cb50 <memcpy>
 800ee7e:	4631      	mov	r1, r6
 800ee80:	4640      	mov	r0, r8
 800ee82:	f7fd fe7b 	bl	800cb7c <_free_r>
 800ee86:	e7e1      	b.n	800ee4c <_realloc_r+0x1e>
 800ee88:	4635      	mov	r5, r6
 800ee8a:	e7df      	b.n	800ee4c <_realloc_r+0x1e>

0800ee8c <__sfputc_r>:
 800ee8c:	6893      	ldr	r3, [r2, #8]
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	b410      	push	{r4}
 800ee94:	6093      	str	r3, [r2, #8]
 800ee96:	da08      	bge.n	800eeaa <__sfputc_r+0x1e>
 800ee98:	6994      	ldr	r4, [r2, #24]
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	db01      	blt.n	800eea2 <__sfputc_r+0x16>
 800ee9e:	290a      	cmp	r1, #10
 800eea0:	d103      	bne.n	800eeaa <__sfputc_r+0x1e>
 800eea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea6:	f000 b94b 	b.w	800f140 <__swbuf_r>
 800eeaa:	6813      	ldr	r3, [r2, #0]
 800eeac:	1c58      	adds	r0, r3, #1
 800eeae:	6010      	str	r0, [r2, #0]
 800eeb0:	7019      	strb	r1, [r3, #0]
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <__sfputs_r>:
 800eeba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eebc:	4606      	mov	r6, r0
 800eebe:	460f      	mov	r7, r1
 800eec0:	4614      	mov	r4, r2
 800eec2:	18d5      	adds	r5, r2, r3
 800eec4:	42ac      	cmp	r4, r5
 800eec6:	d101      	bne.n	800eecc <__sfputs_r+0x12>
 800eec8:	2000      	movs	r0, #0
 800eeca:	e007      	b.n	800eedc <__sfputs_r+0x22>
 800eecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed0:	463a      	mov	r2, r7
 800eed2:	4630      	mov	r0, r6
 800eed4:	f7ff ffda 	bl	800ee8c <__sfputc_r>
 800eed8:	1c43      	adds	r3, r0, #1
 800eeda:	d1f3      	bne.n	800eec4 <__sfputs_r+0xa>
 800eedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eee0 <_vfiprintf_r>:
 800eee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee4:	460d      	mov	r5, r1
 800eee6:	b09d      	sub	sp, #116	; 0x74
 800eee8:	4614      	mov	r4, r2
 800eeea:	4698      	mov	r8, r3
 800eeec:	4606      	mov	r6, r0
 800eeee:	b118      	cbz	r0, 800eef8 <_vfiprintf_r+0x18>
 800eef0:	6983      	ldr	r3, [r0, #24]
 800eef2:	b90b      	cbnz	r3, 800eef8 <_vfiprintf_r+0x18>
 800eef4:	f000 fb14 	bl	800f520 <__sinit>
 800eef8:	4b89      	ldr	r3, [pc, #548]	; (800f120 <_vfiprintf_r+0x240>)
 800eefa:	429d      	cmp	r5, r3
 800eefc:	d11b      	bne.n	800ef36 <_vfiprintf_r+0x56>
 800eefe:	6875      	ldr	r5, [r6, #4]
 800ef00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef02:	07d9      	lsls	r1, r3, #31
 800ef04:	d405      	bmi.n	800ef12 <_vfiprintf_r+0x32>
 800ef06:	89ab      	ldrh	r3, [r5, #12]
 800ef08:	059a      	lsls	r2, r3, #22
 800ef0a:	d402      	bmi.n	800ef12 <_vfiprintf_r+0x32>
 800ef0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef0e:	f7ff ff60 	bl	800edd2 <__retarget_lock_acquire_recursive>
 800ef12:	89ab      	ldrh	r3, [r5, #12]
 800ef14:	071b      	lsls	r3, r3, #28
 800ef16:	d501      	bpl.n	800ef1c <_vfiprintf_r+0x3c>
 800ef18:	692b      	ldr	r3, [r5, #16]
 800ef1a:	b9eb      	cbnz	r3, 800ef58 <_vfiprintf_r+0x78>
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f000 f96e 	bl	800f200 <__swsetup_r>
 800ef24:	b1c0      	cbz	r0, 800ef58 <_vfiprintf_r+0x78>
 800ef26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef28:	07dc      	lsls	r4, r3, #31
 800ef2a:	d50e      	bpl.n	800ef4a <_vfiprintf_r+0x6a>
 800ef2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef30:	b01d      	add	sp, #116	; 0x74
 800ef32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef36:	4b7b      	ldr	r3, [pc, #492]	; (800f124 <_vfiprintf_r+0x244>)
 800ef38:	429d      	cmp	r5, r3
 800ef3a:	d101      	bne.n	800ef40 <_vfiprintf_r+0x60>
 800ef3c:	68b5      	ldr	r5, [r6, #8]
 800ef3e:	e7df      	b.n	800ef00 <_vfiprintf_r+0x20>
 800ef40:	4b79      	ldr	r3, [pc, #484]	; (800f128 <_vfiprintf_r+0x248>)
 800ef42:	429d      	cmp	r5, r3
 800ef44:	bf08      	it	eq
 800ef46:	68f5      	ldreq	r5, [r6, #12]
 800ef48:	e7da      	b.n	800ef00 <_vfiprintf_r+0x20>
 800ef4a:	89ab      	ldrh	r3, [r5, #12]
 800ef4c:	0598      	lsls	r0, r3, #22
 800ef4e:	d4ed      	bmi.n	800ef2c <_vfiprintf_r+0x4c>
 800ef50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef52:	f7ff ff3f 	bl	800edd4 <__retarget_lock_release_recursive>
 800ef56:	e7e9      	b.n	800ef2c <_vfiprintf_r+0x4c>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef66:	2330      	movs	r3, #48	; 0x30
 800ef68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f12c <_vfiprintf_r+0x24c>
 800ef6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef70:	f04f 0901 	mov.w	r9, #1
 800ef74:	4623      	mov	r3, r4
 800ef76:	469a      	mov	sl, r3
 800ef78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef7c:	b10a      	cbz	r2, 800ef82 <_vfiprintf_r+0xa2>
 800ef7e:	2a25      	cmp	r2, #37	; 0x25
 800ef80:	d1f9      	bne.n	800ef76 <_vfiprintf_r+0x96>
 800ef82:	ebba 0b04 	subs.w	fp, sl, r4
 800ef86:	d00b      	beq.n	800efa0 <_vfiprintf_r+0xc0>
 800ef88:	465b      	mov	r3, fp
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f7ff ff93 	bl	800eeba <__sfputs_r>
 800ef94:	3001      	adds	r0, #1
 800ef96:	f000 80aa 	beq.w	800f0ee <_vfiprintf_r+0x20e>
 800ef9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef9c:	445a      	add	r2, fp
 800ef9e:	9209      	str	r2, [sp, #36]	; 0x24
 800efa0:	f89a 3000 	ldrb.w	r3, [sl]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f000 80a2 	beq.w	800f0ee <_vfiprintf_r+0x20e>
 800efaa:	2300      	movs	r3, #0
 800efac:	f04f 32ff 	mov.w	r2, #4294967295
 800efb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efb4:	f10a 0a01 	add.w	sl, sl, #1
 800efb8:	9304      	str	r3, [sp, #16]
 800efba:	9307      	str	r3, [sp, #28]
 800efbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efc0:	931a      	str	r3, [sp, #104]	; 0x68
 800efc2:	4654      	mov	r4, sl
 800efc4:	2205      	movs	r2, #5
 800efc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efca:	4858      	ldr	r0, [pc, #352]	; (800f12c <_vfiprintf_r+0x24c>)
 800efcc:	f7f1 f908 	bl	80001e0 <memchr>
 800efd0:	9a04      	ldr	r2, [sp, #16]
 800efd2:	b9d8      	cbnz	r0, 800f00c <_vfiprintf_r+0x12c>
 800efd4:	06d1      	lsls	r1, r2, #27
 800efd6:	bf44      	itt	mi
 800efd8:	2320      	movmi	r3, #32
 800efda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efde:	0713      	lsls	r3, r2, #28
 800efe0:	bf44      	itt	mi
 800efe2:	232b      	movmi	r3, #43	; 0x2b
 800efe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efe8:	f89a 3000 	ldrb.w	r3, [sl]
 800efec:	2b2a      	cmp	r3, #42	; 0x2a
 800efee:	d015      	beq.n	800f01c <_vfiprintf_r+0x13c>
 800eff0:	9a07      	ldr	r2, [sp, #28]
 800eff2:	4654      	mov	r4, sl
 800eff4:	2000      	movs	r0, #0
 800eff6:	f04f 0c0a 	mov.w	ip, #10
 800effa:	4621      	mov	r1, r4
 800effc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f000:	3b30      	subs	r3, #48	; 0x30
 800f002:	2b09      	cmp	r3, #9
 800f004:	d94e      	bls.n	800f0a4 <_vfiprintf_r+0x1c4>
 800f006:	b1b0      	cbz	r0, 800f036 <_vfiprintf_r+0x156>
 800f008:	9207      	str	r2, [sp, #28]
 800f00a:	e014      	b.n	800f036 <_vfiprintf_r+0x156>
 800f00c:	eba0 0308 	sub.w	r3, r0, r8
 800f010:	fa09 f303 	lsl.w	r3, r9, r3
 800f014:	4313      	orrs	r3, r2
 800f016:	9304      	str	r3, [sp, #16]
 800f018:	46a2      	mov	sl, r4
 800f01a:	e7d2      	b.n	800efc2 <_vfiprintf_r+0xe2>
 800f01c:	9b03      	ldr	r3, [sp, #12]
 800f01e:	1d19      	adds	r1, r3, #4
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	9103      	str	r1, [sp, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	bfbb      	ittet	lt
 800f028:	425b      	neglt	r3, r3
 800f02a:	f042 0202 	orrlt.w	r2, r2, #2
 800f02e:	9307      	strge	r3, [sp, #28]
 800f030:	9307      	strlt	r3, [sp, #28]
 800f032:	bfb8      	it	lt
 800f034:	9204      	strlt	r2, [sp, #16]
 800f036:	7823      	ldrb	r3, [r4, #0]
 800f038:	2b2e      	cmp	r3, #46	; 0x2e
 800f03a:	d10c      	bne.n	800f056 <_vfiprintf_r+0x176>
 800f03c:	7863      	ldrb	r3, [r4, #1]
 800f03e:	2b2a      	cmp	r3, #42	; 0x2a
 800f040:	d135      	bne.n	800f0ae <_vfiprintf_r+0x1ce>
 800f042:	9b03      	ldr	r3, [sp, #12]
 800f044:	1d1a      	adds	r2, r3, #4
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	9203      	str	r2, [sp, #12]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	bfb8      	it	lt
 800f04e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f052:	3402      	adds	r4, #2
 800f054:	9305      	str	r3, [sp, #20]
 800f056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f13c <_vfiprintf_r+0x25c>
 800f05a:	7821      	ldrb	r1, [r4, #0]
 800f05c:	2203      	movs	r2, #3
 800f05e:	4650      	mov	r0, sl
 800f060:	f7f1 f8be 	bl	80001e0 <memchr>
 800f064:	b140      	cbz	r0, 800f078 <_vfiprintf_r+0x198>
 800f066:	2340      	movs	r3, #64	; 0x40
 800f068:	eba0 000a 	sub.w	r0, r0, sl
 800f06c:	fa03 f000 	lsl.w	r0, r3, r0
 800f070:	9b04      	ldr	r3, [sp, #16]
 800f072:	4303      	orrs	r3, r0
 800f074:	3401      	adds	r4, #1
 800f076:	9304      	str	r3, [sp, #16]
 800f078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f07c:	482c      	ldr	r0, [pc, #176]	; (800f130 <_vfiprintf_r+0x250>)
 800f07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f082:	2206      	movs	r2, #6
 800f084:	f7f1 f8ac 	bl	80001e0 <memchr>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d03f      	beq.n	800f10c <_vfiprintf_r+0x22c>
 800f08c:	4b29      	ldr	r3, [pc, #164]	; (800f134 <_vfiprintf_r+0x254>)
 800f08e:	bb1b      	cbnz	r3, 800f0d8 <_vfiprintf_r+0x1f8>
 800f090:	9b03      	ldr	r3, [sp, #12]
 800f092:	3307      	adds	r3, #7
 800f094:	f023 0307 	bic.w	r3, r3, #7
 800f098:	3308      	adds	r3, #8
 800f09a:	9303      	str	r3, [sp, #12]
 800f09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09e:	443b      	add	r3, r7
 800f0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0a2:	e767      	b.n	800ef74 <_vfiprintf_r+0x94>
 800f0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	2001      	movs	r0, #1
 800f0ac:	e7a5      	b.n	800effa <_vfiprintf_r+0x11a>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	3401      	adds	r4, #1
 800f0b2:	9305      	str	r3, [sp, #20]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f04f 0c0a 	mov.w	ip, #10
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c0:	3a30      	subs	r2, #48	; 0x30
 800f0c2:	2a09      	cmp	r2, #9
 800f0c4:	d903      	bls.n	800f0ce <_vfiprintf_r+0x1ee>
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d0c5      	beq.n	800f056 <_vfiprintf_r+0x176>
 800f0ca:	9105      	str	r1, [sp, #20]
 800f0cc:	e7c3      	b.n	800f056 <_vfiprintf_r+0x176>
 800f0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	e7f0      	b.n	800f0ba <_vfiprintf_r+0x1da>
 800f0d8:	ab03      	add	r3, sp, #12
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	462a      	mov	r2, r5
 800f0de:	4b16      	ldr	r3, [pc, #88]	; (800f138 <_vfiprintf_r+0x258>)
 800f0e0:	a904      	add	r1, sp, #16
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7fd feca 	bl	800ce7c <_printf_float>
 800f0e8:	4607      	mov	r7, r0
 800f0ea:	1c78      	adds	r0, r7, #1
 800f0ec:	d1d6      	bne.n	800f09c <_vfiprintf_r+0x1bc>
 800f0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0f0:	07d9      	lsls	r1, r3, #31
 800f0f2:	d405      	bmi.n	800f100 <_vfiprintf_r+0x220>
 800f0f4:	89ab      	ldrh	r3, [r5, #12]
 800f0f6:	059a      	lsls	r2, r3, #22
 800f0f8:	d402      	bmi.n	800f100 <_vfiprintf_r+0x220>
 800f0fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0fc:	f7ff fe6a 	bl	800edd4 <__retarget_lock_release_recursive>
 800f100:	89ab      	ldrh	r3, [r5, #12]
 800f102:	065b      	lsls	r3, r3, #25
 800f104:	f53f af12 	bmi.w	800ef2c <_vfiprintf_r+0x4c>
 800f108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f10a:	e711      	b.n	800ef30 <_vfiprintf_r+0x50>
 800f10c:	ab03      	add	r3, sp, #12
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	462a      	mov	r2, r5
 800f112:	4b09      	ldr	r3, [pc, #36]	; (800f138 <_vfiprintf_r+0x258>)
 800f114:	a904      	add	r1, sp, #16
 800f116:	4630      	mov	r0, r6
 800f118:	f7fe f954 	bl	800d3c4 <_printf_i>
 800f11c:	e7e4      	b.n	800f0e8 <_vfiprintf_r+0x208>
 800f11e:	bf00      	nop
 800f120:	0801006c 	.word	0x0801006c
 800f124:	0801008c 	.word	0x0801008c
 800f128:	0801004c 	.word	0x0801004c
 800f12c:	0800fef4 	.word	0x0800fef4
 800f130:	0800fefe 	.word	0x0800fefe
 800f134:	0800ce7d 	.word	0x0800ce7d
 800f138:	0800eebb 	.word	0x0800eebb
 800f13c:	0800fefa 	.word	0x0800fefa

0800f140 <__swbuf_r>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	460e      	mov	r6, r1
 800f144:	4614      	mov	r4, r2
 800f146:	4605      	mov	r5, r0
 800f148:	b118      	cbz	r0, 800f152 <__swbuf_r+0x12>
 800f14a:	6983      	ldr	r3, [r0, #24]
 800f14c:	b90b      	cbnz	r3, 800f152 <__swbuf_r+0x12>
 800f14e:	f000 f9e7 	bl	800f520 <__sinit>
 800f152:	4b21      	ldr	r3, [pc, #132]	; (800f1d8 <__swbuf_r+0x98>)
 800f154:	429c      	cmp	r4, r3
 800f156:	d12b      	bne.n	800f1b0 <__swbuf_r+0x70>
 800f158:	686c      	ldr	r4, [r5, #4]
 800f15a:	69a3      	ldr	r3, [r4, #24]
 800f15c:	60a3      	str	r3, [r4, #8]
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	071a      	lsls	r2, r3, #28
 800f162:	d52f      	bpl.n	800f1c4 <__swbuf_r+0x84>
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	b36b      	cbz	r3, 800f1c4 <__swbuf_r+0x84>
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	6820      	ldr	r0, [r4, #0]
 800f16c:	1ac0      	subs	r0, r0, r3
 800f16e:	6963      	ldr	r3, [r4, #20]
 800f170:	b2f6      	uxtb	r6, r6
 800f172:	4283      	cmp	r3, r0
 800f174:	4637      	mov	r7, r6
 800f176:	dc04      	bgt.n	800f182 <__swbuf_r+0x42>
 800f178:	4621      	mov	r1, r4
 800f17a:	4628      	mov	r0, r5
 800f17c:	f000 f93c 	bl	800f3f8 <_fflush_r>
 800f180:	bb30      	cbnz	r0, 800f1d0 <__swbuf_r+0x90>
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	3b01      	subs	r3, #1
 800f186:	60a3      	str	r3, [r4, #8]
 800f188:	6823      	ldr	r3, [r4, #0]
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	6022      	str	r2, [r4, #0]
 800f18e:	701e      	strb	r6, [r3, #0]
 800f190:	6963      	ldr	r3, [r4, #20]
 800f192:	3001      	adds	r0, #1
 800f194:	4283      	cmp	r3, r0
 800f196:	d004      	beq.n	800f1a2 <__swbuf_r+0x62>
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	07db      	lsls	r3, r3, #31
 800f19c:	d506      	bpl.n	800f1ac <__swbuf_r+0x6c>
 800f19e:	2e0a      	cmp	r6, #10
 800f1a0:	d104      	bne.n	800f1ac <__swbuf_r+0x6c>
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f000 f927 	bl	800f3f8 <_fflush_r>
 800f1aa:	b988      	cbnz	r0, 800f1d0 <__swbuf_r+0x90>
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b0:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <__swbuf_r+0x9c>)
 800f1b2:	429c      	cmp	r4, r3
 800f1b4:	d101      	bne.n	800f1ba <__swbuf_r+0x7a>
 800f1b6:	68ac      	ldr	r4, [r5, #8]
 800f1b8:	e7cf      	b.n	800f15a <__swbuf_r+0x1a>
 800f1ba:	4b09      	ldr	r3, [pc, #36]	; (800f1e0 <__swbuf_r+0xa0>)
 800f1bc:	429c      	cmp	r4, r3
 800f1be:	bf08      	it	eq
 800f1c0:	68ec      	ldreq	r4, [r5, #12]
 800f1c2:	e7ca      	b.n	800f15a <__swbuf_r+0x1a>
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 f81a 	bl	800f200 <__swsetup_r>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d0cb      	beq.n	800f168 <__swbuf_r+0x28>
 800f1d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1d4:	e7ea      	b.n	800f1ac <__swbuf_r+0x6c>
 800f1d6:	bf00      	nop
 800f1d8:	0801006c 	.word	0x0801006c
 800f1dc:	0801008c 	.word	0x0801008c
 800f1e0:	0801004c 	.word	0x0801004c

0800f1e4 <__ascii_wctomb>:
 800f1e4:	b149      	cbz	r1, 800f1fa <__ascii_wctomb+0x16>
 800f1e6:	2aff      	cmp	r2, #255	; 0xff
 800f1e8:	bf85      	ittet	hi
 800f1ea:	238a      	movhi	r3, #138	; 0x8a
 800f1ec:	6003      	strhi	r3, [r0, #0]
 800f1ee:	700a      	strbls	r2, [r1, #0]
 800f1f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800f1f4:	bf98      	it	ls
 800f1f6:	2001      	movls	r0, #1
 800f1f8:	4770      	bx	lr
 800f1fa:	4608      	mov	r0, r1
 800f1fc:	4770      	bx	lr
	...

0800f200 <__swsetup_r>:
 800f200:	4b32      	ldr	r3, [pc, #200]	; (800f2cc <__swsetup_r+0xcc>)
 800f202:	b570      	push	{r4, r5, r6, lr}
 800f204:	681d      	ldr	r5, [r3, #0]
 800f206:	4606      	mov	r6, r0
 800f208:	460c      	mov	r4, r1
 800f20a:	b125      	cbz	r5, 800f216 <__swsetup_r+0x16>
 800f20c:	69ab      	ldr	r3, [r5, #24]
 800f20e:	b913      	cbnz	r3, 800f216 <__swsetup_r+0x16>
 800f210:	4628      	mov	r0, r5
 800f212:	f000 f985 	bl	800f520 <__sinit>
 800f216:	4b2e      	ldr	r3, [pc, #184]	; (800f2d0 <__swsetup_r+0xd0>)
 800f218:	429c      	cmp	r4, r3
 800f21a:	d10f      	bne.n	800f23c <__swsetup_r+0x3c>
 800f21c:	686c      	ldr	r4, [r5, #4]
 800f21e:	89a3      	ldrh	r3, [r4, #12]
 800f220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f224:	0719      	lsls	r1, r3, #28
 800f226:	d42c      	bmi.n	800f282 <__swsetup_r+0x82>
 800f228:	06dd      	lsls	r5, r3, #27
 800f22a:	d411      	bmi.n	800f250 <__swsetup_r+0x50>
 800f22c:	2309      	movs	r3, #9
 800f22e:	6033      	str	r3, [r6, #0]
 800f230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f234:	81a3      	strh	r3, [r4, #12]
 800f236:	f04f 30ff 	mov.w	r0, #4294967295
 800f23a:	e03e      	b.n	800f2ba <__swsetup_r+0xba>
 800f23c:	4b25      	ldr	r3, [pc, #148]	; (800f2d4 <__swsetup_r+0xd4>)
 800f23e:	429c      	cmp	r4, r3
 800f240:	d101      	bne.n	800f246 <__swsetup_r+0x46>
 800f242:	68ac      	ldr	r4, [r5, #8]
 800f244:	e7eb      	b.n	800f21e <__swsetup_r+0x1e>
 800f246:	4b24      	ldr	r3, [pc, #144]	; (800f2d8 <__swsetup_r+0xd8>)
 800f248:	429c      	cmp	r4, r3
 800f24a:	bf08      	it	eq
 800f24c:	68ec      	ldreq	r4, [r5, #12]
 800f24e:	e7e6      	b.n	800f21e <__swsetup_r+0x1e>
 800f250:	0758      	lsls	r0, r3, #29
 800f252:	d512      	bpl.n	800f27a <__swsetup_r+0x7a>
 800f254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f256:	b141      	cbz	r1, 800f26a <__swsetup_r+0x6a>
 800f258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f25c:	4299      	cmp	r1, r3
 800f25e:	d002      	beq.n	800f266 <__swsetup_r+0x66>
 800f260:	4630      	mov	r0, r6
 800f262:	f7fd fc8b 	bl	800cb7c <_free_r>
 800f266:	2300      	movs	r3, #0
 800f268:	6363      	str	r3, [r4, #52]	; 0x34
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	2300      	movs	r3, #0
 800f274:	6063      	str	r3, [r4, #4]
 800f276:	6923      	ldr	r3, [r4, #16]
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	89a3      	ldrh	r3, [r4, #12]
 800f27c:	f043 0308 	orr.w	r3, r3, #8
 800f280:	81a3      	strh	r3, [r4, #12]
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	b94b      	cbnz	r3, 800f29a <__swsetup_r+0x9a>
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f290:	d003      	beq.n	800f29a <__swsetup_r+0x9a>
 800f292:	4621      	mov	r1, r4
 800f294:	4630      	mov	r0, r6
 800f296:	f000 fa05 	bl	800f6a4 <__smakebuf_r>
 800f29a:	89a0      	ldrh	r0, [r4, #12]
 800f29c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2a0:	f010 0301 	ands.w	r3, r0, #1
 800f2a4:	d00a      	beq.n	800f2bc <__swsetup_r+0xbc>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	60a3      	str	r3, [r4, #8]
 800f2aa:	6963      	ldr	r3, [r4, #20]
 800f2ac:	425b      	negs	r3, r3
 800f2ae:	61a3      	str	r3, [r4, #24]
 800f2b0:	6923      	ldr	r3, [r4, #16]
 800f2b2:	b943      	cbnz	r3, 800f2c6 <__swsetup_r+0xc6>
 800f2b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2b8:	d1ba      	bne.n	800f230 <__swsetup_r+0x30>
 800f2ba:	bd70      	pop	{r4, r5, r6, pc}
 800f2bc:	0781      	lsls	r1, r0, #30
 800f2be:	bf58      	it	pl
 800f2c0:	6963      	ldrpl	r3, [r4, #20]
 800f2c2:	60a3      	str	r3, [r4, #8]
 800f2c4:	e7f4      	b.n	800f2b0 <__swsetup_r+0xb0>
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	e7f7      	b.n	800f2ba <__swsetup_r+0xba>
 800f2ca:	bf00      	nop
 800f2cc:	20000320 	.word	0x20000320
 800f2d0:	0801006c 	.word	0x0801006c
 800f2d4:	0801008c 	.word	0x0801008c
 800f2d8:	0801004c 	.word	0x0801004c

0800f2dc <abort>:
 800f2dc:	b508      	push	{r3, lr}
 800f2de:	2006      	movs	r0, #6
 800f2e0:	f000 fa50 	bl	800f784 <raise>
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	f7f5 f8c0 	bl	800446a <_exit>
	...

0800f2ec <__sflush_r>:
 800f2ec:	898a      	ldrh	r2, [r1, #12]
 800f2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	0710      	lsls	r0, r2, #28
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	d458      	bmi.n	800f3ac <__sflush_r+0xc0>
 800f2fa:	684b      	ldr	r3, [r1, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	dc05      	bgt.n	800f30c <__sflush_r+0x20>
 800f300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f302:	2b00      	cmp	r3, #0
 800f304:	dc02      	bgt.n	800f30c <__sflush_r+0x20>
 800f306:	2000      	movs	r0, #0
 800f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f30e:	2e00      	cmp	r6, #0
 800f310:	d0f9      	beq.n	800f306 <__sflush_r+0x1a>
 800f312:	2300      	movs	r3, #0
 800f314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f318:	682f      	ldr	r7, [r5, #0]
 800f31a:	602b      	str	r3, [r5, #0]
 800f31c:	d032      	beq.n	800f384 <__sflush_r+0x98>
 800f31e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	075a      	lsls	r2, r3, #29
 800f324:	d505      	bpl.n	800f332 <__sflush_r+0x46>
 800f326:	6863      	ldr	r3, [r4, #4]
 800f328:	1ac0      	subs	r0, r0, r3
 800f32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f32c:	b10b      	cbz	r3, 800f332 <__sflush_r+0x46>
 800f32e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f330:	1ac0      	subs	r0, r0, r3
 800f332:	2300      	movs	r3, #0
 800f334:	4602      	mov	r2, r0
 800f336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f338:	6a21      	ldr	r1, [r4, #32]
 800f33a:	4628      	mov	r0, r5
 800f33c:	47b0      	blx	r6
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	d106      	bne.n	800f352 <__sflush_r+0x66>
 800f344:	6829      	ldr	r1, [r5, #0]
 800f346:	291d      	cmp	r1, #29
 800f348:	d82c      	bhi.n	800f3a4 <__sflush_r+0xb8>
 800f34a:	4a2a      	ldr	r2, [pc, #168]	; (800f3f4 <__sflush_r+0x108>)
 800f34c:	40ca      	lsrs	r2, r1
 800f34e:	07d6      	lsls	r6, r2, #31
 800f350:	d528      	bpl.n	800f3a4 <__sflush_r+0xb8>
 800f352:	2200      	movs	r2, #0
 800f354:	6062      	str	r2, [r4, #4]
 800f356:	04d9      	lsls	r1, r3, #19
 800f358:	6922      	ldr	r2, [r4, #16]
 800f35a:	6022      	str	r2, [r4, #0]
 800f35c:	d504      	bpl.n	800f368 <__sflush_r+0x7c>
 800f35e:	1c42      	adds	r2, r0, #1
 800f360:	d101      	bne.n	800f366 <__sflush_r+0x7a>
 800f362:	682b      	ldr	r3, [r5, #0]
 800f364:	b903      	cbnz	r3, 800f368 <__sflush_r+0x7c>
 800f366:	6560      	str	r0, [r4, #84]	; 0x54
 800f368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f36a:	602f      	str	r7, [r5, #0]
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d0ca      	beq.n	800f306 <__sflush_r+0x1a>
 800f370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f374:	4299      	cmp	r1, r3
 800f376:	d002      	beq.n	800f37e <__sflush_r+0x92>
 800f378:	4628      	mov	r0, r5
 800f37a:	f7fd fbff 	bl	800cb7c <_free_r>
 800f37e:	2000      	movs	r0, #0
 800f380:	6360      	str	r0, [r4, #52]	; 0x34
 800f382:	e7c1      	b.n	800f308 <__sflush_r+0x1c>
 800f384:	6a21      	ldr	r1, [r4, #32]
 800f386:	2301      	movs	r3, #1
 800f388:	4628      	mov	r0, r5
 800f38a:	47b0      	blx	r6
 800f38c:	1c41      	adds	r1, r0, #1
 800f38e:	d1c7      	bne.n	800f320 <__sflush_r+0x34>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0c4      	beq.n	800f320 <__sflush_r+0x34>
 800f396:	2b1d      	cmp	r3, #29
 800f398:	d001      	beq.n	800f39e <__sflush_r+0xb2>
 800f39a:	2b16      	cmp	r3, #22
 800f39c:	d101      	bne.n	800f3a2 <__sflush_r+0xb6>
 800f39e:	602f      	str	r7, [r5, #0]
 800f3a0:	e7b1      	b.n	800f306 <__sflush_r+0x1a>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	e7ad      	b.n	800f308 <__sflush_r+0x1c>
 800f3ac:	690f      	ldr	r7, [r1, #16]
 800f3ae:	2f00      	cmp	r7, #0
 800f3b0:	d0a9      	beq.n	800f306 <__sflush_r+0x1a>
 800f3b2:	0793      	lsls	r3, r2, #30
 800f3b4:	680e      	ldr	r6, [r1, #0]
 800f3b6:	bf08      	it	eq
 800f3b8:	694b      	ldreq	r3, [r1, #20]
 800f3ba:	600f      	str	r7, [r1, #0]
 800f3bc:	bf18      	it	ne
 800f3be:	2300      	movne	r3, #0
 800f3c0:	eba6 0807 	sub.w	r8, r6, r7
 800f3c4:	608b      	str	r3, [r1, #8]
 800f3c6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ca:	dd9c      	ble.n	800f306 <__sflush_r+0x1a>
 800f3cc:	6a21      	ldr	r1, [r4, #32]
 800f3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f3d0:	4643      	mov	r3, r8
 800f3d2:	463a      	mov	r2, r7
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	47b0      	blx	r6
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	dc06      	bgt.n	800f3ea <__sflush_r+0xfe>
 800f3dc:	89a3      	ldrh	r3, [r4, #12]
 800f3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3e2:	81a3      	strh	r3, [r4, #12]
 800f3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e8:	e78e      	b.n	800f308 <__sflush_r+0x1c>
 800f3ea:	4407      	add	r7, r0
 800f3ec:	eba8 0800 	sub.w	r8, r8, r0
 800f3f0:	e7e9      	b.n	800f3c6 <__sflush_r+0xda>
 800f3f2:	bf00      	nop
 800f3f4:	20400001 	.word	0x20400001

0800f3f8 <_fflush_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	690b      	ldr	r3, [r1, #16]
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	460c      	mov	r4, r1
 800f400:	b913      	cbnz	r3, 800f408 <_fflush_r+0x10>
 800f402:	2500      	movs	r5, #0
 800f404:	4628      	mov	r0, r5
 800f406:	bd38      	pop	{r3, r4, r5, pc}
 800f408:	b118      	cbz	r0, 800f412 <_fflush_r+0x1a>
 800f40a:	6983      	ldr	r3, [r0, #24]
 800f40c:	b90b      	cbnz	r3, 800f412 <_fflush_r+0x1a>
 800f40e:	f000 f887 	bl	800f520 <__sinit>
 800f412:	4b14      	ldr	r3, [pc, #80]	; (800f464 <_fflush_r+0x6c>)
 800f414:	429c      	cmp	r4, r3
 800f416:	d11b      	bne.n	800f450 <_fflush_r+0x58>
 800f418:	686c      	ldr	r4, [r5, #4]
 800f41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d0ef      	beq.n	800f402 <_fflush_r+0xa>
 800f422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f424:	07d0      	lsls	r0, r2, #31
 800f426:	d404      	bmi.n	800f432 <_fflush_r+0x3a>
 800f428:	0599      	lsls	r1, r3, #22
 800f42a:	d402      	bmi.n	800f432 <_fflush_r+0x3a>
 800f42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f42e:	f7ff fcd0 	bl	800edd2 <__retarget_lock_acquire_recursive>
 800f432:	4628      	mov	r0, r5
 800f434:	4621      	mov	r1, r4
 800f436:	f7ff ff59 	bl	800f2ec <__sflush_r>
 800f43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f43c:	07da      	lsls	r2, r3, #31
 800f43e:	4605      	mov	r5, r0
 800f440:	d4e0      	bmi.n	800f404 <_fflush_r+0xc>
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	059b      	lsls	r3, r3, #22
 800f446:	d4dd      	bmi.n	800f404 <_fflush_r+0xc>
 800f448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f44a:	f7ff fcc3 	bl	800edd4 <__retarget_lock_release_recursive>
 800f44e:	e7d9      	b.n	800f404 <_fflush_r+0xc>
 800f450:	4b05      	ldr	r3, [pc, #20]	; (800f468 <_fflush_r+0x70>)
 800f452:	429c      	cmp	r4, r3
 800f454:	d101      	bne.n	800f45a <_fflush_r+0x62>
 800f456:	68ac      	ldr	r4, [r5, #8]
 800f458:	e7df      	b.n	800f41a <_fflush_r+0x22>
 800f45a:	4b04      	ldr	r3, [pc, #16]	; (800f46c <_fflush_r+0x74>)
 800f45c:	429c      	cmp	r4, r3
 800f45e:	bf08      	it	eq
 800f460:	68ec      	ldreq	r4, [r5, #12]
 800f462:	e7da      	b.n	800f41a <_fflush_r+0x22>
 800f464:	0801006c 	.word	0x0801006c
 800f468:	0801008c 	.word	0x0801008c
 800f46c:	0801004c 	.word	0x0801004c

0800f470 <std>:
 800f470:	2300      	movs	r3, #0
 800f472:	b510      	push	{r4, lr}
 800f474:	4604      	mov	r4, r0
 800f476:	e9c0 3300 	strd	r3, r3, [r0]
 800f47a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f47e:	6083      	str	r3, [r0, #8]
 800f480:	8181      	strh	r1, [r0, #12]
 800f482:	6643      	str	r3, [r0, #100]	; 0x64
 800f484:	81c2      	strh	r2, [r0, #14]
 800f486:	6183      	str	r3, [r0, #24]
 800f488:	4619      	mov	r1, r3
 800f48a:	2208      	movs	r2, #8
 800f48c:	305c      	adds	r0, #92	; 0x5c
 800f48e:	f7fd fb6d 	bl	800cb6c <memset>
 800f492:	4b05      	ldr	r3, [pc, #20]	; (800f4a8 <std+0x38>)
 800f494:	6263      	str	r3, [r4, #36]	; 0x24
 800f496:	4b05      	ldr	r3, [pc, #20]	; (800f4ac <std+0x3c>)
 800f498:	62a3      	str	r3, [r4, #40]	; 0x28
 800f49a:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <std+0x40>)
 800f49c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f49e:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <std+0x44>)
 800f4a0:	6224      	str	r4, [r4, #32]
 800f4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800f4a4:	bd10      	pop	{r4, pc}
 800f4a6:	bf00      	nop
 800f4a8:	0800f7bd 	.word	0x0800f7bd
 800f4ac:	0800f7df 	.word	0x0800f7df
 800f4b0:	0800f817 	.word	0x0800f817
 800f4b4:	0800f83b 	.word	0x0800f83b

0800f4b8 <_cleanup_r>:
 800f4b8:	4901      	ldr	r1, [pc, #4]	; (800f4c0 <_cleanup_r+0x8>)
 800f4ba:	f000 b8af 	b.w	800f61c <_fwalk_reent>
 800f4be:	bf00      	nop
 800f4c0:	0800f3f9 	.word	0x0800f3f9

0800f4c4 <__sfmoreglue>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	2268      	movs	r2, #104	; 0x68
 800f4c8:	1e4d      	subs	r5, r1, #1
 800f4ca:	4355      	muls	r5, r2
 800f4cc:	460e      	mov	r6, r1
 800f4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f4d2:	f7fd fbbf 	bl	800cc54 <_malloc_r>
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	b140      	cbz	r0, 800f4ec <__sfmoreglue+0x28>
 800f4da:	2100      	movs	r1, #0
 800f4dc:	e9c0 1600 	strd	r1, r6, [r0]
 800f4e0:	300c      	adds	r0, #12
 800f4e2:	60a0      	str	r0, [r4, #8]
 800f4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4e8:	f7fd fb40 	bl	800cb6c <memset>
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}

0800f4f0 <__sfp_lock_acquire>:
 800f4f0:	4801      	ldr	r0, [pc, #4]	; (800f4f8 <__sfp_lock_acquire+0x8>)
 800f4f2:	f7ff bc6e 	b.w	800edd2 <__retarget_lock_acquire_recursive>
 800f4f6:	bf00      	nop
 800f4f8:	200015dd 	.word	0x200015dd

0800f4fc <__sfp_lock_release>:
 800f4fc:	4801      	ldr	r0, [pc, #4]	; (800f504 <__sfp_lock_release+0x8>)
 800f4fe:	f7ff bc69 	b.w	800edd4 <__retarget_lock_release_recursive>
 800f502:	bf00      	nop
 800f504:	200015dd 	.word	0x200015dd

0800f508 <__sinit_lock_acquire>:
 800f508:	4801      	ldr	r0, [pc, #4]	; (800f510 <__sinit_lock_acquire+0x8>)
 800f50a:	f7ff bc62 	b.w	800edd2 <__retarget_lock_acquire_recursive>
 800f50e:	bf00      	nop
 800f510:	200015de 	.word	0x200015de

0800f514 <__sinit_lock_release>:
 800f514:	4801      	ldr	r0, [pc, #4]	; (800f51c <__sinit_lock_release+0x8>)
 800f516:	f7ff bc5d 	b.w	800edd4 <__retarget_lock_release_recursive>
 800f51a:	bf00      	nop
 800f51c:	200015de 	.word	0x200015de

0800f520 <__sinit>:
 800f520:	b510      	push	{r4, lr}
 800f522:	4604      	mov	r4, r0
 800f524:	f7ff fff0 	bl	800f508 <__sinit_lock_acquire>
 800f528:	69a3      	ldr	r3, [r4, #24]
 800f52a:	b11b      	cbz	r3, 800f534 <__sinit+0x14>
 800f52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f530:	f7ff bff0 	b.w	800f514 <__sinit_lock_release>
 800f534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f538:	6523      	str	r3, [r4, #80]	; 0x50
 800f53a:	4b13      	ldr	r3, [pc, #76]	; (800f588 <__sinit+0x68>)
 800f53c:	4a13      	ldr	r2, [pc, #76]	; (800f58c <__sinit+0x6c>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	62a2      	str	r2, [r4, #40]	; 0x28
 800f542:	42a3      	cmp	r3, r4
 800f544:	bf04      	itt	eq
 800f546:	2301      	moveq	r3, #1
 800f548:	61a3      	streq	r3, [r4, #24]
 800f54a:	4620      	mov	r0, r4
 800f54c:	f000 f820 	bl	800f590 <__sfp>
 800f550:	6060      	str	r0, [r4, #4]
 800f552:	4620      	mov	r0, r4
 800f554:	f000 f81c 	bl	800f590 <__sfp>
 800f558:	60a0      	str	r0, [r4, #8]
 800f55a:	4620      	mov	r0, r4
 800f55c:	f000 f818 	bl	800f590 <__sfp>
 800f560:	2200      	movs	r2, #0
 800f562:	60e0      	str	r0, [r4, #12]
 800f564:	2104      	movs	r1, #4
 800f566:	6860      	ldr	r0, [r4, #4]
 800f568:	f7ff ff82 	bl	800f470 <std>
 800f56c:	68a0      	ldr	r0, [r4, #8]
 800f56e:	2201      	movs	r2, #1
 800f570:	2109      	movs	r1, #9
 800f572:	f7ff ff7d 	bl	800f470 <std>
 800f576:	68e0      	ldr	r0, [r4, #12]
 800f578:	2202      	movs	r2, #2
 800f57a:	2112      	movs	r1, #18
 800f57c:	f7ff ff78 	bl	800f470 <std>
 800f580:	2301      	movs	r3, #1
 800f582:	61a3      	str	r3, [r4, #24]
 800f584:	e7d2      	b.n	800f52c <__sinit+0xc>
 800f586:	bf00      	nop
 800f588:	0800fcd0 	.word	0x0800fcd0
 800f58c:	0800f4b9 	.word	0x0800f4b9

0800f590 <__sfp>:
 800f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f592:	4607      	mov	r7, r0
 800f594:	f7ff ffac 	bl	800f4f0 <__sfp_lock_acquire>
 800f598:	4b1e      	ldr	r3, [pc, #120]	; (800f614 <__sfp+0x84>)
 800f59a:	681e      	ldr	r6, [r3, #0]
 800f59c:	69b3      	ldr	r3, [r6, #24]
 800f59e:	b913      	cbnz	r3, 800f5a6 <__sfp+0x16>
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7ff ffbd 	bl	800f520 <__sinit>
 800f5a6:	3648      	adds	r6, #72	; 0x48
 800f5a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	d503      	bpl.n	800f5b8 <__sfp+0x28>
 800f5b0:	6833      	ldr	r3, [r6, #0]
 800f5b2:	b30b      	cbz	r3, 800f5f8 <__sfp+0x68>
 800f5b4:	6836      	ldr	r6, [r6, #0]
 800f5b6:	e7f7      	b.n	800f5a8 <__sfp+0x18>
 800f5b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f5bc:	b9d5      	cbnz	r5, 800f5f4 <__sfp+0x64>
 800f5be:	4b16      	ldr	r3, [pc, #88]	; (800f618 <__sfp+0x88>)
 800f5c0:	60e3      	str	r3, [r4, #12]
 800f5c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5c6:	6665      	str	r5, [r4, #100]	; 0x64
 800f5c8:	f7ff fc02 	bl	800edd0 <__retarget_lock_init_recursive>
 800f5cc:	f7ff ff96 	bl	800f4fc <__sfp_lock_release>
 800f5d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f5d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f5d8:	6025      	str	r5, [r4, #0]
 800f5da:	61a5      	str	r5, [r4, #24]
 800f5dc:	2208      	movs	r2, #8
 800f5de:	4629      	mov	r1, r5
 800f5e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5e4:	f7fd fac2 	bl	800cb6c <memset>
 800f5e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5f4:	3468      	adds	r4, #104	; 0x68
 800f5f6:	e7d9      	b.n	800f5ac <__sfp+0x1c>
 800f5f8:	2104      	movs	r1, #4
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	f7ff ff62 	bl	800f4c4 <__sfmoreglue>
 800f600:	4604      	mov	r4, r0
 800f602:	6030      	str	r0, [r6, #0]
 800f604:	2800      	cmp	r0, #0
 800f606:	d1d5      	bne.n	800f5b4 <__sfp+0x24>
 800f608:	f7ff ff78 	bl	800f4fc <__sfp_lock_release>
 800f60c:	230c      	movs	r3, #12
 800f60e:	603b      	str	r3, [r7, #0]
 800f610:	e7ee      	b.n	800f5f0 <__sfp+0x60>
 800f612:	bf00      	nop
 800f614:	0800fcd0 	.word	0x0800fcd0
 800f618:	ffff0001 	.word	0xffff0001

0800f61c <_fwalk_reent>:
 800f61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f620:	4606      	mov	r6, r0
 800f622:	4688      	mov	r8, r1
 800f624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f628:	2700      	movs	r7, #0
 800f62a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f62e:	f1b9 0901 	subs.w	r9, r9, #1
 800f632:	d505      	bpl.n	800f640 <_fwalk_reent+0x24>
 800f634:	6824      	ldr	r4, [r4, #0]
 800f636:	2c00      	cmp	r4, #0
 800f638:	d1f7      	bne.n	800f62a <_fwalk_reent+0xe>
 800f63a:	4638      	mov	r0, r7
 800f63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f640:	89ab      	ldrh	r3, [r5, #12]
 800f642:	2b01      	cmp	r3, #1
 800f644:	d907      	bls.n	800f656 <_fwalk_reent+0x3a>
 800f646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f64a:	3301      	adds	r3, #1
 800f64c:	d003      	beq.n	800f656 <_fwalk_reent+0x3a>
 800f64e:	4629      	mov	r1, r5
 800f650:	4630      	mov	r0, r6
 800f652:	47c0      	blx	r8
 800f654:	4307      	orrs	r7, r0
 800f656:	3568      	adds	r5, #104	; 0x68
 800f658:	e7e9      	b.n	800f62e <_fwalk_reent+0x12>

0800f65a <__swhatbuf_r>:
 800f65a:	b570      	push	{r4, r5, r6, lr}
 800f65c:	460e      	mov	r6, r1
 800f65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f662:	2900      	cmp	r1, #0
 800f664:	b096      	sub	sp, #88	; 0x58
 800f666:	4614      	mov	r4, r2
 800f668:	461d      	mov	r5, r3
 800f66a:	da08      	bge.n	800f67e <__swhatbuf_r+0x24>
 800f66c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	602a      	str	r2, [r5, #0]
 800f674:	061a      	lsls	r2, r3, #24
 800f676:	d410      	bmi.n	800f69a <__swhatbuf_r+0x40>
 800f678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f67c:	e00e      	b.n	800f69c <__swhatbuf_r+0x42>
 800f67e:	466a      	mov	r2, sp
 800f680:	f000 f902 	bl	800f888 <_fstat_r>
 800f684:	2800      	cmp	r0, #0
 800f686:	dbf1      	blt.n	800f66c <__swhatbuf_r+0x12>
 800f688:	9a01      	ldr	r2, [sp, #4]
 800f68a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f68e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f692:	425a      	negs	r2, r3
 800f694:	415a      	adcs	r2, r3
 800f696:	602a      	str	r2, [r5, #0]
 800f698:	e7ee      	b.n	800f678 <__swhatbuf_r+0x1e>
 800f69a:	2340      	movs	r3, #64	; 0x40
 800f69c:	2000      	movs	r0, #0
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	b016      	add	sp, #88	; 0x58
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}

0800f6a4 <__smakebuf_r>:
 800f6a4:	898b      	ldrh	r3, [r1, #12]
 800f6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6a8:	079d      	lsls	r5, r3, #30
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	460c      	mov	r4, r1
 800f6ae:	d507      	bpl.n	800f6c0 <__smakebuf_r+0x1c>
 800f6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	6123      	str	r3, [r4, #16]
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	6163      	str	r3, [r4, #20]
 800f6bc:	b002      	add	sp, #8
 800f6be:	bd70      	pop	{r4, r5, r6, pc}
 800f6c0:	ab01      	add	r3, sp, #4
 800f6c2:	466a      	mov	r2, sp
 800f6c4:	f7ff ffc9 	bl	800f65a <__swhatbuf_r>
 800f6c8:	9900      	ldr	r1, [sp, #0]
 800f6ca:	4605      	mov	r5, r0
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	f7fd fac1 	bl	800cc54 <_malloc_r>
 800f6d2:	b948      	cbnz	r0, 800f6e8 <__smakebuf_r+0x44>
 800f6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d8:	059a      	lsls	r2, r3, #22
 800f6da:	d4ef      	bmi.n	800f6bc <__smakebuf_r+0x18>
 800f6dc:	f023 0303 	bic.w	r3, r3, #3
 800f6e0:	f043 0302 	orr.w	r3, r3, #2
 800f6e4:	81a3      	strh	r3, [r4, #12]
 800f6e6:	e7e3      	b.n	800f6b0 <__smakebuf_r+0xc>
 800f6e8:	4b0d      	ldr	r3, [pc, #52]	; (800f720 <__smakebuf_r+0x7c>)
 800f6ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	6020      	str	r0, [r4, #0]
 800f6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6f4:	81a3      	strh	r3, [r4, #12]
 800f6f6:	9b00      	ldr	r3, [sp, #0]
 800f6f8:	6163      	str	r3, [r4, #20]
 800f6fa:	9b01      	ldr	r3, [sp, #4]
 800f6fc:	6120      	str	r0, [r4, #16]
 800f6fe:	b15b      	cbz	r3, 800f718 <__smakebuf_r+0x74>
 800f700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f704:	4630      	mov	r0, r6
 800f706:	f000 f8d1 	bl	800f8ac <_isatty_r>
 800f70a:	b128      	cbz	r0, 800f718 <__smakebuf_r+0x74>
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	f023 0303 	bic.w	r3, r3, #3
 800f712:	f043 0301 	orr.w	r3, r3, #1
 800f716:	81a3      	strh	r3, [r4, #12]
 800f718:	89a0      	ldrh	r0, [r4, #12]
 800f71a:	4305      	orrs	r5, r0
 800f71c:	81a5      	strh	r5, [r4, #12]
 800f71e:	e7cd      	b.n	800f6bc <__smakebuf_r+0x18>
 800f720:	0800f4b9 	.word	0x0800f4b9

0800f724 <_malloc_usable_size_r>:
 800f724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f728:	1f18      	subs	r0, r3, #4
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	bfbc      	itt	lt
 800f72e:	580b      	ldrlt	r3, [r1, r0]
 800f730:	18c0      	addlt	r0, r0, r3
 800f732:	4770      	bx	lr

0800f734 <_raise_r>:
 800f734:	291f      	cmp	r1, #31
 800f736:	b538      	push	{r3, r4, r5, lr}
 800f738:	4604      	mov	r4, r0
 800f73a:	460d      	mov	r5, r1
 800f73c:	d904      	bls.n	800f748 <_raise_r+0x14>
 800f73e:	2316      	movs	r3, #22
 800f740:	6003      	str	r3, [r0, #0]
 800f742:	f04f 30ff 	mov.w	r0, #4294967295
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f74a:	b112      	cbz	r2, 800f752 <_raise_r+0x1e>
 800f74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f750:	b94b      	cbnz	r3, 800f766 <_raise_r+0x32>
 800f752:	4620      	mov	r0, r4
 800f754:	f000 f830 	bl	800f7b8 <_getpid_r>
 800f758:	462a      	mov	r2, r5
 800f75a:	4601      	mov	r1, r0
 800f75c:	4620      	mov	r0, r4
 800f75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f762:	f000 b817 	b.w	800f794 <_kill_r>
 800f766:	2b01      	cmp	r3, #1
 800f768:	d00a      	beq.n	800f780 <_raise_r+0x4c>
 800f76a:	1c59      	adds	r1, r3, #1
 800f76c:	d103      	bne.n	800f776 <_raise_r+0x42>
 800f76e:	2316      	movs	r3, #22
 800f770:	6003      	str	r3, [r0, #0]
 800f772:	2001      	movs	r0, #1
 800f774:	e7e7      	b.n	800f746 <_raise_r+0x12>
 800f776:	2400      	movs	r4, #0
 800f778:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f77c:	4628      	mov	r0, r5
 800f77e:	4798      	blx	r3
 800f780:	2000      	movs	r0, #0
 800f782:	e7e0      	b.n	800f746 <_raise_r+0x12>

0800f784 <raise>:
 800f784:	4b02      	ldr	r3, [pc, #8]	; (800f790 <raise+0xc>)
 800f786:	4601      	mov	r1, r0
 800f788:	6818      	ldr	r0, [r3, #0]
 800f78a:	f7ff bfd3 	b.w	800f734 <_raise_r>
 800f78e:	bf00      	nop
 800f790:	20000320 	.word	0x20000320

0800f794 <_kill_r>:
 800f794:	b538      	push	{r3, r4, r5, lr}
 800f796:	4d07      	ldr	r5, [pc, #28]	; (800f7b4 <_kill_r+0x20>)
 800f798:	2300      	movs	r3, #0
 800f79a:	4604      	mov	r4, r0
 800f79c:	4608      	mov	r0, r1
 800f79e:	4611      	mov	r1, r2
 800f7a0:	602b      	str	r3, [r5, #0]
 800f7a2:	f7f4 fe52 	bl	800444a <_kill>
 800f7a6:	1c43      	adds	r3, r0, #1
 800f7a8:	d102      	bne.n	800f7b0 <_kill_r+0x1c>
 800f7aa:	682b      	ldr	r3, [r5, #0]
 800f7ac:	b103      	cbz	r3, 800f7b0 <_kill_r+0x1c>
 800f7ae:	6023      	str	r3, [r4, #0]
 800f7b0:	bd38      	pop	{r3, r4, r5, pc}
 800f7b2:	bf00      	nop
 800f7b4:	200015d8 	.word	0x200015d8

0800f7b8 <_getpid_r>:
 800f7b8:	f7f4 be3f 	b.w	800443a <_getpid>

0800f7bc <__sread>:
 800f7bc:	b510      	push	{r4, lr}
 800f7be:	460c      	mov	r4, r1
 800f7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7c4:	f000 f894 	bl	800f8f0 <_read_r>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	bfab      	itete	ge
 800f7cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800f7d0:	181b      	addge	r3, r3, r0
 800f7d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7d6:	bfac      	ite	ge
 800f7d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7da:	81a3      	strhlt	r3, [r4, #12]
 800f7dc:	bd10      	pop	{r4, pc}

0800f7de <__swrite>:
 800f7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e2:	461f      	mov	r7, r3
 800f7e4:	898b      	ldrh	r3, [r1, #12]
 800f7e6:	05db      	lsls	r3, r3, #23
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	4616      	mov	r6, r2
 800f7ee:	d505      	bpl.n	800f7fc <__swrite+0x1e>
 800f7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f000 f868 	bl	800f8cc <_lseek_r>
 800f7fc:	89a3      	ldrh	r3, [r4, #12]
 800f7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f806:	81a3      	strh	r3, [r4, #12]
 800f808:	4632      	mov	r2, r6
 800f80a:	463b      	mov	r3, r7
 800f80c:	4628      	mov	r0, r5
 800f80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f812:	f000 b817 	b.w	800f844 <_write_r>

0800f816 <__sseek>:
 800f816:	b510      	push	{r4, lr}
 800f818:	460c      	mov	r4, r1
 800f81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81e:	f000 f855 	bl	800f8cc <_lseek_r>
 800f822:	1c43      	adds	r3, r0, #1
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	bf15      	itete	ne
 800f828:	6560      	strne	r0, [r4, #84]	; 0x54
 800f82a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f82e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f832:	81a3      	strheq	r3, [r4, #12]
 800f834:	bf18      	it	ne
 800f836:	81a3      	strhne	r3, [r4, #12]
 800f838:	bd10      	pop	{r4, pc}

0800f83a <__sclose>:
 800f83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f83e:	f000 b813 	b.w	800f868 <_close_r>
	...

0800f844 <_write_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d07      	ldr	r5, [pc, #28]	; (800f864 <_write_r+0x20>)
 800f848:	4604      	mov	r4, r0
 800f84a:	4608      	mov	r0, r1
 800f84c:	4611      	mov	r1, r2
 800f84e:	2200      	movs	r2, #0
 800f850:	602a      	str	r2, [r5, #0]
 800f852:	461a      	mov	r2, r3
 800f854:	f7f4 fe30 	bl	80044b8 <_write>
 800f858:	1c43      	adds	r3, r0, #1
 800f85a:	d102      	bne.n	800f862 <_write_r+0x1e>
 800f85c:	682b      	ldr	r3, [r5, #0]
 800f85e:	b103      	cbz	r3, 800f862 <_write_r+0x1e>
 800f860:	6023      	str	r3, [r4, #0]
 800f862:	bd38      	pop	{r3, r4, r5, pc}
 800f864:	200015d8 	.word	0x200015d8

0800f868 <_close_r>:
 800f868:	b538      	push	{r3, r4, r5, lr}
 800f86a:	4d06      	ldr	r5, [pc, #24]	; (800f884 <_close_r+0x1c>)
 800f86c:	2300      	movs	r3, #0
 800f86e:	4604      	mov	r4, r0
 800f870:	4608      	mov	r0, r1
 800f872:	602b      	str	r3, [r5, #0]
 800f874:	f7f4 fe3c 	bl	80044f0 <_close>
 800f878:	1c43      	adds	r3, r0, #1
 800f87a:	d102      	bne.n	800f882 <_close_r+0x1a>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	b103      	cbz	r3, 800f882 <_close_r+0x1a>
 800f880:	6023      	str	r3, [r4, #0]
 800f882:	bd38      	pop	{r3, r4, r5, pc}
 800f884:	200015d8 	.word	0x200015d8

0800f888 <_fstat_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d07      	ldr	r5, [pc, #28]	; (800f8a8 <_fstat_r+0x20>)
 800f88c:	2300      	movs	r3, #0
 800f88e:	4604      	mov	r4, r0
 800f890:	4608      	mov	r0, r1
 800f892:	4611      	mov	r1, r2
 800f894:	602b      	str	r3, [r5, #0]
 800f896:	f7f4 fe37 	bl	8004508 <_fstat>
 800f89a:	1c43      	adds	r3, r0, #1
 800f89c:	d102      	bne.n	800f8a4 <_fstat_r+0x1c>
 800f89e:	682b      	ldr	r3, [r5, #0]
 800f8a0:	b103      	cbz	r3, 800f8a4 <_fstat_r+0x1c>
 800f8a2:	6023      	str	r3, [r4, #0]
 800f8a4:	bd38      	pop	{r3, r4, r5, pc}
 800f8a6:	bf00      	nop
 800f8a8:	200015d8 	.word	0x200015d8

0800f8ac <_isatty_r>:
 800f8ac:	b538      	push	{r3, r4, r5, lr}
 800f8ae:	4d06      	ldr	r5, [pc, #24]	; (800f8c8 <_isatty_r+0x1c>)
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	4608      	mov	r0, r1
 800f8b6:	602b      	str	r3, [r5, #0]
 800f8b8:	f7f4 fe36 	bl	8004528 <_isatty>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	d102      	bne.n	800f8c6 <_isatty_r+0x1a>
 800f8c0:	682b      	ldr	r3, [r5, #0]
 800f8c2:	b103      	cbz	r3, 800f8c6 <_isatty_r+0x1a>
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	200015d8 	.word	0x200015d8

0800f8cc <_lseek_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4d07      	ldr	r5, [pc, #28]	; (800f8ec <_lseek_r+0x20>)
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	4608      	mov	r0, r1
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	602a      	str	r2, [r5, #0]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	f7f4 fe2f 	bl	800453e <_lseek>
 800f8e0:	1c43      	adds	r3, r0, #1
 800f8e2:	d102      	bne.n	800f8ea <_lseek_r+0x1e>
 800f8e4:	682b      	ldr	r3, [r5, #0]
 800f8e6:	b103      	cbz	r3, 800f8ea <_lseek_r+0x1e>
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	bd38      	pop	{r3, r4, r5, pc}
 800f8ec:	200015d8 	.word	0x200015d8

0800f8f0 <_read_r>:
 800f8f0:	b538      	push	{r3, r4, r5, lr}
 800f8f2:	4d07      	ldr	r5, [pc, #28]	; (800f910 <_read_r+0x20>)
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	4608      	mov	r0, r1
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	602a      	str	r2, [r5, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	f7f4 fdbd 	bl	800447e <_read>
 800f904:	1c43      	adds	r3, r0, #1
 800f906:	d102      	bne.n	800f90e <_read_r+0x1e>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	b103      	cbz	r3, 800f90e <_read_r+0x1e>
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	bd38      	pop	{r3, r4, r5, pc}
 800f910:	200015d8 	.word	0x200015d8

0800f914 <_init>:
 800f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f916:	bf00      	nop
 800f918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91a:	bc08      	pop	{r3}
 800f91c:	469e      	mov	lr, r3
 800f91e:	4770      	bx	lr

0800f920 <_fini>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	bf00      	nop
 800f924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f926:	bc08      	pop	{r3}
 800f928:	469e      	mov	lr, r3
 800f92a:	4770      	bx	lr
