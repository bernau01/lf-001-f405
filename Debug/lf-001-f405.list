
lf-001-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  08010e40  08010e40  00020e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116cc  080116cc  000304fc  2**0
                  CONTENTS
  4 .ARM          00000008  080116cc  080116cc  000216cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116d4  080116d4  000304fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116d4  080116d4  000216d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116d8  080116d8  000216d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004fc  20000000  080116dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304fc  2**0
                  CONTENTS
 10 .bss          00001044  200004fc  200004fc  000304fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001540  20001540  000304fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8dd  00000000  00000000  0003052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b11  00000000  00000000  0004fe09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  00054920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001830  00000000  00000000  00056340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000415bc  00000000  00000000  00057b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000239bc  00000000  00000000  0009912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130b05  00000000  00000000  000bcae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ed5ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f0c  00000000  00000000  001ed640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004fc 	.word	0x200004fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e24 	.word	0x08010e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000500 	.word	0x20000500
 80001cc:	08010e24 	.word	0x08010e24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa0:	4a7e      	ldr	r2, [pc, #504]	; (800119c <MX_ADC1_Init+0x210>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b76      	ldr	r3, [pc, #472]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fcc:	4a74      	ldr	r2, [pc, #464]	; (80011a0 <MX_ADC1_Init+0x214>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fd8:	220e      	movs	r2, #14
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b6c      	ldr	r3, [pc, #432]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	486b      	ldr	r0, [pc, #428]	; (8001198 <MX_ADC1_Init+0x20c>)
 8000fec:	f007 ff7a 	bl	8008ee4 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f001 f99a 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4863      	ldr	r0, [pc, #396]	; (8001198 <MX_ADC1_Init+0x20c>)
 800100c:	f008 f9ec 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f001 f98a 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101a:	230a      	movs	r3, #10
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	485c      	ldr	r0, [pc, #368]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001028:	f008 f9de 	bl	80093e8 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001032:	f001 f97c 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001036:	230e      	movs	r3, #14
 8001038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800103a:	2303      	movs	r3, #3
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4855      	ldr	r0, [pc, #340]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001044:	f008 f9d0 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104e:	f001 f96e 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001052:	230b      	movs	r3, #11
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001056:	2304      	movs	r3, #4
 8001058:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001060:	f008 f9c2 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800106a:	f001 f960 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106e:	2307      	movs	r3, #7
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001072:	2305      	movs	r3, #5
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4847      	ldr	r0, [pc, #284]	; (8001198 <MX_ADC1_Init+0x20c>)
 800107c:	f008 f9b4 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001086:	f001 f952 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800108a:	230c      	movs	r3, #12
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800108e:	2306      	movs	r3, #6
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001098:	f008 f9a6 	bl	80093e8 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010a2:	f001 f944 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010a6:	2306      	movs	r3, #6
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010b8:	f008 f996 	bl	80093e8 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010c2:	f001 f934 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010c6:	230d      	movs	r3, #13
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010d8:	f008 f986 	bl	80093e8 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80010e2:	f001 f924 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80010ea:	2309      	movs	r3, #9
 80010ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_ADC1_Init+0x20c>)
 80010f4:	f008 f978 	bl	80093e8 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80010fe:	f001 f916 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001106:	230a      	movs	r3, #10
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001110:	f008 f96a 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 800111a:	f001 f908 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800111e:	2304      	movs	r3, #4
 8001120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001122:	230b      	movs	r3, #11
 8001124:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <MX_ADC1_Init+0x20c>)
 800112c:	f008 f95c 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001136:	f001 f8fa 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113a:	2301      	movs	r3, #1
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001148:	f008 f94e 	bl	80093e8 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001152:	f001 f8ec 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001156:	2303      	movs	r3, #3
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800115a:	230d      	movs	r3, #13
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001164:	f008 f940 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800116e:	f001 f8de 	bl	800232e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001176:	230e      	movs	r3, #14
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_ADC1_Init+0x20c>)
 8001180:	f008 f932 	bl	80093e8 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 800118a:	f001 f8d0 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000518 	.word	0x20000518
 800119c:	40012000 	.word	0x40012000
 80011a0:	0f000001 	.word	0x0f000001

080011a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_ADC_MspInit+0x11c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d178      	bne.n	80012b8 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_ADC_MspInit+0x120>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <HAL_ADC_MspInit+0x124>)
 800122e:	f009 f821 	bl	800a274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4821      	ldr	r0, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x128>)
 8001246:	f009 f815 	bl	800a274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_ADC_MspInit+0x130>)
 800124e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 800128e:	f008 fc81 	bl	8009b94 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001298:	f001 f849 	bl	800232e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_ADC_MspInit+0x12c>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2012      	movs	r0, #18
 80012ae:	f008 fc36 	bl	8009b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f008 fc4f 	bl	8009b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40012000 	.word	0x40012000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	20000560 	.word	0x20000560
 80012d4:	40026410 	.word	0x40026410

080012d8 <DISP_ClearBuff>:
#include "stdlib.h"
#include "memory.h"

uint8_t disp_buff[OLED_HEIGHT/8][OLED_WIDTH];

void DISP_ClearBuff() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	memset(disp_buff, 0x00, OLED_WIDTH*OLED_HEIGHT/8);
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	2100      	movs	r1, #0
 80012e2:	4802      	ldr	r0, [pc, #8]	; (80012ec <DISP_ClearBuff+0x14>)
 80012e4:	f00c feca 	bl	800e07c <memset>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005c0 	.word	0x200005c0

080012f0 <DISP_DrawPixel>:

void DISP_DrawPixel(uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	73bb      	strb	r3, [r7, #14]

	switch(color) {
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d03a      	beq.n	800138c <DISP_DrawPixel+0x9c>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc39      	bgt.n	800138e <DISP_DrawPixel+0x9e>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <DISP_DrawPixel+0x34>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d019      	beq.n	8001356 <DISP_DrawPixel+0x66>
		disp_buff[page][x] &=~(1<<seg);
		break;
	case DISP_COLOR_TRANS:
		break;
	}
}
 8001322:	e034      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] |= (1<<seg);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	491c      	ldr	r1, [pc, #112]	; (800139c <DISP_DrawPixel+0xac>)
 800132a:	01d2      	lsls	r2, r2, #7
 800132c:	440a      	add	r2, r1
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b2c8      	uxtb	r0, r1
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <DISP_DrawPixel+0xac>)
 800134a:	01d2      	lsls	r2, r2, #7
 800134c:	440a      	add	r2, r1
 800134e:	4413      	add	r3, r2
 8001350:	4602      	mov	r2, r0
 8001352:	701a      	strb	r2, [r3, #0]
		break;
 8001354:	e01b      	b.n	800138e <DISP_DrawPixel+0x9e>
		disp_buff[page][x] &=~(1<<seg);
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4910      	ldr	r1, [pc, #64]	; (800139c <DISP_DrawPixel+0xac>)
 800135c:	01d2      	lsls	r2, r2, #7
 800135e:	440a      	add	r2, r1
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	b25b      	sxtb	r3, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	4013      	ands	r3, r2
 8001376:	b259      	sxtb	r1, r3
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	b2c8      	uxtb	r0, r1
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <DISP_DrawPixel+0xac>)
 8001380:	01d2      	lsls	r2, r2, #7
 8001382:	440a      	add	r2, r1
 8001384:	4413      	add	r3, r2
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <DISP_DrawPixel+0x9e>
		break;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200005c0 	.word	0x200005c0

080013a0 <DISP_DrawChar>:

uint8_t DISP_DrawChar(char c, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	4603      	mov	r3, r0
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4613      	mov	r3, r2
 80013bc:	713b      	strb	r3, [r7, #4]
	uint8_t page = (y/8)%(OLED_HEIGHT/8);
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	73fb      	strb	r3, [r7, #15]
	uint8_t seg = y%8;
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	73bb      	strb	r3, [r7, #14]

	for(int i=0; i<5; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e08d      	b.n	80014f4 <DISP_DrawChar+0x154>
		if(x+i >= OLED_WIDTH) return 1;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	dd01      	ble.n	80013e6 <DISP_DrawChar+0x46>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08b      	b.n	80014fe <DISP_DrawChar+0x15e>
		uint8_t bit_char[2];
		bit_char[0] = Font5x7[((uint8_t)c - 0x20)*5 + i] << seg;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f1a3 0220 	sub.w	r2, r3, #32
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a44      	ldr	r2, [pc, #272]	; (8001508 <DISP_DrawChar+0x168>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	461a      	mov	r2, r3
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
		bit_char[1] = Font5x7[((uint8_t)c - 0x20)*5 + i] >> (8-seg);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f1a3 0220 	sub.w	r2, r3, #32
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	441a      	add	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <DISP_DrawChar+0x168>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	461a      	mov	r2, r3
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f1c3 0308 	rsb	r3, r3, #8
 8001422:	fa42 f303 	asr.w	r3, r2, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	737b      	strb	r3, [r7, #13]

		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e050      	b.n	80014d2 <DISP_DrawChar+0x132>
			switch(color) {
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d049      	beq.n	80014ca <DISP_DrawChar+0x12a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc48      	bgt.n	80014cc <DISP_DrawChar+0x12c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <DISP_DrawChar+0xa4>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01f      	beq.n	8001482 <DISP_DrawChar+0xe2>
 8001442:	e043      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_WHITE:
				disp_buff[page+j][x+i] |= bit_char[j];
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	441a      	add	r2, r3
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	440b      	add	r3, r1
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <DISP_DrawChar+0x16c>)
 8001452:	01d2      	lsls	r2, r2, #7
 8001454:	440a      	add	r2, r1
 8001456:	4413      	add	r3, r2
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	441a      	add	r2, r3
 800146a:	79bc      	ldrb	r4, [r7, #6]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4423      	add	r3, r4
 8001470:	4301      	orrs	r1, r0
 8001472:	b2c8      	uxtb	r0, r1
 8001474:	4925      	ldr	r1, [pc, #148]	; (800150c <DISP_DrawChar+0x16c>)
 8001476:	01d2      	lsls	r2, r2, #7
 8001478:	440a      	add	r2, r1
 800147a:	4413      	add	r3, r2
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
				break;
 8001480:	e024      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_BLACK:
				disp_buff[page+j][x+i] &=~bit_char[j];
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	441a      	add	r2, r3
 8001488:	79b9      	ldrb	r1, [r7, #6]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	440b      	add	r3, r1
 800148e:	491f      	ldr	r1, [pc, #124]	; (800150c <DISP_DrawChar+0x16c>)
 8001490:	01d2      	lsls	r2, r2, #7
 8001492:	440a      	add	r2, r1
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	f107 010c 	add.w	r1, r7, #12
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	b258      	sxtb	r0, r3
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	441a      	add	r2, r3
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	440b      	add	r3, r1
 80014ba:	b2c0      	uxtb	r0, r0
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <DISP_DrawChar+0x16c>)
 80014be:	01d2      	lsls	r2, r2, #7
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	4602      	mov	r2, r0
 80014c6:	701a      	strb	r2, [r3, #0]
				break;
 80014c8:	e000      	b.n	80014cc <DISP_DrawChar+0x12c>
			case DISP_COLOR_TRANS:
				break;
 80014ca:	bf00      	nop
		for(int j=0; j<(1+(seg!=0)) && j+page<OLED_HEIGHT/8; j++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <DISP_DrawChar+0x13c>
 80014d8:	2202      	movs	r2, #2
 80014da:	e000      	b.n	80014de <DISP_DrawChar+0x13e>
 80014dc:	2201      	movs	r2, #1
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dd04      	ble.n	80014ee <DISP_DrawChar+0x14e>
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	dda0      	ble.n	8001430 <DISP_DrawChar+0x90>
	for(int i=0; i<5; i++) {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	f77f af6e 	ble.w	80013d8 <DISP_DrawChar+0x38>
			}
		}
	}
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc90      	pop	{r4, r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	200005c0 	.word	0x200005c0

08001510 <DISP_DrawText>:

void DISP_DrawText(char* text, uint8_t x, uint8_t y, DISP_Color_Typedef color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	460b      	mov	r3, r1
 8001524:	70bb      	strb	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	707b      	strb	r3, [r7, #1]
	uint8_t char_num = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	while(*text)
 800152e:	e015      	b.n	800155c <DISP_DrawText+0x4c>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	73fa      	strb	r2, [r7, #15]
 800153e:	461a      	mov	r2, r3
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	4413      	add	r3, r2
 800154c:	b2d9      	uxtb	r1, r3
 800154e:	787b      	ldrb	r3, [r7, #1]
 8001550:	78ba      	ldrb	r2, [r7, #2]
 8001552:	f7ff ff25 	bl	80013a0 <DISP_DrawChar>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <DISP_DrawText+0x56>
	while(*text)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e5      	bne.n	8001530 <DISP_DrawText+0x20>
}
 8001564:	e000      	b.n	8001568 <DISP_DrawText+0x58>
		if(DISP_DrawChar(*text++, x+(6*char_num++), y, color)) break;
 8001566:	bf00      	nop
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <DISP_DrawLineSimple>:

void DISP_DrawLineSimple(	uint8_t x1,
							uint8_t y1,
							uint8_t x2,
							uint8_t y2,
							DISP_Color_Typedef color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	4603      	mov	r3, r0
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	460b      	mov	r3, r1
 8001588:	717b      	strb	r3, [r7, #5]
 800158a:	4613      	mov	r3, r2
 800158c:	713b      	strb	r3, [r7, #4]
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 800158e:	793a      	ldrb	r2, [r7, #4]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d104      	bne.n	80015a0 <DISP_DrawLineSimple+0x30>
 8001596:	797a      	ldrb	r2, [r7, #5]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	429a      	cmp	r2, r3
 800159c:	f000 8086 	beq.w	80016ac <DISP_DrawLineSimple+0x13c>

	if(x2-x1 >= y2-y1) {
 80015a0:	797a      	ldrb	r2, [r7, #5]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	7939      	ldrb	r1, [r7, #4]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db3e      	blt.n	800162e <DISP_DrawLineSimple+0xbe>
		float m = (float)(y2-y1)/(x2-x1);
 80015b0:	793a      	ldrb	r2, [r7, #4]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015be:	797a      	ldrb	r2, [r7, #5]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]
		for(int i=0; i<=x2-x1; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e022      	b.n	8001620 <DISP_DrawLineSimple+0xb0>
			DISP_DrawPixel(x1+i, (m*i)+y1, color);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4413      	add	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	ee07 2a90 	vmov	s15, r2
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f6:	79ba      	ldrb	r2, [r7, #6]
 80015f8:	ee07 2a90 	vmov	s15, r2
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001608:	edc7 7a00 	vstr	s15, [r7]
 800160c:	783a      	ldrb	r2, [r7, #0]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe6b 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=x2-x1; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	ddd6      	ble.n	80015da <DISP_DrawLineSimple+0x6a>
 800162c:	e03f      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
		}
	} else {
		float m = (float)(x2-x1)/(y2-y1);
 800162e:	797a      	ldrb	r2, [r7, #5]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163c:	793a      	ldrb	r2, [r7, #4]
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=0; i<=y2-y1; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e022      	b.n	800169e <DISP_DrawLineSimple+0x12e>
			DISP_DrawPixel((m*i)+x1, i+y1, color);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	edc7 7a00 	vstr	s15, [r7]
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	b2d8      	uxtb	r0, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fe2c 	bl	80012f0 <DISP_DrawPixel>
		for(int i=0; i<=y2-y1; i++) {
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	793a      	ldrb	r2, [r7, #4]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	ddd6      	ble.n	8001658 <DISP_DrawLineSimple+0xe8>
 80016aa:	e000      	b.n	80016ae <DISP_DrawLineSimple+0x13e>
	if((y2-y1 == 0)&&(x2-x1 == 0)) return;
 80016ac:	bf00      	nop
		}
	}
}
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <DISP_DrawRect>:

void DISP_DrawRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	4603      	mov	r3, r0
 80016c8:	71bb      	strb	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	717b      	strb	r3, [r7, #5]
 80016ce:	4613      	mov	r3, r2
 80016d0:	713b      	strb	r3, [r7, #4]
	DISP_DrawLineSimple(x1, y1, x2, y1, color);
 80016d2:	79bc      	ldrb	r4, [r7, #6]
 80016d4:	797a      	ldrb	r2, [r7, #5]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	79f8      	ldrb	r0, [r7, #7]
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4623      	mov	r3, r4
 80016e0:	f7ff ff46 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y1, x1, y2, color);
 80016e4:	793c      	ldrb	r4, [r7, #4]
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	79b9      	ldrb	r1, [r7, #6]
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	7e3b      	ldrb	r3, [r7, #24]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f7ff ff3d 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x2, y1, x2, y2, color);
 80016f6:	793c      	ldrb	r4, [r7, #4]
 80016f8:	797a      	ldrb	r2, [r7, #5]
 80016fa:	79b9      	ldrb	r1, [r7, #6]
 80016fc:	7978      	ldrb	r0, [r7, #5]
 80016fe:	7e3b      	ldrb	r3, [r7, #24]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	f7ff ff34 	bl	8001570 <DISP_DrawLineSimple>
	DISP_DrawLineSimple(x1, y2, x2, y2, color);
 8001708:	793c      	ldrb	r4, [r7, #4]
 800170a:	797a      	ldrb	r2, [r7, #5]
 800170c:	7939      	ldrb	r1, [r7, #4]
 800170e:	79f8      	ldrb	r0, [r7, #7]
 8001710:	7e3b      	ldrb	r3, [r7, #24]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7ff ff2b 	bl	8001570 <DISP_DrawLineSimple>
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
	...

08001724 <DISP_FillRect>:

void DISP_FillRect(	uint8_t x1,
					uint8_t y1,
					uint8_t x2,
					uint8_t y2,
					DISP_Color_Typedef color) {
 8001724:	b490      	push	{r4, r7}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	4603      	mov	r3, r0
 8001738:	71bb      	strb	r3, [r7, #6]
 800173a:	460b      	mov	r3, r1
 800173c:	717b      	strb	r3, [r7, #5]
 800173e:	4613      	mov	r3, r2
 8001740:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	73bb      	strb	r3, [r7, #14]
	uint8_t seg1 = y1%8;
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	737b      	strb	r3, [r7, #13]
	uint8_t page2 = y2/8;
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	733b      	strb	r3, [r7, #12]
	uint8_t seg2 = y2%8;
 8001756:	793b      	ldrb	r3, [r7, #4]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	72fb      	strb	r3, [r7, #11]

	for(int i=page1; i<=page2; i++) {
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e074      	b.n	800184e <DISP_FillRect+0x12a>
		for(int j=x1; j<=x2; j++) {
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e06a      	b.n	8001840 <DISP_FillRect+0x11c>
			uint8_t bit;

			if(i==page1 && i!=page2) {
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <DISP_FillRect+0x62>
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d005      	beq.n	8001786 <DISP_FillRect+0x62>
				bit = (0xFF << seg1);
 800177a:	7b7b      	ldrb	r3, [r7, #13]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e022      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(page1==page2) {
 8001786:	7bba      	ldrb	r2, [r7, #14]
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	429a      	cmp	r2, r3
 800178c:	d110      	bne.n	80017b0 <DISP_FillRect+0x8c>
				bit = (0xFF >> (7-seg2)) - (0xFF >> (8-seg1));
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	f1c3 0307 	rsb	r3, r3, #7
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	fa42 f303 	asr.w	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	f1c3 0308 	rsb	r3, r3, #8
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	fa41 f303 	asr.w	r3, r1, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e00d      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else if(i==page2) {
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <DISP_FillRect+0xa4>
				bit = (0xFF >> (7-seg2));
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	fa42 f303 	asr.w	r3, r2, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e001      	b.n	80017cc <DISP_FillRect+0xa8>
			}
			else {
				bit = 0xFF;
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	73fb      	strb	r3, [r7, #15]
			}

			switch(color) {
 80017cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d031      	beq.n	8001838 <DISP_FillRect+0x114>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	dc30      	bgt.n	800183a <DISP_FillRect+0x116>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DISP_FillRect+0xbe>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d013      	beq.n	8001808 <DISP_FillRect+0xe4>
 80017e0:	e02b      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_WHITE:
				disp_buff[i][j] |= bit;
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <DISP_FillRect+0x140>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	441a      	add	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4413      	add	r3, r2
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <DISP_FillRect+0x140>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	441a      	add	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4413      	add	r3, r2
 8001802:	460a      	mov	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
				break;
 8001806:	e018      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_BLACK:
				disp_buff[i][j] &=~bit;
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <DISP_FillRect+0x140>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	43db      	mvns	r3, r3
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4013      	ands	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <DISP_FillRect+0x140>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	441a      	add	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
				break;
 8001836:	e000      	b.n	800183a <DISP_FillRect+0x116>
			case DISP_COLOR_TRANS:
				break;
 8001838:	bf00      	nop
		for(int j=x1; j<=x2; j++) {
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	dd90      	ble.n	800176a <DISP_FillRect+0x46>
	for(int i=page1; i<=page2; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dd86      	ble.n	8001764 <DISP_FillRect+0x40>
			}
		}
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bc90      	pop	{r4, r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200005c0 	.word	0x200005c0

08001868 <DISP_CountCharString>:

uint8_t DISP_CountCharString(char* str) {
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int ct;
	for(ct=0; str[ct]!=0; ct++);
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e002      	b.n	800187c <DISP_CountCharString+0x14>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f6      	bne.n	8001876 <DISP_CountCharString+0xe>
	return ct;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DISP_DisplayText>:

void DISP_DisplayText(DISP_Text_Typedef *s, char* text) {
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	uint8_t len_char = DISP_CountCharString(text);
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f7ff ffe0 	bl	8001868 <DISP_CountCharString>
 80018a8:	4603      	mov	r3, r0
 80018aa:	72fb      	strb	r3, [r7, #11]
	uint8_t len_bit = len_char*6-1;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
 80018ae:	461a      	mov	r2, r3
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	72bb      	strb	r3, [r7, #10]
	uint8_t x, y;
	uint8_t fx2, fy2;

	if(s->size_x == 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <DISP_DisplayText+0x3c>
		fx2 = s->origin_x+len_bit+1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	757b      	strb	r3, [r7, #21]
 80018d2:	e005      	b.n	80018e0 <DISP_DisplayText+0x48>
	else
		fx2 = s->origin_x+s->size_x;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	78db      	ldrb	r3, [r3, #3]
 80018dc:	4413      	add	r3, r2
 80018de:	757b      	strb	r3, [r7, #21]

	if(s->size_y < 8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d804      	bhi.n	80018f2 <DISP_DisplayText+0x5a>
		fy2 = s->origin_y+8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	3308      	adds	r3, #8
 80018ee:	753b      	strb	r3, [r7, #20]
 80018f0:	e005      	b.n	80018fe <DISP_DisplayText+0x66>
	else
		fy2 = s->origin_y+s->size_y;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	753b      	strb	r3, [r7, #20]

	DISP_FillRect(
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7818      	ldrb	r0, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			fx2,
			fy2,
			(s->color==DISP_COLOR_BLACK)?DISP_COLOR_WHITE:DISP_COLOR_BLACK);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	789b      	ldrb	r3, [r3, #2]
	DISP_FillRect(
 800190a:	2b01      	cmp	r3, #1
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461c      	mov	r4, r3
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	7d7a      	ldrb	r2, [r7, #21]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	f7ff ff02 	bl	8001724 <DISP_FillRect>

	switch(s->align_x) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d010      	beq.n	800194a <DISP_DisplayText+0xb2>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc20      	bgt.n	800196e <DISP_DisplayText+0xd6>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <DISP_DisplayText+0x9e>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d005      	beq.n	8001940 <DISP_DisplayText+0xa8>
 8001934:	e01b      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_LEFT:
		x = s->origin_x + 1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
		break;
 800193e:	e016      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_RIGHT:
		x = fx2 - len_bit;
 8001940:	7d7a      	ldrb	r2, [r7, #21]
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	75fb      	strb	r3, [r7, #23]
		break;
 8001948:	e011      	b.n	800196e <DISP_DisplayText+0xd6>
	case DISP_ALIGN_CENTER:
		x = s->origin_x+((fx2-s->origin_x)/2)-(len_bit/2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	7d7b      	ldrb	r3, [r7, #21]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	7809      	ldrb	r1, [r1, #0]
 8001954:	1a5b      	subs	r3, r3, r1
 8001956:	0fd9      	lsrs	r1, r3, #31
 8001958:	440b      	add	r3, r1
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7abb      	ldrb	r3, [r7, #10]
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	75fb      	strb	r3, [r7, #23]
		break;
 800196c:	bf00      	nop
	}

	switch(s->align_y) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	799b      	ldrb	r3, [r3, #6]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d00f      	beq.n	8001996 <DISP_DisplayText+0xfe>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc1c      	bgt.n	80019b4 <DISP_DisplayText+0x11c>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <DISP_DisplayText+0xec>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d005      	beq.n	800198e <DISP_DisplayText+0xf6>
 8001982:	e017      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_LEFT:
		y = s->origin_y + 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	3301      	adds	r3, #1
 800198a:	75bb      	strb	r3, [r7, #22]
		break;
 800198c:	e012      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_RIGHT:
		y = fy2 - 7;
 800198e:	7d3b      	ldrb	r3, [r7, #20]
 8001990:	3b07      	subs	r3, #7
 8001992:	75bb      	strb	r3, [r7, #22]
		break;
 8001994:	e00e      	b.n	80019b4 <DISP_DisplayText+0x11c>
	case DISP_ALIGN_CENTER:
		y = s->origin_y+((fy2-s->origin_y)/2)-3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	785a      	ldrb	r2, [r3, #1]
 800199a:	7d3b      	ldrb	r3, [r7, #20]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	7849      	ldrb	r1, [r1, #1]
 80019a0:	1a5b      	subs	r3, r3, r1
 80019a2:	0fd9      	lsrs	r1, r3, #31
 80019a4:	440b      	add	r3, r1
 80019a6:	105b      	asrs	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b03      	subs	r3, #3
 80019b0:	75bb      	strb	r3, [r7, #22]
		break;
 80019b2:	bf00      	nop
	}

	DISP_DrawText(text, x, y, s->color);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	7dba      	ldrb	r2, [r7, #22]
 80019ba:	7df9      	ldrb	r1, [r7, #23]
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f7ff fda7 	bl	8001510 <DISP_DrawText>

	uint8_t page1 = s->origin_y/8;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	727b      	strb	r3, [r7, #9]
	uint8_t page2 = fy2/8;
 80019ca:	7d3b      	ldrb	r3, [r7, #20]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	723b      	strb	r3, [r7, #8]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e024      	b.n	8001a20 <DISP_DisplayText+0x188>
		OLED_SetPageAddr(i);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 ff0a 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(s->origin_x);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 ff1a 	bl	800281e <OLED_SetColumn>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e00c      	b.n	8001a0c <DISP_DisplayText+0x174>
			OLED_Data(disp_buff[i][j]);
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <DISP_DisplayText+0x1a0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fedf 	bl	80027c4 <OLED_Data>
		for(int j=s->origin_x; j<=fx2&&j<OLED_WIDTH; j++) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dc02      	bgt.n	8001a1a <DISP_DisplayText+0x182>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	ddeb      	ble.n	80019f2 <DISP_DisplayText+0x15a>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dc02      	bgt.n	8001a2e <DISP_DisplayText+0x196>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	ddd3      	ble.n	80019d6 <DISP_DisplayText+0x13e>
		}
	}

}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005c0 	.word	0x200005c0

08001a3c <DISP_OLEDUpdate>:

void DISP_OLEDUpdate(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71bb      	strb	r3, [r7, #6]
 8001a52:	460b      	mov	r3, r1
 8001a54:	717b      	strb	r3, [r7, #5]
 8001a56:	4613      	mov	r3, r2
 8001a58:	713b      	strb	r3, [r7, #4]
	uint8_t page1 = y1/8;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t page2 = y2/8;
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	73bb      	strb	r3, [r7, #14]

	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e022      	b.n	8001ab2 <DISP_OLEDUpdate+0x76>
		OLED_SetPageAddr(i);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 febf 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(x1);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fed0 	bl	800281e <OLED_SetColumn>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00c      	b.n	8001a9e <DISP_OLEDUpdate+0x62>
			OLED_Data(disp_buff[i][j]);
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <DISP_OLEDUpdate+0x8c>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe96 	bl	80027c4 <OLED_Data>
		for(int j=x1; j<=x2&&i<OLED_WIDTH; j++) {
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dc02      	bgt.n	8001aac <DISP_OLEDUpdate+0x70>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aaa:	ddeb      	ble.n	8001a84 <DISP_OLEDUpdate+0x48>
	for(int i=page1; i<=page2&&i<OLED_HEIGHT/8; i++) {
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dc02      	bgt.n	8001ac0 <DISP_OLEDUpdate+0x84>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	ddd5      	ble.n	8001a6c <DISP_OLEDUpdate+0x30>
		}
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	200005c0 	.word	0x200005c0

08001acc <DISP_FillRect2>:

void DISP_FillRect2(DISP_Shape_Typedef* s) {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
	DISP_FillRect(
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7859      	ldrb	r1, [r3, #1]
			s->origin_x,
			s->origin_y,
			s->origin_x+s->size_x,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	78db      	ldrb	r3, [r3, #3]
	DISP_FillRect(
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2dc      	uxtb	r4, r3
			s->origin_y+s->size_y,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785a      	ldrb	r2, [r3, #1]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
	DISP_FillRect(
 8001af0:	4413      	add	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	4622      	mov	r2, r4
 8001afe:	f7ff fe11 	bl	8001724 <DISP_FillRect>
			s->color);
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
	...

08001b0c <DISP_Test>:
			s->origin_y,
			s->origin_x+s->size_x,
			s->origin_y+s->size_y);
}

void DISP_Test() {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
	DISP_DrawText ("OK! Rownle. Now, I", 0, 0, DISP_COLOR_WHITE);
 8001b12:	2300      	movs	r3, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <DISP_Test+0x108>)
 8001b1a:	f7ff fcf9 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("want to eat your", 0, 8, DISP_COLOR_WHITE);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2208      	movs	r2, #8
 8001b22:	2100      	movs	r1, #0
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <DISP_Test+0x10c>)
 8001b26:	f7ff fcf3 	bl	8001510 <DISP_DrawText>
	DISP_DrawText ("brain!", 0, 16, DISP_COLOR_WHITE);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	2100      	movs	r1, #0
 8001b30:	483a      	ldr	r0, [pc, #232]	; (8001c1c <DISP_Test+0x110>)
 8001b32:	f7ff fced 	bl	8001510 <DISP_DrawText>
	DISP_DrawRect(62, 30, 122, 62, DISP_COLOR_WHITE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	233e      	movs	r3, #62	; 0x3e
 8001b3c:	227a      	movs	r2, #122	; 0x7a
 8001b3e:	211e      	movs	r1, #30
 8001b40:	203e      	movs	r0, #62	; 0x3e
 8001b42:	f7ff fdb7 	bl	80016b4 <DISP_DrawRect>
	DISP_FillRect(64, 32, 120, 60, DISP_COLOR_WHITE);
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	233c      	movs	r3, #60	; 0x3c
 8001b4c:	2278      	movs	r2, #120	; 0x78
 8001b4e:	2120      	movs	r1, #32
 8001b50:	2040      	movs	r0, #64	; 0x40
 8001b52:	f7ff fde7 	bl	8001724 <DISP_FillRect>
	DISP_DrawText ("HOW?", 81, 42, DISP_COLOR_BLACK);
 8001b56:	2301      	movs	r3, #1
 8001b58:	222a      	movs	r2, #42	; 0x2a
 8001b5a:	2151      	movs	r1, #81	; 0x51
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <DISP_Test+0x114>)
 8001b5e:	f7ff fcd7 	bl	8001510 <DISP_DrawText>
	for(int i=0; i<8; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e01d      	b.n	8001ba4 <DISP_Test+0x98>
		OLED_SetPageAddr(i);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fe41 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fe53 	bl	800281e <OLED_SetColumn>
		for(int j=0; j<128; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	e00c      	b.n	8001b98 <DISP_Test+0x8c>
			OLED_Data(disp_buff[i][j]);
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <DISP_Test+0x118>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	441a      	add	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fe19 	bl	80027c4 <OLED_Data>
		for(int j=0; j<128; j++) {
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddef      	ble.n	8001b7e <DISP_Test+0x72>
	for(int i=0; i<8; i++) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	ddde      	ble.n	8001b68 <DISP_Test+0x5c>
		}
	}
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e022      	b.n	8001bf6 <DISP_Test+0xea>
		OLED_SetPageAddr(i+4);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fe1b 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(2);
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f000 fe2d 	bl	800281e <OLED_SetColumn>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e00f      	b.n	8001bea <DISP_Test+0xde>
			OLED_Data(itsr_logo[j+i*ITSR_ARRAY_WIDTH]);
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <DISP_Test+0x11c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fdf0 	bl	80027c4 <OLED_Data>
		for(int j=0; j<ITSR_ARRAY_WIDTH; j++) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b27      	cmp	r3, #39	; 0x27
 8001bee:	ddec      	ble.n	8001bca <DISP_Test+0xbe>
	for(int i=0; i<ITSR_ARRAY_HEGIHT; i++) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	ddd9      	ble.n	8001bb0 <DISP_Test+0xa4>
		}
	}

	HAL_Delay(500);
 8001bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c00:	f007 f94c 	bl	8008e9c <HAL_Delay>
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c04:	f000 fe25 	bl	8002852 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c08:	f7ff fb66 	bl	80012d8 <DISP_ClearBuff>
//		sprintf(tbuff, "%i", b);
//		DISP_DisplayText(&fix2, tbuff);
//		b++;
//		HAL_Delay(100);
//	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	08010e40 	.word	0x08010e40
 8001c18:	08010e54 	.word	0x08010e54
 8001c1c:	08010e68 	.word	0x08010e68
 8001c20:	08010e70 	.word	0x08010e70
 8001c24:	200005c0 	.word	0x200005c0
 8001c28:	200001e8 	.word	0x200001e8

08001c2c <DISP_ClearAll>:

void DISP_ClearAll() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
//	OLED_Command(OLED_DISP_OFF);
	OLED_ClearRAM();
 8001c30:	f000 fe0f 	bl	8002852 <OLED_ClearRAM>
	DISP_ClearBuff();
 8001c34:	f7ff fb50 	bl	80012d8 <DISP_ClearBuff>
	OLED_Command(OLED_DISP_ON);
 8001c38:	20af      	movs	r0, #175	; 0xaf
 8001c3a:	f000 fd97 	bl	800276c <OLED_Command>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_DMA_Init+0x3c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2038      	movs	r0, #56	; 0x38
 8001c6c:	f007 ff57 	bl	8009b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c70:	2038      	movs	r0, #56	; 0x38
 8001c72:	f007 ff70 	bl	8009b56 <HAL_NVIC_EnableIRQ>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <EEP_Init>:

uint32_t last_tick = 0;

uint16_t last_mem;

void EEP_Init(I2C_HandleTypeDef* hi2c) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	eep_hi2c = hi2c;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <EEP_Init+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200009c0 	.word	0x200009c0

08001ca4 <EEP_WritePage>:

void EEP_WritePage(uint16_t page_addr, uint8_t* data) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <EEP_WritePage+0x40>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	89fa      	ldrh	r2, [r7, #14]
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21a0      	movs	r1, #160	; 0xa0
 8001ccc:	f008 fde4 	bl	800a898 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001cd0:	f007 f8d8 	bl	8008e84 <HAL_GetTick>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <EEP_WritePage+0x44>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200009c0 	.word	0x200009c0
 8001ce8:	200009c4 	.word	0x200009c4

08001cec <EEP_WriteMem>:

void EEP_WriteMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <EEP_WriteMem+0x40>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	2164      	movs	r1, #100	; 0x64
 8001d08:	9102      	str	r1, [sp, #8]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	21a0      	movs	r1, #160	; 0xa0
 8001d14:	f008 fdc0 	bl	800a898 <HAL_I2C_Mem_Write>
	last_tick = HAL_GetTick();
 8001d18:	f007 f8b4 	bl	8008e84 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <EEP_WriteMem+0x44>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009c0 	.word	0x200009c0
 8001d30:	200009c4 	.word	0x200009c4

08001d34 <EEP_ReadPage>:

void EEP_ReadPage(uint16_t page_addr, uint8_t* data) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
	uint16_t mem_addr = page_addr << PAGE_BIT_POS;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, PAGE_SIZE, 100);
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <EEP_ReadPage+0x40>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	89fa      	ldrh	r2, [r7, #14]
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	21a0      	movs	r1, #160	; 0xa0
 8001d5c:	f008 fe96 	bl	800aa8c <HAL_I2C_Mem_Read>
	last_mem = mem_addr+PAGE_SIZE;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <EEP_ReadPage+0x44>)
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200009c0 	.word	0x200009c0
 8001d78:	200009c8 	.word	0x200009c8

08001d7c <EEP_ReadMem>:

void EEP_ReadMem(uint16_t mem_addr, uint8_t* data, uint8_t size) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(eep_hi2c, DEV_ADDR, mem_addr, 2, data, size, 100);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <EEP_ReadMem+0x44>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	9102      	str	r1, [sp, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	21a0      	movs	r1, #160	; 0xa0
 8001da4:	f008 fe72 	bl	800aa8c <HAL_I2C_Mem_Read>
	last_mem = mem_addr+size;
 8001da8:	797b      	ldrb	r3, [r7, #5]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <EEP_ReadMem+0x48>)
 8001db4:	801a      	strh	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200009c0 	.word	0x200009c0
 8001dc4:	200009c8 	.word	0x200009c8

08001dc8 <EEP_ReadyToWrite>:

uint8_t EEP_ReadyToWrite() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_tick > 5) return 1; else return 0;
 8001dcc:	f007 f85a 	bl	8008e84 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <EEP_ReadyToWrite+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d901      	bls.n	8001de0 <EEP_ReadyToWrite+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <EEP_ReadyToWrite+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200009c4 	.word	0x200009c4

08001dec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a3e      	ldr	r2, [pc, #248]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <MX_GPIO_Init+0x134>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SEN_EN_Pin|LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001e7a:	f008 fbaf 	bl	800a5dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001e86:	f008 fba9 	bl	800a5dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW_RG_Pin|SW_UP_Pin;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ea0:	f008 f9e8 	bl	800a274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SEN_EN_Pin;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_SEN_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001ebe:	f008 f9d9 	bl	800a274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001edc:	f008 f9ca 	bl	800a274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW_HM_Pin|SW_OK_Pin|SW_BK_Pin|SW_DW_Pin
 8001ee0:	f24e 0330 	movw	r3, #57392	; 0xe030
 8001ee4:	617b      	str	r3, [r7, #20]
                          |SW_LF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_GPIO_Init+0x13c>)
 8001ef6:	f008 f9bd 	bl	800a274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_GPIO_Init+0x138>)
 8001f14:	f008 f9ae 	bl	800a274 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400

08001f2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <MX_I2C1_Init+0x58>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <MX_I2C1_Init+0x5c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_I2C1_Init+0x54>)
 8001f6c:	f008 fb50 	bl	800a610 <HAL_I2C_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001f76:	f000 f9da 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200009cc 	.word	0x200009cc
 8001f84:	40005400 	.word	0x40005400
 8001f88:	00061a80 	.word	0x00061a80

08001f8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <MX_I2C2_Init+0x58>)
 8001f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <MX_I2C2_Init+0x5c>)
 8001f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_I2C2_Init+0x54>)
 8001fcc:	f008 fb20 	bl	800a610 <HAL_I2C_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001fd6:	f000 f9aa 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000a20 	.word	0x20000a20
 8001fe4:	40005800 	.word	0x40005800
 8001fe8:	00061a80 	.word	0x00061a80

08001fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <HAL_I2C_MspInit+0xec>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12d      	bne.n	800206a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203c:	2304      	movs	r3, #4
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	4826      	ldr	r0, [pc, #152]	; (80020e0 <HAL_I2C_MspInit+0xf4>)
 8002048:	f008 f914 	bl	800a274 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002068:	e031      	b.n	80020ce <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_I2C_MspInit+0xf8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d12c      	bne.n	80020ce <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002090:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002096:	2312      	movs	r3, #18
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020a2:	2304      	movs	r3, #4
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <HAL_I2C_MspInit+0xf4>)
 80020ae:	f008 f8e1 	bl	800a274 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 80020bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_I2C_MspInit+0xf0>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	; 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40005400 	.word	0x40005400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40005800 	.word	0x40005800

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ec:	f006 fe64 	bl	8008db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f0:	f000 f860 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f4:	f7ff fe7a 	bl	8001dec <MX_GPIO_Init>
  MX_DMA_Init();
 80020f8:	f7ff fda4 	bl	8001c44 <MX_DMA_Init>
  MX_ADC1_Init();
 80020fc:	f7fe ff46 	bl	8000f8c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002100:	f7ff ff14 	bl	8001f2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002104:	f7ff ff42 	bl	8001f8c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002108:	f003 fa1c 	bl	8005544 <MX_TIM1_Init>
  MX_TIM2_Init();
 800210c:	f003 fad2 	bl	80056b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002110:	f003 fb24 	bl	800575c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002114:	f003 fb9c 	bl	8005850 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002118:	f006 fdaa 	bl	8008c70 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800211c:	f006 fd36 	bl	8008b8c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002120:	f003 fbea 	bl	80058f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  EEP_Init(&hi2c2);
 8002124:	481b      	ldr	r0, [pc, #108]	; (8002194 <main+0xac>)
 8002126:	f7ff fdad 	bl	8001c84 <EEP_Init>
  SEN_Init(&hadc1);
 800212a:	481b      	ldr	r0, [pc, #108]	; (8002198 <main+0xb0>)
 800212c:	f002 f8be 	bl	80042ac <SEN_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002130:	213c      	movs	r1, #60	; 0x3c
 8002132:	481a      	ldr	r0, [pc, #104]	; (800219c <main+0xb4>)
 8002134:	f00a fa5c 	bl	800c5f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002138:	213c      	movs	r1, #60	; 0x3c
 800213a:	4819      	ldr	r0, [pc, #100]	; (80021a0 <main+0xb8>)
 800213c:	f00a fa58 	bl	800c5f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002140:	2100      	movs	r1, #0
 8002142:	4818      	ldr	r0, [pc, #96]	; (80021a4 <main+0xbc>)
 8002144:	f00a f8e6 	bl	800c314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002148:	2104      	movs	r1, #4
 800214a:	4816      	ldr	r0, [pc, #88]	; (80021a4 <main+0xbc>)
 800214c:	f00a f8e2 	bl	800c314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002150:	2108      	movs	r1, #8
 8002152:	4814      	ldr	r0, [pc, #80]	; (80021a4 <main+0xbc>)
 8002154:	f00a f8de 	bl	800c314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002158:	210c      	movs	r1, #12
 800215a:	4812      	ldr	r0, [pc, #72]	; (80021a4 <main+0xbc>)
 800215c:	f00a f8da 	bl	800c314 <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 8002160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002164:	f006 fe9a 	bl	8008e9c <HAL_Delay>
  Run_Init();
 8002168:	f001 fb7e 	bl	8003868 <Run_Init>
  OLED_Init(&hi2c1);
 800216c:	480e      	ldr	r0, [pc, #56]	; (80021a8 <main+0xc0>)
 800216e:	f000 fb95 	bl	800289c <OLED_Init>
  DISP_Test();
 8002172:	f7ff fccb 	bl	8001b0c <DISP_Test>
  HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <main+0xc4>)
 800217e:	f008 fa2d 	bl	800a5dc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <main+0xc8>)
 8002184:	f00a f806 	bl	800c194 <HAL_TIM_Base_Start_IT>
  UI_Init();
 8002188:	f006 fc74 	bl	8008a74 <UI_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
//	  OLED_Test();
	  UI_Main();
 800218c:	f006 fc80 	bl	8008a90 <UI_Main>
 8002190:	e7fc      	b.n	800218c <main+0xa4>
 8002192:	bf00      	nop
 8002194:	20000a20 	.word	0x20000a20
 8002198:	20000518 	.word	0x20000518
 800219c:	20000dc8 	.word	0x20000dc8
 80021a0:	20000e58 	.word	0x20000e58
 80021a4:	20000e10 	.word	0x20000e10
 80021a8:	200009cc 	.word	0x200009cc
 80021ac:	40020800 	.word	0x40020800
 80021b0:	20000ea0 	.word	0x20000ea0

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b094      	sub	sp, #80	; 0x50
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2230      	movs	r2, #48	; 0x30
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f00b ff5a 	bl	800e07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <SystemClock_Config+0xcc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <SystemClock_Config+0xcc>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <SystemClock_Config+0xd0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <SystemClock_Config+0xd0>)
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221a:	2302      	movs	r3, #2
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002224:	2308      	movs	r3, #8
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002228:	23a8      	movs	r3, #168	; 0xa8
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222c:	2302      	movs	r3, #2
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002230:	2307      	movs	r3, #7
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	4618      	mov	r0, r3
 800223a:	f009 fac5 	bl	800b7c8 <HAL_RCC_OscConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002244:	f000 f873 	bl	800232e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	230f      	movs	r3, #15
 800224a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800225a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2105      	movs	r1, #5
 8002266:	4618      	mov	r0, r3
 8002268:	f009 fd26 	bl	800bcb8 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002272:	f000 f85c 	bl	800232e <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	; 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

float coy = 50;;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12d      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		//1ms
		static int counter = 0;
		counter++;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a2:	6013      	str	r3, [r2, #0]
//			HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_SET);
//		kp = plan.kpid[0];
//		ki = plan.kpid[1];
//		kd = plan.kpid[2];
//		Run_LineTracing(coy, 0.001, 0);
		if(counter >= 10) {
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	dd0d      	ble.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x40>
			Run_MotorRoutine(0.01);
 80022ac:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002308 <HAL_TIM_PeriodElapsedCallback+0x80>
 80022b0:	f001 fb46 	bl	8003940 <Run_MotorRoutine>
			main_flag |= MAIN_FLAG_DISP;
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022c0:	701a      	strb	r2, [r3, #0]
			counter = 0;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
		}
		Plan_Main(0.001);
 80022c8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0x88>
 80022cc:	f001 f91c 	bl	8003508 <Plan_Main>
		Run_MotorRoutine2(0.001);
 80022d0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002310 <HAL_TIM_PeriodElapsedCallback+0x88>
 80022d4:	f001 fb98 	bl	8003a08 <Run_MotorRoutine2>
//			// 10ms
//			Run_MotorRoutine(0.01);
//			counter = 0;
//		}
		if((sensor_flag & 2) != 2) {
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x6e>
			SEN_StartReadSensor();
 80022e4:	f002 f874 	bl	80043d0 <SEN_StartReadSensor>
			sensor_flag |= 2;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022f4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40001000 	.word	0x40001000
 8002304:	20000a78 	.word	0x20000a78
 8002308:	3c23d70a 	.word	0x3c23d70a
 800230c:	20000a74 	.word	0x20000a74
 8002310:	3a83126f 	.word	0x3a83126f
 8002314:	20000cbd 	.word	0x20000cbd

08002318 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	SEN_CallbackRoutine(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f002 f865 	bl	80043f0 <SEN_CallbackRoutine>
//	HAL_GPIO_WritePin(LED_SEN_EN_GPIO_Port, LED_SEN_EN_Pin, GPIO_PIN_RESET);
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002332:	b672      	cpsid	i
}
 8002334:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002336:	e7fe      	b.n	8002336 <Error_Handler+0x8>

08002338 <Motor_SetPWM>:

void Motor_Init(Motor_typedef* hmot) {

}

void Motor_SetPWM(Motor_typedef* hmot, float value) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	ed87 0a00 	vstr	s0, [r7]
	if(value > 99) value = 99;
 8002344:	edd7 7a00 	vldr	s15, [r7]
 8002348:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002384 <Motor_SetPWM+0x4c>
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	dd02      	ble.n	800235c <Motor_SetPWM+0x24>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <Motor_SetPWM+0x50>)
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	e00a      	b.n	8002372 <Motor_SetPWM+0x3a>
	else if(value < -99) value = -99;
 800235c:	edd7 7a00 	vldr	s15, [r7]
 8002360:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800238c <Motor_SetPWM+0x54>
 8002364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d501      	bpl.n	8002372 <Motor_SetPWM+0x3a>
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <Motor_SetPWM+0x58>)
 8002370:	603b      	str	r3, [r7, #0]
	hmot->pwm = value;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	621a      	str	r2, [r3, #32]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	42c60000 	.word	0x42c60000
 8002388:	42c60000 	.word	0x42c60000
 800238c:	c2c60000 	.word	0xc2c60000
 8002390:	c2c60000 	.word	0xc2c60000

08002394 <Motor_SetVel>:

void Motor_SetVel(Motor_typedef* hmot, float value) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	ed87 0a00 	vstr	s0, [r7]
	value *= hmot->vel_factor;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023a6:	ed97 7a00 	vldr	s14, [r7]
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	edc7 7a00 	vstr	s15, [r7]
	hmot->vel_sp = value;
 80023b2:	edd7 7a00 	vldr	s15, [r7]
 80023b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <Motor_SetPoint>:
		Motor_SetVel(hmot, value);
		break;
	}
}

void Motor_SetPoint(Motor_typedef* hmot, float value) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	ed87 0a00 	vstr	s0, [r7]
	switch(hmot->mode) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <Motor_SetPoint+0x1a>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d006      	beq.n	80023f6 <Motor_SetPoint+0x26>
		break;
	case MOTOR_MODE_CLOSE:
		Motor_SetVel(hmot, value);
		break;
	}
}
 80023e8:	e00b      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetPWM(hmot, value);
 80023ea:	ed97 0a00 	vldr	s0, [r7]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <Motor_SetPWM>
		break;
 80023f4:	e005      	b.n	8002402 <Motor_SetPoint+0x32>
		Motor_SetVel(hmot, value);
 80023f6:	ed97 0a00 	vldr	s0, [r7]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffca 	bl	8002394 <Motor_SetVel>
		break;
 8002400:	bf00      	nop
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <Motor_ApplyPWM>:

void Motor_ApplyPWM(Motor_typedef* hmot) {
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	int16_t tim_period = (hmot->pwm*hmot->pwm_factor)*hmot->pwm_htim->Init.Period;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	ed93 7a08 	vldr	s14, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	81fb      	strh	r3, [r7, #14]
	uint8_t pwm_sign = tim_period < 0;
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	0bdb      	lsrs	r3, r3, #15
 8002442:	b2db      	uxtb	r3, r3
 8002444:	737b      	strb	r3, [r7, #13]
//	uint8_t dir_sign = hmot->dir < 0;

	if(pwm_sign) tim_period*=-1;
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <Motor_ApplyPWM+0x4a>
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	425b      	negs	r3, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	81fb      	strh	r3, [r7, #14]
	if(tim_period > hmot->pwm_htim->Init.Period) {
 8002454:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	429a      	cmp	r2, r3
 8002460:	d903      	bls.n	800246a <Motor_ApplyPWM+0x60>
		tim_period = (hmot->pwm_htim->Init.Period);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	81fb      	strh	r3, [r7, #14]
	}

	if(pwm_sign) {
 800246a:	7b7b      	ldrb	r3, [r7, #13]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04a      	beq.n	8002506 <Motor_ApplyPWM+0xfc>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, 0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	891b      	ldrh	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <Motor_ApplyPWM+0x7a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
 8002482:	e018      	b.n	80024b6 <Motor_ApplyPWM+0xac>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	891b      	ldrh	r3, [r3, #8]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d105      	bne.n	8002498 <Motor_ApplyPWM+0x8e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	6393      	str	r3, [r2, #56]	; 0x38
 8002496:	e00e      	b.n	80024b6 <Motor_ApplyPWM+0xac>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	891b      	ldrh	r3, [r3, #8]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d105      	bne.n	80024ac <Motor_ApplyPWM+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024aa:	e004      	b.n	80024b6 <Motor_ApplyPWM+0xac>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	895b      	ldrh	r3, [r3, #10]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <Motor_ApplyPWM+0xc2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
	}
}
 80024ca:	e067      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, tim_period);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	895b      	ldrh	r3, [r3, #10]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d106      	bne.n	80024e2 <Motor_ApplyPWM+0xd8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024de:	6393      	str	r3, [r2, #56]	; 0x38
 80024e0:	e05c      	b.n	800259c <Motor_ApplyPWM+0x192>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	895b      	ldrh	r3, [r3, #10]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d106      	bne.n	80024f8 <Motor_ApplyPWM+0xee>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80024f6:	e051      	b.n	800259c <Motor_ApplyPWM+0x192>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002502:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002504:	e04a      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch1, tim_period);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	891b      	ldrh	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <Motor_ApplyPWM+0x112>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
 800251a:	e01b      	b.n	8002554 <Motor_ApplyPWM+0x14a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	891b      	ldrh	r3, [r3, #8]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d106      	bne.n	8002532 <Motor_ApplyPWM+0x128>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800252e:	6393      	str	r3, [r2, #56]	; 0x38
 8002530:	e010      	b.n	8002554 <Motor_ApplyPWM+0x14a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	891b      	ldrh	r3, [r3, #8]
 8002536:	2b08      	cmp	r3, #8
 8002538:	d106      	bne.n	8002548 <Motor_ApplyPWM+0x13e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002544:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002546:	e005      	b.n	8002554 <Motor_ApplyPWM+0x14a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	895b      	ldrh	r3, [r3, #10]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <Motor_ApplyPWM+0x15e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002566:	e019      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	895b      	ldrh	r3, [r3, #10]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d105      	bne.n	800257c <Motor_ApplyPWM+0x172>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	6393      	str	r3, [r2, #56]	; 0x38
}
 800257a:	e00f      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	895b      	ldrh	r3, [r3, #10]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d105      	bne.n	8002590 <Motor_ApplyPWM+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2300      	movs	r3, #0
 800258c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800258e:	e005      	b.n	800259c <Motor_ApplyPWM+0x192>
		__HAL_TIM_SET_COMPARE(hmot->pwm_htim, hmot->ch2, 0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
}
 800259a:	e7ff      	b.n	800259c <Motor_ApplyPWM+0x192>
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <Motor_EnocderRoutine>:

void Motor_EnocderRoutine(Motor_typedef* hmot, float period) {
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	ed87 0a00 	vstr	s0, [r7]
	int16_t tim_cnt_now = (int16_t)__HAL_TIM_GET_COUNTER(hmot->enc_htim) * hmot->dir;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	fb12 f303 	smulbb	r3, r2, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	81fb      	strh	r3, [r7, #14]
	hmot->enc_vel =  (int16_t)(tim_cnt_now - hmot->enc_last_cnt);
 80025ce:	89fa      	ldrh	r2, [r7, #14]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b21b      	sxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	61da      	str	r2, [r3, #28]
	hmot->enc_last_cnt = tim_cnt_now;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	89fa      	ldrh	r2, [r7, #14]
 80025e8:	829a      	strh	r2, [r3, #20]
	hmot->enc_cnt += hmot->enc_vel;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	0000      	movs	r0, r0
	...

08002608 <Motor_ControlRoutine>:

void Motor_ControlRoutine(Motor_typedef* hmot, float __period) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	ed87 0a00 	vstr	s0, [r7]
	float error, mv;
	switch(hmot->mode) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8098 	beq.w	800274e <Motor_ControlRoutine+0x146>
 800261e:	2b01      	cmp	r3, #1
 8002620:	f040 8098 	bne.w	8002754 <Motor_ControlRoutine+0x14c>
	case MOTOR_MODE_CLOSE:
		error = hmot->vel_sp - hmot->enc_vel;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	edc7 7a03 	vstr	s15, [r7, #12]
		if(hmot->vel_sp == 0) hmot->sum_error=0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <Motor_ControlRoutine+0x48>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
		if((hmot->vel_sp > 0 && hmot->pwm < 0)||(hmot->vel_sp < 0 && hmot->pwm > 0)) hmot->sum_error=0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	dd07      	ble.n	800266a <Motor_ControlRoutine+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	d40c      	bmi.n	8002684 <Motor_ControlRoutine+0x7c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	da0b      	bge.n	800268c <Motor_ControlRoutine+0x84>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edd3 7a08 	vldr	s15, [r3, #32]
 800267a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	dd03      	ble.n	800268c <Motor_ControlRoutine+0x84>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
		mv = (hmot->kp * error) + (hmot->ki*hmot->sum_error*__period);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002692:	edd7 7a03 	vldr	s15, [r7, #12]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026aa:	edd7 7a00 	vldr	s15, [r7]
 80026ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b6:	edc7 7a02 	vstr	s15, [r7, #8]
		if(mv>90) {
 80026ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80026be:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002768 <Motor_ControlRoutine+0x160>
 80026c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	dd13      	ble.n	80026f4 <Motor_ControlRoutine+0xec>
			hmot->sum_error*=0.9;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff39 	bl	8000548 <__aeabi_f2d>
 80026d6:	a322      	add	r3, pc, #136	; (adr r3, 8002760 <Motor_ControlRoutine+0x158>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ff8c 	bl	80005f8 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa7e 	bl	8000be8 <__aeabi_d2f>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f2:	e009      	b.n	8002708 <Motor_ControlRoutine+0x100>
		}
		else {
			hmot->sum_error += error;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80026fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
		hmot->pwm = mv;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	621a      	str	r2, [r3, #32]
		hmot->last_error = error;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38

		hmot->filter = hmot->filter*(1-hmot->filter_alpha) + hmot->pwm*hmot->filter_alpha;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002724:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		hmot->pwm = hmot->filter;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

	case MOTOR_MODE_OPEN:
		Motor_ApplyPWM(hmot);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fe5b 	bl	800240a <Motor_ApplyPWM>
	}
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	f3af 8000 	nop.w
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	3feccccc 	.word	0x3feccccc
 8002768:	42b40000 	.word	0x42b40000

0800276c <OLED_Command>:
#include "oled.h"

I2C_HandleTypeDef* oled_hi2c;

void OLED_Command(uint8_t byte)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af04      	add	r7, sp, #16
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x00, 1, &byte, 1, 10);
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <OLED_Command+0x2c>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	230a      	movs	r3, #10
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	2301      	movs	r3, #1
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	2200      	movs	r2, #0
 800278a:	2178      	movs	r1, #120	; 0x78
 800278c:	f008 f884 	bl	800a898 <HAL_I2C_Mem_Write>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000a7c 	.word	0x20000a7c

0800279c <OLED_DoubleCommand>:

void OLED_DoubleCommand(uint8_t byte1, uint8_t byte2)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	460a      	mov	r2, r1
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71bb      	strb	r3, [r7, #6]
	OLED_Command(byte1);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ffdc 	bl	800276c <OLED_Command>
	OLED_Command(byte2);
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffd8 	bl	800276c <OLED_Command>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <OLED_Data>:

void OLED_Data(uint8_t byte)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_hi2c, OLED_ADDR, 0x40, 1, &byte, 1, 10);
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <OLED_Data+0x2c>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	230a      	movs	r3, #10
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2301      	movs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	2178      	movs	r1, #120	; 0x78
 80027e4:	f008 f858 	bl	800a898 <HAL_I2C_Mem_Write>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000a7c 	.word	0x20000a7c

080027f4 <OLED_SetPageAddr>:

void OLED_Inverse(uint8_t mode) {
	OLED_Command(0xA6 + (mode>=1));
}

void OLED_SetPageAddr(uint8_t addr) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
	OLED_Command(OLED_PAGE_ADDR | (addr & 0x07));
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	b25b      	sxtb	r3, r3
 8002808:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800280c:	b25b      	sxtb	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ffab 	bl	800276c <OLED_Command>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <OLED_SetColumn>:

void OLED_SetColumn(uint8_t col) {
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
	col += OLED_X_OFFSET;
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	3302      	adds	r3, #2
 800282c:	71fb      	strb	r3, [r7, #7]
	OLED_DoubleCommand(0x00 | (col & 0x0F), 0x10 | (col >> 4));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f043 0310 	orr.w	r3, r3, #16
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff ffa9 	bl	800279c <OLED_DoubleCommand>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <OLED_ClearRAM>:
			HAL_Delay(10);
		}
	}
}

void OLED_ClearRAM() {
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
	for(int j=0; j<8; j++) {
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	e016      	b.n	800288c <OLED_ClearRAM+0x3a>
		OLED_SetPageAddr(j);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ffc6 	bl	80027f4 <OLED_SetPageAddr>
		OLED_SetColumn(0);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff ffd8 	bl	800281e <OLED_SetColumn>
			for(int i=0; i<OLED_WIDTH; i++) {
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	e005      	b.n	8002880 <OLED_ClearRAM+0x2e>
				OLED_Data(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff ffa5 	bl	80027c4 <OLED_Data>
			for(int i=0; i<OLED_WIDTH; i++) {
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b7f      	cmp	r3, #127	; 0x7f
 8002884:	ddf6      	ble.n	8002874 <OLED_ClearRAM+0x22>
	for(int j=0; j<8; j++) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3301      	adds	r3, #1
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b07      	cmp	r3, #7
 8002890:	dde5      	ble.n	800285e <OLED_ClearRAM+0xc>
			}
		}
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <OLED_Init>:
//		OLED_MultipleData(&ed, 130);
//	}
//}

void OLED_Init(I2C_HandleTypeDef* hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	oled_hi2c = hi2c;
 80028a4:	4a18      	ldr	r2, [pc, #96]	; (8002908 <OLED_Init+0x6c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]

	OLED_Command(OLED_DISP_OFF);
 80028aa:	20ae      	movs	r0, #174	; 0xae
 80028ac:	f7ff ff5e 	bl	800276c <OLED_Command>
	OLED_DoubleCommand(OLED_MUX, 0x3F);
 80028b0:	213f      	movs	r1, #63	; 0x3f
 80028b2:	20a8      	movs	r0, #168	; 0xa8
 80028b4:	f7ff ff72 	bl	800279c <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_OFFSET, 0x00);
 80028b8:	2100      	movs	r1, #0
 80028ba:	20d3      	movs	r0, #211	; 0xd3
 80028bc:	f7ff ff6e 	bl	800279c <OLED_DoubleCommand>
	OLED_Command(OLED_START_LINE);
 80028c0:	2040      	movs	r0, #64	; 0x40
 80028c2:	f7ff ff53 	bl	800276c <OLED_Command>
	OLED_Command(OLED_SEG_RMAP | 0x01);
 80028c6:	20a1      	movs	r0, #161	; 0xa1
 80028c8:	f7ff ff50 	bl	800276c <OLED_Command>
	OLED_Command(OLED_SCAN_DIR | 0x08);
 80028cc:	20c8      	movs	r0, #200	; 0xc8
 80028ce:	f7ff ff4d 	bl	800276c <OLED_Command>
	OLED_DoubleCommand(OLED_COM_PADS,OLED_COM_PADS_MODE|0x10);
 80028d2:	2112      	movs	r1, #18
 80028d4:	20da      	movs	r0, #218	; 0xda
 80028d6:	f7ff ff61 	bl	800279c <OLED_DoubleCommand>
	OLED_DoubleCommand(OLED_CONTRAST, 0x60);
 80028da:	2160      	movs	r1, #96	; 0x60
 80028dc:	2081      	movs	r0, #129	; 0x81
 80028de:	f7ff ff5d 	bl	800279c <OLED_DoubleCommand>
	OLED_Command(OLED_FORCE_ON);
 80028e2:	20a4      	movs	r0, #164	; 0xa4
 80028e4:	f7ff ff42 	bl	800276c <OLED_Command>
	OLED_Command(OLED_DISP_RV | 0x00);
 80028e8:	20a6      	movs	r0, #166	; 0xa6
 80028ea:	f7ff ff3f 	bl	800276c <OLED_Command>
	OLED_DoubleCommand(OLED_CLK_OSC, 0xF0);
 80028ee:	21f0      	movs	r1, #240	; 0xf0
 80028f0:	20d5      	movs	r0, #213	; 0xd5
 80028f2:	f7ff ff53 	bl	800279c <OLED_DoubleCommand>
//	OLED_Command(OLED_VPP_8V0);
	OLED_ClearRAM();
 80028f6:	f7ff ffac 	bl	8002852 <OLED_ClearRAM>
	OLED_Command(OLED_DISP_ON);
 80028fa:	20af      	movs	r0, #175	; 0xaf
 80028fc:	f7ff ff36 	bl	800276c <OLED_Command>
//	OLED_Load();
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000a7c 	.word	0x20000a7c

0800290c <Plan_SetCounter>:
uint8_t counter_status = 0;
uint8_t action_status = 0;
//uint8_t acc_status = 0;
uint8_t speed_now;

void Plan_SetCounter() {
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	plan_last_counter = plan_counter;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <Plan_SetCounter+0x18>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <Plan_SetCounter+0x1c>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000a80 	.word	0x20000a80
 8002928:	20000a84 	.word	0x20000a84

0800292c <Plan_CheckCounterValue>:

uint8_t Plan_CheckCounterValue(uint32_t value) {
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	return (plan_counter - plan_last_counter) >= value*DELAY_FACTOR;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <Plan_CheckCounterValue+0x34>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <Plan_CheckCounterValue+0x38>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1ad1      	subs	r1, r2, r3
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4299      	cmp	r1, r3
 800294a:	bf2c      	ite	cs
 800294c:	2301      	movcs	r3, #1
 800294e:	2300      	movcc	r3, #0
 8002950:	b2db      	uxtb	r3, r3
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000a80 	.word	0x20000a80
 8002964:	20000a84 	.word	0x20000a84

08002968 <Plan_CheckSensor>:

uint32_t Plan_CounterValue() {
	return (plan_counter - plan_last_counter);
}

uint8_t Plan_CheckSensor(uint8_t s, uint8_t align) {
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	460a      	mov	r2, r1
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	4613      	mov	r3, r2
 8002976:	71bb      	strb	r3, [r7, #6]
	if(s == 0) return 1;
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <Plan_CheckSensor+0x1a>
 800297e:	2301      	movs	r3, #1
 8002980:	e02c      	b.n	80029dc <Plan_CheckSensor+0x74>
	else {
		s-=1;
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	3b01      	subs	r3, #1
 8002986:	71fb      	strb	r3, [r7, #7]
		switch(align) {
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d002      	beq.n	8002994 <Plan_CheckSensor+0x2c>
 800298e:	2b02      	cmp	r3, #2
 8002990:	d009      	beq.n	80029a6 <Plan_CheckSensor+0x3e>
 8002992:	e019      	b.n	80029c8 <Plan_CheckSensor+0x60>
		case RIGHT_ALIGN_SEN:
			return sensor_disp_status[RIGHT_SENSOR(s)] > 0;
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <Plan_CheckSensor+0x80>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e01a      	b.n	80029dc <Plan_CheckSensor+0x74>
		case LR_ALIGN_SEN:
			return (sensor_disp_status[RIGHT_SENSOR(s)] > 0) || (sensor_disp_status[LEFT_SENSOR(s)] > 0);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <Plan_CheckSensor+0x80>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <Plan_CheckSensor+0x56>
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f1c3 030d 	rsb	r3, r3, #13
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <Plan_CheckSensor+0x80>)
 80029b8:	5cd3      	ldrb	r3, [r2, r3]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <Plan_CheckSensor+0x5a>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <Plan_CheckSensor+0x5c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e009      	b.n	80029dc <Plan_CheckSensor+0x74>
		case LEFT_ALIGN_SEN:
		default:
			return sensor_disp_status[LEFT_SENSOR(s)] > 0;
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f1c3 030d 	rsb	r3, r3, #13
 80029ce:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <Plan_CheckSensor+0x80>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
		}
	}
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000b90 	.word	0x20000b90
 80029ec:	00000000 	.word	0x00000000

080029f0 <Plan_Left>:

uint8_t Plan_Left(Action_typedef a) {
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 0) {
 80029fc:	797b      	ldrb	r3, [r7, #5]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ffb1 	bl	8002968 <Plan_CheckSensor>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <Plan_Left+0x36>
 8002a0c:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <Plan_Left+0x128>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <Plan_Left+0x36>
			Plan_SetCounter();
 8002a14:	f7ff ff7a 	bl	800290c <Plan_SetCounter>
			plan_last_enc = MOTOR_R.enc_cnt;
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <Plan_Left+0x12c>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <Plan_Left+0x130>)
 8002a1e:	6013      	str	r3, [r2, #0]
			counter_status = 1;
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <Plan_Left+0x128>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002a26:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <Plan_Left+0x128>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d16a      	bne.n	8002b04 <Plan_Left+0x114>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 8002a2e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <Plan_Left+0x134>)
 8002a36:	7ddb      	ldrb	r3, [r3, #23]
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd71 	bl	8000524 <__aeabi_i2d>
 8002a42:	a333      	add	r3, pc, #204	; (adr r3, 8002b10 <Plan_Left+0x120>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fdd6 	bl	80005f8 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f8c8 	bl	8000be8 <__aeabi_d2f>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <Plan_Left+0x134>)
 8002a62:	7ddb      	ldrb	r3, [r3, #23]
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd5b 	bl	8000524 <__aeabi_i2d>
 8002a6e:	a328      	add	r3, pc, #160	; (adr r3, 8002b10 <Plan_Left+0x120>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fdc0 	bl	80005f8 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f8b2 	bl	8000be8 <__aeabi_d2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	ee00 3a90 	vmov	s1, r3
 8002a8a:	ee00 4a10 	vmov	s0, r4
 8002a8e:	f001 fbf3 	bl	8004278 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002a92:	79bb      	ldrb	r3, [r7, #6]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d01f      	beq.n	8002ad8 <Plan_Left+0xe8>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	dc31      	bgt.n	8002b00 <Plan_Left+0x110>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <Plan_Left+0xb6>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d009      	beq.n	8002ab8 <Plan_Left+0xc8>
 8002aa4:	e02c      	b.n	8002b00 <Plan_Left+0x110>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff3f 	bl	800292c <Plan_CheckCounterValue>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <Plan_Left+0x106>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e026      	b.n	8002b06 <Plan_Left+0x116>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff36 	bl	800292c <Plan_CheckCounterValue>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <Plan_Left+0x10a>
				if(Plan_CheckSensor(5, LEFT_ALIGN_SEN)) return 2;
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2005      	movs	r0, #5
 8002aca:	f7ff ff4d 	bl	8002968 <Plan_CheckSensor>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d012      	beq.n	8002afa <Plan_Left+0x10a>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e016      	b.n	8002b06 <Plan_Left+0x116>
			break;
		case 2:
			if(MOTOR_R.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <Plan_Left+0x12c>)
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <Plan_Left+0x130>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	429a      	cmp	r2, r3
 8002af0:	dd05      	ble.n	8002afe <Plan_Left+0x10e>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e007      	b.n	8002b06 <Plan_Left+0x116>
			break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <Plan_Left+0x110>
			break;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <Plan_Left+0x110>
			break;
 8002afe:	bf00      	nop
		}
		return 1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <Plan_Left+0x116>
	}
	return 0;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	9999999a 	.word	0x9999999a
 8002b14:	3fb99999 	.word	0x3fb99999
 8002b18:	20000a8c 	.word	0x20000a8c
 8002b1c:	20000a90 	.word	0x20000a90
 8002b20:	20000a88 	.word	0x20000a88
 8002b24:	20000d54 	.word	0x20000d54

08002b28 <Plan_Right>:

uint8_t Plan_Right(Action_typedef a) {
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 0) {
 8002b34:	797b      	ldrb	r3, [r7, #5]
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff15 	bl	8002968 <Plan_CheckSensor>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <Plan_Right+0x36>
 8002b44:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <Plan_Right+0x128>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <Plan_Right+0x36>
			Plan_SetCounter();
 8002b4c:	f7ff fede 	bl	800290c <Plan_SetCounter>
			plan_last_enc = MOTOR_L.enc_cnt;
 8002b50:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <Plan_Right+0x12c>)
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <Plan_Right+0x130>)
 8002b56:	6013      	str	r3, [r2, #0]
			counter_status = 1;
 8002b58:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <Plan_Right+0x128>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <Plan_Right+0x128>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d16a      	bne.n	8002c3c <Plan_Right+0x114>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8002b66:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <Plan_Right+0x134>)
 8002b6e:	7ddb      	ldrb	r3, [r3, #23]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fcd5 	bl	8000524 <__aeabi_i2d>
 8002b7a:	a333      	add	r3, pc, #204	; (adr r3, 8002c48 <Plan_Right+0x120>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f7fd fd3a 	bl	80005f8 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fe f82c 	bl	8000be8 <__aeabi_d2f>
 8002b90:	4604      	mov	r4, r0
 8002b92:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <Plan_Right+0x134>)
 8002b9a:	7ddb      	ldrb	r3, [r3, #23]
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcbf 	bl	8000524 <__aeabi_i2d>
 8002ba6:	a328      	add	r3, pc, #160	; (adr r3, 8002c48 <Plan_Right+0x120>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fd24 	bl	80005f8 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fe f816 	bl	8000be8 <__aeabi_d2f>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	ee00 3a90 	vmov	s1, r3
 8002bc2:	ee00 4a10 	vmov	s0, r4
 8002bc6:	f001 fb57 	bl	8004278 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d01f      	beq.n	8002c10 <Plan_Right+0xe8>
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	dc31      	bgt.n	8002c38 <Plan_Right+0x110>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <Plan_Right+0xb6>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d009      	beq.n	8002bf0 <Plan_Right+0xc8>
 8002bdc:	e02c      	b.n	8002c38 <Plan_Right+0x110>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fea3 	bl	800292c <Plan_CheckCounterValue>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <Plan_Right+0x106>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e026      	b.n	8002c3e <Plan_Right+0x116>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fe9a 	bl	800292c <Plan_CheckCounterValue>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <Plan_Right+0x10a>
				if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN)) return 2;
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2005      	movs	r0, #5
 8002c02:	f7ff feb1 	bl	8002968 <Plan_CheckSensor>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <Plan_Right+0x10a>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e016      	b.n	8002c3e <Plan_Right+0x116>
			break;
		case 2:
			if(MOTOR_L.enc_cnt - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <Plan_Right+0x12c>)
 8002c12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <Plan_Right+0x130>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	460b      	mov	r3, r1
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dd05      	ble.n	8002c36 <Plan_Right+0x10e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e007      	b.n	8002c3e <Plan_Right+0x116>
			break;
 8002c2e:	bf00      	nop
 8002c30:	e002      	b.n	8002c38 <Plan_Right+0x110>
			break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <Plan_Right+0x110>
			break;
 8002c36:	bf00      	nop
		}
		return 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <Plan_Right+0x116>
	}
	return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	9999999a 	.word	0x9999999a
 8002c4c:	3fb99999 	.word	0x3fb99999
 8002c50:	20000a8c 	.word	0x20000a8c
 8002c54:	20000a90 	.word	0x20000a90
 8002c58:	20000a88 	.word	0x20000a88
 8002c5c:	20000d54 	.word	0x20000d54

08002c60 <Plan_Forward>:

uint8_t Plan_Forward(Action_typedef a, uint8_t _speed) {
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	1d3c      	adds	r4, r7, #4
 8002c68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c6c:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002c6e:	797b      	ldrb	r3, [r7, #5]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fe78 	bl	8002968 <Plan_CheckSensor>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d011      	beq.n	8002ca2 <Plan_Forward+0x42>
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <Plan_Forward+0x100>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <Plan_Forward+0x42>
			Plan_SetCounter();
 8002c86:	f7ff fe41 	bl	800290c <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <Plan_Forward+0x104>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c94:	ee17 2a90 	vmov	r2, s15
 8002c98:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <Plan_Forward+0x108>)
 8002c9a:	601a      	str	r2, [r3, #0]
			counter_status = 1;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <Plan_Forward+0x100>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <Plan_Forward+0x100>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d154      	bne.n	8002d54 <Plan_Forward+0xf4>
		Run_SetMotorSpeed(_speed, _speed);
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	ee07 3a10 	vmov	s14, r3
 8002cba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002cbe:	eef0 0a47 	vmov.f32	s1, s14
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	f001 fad7 	bl	8004278 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d01f      	beq.n	8002d10 <Plan_Forward+0xb0>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	dc3d      	bgt.n	8002d50 <Plan_Forward+0xf0>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <Plan_Forward+0x7e>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d009      	beq.n	8002cf0 <Plan_Forward+0x90>
 8002cdc:	e038      	b.n	8002d50 <Plan_Forward+0xf0>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe23 	bl	800292c <Plan_CheckCounterValue>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02e      	beq.n	8002d4a <Plan_Forward+0xea>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e032      	b.n	8002d56 <Plan_Forward+0xf6>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe1a 	bl	800292c <Plan_CheckCounterValue>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d027      	beq.n	8002d4e <Plan_Forward+0xee>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002cfe:	2102      	movs	r1, #2
 8002d00:	2007      	movs	r0, #7
 8002d02:	f7ff fe31 	bl	8002968 <Plan_CheckSensor>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <Plan_Forward+0xee>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e022      	b.n	8002d56 <Plan_Forward+0xf6>
			break;
		case 2:
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <Plan_Forward+0x104>)
 8002d12:	ed93 7a00 	vldr	s14, [r3]
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <Plan_Forward+0x108>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dc00      	bgt.n	8002d46 <Plan_Forward+0xe6>
			break;
 8002d44:	e004      	b.n	8002d50 <Plan_Forward+0xf0>
			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002d46:	2302      	movs	r3, #2
 8002d48:	e005      	b.n	8002d56 <Plan_Forward+0xf6>
			break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <Plan_Forward+0xf0>
			break;
 8002d4e:	bf00      	nop
		}
		return 1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <Plan_Forward+0xf6>
	}
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000a8c 	.word	0x20000a8c
 8002d64:	20000b20 	.word	0x20000b20
 8002d68:	20000a88 	.word	0x20000a88

08002d6c <Plan_Backward>:

uint8_t Plan_Backward(Action_typedef a, uint8_t _speed) {
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	1d3c      	adds	r4, r7, #4
 8002d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d78:	70fb      	strb	r3, [r7, #3]
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002d7a:	797b      	ldrb	r3, [r7, #5]
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fdf2 	bl	8002968 <Plan_CheckSensor>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d011      	beq.n	8002dae <Plan_Backward+0x42>
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <Plan_Backward+0x104>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <Plan_Backward+0x42>
			Plan_SetCounter();
 8002d92:	f7ff fdbb 	bl	800290c <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <Plan_Backward+0x108>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da0:	ee17 2a90 	vmov	r2, s15
 8002da4:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <Plan_Backward+0x10c>)
 8002da6:	601a      	str	r2, [r3, #0]
			counter_status = 1;
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <Plan_Backward+0x104>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <Plan_Backward+0x104>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d156      	bne.n	8002e64 <Plan_Backward+0xf8>
		Run_SetMotorSpeed(-_speed, -_speed);
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	425b      	negs	r3, r3
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	ee07 3a10 	vmov	s14, r3
 8002dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dce:	eef0 0a47 	vmov.f32	s1, s14
 8002dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd6:	f001 fa4f 	bl	8004278 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002dda:	79bb      	ldrb	r3, [r7, #6]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d01f      	beq.n	8002e20 <Plan_Backward+0xb4>
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	dc3d      	bgt.n	8002e60 <Plan_Backward+0xf4>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <Plan_Backward+0x82>
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d009      	beq.n	8002e00 <Plan_Backward+0x94>
 8002dec:	e038      	b.n	8002e60 <Plan_Backward+0xf4>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fd9b 	bl	800292c <Plan_CheckCounterValue>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d02e      	beq.n	8002e5a <Plan_Backward+0xee>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e032      	b.n	8002e66 <Plan_Backward+0xfa>
			break;
		case 1:
			if(Plan_CheckCounterValue(a.act_value))
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fd92 	bl	800292c <Plan_CheckCounterValue>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d027      	beq.n	8002e5e <Plan_Backward+0xf2>
				if(Plan_CheckSensor(7, LR_ALIGN_SEN)) return 2;
 8002e0e:	2102      	movs	r1, #2
 8002e10:	2007      	movs	r0, #7
 8002e12:	f7ff fda9 	bl	8002968 <Plan_CheckSensor>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <Plan_Backward+0xf2>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e022      	b.n	8002e66 <Plan_Backward+0xfa>
			break;
		case 2:
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <Plan_Backward+0x10c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <Plan_Backward+0x108>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	dc00      	bgt.n	8002e56 <Plan_Backward+0xea>
			break;
 8002e54:	e004      	b.n	8002e60 <Plan_Backward+0xf4>
			if(plan_last_enc - robot_enc_pos > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002e56:	2302      	movs	r3, #2
 8002e58:	e005      	b.n	8002e66 <Plan_Backward+0xfa>
			break;
 8002e5a:	bf00      	nop
 8002e5c:	e000      	b.n	8002e60 <Plan_Backward+0xf4>
			break;
 8002e5e:	bf00      	nop
		}
		return 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <Plan_Backward+0xfa>
	}
	return 0;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000a8c 	.word	0x20000a8c
 8002e74:	20000b20 	.word	0x20000b20
 8002e78:	20000a88 	.word	0x20000a88

08002e7c <Plan_Idle>:

uint8_t Plan_Idle(Action_typedef a) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN) && counter_status == 0) {
 8002e88:	797b      	ldrb	r3, [r7, #5]
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fd6b 	bl	8002968 <Plan_CheckSensor>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d011      	beq.n	8002ebc <Plan_Idle+0x40>
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <Plan_Idle+0x7c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <Plan_Idle+0x40>
			Plan_SetCounter();
 8002ea0:	f7ff fd34 	bl	800290c <Plan_SetCounter>
			plan_last_enc = robot_enc_pos;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <Plan_Idle+0x80>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eae:	ee17 2a90 	vmov	r2, s15
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <Plan_Idle+0x84>)
 8002eb4:	601a      	str	r2, [r3, #0]
			counter_status = 1;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <Plan_Idle+0x7c>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 1) {
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <Plan_Idle+0x7c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d114      	bne.n	8002eee <Plan_Idle+0x72>
		Run_SetMotorSpeed(0, 0);
 8002ec4:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002f04 <Plan_Idle+0x88>
 8002ec8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002f04 <Plan_Idle+0x88>
 8002ecc:	f001 f9d4 	bl	8004278 <Run_SetMotorSpeed>
		switch(a.act_mode) {
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <Plan_Idle+0x6e>
		case 0:
			if(Plan_CheckCounterValue(a.act_value)) return 2;
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fd27 	bl	800292c <Plan_CheckCounterValue>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <Plan_Idle+0x6c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e003      	b.n	8002ef0 <Plan_Idle+0x74>
			break;
 8002ee8:	bf00      	nop
//			break;
//		case 2:
//			if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
//			break;
		}
		return 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <Plan_Idle+0x74>
	}
	return 0;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000a8c 	.word	0x20000a8c
 8002efc:	20000b20 	.word	0x20000b20
 8002f00:	20000a88 	.word	0x20000a88
 8002f04:	00000000 	.word	0x00000000

08002f08 <Plan_Follow>:

uint8_t Plan_Follow(Action_typedef a) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <Plan_Follow+0xa0>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <Plan_Follow+0x30>
		Plan_SetCounter();
 8002f1c:	f7ff fcf6 	bl	800290c <Plan_SetCounter>
		robot_enc_pos = MOTOR_L.enc_cnt;
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <Plan_Follow+0xa4>)
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <Plan_Follow+0xa8>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]
		counter_status = 1;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <Plan_Follow+0xa0>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
	}
	switch(a.act_mode) {
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <Plan_Follow+0x3c>
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d00c      	beq.n	8002f5c <Plan_Follow+0x54>
 8002f42:	e028      	b.n	8002f96 <Plan_Follow+0x8e>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fcf0 	bl	800292c <Plan_CheckCounterValue>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d023      	beq.n	8002f9a <Plan_Follow+0x92>
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <Plan_Follow+0x92>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e020      	b.n	8002f9e <Plan_Follow+0x96>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <Plan_Follow+0xa8>)
 8002f5e:	ed93 7a00 	vldr	s14, [r3]
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <Plan_Follow+0xac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	dc00      	bgt.n	8002f92 <Plan_Follow+0x8a>
		break;
 8002f90:	e004      	b.n	8002f9c <Plan_Follow+0x94>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8002f92:	2302      	movs	r3, #2
 8002f94:	e003      	b.n	8002f9e <Plan_Follow+0x96>
	default: return 2;
 8002f96:	2302      	movs	r3, #2
 8002f98:	e001      	b.n	8002f9e <Plan_Follow+0x96>
		break;
 8002f9a:	bf00      	nop
	}
	return 0;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000a8c 	.word	0x20000a8c
 8002fac:	20000a90 	.word	0x20000a90
 8002fb0:	20000b20 	.word	0x20000b20
 8002fb4:	20000a88 	.word	0x20000a88

08002fb8 <Plan_FollowLeft>:

uint8_t Plan_FollowLeft(Action_typedef a) {
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 8002fc4:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <Plan_FollowLeft+0x148>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <Plan_FollowLeft+0x30>
		Plan_SetCounter();
 8002fcc:	f7ff fc9e 	bl	800290c <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8002fd0:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <Plan_FollowLeft+0x14c>)
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fda:	ee17 2a90 	vmov	r2, s15
 8002fde:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <Plan_FollowLeft+0x150>)
 8002fe0:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <Plan_FollowLeft+0x148>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, LEFT_ALIGN_SEN) && counter_status == 1) {
 8002fe8:	797b      	ldrb	r3, [r7, #5]
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fcbb 	bl	8002968 <Plan_CheckSensor>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <Plan_FollowLeft+0x4e>
 8002ff8:	4b41      	ldr	r3, [pc, #260]	; (8003100 <Plan_FollowLeft+0x148>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <Plan_FollowLeft+0x4e>
		counter_status = 2;
 8003000:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <Plan_FollowLeft+0x148>)
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <Plan_FollowLeft+0x148>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d13d      	bne.n	800308a <Plan_FollowLeft+0xd2>
		Run_SetMotorSpeed(a.reverse_speed*plan.turn_speed*0.1, a.forward_speed*plan.turn_speed*0.1);
 800300e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003012:	461a      	mov	r2, r3
 8003014:	4b3d      	ldr	r3, [pc, #244]	; (800310c <Plan_FollowLeft+0x154>)
 8003016:	7ddb      	ldrb	r3, [r3, #23]
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fa81 	bl	8000524 <__aeabi_i2d>
 8003022:	a335      	add	r3, pc, #212	; (adr r3, 80030f8 <Plan_FollowLeft+0x140>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fae6 	bl	80005f8 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fdd8 	bl	8000be8 <__aeabi_d2f>
 8003038:	4604      	mov	r4, r0
 800303a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800303e:	461a      	mov	r2, r3
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <Plan_FollowLeft+0x154>)
 8003042:	7ddb      	ldrb	r3, [r3, #23]
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa6b 	bl	8000524 <__aeabi_i2d>
 800304e:	a32a      	add	r3, pc, #168	; (adr r3, 80030f8 <Plan_FollowLeft+0x140>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd fad0 	bl	80005f8 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdc2 	bl	8000be8 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	ee00 3a90 	vmov	s1, r3
 800306a:	ee00 4a10 	vmov	s0, r4
 800306e:	f001 f903 	bl	8004278 <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, LEFT_ALIGN_SEN) > 0) {
 8003072:	2100      	movs	r1, #0
 8003074:	2005      	movs	r0, #5
 8003076:	f7ff fc77 	bl	8002968 <Plan_CheckSensor>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <Plan_FollowLeft+0xce>
			counter_status = 1;
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <Plan_FollowLeft+0x148>)
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8003086:	2301      	movs	r3, #1
 8003088:	e032      	b.n	80030f0 <Plan_FollowLeft+0x138>
	}
	switch(a.act_mode) {
 800308a:	79bb      	ldrb	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <Plan_FollowLeft+0xde>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d00c      	beq.n	80030ae <Plan_FollowLeft+0xf6>
 8003094:	e028      	b.n	80030e8 <Plan_FollowLeft+0x130>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fc47 	bl	800292c <Plan_CheckCounterValue>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <Plan_FollowLeft+0x134>
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <Plan_FollowLeft+0x134>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e020      	b.n	80030f0 <Plan_FollowLeft+0x138>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <Plan_FollowLeft+0x14c>)
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <Plan_FollowLeft+0x150>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e0:	dc00      	bgt.n	80030e4 <Plan_FollowLeft+0x12c>
		break;
 80030e2:	e004      	b.n	80030ee <Plan_FollowLeft+0x136>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 80030e4:	2302      	movs	r3, #2
 80030e6:	e003      	b.n	80030f0 <Plan_FollowLeft+0x138>
	default: return 2;
 80030e8:	2302      	movs	r3, #2
 80030ea:	e001      	b.n	80030f0 <Plan_FollowLeft+0x138>
		break;
 80030ec:	bf00      	nop
	}
	return 0;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	9999999a 	.word	0x9999999a
 80030fc:	3fb99999 	.word	0x3fb99999
 8003100:	20000a8c 	.word	0x20000a8c
 8003104:	20000b20 	.word	0x20000b20
 8003108:	20000a88 	.word	0x20000a88
 800310c:	20000d54 	.word	0x20000d54

08003110 <Plan_FollowRight>:

uint8_t Plan_FollowRight(Action_typedef a) {
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(counter_status == 0) {
 800311c:	4b4e      	ldr	r3, [pc, #312]	; (8003258 <Plan_FollowRight+0x148>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <Plan_FollowRight+0x30>
		Plan_SetCounter();
 8003124:	f7ff fbf2 	bl	800290c <Plan_SetCounter>
		plan_last_enc = robot_enc_pos;
 8003128:	4b4c      	ldr	r3, [pc, #304]	; (800325c <Plan_FollowRight+0x14c>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003132:	ee17 2a90 	vmov	r2, s15
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <Plan_FollowRight+0x150>)
 8003138:	601a      	str	r2, [r3, #0]
		counter_status = 1;
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <Plan_FollowRight+0x148>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
	}
	if(Plan_CheckSensor(a.sen_trig, RIGHT_ALIGN_SEN) && counter_status == 1) {
 8003140:	797b      	ldrb	r3, [r7, #5]
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fc0f 	bl	8002968 <Plan_CheckSensor>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <Plan_FollowRight+0x4e>
 8003150:	4b41      	ldr	r3, [pc, #260]	; (8003258 <Plan_FollowRight+0x148>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <Plan_FollowRight+0x4e>
		counter_status = 2;
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <Plan_FollowRight+0x148>)
 800315a:	2202      	movs	r2, #2
 800315c:	701a      	strb	r2, [r3, #0]
	}
	if(counter_status == 2) {
 800315e:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <Plan_FollowRight+0x148>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d13d      	bne.n	80031e2 <Plan_FollowRight+0xd2>
		Run_SetMotorSpeed(a.forward_speed*plan.turn_speed*0.1, a.reverse_speed*plan.turn_speed*0.1);
 8003166:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800316a:	461a      	mov	r2, r3
 800316c:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <Plan_FollowRight+0x154>)
 800316e:	7ddb      	ldrb	r3, [r3, #23]
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9d5 	bl	8000524 <__aeabi_i2d>
 800317a:	a335      	add	r3, pc, #212	; (adr r3, 8003250 <Plan_FollowRight+0x140>)
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd fa3a 	bl	80005f8 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f7fd fd2c 	bl	8000be8 <__aeabi_d2f>
 8003190:	4604      	mov	r4, r0
 8003192:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003196:	461a      	mov	r2, r3
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <Plan_FollowRight+0x154>)
 800319a:	7ddb      	ldrb	r3, [r3, #23]
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f9bf 	bl	8000524 <__aeabi_i2d>
 80031a6:	a32a      	add	r3, pc, #168	; (adr r3, 8003250 <Plan_FollowRight+0x140>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd fa24 	bl	80005f8 <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fd16 	bl	8000be8 <__aeabi_d2f>
 80031bc:	4603      	mov	r3, r0
 80031be:	ee00 3a90 	vmov	s1, r3
 80031c2:	ee00 4a10 	vmov	s0, r4
 80031c6:	f001 f857 	bl	8004278 <Run_SetMotorSpeed>
		if(Plan_CheckSensor(5, RIGHT_ALIGN_SEN) > 0) {
 80031ca:	2101      	movs	r1, #1
 80031cc:	2005      	movs	r0, #5
 80031ce:	f7ff fbcb 	bl	8002968 <Plan_CheckSensor>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <Plan_FollowRight+0xce>
			counter_status = 1;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <Plan_FollowRight+0x148>)
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	e032      	b.n	8003248 <Plan_FollowRight+0x138>
	}
	switch(a.act_mode) {
 80031e2:	79bb      	ldrb	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <Plan_FollowRight+0xde>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d00c      	beq.n	8003206 <Plan_FollowRight+0xf6>
 80031ec:	e028      	b.n	8003240 <Plan_FollowRight+0x130>
	case 0:
		if(Plan_CheckCounterValue(a.act_value) && a.act_value!=0) return 2;
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fb9b 	bl	800292c <Plan_CheckCounterValue>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <Plan_FollowRight+0x134>
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <Plan_FollowRight+0x134>
 8003202:	2302      	movs	r3, #2
 8003204:	e020      	b.n	8003248 <Plan_FollowRight+0x138>
		break;
	case 2:
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <Plan_FollowRight+0x14c>)
 8003208:	ed93 7a00 	vldr	s14, [r3]
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <Plan_FollowRight+0x150>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	461a      	mov	r2, r3
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	dc00      	bgt.n	800323c <Plan_FollowRight+0x12c>
		break;
 800323a:	e004      	b.n	8003246 <Plan_FollowRight+0x136>
		if(robot_enc_pos - plan_last_enc > (int32_t)a.act_value*ENC_FACTOR) return 2;
 800323c:	2302      	movs	r3, #2
 800323e:	e003      	b.n	8003248 <Plan_FollowRight+0x138>
	default: return 2;
 8003240:	2302      	movs	r3, #2
 8003242:	e001      	b.n	8003248 <Plan_FollowRight+0x138>
		break;
 8003244:	bf00      	nop
	}
	return 0;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}
 8003250:	9999999a 	.word	0x9999999a
 8003254:	3fb99999 	.word	0x3fb99999
 8003258:	20000a8c 	.word	0x20000a8c
 800325c:	20000b20 	.word	0x20000b20
 8003260:	20000a88 	.word	0x20000a88
 8003264:	20000d54 	.word	0x20000d54

08003268 <Plan_Invert>:


uint8_t Plan_Invert(Action_typedef a) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(Plan_CheckSensor(a.sen_trig, LR_ALIGN_SEN)) {
 8003274:	797b      	ldrb	r3, [r7, #5]
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fb75 	bl	8002968 <Plan_CheckSensor>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <Plan_Invert+0x24>
		SEN_Invert();
 8003284:	f001 faac 	bl	80047e0 <SEN_Invert>
		return 2;
 8003288:	2302      	movs	r3, #2
 800328a:	e000      	b.n	800328e <Plan_Invert+0x26>
	}
	return 0;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <Plan_NextPlan>:

uint8_t Plan_NextPlan(Action_typedef a) {
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 80032a2:	2302      	movs	r3, #2
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <Plan_Null>:


uint8_t Plan_Null(Action_typedef a) {
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return 2;
 80032bc:	2302      	movs	r3, #2
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <Plan_Jump>:

uint8_t Plan_Jump(Action_typedef a) {
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(a.act_value > 0) num_index = a.act_value-1;
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <Plan_Jump+0x1c>
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <Plan_Jump+0x2c>)
 80032e6:	701a      	strb	r2, [r3, #0]
	return 2;
 80032e8:	2302      	movs	r3, #2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000ccd 	.word	0x20000ccd

080032fc <Plan_ActionInit>:

uint8_t Plan_ActionInit(Action_typedef a, float period, uint8_t sp) {
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	f107 040c 	add.w	r4, r7, #12
 8003306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800330a:	ed87 0a02 	vstr	s0, [r7, #8]
 800330e:	71fb      	strb	r3, [r7, #7]
	static uint8_t stat = 0;
	uint8_t _speed = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	77fb      	strb	r3, [r7, #31]
	if(counter_status == 0) {
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <Plan_ActionInit+0xb0>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <Plan_ActionInit+0x2a>
		Plan_SetCounter();
 800331c:	f7ff faf6 	bl	800290c <Plan_SetCounter>
		counter_status = 1;
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <Plan_ActionInit+0xb0>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
	}

	if(Plan_CheckCounterValue(a.wait_time) && stat == 0) {
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff faff 	bl	800292c <Plan_CheckCounterValue>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <Plan_ActionInit+0x50>
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <Plan_ActionInit+0xb4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <Plan_ActionInit+0x50>
		counter_status = 0;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <Plan_ActionInit+0xb0>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
		stat = 1;
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <Plan_ActionInit+0xb4>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
		return 0;
 8003348:	2300      	movs	r3, #0
 800334a:	e02a      	b.n	80033a2 <Plan_ActionInit+0xa6>
	}

	if(stat == 0) return 0;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <Plan_ActionInit+0xb4>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <Plan_ActionInit+0x5c>
 8003354:	2300      	movs	r3, #0
 8003356:	e024      	b.n	80033a2 <Plan_ActionInit+0xa6>

	if(Plan_CheckCounterValue(a.boost_time) && stat == 1) {
 8003358:	7d3b      	ldrb	r3, [r7, #20]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fae6 	bl	800292c <Plan_CheckCounterValue>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <Plan_ActionInit+0x82>
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <Plan_ActionInit+0xb4>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <Plan_ActionInit+0x82>
		counter_status = 0;
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <Plan_ActionInit+0xb0>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
//		acc_status = 0;
		stat = 0;
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <Plan_ActionInit+0xb4>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		return 3;
 800337a:	2303      	movs	r3, #3
 800337c:	e011      	b.n	80033a2 <Plan_ActionInit+0xa6>
//			_speed = (a.boost_speed-sp)*(float)(Plan_CounterValue()/(float)plan.acc);
//			_speed += sp;
//		}
//	}
//	else if(acc_status == 2) {
		_speed = a.boost_speed;
 800337e:	7d7b      	ldrb	r3, [r7, #21]
 8003380:	77fb      	strb	r3, [r7, #31]
//	}
	Run_LineTracing(_speed, period, plan.status_pid);
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <Plan_ActionInit+0xb8>)
 800338e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003392:	4618      	mov	r0, r3
 8003394:	edd7 0a02 	vldr	s1, [r7, #8]
 8003398:	eeb0 0a67 	vmov.f32	s0, s15
 800339c:	f000 ff3a 	bl	8004214 <Run_LineTracing>
//	Run_LineTracing(a.boost_speed, period, 0);
	return 1;
 80033a0:	2301      	movs	r3, #1
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000a8c 	.word	0x20000a8c
 80033b0:	20000a8f 	.word	0x20000a8f
 80033b4:	20000d54 	.word	0x20000d54

080033b8 <Plan_Stop>:
	}
	return 0;
}


uint8_t Plan_Stop() {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	Run_SetMotorSpeed(0, 0);
 80033bc:	eddf 0a14 	vldr	s1, [pc, #80]	; 8003410 <Plan_Stop+0x58>
 80033c0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003410 <Plan_Stop+0x58>
 80033c4:	f000 ff58 	bl	8004278 <Run_SetMotorSpeed>
	SEN_BlackLine();
 80033c8:	f001 f9f2 	bl	80047b0 <SEN_BlackLine>
	num_checkpoint = 0;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <Plan_Stop+0x5c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
	num_index = plan.checkpoint[num_checkpoint];
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <Plan_Stop+0x5c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <Plan_Stop+0x60>)
 80033da:	4413      	add	r3, r2
 80033dc:	789a      	ldrb	r2, [r3, #2]
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <Plan_Stop+0x64>)
 80033e0:	701a      	strb	r2, [r3, #0]
	main_flag &=~ MAIN_FLAG_RUN;
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <Plan_Stop+0x68>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <Plan_Stop+0x68>)
 80033ee:	701a      	strb	r2, [r3, #0]
	run_counter++;
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <Plan_Stop+0x6c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <Plan_Stop+0x6c>)
 80033fa:	701a      	strb	r2, [r3, #0]
	if(run_counter > 30) {
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <Plan_Stop+0x6c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b1e      	cmp	r3, #30
 8003402:	d901      	bls.n	8003408 <Plan_Stop+0x50>
		HAL_NVIC_SystemReset();
 8003404:	f006 fbb5 	bl	8009b72 <HAL_NVIC_SystemReset>
	}
	return 1;
 8003408:	2301      	movs	r3, #1
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00000000 	.word	0x00000000
 8003414:	20000ccc 	.word	0x20000ccc
 8003418:	20000d54 	.word	0x20000d54
 800341c:	20000ccd 	.word	0x20000ccd
 8003420:	20000a74 	.word	0x20000a74
 8003424:	20000a75 	.word	0x20000a75

08003428 <Plan_Start>:

void Plan_Start() {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	num_index = plan.checkpoint[num_checkpoint];
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <Plan_Start+0x64>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <Plan_Start+0x68>)
 8003434:	4413      	add	r3, r2
 8003436:	789a      	ldrb	r2, [r3, #2]
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <Plan_Start+0x6c>)
 800343a:	701a      	strb	r2, [r3, #0]
	GetActionSequenceInit(num_index);
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <Plan_Start+0x6c>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f001 febd 	bl	80051c0 <GetActionSequenceInit>
	action_status = 0;
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <Plan_Start+0x70>)
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
	plan_counter = 0;
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <Plan_Start+0x74>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
	plan_last_counter = 0;
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <Plan_Start+0x78>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
	kp = plan.kpid[0];
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <Plan_Start+0x68>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <Plan_Start+0x7c>)
 800345e:	6013      	str	r3, [r2, #0]
	ki = plan.kpid[1];
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <Plan_Start+0x68>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <Plan_Start+0x80>)
 8003466:	6013      	str	r3, [r2, #0]
	kd = plan.kpid[2];
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <Plan_Start+0x68>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <Plan_Start+0x84>)
 800346e:	6013      	str	r3, [r2, #0]
	speed_now = plan.speed;
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <Plan_Start+0x68>)
 8003472:	7d9a      	ldrb	r2, [r3, #22]
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <Plan_Start+0x88>)
 8003476:	701a      	strb	r2, [r3, #0]
	main_flag |= MAIN_FLAG_RUN;
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <Plan_Start+0x8c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <Plan_Start+0x8c>)
 8003484:	701a      	strb	r2, [r3, #0]
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000ccc 	.word	0x20000ccc
 8003490:	20000d54 	.word	0x20000d54
 8003494:	20000ccd 	.word	0x20000ccd
 8003498:	20000a8d 	.word	0x20000a8d
 800349c:	20000a80 	.word	0x20000a80
 80034a0:	20000a84 	.word	0x20000a84
 80034a4:	20000b28 	.word	0x20000b28
 80034a8:	20000b2c 	.word	0x20000b2c
 80034ac:	20000b30 	.word	0x20000b30
 80034b0:	20000a8e 	.word	0x20000a8e
 80034b4:	20000a74 	.word	0x20000a74

080034b8 <Plan_UIRoutine>:

void Plan_UIRoutine() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
	if(main_flag & MAIN_FLAG_RUN) {
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <Plan_UIRoutine+0x48>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <Plan_UIRoutine+0x40>
		if(main_flag & MAIN_FLAG_NEXT) {
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <Plan_UIRoutine+0x48>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00e      	beq.n	80034f4 <Plan_UIRoutine+0x3c>
			GetAction(num_index);
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <Plan_UIRoutine+0x4c>)
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	463b      	mov	r3, r7
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fa02 	bl	80048e8 <GetAction>
			main_flag &= ~MAIN_FLAG_NEXT;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <Plan_UIRoutine+0x48>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	f023 0302 	bic.w	r3, r3, #2
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <Plan_UIRoutine+0x48>)
 80034f0:	701a      	strb	r2, [r3, #0]
		}
		else {
			GetActionSequenceRoutine();
		}
	}
}
 80034f2:	e001      	b.n	80034f8 <Plan_UIRoutine+0x40>
			GetActionSequenceRoutine();
 80034f4:	f001 fdd8 	bl	80050a8 <GetActionSequenceRoutine>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000a74 	.word	0x20000a74
 8003504:	20000ccd 	.word	0x20000ccd

08003508 <Plan_Main>:

void Plan_Main(float period) {
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(main_flag & MAIN_FLAG_RUN) {
 8003512:	4bb0      	ldr	r3, [pc, #704]	; (80037d4 <Plan_Main+0x2cc>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8193 	beq.w	8003846 <Plan_Main+0x33e>
		if(main_flag & MAIN_FLAG_NEXT) {
 8003520:	4bac      	ldr	r3, [pc, #688]	; (80037d4 <Plan_Main+0x2cc>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 8187 	bne.w	800383c <Plan_Main+0x334>
//			Run_LineTracing(speed_now, period, plan.status_pid);
		}
		else {
			uint8_t retval;
			speed_now = (plan_active.unit_speed==0)?plan.speed:plan_active.unit_speed;
 800352e:	4baa      	ldr	r3, [pc, #680]	; (80037d8 <Plan_Main+0x2d0>)
 8003530:	7a9b      	ldrb	r3, [r3, #10]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <Plan_Main+0x34>
 8003536:	4ba9      	ldr	r3, [pc, #676]	; (80037dc <Plan_Main+0x2d4>)
 8003538:	7d9b      	ldrb	r3, [r3, #22]
 800353a:	e001      	b.n	8003540 <Plan_Main+0x38>
 800353c:	4ba6      	ldr	r3, [pc, #664]	; (80037d8 <Plan_Main+0x2d0>)
 800353e:	7a9b      	ldrb	r3, [r3, #10]
 8003540:	4aa7      	ldr	r2, [pc, #668]	; (80037e0 <Plan_Main+0x2d8>)
 8003542:	7013      	strb	r3, [r2, #0]
			if(action_status == 0) {
 8003544:	4ba7      	ldr	r3, [pc, #668]	; (80037e4 <Plan_Main+0x2dc>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <Plan_Main+0x68>
				switch(GET_LINE_COLOR_STAT(plan_active.status)) {
 800354c:	4ba2      	ldr	r3, [pc, #648]	; (80037d8 <Plan_Main+0x2d0>)
 800354e:	7adb      	ldrb	r3, [r3, #11]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d002      	beq.n	800355e <Plan_Main+0x56>
 8003558:	2b02      	cmp	r3, #2
 800355a:	d003      	beq.n	8003564 <Plan_Main+0x5c>
 800355c:	e005      	b.n	800356a <Plan_Main+0x62>
				case LINE_COLOR_STAT_BLACK: SEN_BlackLine(); break;
 800355e:	f001 f927 	bl	80047b0 <SEN_BlackLine>
 8003562:	e002      	b.n	800356a <Plan_Main+0x62>
				case LINE_COLOR_STAT_WHITE: SEN_WhiteLine(); break;
 8003564:	f001 f930 	bl	80047c8 <SEN_WhiteLine>
 8003568:	bf00      	nop
				}
				action_status = 1;
 800356a:	4b9e      	ldr	r3, [pc, #632]	; (80037e4 <Plan_Main+0x2dc>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
			}

			if(action_status <= 1 && 				 \
 8003570:	4b9c      	ldr	r3, [pc, #624]	; (80037e4 <Plan_Main+0x2dc>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d81d      	bhi.n	80035b4 <Plan_Main+0xac>
					(plan_active.act != PLAN_STOP && \
 8003578:	4b97      	ldr	r3, [pc, #604]	; (80037d8 <Plan_Main+0x2d0>)
 800357a:	781b      	ldrb	r3, [r3, #0]
			if(action_status <= 1 && 				 \
 800357c:	2b00      	cmp	r3, #0
 800357e:	d019      	beq.n	80035b4 <Plan_Main+0xac>
					 plan_active.act != PLAN_NULL && \
 8003580:	4b95      	ldr	r3, [pc, #596]	; (80037d8 <Plan_Main+0x2d0>)
 8003582:	781b      	ldrb	r3, [r3, #0]
					(plan_active.act != PLAN_STOP && \
 8003584:	2b09      	cmp	r3, #9
 8003586:	d015      	beq.n	80035b4 <Plan_Main+0xac>
					 plan_active.act != PLAN_JUMP)) {
 8003588:	4b93      	ldr	r3, [pc, #588]	; (80037d8 <Plan_Main+0x2d0>)
 800358a:	781b      	ldrb	r3, [r3, #0]
					 plan_active.act != PLAN_NULL && \
 800358c:	2b0b      	cmp	r3, #11
 800358e:	d011      	beq.n	80035b4 <Plan_Main+0xac>
				retval = Plan_ActionInit(plan_active, period, speed_now);
 8003590:	4b93      	ldr	r3, [pc, #588]	; (80037e0 <Plan_Main+0x2d8>)
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <Plan_Main+0x2d0>)
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	4608      	mov	r0, r1
 800359a:	685c      	ldr	r4, [r3, #4]
 800359c:	4621      	mov	r1, r4
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	461c      	mov	r4, r3
 80035a2:	4613      	mov	r3, r2
 80035a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80035a8:	4622      	mov	r2, r4
 80035aa:	f7ff fea7 	bl	80032fc <Plan_ActionInit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e0de      	b.n	8003772 <Plan_Main+0x26a>
			}
			else {
				switch(plan_active.act) {
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <Plan_Main+0x2d0>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	f200 80d8 	bhi.w	800376e <Plan_Main+0x266>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <Plan_Main+0xbc>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	08003603 	.word	0x08003603
 80035cc:	08003621 	.word	0x08003621
 80035d0:	0800363f 	.word	0x0800363f
 80035d4:	0800365f 	.word	0x0800365f
 80035d8:	0800367d 	.word	0x0800367d
 80035dc:	0800369b 	.word	0x0800369b
 80035e0:	080036b9 	.word	0x080036b9
 80035e4:	080036d7 	.word	0x080036d7
 80035e8:	080036f5 	.word	0x080036f5
 80035ec:	08003713 	.word	0x08003713
 80035f0:	08003733 	.word	0x08003733
 80035f4:	08003751 	.word	0x08003751
				case PLAN_STOP: 	retval = Plan_Stop(); 					break;
 80035f8:	f7ff fede 	bl	80033b8 <Plan_Stop>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e0b7      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_LEFT: 	retval = Plan_Left(plan_active); 		break;
 8003602:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <Plan_Main+0x2d0>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4611      	mov	r1, r2
 8003608:	6858      	ldr	r0, [r3, #4]
 800360a:	4602      	mov	r2, r0
 800360c:	6898      	ldr	r0, [r3, #8]
 800360e:	4603      	mov	r3, r0
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	f7ff f9eb 	bl	80029f0 <Plan_Left>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e0a8      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_RIGHT: 	retval = Plan_Right(plan_active); 		break;
 8003620:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <Plan_Main+0x2d0>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4611      	mov	r1, r2
 8003626:	6858      	ldr	r0, [r3, #4]
 8003628:	4602      	mov	r2, r0
 800362a:	6898      	ldr	r0, [r3, #8]
 800362c:	4603      	mov	r3, r0
 800362e:	4608      	mov	r0, r1
 8003630:	4611      	mov	r1, r2
 8003632:	461a      	mov	r2, r3
 8003634:	f7ff fa78 	bl	8002b28 <Plan_Right>
 8003638:	4603      	mov	r3, r0
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e099      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_FORWARD: 	retval = Plan_Forward(plan_active, speed_now); 	break;
 800363e:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <Plan_Main+0x2d8>)
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <Plan_Main+0x2d0>)
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	4608      	mov	r0, r1
 8003648:	685c      	ldr	r4, [r3, #4]
 800364a:	4621      	mov	r1, r4
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	461c      	mov	r4, r3
 8003650:	4613      	mov	r3, r2
 8003652:	4622      	mov	r2, r4
 8003654:	f7ff fb04 	bl	8002c60 <Plan_Forward>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e089      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_FOLLOW: 	retval = Plan_Follow(plan_active); 		break;
 800365e:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <Plan_Main+0x2d0>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4611      	mov	r1, r2
 8003664:	6858      	ldr	r0, [r3, #4]
 8003666:	4602      	mov	r2, r0
 8003668:	6898      	ldr	r0, [r3, #8]
 800366a:	4603      	mov	r3, r0
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff fc49 	bl	8002f08 <Plan_Follow>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e07a      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_FOLLOW_L: retval = Plan_FollowLeft(plan_active); 	break;
 800367c:	4b56      	ldr	r3, [pc, #344]	; (80037d8 <Plan_Main+0x2d0>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4611      	mov	r1, r2
 8003682:	6858      	ldr	r0, [r3, #4]
 8003684:	4602      	mov	r2, r0
 8003686:	6898      	ldr	r0, [r3, #8]
 8003688:	4603      	mov	r3, r0
 800368a:	4608      	mov	r0, r1
 800368c:	4611      	mov	r1, r2
 800368e:	461a      	mov	r2, r3
 8003690:	f7ff fc92 	bl	8002fb8 <Plan_FollowLeft>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e06b      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_FOLLOW_R: retval = Plan_FollowRight(plan_active); break;
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <Plan_Main+0x2d0>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4611      	mov	r1, r2
 80036a0:	6858      	ldr	r0, [r3, #4]
 80036a2:	4602      	mov	r2, r0
 80036a4:	6898      	ldr	r0, [r3, #8]
 80036a6:	4603      	mov	r3, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	f7ff fd2f 	bl	8003110 <Plan_FollowRight>
 80036b2:	4603      	mov	r3, r0
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	e05c      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_INVERT: 	retval = Plan_Invert(plan_active); 		break;
 80036b8:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <Plan_Main+0x2d0>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4611      	mov	r1, r2
 80036be:	6858      	ldr	r0, [r3, #4]
 80036c0:	4602      	mov	r2, r0
 80036c2:	6898      	ldr	r0, [r3, #8]
 80036c4:	4603      	mov	r3, r0
 80036c6:	4608      	mov	r0, r1
 80036c8:	4611      	mov	r1, r2
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7ff fdcc 	bl	8003268 <Plan_Invert>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e04d      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_NEXT: 	retval = Plan_NextPlan(plan_active); 	break;
 80036d6:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <Plan_Main+0x2d0>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4611      	mov	r1, r2
 80036dc:	6858      	ldr	r0, [r3, #4]
 80036de:	4602      	mov	r2, r0
 80036e0:	6898      	ldr	r0, [r3, #8]
 80036e2:	4603      	mov	r3, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	f7ff fdd4 	bl	8003296 <Plan_NextPlan>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e03e      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_NULL: 	retval = Plan_Null(plan_active); 		break;
 80036f4:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <Plan_Main+0x2d0>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4611      	mov	r1, r2
 80036fa:	6858      	ldr	r0, [r3, #4]
 80036fc:	4602      	mov	r2, r0
 80036fe:	6898      	ldr	r0, [r3, #8]
 8003700:	4603      	mov	r3, r0
 8003702:	4608      	mov	r0, r1
 8003704:	4611      	mov	r1, r2
 8003706:	461a      	mov	r2, r3
 8003708:	f7ff fdd2 	bl	80032b0 <Plan_Null>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e02f      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_BACKWARD:	retval = Plan_Backward(plan_active, speed_now);	break;
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <Plan_Main+0x2d8>)
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <Plan_Main+0x2d0>)
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	4608      	mov	r0, r1
 800371c:	685c      	ldr	r4, [r3, #4]
 800371e:	4621      	mov	r1, r4
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	461c      	mov	r4, r3
 8003724:	4613      	mov	r3, r2
 8003726:	4622      	mov	r2, r4
 8003728:	f7ff fb20 	bl	8002d6c <Plan_Backward>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e01f      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_JUMP: 	retval = Plan_Jump(plan_active); 		break;
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <Plan_Main+0x2d0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4611      	mov	r1, r2
 8003738:	6858      	ldr	r0, [r3, #4]
 800373a:	4602      	mov	r2, r0
 800373c:	6898      	ldr	r0, [r3, #8]
 800373e:	4603      	mov	r3, r0
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	f7ff fdc1 	bl	80032cc <Plan_Jump>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e010      	b.n	8003772 <Plan_Main+0x26a>
				case PLAN_IDLE: 	retval = Plan_Idle(plan_active); 		break;
 8003750:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <Plan_Main+0x2d0>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4611      	mov	r1, r2
 8003756:	6858      	ldr	r0, [r3, #4]
 8003758:	4602      	mov	r2, r0
 800375a:	6898      	ldr	r0, [r3, #8]
 800375c:	4603      	mov	r3, r0
 800375e:	4608      	mov	r0, r1
 8003760:	4611      	mov	r1, r2
 8003762:	461a      	mov	r2, r3
 8003764:	f7ff fb8a 	bl	8002e7c <Plan_Idle>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e001      	b.n	8003772 <Plan_Main+0x26a>
				default: retval = 2;
 800376e:	2302      	movs	r3, #2
 8003770:	73fb      	strb	r3, [r7, #15]
				}
			}
			if(retval == 0) {
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d110      	bne.n	800379a <Plan_Main+0x292>
				Run_LineTracing(speed_now, period, plan.status_pid);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <Plan_Main+0x2d8>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <Plan_Main+0x2d4>)
 8003786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800378a:	4618      	mov	r0, r3
 800378c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003790:	eeb0 0a67 	vmov.f32	s0, s15
 8003794:	f000 fd3e 	bl	8004214 <Run_LineTracing>
 8003798:	e050      	b.n	800383c <Plan_Main+0x334>
			}
			else if(retval == 2){
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d144      	bne.n	800382a <Plan_Main+0x322>
				counter_status = 0;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <Plan_Main+0x2e0>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
				action_status = 0;
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <Plan_Main+0x2dc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
				speed_now = plan.speed;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <Plan_Main+0x2d4>)
 80037ae:	7d9a      	ldrb	r2, [r3, #22]
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <Plan_Main+0x2d8>)
 80037b2:	701a      	strb	r2, [r3, #0]
				num_index++;
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <Plan_Main+0x2e4>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <Plan_Main+0x2e4>)
 80037be:	701a      	strb	r2, [r3, #0]
				if(num_index == plan.num_action) {
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <Plan_Main+0x2d4>)
 80037c2:	785a      	ldrb	r2, [r3, #1]
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <Plan_Main+0x2e4>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d111      	bne.n	80037f0 <Plan_Main+0x2e8>
					Plan_Stop();
 80037cc:	f7ff fdf4 	bl	80033b8 <Plan_Stop>
					return;
 80037d0:	e039      	b.n	8003846 <Plan_Main+0x33e>
 80037d2:	bf00      	nop
 80037d4:	20000a74 	.word	0x20000a74
 80037d8:	20000d44 	.word	0x20000d44
 80037dc:	20000d54 	.word	0x20000d54
 80037e0:	20000a8e 	.word	0x20000a8e
 80037e4:	20000a8d 	.word	0x20000a8d
 80037e8:	20000a8c 	.word	0x20000a8c
 80037ec:	20000ccd 	.word	0x20000ccd
				}
				if(num_index >= plan.checkpoint[num_checkpoint+1]) {
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <Plan_Main+0x344>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a16      	ldr	r2, [pc, #88]	; (8003850 <Plan_Main+0x348>)
 80037f8:	4413      	add	r3, r2
 80037fa:	789a      	ldrb	r2, [r3, #2]
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <Plan_Main+0x34c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d805      	bhi.n	8003810 <Plan_Main+0x308>
					num_checkpoint++;
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <Plan_Main+0x344>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <Plan_Main+0x344>)
 800380e:	701a      	strb	r2, [r3, #0]
				}
				if(!GetActionSequence())
 8003810:	f001 fbfa 	bl	8005008 <GetActionSequence>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d110      	bne.n	800383c <Plan_Main+0x334>
					main_flag |= MAIN_FLAG_NEXT;
 800381a:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <Plan_Main+0x350>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	b2da      	uxtb	r2, r3
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <Plan_Main+0x350>)
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e008      	b.n	800383c <Plan_Main+0x334>
			}
			else if(retval == 3){
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d105      	bne.n	800383c <Plan_Main+0x334>
				counter_status = 0;
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <Plan_Main+0x354>)
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
				action_status = 2;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <Plan_Main+0x358>)
 8003838:	2202      	movs	r2, #2
 800383a:	701a      	strb	r2, [r3, #0]
			}
		}
		plan_counter++;
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <Plan_Main+0x35c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <Plan_Main+0x35c>)
 8003844:	6013      	str	r3, [r2, #0]
	}
}
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	20000ccc 	.word	0x20000ccc
 8003850:	20000d54 	.word	0x20000d54
 8003854:	20000ccd 	.word	0x20000ccd
 8003858:	20000a74 	.word	0x20000a74
 800385c:	20000a8c 	.word	0x20000a8c
 8003860:	20000a8d 	.word	0x20000a8d
 8003864:	20000a80 	.word	0x20000a80

08003868 <Run_Init>:
Motor_typedef motor[2];

float robot_enc_pos = 0;
float robot_enc_yawpos = 0;

void Run_Init() {
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	memset(motor, 0, sizeof(motor[0])*2);
 800386c:	2290      	movs	r2, #144	; 0x90
 800386e:	2100      	movs	r1, #0
 8003870:	482a      	ldr	r0, [pc, #168]	; (800391c <Run_Init+0xb4>)
 8003872:	f00a fc03 	bl	800e07c <memset>

	motor[0].mode = MOTOR_MODE_OPEN;
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <Run_Init+0xb4>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
	motor[0].pwm_htim = &htim3;
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <Run_Init+0xb4>)
 800387e:	4a28      	ldr	r2, [pc, #160]	; (8003920 <Run_Init+0xb8>)
 8003880:	605a      	str	r2, [r3, #4]
	motor[0].ch1 = TIM_CHANNEL_1;
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <Run_Init+0xb4>)
 8003884:	2200      	movs	r2, #0
 8003886:	811a      	strh	r2, [r3, #8]
	motor[0].ch2 = TIM_CHANNEL_2;
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <Run_Init+0xb4>)
 800388a:	2204      	movs	r2, #4
 800388c:	815a      	strh	r2, [r3, #10]
	motor[0].enc_htim = &htim2;
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <Run_Init+0xb4>)
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <Run_Init+0xbc>)
 8003892:	611a      	str	r2, [r3, #16]
	motor[0].dir = 1;
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <Run_Init+0xb4>)
 8003896:	2201      	movs	r2, #1
 8003898:	731a      	strb	r2, [r3, #12]
	motor[0].pwm_factor = 0.009975;
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <Run_Init+0xb4>)
 800389c:	4a22      	ldr	r2, [pc, #136]	; (8003928 <Run_Init+0xc0>)
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
	motor[0].vel_factor = 0.625;
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <Run_Init+0xb4>)
 80038a2:	4a22      	ldr	r2, [pc, #136]	; (800392c <Run_Init+0xc4>)
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
	motor[0].kp = 2;
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <Run_Init+0xb4>)
 80038a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
	motor[0].ki = 15;
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <Run_Init+0xb4>)
 80038b0:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <Run_Init+0xc8>)
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34
	motor[0].filter_alpha = 0.5;
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <Run_Init+0xb4>)
 80038b6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44

	motor[1].mode = motor[0].mode;
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <Run_Init+0xb4>)
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <Run_Init+0xb4>)
 80038c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	motor[1].pwm_htim = &htim3;
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <Run_Init+0xb4>)
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <Run_Init+0xb8>)
 80038ca:	64da      	str	r2, [r3, #76]	; 0x4c
	motor[1].ch1 = TIM_CHANNEL_4;
 80038cc:	4b13      	ldr	r3, [pc, #76]	; (800391c <Run_Init+0xb4>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	motor[1].ch2 = TIM_CHANNEL_3;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <Run_Init+0xb4>)
 80038d6:	2208      	movs	r2, #8
 80038d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	motor[1].enc_htim = &htim4;
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <Run_Init+0xb4>)
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <Run_Init+0xcc>)
 80038e0:	659a      	str	r2, [r3, #88]	; 0x58
	motor[1].dir = -1;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <Run_Init+0xb4>)
 80038e4:	22ff      	movs	r2, #255	; 0xff
 80038e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	motor[1].pwm_factor = 0.01;
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <Run_Init+0xb4>)
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <Run_Init+0xd0>)
 80038ee:	66da      	str	r2, [r3, #108]	; 0x6c
	motor[1].vel_factor = 0.625;
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <Run_Init+0xb4>)
 80038f2:	4a0e      	ldr	r2, [pc, #56]	; (800392c <Run_Init+0xc4>)
 80038f4:	675a      	str	r2, [r3, #116]	; 0x74
	motor[1].kp = motor[0].kp;
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <Run_Init+0xb4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <Run_Init+0xb4>)
 80038fc:	6793      	str	r3, [r2, #120]	; 0x78
	motor[1].ki = motor[0].ki;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <Run_Init+0xb4>)
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	4a06      	ldr	r2, [pc, #24]	; (800391c <Run_Init+0xb4>)
 8003904:	67d3      	str	r3, [r2, #124]	; 0x7c
	motor[1].filter_alpha = motor[0].filter_alpha;
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <Run_Init+0xb4>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <Run_Init+0xb4>)
 800390c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	robot_enc_pos = 0;
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <Run_Init+0xd4>)
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000a90 	.word	0x20000a90
 8003920:	20000e10 	.word	0x20000e10
 8003924:	20000dc8 	.word	0x20000dc8
 8003928:	3c236e2f 	.word	0x3c236e2f
 800392c:	3f200000 	.word	0x3f200000
 8003930:	41700000 	.word	0x41700000
 8003934:	20000e58 	.word	0x20000e58
 8003938:	3c23d70a 	.word	0x3c23d70a
 800393c:	20000b20 	.word	0x20000b20

08003940 <Run_MotorRoutine>:

void Run_MotorRoutine(float period) {
 8003940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_EnocderRoutine(&motor[0], period);
 800394c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003950:	4828      	ldr	r0, [pc, #160]	; (80039f4 <Run_MotorRoutine+0xb4>)
 8003952:	f7fe fe29 	bl	80025a8 <Motor_EnocderRoutine>
	Motor_EnocderRoutine(&motor[1], period);
 8003956:	ed97 0a01 	vldr	s0, [r7, #4]
 800395a:	4827      	ldr	r0, [pc, #156]	; (80039f8 <Run_MotorRoutine+0xb8>)
 800395c:	f7fe fe24 	bl	80025a8 <Motor_EnocderRoutine>
	robot_enc_pos += (motor[0].enc_vel*0.5) + (motor[1].enc_vel*0.5);
 8003960:	4b26      	ldr	r3, [pc, #152]	; (80039fc <Run_MotorRoutine+0xbc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fdef 	bl	8000548 <__aeabi_f2d>
 800396a:	4604      	mov	r4, r0
 800396c:	460d      	mov	r5, r1
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <Run_MotorRoutine+0xb4>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fdd6 	bl	8000524 <__aeabi_i2d>
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <Run_MotorRoutine+0xc0>)
 800397e:	f7fc fe3b 	bl	80005f8 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4690      	mov	r8, r2
 8003988:	4699      	mov	r9, r3
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <Run_MotorRoutine+0xb4>)
 800398c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fdc8 	bl	8000524 <__aeabi_i2d>
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <Run_MotorRoutine+0xc0>)
 800399a:	f7fc fe2d 	bl	80005f8 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4640      	mov	r0, r8
 80039a4:	4649      	mov	r1, r9
 80039a6:	f7fc fc71 	bl	800028c <__adddf3>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4620      	mov	r0, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7fc fc6b 	bl	800028c <__adddf3>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f7fd f913 	bl	8000be8 <__aeabi_d2f>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <Run_MotorRoutine+0xbc>)
 80039c6:	6013      	str	r3, [r2, #0]
	robot_enc_yawpos += (motor[1].enc_vel - motor[0].enc_vel);
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <Run_MotorRoutine+0xb4>)
 80039ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <Run_MotorRoutine+0xb4>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <Run_MotorRoutine+0xc4>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <Run_MotorRoutine+0xc4>)
 80039e6:	edc3 7a00 	vstr	s15, [r3]
//	Motor_ControlRoutine(&motor[0], period);
//	Motor_ControlRoutine(&motor[1], period);
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039f4:	20000a90 	.word	0x20000a90
 80039f8:	20000ad8 	.word	0x20000ad8
 80039fc:	20000b20 	.word	0x20000b20
 8003a00:	3fe00000 	.word	0x3fe00000
 8003a04:	20000b24 	.word	0x20000b24

08003a08 <Run_MotorRoutine2>:

void Run_MotorRoutine2(float _period) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	ed87 0a01 	vstr	s0, [r7, #4]
//	Motor_EnocderRoutine(&motor[0], period);
//	Motor_EnocderRoutine(&motor[1], period);
	Motor_ControlRoutine(&motor[0], _period);
 8003a12:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a16:	4806      	ldr	r0, [pc, #24]	; (8003a30 <Run_MotorRoutine2+0x28>)
 8003a18:	f7fe fdf6 	bl	8002608 <Motor_ControlRoutine>
	Motor_ControlRoutine(&motor[1], _period);
 8003a1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a20:	4804      	ldr	r0, [pc, #16]	; (8003a34 <Run_MotorRoutine2+0x2c>)
 8003a22:	f7fe fdf1 	bl	8002608 <Motor_ControlRoutine>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000a90 	.word	0x20000a90
 8003a34:	20000ad8 	.word	0x20000ad8

08003a38 <Run_YawSpeed>:
float kp;
float ki;
float kd;
uint16_t sum_error;

float Run_YawSpeed(float period, float _speed, uint8_t flag) {
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a42:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
	static int16_t last_error = 0;
	int16_t error = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pr_sensor_bin = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	83fb      	strh	r3, [r7, #30]
	uint16_t mask = (1<<SENSOR_NUM)-1;
 8003a52:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003a56:	83bb      	strh	r3, [r7, #28]
	if((flag&0x01)==0x01) {
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <Run_YawSpeed+0x40>
		pr_sensor_bin = (~sensor_binary) & mask;
 8003a62:	4bcb      	ldr	r3, [pc, #812]	; (8003d90 <Run_YawSpeed+0x358>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	83fb      	strh	r3, [r7, #30]
 8003a76:	e004      	b.n	8003a82 <Run_YawSpeed+0x4a>
	}
	else {
		pr_sensor_bin = sensor_binary & mask;
 8003a78:	4bc5      	ldr	r3, [pc, #788]	; (8003d90 <Run_YawSpeed+0x358>)
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	8bbb      	ldrh	r3, [r7, #28]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	83fb      	strh	r3, [r7, #30]
	}

	switch(sensor_binary) {
 8003a82:	4bc3      	ldr	r3, [pc, #780]	; (8003d90 <Run_YawSpeed+0x358>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	f000 82c7 	beq.w	800401e <Run_YawSpeed+0x5e6>
 8003a90:	f643 6201 	movw	r2, #15873	; 0x3e01
 8003a94:	4293      	cmp	r3, r2
 8003a96:	f300 82f4 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003a9a:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003a9e:	f000 8291 	beq.w	8003fc4 <Run_YawSpeed+0x58c>
 8003aa2:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8003aa6:	f300 82ec 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003aaa:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	f000 82bd 	beq.w	800402e <Run_YawSpeed+0x5f6>
 8003ab4:	f643 4203 	movw	r2, #15363	; 0x3c03
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	f300 82e2 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003abe:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8003ac2:	f000 8282 	beq.w	8003fca <Run_YawSpeed+0x592>
 8003ac6:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8003aca:	f300 82da 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003ace:	f643 0207 	movw	r2, #14343	; 0x3807
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f000 82b5 	beq.w	8004042 <Run_YawSpeed+0x60a>
 8003ad8:	f643 0207 	movw	r2, #14343	; 0x3807
 8003adc:	4293      	cmp	r3, r2
 8003ade:	f300 82d0 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003ae2:	f643 0201 	movw	r2, #14337	; 0x3801
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	f000 829d 	beq.w	8004026 <Run_YawSpeed+0x5ee>
 8003aec:	f643 0201 	movw	r2, #14337	; 0x3801
 8003af0:	4293      	cmp	r3, r2
 8003af2:	f300 82c6 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003af6:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003afa:	f000 8269 	beq.w	8003fd0 <Run_YawSpeed+0x598>
 8003afe:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003b02:	f300 82be 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b06:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f000 82a8 	beq.w	8004060 <Run_YawSpeed+0x628>
 8003b10:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	f300 82b4 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b1a:	f243 020f 	movw	r2, #12303	; 0x300f
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	f000 8296 	beq.w	8004050 <Run_YawSpeed+0x618>
 8003b24:	f243 020f 	movw	r2, #12303	; 0x300f
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	f300 82aa 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b2e:	f243 0203 	movw	r2, #12291	; 0x3003
 8003b32:	4293      	cmp	r3, r2
 8003b34:	f000 8282 	beq.w	800403c <Run_YawSpeed+0x604>
 8003b38:	f243 0203 	movw	r2, #12291	; 0x3003
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f300 82a0 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b46:	f000 8246 	beq.w	8003fd6 <Run_YawSpeed+0x59e>
 8003b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b4e:	f300 8298 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b52:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003b56:	4293      	cmp	r3, r2
 8003b58:	f000 8290 	beq.w	800407c <Run_YawSpeed+0x644>
 8003b5c:	f242 32c3 	movw	r2, #9155	; 0x23c3
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f300 828e 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b66:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f000 827c 	beq.w	8004068 <Run_YawSpeed+0x630>
 8003b70:	f242 12f0 	movw	r2, #8688	; 0x21f0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	f300 8284 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b7a:	f242 12e1 	movw	r2, #8673	; 0x21e1
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f000 8276 	beq.w	8004070 <Run_YawSpeed+0x638>
 8003b84:	f242 12e1 	movw	r2, #8673	; 0x21e1
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f300 827a 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b8e:	f242 021f 	movw	r2, #8223	; 0x201f
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f300 8275 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003b98:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	f280 809d 	bge.w	8003cdc <Run_YawSpeed+0x2a4>
 8003ba2:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 8003ba6:	f000 8207 	beq.w	8003fb8 <Run_YawSpeed+0x580>
 8003baa:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 8003bae:	f300 8268 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003bb2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003bb6:	f000 8202 	beq.w	8003fbe <Run_YawSpeed+0x586>
 8003bba:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003bbe:	f300 8260 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003bc2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	f000 821d 	beq.w	8004006 <Run_YawSpeed+0x5ce>
 8003bcc:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	f300 8256 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003bd6:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003bda:	f000 821a 	beq.w	8004012 <Run_YawSpeed+0x5da>
 8003bde:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8003be2:	f300 824e 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003be6:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003bea:	f000 81df 	beq.w	8003fac <Run_YawSpeed+0x574>
 8003bee:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8003bf2:	f300 8246 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bfa:	f000 81da 	beq.w	8003fb2 <Run_YawSpeed+0x57a>
 8003bfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c02:	f300 823e 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c06:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f000 81f1 	beq.w	8003ff2 <Run_YawSpeed+0x5ba>
 8003c10:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003c14:	4293      	cmp	r3, r2
 8003c16:	f300 8234 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c1a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003c1e:	f000 81ef 	beq.w	8004000 <Run_YawSpeed+0x5c8>
 8003c22:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8003c26:	f300 822c 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c2a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003c2e:	f000 81ed 	beq.w	800400c <Run_YawSpeed+0x5d4>
 8003c32:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003c36:	f300 8224 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c3a:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003c3e:	f000 81af 	beq.w	8003fa0 <Run_YawSpeed+0x568>
 8003c42:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8003c46:	f300 821c 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c4a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003c4e:	f000 81aa 	beq.w	8003fa6 <Run_YawSpeed+0x56e>
 8003c52:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8003c56:	f300 8214 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c5a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003c5e:	f300 8210 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c62:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8003c66:	f280 8095 	bge.w	8003d94 <Run_YawSpeed+0x35c>
 8003c6a:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003c6e:	f000 8194 	beq.w	8003f9a <Run_YawSpeed+0x562>
 8003c72:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8003c76:	f300 8204 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c7a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003c7e:	f000 81b0 	beq.w	8003fe2 <Run_YawSpeed+0x5aa>
 8003c82:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8003c86:	f300 81fc 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c8a:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003c8e:	f000 817a 	beq.w	8003f86 <Run_YawSpeed+0x54e>
 8003c92:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003c96:	f300 81f4 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003c9a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003c9e:	f000 8176 	beq.w	8003f8e <Run_YawSpeed+0x556>
 8003ca2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003ca6:	f300 81ec 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003caa:	2bf8      	cmp	r3, #248	; 0xf8
 8003cac:	f000 8163 	beq.w	8003f76 <Run_YawSpeed+0x53e>
 8003cb0:	2bf8      	cmp	r3, #248	; 0xf8
 8003cb2:	f300 81e6 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003cb6:	2bf0      	cmp	r3, #240	; 0xf0
 8003cb8:	f000 8161 	beq.w	8003f7e <Run_YawSpeed+0x546>
 8003cbc:	2bf0      	cmp	r3, #240	; 0xf0
 8003cbe:	f300 81e0 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003cc2:	2b7c      	cmp	r3, #124	; 0x7c
 8003cc4:	f000 814f 	beq.w	8003f66 <Run_YawSpeed+0x52e>
 8003cc8:	2b7c      	cmp	r3, #124	; 0x7c
 8003cca:	f300 81da 	bgt.w	8004082 <Run_YawSpeed+0x64a>
 8003cce:	2b3e      	cmp	r3, #62	; 0x3e
 8003cd0:	f300 8126 	bgt.w	8003f20 <Run_YawSpeed+0x4e8>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f300 809f 	bgt.w	8003e18 <Run_YawSpeed+0x3e0>
 8003cda:	e1d2      	b.n	8004082 <Run_YawSpeed+0x64a>
 8003cdc:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8003ce0:	3b18      	subs	r3, #24
 8003ce2:	2b27      	cmp	r3, #39	; 0x27
 8003ce4:	f200 81cd 	bhi.w	8004082 <Run_YawSpeed+0x64a>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <Run_YawSpeed+0x2b8>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08004019 	.word	0x08004019
 8003cf4:	08004083 	.word	0x08004083
 8003cf8:	08004083 	.word	0x08004083
 8003cfc:	08004083 	.word	0x08004083
 8003d00:	08004083 	.word	0x08004083
 8003d04:	08004083 	.word	0x08004083
 8003d08:	08004083 	.word	0x08004083
 8003d0c:	08004083 	.word	0x08004083
 8003d10:	08003fdd 	.word	0x08003fdd
 8003d14:	08004037 	.word	0x08004037
 8003d18:	08004083 	.word	0x08004083
 8003d1c:	08004083 	.word	0x08004083
 8003d20:	08004083 	.word	0x08004083
 8003d24:	08004083 	.word	0x08004083
 8003d28:	08004083 	.word	0x08004083
 8003d2c:	08004049 	.word	0x08004049
 8003d30:	08004083 	.word	0x08004083
 8003d34:	08004083 	.word	0x08004083
 8003d38:	08004083 	.word	0x08004083
 8003d3c:	08004083 	.word	0x08004083
 8003d40:	08004083 	.word	0x08004083
 8003d44:	08004083 	.word	0x08004083
 8003d48:	08004083 	.word	0x08004083
 8003d4c:	08004083 	.word	0x08004083
 8003d50:	08004083 	.word	0x08004083
 8003d54:	08004083 	.word	0x08004083
 8003d58:	08004083 	.word	0x08004083
 8003d5c:	08004083 	.word	0x08004083
 8003d60:	08004083 	.word	0x08004083
 8003d64:	08004083 	.word	0x08004083
 8003d68:	08004083 	.word	0x08004083
 8003d6c:	08004083 	.word	0x08004083
 8003d70:	08004083 	.word	0x08004083
 8003d74:	08004083 	.word	0x08004083
 8003d78:	08004083 	.word	0x08004083
 8003d7c:	08004083 	.word	0x08004083
 8003d80:	08004083 	.word	0x08004083
 8003d84:	08004083 	.word	0x08004083
 8003d88:	08004083 	.word	0x08004083
 8003d8c:	08004059 	.word	0x08004059
 8003d90:	20000b9e 	.word	0x20000b9e
 8003d94:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d98:	2b1c      	cmp	r3, #28
 8003d9a:	f200 8172 	bhi.w	8004082 <Run_YawSpeed+0x64a>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <Run_YawSpeed+0x36c>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003f95 	.word	0x08003f95
 8003da8:	08004077 	.word	0x08004077
 8003dac:	08004083 	.word	0x08004083
 8003db0:	08004083 	.word	0x08004083
 8003db4:	08004083 	.word	0x08004083
 8003db8:	08004083 	.word	0x08004083
 8003dbc:	08004083 	.word	0x08004083
 8003dc0:	08004083 	.word	0x08004083
 8003dc4:	08004083 	.word	0x08004083
 8003dc8:	08004083 	.word	0x08004083
 8003dcc:	08004083 	.word	0x08004083
 8003dd0:	08004083 	.word	0x08004083
 8003dd4:	08004083 	.word	0x08004083
 8003dd8:	08004083 	.word	0x08004083
 8003ddc:	08004083 	.word	0x08004083
 8003de0:	08004083 	.word	0x08004083
 8003de4:	08003ffb 	.word	0x08003ffb
 8003de8:	08004083 	.word	0x08004083
 8003dec:	08004083 	.word	0x08004083
 8003df0:	08004083 	.word	0x08004083
 8003df4:	08004083 	.word	0x08004083
 8003df8:	08004083 	.word	0x08004083
 8003dfc:	08004083 	.word	0x08004083
 8003e00:	08004083 	.word	0x08004083
 8003e04:	08004083 	.word	0x08004083
 8003e08:	08004083 	.word	0x08004083
 8003e0c:	08004083 	.word	0x08004083
 8003e10:	08004083 	.word	0x08004083
 8003e14:	08003feb 	.word	0x08003feb
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	2b3d      	cmp	r3, #61	; 0x3d
 8003e1c:	f200 8131 	bhi.w	8004082 <Run_YawSpeed+0x64a>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <Run_YawSpeed+0x3f0>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003f27 	.word	0x08003f27
 8003e2c:	08004083 	.word	0x08004083
 8003e30:	08003f2f 	.word	0x08003f2f
 8003e34:	08004083 	.word	0x08004083
 8003e38:	08004083 	.word	0x08004083
 8003e3c:	08004083 	.word	0x08004083
 8003e40:	08003f37 	.word	0x08003f37
 8003e44:	08004083 	.word	0x08004083
 8003e48:	08004083 	.word	0x08004083
 8003e4c:	08004083 	.word	0x08004083
 8003e50:	08004083 	.word	0x08004083
 8003e54:	08004083 	.word	0x08004083
 8003e58:	08004083 	.word	0x08004083
 8003e5c:	08004083 	.word	0x08004083
 8003e60:	08003f3f 	.word	0x08003f3f
 8003e64:	08004083 	.word	0x08004083
 8003e68:	08004083 	.word	0x08004083
 8003e6c:	08004083 	.word	0x08004083
 8003e70:	08004083 	.word	0x08004083
 8003e74:	08004083 	.word	0x08004083
 8003e78:	08004083 	.word	0x08004083
 8003e7c:	08004083 	.word	0x08004083
 8003e80:	08004083 	.word	0x08004083
 8003e84:	08004083 	.word	0x08004083
 8003e88:	08004083 	.word	0x08004083
 8003e8c:	08004083 	.word	0x08004083
 8003e90:	08004083 	.word	0x08004083
 8003e94:	08004083 	.word	0x08004083
 8003e98:	08004083 	.word	0x08004083
 8003e9c:	08003f4f 	.word	0x08003f4f
 8003ea0:	08003f47 	.word	0x08003f47
 8003ea4:	08004083 	.word	0x08004083
 8003ea8:	08004083 	.word	0x08004083
 8003eac:	08004083 	.word	0x08004083
 8003eb0:	08004083 	.word	0x08004083
 8003eb4:	08004083 	.word	0x08004083
 8003eb8:	08004083 	.word	0x08004083
 8003ebc:	08004083 	.word	0x08004083
 8003ec0:	08004083 	.word	0x08004083
 8003ec4:	08004083 	.word	0x08004083
 8003ec8:	08004083 	.word	0x08004083
 8003ecc:	08004083 	.word	0x08004083
 8003ed0:	08004083 	.word	0x08004083
 8003ed4:	08004083 	.word	0x08004083
 8003ed8:	08004083 	.word	0x08004083
 8003edc:	08004083 	.word	0x08004083
 8003ee0:	08004083 	.word	0x08004083
 8003ee4:	08004083 	.word	0x08004083
 8003ee8:	08004083 	.word	0x08004083
 8003eec:	08004083 	.word	0x08004083
 8003ef0:	08004083 	.word	0x08004083
 8003ef4:	08004083 	.word	0x08004083
 8003ef8:	08004083 	.word	0x08004083
 8003efc:	08004083 	.word	0x08004083
 8003f00:	08004083 	.word	0x08004083
 8003f04:	08004083 	.word	0x08004083
 8003f08:	08004083 	.word	0x08004083
 8003f0c:	08004083 	.word	0x08004083
 8003f10:	08004083 	.word	0x08004083
 8003f14:	08003f5f 	.word	0x08003f5f
 8003f18:	08004083 	.word	0x08004083
 8003f1c:	08003f57 	.word	0x08003f57
 8003f20:	2b78      	cmp	r3, #120	; 0x78
 8003f22:	d024      	beq.n	8003f6e <Run_YawSpeed+0x536>
 8003f24:	e0ad      	b.n	8004082 <Run_YawSpeed+0x64a>
	case B00000000000001: error = -15; break;
 8003f26:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8003f2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f2c:	e0ac      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000000011: error = -13; break;
 8003f2e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003f32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f34:	e0a8      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000000111: error = -11; break;
 8003f36:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8003f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f3c:	e0a4      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000001111: error = -10; break;
 8003f3e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8003f42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f44:	e0a0      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000011111: error = -9; break;
 8003f46:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f4c:	e09c      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000011110: error = -8; break;
 8003f4e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003f52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f54:	e098      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000111110: error = -7; break;
 8003f56:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8003f5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f5c:	e094      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000000111100: error = -6; break;
 8003f5e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8003f62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f64:	e090      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000001111100: error = -5; break;
 8003f66:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003f6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f6c:	e08c      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000001111000: error = -4; break;
 8003f6e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003f72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f74:	e088      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000011111000: error = -3; break;
 8003f76:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003f7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f7c:	e084      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000011110000: error = -2; break;
 8003f7e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003f82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f84:	e080      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00000111110000: error = -1; break;
 8003f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f8c:	e07c      	b.n	8004088 <Run_YawSpeed+0x650>

	case B00000111100000: error = 0; break;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f92:	e079      	b.n	8004088 <Run_YawSpeed+0x650>

	case B00001111100000: error = 1; break;
 8003f94:	2301      	movs	r3, #1
 8003f96:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f98:	e076      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00001111000000: error = 2; break;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f9e:	e073      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00011111000000: error = 3; break;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fa4:	e070      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00011110000000: error = 4; break;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003faa:	e06d      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00111110000000: error = 5; break;
 8003fac:	2305      	movs	r3, #5
 8003fae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fb0:	e06a      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00111100000000: error = 6; break;
 8003fb2:	2306      	movs	r3, #6
 8003fb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fb6:	e067      	b.n	8004088 <Run_YawSpeed+0x650>
	case B01111100000000: error = 7; break;
 8003fb8:	2307      	movs	r3, #7
 8003fba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fbc:	e064      	b.n	8004088 <Run_YawSpeed+0x650>
	case B01111000000000: error = 8; break;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fc2:	e061      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11111000000000: error = 9; break;
 8003fc4:	2309      	movs	r3, #9
 8003fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fc8:	e05e      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11110000000000: error = 10; break;
 8003fca:	230a      	movs	r3, #10
 8003fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fce:	e05b      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11100000000000: error = 11; break;
 8003fd0:	230b      	movs	r3, #11
 8003fd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fd4:	e058      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11000000000000: error = 13; break;
 8003fd6:	230d      	movs	r3, #13
 8003fd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fda:	e055      	b.n	8004088 <Run_YawSpeed+0x650>
	case B10000000000000: error = 15; break;
 8003fdc:	230f      	movs	r3, #15
 8003fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fe0:	e052      	b.n	8004088 <Run_YawSpeed+0x650>

	case B00000111111000: error = -1; break;
 8003fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fe8:	e04e      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00001111111100: error = -1; break;
 8003fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ff0:	e04a      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00011111111110: error = -1; break;
 8003ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ff6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ff8:	e046      	b.n	8004088 <Run_YawSpeed+0x650>

	case B00001111110000: error = 0; break;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ffe:	e043      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00011111111000: error = 0; break;
 8004000:	2300      	movs	r3, #0
 8004002:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004004:	e040      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00111111111100: error = 0; break;
 8004006:	2300      	movs	r3, #0
 8004008:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800400a:	e03d      	b.n	8004088 <Run_YawSpeed+0x650>

	case B00011111100000: error = 1; break;
 800400c:	2301      	movs	r3, #1
 800400e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004010:	e03a      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00111111110000: error = 1; break;
 8004012:	2301      	movs	r3, #1
 8004014:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004016:	e037      	b.n	8004088 <Run_YawSpeed+0x650>
	case B01111111111000: error = 1; break;
 8004018:	2301      	movs	r3, #1
 800401a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800401c:	e034      	b.n	8004088 <Run_YawSpeed+0x650>

	case B11111000000001: error = -2; break;
 800401e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004022:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004024:	e030      	b.n	8004088 <Run_YawSpeed+0x650>

	case B11100000000001: error = -1; break;
 8004026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800402a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800402c:	e02c      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11110000000011: error = -1; break;
 800402e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004032:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004034:	e028      	b.n	8004088 <Run_YawSpeed+0x650>

	case B10000000000001: error = 0; break;
 8004036:	2300      	movs	r3, #0
 8004038:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800403a:	e025      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11000000000011: error = 0; break;
 800403c:	2300      	movs	r3, #0
 800403e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004040:	e022      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11100000000111: error = 0; break;
 8004042:	2300      	movs	r3, #0
 8004044:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004046:	e01f      	b.n	8004088 <Run_YawSpeed+0x650>

	case B10000000000111: error = -1; break;
 8004048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800404c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800404e:	e01b      	b.n	8004088 <Run_YawSpeed+0x650>
	case B11000000001111: error = -1; break;
 8004050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004054:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004056:	e017      	b.n	8004088 <Run_YawSpeed+0x650>

	case B10000000011111: error = -2; break;
 8004058:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800405c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800405e:	e013      	b.n	8004088 <Run_YawSpeed+0x650>

	case B11000011110000: error = -2; break;
 8004060:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004064:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004066:	e00f      	b.n	8004088 <Run_YawSpeed+0x650>
	case B10000111110000: error = -1; break;
 8004068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800406c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800406e:	e00b      	b.n	8004088 <Run_YawSpeed+0x650>
	case B10000111100001: error = 0; break;
 8004070:	2300      	movs	r3, #0
 8004072:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004074:	e008      	b.n	8004088 <Run_YawSpeed+0x650>
	case B00001111100001: error = 1; break;
 8004076:	2301      	movs	r3, #1
 8004078:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800407a:	e005      	b.n	8004088 <Run_YawSpeed+0x650>
	case B10001111000011: error = 2; break;
 800407c:	2302      	movs	r3, #2
 800407e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004080:	e002      	b.n	8004088 <Run_YawSpeed+0x650>
	default: error = last_error;
 8004082:	4b5f      	ldr	r3, [pc, #380]	; (8004200 <Run_YawSpeed+0x7c8>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	int8_t div_error = error - last_error;
 8004088:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b5c      	ldr	r3, [pc, #368]	; (8004200 <Run_YawSpeed+0x7c8>)
 800408e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	76fb      	strb	r3, [r7, #27]
	sum_error += error;
 800409a:	4b5a      	ldr	r3, [pc, #360]	; (8004204 <Run_YawSpeed+0x7cc>)
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040a0:	4413      	add	r3, r2
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	4b57      	ldr	r3, [pc, #348]	; (8004204 <Run_YawSpeed+0x7cc>)
 80040a6:	801a      	strh	r2, [r3, #0]
	float p, i, d;
	if(flag == 1) {
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d158      	bne.n	8004160 <Run_YawSpeed+0x728>
		p = _speed * PID_KKP * (float)error;
 80040ae:	68b8      	ldr	r0, [r7, #8]
 80040b0:	f7fc fa4a 	bl	8000548 <__aeabi_f2d>
 80040b4:	a34e      	add	r3, pc, #312	; (adr r3, 80041f0 <Run_YawSpeed+0x7b8>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f7fc fa9d 	bl	80005f8 <__aeabi_dmul>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	461d      	mov	r5, r3
 80040c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d2:	ee17 0a90 	vmov	r0, s15
 80040d6:	f7fc fa37 	bl	8000548 <__aeabi_f2d>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4620      	mov	r0, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	f7fc fa89 	bl	80005f8 <__aeabi_dmul>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	f7fc fd7b 	bl	8000be8 <__aeabi_d2f>
 80040f2:	4603      	mov	r3, r0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
		i = 0;
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
		d = _speed * PID_KKD * (float)div_error / period;
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f7fc fa23 	bl	8000548 <__aeabi_f2d>
 8004102:	a33d      	add	r3, pc, #244	; (adr r3, 80041f8 <Run_YawSpeed+0x7c0>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc fa76 	bl	80005f8 <__aeabi_dmul>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004120:	ee17 0a90 	vmov	r0, s15
 8004124:	f7fc fa10 	bl	8000548 <__aeabi_f2d>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4620      	mov	r0, r4
 800412e:	4629      	mov	r1, r5
 8004130:	f7fc fa62 	bl	80005f8 <__aeabi_dmul>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7fc fa03 	bl	8000548 <__aeabi_f2d>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc fb7f 	bl	800084c <__aeabi_ddiv>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f7fc fd47 	bl	8000be8 <__aeabi_d2f>
 800415a:	4603      	mov	r3, r0
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	e02e      	b.n	80041be <Run_YawSpeed+0x786>
	}
	else {
		p = kp * (float)error;
 8004160:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800416c:	4b26      	ldr	r3, [pc, #152]	; (8004208 <Run_YawSpeed+0x7d0>)
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i = ki * (float)sum_error * period;
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <Run_YawSpeed+0x7cc>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <Run_YawSpeed+0x7d4>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004190:	ed97 7a03 	vldr	s14, [r7, #12]
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		d = kd * (float)div_error / period;
 800419c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <Run_YawSpeed+0x7d8>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80041b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	float mv = p + i + d;
 80041be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80041c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80041c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80041ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d2:	edc7 7a05 	vstr	s15, [r7, #20]
	last_error = error;
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <Run_YawSpeed+0x7c8>)
 80041d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041da:	8013      	strh	r3, [r2, #0]
	return mv;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	ee07 3a90 	vmov	s15, r3
}
 80041e2:	eeb0 0a67 	vmov.f32	s0, s15
 80041e6:	3730      	adds	r7, #48	; 0x30
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdb0      	pop	{r4, r5, r7, pc}
 80041ec:	f3af 8000 	nop.w
 80041f0:	e83e425b 	.word	0xe83e425b
 80041f4:	3fbaacd9 	.word	0x3fbaacd9
 80041f8:	bc6a7efa 	.word	0xbc6a7efa
 80041fc:	3f989374 	.word	0x3f989374
 8004200:	20000b36 	.word	0x20000b36
 8004204:	20000b34 	.word	0x20000b34
 8004208:	20000b28 	.word	0x20000b28
 800420c:	20000b2c 	.word	0x20000b2c
 8004210:	20000b30 	.word	0x20000b30

08004214 <Run_LineTracing>:

void Run_LineTracing(float speed, float period, uint8_t flag) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	ed87 0a03 	vstr	s0, [r7, #12]
 800421e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
	float yaw_speed = Run_YawSpeed(period, speed, flag);
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	4618      	mov	r0, r3
 800422a:	edd7 0a03 	vldr	s1, [r7, #12]
 800422e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004232:	f7ff fc01 	bl	8003a38 <Run_YawSpeed>
 8004236:	ed87 0a05 	vstr	s0, [r7, #20]
	Motor_SetPoint(&MOTOR_R, speed-yaw_speed);
 800423a:	ed97 7a03 	vldr	s14, [r7, #12]
 800423e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004246:	eeb0 0a67 	vmov.f32	s0, s15
 800424a:	4809      	ldr	r0, [pc, #36]	; (8004270 <Run_LineTracing+0x5c>)
 800424c:	f7fe f8c0 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed+yaw_speed);
 8004250:	ed97 7a03 	vldr	s14, [r7, #12]
 8004254:	edd7 7a05 	vldr	s15, [r7, #20]
 8004258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425c:	eeb0 0a67 	vmov.f32	s0, s15
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <Run_LineTracing+0x60>)
 8004262:	f7fe f8b5 	bl	80023d0 <Motor_SetPoint>
}
 8004266:	bf00      	nop
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000a90 	.word	0x20000a90
 8004274:	20000ad8 	.word	0x20000ad8

08004278 <Run_SetMotorSpeed>:

void Run_SetMotorSpeed(float speed_l, float speed_r) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004282:	edc7 0a00 	vstr	s1, [r7]
	Motor_SetPoint(&MOTOR_R, speed_r);
 8004286:	ed97 0a00 	vldr	s0, [r7]
 800428a:	4806      	ldr	r0, [pc, #24]	; (80042a4 <Run_SetMotorSpeed+0x2c>)
 800428c:	f7fe f8a0 	bl	80023d0 <Motor_SetPoint>
	Motor_SetPoint(&MOTOR_L, speed_l);
 8004290:	ed97 0a01 	vldr	s0, [r7, #4]
 8004294:	4804      	ldr	r0, [pc, #16]	; (80042a8 <Run_SetMotorSpeed+0x30>)
 8004296:	f7fe f89b 	bl	80023d0 <Motor_SetPoint>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000a90 	.word	0x20000a90
 80042a8:	20000ad8 	.word	0x20000ad8

080042ac <SEN_Init>:
uint16_t adc_filter_mem[SENSOR_NUM][ADC_FILTER_LEN];;
uint8_t adc_filter_pt = 0;

uint8_t sensor_flag = 0;

void SEN_Init(ADC_HandleTypeDef* hadc) {
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	sen_hadc = hadc;
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <SEN_Init+0x3c>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6013      	str	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++)  threshold_sensor[i] = ADC_MAX/2;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e008      	b.n	80042d2 <SEN_Init+0x26>
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <SEN_Init+0x40>)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80042c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b0d      	cmp	r3, #13
 80042d6:	ddf3      	ble.n	80042c0 <SEN_Init+0x14>
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000b38 	.word	0x20000b38
 80042ec:	20000b74 	.word	0x20000b74

080042f0 <SEN_Filter>:

void SEN_Filter(uint16_t* data) {
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b08d      	sub	sp, #52	; 0x34
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	uint16_t temp[SENSOR_NUM];
	for(int i=0; i<SENSOR_NUM; i++) {
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fc:	e05a      	b.n	80043b4 <SEN_Filter+0xc4>
		adc_filter_mem[i][adc_filter_pt] = data[i];
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	4413      	add	r3, r2
 8004306:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <SEN_Filter+0xd4>)
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	4614      	mov	r4, r2
 800430c:	8818      	ldrh	r0, [r3, #0]
 800430e:	492e      	ldr	r1, [pc, #184]	; (80043c8 <SEN_Filter+0xd8>)
 8004310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4423      	add	r3, r4
 800431c:	4602      	mov	r2, r0
 800431e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if(adc_filter_pt<ADC_FILTER_LEN-1) adc_filter_pt++; else adc_filter_pt=0;
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <SEN_Filter+0xd4>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d806      	bhi.n	8004338 <SEN_Filter+0x48>
 800432a:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <SEN_Filter+0xd4>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <SEN_Filter+0xd4>)
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e002      	b.n	800433e <SEN_Filter+0x4e>
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <SEN_Filter+0xd4>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
		memset((uint8_t*)temp, 0, SENSOR_NUM*2);
 800433e:	f107 030c 	add.w	r3, r7, #12
 8004342:	221c      	movs	r2, #28
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f009 fe98 	bl	800e07c <memset>
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 800434c:	2300      	movs	r3, #0
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004350:	e01f      	b.n	8004392 <SEN_Filter+0xa2>
			temp[i] += adc_filter_mem[i][j]/ADC_FILTER_LEN;
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	3330      	adds	r3, #48	; 0x30
 8004358:	443b      	add	r3, r7
 800435a:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800435e:	481a      	ldr	r0, [pc, #104]	; (80043c8 <SEN_Filter+0xd8>)
 8004360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436c:	4413      	add	r3, r2
 800436e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <SEN_Filter+0xdc>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	b29b      	uxth	r3, r3
 800437c:	440b      	add	r3, r1
 800437e:	b29a      	uxth	r2, r3
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	3330      	adds	r3, #48	; 0x30
 8004386:	443b      	add	r3, r7
 8004388:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(int j=0; j<ADC_FILTER_LEN; j++) {
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	3301      	adds	r3, #1
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	2b09      	cmp	r3, #9
 8004396:	dddc      	ble.n	8004352 <SEN_Filter+0x62>
		}
		data[i] = temp[i];
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	441a      	add	r2, r3
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	3330      	adds	r3, #48	; 0x30
 80043a6:	443b      	add	r3, r7
 80043a8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80043ac:	8013      	strh	r3, [r2, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	3301      	adds	r3, #1
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b0d      	cmp	r3, #13
 80043b8:	dda1      	ble.n	80042fe <SEN_Filter+0xe>
	}
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3734      	adds	r7, #52	; 0x34
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	20000cbc 	.word	0x20000cbc
 80043c8:	20000ba4 	.word	0x20000ba4
 80043cc:	cccccccd 	.word	0xcccccccd

080043d0 <SEN_StartReadSensor>:

void SEN_StartReadSensor() {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(sen_hadc, adc_sensor, SENSOR_NUM);
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <SEN_StartReadSensor+0x18>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	220e      	movs	r2, #14
 80043da:	4904      	ldr	r1, [pc, #16]	; (80043ec <SEN_StartReadSensor+0x1c>)
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 fed5 	bl	800918c <HAL_ADC_Start_DMA>
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000b38 	.word	0x20000b38
 80043ec:	20000b3c 	.word	0x20000b3c

080043f0 <SEN_CallbackRoutine>:

void SEN_CallbackRoutine(ADC_HandleTypeDef* hadc) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance != sen_hadc->Instance) return;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b5b      	ldr	r3, [pc, #364]	; (800456c <SEN_CallbackRoutine+0x17c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	f040 80ad 	bne.w	8004562 <SEN_CallbackRoutine+0x172>
	SEN_Filter(adc_sensor);
 8004408:	4859      	ldr	r0, [pc, #356]	; (8004570 <SEN_CallbackRoutine+0x180>)
 800440a:	f7ff ff71 	bl	80042f0 <SEN_Filter>
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e017      	b.n	8004444 <SEN_CallbackRoutine+0x54>
		adc_sensor_arranged[SENSOR_NUM-i-1] = adc_sensor[i*2];
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	005a      	lsls	r2, r3, #1
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f1c3 030d 	rsb	r3, r3, #13
 800441e:	4954      	ldr	r1, [pc, #336]	; (8004570 <SEN_CallbackRoutine+0x180>)
 8004420:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8004424:	4a53      	ldr	r2, [pc, #332]	; (8004574 <SEN_CallbackRoutine+0x184>)
 8004426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_sensor_arranged[i] = adc_sensor[i*2+1];
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	3301      	adds	r3, #1
 8004430:	4a4f      	ldr	r2, [pc, #316]	; (8004570 <SEN_CallbackRoutine+0x180>)
 8004432:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004436:	4a4f      	ldr	r2, [pc, #316]	; (8004574 <SEN_CallbackRoutine+0x184>)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<SENSOR_NUM/2; i++) {
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	3301      	adds	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b06      	cmp	r3, #6
 8004448:	dde4      	ble.n	8004414 <SEN_CallbackRoutine+0x24>
	}
	sensor_binary = 0;
 800444a:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <SEN_CallbackRoutine+0x188>)
 800444c:	2200      	movs	r2, #0
 800444e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e06c      	b.n	8004530 <SEN_CallbackRoutine+0x140>
		uint8_t bit = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
		if(sensor_invert == 0) {
 800445a:	4b48      	ldr	r3, [pc, #288]	; (800457c <SEN_CallbackRoutine+0x18c>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d12a      	bne.n	80044b8 <SEN_CallbackRoutine+0xc8>
			if(adc_sensor_arranged[i] > threshold_sensor[i]) {
 8004462:	4a44      	ldr	r2, [pc, #272]	; (8004574 <SEN_CallbackRoutine+0x184>)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800446a:	4945      	ldr	r1, [pc, #276]	; (8004580 <SEN_CallbackRoutine+0x190>)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004472:	429a      	cmp	r2, r3
 8004474:	d91a      	bls.n	80044ac <SEN_CallbackRoutine+0xbc>
				bit = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (adc_sensor_arranged[i]-threshold_sensor[i])/SEN_BAR_INC + 1;
 800447a:	4a3e      	ldr	r2, [pc, #248]	; (8004574 <SEN_CallbackRoutine+0x184>)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004482:	4619      	mov	r1, r3
 8004484:	4a3e      	ldr	r2, [pc, #248]	; (8004580 <SEN_CallbackRoutine+0x190>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448c:	1acb      	subs	r3, r1, r3
 800448e:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <SEN_CallbackRoutine+0x194>)
 8004490:	fb82 1203 	smull	r1, r2, r2, r3
 8004494:	1092      	asrs	r2, r2, #2
 8004496:	17db      	asrs	r3, r3, #31
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	3301      	adds	r3, #1
 800449e:	b2d9      	uxtb	r1, r3
 80044a0:	4a39      	ldr	r2, [pc, #228]	; (8004588 <SEN_CallbackRoutine+0x198>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	460a      	mov	r2, r1
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e02f      	b.n	800450c <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 80044ac:	4a36      	ldr	r2, [pc, #216]	; (8004588 <SEN_CallbackRoutine+0x198>)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e029      	b.n	800450c <SEN_CallbackRoutine+0x11c>
		}
		else {
			if(adc_sensor_arranged[i] < threshold_sensor[i]) {
 80044b8:	4a2e      	ldr	r2, [pc, #184]	; (8004574 <SEN_CallbackRoutine+0x184>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80044c0:	492f      	ldr	r1, [pc, #188]	; (8004580 <SEN_CallbackRoutine+0x190>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d21a      	bcs.n	8004502 <SEN_CallbackRoutine+0x112>
				bit = 1;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
				sensor_disp_status[i] = (threshold_sensor[i]-adc_sensor_arranged[i])/SEN_BAR_INC + 1;
 80044d0:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <SEN_CallbackRoutine+0x190>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d8:	4619      	mov	r1, r3
 80044da:	4a26      	ldr	r2, [pc, #152]	; (8004574 <SEN_CallbackRoutine+0x184>)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e2:	1acb      	subs	r3, r1, r3
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <SEN_CallbackRoutine+0x194>)
 80044e6:	fb82 1203 	smull	r1, r2, r2, r3
 80044ea:	1092      	asrs	r2, r2, #2
 80044ec:	17db      	asrs	r3, r3, #31
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	b2d9      	uxtb	r1, r3
 80044f6:	4a24      	ldr	r2, [pc, #144]	; (8004588 <SEN_CallbackRoutine+0x198>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	460a      	mov	r2, r1
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e004      	b.n	800450c <SEN_CallbackRoutine+0x11c>
			}
			else sensor_disp_status[i] = 0;
 8004502:	4a21      	ldr	r2, [pc, #132]	; (8004588 <SEN_CallbackRoutine+0x198>)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
		}

		sensor_binary |= bit << (SENSOR_NUM-i-1);
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f1c3 030d 	rsb	r3, r3, #13
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	b21a      	sxth	r2, r3
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <SEN_CallbackRoutine+0x188>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b21b      	sxth	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b21b      	sxth	r3, r3
 8004524:	b29a      	uxth	r2, r3
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <SEN_CallbackRoutine+0x188>)
 8004528:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3301      	adds	r3, #1
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b0d      	cmp	r3, #13
 8004534:	dd8f      	ble.n	8004456 <SEN_CallbackRoutine+0x66>
	}

	if(autocalib_status == 1) {
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <SEN_CallbackRoutine+0x19c>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d102      	bne.n	8004544 <SEN_CallbackRoutine+0x154>
		SEN_AutoCalibrationRoutine(0);
 800453e:	2000      	movs	r0, #0
 8004540:	f000 f870 	bl	8004624 <SEN_AutoCalibrationRoutine>
	}

	sensor_flag |= 1;
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <SEN_CallbackRoutine+0x1a0>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <SEN_CallbackRoutine+0x1a0>)
 8004550:	701a      	strb	r2, [r3, #0]
	sensor_flag &=~2;
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <SEN_CallbackRoutine+0x1a0>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f023 0302 	bic.w	r3, r3, #2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <SEN_CallbackRoutine+0x1a0>)
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e000      	b.n	8004564 <SEN_CallbackRoutine+0x174>
	if(hadc->Instance != sen_hadc->Instance) return;
 8004562:	bf00      	nop
}
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000b38 	.word	0x20000b38
 8004570:	20000b3c 	.word	0x20000b3c
 8004574:	20000b58 	.word	0x20000b58
 8004578:	20000b9e 	.word	0x20000b9e
 800457c:	20000ba0 	.word	0x20000ba0
 8004580:	20000b74 	.word	0x20000b74
 8004584:	66666667 	.word	0x66666667
 8004588:	20000b90 	.word	0x20000b90
 800458c:	20000cc8 	.word	0x20000cc8
 8004590:	20000cbd 	.word	0x20000cbd

08004594 <SEN_StartAutoCalibration>:

uint16_t* calib_upper_adc;
uint16_t* calib_lower_adc;
uint8_t autocalib_status = 0;

void SEN_StartAutoCalibration() {
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
	if(autocalib_status == 1) return;
 800459a:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <SEN_StartAutoCalibration+0x84>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d035      	beq.n	800460e <SEN_StartAutoCalibration+0x7a>
	calib_upper_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80045a2:	201c      	movs	r0, #28
 80045a4:	f009 fd4c 	bl	800e040 <malloc>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <SEN_StartAutoCalibration+0x88>)
 80045ae:	601a      	str	r2, [r3, #0]
	calib_lower_adc = (uint16_t*)malloc(sizeof(uint16_t)*SENSOR_NUM);
 80045b0:	201c      	movs	r0, #28
 80045b2:	f009 fd45 	bl	800e040 <malloc>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b19      	ldr	r3, [pc, #100]	; (8004620 <SEN_StartAutoCalibration+0x8c>)
 80045bc:	601a      	str	r2, [r3, #0]
	if(calib_upper_adc || calib_lower_adc) {
 80045be:	4b17      	ldr	r3, [pc, #92]	; (800461c <SEN_StartAutoCalibration+0x88>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <SEN_StartAutoCalibration+0x3a>
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <SEN_StartAutoCalibration+0x8c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01b      	beq.n	8004606 <SEN_StartAutoCalibration+0x72>
		for(int i=0; i<SENSOR_NUM; i++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	e011      	b.n	80045f8 <SEN_StartAutoCalibration+0x64>
			calib_upper_adc[i] = 0x000;
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <SEN_StartAutoCalibration+0x88>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	801a      	strh	r2, [r3, #0]
			calib_lower_adc[i] = ADC_MAX;
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <SEN_StartAutoCalibration+0x8c>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80045f0:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<SENSOR_NUM; i++) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3301      	adds	r3, #1
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b0d      	cmp	r3, #13
 80045fc:	ddea      	ble.n	80045d4 <SEN_StartAutoCalibration+0x40>
		}
		autocalib_status = 1;
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <SEN_StartAutoCalibration+0x84>)
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e004      	b.n	8004610 <SEN_StartAutoCalibration+0x7c>
	}
	else autocalib_status = 0;
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <SEN_StartAutoCalibration+0x84>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e000      	b.n	8004610 <SEN_StartAutoCalibration+0x7c>
	if(autocalib_status == 1) return;
 800460e:	bf00      	nop
}
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000cc8 	.word	0x20000cc8
 800461c:	20000cc0 	.word	0x20000cc0
 8004620:	20000cc4 	.word	0x20000cc4

08004624 <SEN_AutoCalibrationRoutine>:

void SEN_AutoCalibrationRoutine(uint8_t flag) {
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<SENSOR_NUM; i++) {
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e02f      	b.n	8004694 <SEN_AutoCalibrationRoutine+0x70>
		if(calib_upper_adc[i] < adc_sensor_arranged[i])
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <SEN_AutoCalibrationRoutine+0x84>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	491a      	ldr	r1, [pc, #104]	; (80046ac <SEN_AutoCalibrationRoutine+0x88>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004648:	429a      	cmp	r2, r3
 800464a:	d20a      	bcs.n	8004662 <SEN_AutoCalibrationRoutine+0x3e>
			calib_upper_adc[i] = adc_sensor_arranged[i];
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <SEN_AutoCalibrationRoutine+0x84>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	4915      	ldr	r1, [pc, #84]	; (80046ac <SEN_AutoCalibrationRoutine+0x88>)
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	e015      	b.n	800468e <SEN_AutoCalibrationRoutine+0x6a>
		else if(calib_lower_adc[i] > adc_sensor_arranged[i])
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <SEN_AutoCalibrationRoutine+0x8c>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	490f      	ldr	r1, [pc, #60]	; (80046ac <SEN_AutoCalibrationRoutine+0x88>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004676:	429a      	cmp	r2, r3
 8004678:	d909      	bls.n	800468e <SEN_AutoCalibrationRoutine+0x6a>
			calib_lower_adc[i] = adc_sensor_arranged[i];
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <SEN_AutoCalibrationRoutine+0x8c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	4909      	ldr	r1, [pc, #36]	; (80046ac <SEN_AutoCalibrationRoutine+0x88>)
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800468c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b0d      	cmp	r3, #13
 8004698:	ddcc      	ble.n	8004634 <SEN_AutoCalibrationRoutine+0x10>
	}
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	20000cc0 	.word	0x20000cc0
 80046ac:	20000b58 	.word	0x20000b58
 80046b0:	20000cc4 	.word	0x20000cc4
 80046b4:	00000000 	.word	0x00000000

080046b8 <SEN_EndAutoCalibration>:

void SEN_EndAutoCalibration(uint8_t flag) {
 80046b8:	b5b0      	push	{r4, r5, r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
	if(autocalib_status == 0) return;
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <SEN_EndAutoCalibration+0xe8>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d060      	beq.n	800478c <SEN_EndAutoCalibration+0xd4>
	if(flag & 1) {
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d04d      	beq.n	8004770 <SEN_EndAutoCalibration+0xb8>
		for(int i=0; i<SENSOR_NUM; i++) {
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e047      	b.n	800476a <SEN_EndAutoCalibration+0xb2>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 80046da:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <SEN_EndAutoCalibration+0xec>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <SEN_EndAutoCalibration+0xf0>)
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	440b      	add	r3, r1
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d335      	bcc.n	8004762 <SEN_EndAutoCalibration+0xaa>
			threshold_sensor[i] = TH_CALIB_FACTOR * (calib_upper_adc[i]-calib_lower_adc[i]) + calib_lower_adc[i];
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <SEN_EndAutoCalibration+0xec>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <SEN_EndAutoCalibration+0xf0>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	1acb      	subs	r3, r1, r3
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb ff06 	bl	8000524 <__aeabi_i2d>
 8004718:	a31f      	add	r3, pc, #124	; (adr r3, 8004798 <SEN_EndAutoCalibration+0xe0>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb ff6b 	bl	80005f8 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4614      	mov	r4, r2
 8004728:	461d      	mov	r5, r3
 800472a:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <SEN_EndAutoCalibration+0xf0>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb fef4 	bl	8000524 <__aeabi_i2d>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb fda2 	bl	800028c <__adddf3>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f7fc fa2a 	bl	8000ba8 <__aeabi_d2uiz>
 8004754:	4603      	mov	r3, r0
 8004756:	b299      	uxth	r1, r3
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <SEN_EndAutoCalibration+0xf4>)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004760:	e000      	b.n	8004764 <SEN_EndAutoCalibration+0xac>
			if(calib_upper_adc[i] < calib_lower_adc[i]) continue;
 8004762:	bf00      	nop
		for(int i=0; i<SENSOR_NUM; i++) {
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b0d      	cmp	r3, #13
 800476e:	ddb4      	ble.n	80046da <SEN_EndAutoCalibration+0x22>
		}
	}
	free(calib_upper_adc);
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <SEN_EndAutoCalibration+0xec>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f009 fc6b 	bl	800e050 <free>
	free(calib_lower_adc);
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <SEN_EndAutoCalibration+0xf0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f009 fc66 	bl	800e050 <free>
	autocalib_status = 0;
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <SEN_EndAutoCalibration+0xe8>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	e000      	b.n	800478e <SEN_EndAutoCalibration+0xd6>
	if(autocalib_status == 0) return;
 800478c:	bf00      	nop
}
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bdb0      	pop	{r4, r5, r7, pc}
 8004794:	f3af 8000 	nop.w
 8004798:	9999999a 	.word	0x9999999a
 800479c:	3fd99999 	.word	0x3fd99999
 80047a0:	20000cc8 	.word	0x20000cc8
 80047a4:	20000cc0 	.word	0x20000cc0
 80047a8:	20000cc4 	.word	0x20000cc4
 80047ac:	20000b74 	.word	0x20000b74

080047b0 <SEN_BlackLine>:

void SEN_BlackLine() {
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	sensor_invert = 0;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <SEN_BlackLine+0x14>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000ba0 	.word	0x20000ba0

080047c8 <SEN_WhiteLine>:

void SEN_WhiteLine() {
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
	sensor_invert = 1;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <SEN_WhiteLine+0x14>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000ba0 	.word	0x20000ba0

080047e0 <SEN_Invert>:

void SEN_Invert() {
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
	sensor_invert = !sensor_invert;
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <SEN_Invert+0x24>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <SEN_Invert+0x24>)
 80047f6:	701a      	strb	r2, [r3, #0]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000ba0 	.word	0x20000ba0

08004808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_MspInit+0x4c>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <HAL_MspInit+0x4c>)
 8004818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800481c:	6453      	str	r3, [r2, #68]	; 0x44
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <HAL_MspInit+0x4c>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_MspInit+0x4c>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_MspInit+0x4c>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6413      	str	r3, [r2, #64]	; 0x40
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_MspInit+0x4c>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800485c:	e7fe      	b.n	800485c <NMI_Handler+0x4>

0800485e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <HardFault_Handler+0x4>

08004864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <MemManage_Handler+0x4>

0800486a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800486e:	e7fe      	b.n	800486e <BusFault_Handler+0x4>

08004870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004874:	e7fe      	b.n	8004874 <UsageFault_Handler+0x4>

08004876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a4:	f004 fada 	bl	8008e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a8:	bf00      	nop
 80048aa:	bd80      	pop	{r7, pc}

080048ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <ADC_IRQHandler+0x10>)
 80048b2:	f004 fb5a 	bl	8008f6a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000518 	.word	0x20000518

080048c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <TIM6_DAC_IRQHandler+0x10>)
 80048c6:	f007 ff21 	bl	800c70c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000ea0 	.word	0x20000ea0

080048d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <DMA2_Stream0_IRQHandler+0x10>)
 80048da:	f005 fa61 	bl	8009da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000560 	.word	0x20000560

080048e8 <GetAction>:

uint8_t storage_flag = 0;

Plan_typedef plan;

Action_typedef GetAction(uint8_t index) {
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <GetAction+0x78>)
 80048f8:	fba2 1203 	umull	r1, r2, r2, r3
 80048fc:	0952      	lsrs	r2, r2, #5
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	fb01 f202 	mul.w	r2, r1, r2
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	b29b      	uxth	r3, r3
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	b29a      	uxth	r2, r3
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <GetAction+0x7c>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	4413      	add	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	3340      	adds	r3, #64	; 0x40
 800491a:	83fb      	strh	r3, [r7, #30]
	while(!EEP_ReadyToWrite());
 800491c:	bf00      	nop
 800491e:	f7fd fa53 	bl	8001dc8 <EEP_ReadyToWrite>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0fa      	beq.n	800491e <GetAction+0x36>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8004928:	f107 010c 	add.w	r1, r7, #12
 800492c:	8bfb      	ldrh	r3, [r7, #30]
 800492e:	2210      	movs	r2, #16
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd fa23 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)&plan_active, buff, sizeof(Action_typedef));
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <GetAction+0x80>)
 8004938:	461c      	mov	r4, r3
 800493a:	f107 030c 	add.w	r3, r7, #12
 800493e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return plan_active;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a07      	ldr	r2, [pc, #28]	; (8004968 <GetAction+0x80>)
 800494a:	461c      	mov	r4, r3
 800494c:	4613      	mov	r3, r2
 800494e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004950:	6020      	str	r0, [r4, #0]
 8004952:	6061      	str	r1, [r4, #4]
 8004954:	60a2      	str	r2, [r4, #8]
}
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd90      	pop	{r4, r7, pc}
 800495e:	bf00      	nop
 8004960:	51eb851f 	.word	0x51eb851f
 8004964:	20000cca 	.word	0x20000cca
 8004968:	20000d44 	.word	0x20000d44

0800496c <SetAction>:

void SetAction(Action_typedef act, uint8_t index) {
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b08b      	sub	sp, #44	; 0x2c
 8004970:	af00      	add	r7, sp, #0
 8004972:	1d3c      	adds	r4, r7, #4
 8004974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004978:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <SetAction+0x74>)
 800497e:	fba2 1203 	umull	r1, r2, r2, r3
 8004982:	0952      	lsrs	r2, r2, #5
 8004984:	2164      	movs	r1, #100	; 0x64
 8004986:	fb01 f202 	mul.w	r2, r1, r2
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	plan_active = act;
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <SetAction+0x78>)
 8004990:	461c      	mov	r4, r3
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <SetAction+0x7c>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3340      	adds	r3, #64	; 0x40
 80049ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&plan_active, sizeof(Action_typedef));
 80049b0:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <SetAction+0x78>)
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80049b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 80049bc:	bf00      	nop
 80049be:	f7fd fa03 	bl	8001dc8 <EEP_ReadyToWrite>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0fa      	beq.n	80049be <SetAction+0x52>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 80049c8:	f107 0114 	add.w	r1, r7, #20
 80049cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049ce:	2210      	movs	r2, #16
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fd f98b 	bl	8001cec <EEP_WriteMem>
}
 80049d6:	bf00      	nop
 80049d8:	372c      	adds	r7, #44	; 0x2c
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd90      	pop	{r4, r7, pc}
 80049de:	bf00      	nop
 80049e0:	51eb851f 	.word	0x51eb851f
 80049e4:	20000d44 	.word	0x20000d44
 80049e8:	20000cca 	.word	0x20000cca

080049ec <Storage_ResetPlan>:

void Storage_ResetPlan() {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b0b0      	sub	sp, #192	; 0xc0
 80049f0:	af00      	add	r7, sp, #0
	Plan_typedef temp;
	temp.id = num_plan | 0x80;
 80049f2:	4b33      	ldr	r3, [pc, #204]	; (8004ac0 <Storage_ResetPlan+0xd4>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	temp.speed = 40;
 8004a00:	2328      	movs	r3, #40	; 0x28
 8004a02:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	temp.num_action = 100;
 8004a06:	2364      	movs	r3, #100	; 0x64
 8004a08:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	temp.turn_speed = 10;
 8004a0c:	230a      	movs	r3, #10
 8004a0e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	memset(temp.checkpoint, 0, NUM_CHECKPOINT);
 8004a12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a16:	3302      	adds	r3, #2
 8004a18:	2214      	movs	r2, #20
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f009 fb2d 	bl	800e07c <memset>
	temp.kpid[0] = 4.71428;
 8004a22:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <Storage_ResetPlan+0xd8>)
 8004a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	temp.kpid[1] = 0;
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	temp.kpid[2] = 0;
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	temp.status_pid = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
//	temp.acc = 1;

	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)&temp, sizeof(Plan_typedef));
 8004a3e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004a42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a46:	2228      	movs	r2, #40	; 0x28
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f009 fb09 	bl	800e060 <memcpy>

	uint16_t page_plan = num_plan_addr/PAGE_SIZE;
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <Storage_ResetPlan+0xdc>)
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
//	uint16_t page_offset = DEF_ACTION_PER_PLAN/ACTION_PER_PAGE+1;

	while(!EEP_ReadyToWrite());
 8004a58:	bf00      	nop
 8004a5a:	f7fd f9b5 	bl	8001dc8 <EEP_ReadyToWrite>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0fa      	beq.n	8004a5a <Storage_ResetPlan+0x6e>
	EEP_WritePage(page_plan, buff);
 8004a64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004a68:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd f918 	bl	8001ca4 <EEP_WritePage>

	Action_typedef action_temp;
	uint8_t action_buff[PAGE_SIZE];

	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a7a:	e018      	b.n	8004aae <Storage_ResetPlan+0xc2>

		action_temp = plan_default;
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <Storage_ResetPlan+0xe0>)
 8004a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a84:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		memcpy(action_buff, (uint8_t*)&action_temp, sizeof(Action_typedef));
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		SetAction(action_temp, i);
 8004a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aa0:	f7ff ff64 	bl	800496c <SetAction>
	for(int i=0; i<DEF_ACTION_PER_PLAN; i++) {
 8004aa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ab2:	2b63      	cmp	r3, #99	; 0x63
 8004ab4:	dde2      	ble.n	8004a7c <Storage_ResetPlan+0x90>
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	37c0      	adds	r7, #192	; 0xc0
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000cc9 	.word	0x20000cc9
 8004ac4:	4096db62 	.word	0x4096db62
 8004ac8:	20000cca 	.word	0x20000cca
 8004acc:	080112c4 	.word	0x080112c4

08004ad0 <Storage_ResetMemory>:

void Storage_ResetMemory() {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b094      	sub	sp, #80	; 0x50
 8004ad4:	af00      	add	r7, sp, #0
	uint8_t init_buff[PAGE_SIZE];
	memset(init_buff, 0, PAGE_SIZE);
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	2240      	movs	r2, #64	; 0x40
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f009 facd 	bl	800e07c <memset>
	init_buff[INIT_MEM_ID_ADDR] = INIT_MEM_ID;
 8004ae2:	23ab      	movs	r3, #171	; 0xab
 8004ae4:	717b      	strb	r3, [r7, #5]
	init_buff[INIT_MEM_NUM_PLAN_ADDR] = INIT_MEM_NUM_PLAN;
 8004ae6:	230f      	movs	r3, #15
 8004ae8:	71fb      	strb	r3, [r7, #7]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	723b      	strb	r3, [r7, #8]
	uint16_t* temp = (uint16_t*)&init_buff[PTR_MEMORY_ADDR_START];
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	3310      	adds	r3, #16
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8004af4:	2300      	movs	r3, #0
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e012      	b.n	8004b20 <Storage_ResetMemory+0x50>
		temp[i] = (((i*ACTION_SIZE*(DEF_ACTION_PER_PLAN+4))/PAGE_SIZE))*PAGE_SIZE+DATA_ADDR_START;
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	0052      	lsls	r2, r2, #1
 8004b02:	441a      	add	r2, r3
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b12:	440b      	add	r3, r1
 8004b14:	3240      	adds	r2, #64	; 0x40
 8004b16:	b292      	uxth	r2, r2
 8004b18:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<INIT_MEM_NUM_PLAN; i++) {
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	2b0e      	cmp	r3, #14
 8004b24:	dde9      	ble.n	8004afa <Storage_ResetMemory+0x2a>
	}
	temp = (uint16_t*)&init_buff[ADC_TR_ADDR_START];
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	3320      	adds	r3, #32
 8004b2a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i<SENSOR_NUM; i++) {
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b30:	e009      	b.n	8004b46 <Storage_ResetMemory+0x76>
		temp[i] = ADC_MAX/2;
 8004b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	4413      	add	r3, r2
 8004b3a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b3e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<SENSOR_NUM; i++) {
 8004b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b42:	3301      	adds	r3, #1
 8004b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b48:	2b0d      	cmp	r3, #13
 8004b4a:	ddf2      	ble.n	8004b32 <Storage_ResetMemory+0x62>
	}
	while(!EEP_ReadyToWrite());
 8004b4c:	bf00      	nop
 8004b4e:	f7fd f93b 	bl	8001dc8 <EEP_ReadyToWrite>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0fa      	beq.n	8004b4e <Storage_ResetMemory+0x7e>
	EEP_WritePage(0x0000, init_buff);
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fd f8a1 	bl	8001ca4 <EEP_WritePage>
}
 8004b62:	bf00      	nop
 8004b64:	3750      	adds	r7, #80	; 0x50
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <Storage_Init>:

uint8_t Storage_Init() {
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004b70:	bf00      	nop
 8004b72:	f7fd f929 	bl	8001dc8 <EEP_ReadyToWrite>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0fa      	beq.n	8004b72 <Storage_Init+0x6>
	EEP_ReadPage(INIT_ADDR_START/PAGE_SIZE, init_buff);
 8004b7c:	4913      	ldr	r1, [pc, #76]	; (8004bcc <Storage_Init+0x60>)
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fd f8d8 	bl	8001d34 <EEP_ReadPage>
	if(init_buff[INIT_MEM_ID_ADDR] != INIT_MEM_ID) return 0;
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <Storage_Init+0x60>)
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2bab      	cmp	r3, #171	; 0xab
 8004b8a:	d001      	beq.n	8004b90 <Storage_Init+0x24>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e01b      	b.n	8004bc8 <Storage_Init+0x5c>
	num_plan = init_buff[INIT_MEM_LAST_PLAN_ADDR];
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <Storage_Init+0x60>)
 8004b92:	791a      	ldrb	r2, [r3, #4]
 8004b94:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <Storage_Init+0x64>)
 8004b96:	701a      	strb	r2, [r3, #0]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <Storage_Init+0x64>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <Storage_Init+0x60>)
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881a      	ldrh	r2, [r3, #0]
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <Storage_Init+0x68>)
 8004ba8:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004baa:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <Storage_Init+0x6c>)
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <Storage_Init+0x60>)
 8004bae:	4615      	mov	r5, r2
 8004bb0:	f103 0420 	add.w	r4, r3, #32
 8004bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb6:	6028      	str	r0, [r5, #0]
 8004bb8:	6069      	str	r1, [r5, #4]
 8004bba:	60aa      	str	r2, [r5, #8]
 8004bbc:	60eb      	str	r3, [r5, #12]
 8004bbe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004bc0:	6128      	str	r0, [r5, #16]
 8004bc2:	6169      	str	r1, [r5, #20]
 8004bc4:	61aa      	str	r2, [r5, #24]
	return 1;
 8004bc6:	2301      	movs	r3, #1
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bdb0      	pop	{r4, r5, r7, pc}
 8004bcc:	20000cd0 	.word	0x20000cd0
 8004bd0:	20000cc9 	.word	0x20000cc9
 8004bd4:	20000cca 	.word	0x20000cca
 8004bd8:	20000b74 	.word	0x20000b74

08004bdc <Storage_PlanInit>:

uint8_t Storage_PlanInit() {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b092      	sub	sp, #72	; 0x48
 8004be0:	af00      	add	r7, sp, #0
	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <Storage_PlanInit+0x54>)
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while(!EEP_ReadyToWrite());
 8004bee:	bf00      	nop
 8004bf0:	f7fd f8ea 	bl	8001dc8 <EEP_ReadyToWrite>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0fa      	beq.n	8004bf0 <Storage_PlanInit+0x14>
	EEP_ReadPage(plan_page, buff);
 8004bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	1d3a      	adds	r2, r7, #4
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fd f895 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2228      	movs	r2, #40	; 0x28
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4808      	ldr	r0, [pc, #32]	; (8004c34 <Storage_PlanInit+0x58>)
 8004c12:	f009 fa25 	bl	800e060 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <Storage_PlanInit+0x58>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	09db      	lsrs	r3, r3, #7
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <Storage_PlanInit+0x4a>
 8004c22:	2300      	movs	r3, #0
 8004c24:	e000      	b.n	8004c28 <Storage_PlanInit+0x4c>
	return 1;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3748      	adds	r7, #72	; 0x48
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000cca 	.word	0x20000cca
 8004c34:	20000d54 	.word	0x20000d54

08004c38 <Storage_GetADCThreshold>:

void Storage_GetADCThreshold() {
 8004c38:	b5b0      	push	{r4, r5, r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
	while(!EEP_ReadyToWrite());
 8004c3c:	bf00      	nop
 8004c3e:	f7fd f8c3 	bl	8001dc8 <EEP_ReadyToWrite>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0fa      	beq.n	8004c3e <Storage_GetADCThreshold+0x6>
	EEP_ReadMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004c48:	221c      	movs	r2, #28
 8004c4a:	490a      	ldr	r1, [pc, #40]	; (8004c74 <Storage_GetADCThreshold+0x3c>)
 8004c4c:	2020      	movs	r0, #32
 8004c4e:	f7fd f895 	bl	8001d7c <EEP_ReadMem>
	memcpy((uint8_t*)threshold_sensor, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <Storage_GetADCThreshold+0x40>)
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <Storage_GetADCThreshold+0x44>)
 8004c56:	4615      	mov	r5, r2
 8004c58:	f103 0420 	add.w	r4, r3, #32
 8004c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c5e:	6028      	str	r0, [r5, #0]
 8004c60:	6069      	str	r1, [r5, #4]
 8004c62:	60aa      	str	r2, [r5, #8]
 8004c64:	60eb      	str	r3, [r5, #12]
 8004c66:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004c68:	6128      	str	r0, [r5, #16]
 8004c6a:	6169      	str	r1, [r5, #20]
 8004c6c:	61aa      	str	r2, [r5, #24]
}
 8004c6e:	bf00      	nop
 8004c70:	bdb0      	pop	{r4, r5, r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000cf0 	.word	0x20000cf0
 8004c78:	20000b74 	.word	0x20000b74
 8004c7c:	20000cd0 	.word	0x20000cd0

08004c80 <Storage_SetADCThreshold>:

void Storage_SetADCThreshold() {
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	memcpy(&init_buff[ADC_TR_ADDR_START], (uint8_t*)threshold_sensor, SENSOR_NUM*2);
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <Storage_SetADCThreshold+0x3c>)
 8004c86:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <Storage_SetADCThreshold+0x40>)
 8004c88:	f103 0420 	add.w	r4, r3, #32
 8004c8c:	4615      	mov	r5, r2
 8004c8e:	6828      	ldr	r0, [r5, #0]
 8004c90:	6869      	ldr	r1, [r5, #4]
 8004c92:	68aa      	ldr	r2, [r5, #8]
 8004c94:	68eb      	ldr	r3, [r5, #12]
 8004c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c98:	6928      	ldr	r0, [r5, #16]
 8004c9a:	6969      	ldr	r1, [r5, #20]
 8004c9c:	69aa      	ldr	r2, [r5, #24]
 8004c9e:	c407      	stmia	r4!, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004ca0:	bf00      	nop
 8004ca2:	f7fd f891 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0fa      	beq.n	8004ca2 <Storage_SetADCThreshold+0x22>
	EEP_WriteMem(ADC_TR_ADDR_START, &init_buff[ADC_TR_ADDR_START], SENSOR_NUM*2);
 8004cac:	221c      	movs	r2, #28
 8004cae:	4905      	ldr	r1, [pc, #20]	; (8004cc4 <Storage_SetADCThreshold+0x44>)
 8004cb0:	2020      	movs	r0, #32
 8004cb2:	f7fd f81b 	bl	8001cec <EEP_WriteMem>
}
 8004cb6:	bf00      	nop
 8004cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000cd0 	.word	0x20000cd0
 8004cc0:	20000b74 	.word	0x20000b74
 8004cc4:	20000cf0 	.word	0x20000cf0

08004cc8 <Storage_GetPlan>:

uint8_t Storage_GetPlan(uint8_t n_plan) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b094      	sub	sp, #80	; 0x50
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
	num_plan = n_plan;
 8004cd2:	4a22      	ldr	r2, [pc, #136]	; (8004d5c <Storage_GetPlan+0x94>)
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	7013      	strb	r3, [r2, #0]
	init_buff[INIT_MEM_LAST_PLAN_ADDR] = num_plan;
 8004cd8:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <Storage_GetPlan+0x94>)
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <Storage_GetPlan+0x98>)
 8004cde:	711a      	strb	r2, [r3, #4]
	num_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+num_plan*2];
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <Storage_GetPlan+0x94>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <Storage_GetPlan+0x98>)
 8004cea:	4413      	add	r3, r2
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <Storage_GetPlan+0x9c>)
 8004cf0:	801a      	strh	r2, [r3, #0]
	while(!EEP_ReadyToWrite());
 8004cf2:	bf00      	nop
 8004cf4:	f7fd f868 	bl	8001dc8 <EEP_ReadyToWrite>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0fa      	beq.n	8004cf4 <Storage_GetPlan+0x2c>
	EEP_WriteMem(INIT_MEM_LAST_PLAN_ADDR, &num_plan, 1);
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4916      	ldr	r1, [pc, #88]	; (8004d5c <Storage_GetPlan+0x94>)
 8004d02:	2004      	movs	r0, #4
 8004d04:	f7fc fff2 	bl	8001cec <EEP_WriteMem>

	uint8_t buff[PAGE_SIZE];
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <Storage_GetPlan+0x9c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(!EEP_ReadyToWrite());
 8004d14:	bf00      	nop
 8004d16:	f7fd f857 	bl	8001dc8 <EEP_ReadyToWrite>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0fa      	beq.n	8004d16 <Storage_GetPlan+0x4e>
	EEP_ReadPage(plan_page, buff);
 8004d20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f107 020c 	add.w	r2, r7, #12
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fd f801 	bl	8001d34 <EEP_ReadPage>
	memcpy((uint8_t*)&plan, buff, sizeof(Plan_typedef));
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	2228      	movs	r2, #40	; 0x28
 8004d38:	4619      	mov	r1, r3
 8004d3a:	480b      	ldr	r0, [pc, #44]	; (8004d68 <Storage_GetPlan+0xa0>)
 8004d3c:	f009 f990 	bl	800e060 <memcpy>
	if(plan.id>>7 != 1) return 0;
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <Storage_GetPlan+0xa0>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <Storage_GetPlan+0x88>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <Storage_GetPlan+0x8a>
	return 1;
 8004d50:	2301      	movs	r3, #1
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3750      	adds	r7, #80	; 0x50
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000cc9 	.word	0x20000cc9
 8004d60:	20000cd0 	.word	0x20000cd0
 8004d64:	20000cca 	.word	0x20000cca
 8004d68:	20000d54 	.word	0x20000d54

08004d6c <Storage_SetPlanOther>:

void Storage_SetPlanOther(Plan_typedef* ptr_plan, uint8_t n_plan) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b094      	sub	sp, #80	; 0x50
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <Storage_SetPlanOther+0x5c>)
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t plan_page = (n_plan_addr)/PAGE_SIZE;
 8004d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t buff[PAGE_SIZE];
	memcpy(buff, (uint8_t*)ptr_plan, sizeof(Plan_typedef));
 8004d94:	f107 030c 	add.w	r3, r7, #12
 8004d98:	2228      	movs	r2, #40	; 0x28
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f009 f95f 	bl	800e060 <memcpy>
	while(!EEP_ReadyToWrite());
 8004da2:	bf00      	nop
 8004da4:	f7fd f810 	bl	8001dc8 <EEP_ReadyToWrite>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0fa      	beq.n	8004da4 <Storage_SetPlanOther+0x38>
	EEP_WritePage(plan_page, buff);
 8004dae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f107 020c 	add.w	r2, r7, #12
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fc ff72 	bl	8001ca4 <EEP_WritePage>
}
 8004dc0:	bf00      	nop
 8004dc2:	3750      	adds	r7, #80	; 0x50
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000cd0 	.word	0x20000cd0

08004dcc <Storage_SetCheckpoint>:
	uint8_t plan_page = (num_plan_addr)/PAGE_SIZE;
	while(!EEP_ReadyToWrite());
	EEP_ReadMem(plan_page+offset, plan.checkpoint, NUM_CHECKPOINT);
}

void Storage_SetCheckpoint() {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.checkpoint - (uint8_t*)&plan;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004dd6:	bf00      	nop
 8004dd8:	f7fc fff6 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0fa      	beq.n	8004dd8 <Storage_SetCheckpoint+0xc>
	EEP_WriteMem(num_plan_addr+offset, plan.checkpoint, NUM_CHECKPOINT);
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <Storage_SetCheckpoint+0x34>)
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	4413      	add	r3, r2
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2214      	movs	r2, #20
 8004df0:	4904      	ldr	r1, [pc, #16]	; (8004e04 <Storage_SetCheckpoint+0x38>)
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fc ff7a 	bl	8001cec <EEP_WriteMem>
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000cca 	.word	0x20000cca
 8004e04:	20000d56 	.word	0x20000d56

08004e08 <Storage_SetPID>:

void Storage_SetPID() {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.kpid - (uint8_t*)&plan;
 8004e0e:	2318      	movs	r3, #24
 8004e10:	73fb      	strb	r3, [r7, #15]
	uint8_t buff[3*sizeof(float)+1];
	memcpy(buff, (uint8_t*)plan.kpid, 3*sizeof(float));
 8004e12:	463b      	mov	r3, r7
 8004e14:	220c      	movs	r2, #12
 8004e16:	490e      	ldr	r1, [pc, #56]	; (8004e50 <Storage_SetPID+0x48>)
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f009 f921 	bl	800e060 <memcpy>
	buff[3*sizeof(float)] = plan.status_pid;
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <Storage_SetPID+0x4c>)
 8004e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e24:	733b      	strb	r3, [r7, #12]
	while(!EEP_ReadyToWrite());
 8004e26:	bf00      	nop
 8004e28:	f7fc ffce 	bl	8001dc8 <EEP_ReadyToWrite>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0fa      	beq.n	8004e28 <Storage_SetPID+0x20>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.kpid, 3*sizeof(float)+1);
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <Storage_SetPID+0x50>)
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	220d      	movs	r2, #13
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <Storage_SetPID+0x48>)
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fc ff52 	bl	8001cec <EEP_WriteMem>

//	offset = (uint8_t*)&plan.status_pid - (uint8_t*)&plan;
//	while(!EEP_ReadyToWrite());
//	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)plan.status_pid, 1);
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000d6c 	.word	0x20000d6c
 8004e54:	20000d54 	.word	0x20000d54
 8004e58:	20000cca 	.word	0x20000cca

08004e5c <Storage_SetSpeed>:

void Storage_SetSpeed() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
	uint8_t offset = (uint8_t*)&plan.speed - (uint8_t*)&plan;
 8004e62:	2316      	movs	r3, #22
 8004e64:	71fb      	strb	r3, [r7, #7]
	while(!EEP_ReadyToWrite());
 8004e66:	bf00      	nop
 8004e68:	f7fc ffae 	bl	8001dc8 <EEP_ReadyToWrite>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0fa      	beq.n	8004e68 <Storage_SetSpeed+0xc>
	EEP_WriteMem(num_plan_addr+offset, (uint8_t*)&plan.speed, 2);
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <Storage_SetSpeed+0x34>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2202      	movs	r2, #2
 8004e80:	4904      	ldr	r1, [pc, #16]	; (8004e94 <Storage_SetSpeed+0x38>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fc ff32 	bl	8001cec <EEP_WriteMem>
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000cca 	.word	0x20000cca
 8004e94:	20000d6a 	.word	0x20000d6a

08004e98 <GetActionOther>:

Action_typedef GetActionOther(uint8_t plan, uint8_t index) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	70bb      	strb	r3, [r7, #2]
	index = index%DEF_ACTION_PER_PLAN;
 8004ea8:	78bb      	ldrb	r3, [r7, #2]
 8004eaa:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <GetActionOther+0x78>)
 8004eac:	fba2 1203 	umull	r1, r2, r2, r3
 8004eb0:	0952      	lsrs	r2, r2, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f202 	mul.w	r2, r1, r2
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	70bb      	strb	r3, [r7, #2]
	uint16_t addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+plan*2];
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <GetActionOther+0x7c>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	83fb      	strh	r3, [r7, #30]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = addr + PLAN_INIT_SIZE + (index * ACTION_SIZE) ;
 8004eca:	78bb      	ldrb	r3, [r7, #2]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	8bfb      	ldrh	r3, [r7, #30]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3340      	adds	r3, #64	; 0x40
 8004eda:	83bb      	strh	r3, [r7, #28]
	while(!EEP_ReadyToWrite());
 8004edc:	bf00      	nop
 8004ede:	f7fc ff73 	bl	8001dc8 <EEP_ReadyToWrite>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0fa      	beq.n	8004ede <GetActionOther+0x46>
	EEP_ReadMem(act_addr, buff, ACTION_SIZE);
 8004ee8:	f107 010c 	add.w	r1, r7, #12
 8004eec:	8bbb      	ldrh	r3, [r7, #28]
 8004eee:	2210      	movs	r2, #16
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc ff43 	bl	8001d7c <EEP_ReadMem>
	return *(Action_typedef*)&buff;
 8004ef6:	f107 020c 	add.w	r2, r7, #12
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6810      	ldr	r0, [r2, #0]
 8004efe:	6851      	ldr	r1, [r2, #4]
 8004f00:	6892      	ldr	r2, [r2, #8]
 8004f02:	6018      	str	r0, [r3, #0]
 8004f04:	6059      	str	r1, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
}
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	51eb851f 	.word	0x51eb851f
 8004f14:	20000cd0 	.word	0x20000cd0

08004f18 <SetActionOther>:

void SetActionOther(Action_typedef act, uint8_t index) {
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b08b      	sub	sp, #44	; 0x2c
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	1d3c      	adds	r4, r7, #4
 8004f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f24:	70fb      	strb	r3, [r7, #3]
	index = index%DEF_ACTION_PER_PLAN;
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <SetActionOther+0x64>)
 8004f2a:	fba2 1203 	umull	r1, r2, r2, r3
 8004f2e:	0952      	lsrs	r2, r2, #5
 8004f30:	2164      	movs	r1, #100	; 0x64
 8004f32:	fb01 f202 	mul.w	r2, r1, r2
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[ACTION_SIZE];
	uint16_t act_addr = num_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <SetActionOther+0x68>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	4413      	add	r3, r2
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3340      	adds	r3, #64	; 0x40
 8004f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	1d3a      	adds	r2, r7, #4
 8004f54:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004f5a:	bf00      	nop
 8004f5c:	f7fc ff34 	bl	8001dc8 <EEP_ReadyToWrite>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0fa      	beq.n	8004f5c <SetActionOther+0x44>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004f66:	f107 0114 	add.w	r1, r7, #20
 8004f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc febc 	bl	8001cec <EEP_WriteMem>
}
 8004f74:	bf00      	nop
 8004f76:	372c      	adds	r7, #44	; 0x2c
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd90      	pop	{r4, r7, pc}
 8004f7c:	51eb851f 	.word	0x51eb851f
 8004f80:	20000cca 	.word	0x20000cca

08004f84 <SetActionOther2>:

void SetActionOther2(uint8_t n_plan, Action_typedef act, uint8_t index) {
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b08b      	sub	sp, #44	; 0x2c
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004f92:	4623      	mov	r3, r4
 8004f94:	73fb      	strb	r3, [r7, #15]
	index = index%DEF_ACTION_PER_PLAN;
 8004f96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f9a:	4a19      	ldr	r2, [pc, #100]	; (8005000 <SetActionOther2+0x7c>)
 8004f9c:	fba2 1203 	umull	r1, r2, r2, r3
 8004fa0:	0952      	lsrs	r2, r2, #5
 8004fa2:	2164      	movs	r1, #100	; 0x64
 8004fa4:	fb01 f202 	mul.w	r2, r1, r2
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t buff[ACTION_SIZE];
	uint16_t n_plan_addr = *(uint16_t*)&init_buff[PTR_MEMORY_ADDR_START+n_plan*2];
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <SetActionOther2+0x80>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t act_addr = n_plan_addr + PLAN_INIT_SIZE + (index * ACTION_SIZE);
 8004fbc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fc8:	4413      	add	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3340      	adds	r3, #64	; 0x40
 8004fce:	84bb      	strh	r3, [r7, #36]	; 0x24
	memcpy(buff, (uint8_t*)&act, sizeof(Action_typedef));
 8004fd0:	f107 0314 	add.w	r3, r7, #20
 8004fd4:	463a      	mov	r2, r7
 8004fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(!EEP_ReadyToWrite());
 8004fdc:	bf00      	nop
 8004fde:	f7fc fef3 	bl	8001dc8 <EEP_ReadyToWrite>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0fa      	beq.n	8004fde <SetActionOther2+0x5a>
	EEP_WriteMem(act_addr, buff, ACTION_SIZE);
 8004fe8:	f107 0114 	add.w	r1, r7, #20
 8004fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fee:	2210      	movs	r2, #16
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc fe7b 	bl	8001cec <EEP_WriteMem>
}
 8004ff6:	bf00      	nop
 8004ff8:	372c      	adds	r7, #44	; 0x2c
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}
 8004ffe:	bf00      	nop
 8005000:	51eb851f 	.word	0x51eb851f
 8005004:	20000cd0 	.word	0x20000cd0

08005008 <GetActionSequence>:

uint8_t GetActionSequence() {
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
//	return 0; //temporary disable
	uint8_t retval;
	if(!(storage_flag & STO_FLAG_BUFF_EMPTY)) {
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <GetActionSequence+0x8c>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d132      	bne.n	8005080 <GetActionSequence+0x78>

		if(plan_buffer_i>=BUFFER_SIZE-1) plan_buffer_i=0; else plan_buffer_i++;
 800501a:	4b1f      	ldr	r3, [pc, #124]	; (8005098 <GetActionSequence+0x90>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d903      	bls.n	800502a <GetActionSequence+0x22>
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <GetActionSequence+0x90>)
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e005      	b.n	8005036 <GetActionSequence+0x2e>
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <GetActionSequence+0x90>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	3301      	adds	r3, #1
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <GetActionSequence+0x90>)
 8005034:	701a      	strb	r2, [r3, #0]

		plan_active = plan_buffer[plan_buffer_i];
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <GetActionSequence+0x90>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	4817      	ldr	r0, [pc, #92]	; (800509c <GetActionSequence+0x94>)
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <GetActionSequence+0x98>)
 8005040:	460b      	mov	r3, r1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	440b      	add	r3, r1
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	4603      	mov	r3, r0
 800504c:	ca07      	ldmia	r2, {r0, r1, r2}
 800504e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if(plan_buffer_i == plan_buffer_f) {
 8005052:	4b11      	ldr	r3, [pc, #68]	; (8005098 <GetActionSequence+0x90>)
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <GetActionSequence+0x9c>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d106      	bne.n	800506c <GetActionSequence+0x64>
			storage_flag |= STO_FLAG_BUFF_EMPTY;
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <GetActionSequence+0x8c>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	b2da      	uxtb	r2, r3
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <GetActionSequence+0x8c>)
 800506a:	701a      	strb	r2, [r3, #0]
		}
		storage_flag &=~STO_FLAG_BUFF_FULL;
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <GetActionSequence+0x8c>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <GetActionSequence+0x8c>)
 8005078:	701a      	strb	r2, [r3, #0]
		retval = 1;
 800507a:	2301      	movs	r3, #1
 800507c:	71fb      	strb	r3, [r7, #7]
 800507e:	e001      	b.n	8005084 <GetActionSequence+0x7c>
	} else {
		retval = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	71fb      	strb	r3, [r7, #7]
	}

	return retval;
 8005084:	79fb      	ldrb	r3, [r7, #7]
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000d50 	.word	0x20000d50
 8005098:	20000d42 	.word	0x20000d42
 800509c:	20000d44 	.word	0x20000d44
 80050a0:	20000d10 	.word	0x20000d10
 80050a4:	20000d41 	.word	0x20000d41

080050a8 <GetActionSequenceRoutine>:

void GetActionSequenceRoutine() {
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 80050ae:	4b3d      	ldr	r3, [pc, #244]	; (80051a4 <GetActionSequenceRoutine+0xfc>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <GetActionSequenceRoutine+0x1e>
 80050b6:	4b3c      	ldr	r3, [pc, #240]	; (80051a8 <GetActionSequenceRoutine+0x100>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <GetActionSequenceRoutine+0xfc>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d107      	bne.n	80050d6 <GetActionSequenceRoutine+0x2e>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 80050c6:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <GetActionSequenceRoutine+0xfc>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
	if( (plan_buffer_i > 0 && (plan_buffer_f != plan_buffer_i-1)) ||
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d15d      	bne.n	800518a <GetActionSequenceRoutine+0xe2>
		(plan_buffer_i == 0 && (plan_buffer_f != BUFFER_SIZE-1)) ) {
 80050ce:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <GetActionSequenceRoutine+0x100>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d059      	beq.n	800518a <GetActionSequenceRoutine+0xe2>
		if(buff_index < plan.num_action-2) {
 80050d6:	4b35      	ldr	r3, [pc, #212]	; (80051ac <GetActionSequenceRoutine+0x104>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <GetActionSequenceRoutine+0x108>)
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	3b02      	subs	r3, #2
 80050e2:	429a      	cmp	r2, r3
 80050e4:	da49      	bge.n	800517a <GetActionSequenceRoutine+0xd2>
			buff_index++;
 80050e6:	4b31      	ldr	r3, [pc, #196]	; (80051ac <GetActionSequenceRoutine+0x104>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <GetActionSequenceRoutine+0x104>)
 80050f0:	701a      	strb	r2, [r3, #0]
			uint8_t index_f = plan_buffer_f;
 80050f2:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <GetActionSequenceRoutine+0x100>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	75fb      	strb	r3, [r7, #23]
			if(index_f>=BUFFER_SIZE-1) index_f=0; else index_f++;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d902      	bls.n	8005104 <GetActionSequenceRoutine+0x5c>
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
 8005102:	e002      	b.n	800510a <GetActionSequenceRoutine+0x62>
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	3301      	adds	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
			plan_buffer[index_f] = GetActionOther(num_plan, buff_index);
 800510a:	4b2a      	ldr	r3, [pc, #168]	; (80051b4 <GetActionSequenceRoutine+0x10c>)
 800510c:	7819      	ldrb	r1, [r3, #0]
 800510e:	4b27      	ldr	r3, [pc, #156]	; (80051ac <GetActionSequenceRoutine+0x104>)
 8005110:	7818      	ldrb	r0, [r3, #0]
 8005112:	7dfa      	ldrb	r2, [r7, #23]
 8005114:	4c28      	ldr	r4, [pc, #160]	; (80051b8 <GetActionSequenceRoutine+0x110>)
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441c      	add	r4, r3
 8005120:	463b      	mov	r3, r7
 8005122:	4602      	mov	r2, r0
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff feb7 	bl	8004e98 <GetActionOther>
 800512a:	4623      	mov	r3, r4
 800512c:	463a      	mov	r2, r7
 800512e:	6810      	ldr	r0, [r2, #0]
 8005130:	6851      	ldr	r1, [r2, #4]
 8005132:	6892      	ldr	r2, [r2, #8]
 8005134:	c307      	stmia	r3!, {r0, r1, r2}
			if(plan_buffer[index_f].act == 11) {
 8005136:	7dfa      	ldrb	r2, [r7, #23]
 8005138:	491f      	ldr	r1, [pc, #124]	; (80051b8 <GetActionSequenceRoutine+0x110>)
 800513a:	4613      	mov	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b0b      	cmp	r3, #11
 8005148:	d10c      	bne.n	8005164 <GetActionSequenceRoutine+0xbc>
				buff_index = plan_buffer[index_f].act_value-1;
 800514a:	7dfa      	ldrb	r2, [r7, #23]
 800514c:	491a      	ldr	r1, [pc, #104]	; (80051b8 <GetActionSequenceRoutine+0x110>)
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	3303      	adds	r3, #3
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <GetActionSequenceRoutine+0x104>)
 8005162:	701a      	strb	r2, [r3, #0]
			}
			plan_buffer_f = index_f;
 8005164:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <GetActionSequenceRoutine+0x100>)
 8005166:	7dfb      	ldrb	r3, [r7, #23]
 8005168:	7013      	strb	r3, [r2, #0]
			storage_flag &=~STO_FLAG_BUFF_EMPTY;
 800516a:	4b14      	ldr	r3, [pc, #80]	; (80051bc <GetActionSequenceRoutine+0x114>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f023 0302 	bic.w	r3, r3, #2
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <GetActionSequenceRoutine+0x114>)
 8005176:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005178:	e00f      	b.n	800519a <GetActionSequenceRoutine+0xf2>
		}
		else {
			storage_flag |= STO_FLAG_BUFF_END;
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <GetActionSequenceRoutine+0x114>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f043 0304 	orr.w	r3, r3, #4
 8005182:	b2da      	uxtb	r2, r3
 8005184:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <GetActionSequenceRoutine+0x114>)
 8005186:	701a      	strb	r2, [r3, #0]
		if(buff_index < plan.num_action-2) {
 8005188:	e007      	b.n	800519a <GetActionSequenceRoutine+0xf2>
		}
	}
	else {
		storage_flag |= STO_FLAG_BUFF_FULL;
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <GetActionSequenceRoutine+0x114>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <GetActionSequenceRoutine+0x114>)
 8005196:	701a      	strb	r2, [r3, #0]
	}
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000d42 	.word	0x20000d42
 80051a8:	20000d41 	.word	0x20000d41
 80051ac:	20000d40 	.word	0x20000d40
 80051b0:	20000d54 	.word	0x20000d54
 80051b4:	20000cc9 	.word	0x20000cc9
 80051b8:	20000d10 	.word	0x20000d10
 80051bc:	20000d50 	.word	0x20000d50

080051c0 <GetActionSequenceInit>:

void GetActionSequenceInit(uint8_t num) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	75fb      	strb	r3, [r7, #23]
	GetAction(num);
 80051ca:	463b      	mov	r3, r7
 80051cc:	7dfa      	ldrb	r2, [r7, #23]
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fb89 	bl	80048e8 <GetAction>
	buff_index = num;
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <GetActionSequenceInit+0x50>)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	7013      	strb	r3, [r2, #0]
	plan_buffer_i = 0;
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <GetActionSequenceInit+0x54>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
	plan_buffer_f = 0;
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <GetActionSequenceInit+0x58>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
	storage_flag = 0;
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <GetActionSequenceInit+0x5c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
	memset((uint8_t*)&plan_buffer, 0, sizeof(Action_typedef)*BUFFER_SIZE);
 80051ee:	2230      	movs	r2, #48	; 0x30
 80051f0:	2100      	movs	r1, #0
 80051f2:	480b      	ldr	r0, [pc, #44]	; (8005220 <GetActionSequenceInit+0x60>)
 80051f4:	f008 ff42 	bl	800e07c <memset>
	storage_flag |= STO_FLAG_BUFF_EMPTY;
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <GetActionSequenceInit+0x5c>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f043 0302 	orr.w	r3, r3, #2
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <GetActionSequenceInit+0x5c>)
 8005204:	701a      	strb	r2, [r3, #0]
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000d40 	.word	0x20000d40
 8005214:	20000d42 	.word	0x20000d42
 8005218:	20000d41 	.word	0x20000d41
 800521c:	20000d50 	.word	0x20000d50
 8005220:	20000d10 	.word	0x20000d10

08005224 <Storage_InsertAction>:

void Storage_InsertAction(uint8_t index) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=plan.num_action-1; i>index; i--) {
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <Storage_InsertAction+0x50>)
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	3b01      	subs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e014      	b.n	8005262 <Storage_InsertAction+0x3e>
		temp = GetActionOther(num_plan, i-1);
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <Storage_InsertAction+0x54>)
 800523a:	7819      	ldrb	r1, [r3, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fe25 	bl	8004e98 <GetActionOther>
		SetActionOther(temp, i);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f107 0208 	add.w	r2, r7, #8
 8005256:	ca07      	ldmia	r2, {r0, r1, r2}
 8005258:	f7ff fe5e 	bl	8004f18 <SetActionOther>
	for(int i=plan.num_action-1; i>index; i--) {
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3b01      	subs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	429a      	cmp	r2, r3
 8005268:	dce6      	bgt.n	8005238 <Storage_InsertAction+0x14>
	}
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000d54 	.word	0x20000d54
 8005278:	20000cc9 	.word	0x20000cc9

0800527c <Storage_DeleteAction>:

void Storage_DeleteAction(uint8_t index) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
	Action_typedef temp;
	for(int i=index; i<plan.num_action-1; i++) {
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e014      	b.n	80052b6 <Storage_DeleteAction+0x3a>
		temp = GetActionOther(num_plan, i+1);
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <Storage_DeleteAction+0x60>)
 800528e:	7819      	ldrb	r1, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	3301      	adds	r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fdfb 	bl	8004e98 <GetActionOther>
		SetActionOther(temp, i);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f107 0208 	add.w	r2, r7, #8
 80052aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80052ac:	f7ff fe34 	bl	8004f18 <SetActionOther>
	for(int i=index; i<plan.num_action-1; i++) {
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <Storage_DeleteAction+0x64>)
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	429a      	cmp	r2, r3
 80052c0:	dbe4      	blt.n	800528c <Storage_DeleteAction+0x10>
	}
	SetActionOther(plan_default, plan.num_action-1);
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <Storage_DeleteAction+0x64>)
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <Storage_DeleteAction+0x68>)
 80052cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80052ce:	f7ff fe23 	bl	8004f18 <SetActionOther>
}
 80052d2:	bf00      	nop
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000cc9 	.word	0x20000cc9
 80052e0:	20000d54 	.word	0x20000d54
 80052e4:	080112c4 	.word	0x080112c4

080052e8 <Storage_CopyPlan>:

void Storage_CopyPlan(uint8_t plan_dest) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
	Storage_SetPlanOther(&plan, plan_dest);
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	4619      	mov	r1, r3
 80052f6:	4813      	ldr	r0, [pc, #76]	; (8005344 <Storage_CopyPlan+0x5c>)
 80052f8:	f7ff fd38 	bl	8004d6c <Storage_SetPlanOther>
	Action_typedef temp;
	for(int i=0; i<plan.num_action; i++) {
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e014      	b.n	800532c <Storage_CopyPlan+0x44>
		temp = GetActionOther(num_plan, i);
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <Storage_CopyPlan+0x60>)
 8005304:	7819      	ldrb	r1, [r3, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fdc2 	bl	8004e98 <GetActionOther>
		SetActionOther2(plan_dest, temp, i);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	79f8      	ldrb	r0, [r7, #7]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005322:	f7ff fe2f 	bl	8004f84 <SetActionOther2>
	for(int i=0; i<plan.num_action; i++) {
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3301      	adds	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <Storage_CopyPlan+0x5c>)
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	461a      	mov	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	4293      	cmp	r3, r2
 8005336:	dbe4      	blt.n	8005302 <Storage_CopyPlan+0x1a>
	}
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000d54 	.word	0x20000d54
 8005348:	20000cc9 	.word	0x20000cc9

0800534c <Storage_CleanInit>:

void Storage_CleanInit() {
 800534c:	b580      	push	{r7, lr}
 800534e:	b092      	sub	sp, #72	; 0x48
 8005350:	af00      	add	r7, sp, #0
	uint8_t ok[PAGE_SIZE];
	memset(ok, 0, PAGE_SIZE);
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	2240      	movs	r2, #64	; 0x40
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f008 fe8f 	bl	800e07c <memset>
	for(int i=0; i<PAGE_NUM; i++) {
 800535e:	2300      	movs	r3, #0
 8005360:	647b      	str	r3, [r7, #68]	; 0x44
 8005362:	e00f      	b.n	8005384 <Storage_CleanInit+0x38>
		while(!EEP_ReadyToWrite());
 8005364:	bf00      	nop
 8005366:	f7fc fd2f 	bl	8001dc8 <EEP_ReadyToWrite>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0fa      	beq.n	8005366 <Storage_CleanInit+0x1a>
		EEP_WritePage(i, ok);
 8005370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005372:	b29b      	uxth	r3, r3
 8005374:	1d3a      	adds	r2, r7, #4
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f7fc fc93 	bl	8001ca4 <EEP_WritePage>
	for(int i=0; i<PAGE_NUM; i++) {
 800537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005380:	3301      	adds	r3, #1
 8005382:	647b      	str	r3, [r7, #68]	; 0x44
 8005384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538a:	dbeb      	blt.n	8005364 <Storage_CleanInit+0x18>
	}
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3748      	adds	r7, #72	; 0x48
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  return 1;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <_kill>:

int _kill(int pid, int sig)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053b0:	f008 fe1c 	bl	800dfec <__errno>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2216      	movs	r2, #22
 80053b8:	601a      	str	r2, [r3, #0]
  return -1;
 80053ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_exit>:

void _exit (int status)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053ce:	f04f 31ff 	mov.w	r1, #4294967295
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff ffe7 	bl	80053a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053d8:	e7fe      	b.n	80053d8 <_exit+0x12>

080053da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e00a      	b.n	8005402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053ec:	f3af 8000 	nop.w
 80053f0:	4601      	mov	r1, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	60ba      	str	r2, [r7, #8]
 80053f8:	b2ca      	uxtb	r2, r1
 80053fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3301      	adds	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	dbf0      	blt.n	80053ec <_read+0x12>
  }

  return len;
 800540a:	687b      	ldr	r3, [r7, #4]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e009      	b.n	800543a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	60ba      	str	r2, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	3301      	adds	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	dbf1      	blt.n	8005426 <_write+0x12>
  }
  return len;
 8005442:	687b      	ldr	r3, [r7, #4]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <_close>:

int _close(int file)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005474:	605a      	str	r2, [r3, #4]
  return 0;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <_isatty>:

int _isatty(int file)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800548c:	2301      	movs	r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <_sbrk+0x5c>)
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <_sbrk+0x60>)
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054c8:	4b13      	ldr	r3, [pc, #76]	; (8005518 <_sbrk+0x64>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <_sbrk+0x64>)
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <_sbrk+0x68>)
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <_sbrk+0x64>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d207      	bcs.n	80054f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054e4:	f008 fd82 	bl	800dfec <__errno>
 80054e8:	4603      	mov	r3, r0
 80054ea:	220c      	movs	r2, #12
 80054ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e009      	b.n	8005508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054f4:	4b08      	ldr	r3, [pc, #32]	; (8005518 <_sbrk+0x64>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <_sbrk+0x64>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <_sbrk+0x64>)
 8005504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005506:	68fb      	ldr	r3, [r7, #12]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20020000 	.word	0x20020000
 8005514:	00000400 	.word	0x00000400
 8005518:	20000d7c 	.word	0x20000d7c
 800551c:	20001540 	.word	0x20001540

08005520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <SystemInit+0x20>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	4a05      	ldr	r2, [pc, #20]	; (8005540 <SystemInit+0x20>)
 800552c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000ed00 	.word	0xe000ed00

08005544 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b096      	sub	sp, #88	; 0x58
 8005548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800554a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	615a      	str	r2, [r3, #20]
 8005574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	2220      	movs	r2, #32
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f008 fd7d 	bl	800e07c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005582:	4b4a      	ldr	r3, [pc, #296]	; (80056ac <MX_TIM1_Init+0x168>)
 8005584:	4a4a      	ldr	r2, [pc, #296]	; (80056b0 <MX_TIM1_Init+0x16c>)
 8005586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005588:	4b48      	ldr	r3, [pc, #288]	; (80056ac <MX_TIM1_Init+0x168>)
 800558a:	2253      	movs	r2, #83	; 0x53
 800558c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800558e:	4b47      	ldr	r3, [pc, #284]	; (80056ac <MX_TIM1_Init+0x168>)
 8005590:	2200      	movs	r2, #0
 8005592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8005594:	4b45      	ldr	r3, [pc, #276]	; (80056ac <MX_TIM1_Init+0x168>)
 8005596:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800559a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800559c:	4b43      	ldr	r3, [pc, #268]	; (80056ac <MX_TIM1_Init+0x168>)
 800559e:	2200      	movs	r2, #0
 80055a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80055a2:	4b42      	ldr	r3, [pc, #264]	; (80056ac <MX_TIM1_Init+0x168>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055a8:	4b40      	ldr	r3, [pc, #256]	; (80056ac <MX_TIM1_Init+0x168>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80055ae:	483f      	ldr	r0, [pc, #252]	; (80056ac <MX_TIM1_Init+0x168>)
 80055b0:	f006 fda0 	bl	800c0f4 <HAL_TIM_Base_Init>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80055ba:	f7fc feb8 	bl	800232e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80055c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055c8:	4619      	mov	r1, r3
 80055ca:	4838      	ldr	r0, [pc, #224]	; (80056ac <MX_TIM1_Init+0x168>)
 80055cc:	f007 fa68 	bl	800caa0 <HAL_TIM_ConfigClockSource>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80055d6:	f7fc feaa 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80055da:	4834      	ldr	r0, [pc, #208]	; (80056ac <MX_TIM1_Init+0x168>)
 80055dc:	f006 fe4a 	bl	800c274 <HAL_TIM_PWM_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80055e6:	f7fc fea2 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ea:	2300      	movs	r3, #0
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80055f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055f6:	4619      	mov	r1, r3
 80055f8:	482c      	ldr	r0, [pc, #176]	; (80056ac <MX_TIM1_Init+0x168>)
 80055fa:	f007 fe51 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005604:	f7fc fe93 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005608:	2360      	movs	r3, #96	; 0x60
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005610:	2300      	movs	r3, #0
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005614:	2300      	movs	r3, #0
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005618:	2300      	movs	r3, #0
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800561c:	2300      	movs	r3, #0
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005628:	2200      	movs	r2, #0
 800562a:	4619      	mov	r1, r3
 800562c:	481f      	ldr	r0, [pc, #124]	; (80056ac <MX_TIM1_Init+0x168>)
 800562e:	f007 f975 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005638:	f7fc fe79 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800563c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005640:	2204      	movs	r2, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4819      	ldr	r0, [pc, #100]	; (80056ac <MX_TIM1_Init+0x168>)
 8005646:	f007 f969 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005650:	f7fc fe6d 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005658:	2208      	movs	r2, #8
 800565a:	4619      	mov	r1, r3
 800565c:	4813      	ldr	r0, [pc, #76]	; (80056ac <MX_TIM1_Init+0x168>)
 800565e:	f007 f95d 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8005668:	f7fc fe61 	bl	800232e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800566c:	2300      	movs	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005684:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4807      	ldr	r0, [pc, #28]	; (80056ac <MX_TIM1_Init+0x168>)
 8005690:	f007 fe82 	bl	800d398 <HAL_TIMEx_ConfigBreakDeadTime>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800569a:	f7fc fe48 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800569e:	4803      	ldr	r0, [pc, #12]	; (80056ac <MX_TIM1_Init+0x168>)
 80056a0:	f000 fa5a 	bl	8005b58 <HAL_TIM_MspPostInit>

}
 80056a4:	bf00      	nop
 80056a6:	3758      	adds	r7, #88	; 0x58
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000d80 	.word	0x20000d80
 80056b0:	40010000 	.word	0x40010000

080056b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	; 0x30
 80056b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	2224      	movs	r2, #36	; 0x24
 80056c0:	2100      	movs	r1, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f008 fcda 	bl	800e07c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <MX_TIM2_Init+0xa4>)
 80056d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80056d8:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <MX_TIM2_Init+0xa4>)
 80056da:	2200      	movs	r2, #0
 80056dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <MX_TIM2_Init+0xa4>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <MX_TIM2_Init+0xa4>)
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <MX_TIM2_Init+0xa4>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <MX_TIM2_Init+0xa4>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80056f8:	2303      	movs	r3, #3
 80056fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005710:	2301      	movs	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005714:	2300      	movs	r3, #0
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4619      	mov	r1, r3
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <MX_TIM2_Init+0xa4>)
 8005724:	f006 febe 	bl	800c4a4 <HAL_TIM_Encoder_Init>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800572e:	f7fc fdfe 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4806      	ldr	r0, [pc, #24]	; (8005758 <MX_TIM2_Init+0xa4>)
 8005740:	f007 fdae 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800574a:	f7fc fdf0 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800574e:	bf00      	nop
 8005750:	3730      	adds	r7, #48	; 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000dc8 	.word	0x20000dc8

0800575c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005762:	f107 0320 	add.w	r3, r7, #32
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800576c:	1d3b      	adds	r3, r7, #4
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	611a      	str	r2, [r3, #16]
 800577a:	615a      	str	r2, [r3, #20]
 800577c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800577e:	4b32      	ldr	r3, [pc, #200]	; (8005848 <MX_TIM3_Init+0xec>)
 8005780:	4a32      	ldr	r2, [pc, #200]	; (800584c <MX_TIM3_Init+0xf0>)
 8005782:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8005784:	4b30      	ldr	r3, [pc, #192]	; (8005848 <MX_TIM3_Init+0xec>)
 8005786:	2207      	movs	r2, #7
 8005788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800578a:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <MX_TIM3_Init+0xec>)
 800578c:	2200      	movs	r2, #0
 800578e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <MX_TIM3_Init+0xec>)
 8005792:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005796:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005798:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <MX_TIM3_Init+0xec>)
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800579e:	4b2a      	ldr	r3, [pc, #168]	; (8005848 <MX_TIM3_Init+0xec>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80057a4:	4828      	ldr	r0, [pc, #160]	; (8005848 <MX_TIM3_Init+0xec>)
 80057a6:	f006 fd65 	bl	800c274 <HAL_TIM_PWM_Init>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80057b0:	f7fc fdbd 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057b4:	2300      	movs	r3, #0
 80057b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057bc:	f107 0320 	add.w	r3, r7, #32
 80057c0:	4619      	mov	r1, r3
 80057c2:	4821      	ldr	r0, [pc, #132]	; (8005848 <MX_TIM3_Init+0xec>)
 80057c4:	f007 fd6c 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80057ce:	f7fc fdae 	bl	800232e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057d2:	2360      	movs	r3, #96	; 0x60
 80057d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	2200      	movs	r2, #0
 80057e6:	4619      	mov	r1, r3
 80057e8:	4817      	ldr	r0, [pc, #92]	; (8005848 <MX_TIM3_Init+0xec>)
 80057ea:	f007 f897 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80057f4:	f7fc fd9b 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	2204      	movs	r2, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4812      	ldr	r0, [pc, #72]	; (8005848 <MX_TIM3_Init+0xec>)
 8005800:	f007 f88c 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800580a:	f7fc fd90 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	2208      	movs	r2, #8
 8005812:	4619      	mov	r1, r3
 8005814:	480c      	ldr	r0, [pc, #48]	; (8005848 <MX_TIM3_Init+0xec>)
 8005816:	f007 f881 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8005820:	f7fc fd85 	bl	800232e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	220c      	movs	r2, #12
 8005828:	4619      	mov	r1, r3
 800582a:	4807      	ldr	r0, [pc, #28]	; (8005848 <MX_TIM3_Init+0xec>)
 800582c:	f007 f876 	bl	800c91c <HAL_TIM_PWM_ConfigChannel>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8005836:	f7fc fd7a 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800583a:	4803      	ldr	r0, [pc, #12]	; (8005848 <MX_TIM3_Init+0xec>)
 800583c:	f000 f98c 	bl	8005b58 <HAL_TIM_MspPostInit>

}
 8005840:	bf00      	nop
 8005842:	3728      	adds	r7, #40	; 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20000e10 	.word	0x20000e10
 800584c:	40000400 	.word	0x40000400

08005850 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	; 0x30
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005856:	f107 030c 	add.w	r3, r7, #12
 800585a:	2224      	movs	r2, #36	; 0x24
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f008 fc0c 	bl	800e07c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800586c:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <MX_TIM4_Init+0xa0>)
 800586e:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <MX_TIM4_Init+0xa4>)
 8005870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005872:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <MX_TIM4_Init+0xa0>)
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005878:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <MX_TIM4_Init+0xa0>)
 800587a:	2200      	movs	r2, #0
 800587c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <MX_TIM4_Init+0xa0>)
 8005880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005884:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <MX_TIM4_Init+0xa0>)
 8005888:	2200      	movs	r2, #0
 800588a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800588c:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <MX_TIM4_Init+0xa0>)
 800588e:	2200      	movs	r2, #0
 8005890:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005892:	2303      	movs	r3, #3
 8005894:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800589e:	2300      	movs	r3, #0
 80058a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80058a6:	2300      	movs	r3, #0
 80058a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80058aa:	2301      	movs	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80058ae:	2300      	movs	r3, #0
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	4619      	mov	r1, r3
 80058bc:	480c      	ldr	r0, [pc, #48]	; (80058f0 <MX_TIM4_Init+0xa0>)
 80058be:	f006 fdf1 	bl	800c4a4 <HAL_TIM_Encoder_Init>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80058c8:	f7fc fd31 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058cc:	2300      	movs	r3, #0
 80058ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4805      	ldr	r0, [pc, #20]	; (80058f0 <MX_TIM4_Init+0xa0>)
 80058da:	f007 fce1 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80058e4:	f7fc fd23 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80058e8:	bf00      	nop
 80058ea:	3730      	adds	r7, #48	; 0x30
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000e58 	.word	0x20000e58
 80058f4:	40000800 	.word	0x40000800

080058f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058fe:	463b      	mov	r3, r7
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <MX_TIM6_Init+0x64>)
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <MX_TIM6_Init+0x68>)
 800590a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <MX_TIM6_Init+0x64>)
 800590e:	2253      	movs	r2, #83	; 0x53
 8005910:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <MX_TIM6_Init+0x64>)
 8005914:	2200      	movs	r2, #0
 8005916:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <MX_TIM6_Init+0x64>)
 800591a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800591e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005920:	4b0e      	ldr	r3, [pc, #56]	; (800595c <MX_TIM6_Init+0x64>)
 8005922:	2200      	movs	r2, #0
 8005924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <MX_TIM6_Init+0x64>)
 8005928:	f006 fbe4 	bl	800c0f4 <HAL_TIM_Base_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005932:	f7fc fcfc 	bl	800232e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005936:	2300      	movs	r3, #0
 8005938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800593e:	463b      	mov	r3, r7
 8005940:	4619      	mov	r1, r3
 8005942:	4806      	ldr	r0, [pc, #24]	; (800595c <MX_TIM6_Init+0x64>)
 8005944:	f007 fcac 	bl	800d2a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800594e:	f7fc fcee 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000ea0 	.word	0x20000ea0
 8005960:	40001000 	.word	0x40001000

08005964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_TIM_Base_MspInit+0x70>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <HAL_TIM_Base_MspInit+0x74>)
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	4a16      	ldr	r2, [pc, #88]	; (80059d8 <HAL_TIM_Base_MspInit+0x74>)
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6453      	str	r3, [r2, #68]	; 0x44
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <HAL_TIM_Base_MspInit+0x74>)
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8005992:	e01a      	b.n	80059ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a10      	ldr	r2, [pc, #64]	; (80059dc <HAL_TIM_Base_MspInit+0x78>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d115      	bne.n	80059ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <HAL_TIM_Base_MspInit+0x74>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a0c      	ldr	r2, [pc, #48]	; (80059d8 <HAL_TIM_Base_MspInit+0x74>)
 80059a8:	f043 0310 	orr.w	r3, r3, #16
 80059ac:	6413      	str	r3, [r2, #64]	; 0x40
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_TIM_Base_MspInit+0x74>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	2036      	movs	r0, #54	; 0x36
 80059c0:	f004 f8ad 	bl	8009b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80059c4:	2036      	movs	r0, #54	; 0x36
 80059c6:	f004 f8c6 	bl	8009b56 <HAL_NVIC_EnableIRQ>
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40001000 	.word	0x40001000

080059e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e8:	f107 031c 	add.w	r3, r7, #28
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d14b      	bne.n	8005a9a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	4a3e      	ldr	r2, [pc, #248]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6413      	str	r3, [r2, #64]	; 0x40
 8005a12:	4b3c      	ldr	r3, [pc, #240]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	4a37      	ldr	r2, [pc, #220]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a2e:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	4a30      	ldr	r2, [pc, #192]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4a:	4b2e      	ldr	r3, [pc, #184]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a64:	2300      	movs	r3, #0
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a6c:	f107 031c 	add.w	r3, r7, #28
 8005a70:	4619      	mov	r1, r3
 8005a72:	4825      	ldr	r0, [pc, #148]	; (8005b08 <HAL_TIM_Encoder_MspInit+0x128>)
 8005a74:	f004 fbfe 	bl	800a274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a78:	2308      	movs	r3, #8
 8005a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a8c:	f107 031c 	add.w	r3, r7, #28
 8005a90:	4619      	mov	r1, r3
 8005a92:	481e      	ldr	r0, [pc, #120]	; (8005b0c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005a94:	f004 fbee 	bl	800a274 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005a98:	e030      	b.n	8005afc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_TIM_Encoder_MspInit+0x130>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d12b      	bne.n	8005afc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab4:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <HAL_TIM_Encoder_MspInit+0x124>)
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005adc:	23c0      	movs	r3, #192	; 0xc0
 8005ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005aec:	2302      	movs	r3, #2
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af0:	f107 031c 	add.w	r3, r7, #28
 8005af4:	4619      	mov	r1, r3
 8005af6:	4805      	ldr	r0, [pc, #20]	; (8005b0c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005af8:	f004 fbbc 	bl	800a274 <HAL_GPIO_Init>
}
 8005afc:	bf00      	nop
 8005afe:	3730      	adds	r7, #48	; 0x30
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	40020000 	.word	0x40020000
 8005b0c:	40020400 	.word	0x40020400
 8005b10:	40000800 	.word	0x40000800

08005b14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0b      	ldr	r2, [pc, #44]	; (8005b50 <HAL_TIM_PWM_MspInit+0x3c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10d      	bne.n	8005b42 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <HAL_TIM_PWM_MspInit+0x40>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <HAL_TIM_PWM_MspInit+0x40>)
 8005b30:	f043 0302 	orr.w	r3, r3, #2
 8005b34:	6413      	str	r3, [r2, #64]	; 0x40
 8005b36:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <HAL_TIM_PWM_MspInit+0x40>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40023800 	.word	0x40023800

08005b58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a25      	ldr	r2, [pc, #148]	; (8005c0c <HAL_TIM_MspPostInit+0xb4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d11f      	bne.n	8005bba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_TIM_MspPostInit+0xb8>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <HAL_TIM_MspPostInit+0xb8>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8a:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <HAL_TIM_MspPostInit+0xb8>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005b96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4818      	ldr	r0, [pc, #96]	; (8005c14 <HAL_TIM_MspPostInit+0xbc>)
 8005bb4:	f004 fb5e 	bl	800a274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005bb8:	e023      	b.n	8005c02 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <HAL_TIM_MspPostInit+0xc0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d11e      	bne.n	8005c02 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_TIM_MspPostInit+0xb8>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <HAL_TIM_MspPostInit+0xb8>)
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <HAL_TIM_MspPostInit+0xb8>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005be0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be6:	2302      	movs	r3, #2
 8005be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4807      	ldr	r0, [pc, #28]	; (8005c1c <HAL_TIM_MspPostInit+0xc4>)
 8005bfe:	f004 fb39 	bl	800a274 <HAL_GPIO_Init>
}
 8005c02:	bf00      	nop
 8005c04:	3728      	adds	r7, #40	; 0x28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40020000 	.word	0x40020000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40020800 	.word	0x40020800

08005c20 <UI_ShowSensor>:
#define SENSOR_ORIGIN_X sen_xy[0]
#define SENSOR_ORIGIN_Y sen_xy[1]
#define SENSOR_WIDTH_SEN 6
#define SENSOR_HEIGHT_PX 15

uint8_t UI_ShowSensor() {
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b089      	sub	sp, #36	; 0x24
 8005c24:	af02      	add	r7, sp, #8
	if((sensor_flag & 1) != 1) return 0;
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <UI_ShowSensor+0xec>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <UI_ShowSensor+0x16>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e065      	b.n	8005d02 <UI_ShowSensor+0xe2>
	uint8_t* value = sensor_disp_status;
 8005c36:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <UI_ShowSensor+0xf0>)
 8005c38:	60fb      	str	r3, [r7, #12]
	DISP_FillRect(
 8005c3a:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005c3c:	7818      	ldrb	r0, [r3, #0]
 8005c3e:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005c40:	7859      	ldrb	r1, [r3, #1]
			SENSOR_ORIGIN_X,
			SENSOR_ORIGIN_Y,
			SENSOR_ORIGIN_X+(SENSOR_WIDTH_SEN+1)*14,
 8005c42:	4b34      	ldr	r3, [pc, #208]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
	DISP_FillRect(
 8005c46:	3362      	adds	r3, #98	; 0x62
 8005c48:	b2da      	uxtb	r2, r3
			SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX,
 8005c4a:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005c4c:	785b      	ldrb	r3, [r3, #1]
	DISP_FillRect(
 8005c4e:	330f      	adds	r3, #15
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2401      	movs	r4, #1
 8005c54:	9400      	str	r4, [sp, #0]
 8005c56:	f7fb fd65 	bl	8001724 <DISP_FillRect>
			DISP_COLOR_BLACK);
	DISP_Shape_Typedef rect = {0,0,DISP_COLOR_WHITE,SENSOR_WIDTH_SEN-1,1};
 8005c5a:	4a2f      	ldr	r2, [pc, #188]	; (8005d18 <UI_ShowSensor+0xf8>)
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c62:	6018      	str	r0, [r3, #0]
 8005c64:	3304      	adds	r3, #4
 8005c66:	7019      	strb	r1, [r3, #0]
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e03e      	b.n	8005cec <UI_ShowSensor+0xcc>
		uint8_t status = value[SENSOR_NUMBER-s-1];
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f1c3 030d 	rsb	r3, r3, #13
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	74fb      	strb	r3, [r7, #19]
		if(status>=SENSOR_HEIGHT_PX) status=SENSOR_HEIGHT_PX-1;
 8005c7c:	7cfb      	ldrb	r3, [r7, #19]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	d902      	bls.n	8005c88 <UI_ShowSensor+0x68>
 8005c82:	230e      	movs	r3, #14
 8005c84:	74fb      	strb	r3, [r7, #19]
 8005c86:	e007      	b.n	8005c98 <UI_ShowSensor+0x78>
		else if(status==1 || status==2) status=3;
 8005c88:	7cfb      	ldrb	r3, [r7, #19]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d002      	beq.n	8005c94 <UI_ShowSensor+0x74>
 8005c8e:	7cfb      	ldrb	r3, [r7, #19]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d101      	bne.n	8005c98 <UI_ShowSensor+0x78>
 8005c94:	2303      	movs	r3, #3
 8005c96:	74fb      	strb	r3, [r7, #19]
		uint8_t y_rect = status;
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	72fb      	strb	r3, [r7, #11]

		rect.origin_x = (s*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	00d2      	lsls	r2, r2, #3
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	713b      	strb	r3, [r7, #4]
		rect.origin_y = SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX-y_rect;
 8005cb2:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005cb4:	785a      	ldrb	r2, [r3, #1]
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	330f      	adds	r3, #15
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	717b      	strb	r3, [r7, #5]
		rect.size_y = y_rect;
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	723b      	strb	r3, [r7, #8]
		DISP_FillRect2(&rect);
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fb feff 	bl	8001acc <DISP_FillRect2>
		DISP_OLEDUpdate(
 8005cce:	7938      	ldrb	r0, [r7, #4]
 8005cd0:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005cd2:	7859      	ldrb	r1, [r3, #1]
				rect.origin_x,
				SENSOR_ORIGIN_Y,
				rect.origin_x + SENSOR_WIDTH_SEN,
 8005cd4:	793b      	ldrb	r3, [r7, #4]
		DISP_OLEDUpdate(
 8005cd6:	3306      	adds	r3, #6
 8005cd8:	b2da      	uxtb	r2, r3
				SENSOR_ORIGIN_Y+SENSOR_HEIGHT_PX);
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <UI_ShowSensor+0xf4>)
 8005cdc:	785b      	ldrb	r3, [r3, #1]
		DISP_OLEDUpdate(
 8005cde:	330f      	adds	r3, #15
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f7fb feab 	bl	8001a3c <DISP_OLEDUpdate>
	for(int s=0; s<SENSOR_NUMBER; s++) {
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b0d      	cmp	r3, #13
 8005cf0:	ddbd      	ble.n	8005c6e <UI_ShowSensor+0x4e>
	}
	sensor_flag &=~1;
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <UI_ShowSensor+0xec>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <UI_ShowSensor+0xec>)
 8005cfe:	701a      	strb	r2, [r3, #0]
	return 1;
 8005d00:	2301      	movs	r3, #1
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000cbd 	.word	0x20000cbd
 8005d10:	20000b90 	.word	0x20000b90
 8005d14:	20000290 	.word	0x20000290
 8005d18:	08010e78 	.word	0x08010e78

08005d1c <UI_ReadButton>:

uint8_t UI_ReadButton() {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_UP_GPIO_Port, SW_UP_Pin) * SW_UP_PRESS;
 8005d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d2a:	483c      	ldr	r0, [pc, #240]	; (8005e1c <UI_ReadButton+0x100>)
 8005d2c:	f004 fc3e 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	b25a      	sxtb	r2, r3
 8005d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_RG_GPIO_Port, SW_RG_Pin) * SW_RG_PRESS;
 8005d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d4c:	4833      	ldr	r0, [pc, #204]	; (8005e1c <UI_ReadButton+0x100>)
 8005d4e:	f004 fc2d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <UI_ReadButton+0x40>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e000      	b.n	8005d5e <UI_ReadButton+0x42>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b25a      	sxtb	r2, r3
 8005d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_DW_GPIO_Port, SW_DW_Pin) * SW_DW_PRESS;
 8005d6a:	2110      	movs	r1, #16
 8005d6c:	482c      	ldr	r0, [pc, #176]	; (8005e20 <UI_ReadButton+0x104>)
 8005d6e:	f004 fc1d 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <UI_ReadButton+0x60>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	e000      	b.n	8005d7e <UI_ReadButton+0x62>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	b25a      	sxtb	r2, r3
 8005d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_BK_GPIO_Port, SW_BK_Pin) * SW_BK_PRESS;
 8005d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d8e:	4824      	ldr	r0, [pc, #144]	; (8005e20 <UI_ReadButton+0x104>)
 8005d90:	f004 fc0c 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <UI_ReadButton+0x82>
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	e000      	b.n	8005da0 <UI_ReadButton+0x84>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	b25a      	sxtb	r2, r3
 8005da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_LF_GPIO_Port, SW_LF_Pin) * SW_LF_PRESS;
 8005dac:	2120      	movs	r1, #32
 8005dae:	481c      	ldr	r0, [pc, #112]	; (8005e20 <UI_ReadButton+0x104>)
 8005db0:	f004 fbfc 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <UI_ReadButton+0xa2>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	e000      	b.n	8005dc0 <UI_ReadButton+0xa4>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	b25a      	sxtb	r2, r3
 8005dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin) * SW_OK_PRESS;
 8005dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dd0:	4813      	ldr	r0, [pc, #76]	; (8005e20 <UI_ReadButton+0x104>)
 8005dd2:	f004 fbeb 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <UI_ReadButton+0xc4>
 8005ddc:	2320      	movs	r3, #32
 8005dde:	e000      	b.n	8005de2 <UI_ReadButton+0xc6>
 8005de0:	2300      	movs	r3, #0
 8005de2:	b25a      	sxtb	r2, r3
 8005de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b25b      	sxtb	r3, r3
 8005dec:	71fb      	strb	r3, [r7, #7]
	temp |= !HAL_GPIO_ReadPin(SW_HM_GPIO_Port, SW_HM_Pin) * SW_HM_PRESS;
 8005dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005df2:	480b      	ldr	r0, [pc, #44]	; (8005e20 <UI_ReadButton+0x104>)
 8005df4:	f004 fbda 	bl	800a5ac <HAL_GPIO_ReadPin>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <UI_ReadButton+0xe6>
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	e000      	b.n	8005e04 <UI_ReadButton+0xe8>
 8005e02:	2300      	movs	r3, #0
 8005e04:	b25a      	sxtb	r2, r3
 8005e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	71fb      	strb	r3, [r7, #7]
	return temp;
 8005e10:	79fb      	ldrb	r3, [r7, #7]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40020800 	.word	0x40020800
 8005e20:	40020400 	.word	0x40020400

08005e24 <UI_HomeScreenInit>:
		"PATH",
		"PLAN",
		"SET"
};

void UI_HomeScreenInit() {
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0

	short_message.origin_x = 0;
 8005e28:	4b3b      	ldr	r3, [pc, #236]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
	short_message.origin_y = 27;
 8005e2e:	4b3a      	ldr	r3, [pc, #232]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e30:	221b      	movs	r2, #27
 8005e32:	705a      	strb	r2, [r3, #1]
	short_message.color = DISP_COLOR_BLACK;
 8005e34:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	709a      	strb	r2, [r3, #2]
	short_message.size_x = 127;
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e3c:	227f      	movs	r2, #127	; 0x7f
 8005e3e:	70da      	strb	r2, [r3, #3]
	short_message.size_y = 10;
 8005e40:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e42:	220a      	movs	r2, #10
 8005e44:	711a      	strb	r2, [r3, #4]
	short_message.align_x = DISP_ALIGN_CENTER;
 8005e46:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e48:	2202      	movs	r2, #2
 8005e4a:	715a      	strb	r2, [r3, #5]
	short_message.align_y = DISP_ALIGN_CENTER;
 8005e4c:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e4e:	2202      	movs	r2, #2
 8005e50:	719a      	strb	r2, [r3, #6]

	short_message_white = short_message;
 8005e52:	4b32      	ldr	r3, [pc, #200]	; (8005f1c <UI_HomeScreenInit+0xf8>)
 8005e54:	4a30      	ldr	r2, [pc, #192]	; (8005f18 <UI_HomeScreenInit+0xf4>)
 8005e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e5a:	6018      	str	r0, [r3, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	8019      	strh	r1, [r3, #0]
 8005e60:	3302      	adds	r3, #2
 8005e62:	0c0a      	lsrs	r2, r1, #16
 8005e64:	701a      	strb	r2, [r3, #0]
	short_message_white.color = DISP_COLOR_WHITE;
 8005e66:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <UI_HomeScreenInit+0xf8>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	709a      	strb	r2, [r3, #2]

	home_menu[0].origin_x = 14;
 8005e6c:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e6e:	220e      	movs	r2, #14
 8005e70:	701a      	strb	r2, [r3, #0]
	home_menu[0].origin_y = 38;
 8005e72:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e74:	2226      	movs	r2, #38	; 0x26
 8005e76:	705a      	strb	r2, [r3, #1]
	home_menu[0].color = DISP_COLOR_WHITE;
 8005e78:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	709a      	strb	r2, [r3, #2]
	home_menu[0].size_x = 40;
 8005e7e:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e80:	2228      	movs	r2, #40	; 0x28
 8005e82:	70da      	strb	r2, [r3, #3]
	home_menu[0].align_x = DISP_ALIGN_CENTER;
 8005e84:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e86:	2202      	movs	r2, #2
 8005e88:	715a      	strb	r2, [r3, #5]

	home_menu[1].origin_x = 14;
 8005e8a:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e8c:	220e      	movs	r2, #14
 8005e8e:	71da      	strb	r2, [r3, #7]
	home_menu[1].origin_y = 51;
 8005e90:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e92:	2233      	movs	r2, #51	; 0x33
 8005e94:	721a      	strb	r2, [r3, #8]
	home_menu[1].color = DISP_COLOR_WHITE;
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	725a      	strb	r2, [r3, #9]
	home_menu[1].size_x = 40;
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005e9e:	2228      	movs	r2, #40	; 0x28
 8005ea0:	729a      	strb	r2, [r3, #10]
	home_menu[1].align_x = DISP_ALIGN_CENTER;
 8005ea2:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	731a      	strb	r2, [r3, #12]

	home_menu[2].origin_x = 73;
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005eaa:	2249      	movs	r2, #73	; 0x49
 8005eac:	739a      	strb	r2, [r3, #14]
	home_menu[2].origin_y = 38;
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005eb0:	2226      	movs	r2, #38	; 0x26
 8005eb2:	73da      	strb	r2, [r3, #15]
	home_menu[2].color = DISP_COLOR_WHITE;
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	741a      	strb	r2, [r3, #16]
	home_menu[2].size_x = 40;
 8005eba:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ebc:	2228      	movs	r2, #40	; 0x28
 8005ebe:	745a      	strb	r2, [r3, #17]
	home_menu[2].align_x = DISP_ALIGN_CENTER;
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	74da      	strb	r2, [r3, #19]

	home_menu[3].origin_x = 73;
 8005ec6:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ec8:	2249      	movs	r2, #73	; 0x49
 8005eca:	755a      	strb	r2, [r3, #21]
	home_menu[3].origin_y = 51;
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ece:	2233      	movs	r2, #51	; 0x33
 8005ed0:	759a      	strb	r2, [r3, #22]
	home_menu[3].color = DISP_COLOR_WHITE;
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	75da      	strb	r2, [r3, #23]
	home_menu[3].size_x = 40;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005eda:	2228      	movs	r2, #40	; 0x28
 8005edc:	761a      	strb	r2, [r3, #24]
	home_menu[3].align_x = DISP_ALIGN_CENTER;
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <UI_HomeScreenInit+0xfc>)
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	769a      	strb	r2, [r3, #26]

	home_status.origin_x = 0;
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
	home_status.origin_y = 0;
 8005eea:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	705a      	strb	r2, [r3, #1]
	home_status.size_x = 127;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005ef2:	227f      	movs	r2, #127	; 0x7f
 8005ef4:	70da      	strb	r2, [r3, #3]
	home_status.size_y = 10;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005ef8:	220a      	movs	r2, #10
 8005efa:	711a      	strb	r2, [r3, #4]
	home_status.color = DISP_COLOR_BLACK;
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	709a      	strb	r2, [r3, #2]
	home_status.align_x = DISP_ALIGN_CENTER;
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005f04:	2202      	movs	r2, #2
 8005f06:	715a      	strb	r2, [r3, #5]
	home_status.align_y = DISP_ALIGN_CENTER;
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <UI_HomeScreenInit+0x100>)
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	719a      	strb	r2, [r3, #6]
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	20000ee8 	.word	0x20000ee8
 8005f1c:	20000ef0 	.word	0x20000ef0
 8005f20:	20000ef8 	.word	0x20000ef8
 8005f24:	20000f14 	.word	0x20000f14

08005f28 <UI_HomeScreenDisplay>:


void UI_HomeScreenDisplay(uint8_t num_menu, uint8_t cp) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	4603      	mov	r3, r0
 8005f30:	460a      	mov	r2, r1
 8005f32:	71fb      	strb	r3, [r7, #7]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", plan.checkpoint[cp], cp, num_plan);
 8005f38:	79bb      	ldrb	r3, [r7, #6]
 8005f3a:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <UI_HomeScreenDisplay+0xa0>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	789b      	ldrb	r3, [r3, #2]
 8005f40:	4619      	mov	r1, r3
 8005f42:	79bb      	ldrb	r3, [r7, #6]
 8005f44:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <UI_HomeScreenDisplay+0xa4>)
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	f107 000c 	add.w	r0, r7, #12
 8005f4c:	9200      	str	r2, [sp, #0]
 8005f4e:	460a      	mov	r2, r1
 8005f50:	491f      	ldr	r1, [pc, #124]	; (8005fd0 <UI_HomeScreenDisplay+0xa8>)
 8005f52:	f008 fdf5 	bl	800eb40 <siprintf>
	DISP_DisplayText(&home_status, buff);
 8005f56:	f107 030c 	add.w	r3, r7, #12
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	481d      	ldr	r0, [pc, #116]	; (8005fd4 <UI_HomeScreenDisplay+0xac>)
 8005f5e:	f7fb fc9b 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
 8005f66:	e027      	b.n	8005fb8 <UI_HomeScreenDisplay+0x90>
		if(i == num_menu) home_menu[i].color = DISP_COLOR_BLACK;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d109      	bne.n	8005f84 <UI_HomeScreenDisplay+0x5c>
 8005f70:	4919      	ldr	r1, [pc, #100]	; (8005fd8 <UI_HomeScreenDisplay+0xb0>)
 8005f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f74:	4613      	mov	r3, r2
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3302      	adds	r3, #2
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e008      	b.n	8005f96 <UI_HomeScreenDisplay+0x6e>
		else home_menu[i].color = DISP_COLOR_WHITE;
 8005f84:	4914      	ldr	r1, [pc, #80]	; (8005fd8 <UI_HomeScreenDisplay+0xb0>)
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	440b      	add	r3, r1
 8005f90:	3302      	adds	r3, #2
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&home_menu[i], home_screen_menus[i]);
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	4a0e      	ldr	r2, [pc, #56]	; (8005fd8 <UI_HomeScreenDisplay+0xb0>)
 8005fa0:	441a      	add	r2, r3
 8005fa2:	490e      	ldr	r1, [pc, #56]	; (8005fdc <UI_HomeScreenDisplay+0xb4>)
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7fb fc73 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	ddd4      	ble.n	8005f68 <UI_HomeScreenDisplay+0x40>
	}
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	3728      	adds	r7, #40	; 0x28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000d54 	.word	0x20000d54
 8005fcc:	20000cc9 	.word	0x20000cc9
 8005fd0:	08010e98 	.word	0x08010e98
 8005fd4:	20000f14 	.word	0x20000f14
 8005fd8:	20000ef8 	.word	0x20000ef8
 8005fdc:	20000294 	.word	0x20000294

08005fe0 <UI_HomeScreen>:

UI_Menu_Lists UI_HomeScreen() {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
	static uint8_t num_menu = 0;
	static uint32_t tick = 0;
	uint8_t checkpoint = num_checkpoint;
 8005fe6:	4b60      	ldr	r3, [pc, #384]	; (8006168 <UI_HomeScreen+0x188>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	71fb      	strb	r3, [r7, #7]
	ui_home_screen:
	UI_HomeScreenDisplay(num_menu, checkpoint);
 8005fec:	4b5f      	ldr	r3, [pc, #380]	; (800616c <UI_HomeScreen+0x18c>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	79fa      	ldrb	r2, [r7, #7]
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff ff97 	bl	8005f28 <UI_HomeScreenDisplay>
	tick = HAL_GetTick();
 8005ffa:	f002 ff43 	bl	8008e84 <HAL_GetTick>
 8005ffe:	4603      	mov	r3, r0
 8006000:	4a5b      	ldr	r2, [pc, #364]	; (8006170 <UI_HomeScreen+0x190>)
 8006002:	6013      	str	r3, [r2, #0]
	while(1) {
		UI_ShowSensor();
 8006004:	f7ff fe0c 	bl	8005c20 <UI_ShowSensor>

		static uint8_t bt = 0;

		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006008:	f002 ff3c 	bl	8008e84 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	4b58      	ldr	r3, [pc, #352]	; (8006170 <UI_HomeScreen+0x190>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b45      	cmp	r3, #69	; 0x45
 8006016:	f240 8097 	bls.w	8006148 <UI_HomeScreen+0x168>
		if(bt == UI_ReadButton()) continue;
 800601a:	f7ff fe7f 	bl	8005d1c <UI_ReadButton>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	4b54      	ldr	r3, [pc, #336]	; (8006174 <UI_HomeScreen+0x194>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	f000 8090 	beq.w	800614c <UI_HomeScreen+0x16c>
		bt = UI_ReadButton();
 800602c:	f7ff fe76 	bl	8005d1c <UI_ReadButton>
 8006030:	4603      	mov	r3, r0
 8006032:	461a      	mov	r2, r3
 8006034:	4b4f      	ldr	r3, [pc, #316]	; (8006174 <UI_HomeScreen+0x194>)
 8006036:	701a      	strb	r2, [r3, #0]
//		if(bt & (SW_RG_PRESS | SW_LF_PRESS)) {
//			num_menu = (num_menu+2)%4;
//			goto ui_home_screen;
//		}
		if(bt & SW_UP_PRESS) {
 8006038:	4b4e      	ldr	r3, [pc, #312]	; (8006174 <UI_HomeScreen+0x194>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UI_HomeScreen+0x7a>
			if(num_menu > 0) num_menu--;
 8006044:	4b49      	ldr	r3, [pc, #292]	; (800616c <UI_HomeScreen+0x18c>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0cf      	beq.n	8005fec <UI_HomeScreen+0xc>
 800604c:	4b47      	ldr	r3, [pc, #284]	; (800616c <UI_HomeScreen+0x18c>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	4b45      	ldr	r3, [pc, #276]	; (800616c <UI_HomeScreen+0x18c>)
 8006056:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 8006058:	e7c8      	b.n	8005fec <UI_HomeScreen+0xc>
		}
		else if(bt & SW_DW_PRESS) {
 800605a:	4b46      	ldr	r3, [pc, #280]	; (8006174 <UI_HomeScreen+0x194>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <UI_HomeScreen+0xa0>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 8006066:	4b41      	ldr	r3, [pc, #260]	; (800616c <UI_HomeScreen+0x18c>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d806      	bhi.n	800607c <UI_HomeScreen+0x9c>
 800606e:	4b3f      	ldr	r3, [pc, #252]	; (800616c <UI_HomeScreen+0x18c>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4b3d      	ldr	r3, [pc, #244]	; (800616c <UI_HomeScreen+0x18c>)
 8006078:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 800607a:	e7b7      	b.n	8005fec <UI_HomeScreen+0xc>
			if(num_menu < 3) num_menu++; else return UI_SPEED_SET;
 800607c:	2303      	movs	r3, #3
 800607e:	e06f      	b.n	8006160 <UI_HomeScreen+0x180>
		}
		else if(bt & SW_RG_PRESS) {
 8006080:	4b3c      	ldr	r3, [pc, #240]	; (8006174 <UI_HomeScreen+0x194>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <UI_HomeScreen+0xc0>
			if(checkpoint < MAX_CHECKPOINT-1) checkpoint++; else checkpoint=0;
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b12      	cmp	r3, #18
 8006090:	d803      	bhi.n	800609a <UI_HomeScreen+0xba>
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	3301      	adds	r3, #1
 8006096:	71fb      	strb	r3, [r7, #7]
 8006098:	e7a8      	b.n	8005fec <UI_HomeScreen+0xc>
 800609a:	2300      	movs	r3, #0
 800609c:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 800609e:	e7a5      	b.n	8005fec <UI_HomeScreen+0xc>
		}
		else if(bt & SW_LF_PRESS) {
 80060a0:	4b34      	ldr	r3, [pc, #208]	; (8006174 <UI_HomeScreen+0x194>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <UI_HomeScreen+0xe0>
			if(checkpoint > 0) checkpoint--; else checkpoint=MAX_CHECKPOINT-1;
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <UI_HomeScreen+0xda>
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	71fb      	strb	r3, [r7, #7]
 80060b8:	e798      	b.n	8005fec <UI_HomeScreen+0xc>
 80060ba:	2313      	movs	r3, #19
 80060bc:	71fb      	strb	r3, [r7, #7]
			goto ui_home_screen;
 80060be:	e795      	b.n	8005fec <UI_HomeScreen+0xc>
		}
		else if(bt & SW_HM_PRESS) {
 80060c0:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <UI_HomeScreen+0x194>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <UI_HomeScreen+0xf4>
			num_menu = 0;
 80060cc:	4b27      	ldr	r3, [pc, #156]	; (800616c <UI_HomeScreen+0x18c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
			goto ui_home_screen;
 80060d2:	e78b      	b.n	8005fec <UI_HomeScreen+0xc>
		}
		switch(num_menu) {
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <UI_HomeScreen+0x18c>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d831      	bhi.n	8006140 <UI_HomeScreen+0x160>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UI_HomeScreen+0x104>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	0800610b 	.word	0x0800610b
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006131 	.word	0x08006131
		case 0:
			if(bt & SW_OK_PRESS) {
 80060f4:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <UI_HomeScreen+0x194>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d027      	beq.n	8006150 <UI_HomeScreen+0x170>
				num_checkpoint = checkpoint;
 8006100:	4a19      	ldr	r2, [pc, #100]	; (8006168 <UI_HomeScreen+0x188>)
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	7013      	strb	r3, [r2, #0]
				return UI_RUN;
 8006106:	2304      	movs	r3, #4
 8006108:	e02a      	b.n	8006160 <UI_HomeScreen+0x180>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <UI_HomeScreen+0x194>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01e      	beq.n	8006154 <UI_HomeScreen+0x174>
				num_checkpoint = checkpoint;
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <UI_HomeScreen+0x188>)
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	7013      	strb	r3, [r2, #0]
				return UI_PLAN_SET;
 800611c:	2305      	movs	r3, #5
 800611e:	e01f      	b.n	8006160 <UI_HomeScreen+0x180>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <UI_HomeScreen+0x194>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <UI_HomeScreen+0x178>
				return UI_PLAN_SELECT;
 800612c:	2306      	movs	r3, #6
 800612e:	e017      	b.n	8006160 <UI_HomeScreen+0x180>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <UI_HomeScreen+0x194>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <UI_HomeScreen+0x17c>
				return UI_SET;
 800613c:	2307      	movs	r3, #7
 800613e:	e00f      	b.n	8006160 <UI_HomeScreen+0x180>
			}
			break;
		default: num_menu = 0;
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <UI_HomeScreen+0x18c>)
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e75d      	b.n	8006004 <UI_HomeScreen+0x24>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006148:	bf00      	nop
 800614a:	e75b      	b.n	8006004 <UI_HomeScreen+0x24>
		if(bt == UI_ReadButton()) continue;
 800614c:	bf00      	nop
 800614e:	e759      	b.n	8006004 <UI_HomeScreen+0x24>
			break;
 8006150:	bf00      	nop
 8006152:	e757      	b.n	8006004 <UI_HomeScreen+0x24>
			break;
 8006154:	bf00      	nop
 8006156:	e755      	b.n	8006004 <UI_HomeScreen+0x24>
			break;
 8006158:	bf00      	nop
 800615a:	e753      	b.n	8006004 <UI_HomeScreen+0x24>
			break;
 800615c:	bf00      	nop
	while(1) {
 800615e:	e751      	b.n	8006004 <UI_HomeScreen+0x24>
		}
	}
	return UI_IDLE;
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000ccc 	.word	0x20000ccc
 800616c:	20000fcb 	.word	0x20000fcb
 8006170:	20000fcc 	.word	0x20000fcc
 8006174:	20000fd0 	.word	0x20000fd0

08006178 <UI_MirroringPlan>:



void UI_MirroringPlan() {
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
	for(int i=0; i<plan.num_action; i++) {
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e032      	b.n	80061ea <UI_MirroringPlan+0x72>
		Action_typedef temp;
		temp = GetActionOther(num_plan, i);
 8006184:	4b1e      	ldr	r3, [pc, #120]	; (8006200 <UI_MirroringPlan+0x88>)
 8006186:	7819      	ldrb	r1, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	463b      	mov	r3, r7
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fe82 	bl	8004e98 <GetActionOther>
		switch(temp.act) {
 8006194:	783b      	ldrb	r3, [r7, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	2b05      	cmp	r3, #5
 800619a:	d822      	bhi.n	80061e2 <UI_MirroringPlan+0x6a>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UI_MirroringPlan+0x2c>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061c3 	.word	0x080061c3
 80061ac:	080061e3 	.word	0x080061e3
 80061b0:	080061e3 	.word	0x080061e3
 80061b4:	080061c9 	.word	0x080061c9
 80061b8:	080061cf 	.word	0x080061cf
		case 1: temp.act = 2; break;
 80061bc:	2302      	movs	r3, #2
 80061be:	703b      	strb	r3, [r7, #0]
 80061c0:	e008      	b.n	80061d4 <UI_MirroringPlan+0x5c>
		case 2: temp.act = 1; break;
 80061c2:	2301      	movs	r3, #1
 80061c4:	703b      	strb	r3, [r7, #0]
 80061c6:	e005      	b.n	80061d4 <UI_MirroringPlan+0x5c>
		case 5: temp.act = 6; break;
 80061c8:	2306      	movs	r3, #6
 80061ca:	703b      	strb	r3, [r7, #0]
 80061cc:	e002      	b.n	80061d4 <UI_MirroringPlan+0x5c>
		case 6: temp.act = 5; break;
 80061ce:	2305      	movs	r3, #5
 80061d0:	703b      	strb	r3, [r7, #0]
 80061d2:	bf00      	nop
		default: continue;
		}
		SetActionOther(temp, i);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	463a      	mov	r2, r7
 80061da:	ca07      	ldmia	r2, {r0, r1, r2}
 80061dc:	f7fe fe9c 	bl	8004f18 <SetActionOther>
 80061e0:	e000      	b.n	80061e4 <UI_MirroringPlan+0x6c>
		default: continue;
 80061e2:	bf00      	nop
	for(int i=0; i<plan.num_action; i++) {
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <UI_MirroringPlan+0x8c>)
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4293      	cmp	r3, r2
 80061f4:	dbc6      	blt.n	8006184 <UI_MirroringPlan+0xc>
	}
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000cc9 	.word	0x20000cc9
 8006204:	20000d54 	.word	0x20000d54

08006208 <UI_SettingDisplayInit>:
		" Memory",
		" Hardware (NOP)",
		" Who Am I?"
};

void UI_SettingDisplayInit() {
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
	setting_menu[0].origin_x = 3;
 800620e:	4b42      	ldr	r3, [pc, #264]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006210:	2203      	movs	r2, #3
 8006212:	701a      	strb	r2, [r3, #0]
	setting_menu[0].origin_y = 13;
 8006214:	4b40      	ldr	r3, [pc, #256]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006216:	220d      	movs	r2, #13
 8006218:	705a      	strb	r2, [r3, #1]
	setting_menu[0].size_x = 120;
 800621a:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <UI_SettingDisplayInit+0x110>)
 800621c:	2278      	movs	r2, #120	; 0x78
 800621e:	70da      	strb	r2, [r3, #3]
	setting_menu[0].size_y = 11;
 8006220:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006222:	220b      	movs	r2, #11
 8006224:	711a      	strb	r2, [r3, #4]
	setting_menu[0].color = DISP_COLOR_WHITE;
 8006226:	4b3c      	ldr	r3, [pc, #240]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006228:	2200      	movs	r2, #0
 800622a:	709a      	strb	r2, [r3, #2]
	setting_menu[0].align_y = DISP_ALIGN_CENTER;
 800622c:	4b3a      	ldr	r3, [pc, #232]	; (8006318 <UI_SettingDisplayInit+0x110>)
 800622e:	2202      	movs	r2, #2
 8006230:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8006232:	2301      	movs	r3, #1
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	e050      	b.n	80062da <UI_SettingDisplayInit+0xd2>

		setting_menu[i].origin_x = setting_menu[0].origin_x;
 8006238:	4b37      	ldr	r3, [pc, #220]	; (8006318 <UI_SettingDisplayInit+0x110>)
 800623a:	7818      	ldrb	r0, [r3, #0]
 800623c:	4936      	ldr	r1, [pc, #216]	; (8006318 <UI_SettingDisplayInit+0x110>)
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	440b      	add	r3, r1
 8006248:	4602      	mov	r2, r0
 800624a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].origin_y = setting_menu[i-1].origin_y+setting_menu[0].size_y+2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1e5a      	subs	r2, r3, #1
 8006250:	4931      	ldr	r1, [pc, #196]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	440b      	add	r3, r1
 800625a:	3301      	adds	r3, #1
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	4413      	add	r3, r2
 8006264:	b2db      	uxtb	r3, r3
 8006266:	3302      	adds	r3, #2
 8006268:	b2d8      	uxtb	r0, r3
 800626a:	492b      	ldr	r1, [pc, #172]	; (8006318 <UI_SettingDisplayInit+0x110>)
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	440b      	add	r3, r1
 8006276:	3301      	adds	r3, #1
 8006278:	4602      	mov	r2, r0
 800627a:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_x = setting_menu[0].size_x;
 800627c:	4b26      	ldr	r3, [pc, #152]	; (8006318 <UI_SettingDisplayInit+0x110>)
 800627e:	78d8      	ldrb	r0, [r3, #3]
 8006280:	4925      	ldr	r1, [pc, #148]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	440b      	add	r3, r1
 800628c:	3303      	adds	r3, #3
 800628e:	4602      	mov	r2, r0
 8006290:	701a      	strb	r2, [r3, #0]
		setting_menu[i].size_y = setting_menu[0].size_y;
 8006292:	4b21      	ldr	r3, [pc, #132]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006294:	7918      	ldrb	r0, [r3, #4]
 8006296:	4920      	ldr	r1, [pc, #128]	; (8006318 <UI_SettingDisplayInit+0x110>)
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	440b      	add	r3, r1
 80062a2:	3304      	adds	r3, #4
 80062a4:	4602      	mov	r2, r0
 80062a6:	701a      	strb	r2, [r3, #0]
		setting_menu[i].color = setting_menu[0].color;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <UI_SettingDisplayInit+0x110>)
 80062aa:	7898      	ldrb	r0, [r3, #2]
 80062ac:	491a      	ldr	r1, [pc, #104]	; (8006318 <UI_SettingDisplayInit+0x110>)
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	440b      	add	r3, r1
 80062b8:	3302      	adds	r3, #2
 80062ba:	4602      	mov	r2, r0
 80062bc:	701a      	strb	r2, [r3, #0]
		setting_menu[i].align_y = setting_menu[0].align_y;
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <UI_SettingDisplayInit+0x110>)
 80062c0:	7998      	ldrb	r0, [r3, #6]
 80062c2:	4915      	ldr	r1, [pc, #84]	; (8006318 <UI_SettingDisplayInit+0x110>)
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	440b      	add	r3, r1
 80062ce:	3306      	adds	r3, #6
 80062d0:	4602      	mov	r2, r0
 80062d2:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3301      	adds	r3, #1
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	ddab      	ble.n	8006238 <UI_SettingDisplayInit+0x30>
	}

	setting_head.origin_x = 0;
 80062e0:	4b0e      	ldr	r3, [pc, #56]	; (800631c <UI_SettingDisplayInit+0x114>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
	setting_head.origin_y = 0;
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <UI_SettingDisplayInit+0x114>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	705a      	strb	r2, [r3, #1]
	setting_head.size_x = 127;
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <UI_SettingDisplayInit+0x114>)
 80062ee:	227f      	movs	r2, #127	; 0x7f
 80062f0:	70da      	strb	r2, [r3, #3]
	setting_head.size_y = 10;
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <UI_SettingDisplayInit+0x114>)
 80062f4:	220a      	movs	r2, #10
 80062f6:	711a      	strb	r2, [r3, #4]
	setting_head.color = DISP_COLOR_BLACK;
 80062f8:	4b08      	ldr	r3, [pc, #32]	; (800631c <UI_SettingDisplayInit+0x114>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	709a      	strb	r2, [r3, #2]
	setting_head.align_x = DISP_ALIGN_CENTER;
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <UI_SettingDisplayInit+0x114>)
 8006300:	2202      	movs	r2, #2
 8006302:	715a      	strb	r2, [r3, #5]
	setting_head.align_y = DISP_ALIGN_CENTER;
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <UI_SettingDisplayInit+0x114>)
 8006306:	2202      	movs	r2, #2
 8006308:	719a      	strb	r2, [r3, #6]
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20000f1c 	.word	0x20000f1c
 800631c:	20000f38 	.word	0x20000f38

08006320 <UI_SettingDisplay>:

void UI_SettingDisplay(uint8_t num) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	4a29      	ldr	r2, [pc, #164]	; (80063d4 <UI_SettingDisplay+0xb4>)
 800632e:	f992 2000 	ldrsb.w	r2, [r2]
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	2b03      	cmp	r3, #3
 8006336:	dd06      	ble.n	8006346 <UI_SettingDisplay+0x26>
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	3b03      	subs	r3, #3
 800633c:	b2db      	uxtb	r3, r3
 800633e:	b25a      	sxtb	r2, r3
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <UI_SettingDisplay+0xb4>)
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e009      	b.n	800635a <UI_SettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	4a22      	ldr	r2, [pc, #136]	; (80063d4 <UI_SettingDisplay+0xb4>)
 800634a:	f992 2000 	ldrsb.w	r2, [r2]
 800634e:	4293      	cmp	r3, r2
 8006350:	da03      	bge.n	800635a <UI_SettingDisplay+0x3a>
 8006352:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006356:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <UI_SettingDisplay+0xb4>)
 8006358:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e031      	b.n	80063c4 <UI_SettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <UI_SettingDisplay+0xb4>)
 8006362:	f993 3000 	ldrsb.w	r3, [r3]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	441a      	add	r2, r3
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	429a      	cmp	r2, r3
 8006370:	d109      	bne.n	8006386 <UI_SettingDisplay+0x66>
 8006372:	4919      	ldr	r1, [pc, #100]	; (80063d8 <UI_SettingDisplay+0xb8>)
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	440b      	add	r3, r1
 800637e:	3302      	adds	r3, #2
 8006380:	2201      	movs	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e008      	b.n	8006398 <UI_SettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8006386:	4914      	ldr	r1, [pc, #80]	; (80063d8 <UI_SettingDisplay+0xb8>)
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	440b      	add	r3, r1
 8006392:	3302      	adds	r3, #2
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], setting_menus[i+first_list]);
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	4a0d      	ldr	r2, [pc, #52]	; (80063d8 <UI_SettingDisplay+0xb8>)
 80063a2:	441a      	add	r2, r3
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <UI_SettingDisplay+0xb4>)
 80063a6:	f993 3000 	ldrsb.w	r3, [r3]
 80063aa:	4619      	mov	r1, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	440b      	add	r3, r1
 80063b0:	490a      	ldr	r1, [pc, #40]	; (80063dc <UI_SettingDisplay+0xbc>)
 80063b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f7fb fa6d 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	ddca      	ble.n	8006360 <UI_SettingDisplay+0x40>
	}
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000fd1 	.word	0x20000fd1
 80063d8:	20000f1c 	.word	0x20000f1c
 80063dc:	200002a4 	.word	0x200002a4

080063e0 <UI_Setting>:

UI_Menu_Lists UI_Setting() {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "SETTING");
 80063ea:	4964      	ldr	r1, [pc, #400]	; (800657c <UI_Setting+0x19c>)
 80063ec:	4864      	ldr	r0, [pc, #400]	; (8006580 <UI_Setting+0x1a0>)
 80063ee:	f7fb fa53 	bl	8001898 <DISP_DisplayText>
	ui_setting:
	UI_SettingDisplay(num_menu);
 80063f2:	4b64      	ldr	r3, [pc, #400]	; (8006584 <UI_Setting+0x1a4>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff ff92 	bl	8006320 <UI_SettingDisplay>
	tick = HAL_GetTick();
 80063fc:	f002 fd42 	bl	8008e84 <HAL_GetTick>
 8006400:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006402:	f002 fd3f 	bl	8008e84 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b45      	cmp	r3, #69	; 0x45
 800640e:	f240 80a0 	bls.w	8006552 <UI_Setting+0x172>
		if(bt == UI_ReadButton()) continue;
 8006412:	f7ff fc83 	bl	8005d1c <UI_ReadButton>
 8006416:	4603      	mov	r3, r0
 8006418:	461a      	mov	r2, r3
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	4293      	cmp	r3, r2
 800641e:	f000 809a 	beq.w	8006556 <UI_Setting+0x176>
		bt = UI_ReadButton();
 8006422:	f7ff fc7b 	bl	8005d1c <UI_ReadButton>
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <UI_Setting+0x72>
			if(num_menu==7) num_menu = 0; else num_menu++;
 8006434:	4b53      	ldr	r3, [pc, #332]	; (8006584 <UI_Setting+0x1a4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b07      	cmp	r3, #7
 800643a:	d103      	bne.n	8006444 <UI_Setting+0x64>
 800643c:	4b51      	ldr	r3, [pc, #324]	; (8006584 <UI_Setting+0x1a4>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e7d6      	b.n	80063f2 <UI_Setting+0x12>
 8006444:	4b4f      	ldr	r3, [pc, #316]	; (8006584 <UI_Setting+0x1a4>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b4d      	ldr	r3, [pc, #308]	; (8006584 <UI_Setting+0x1a4>)
 800644e:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8006450:	e7cf      	b.n	80063f2 <UI_Setting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <UI_Setting+0x9a>
			if(num_menu==0) num_menu = 7; else num_menu--;
 800645c:	4b49      	ldr	r3, [pc, #292]	; (8006584 <UI_Setting+0x1a4>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <UI_Setting+0x8c>
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <UI_Setting+0x1a4>)
 8006466:	2207      	movs	r2, #7
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e7c2      	b.n	80063f2 <UI_Setting+0x12>
 800646c:	4b45      	ldr	r3, [pc, #276]	; (8006584 <UI_Setting+0x1a4>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	3b01      	subs	r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	4b43      	ldr	r3, [pc, #268]	; (8006584 <UI_Setting+0x1a4>)
 8006476:	701a      	strb	r2, [r3, #0]
			goto ui_setting;
 8006478:	e7bb      	b.n	80063f2 <UI_Setting+0x12>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <UI_Setting+0xae>
			num_menu = 0;
 8006484:	4b3f      	ldr	r3, [pc, #252]	; (8006584 <UI_Setting+0x1a4>)
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800648a:	2302      	movs	r3, #2
 800648c:	e071      	b.n	8006572 <UI_Setting+0x192>
		}
		switch(num_menu) {
 800648e:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <UI_Setting+0x1a4>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b05      	cmp	r3, #5
 8006494:	d8b5      	bhi.n	8006402 <UI_Setting+0x22>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UI_Setting+0xbc>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064b5 	.word	0x080064b5
 80064a0:	080064c3 	.word	0x080064c3
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	080064df 	.word	0x080064df
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	08006545 	.word	0x08006545
		case 0:
			if(bt & SW_OK_PRESS) {
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d04d      	beq.n	800655a <UI_Setting+0x17a>
				return UI_SET_ADC;
 80064be:	2308      	movs	r3, #8
 80064c0:	e057      	b.n	8006572 <UI_Setting+0x192>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d048      	beq.n	800655e <UI_Setting+0x17e>
				return UI_SET_CALIB;
 80064cc:	2309      	movs	r3, #9
 80064ce:	e050      	b.n	8006572 <UI_Setting+0x192>
			}
			break;
		case 2:
			if(bt & SW_OK_PRESS) {
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d043      	beq.n	8006562 <UI_Setting+0x182>
				return UI_SET_CP;
 80064da:	230a      	movs	r3, #10
 80064dc:	e049      	b.n	8006572 <UI_Setting+0x192>
			}
			break;
		case 3:
			if(bt & SW_OK_PRESS) {
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d03e      	beq.n	8006566 <UI_Setting+0x186>
				return UI_SET_PID;
 80064e8:	230b      	movs	r3, #11
 80064ea:	e042      	b.n	8006572 <UI_Setting+0x192>
			}
			break;
		case 4:
			if(bt & SW_OK_PRESS) {
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d039      	beq.n	800656a <UI_Setting+0x18a>
				DISP_DisplayText(&short_message, "Are You Sure?");
 80064f6:	4924      	ldr	r1, [pc, #144]	; (8006588 <UI_Setting+0x1a8>)
 80064f8:	4824      	ldr	r0, [pc, #144]	; (800658c <UI_Setting+0x1ac>)
 80064fa:	f7fb f9cd 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80064fe:	f7ff fc0d 	bl	8005d1c <UI_ReadButton>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	4293      	cmp	r3, r2
 800650a:	d019      	beq.n	8006540 <UI_Setting+0x160>
					bt = UI_ReadButton();
 800650c:	f7ff fc06 	bl	8005d1c <UI_ReadButton>
 8006510:	4603      	mov	r3, r0
 8006512:	71fb      	strb	r3, [r7, #7]
					if(bt & SW_OK_PRESS) {
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <UI_Setting+0x154>
						DISP_DisplayText(&short_message, "Mirroring...");
 800651e:	491c      	ldr	r1, [pc, #112]	; (8006590 <UI_Setting+0x1b0>)
 8006520:	481a      	ldr	r0, [pc, #104]	; (800658c <UI_Setting+0x1ac>)
 8006522:	f7fb f9b9 	bl	8001898 <DISP_DisplayText>
						UI_MirroringPlan();
 8006526:	f7ff fe27 	bl	8006178 <UI_MirroringPlan>
						DISP_DisplayText(&short_message, "Mirroring Done!");
 800652a:	491a      	ldr	r1, [pc, #104]	; (8006594 <UI_Setting+0x1b4>)
 800652c:	4817      	ldr	r0, [pc, #92]	; (800658c <UI_Setting+0x1ac>)
 800652e:	f7fb f9b3 	bl	8001898 <DISP_DisplayText>
						goto ui_setting;
 8006532:	e75e      	b.n	80063f2 <UI_Setting+0x12>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0df      	beq.n	80064fe <UI_Setting+0x11e>
						goto ui_setting;
 800653e:	e758      	b.n	80063f2 <UI_Setting+0x12>
					if(bt == UI_ReadButton()) continue;
 8006540:	bf00      	nop
 8006542:	e7dc      	b.n	80064fe <UI_Setting+0x11e>
					}
				}
			}
			break;
		case 5:
			if(bt & SW_OK_PRESS) {
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00f      	beq.n	800656e <UI_Setting+0x18e>
				return UI_SET_MEM;
 800654e:	230d      	movs	r3, #13
 8006550:	e00f      	b.n	8006572 <UI_Setting+0x192>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006552:	bf00      	nop
 8006554:	e755      	b.n	8006402 <UI_Setting+0x22>
		if(bt == UI_ReadButton()) continue;
 8006556:	bf00      	nop
 8006558:	e753      	b.n	8006402 <UI_Setting+0x22>
			break;
 800655a:	bf00      	nop
 800655c:	e751      	b.n	8006402 <UI_Setting+0x22>
			break;
 800655e:	bf00      	nop
 8006560:	e74f      	b.n	8006402 <UI_Setting+0x22>
			break;
 8006562:	bf00      	nop
 8006564:	e74d      	b.n	8006402 <UI_Setting+0x22>
			break;
 8006566:	bf00      	nop
 8006568:	e74b      	b.n	8006402 <UI_Setting+0x22>
			break;
 800656a:	bf00      	nop
 800656c:	e749      	b.n	8006402 <UI_Setting+0x22>
			}
			break;
 800656e:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8006570:	e747      	b.n	8006402 <UI_Setting+0x22>
		}
	}
	return UI_IDLE;
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	08010f18 	.word	0x08010f18
 8006580:	20000f14 	.word	0x20000f14
 8006584:	20000fd2 	.word	0x20000fd2
 8006588:	08010f20 	.word	0x08010f20
 800658c:	20000ee8 	.word	0x20000ee8
 8006590:	08010f30 	.word	0x08010f30
 8006594:	08010f40 	.word	0x08010f40

08006598 <UI_PlanSetDisplayInit>:
		" Delay",
		" Enc Val"
};


void UI_PlanSetDisplayInit() {
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
	planset_list_name[0].origin_x = 6;
 800659e:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065a0:	2206      	movs	r2, #6
 80065a2:	701a      	strb	r2, [r3, #0]
	planset_list_name[0].origin_y = 16;
 80065a4:	4b47      	ldr	r3, [pc, #284]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065a6:	2210      	movs	r2, #16
 80065a8:	705a      	strb	r2, [r3, #1]
	planset_list_name[0].size_x = 54;
 80065aa:	4b46      	ldr	r3, [pc, #280]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065ac:	2236      	movs	r2, #54	; 0x36
 80065ae:	70da      	strb	r2, [r3, #3]
	planset_list_name[0].size_y = 11;
 80065b0:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065b2:	220b      	movs	r2, #11
 80065b4:	711a      	strb	r2, [r3, #4]
	planset_list_name[0].color = DISP_COLOR_WHITE;
 80065b6:	4b43      	ldr	r3, [pc, #268]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	709a      	strb	r2, [r3, #2]
	planset_list_name[0].align_y = DISP_ALIGN_CENTER;
 80065bc:	4b41      	ldr	r3, [pc, #260]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065be:	2202      	movs	r2, #2
 80065c0:	719a      	strb	r2, [r3, #6]

	planset_list_value[0] = planset_list_name[0];
 80065c2:	4b41      	ldr	r3, [pc, #260]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 80065c4:	4a3f      	ldr	r2, [pc, #252]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065ca:	6018      	str	r0, [r3, #0]
 80065cc:	3304      	adds	r3, #4
 80065ce:	8019      	strh	r1, [r3, #0]
 80065d0:	3302      	adds	r3, #2
 80065d2:	0c0a      	lsrs	r2, r1, #16
 80065d4:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].origin_x = 62;
 80065d6:	4b3c      	ldr	r3, [pc, #240]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 80065d8:	223e      	movs	r2, #62	; 0x3e
 80065da:	701a      	strb	r2, [r3, #0]
	planset_list_value[0].size_x = 58;
 80065dc:	4b3a      	ldr	r3, [pc, #232]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 80065de:	223a      	movs	r2, #58	; 0x3a
 80065e0:	70da      	strb	r2, [r3, #3]
	planset_list_value[0].align_x = DISP_ALIGN_CENTER;
 80065e2:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 80065e4:	2202      	movs	r2, #2
 80065e6:	715a      	strb	r2, [r3, #5]


	for(int i=1; i<4; i++) {
 80065e8:	2301      	movs	r3, #1
 80065ea:	607b      	str	r3, [r7, #4]
 80065ec:	e04c      	b.n	8006688 <UI_PlanSetDisplayInit+0xf0>
		planset_list_name[i] = planset_list_name[0];
 80065ee:	4935      	ldr	r1, [pc, #212]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	440b      	add	r3, r1
 80065fa:	4a32      	ldr	r2, [pc, #200]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 80065fc:	6810      	ldr	r0, [r2, #0]
 80065fe:	6018      	str	r0, [r3, #0]
 8006600:	8891      	ldrh	r1, [r2, #4]
 8006602:	7992      	ldrb	r2, [r2, #6]
 8006604:	8099      	strh	r1, [r3, #4]
 8006606:	719a      	strb	r2, [r3, #6]
		planset_list_name[i].origin_y = planset_list_name[i-1].origin_y+planset_list_name[0].size_y+1;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	1e5a      	subs	r2, r3, #1
 800660c:	492d      	ldr	r1, [pc, #180]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 800660e:	4613      	mov	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	440b      	add	r3, r1
 8006616:	3301      	adds	r3, #1
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	4b2a      	ldr	r3, [pc, #168]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 800661c:	791b      	ldrb	r3, [r3, #4]
 800661e:	4413      	add	r3, r2
 8006620:	b2db      	uxtb	r3, r3
 8006622:	3301      	adds	r3, #1
 8006624:	b2d8      	uxtb	r0, r3
 8006626:	4927      	ldr	r1, [pc, #156]	; (80066c4 <UI_PlanSetDisplayInit+0x12c>)
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	440b      	add	r3, r1
 8006632:	3301      	adds	r3, #1
 8006634:	4602      	mov	r2, r0
 8006636:	701a      	strb	r2, [r3, #0]

		planset_list_value[i] = planset_list_value[0];
 8006638:	4923      	ldr	r1, [pc, #140]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	440b      	add	r3, r1
 8006644:	4a20      	ldr	r2, [pc, #128]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 8006646:	6810      	ldr	r0, [r2, #0]
 8006648:	6018      	str	r0, [r3, #0]
 800664a:	8891      	ldrh	r1, [r2, #4]
 800664c:	7992      	ldrb	r2, [r2, #6]
 800664e:	8099      	strh	r1, [r3, #4]
 8006650:	719a      	strb	r2, [r3, #6]
		planset_list_value[i].origin_y = planset_list_value[i-1].origin_y+planset_list_value[0].size_y+1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	1e5a      	subs	r2, r3, #1
 8006656:	491c      	ldr	r1, [pc, #112]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 8006658:	4613      	mov	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	1a9b      	subs	r3, r3, r2
 800665e:	440b      	add	r3, r1
 8006660:	3301      	adds	r3, #1
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	4413      	add	r3, r2
 800666a:	b2db      	uxtb	r3, r3
 800666c:	3301      	adds	r3, #1
 800666e:	b2d8      	uxtb	r0, r3
 8006670:	4915      	ldr	r1, [pc, #84]	; (80066c8 <UI_PlanSetDisplayInit+0x130>)
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	440b      	add	r3, r1
 800667c:	3301      	adds	r3, #1
 800667e:	4602      	mov	r2, r0
 8006680:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3301      	adds	r3, #1
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b03      	cmp	r3, #3
 800668c:	ddaf      	ble.n	80065ee <UI_PlanSetDisplayInit+0x56>
	}

	planset_head.origin_x = 0;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
	planset_head.origin_y = 0;
 8006694:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 8006696:	2200      	movs	r2, #0
 8006698:	705a      	strb	r2, [r3, #1]
	planset_head.size_x = 127;
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 800669c:	227f      	movs	r2, #127	; 0x7f
 800669e:	70da      	strb	r2, [r3, #3]
	planset_head.size_y = 13;
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 80066a2:	220d      	movs	r2, #13
 80066a4:	711a      	strb	r2, [r3, #4]
	planset_head.color = DISP_COLOR_BLACK;
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	709a      	strb	r2, [r3, #2]
	planset_head.align_x = DISP_ALIGN_LEFT;
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	715a      	strb	r2, [r3, #5]
	planset_head.align_y = DISP_ALIGN_CENTER;
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <UI_PlanSetDisplayInit+0x134>)
 80066b4:	2202      	movs	r2, #2
 80066b6:	719a      	strb	r2, [r3, #6]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	20000f40 	.word	0x20000f40
 80066c8:	20000f5c 	.word	0x20000f5c
 80066cc:	20000f78 	.word	0x20000f78

080066d0 <UI_PlanSetDisplay>:

void UI_PlanSetDisplay(int8_t num, Action_typedef* plan, uint8_t num_index) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	; 0x30
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
 80066dc:	4613      	mov	r3, r2
 80066de:	71bb      	strb	r3, [r7, #6]
	char buff[22];
	static int8_t first_list = 0;
	uint8_t temp = (num == -1);
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	bf0c      	ite	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	2300      	movne	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	sprintf(buff, " %03i ~ %s", num_index, plan_act_lists[plan->act]);
 80066f4:	79ba      	ldrb	r2, [r7, #6]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	4bba      	ldr	r3, [pc, #744]	; (80069e8 <UI_PlanSetDisplay+0x318>)
 80066fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006702:	f107 000c 	add.w	r0, r7, #12
 8006706:	49b9      	ldr	r1, [pc, #740]	; (80069ec <UI_PlanSetDisplay+0x31c>)
 8006708:	f008 fa1a 	bl	800eb40 <siprintf>
	if(temp) planset_head.color = DISP_COLOR_BLACK; else planset_head.color = DISP_COLOR_WHITE;
 800670c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <UI_PlanSetDisplay+0x4c>
 8006714:	4bb6      	ldr	r3, [pc, #728]	; (80069f0 <UI_PlanSetDisplay+0x320>)
 8006716:	2201      	movs	r2, #1
 8006718:	709a      	strb	r2, [r3, #2]
 800671a:	e002      	b.n	8006722 <UI_PlanSetDisplay+0x52>
 800671c:	4bb4      	ldr	r3, [pc, #720]	; (80069f0 <UI_PlanSetDisplay+0x320>)
 800671e:	2200      	movs	r2, #0
 8006720:	709a      	strb	r2, [r3, #2]
	DISP_DisplayText(&planset_head, buff);
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	4619      	mov	r1, r3
 8006728:	48b1      	ldr	r0, [pc, #708]	; (80069f0 <UI_PlanSetDisplay+0x320>)
 800672a:	f7fb f8b5 	bl	8001898 <DISP_DisplayText>
	DISP_DrawLineSimple(0, 14, 127, 14, DISP_COLOR_WHITE);
 800672e:	2300      	movs	r3, #0
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	230e      	movs	r3, #14
 8006734:	227f      	movs	r2, #127	; 0x7f
 8006736:	210e      	movs	r1, #14
 8006738:	2000      	movs	r0, #0
 800673a:	f7fa ff19 	bl	8001570 <DISP_DrawLineSimple>
	DISP_OLEDUpdate(0, 13, 127, 13);
 800673e:	230d      	movs	r3, #13
 8006740:	227f      	movs	r2, #127	; 0x7f
 8006742:	210d      	movs	r1, #13
 8006744:	2000      	movs	r0, #0
 8006746:	f7fb f979 	bl	8001a3c <DISP_OLEDUpdate>
	if(num==-1) num = 0;
 800674a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d101      	bne.n	8006758 <UI_PlanSetDisplay+0x88>
 8006754:	2300      	movs	r3, #0
 8006756:	71fb      	strb	r3, [r7, #7]
	if(num - first_list >= 4) first_list = (num-3);
 8006758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675c:	4aa5      	ldr	r2, [pc, #660]	; (80069f4 <UI_PlanSetDisplay+0x324>)
 800675e:	f992 2000 	ldrsb.w	r2, [r2]
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	2b03      	cmp	r3, #3
 8006766:	dd06      	ble.n	8006776 <UI_PlanSetDisplay+0xa6>
 8006768:	79fb      	ldrb	r3, [r7, #7]
 800676a:	3b03      	subs	r3, #3
 800676c:	b2db      	uxtb	r3, r3
 800676e:	b25a      	sxtb	r2, r3
 8006770:	4ba0      	ldr	r3, [pc, #640]	; (80069f4 <UI_PlanSetDisplay+0x324>)
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e009      	b.n	800678a <UI_PlanSetDisplay+0xba>
	else if(num < first_list) first_list = num;
 8006776:	4b9f      	ldr	r3, [pc, #636]	; (80069f4 <UI_PlanSetDisplay+0x324>)
 8006778:	f993 3000 	ldrsb.w	r3, [r3]
 800677c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	da02      	bge.n	800678a <UI_PlanSetDisplay+0xba>
 8006784:	4a9b      	ldr	r2, [pc, #620]	; (80069f4 <UI_PlanSetDisplay+0x324>)
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	7013      	strb	r3, [r2, #0]

	for(int i=0; i<4; i++) {
 800678a:	2300      	movs	r3, #0
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
 800678e:	e23d      	b.n	8006c0c <UI_PlanSetDisplay+0x53c>
		if(i + first_list == num && !temp) {
 8006790:	4b98      	ldr	r3, [pc, #608]	; (80069f4 <UI_PlanSetDisplay+0x324>)
 8006792:	f993 3000 	ldrsb.w	r3, [r3]
 8006796:	461a      	mov	r2, r3
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	441a      	add	r2, r3
 800679c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d116      	bne.n	80067d2 <UI_PlanSetDisplay+0x102>
 80067a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d112      	bne.n	80067d2 <UI_PlanSetDisplay+0x102>
			planset_list_name[i].color = DISP_COLOR_BLACK;
 80067ac:	4992      	ldr	r1, [pc, #584]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	440b      	add	r3, r1
 80067b8:	3302      	adds	r3, #2
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_BLACK;
 80067be:	498f      	ldr	r1, [pc, #572]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 80067c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c2:	4613      	mov	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	440b      	add	r3, r1
 80067ca:	3302      	adds	r3, #2
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e011      	b.n	80067f6 <UI_PlanSetDisplay+0x126>
		}
		else {
			planset_list_name[i].color = DISP_COLOR_WHITE;
 80067d2:	4989      	ldr	r1, [pc, #548]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	4613      	mov	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	440b      	add	r3, r1
 80067de:	3302      	adds	r3, #2
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
			planset_list_value[i].color = DISP_COLOR_WHITE;
 80067e4:	4985      	ldr	r1, [pc, #532]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 80067e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	440b      	add	r3, r1
 80067f0:	3302      	adds	r3, #2
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
		}
		switch(first_list + i) {
 80067f6:	4b7f      	ldr	r3, [pc, #508]	; (80069f4 <UI_PlanSetDisplay+0x324>)
 80067f8:	f993 3000 	ldrsb.w	r3, [r3]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	4413      	add	r3, r2
 8006802:	2b0c      	cmp	r3, #12
 8006804:	f200 81ff 	bhi.w	8006c06 <UI_PlanSetDisplay+0x536>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UI_PlanSetDisplay+0x140>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006845 	.word	0x08006845
 8006814:	08006885 	.word	0x08006885
 8006818:	080068bb 	.word	0x080068bb
 800681c:	08006925 	.word	0x08006925
 8006820:	08006965 	.word	0x08006965
 8006824:	080069a7 	.word	0x080069a7
 8006828:	08006a25 	.word	0x08006a25
 800682c:	08006a65 	.word	0x08006a65
 8006830:	08006aa5 	.word	0x08006aa5
 8006834:	08006ae5 	.word	0x08006ae5
 8006838:	08006b43 	.word	0x08006b43
 800683c:	08006bb1 	.word	0x08006bb1
 8006840:	08006bdb 	.word	0x08006bdb
		case 0:
			DISP_DisplayText(&planset_list_name[i], " Sensor");
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	4a6a      	ldr	r2, [pc, #424]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 800684e:	4413      	add	r3, r2
 8006850:	496b      	ldr	r1, [pc, #428]	; (8006a00 <UI_PlanSetDisplay+0x330>)
 8006852:	4618      	mov	r0, r3
 8006854:	f7fb f820 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->sen_trig);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	461a      	mov	r2, r3
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	4968      	ldr	r1, [pc, #416]	; (8006a04 <UI_PlanSetDisplay+0x334>)
 8006864:	4618      	mov	r0, r3
 8006866:	f008 f96b 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800686a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686c:	4613      	mov	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	4a62      	ldr	r2, [pc, #392]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 8006874:	4413      	add	r3, r2
 8006876:	f107 020c 	add.w	r2, r7, #12
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f7fb f80b 	bl	8001898 <DISP_DisplayText>
			break;
 8006882:	e1c0      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 1:
			DISP_DisplayText(&planset_list_name[i], " Mode");
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	4a5a      	ldr	r2, [pc, #360]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 800688e:	4413      	add	r3, r2
 8006890:	495d      	ldr	r1, [pc, #372]	; (8006a08 <UI_PlanSetDisplay+0x338>)
 8006892:	4618      	mov	r0, r3
 8006894:	f7fb f800 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], plan_mode_lists[plan->act_mode]);
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	4a56      	ldr	r2, [pc, #344]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 80068a2:	441a      	add	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	789b      	ldrb	r3, [r3, #2]
 80068a8:	4619      	mov	r1, r3
 80068aa:	4b58      	ldr	r3, [pc, #352]	; (8006a0c <UI_PlanSetDisplay+0x33c>)
 80068ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fa fff0 	bl	8001898 <DISP_DisplayText>
			break;
 80068b8:	e1a5      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 2:
			if(plan->act != PLAN_JUMP) {
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b0b      	cmp	r3, #11
 80068c0:	d010      	beq.n	80068e4 <UI_PlanSetDisplay+0x214>
				DISP_DisplayText(&planset_list_name[i], plan_act_value_lists[plan->act_mode]);
 80068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	4a4b      	ldr	r2, [pc, #300]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 80068cc:	441a      	add	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	789b      	ldrb	r3, [r3, #2]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4b4e      	ldr	r3, [pc, #312]	; (8006a10 <UI_PlanSetDisplay+0x340>)
 80068d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fa ffdb 	bl	8001898 <DISP_DisplayText>
 80068e2:	e009      	b.n	80068f8 <UI_PlanSetDisplay+0x228>
			}
			else {
				DISP_DisplayText(&planset_list_name[i], "Index");
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	4613      	mov	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	4a42      	ldr	r2, [pc, #264]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 80068ee:	4413      	add	r3, r2
 80068f0:	4948      	ldr	r1, [pc, #288]	; (8006a14 <UI_PlanSetDisplay+0x344>)
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fa ffd0 	bl	8001898 <DISP_DisplayText>
			}
			sprintf(buff, "%i", plan->act_value);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	78db      	ldrb	r3, [r3, #3]
 80068fc:	461a      	mov	r2, r3
 80068fe:	f107 030c 	add.w	r3, r7, #12
 8006902:	4940      	ldr	r1, [pc, #256]	; (8006a04 <UI_PlanSetDisplay+0x334>)
 8006904:	4618      	mov	r0, r3
 8006906:	f008 f91b 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	4a3a      	ldr	r2, [pc, #232]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 8006914:	4413      	add	r3, r2
 8006916:	f107 020c 	add.w	r2, r7, #12
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f7fa ffbb 	bl	8001898 <DISP_DisplayText>
			break;
 8006922:	e170      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 3:
			DISP_DisplayText(&planset_list_name[i], " Brake");
 8006924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	4a32      	ldr	r2, [pc, #200]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 800692e:	4413      	add	r3, r2
 8006930:	4939      	ldr	r1, [pc, #228]	; (8006a18 <UI_PlanSetDisplay+0x348>)
 8006932:	4618      	mov	r0, r3
 8006934:	f7fa ffb0 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->brake);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	461a      	mov	r2, r3
 800693e:	f107 030c 	add.w	r3, r7, #12
 8006942:	4930      	ldr	r1, [pc, #192]	; (8006a04 <UI_PlanSetDisplay+0x334>)
 8006944:	4618      	mov	r0, r3
 8006946:	f008 f8fb 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800694a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694c:	4613      	mov	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 8006954:	4413      	add	r3, r2
 8006956:	f107 020c 	add.w	r2, r7, #12
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f7fa ff9b 	bl	8001898 <DISP_DisplayText>
			break;
 8006962:	e150      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 4:
			DISP_DisplayText(&planset_list_name[i], " Fw Sp");
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 800696e:	4413      	add	r3, r2
 8006970:	492a      	ldr	r1, [pc, #168]	; (8006a1c <UI_PlanSetDisplay+0x34c>)
 8006972:	4618      	mov	r0, r3
 8006974:	f7fa ff90 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->forward_speed);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800697e:	461a      	mov	r2, r3
 8006980:	f107 030c 	add.w	r3, r7, #12
 8006984:	491f      	ldr	r1, [pc, #124]	; (8006a04 <UI_PlanSetDisplay+0x334>)
 8006986:	4618      	mov	r0, r3
 8006988:	f008 f8da 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 800698c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	4a19      	ldr	r2, [pc, #100]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 8006996:	4413      	add	r3, r2
 8006998:	f107 020c 	add.w	r2, r7, #12
 800699c:	4611      	mov	r1, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fa ff7a 	bl	8001898 <DISP_DisplayText>
			break;
 80069a4:	e12f      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 5:
			DISP_DisplayText(&planset_list_name[i], " Rv Sp");
 80069a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a8:	4613      	mov	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <UI_PlanSetDisplay+0x328>)
 80069b0:	4413      	add	r3, r2
 80069b2:	491b      	ldr	r1, [pc, #108]	; (8006a20 <UI_PlanSetDisplay+0x350>)
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fa ff6f 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->reverse_speed);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80069c0:	461a      	mov	r2, r3
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	490f      	ldr	r1, [pc, #60]	; (8006a04 <UI_PlanSetDisplay+0x334>)
 80069c8:	4618      	mov	r0, r3
 80069ca:	f008 f8b9 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 80069ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d0:	4613      	mov	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	4a09      	ldr	r2, [pc, #36]	; (80069fc <UI_PlanSetDisplay+0x32c>)
 80069d8:	4413      	add	r3, r2
 80069da:	f107 020c 	add.w	r2, r7, #12
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fa ff59 	bl	8001898 <DISP_DisplayText>
			break;
 80069e6:	e10e      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
 80069e8:	200002c4 	.word	0x200002c4
 80069ec:	08010fec 	.word	0x08010fec
 80069f0:	20000f78 	.word	0x20000f78
 80069f4:	20000fd3 	.word	0x20000fd3
 80069f8:	20000f40 	.word	0x20000f40
 80069fc:	20000f5c 	.word	0x20000f5c
 8006a00:	08010ff8 	.word	0x08010ff8
 8006a04:	08011000 	.word	0x08011000
 8006a08:	08011004 	.word	0x08011004
 8006a0c:	200002f8 	.word	0x200002f8
 8006a10:	20000304 	.word	0x20000304
 8006a14:	0801100c 	.word	0x0801100c
 8006a18:	08011014 	.word	0x08011014
 8006a1c:	0801101c 	.word	0x0801101c
 8006a20:	08011024 	.word	0x08011024
		case 6:
			DISP_DisplayText(&planset_list_name[i], " Wait");
 8006a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a26:	4613      	mov	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	4a7c      	ldr	r2, [pc, #496]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006a2e:	4413      	add	r3, r2
 8006a30:	497c      	ldr	r1, [pc, #496]	; (8006c24 <UI_PlanSetDisplay+0x554>)
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fa ff30 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->wait_time);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	79db      	ldrb	r3, [r3, #7]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f107 030c 	add.w	r3, r7, #12
 8006a42:	4979      	ldr	r1, [pc, #484]	; (8006c28 <UI_PlanSetDisplay+0x558>)
 8006a44:	4618      	mov	r0, r3
 8006a46:	f008 f87b 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	4a76      	ldr	r2, [pc, #472]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006a54:	4413      	add	r3, r2
 8006a56:	f107 020c 	add.w	r2, r7, #12
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fa ff1b 	bl	8001898 <DISP_DisplayText>
			break;
 8006a62:	e0d0      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 7:
			DISP_DisplayText(&planset_list_name[i], " Bst Tim");
 8006a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a66:	4613      	mov	r3, r2
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	1a9b      	subs	r3, r3, r2
 8006a6c:	4a6c      	ldr	r2, [pc, #432]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006a6e:	4413      	add	r3, r2
 8006a70:	496f      	ldr	r1, [pc, #444]	; (8006c30 <UI_PlanSetDisplay+0x560>)
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fa ff10 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_time);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	7a1b      	ldrb	r3, [r3, #8]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	4969      	ldr	r1, [pc, #420]	; (8006c28 <UI_PlanSetDisplay+0x558>)
 8006a84:	4618      	mov	r0, r3
 8006a86:	f008 f85b 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	4a66      	ldr	r2, [pc, #408]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006a94:	4413      	add	r3, r2
 8006a96:	f107 020c 	add.w	r2, r7, #12
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fa fefb 	bl	8001898 <DISP_DisplayText>
			break;
 8006aa2:	e0b0      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 8:
			DISP_DisplayText(&planset_list_name[i], " Bst Sp");
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	4a5c      	ldr	r2, [pc, #368]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006aae:	4413      	add	r3, r2
 8006ab0:	4960      	ldr	r1, [pc, #384]	; (8006c34 <UI_PlanSetDisplay+0x564>)
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fa fef0 	bl	8001898 <DISP_DisplayText>
			sprintf(buff, "%i", plan->boost_speed);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	7a5b      	ldrb	r3, [r3, #9]
 8006abc:	461a      	mov	r2, r3
 8006abe:	f107 030c 	add.w	r3, r7, #12
 8006ac2:	4959      	ldr	r1, [pc, #356]	; (8006c28 <UI_PlanSetDisplay+0x558>)
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f008 f83b 	bl	800eb40 <siprintf>
			DISP_DisplayText(&planset_list_value[i], buff);
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	4613      	mov	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	4a56      	ldr	r2, [pc, #344]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f107 020c 	add.w	r2, r7, #12
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fa fedb 	bl	8001898 <DISP_DisplayText>
			break;
 8006ae2:	e090      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 9:
			DISP_DisplayText(&planset_list_name[i], " Speed");
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	4a4c      	ldr	r2, [pc, #304]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006aee:	4413      	add	r3, r2
 8006af0:	4951      	ldr	r1, [pc, #324]	; (8006c38 <UI_PlanSetDisplay+0x568>)
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fa fed0 	bl	8001898 <DISP_DisplayText>
			if(plan->unit_speed == 0) {
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	7a9b      	ldrb	r3, [r3, #10]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <UI_PlanSetDisplay+0x446>
				DISP_DisplayText(&planset_list_value[i], "Default");
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	4613      	mov	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	4a48      	ldr	r2, [pc, #288]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006b0a:	4413      	add	r3, r2
 8006b0c:	494b      	ldr	r1, [pc, #300]	; (8006c3c <UI_PlanSetDisplay+0x56c>)
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fa fec2 	bl	8001898 <DISP_DisplayText>
			}
			else {
				sprintf(buff, "%i", plan->unit_speed);
				DISP_DisplayText(&planset_list_value[i], buff);
			}
			break;
 8006b14:	e077      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
				sprintf(buff, "%i", plan->unit_speed);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	7a9b      	ldrb	r3, [r3, #10]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4941      	ldr	r1, [pc, #260]	; (8006c28 <UI_PlanSetDisplay+0x558>)
 8006b22:	4618      	mov	r0, r3
 8006b24:	f008 f80c 	bl	800eb40 <siprintf>
				DISP_DisplayText(&planset_list_value[i], buff);
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	4a3e      	ldr	r2, [pc, #248]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006b32:	4413      	add	r3, r2
 8006b34:	f107 020c 	add.w	r2, r7, #12
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fa feac 	bl	8001898 <DISP_DisplayText>
			break;
 8006b40:	e061      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 10:
			DISP_DisplayText(&planset_list_name[i], " Color");
 8006b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b44:	4613      	mov	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	4a35      	ldr	r2, [pc, #212]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006b4c:	4413      	add	r3, r2
 8006b4e:	493c      	ldr	r1, [pc, #240]	; (8006c40 <UI_PlanSetDisplay+0x570>)
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fa fea1 	bl	8001898 <DISP_DisplayText>
			switch(plan->status) {
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	7adb      	ldrb	r3, [r3, #11]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d01c      	beq.n	8006b98 <UI_PlanSetDisplay+0x4c8>
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	dc50      	bgt.n	8006c04 <UI_PlanSetDisplay+0x534>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <UI_PlanSetDisplay+0x49c>
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d00b      	beq.n	8006b82 <UI_PlanSetDisplay+0x4b2>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
			}
			break;
 8006b6a:	e04b      	b.n	8006c04 <UI_PlanSetDisplay+0x534>
			case 0: DISP_DisplayText(&planset_list_value[i], "Idem"); break;
 8006b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6e:	4613      	mov	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	4a2d      	ldr	r2, [pc, #180]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006b76:	4413      	add	r3, r2
 8006b78:	4932      	ldr	r1, [pc, #200]	; (8006c44 <UI_PlanSetDisplay+0x574>)
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fa fe8c 	bl	8001898 <DISP_DisplayText>
 8006b80:	e015      	b.n	8006bae <UI_PlanSetDisplay+0x4de>
			case 1: DISP_DisplayText(&planset_list_value[i], "Black"); break;
 8006b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	4a28      	ldr	r2, [pc, #160]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006b8c:	4413      	add	r3, r2
 8006b8e:	492e      	ldr	r1, [pc, #184]	; (8006c48 <UI_PlanSetDisplay+0x578>)
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fa fe81 	bl	8001898 <DISP_DisplayText>
 8006b96:	e00a      	b.n	8006bae <UI_PlanSetDisplay+0x4de>
			case 2: DISP_DisplayText(&planset_list_value[i], "White"); break;
 8006b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006ba2:	4413      	add	r3, r2
 8006ba4:	4929      	ldr	r1, [pc, #164]	; (8006c4c <UI_PlanSetDisplay+0x57c>)
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fa fe76 	bl	8001898 <DISP_DisplayText>
 8006bac:	bf00      	nop
			break;
 8006bae:	e029      	b.n	8006c04 <UI_PlanSetDisplay+0x534>
		case 11:
			DISP_DisplayText(&planset_list_name[i], " Insert");
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	4a19      	ldr	r2, [pc, #100]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006bba:	4413      	add	r3, r2
 8006bbc:	4924      	ldr	r1, [pc, #144]	; (8006c50 <UI_PlanSetDisplay+0x580>)
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fa fe6a 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	4920      	ldr	r1, [pc, #128]	; (8006c54 <UI_PlanSetDisplay+0x584>)
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fa fe60 	bl	8001898 <DISP_DisplayText>
			break;
 8006bd8:	e015      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
		case 12:
			DISP_DisplayText(&planset_list_name[i], " Delete");
 8006bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bdc:	4613      	mov	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <UI_PlanSetDisplay+0x550>)
 8006be4:	4413      	add	r3, r2
 8006be6:	491c      	ldr	r1, [pc, #112]	; (8006c58 <UI_PlanSetDisplay+0x588>)
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa fe55 	bl	8001898 <DISP_DisplayText>
			DISP_DisplayText(&planset_list_value[i], " ");
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <UI_PlanSetDisplay+0x55c>)
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4916      	ldr	r1, [pc, #88]	; (8006c54 <UI_PlanSetDisplay+0x584>)
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fa fe4b 	bl	8001898 <DISP_DisplayText>
			break;
 8006c02:	e000      	b.n	8006c06 <UI_PlanSetDisplay+0x536>
			break;
 8006c04:	bf00      	nop
	for(int i=0; i<4; i++) {
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	3301      	adds	r3, #1
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	f77f adbe 	ble.w	8006790 <UI_PlanSetDisplay+0xc0>
		}
	}
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	3728      	adds	r7, #40	; 0x28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000f40 	.word	0x20000f40
 8006c24:	0801102c 	.word	0x0801102c
 8006c28:	08011000 	.word	0x08011000
 8006c2c:	20000f5c 	.word	0x20000f5c
 8006c30:	08011034 	.word	0x08011034
 8006c34:	08011040 	.word	0x08011040
 8006c38:	08011048 	.word	0x08011048
 8006c3c:	08011050 	.word	0x08011050
 8006c40:	08011058 	.word	0x08011058
 8006c44:	08011060 	.word	0x08011060
 8006c48:	08011068 	.word	0x08011068
 8006c4c:	08011070 	.word	0x08011070
 8006c50:	08011078 	.word	0x08011078
 8006c54:	08011080 	.word	0x08011080
 8006c58:	08011084 	.word	0x08011084

08006c5c <UI_PlanSet>:

UI_Menu_Lists UI_PlanSet() {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08c      	sub	sp, #48	; 0x30
 8006c60:	af00      	add	r7, sp, #0
	uint8_t num_index = plan.checkpoint[num_checkpoint];
 8006c62:	4bc6      	ldr	r3, [pc, #792]	; (8006f7c <UI_PlanSet+0x320>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	4bc5      	ldr	r3, [pc, #788]	; (8006f80 <UI_PlanSet+0x324>)
 8006c6a:	4413      	add	r3, r2
 8006c6c:	789b      	ldrb	r3, [r3, #2]
 8006c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Action_typedef plan_set = GetAction(num_index);
 8006c72:	f107 0314 	add.w	r3, r7, #20
 8006c76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fe33 	bl	80048e8 <GetAction>
	int8_t num = -1;
 8006c82:	23ff      	movs	r3, #255	; 0xff
 8006c84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t change_status = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	plan_set:
	UI_PlanSetDisplay(num, &plan_set, num_index);
 8006c94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c98:	f107 0114 	add.w	r1, r7, #20
 8006c9c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fd15 	bl	80066d0 <UI_PlanSetDisplay>
	tick = HAL_GetTick();
 8006ca6:	f002 f8ed 	bl	8008e84 <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8006cac:	f002 f8ea 	bl	8008e84 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006cba:	2a01      	cmp	r2, #1
 8006cbc:	d101      	bne.n	8006cc2 <UI_PlanSet+0x66>
 8006cbe:	2219      	movs	r2, #25
 8006cc0:	e000      	b.n	8006cc4 <UI_PlanSet+0x68>
 8006cc2:	2246      	movs	r2, #70	; 0x46
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	f200 8406 	bhi.w	80074d6 <UI_PlanSet+0x87a>

		bt2 = UI_ReadButton();
 8006cca:	f7ff f827 	bl	8005d1c <UI_ReadButton>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(bt == bt2 && bt_status == 0) continue;
 8006cd4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d104      	bne.n	8006cea <UI_PlanSet+0x8e>
 8006ce0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 83f9 	beq.w	80074dc <UI_PlanSet+0x880>
		bt = bt2;
 8006cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
//		}
//		else if(bt & SW_UP_PRESS) {
//			if(num==0) num = 8; else num--;
//			goto ui_setting;
//		}
		if(bt & SW_HM_PRESS) {
 8006cf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <UI_PlanSet+0xae>
			num = -1;
 8006cfe:	23ff      	movs	r3, #255	; 0xff
 8006d00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			return UI_HOMESCREEN;
 8006d04:	2302      	movs	r3, #2
 8006d06:	f000 bc16 	b.w	8007536 <UI_PlanSet+0x8da>
		}
		if(num != -1) {
 8006d0a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d03e      	beq.n	8006d92 <UI_PlanSet+0x136>
			if(bt & SW_UP_PRESS) {
 8006d14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d012      	beq.n	8006d46 <UI_PlanSet+0xea>
				if(num != 0) num--; else num=12;
 8006d20:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <UI_PlanSet+0xdc>
 8006d28:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006d36:	e002      	b.n	8006d3e <UI_PlanSet+0xe2>
 8006d38:	230c      	movs	r3, #12
 8006d3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006d44:	e7a6      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			else if(bt & SW_DW_PRESS) {
 8006d46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d012      	beq.n	8006d78 <UI_PlanSet+0x11c>
				if(num != 12) num++; else num=0;
 8006d52:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d56:	2b0c      	cmp	r3, #12
 8006d58:	d007      	beq.n	8006d6a <UI_PlanSet+0x10e>
 8006d5a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	3301      	adds	r3, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006d68:	e002      	b.n	8006d70 <UI_PlanSet+0x114>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006d76:	e78d      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8006d78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <UI_PlanSet+0x136>
				bt_status = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				num = -1;
 8006d8a:	23ff      	movs	r3, #255	; 0xff
 8006d8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				goto plan_set;
 8006d90:	e780      	b.n	8006c94 <UI_PlanSet+0x38>
			}
		}
		switch(num) {
 8006d92:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8006d96:	3301      	adds	r3, #1
 8006d98:	2b0d      	cmp	r3, #13
 8006d9a:	d887      	bhi.n	8006cac <UI_PlanSet+0x50>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UI_PlanSet+0x148>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006ddd 	.word	0x08006ddd
 8006da8:	08006f4d 	.word	0x08006f4d
 8006dac:	08006fb9 	.word	0x08006fb9
 8006db0:	08007017 	.word	0x08007017
 8006db4:	08007075 	.word	0x08007075
 8006db8:	080070d3 	.word	0x080070d3
 8006dbc:	08007143 	.word	0x08007143
 8006dc0:	080071b3 	.word	0x080071b3
 8006dc4:	08007211 	.word	0x08007211
 8006dc8:	0800726f 	.word	0x0800726f
 8006dcc:	080072cd 	.word	0x080072cd
 8006dd0:	0800732b 	.word	0x0800732b
 8006dd4:	080073b7 	.word	0x080073b7
 8006dd8:	08007439 	.word	0x08007439
		case -1:
			if(bt & SW_DW_PRESS) {
 8006ddc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <UI_PlanSet+0x1ae>
				if(plan_set.act != 0) plan_set.act--; else plan_set.act=ACT_LIST-1;
 8006de8:	7d3b      	ldrb	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <UI_PlanSet+0x19c>
 8006dee:	7d3b      	ldrb	r3, [r7, #20]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	753b      	strb	r3, [r7, #20]
 8006df6:	e001      	b.n	8006dfc <UI_PlanSet+0x1a0>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006e08:	e744      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			else if(bt & SW_UP_PRESS) {
 8006e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <UI_PlanSet+0x1dc>
				if(plan_set.act != ACT_LIST-1) plan_set.act++; else plan_set.act=0;
 8006e16:	7d3b      	ldrb	r3, [r7, #20]
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	d004      	beq.n	8006e26 <UI_PlanSet+0x1ca>
 8006e1c:	7d3b      	ldrb	r3, [r7, #20]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	753b      	strb	r3, [r7, #20]
 8006e24:	e001      	b.n	8006e2a <UI_PlanSet+0x1ce>
 8006e26:	2300      	movs	r3, #0
 8006e28:	753b      	strb	r3, [r7, #20]
				bt_status = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006e36:	e72d      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			else if(bt & SW_OK_PRESS) {
 8006e38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <UI_PlanSet+0x1f6>
				num = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006e50:	e720      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			else if(bt & SW_BK_PRESS) {
 8006e52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <UI_PlanSet+0x228>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d106      	bne.n	8006e74 <UI_PlanSet+0x218>
 8006e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e6a:	f107 0214 	add.w	r2, r7, #20
 8006e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e70:	f7fd fd7c 	bl	800496c <SetAction>
				num = -1;
 8006e74:	23ff      	movs	r3, #255	; 0xff
 8006e76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				bt_status = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				return UI_HOMESCREEN;
 8006e80:	2302      	movs	r3, #2
 8006e82:	e358      	b.n	8007536 <UI_PlanSet+0x8da>
			}
			else if(bt2 & SW_RG_PRESS) {
 8006e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d02b      	beq.n	8006ee8 <UI_PlanSet+0x28c>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d106      	bne.n	8006ea6 <UI_PlanSet+0x24a>
 8006e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e9c:	f107 0214 	add.w	r2, r7, #20
 8006ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ea2:	f7fd fd63 	bl	800496c <SetAction>
				if(num_index != max_index) num_index++; else num_index=0;
 8006ea6:	4b37      	ldr	r3, [pc, #220]	; (8006f84 <UI_PlanSet+0x328>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d005      	beq.n	8006ebe <UI_PlanSet+0x262>
 8006eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006ebc:	e002      	b.n	8006ec4 <UI_PlanSet+0x268>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fd fd0b 	bl	80048e8 <GetAction>
 8006ed2:	f107 0314 	add.w	r3, r7, #20
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	6810      	ldr	r0, [r2, #0]
 8006eda:	6851      	ldr	r1, [r2, #4]
 8006edc:	6892      	ldr	r2, [r2, #8]
 8006ede:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006ee6:	e6d5      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			else if(bt2 & SW_LF_PRESS) {
 8006ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 82f6 	beq.w	80074e2 <UI_PlanSet+0x886>
				if(change_status == 1) SetAction(plan_set, num_index);
 8006ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d106      	bne.n	8006f0c <UI_PlanSet+0x2b0>
 8006efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f02:	f107 0214 	add.w	r2, r7, #20
 8006f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f08:	f7fd fd30 	bl	800496c <SetAction>
				if(num_index != 0) num_index--; else num_index=max_index;
 8006f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <UI_PlanSet+0x2c4>
 8006f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f1e:	e003      	b.n	8006f28 <UI_PlanSet+0x2cc>
 8006f20:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <UI_PlanSet+0x328>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				plan_set = GetAction(num_index);
 8006f28:	463b      	mov	r3, r7
 8006f2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fd fcd9 	bl	80048e8 <GetAction>
 8006f36:	f107 0314 	add.w	r3, r7, #20
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	6810      	ldr	r0, [r2, #0]
 8006f3e:	6851      	ldr	r1, [r2, #4]
 8006f40:	6892      	ldr	r2, [r2, #8]
 8006f42:	c307      	stmia	r3!, {r0, r1, r2}
				bt_status = 1;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				goto plan_set;
 8006f4a:	e6a3      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 0:
			if(bt & SW_LF_PRESS) {
 8006f4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d017      	beq.n	8006f88 <UI_PlanSet+0x32c>
				if(plan_set.sen_trig != 0) plan_set.sen_trig--; else plan_set.sen_trig=SENSOR_NUM;
 8006f58:	7d7b      	ldrb	r3, [r7, #21]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <UI_PlanSet+0x30c>
 8006f5e:	7d7b      	ldrb	r3, [r7, #21]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	757b      	strb	r3, [r7, #21]
 8006f66:	e001      	b.n	8006f6c <UI_PlanSet+0x310>
 8006f68:	230e      	movs	r3, #14
 8006f6a:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006f78:	e68c      	b.n	8006c94 <UI_PlanSet+0x38>
 8006f7a:	bf00      	nop
 8006f7c:	20000ccc 	.word	0x20000ccc
 8006f80:	20000d54 	.word	0x20000d54
 8006f84:	20000288 	.word	0x20000288
			}
			if(bt & SW_RG_PRESS) {
 8006f88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 82a9 	beq.w	80074e8 <UI_PlanSet+0x88c>
				if(plan_set.sen_trig != SENSOR_NUM) plan_set.sen_trig++; else plan_set.sen_trig=0;
 8006f96:	7d7b      	ldrb	r3, [r7, #21]
 8006f98:	2b0e      	cmp	r3, #14
 8006f9a:	d004      	beq.n	8006fa6 <UI_PlanSet+0x34a>
 8006f9c:	7d7b      	ldrb	r3, [r7, #21]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	757b      	strb	r3, [r7, #21]
 8006fa4:	e001      	b.n	8006faa <UI_PlanSet+0x34e>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	757b      	strb	r3, [r7, #21]
				bt_status = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006fb6:	e66d      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 1:
			if(bt & SW_LF_PRESS) {
 8006fb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d010      	beq.n	8006fe6 <UI_PlanSet+0x38a>
				if(plan_set.act_mode != 0) plan_set.act_mode--; else plan_set.act_mode=2;
 8006fc4:	7dbb      	ldrb	r3, [r7, #22]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <UI_PlanSet+0x378>
 8006fca:	7dbb      	ldrb	r3, [r7, #22]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	75bb      	strb	r3, [r7, #22]
 8006fd2:	e001      	b.n	8006fd8 <UI_PlanSet+0x37c>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8006fe4:	e656      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8006fe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 827d 	beq.w	80074ee <UI_PlanSet+0x892>
				if(plan_set.act_mode != 2) plan_set.act_mode++; else plan_set.act_mode=0;
 8006ff4:	7dbb      	ldrb	r3, [r7, #22]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d004      	beq.n	8007004 <UI_PlanSet+0x3a8>
 8006ffa:	7dbb      	ldrb	r3, [r7, #22]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	75bb      	strb	r3, [r7, #22]
 8007002:	e001      	b.n	8007008 <UI_PlanSet+0x3ac>
 8007004:	2300      	movs	r3, #0
 8007006:	75bb      	strb	r3, [r7, #22]
				bt_status = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007014:	e63e      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 2:
			if(bt & SW_LF_PRESS) {
 8007016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b00      	cmp	r3, #0
 8007020:	d010      	beq.n	8007044 <UI_PlanSet+0x3e8>
				if(plan_set.act_value != 0) plan_set.act_value--; else plan_set.act_value=255;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <UI_PlanSet+0x3d6>
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	3b01      	subs	r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	75fb      	strb	r3, [r7, #23]
 8007030:	e001      	b.n	8007036 <UI_PlanSet+0x3da>
 8007032:	23ff      	movs	r3, #255	; 0xff
 8007034:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007042:	e627      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8251 	beq.w	80074f4 <UI_PlanSet+0x898>
				if(plan_set.act_value != 255) plan_set.act_value++; else plan_set.act_value=0;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	2bff      	cmp	r3, #255	; 0xff
 8007056:	d004      	beq.n	8007062 <UI_PlanSet+0x406>
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	3301      	adds	r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	75fb      	strb	r3, [r7, #23]
 8007060:	e001      	b.n	8007066 <UI_PlanSet+0x40a>
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
				bt_status = 1;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007072:	e60f      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 3:
			if(bt & SW_LF_PRESS) {
 8007074:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d010      	beq.n	80070a2 <UI_PlanSet+0x446>
				if(plan_set.brake != 0) plan_set.brake--; else plan_set.brake=255;
 8007080:	7e3b      	ldrb	r3, [r7, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <UI_PlanSet+0x434>
 8007086:	7e3b      	ldrb	r3, [r7, #24]
 8007088:	3b01      	subs	r3, #1
 800708a:	b2db      	uxtb	r3, r3
 800708c:	763b      	strb	r3, [r7, #24]
 800708e:	e001      	b.n	8007094 <UI_PlanSet+0x438>
 8007090:	23ff      	movs	r3, #255	; 0xff
 8007092:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80070a0:	e5f8      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80070a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8225 	beq.w	80074fa <UI_PlanSet+0x89e>
				if(plan_set.brake != 255) plan_set.brake++; else plan_set.brake=0;
 80070b0:	7e3b      	ldrb	r3, [r7, #24]
 80070b2:	2bff      	cmp	r3, #255	; 0xff
 80070b4:	d004      	beq.n	80070c0 <UI_PlanSet+0x464>
 80070b6:	7e3b      	ldrb	r3, [r7, #24]
 80070b8:	3301      	adds	r3, #1
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	763b      	strb	r3, [r7, #24]
 80070be:	e001      	b.n	80070c4 <UI_PlanSet+0x468>
 80070c0:	2300      	movs	r3, #0
 80070c2:	763b      	strb	r3, [r7, #24]
				bt_status = 1;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80070d0:	e5e0      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 4:
			if(bt & SW_LF_PRESS) {
 80070d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d015      	beq.n	800710a <UI_PlanSet+0x4ae>
				if(plan_set.forward_speed != -99) plan_set.forward_speed--; else plan_set.forward_speed=99;
 80070de:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80070e2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80070e6:	d007      	beq.n	80070f8 <UI_PlanSet+0x49c>
 80070e8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	b25b      	sxtb	r3, r3
 80070f4:	767b      	strb	r3, [r7, #25]
 80070f6:	e001      	b.n	80070fc <UI_PlanSet+0x4a0>
 80070f8:	2363      	movs	r3, #99	; 0x63
 80070fa:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007108:	e5c4      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800710a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 81f4 	beq.w	8007500 <UI_PlanSet+0x8a4>
				if(plan_set.forward_speed != 99) plan_set.forward_speed++; else plan_set.forward_speed=-99;
 8007118:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800711c:	2b63      	cmp	r3, #99	; 0x63
 800711e:	d007      	beq.n	8007130 <UI_PlanSet+0x4d4>
 8007120:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3301      	adds	r3, #1
 8007128:	b2db      	uxtb	r3, r3
 800712a:	b25b      	sxtb	r3, r3
 800712c:	767b      	strb	r3, [r7, #25]
 800712e:	e001      	b.n	8007134 <UI_PlanSet+0x4d8>
 8007130:	239d      	movs	r3, #157	; 0x9d
 8007132:	767b      	strb	r3, [r7, #25]
				bt_status = 1;
 8007134:	2301      	movs	r3, #1
 8007136:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007140:	e5a8      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 5:
			if(bt & SW_LF_PRESS) {
 8007142:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	d015      	beq.n	800717a <UI_PlanSet+0x51e>
				if(plan_set.reverse_speed != -99) plan_set.reverse_speed--; else plan_set.reverse_speed=99;
 800714e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007152:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8007156:	d007      	beq.n	8007168 <UI_PlanSet+0x50c>
 8007158:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	b25b      	sxtb	r3, r3
 8007164:	76bb      	strb	r3, [r7, #26]
 8007166:	e001      	b.n	800716c <UI_PlanSet+0x510>
 8007168:	2363      	movs	r3, #99	; 0x63
 800716a:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007178:	e58c      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800717a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 81bf 	beq.w	8007506 <UI_PlanSet+0x8aa>
				if(plan_set.reverse_speed != 99) plan_set.reverse_speed++; else plan_set.reverse_speed=-99;
 8007188:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800718c:	2b63      	cmp	r3, #99	; 0x63
 800718e:	d007      	beq.n	80071a0 <UI_PlanSet+0x544>
 8007190:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	3301      	adds	r3, #1
 8007198:	b2db      	uxtb	r3, r3
 800719a:	b25b      	sxtb	r3, r3
 800719c:	76bb      	strb	r3, [r7, #26]
 800719e:	e001      	b.n	80071a4 <UI_PlanSet+0x548>
 80071a0:	239d      	movs	r3, #157	; 0x9d
 80071a2:	76bb      	strb	r3, [r7, #26]
				bt_status = 1;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80071b0:	e570      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 6:
			if(bt & SW_LF_PRESS) {
 80071b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d010      	beq.n	80071e0 <UI_PlanSet+0x584>
				if(plan_set.wait_time != 0) plan_set.wait_time--; else plan_set.wait_time=255;
 80071be:	7efb      	ldrb	r3, [r7, #27]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <UI_PlanSet+0x572>
 80071c4:	7efb      	ldrb	r3, [r7, #27]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	76fb      	strb	r3, [r7, #27]
 80071cc:	e001      	b.n	80071d2 <UI_PlanSet+0x576>
 80071ce:	23ff      	movs	r3, #255	; 0xff
 80071d0:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80071de:	e559      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80071e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 818f 	beq.w	800750c <UI_PlanSet+0x8b0>
				if(plan_set.wait_time != 255) plan_set.wait_time++; else plan_set.wait_time=0;
 80071ee:	7efb      	ldrb	r3, [r7, #27]
 80071f0:	2bff      	cmp	r3, #255	; 0xff
 80071f2:	d004      	beq.n	80071fe <UI_PlanSet+0x5a2>
 80071f4:	7efb      	ldrb	r3, [r7, #27]
 80071f6:	3301      	adds	r3, #1
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	76fb      	strb	r3, [r7, #27]
 80071fc:	e001      	b.n	8007202 <UI_PlanSet+0x5a6>
 80071fe:	2300      	movs	r3, #0
 8007200:	76fb      	strb	r3, [r7, #27]
				bt_status = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800720e:	e541      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 7:
			if(bt & SW_LF_PRESS) {
 8007210:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <UI_PlanSet+0x5e2>
				if(plan_set.boost_time != 0) plan_set.boost_time--; else plan_set.boost_time=255;
 800721c:	7f3b      	ldrb	r3, [r7, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <UI_PlanSet+0x5d0>
 8007222:	7f3b      	ldrb	r3, [r7, #28]
 8007224:	3b01      	subs	r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	773b      	strb	r3, [r7, #28]
 800722a:	e001      	b.n	8007230 <UI_PlanSet+0x5d4>
 800722c:	23ff      	movs	r3, #255	; 0xff
 800722e:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800723c:	e52a      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800723e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8163 	beq.w	8007512 <UI_PlanSet+0x8b6>
				if(plan_set.boost_time != 255) plan_set.boost_time++; else plan_set.boost_time=0;
 800724c:	7f3b      	ldrb	r3, [r7, #28]
 800724e:	2bff      	cmp	r3, #255	; 0xff
 8007250:	d004      	beq.n	800725c <UI_PlanSet+0x600>
 8007252:	7f3b      	ldrb	r3, [r7, #28]
 8007254:	3301      	adds	r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	773b      	strb	r3, [r7, #28]
 800725a:	e001      	b.n	8007260 <UI_PlanSet+0x604>
 800725c:	2300      	movs	r3, #0
 800725e:	773b      	strb	r3, [r7, #28]
				bt_status = 1;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800726c:	e512      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 8:
			if(bt & SW_LF_PRESS) {
 800726e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007272:	f003 0310 	and.w	r3, r3, #16
 8007276:	2b00      	cmp	r3, #0
 8007278:	d010      	beq.n	800729c <UI_PlanSet+0x640>
				if(plan_set.boost_speed != 0) plan_set.boost_speed--; else plan_set.boost_speed=255;
 800727a:	7f7b      	ldrb	r3, [r7, #29]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <UI_PlanSet+0x62e>
 8007280:	7f7b      	ldrb	r3, [r7, #29]
 8007282:	3b01      	subs	r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	777b      	strb	r3, [r7, #29]
 8007288:	e001      	b.n	800728e <UI_PlanSet+0x632>
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 800729a:	e4fb      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 800729c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8137 	beq.w	8007518 <UI_PlanSet+0x8bc>
				if(plan_set.boost_speed != 255) plan_set.boost_speed++; else plan_set.boost_speed=0;
 80072aa:	7f7b      	ldrb	r3, [r7, #29]
 80072ac:	2bff      	cmp	r3, #255	; 0xff
 80072ae:	d004      	beq.n	80072ba <UI_PlanSet+0x65e>
 80072b0:	7f7b      	ldrb	r3, [r7, #29]
 80072b2:	3301      	adds	r3, #1
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	777b      	strb	r3, [r7, #29]
 80072b8:	e001      	b.n	80072be <UI_PlanSet+0x662>
 80072ba:	2300      	movs	r3, #0
 80072bc:	777b      	strb	r3, [r7, #29]
				bt_status = 1;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80072ca:	e4e3      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 9:
			if(bt & SW_LF_PRESS) {
 80072cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d010      	beq.n	80072fa <UI_PlanSet+0x69e>
				if(plan_set.unit_speed != 0) plan_set.unit_speed--; else plan_set.unit_speed=255;
 80072d8:	7fbb      	ldrb	r3, [r7, #30]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <UI_PlanSet+0x68c>
 80072de:	7fbb      	ldrb	r3, [r7, #30]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	77bb      	strb	r3, [r7, #30]
 80072e6:	e001      	b.n	80072ec <UI_PlanSet+0x690>
 80072e8:	23ff      	movs	r3, #255	; 0xff
 80072ea:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80072f8:	e4cc      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 80072fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 810b 	beq.w	800751e <UI_PlanSet+0x8c2>
				if(plan_set.unit_speed != 255) plan_set.unit_speed++; else plan_set.unit_speed=0;
 8007308:	7fbb      	ldrb	r3, [r7, #30]
 800730a:	2bff      	cmp	r3, #255	; 0xff
 800730c:	d004      	beq.n	8007318 <UI_PlanSet+0x6bc>
 800730e:	7fbb      	ldrb	r3, [r7, #30]
 8007310:	3301      	adds	r3, #1
 8007312:	b2db      	uxtb	r3, r3
 8007314:	77bb      	strb	r3, [r7, #30]
 8007316:	e001      	b.n	800731c <UI_PlanSet+0x6c0>
 8007318:	2300      	movs	r3, #0
 800731a:	77bb      	strb	r3, [r7, #30]
				bt_status = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007328:	e4b4      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 10:
			if(bt & SW_LF_PRESS) {
 800732a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01d      	beq.n	8007372 <UI_PlanSet+0x716>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 0) ADD_LINE_COLOR_STAT(plan_set.status,-1) else SET_LINE_COLOR_STAT(plan_set.status,2);
 8007336:	7ffb      	ldrb	r3, [r7, #31]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <UI_PlanSet+0x6f4>
 8007340:	7ffb      	ldrb	r3, [r7, #31]
 8007342:	3b01      	subs	r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	b2db      	uxtb	r3, r3
 800734c:	77fb      	strb	r3, [r7, #31]
 800734e:	e009      	b.n	8007364 <UI_PlanSet+0x708>
 8007350:	7ffb      	ldrb	r3, [r7, #31]
 8007352:	f023 0303 	bic.w	r3, r3, #3
 8007356:	b2db      	uxtb	r3, r3
 8007358:	77fb      	strb	r3, [r7, #31]
 800735a:	7ffb      	ldrb	r3, [r7, #31]
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	b2db      	uxtb	r3, r3
 8007362:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007370:	e490      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			if(bt & SW_RG_PRESS) {
 8007372:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80d2 	beq.w	8007524 <UI_PlanSet+0x8c8>
				if(GET_LINE_COLOR_STAT(plan_set.status) != 2) ADD_LINE_COLOR_STAT(plan_set.status,1) else SET_LINE_COLOR_STAT(plan_set.status, 0);
 8007380:	7ffb      	ldrb	r3, [r7, #31]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d007      	beq.n	800739a <UI_PlanSet+0x73e>
 800738a:	7ffb      	ldrb	r3, [r7, #31]
 800738c:	3301      	adds	r3, #1
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	b2db      	uxtb	r3, r3
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e006      	b.n	80073a8 <UI_PlanSet+0x74c>
 800739a:	7ffb      	ldrb	r3, [r7, #31]
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	7ffb      	ldrb	r3, [r7, #31]
 80073a6:	77fb      	strb	r3, [r7, #31]
				bt_status = 1;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80073b4:	e46e      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 11:
			if(bt & SW_OK_PRESS) {
 80073b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80b3 	beq.w	800752a <UI_PlanSet+0x8ce>
				DISP_DisplayText(&short_message, "Insert action?");
 80073c4:	495e      	ldr	r1, [pc, #376]	; (8007540 <UI_PlanSet+0x8e4>)
 80073c6:	485f      	ldr	r0, [pc, #380]	; (8007544 <UI_PlanSet+0x8e8>)
 80073c8:	f7fa fa66 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 80073cc:	f7fe fca6 	bl	8005d1c <UI_ReadButton>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073d8:	4293      	cmp	r3, r2
 80073da:	d01f      	beq.n	800741c <UI_PlanSet+0x7c0>
					bt = UI_ReadButton();
 80073dc:	f7fe fc9e 	bl	8005d1c <UI_ReadButton>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 80073e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00d      	beq.n	800740e <UI_PlanSet+0x7b2>
						DISP_DisplayText(&short_message, "Inserting");
 80073f2:	4955      	ldr	r1, [pc, #340]	; (8007548 <UI_PlanSet+0x8ec>)
 80073f4:	4853      	ldr	r0, [pc, #332]	; (8007544 <UI_PlanSet+0x8e8>)
 80073f6:	f7fa fa4f 	bl	8001898 <DISP_DisplayText>
						Storage_InsertAction(num_index);
 80073fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fd ff10 	bl	8005224 <Storage_InsertAction>
						DISP_DisplayText(&short_message, "Insert Done!");
 8007404:	4951      	ldr	r1, [pc, #324]	; (800754c <UI_PlanSet+0x8f0>)
 8007406:	484f      	ldr	r0, [pc, #316]	; (8007544 <UI_PlanSet+0x8e8>)
 8007408:	f7fa fa46 	bl	8001898 <DISP_DisplayText>
						break;
 800740c:	e009      	b.n	8007422 <UI_PlanSet+0x7c6>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 800740e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <UI_PlanSet+0x7c4>
 800741a:	e7d7      	b.n	80073cc <UI_PlanSet+0x770>
					if(bt == UI_ReadButton()) continue;
 800741c:	bf00      	nop
 800741e:	e7d5      	b.n	80073cc <UI_PlanSet+0x770>
						break;
 8007420:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 8007422:	494b      	ldr	r1, [pc, #300]	; (8007550 <UI_PlanSet+0x8f4>)
 8007424:	484b      	ldr	r0, [pc, #300]	; (8007554 <UI_PlanSet+0x8f8>)
 8007426:	f7fa fa37 	bl	8001898 <DISP_DisplayText>
				bt_status = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 8007436:	e42d      	b.n	8006c94 <UI_PlanSet+0x38>
			}
			break;
		case 12:
			if(bt & SW_OK_PRESS) {
 8007438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d075      	beq.n	8007530 <UI_PlanSet+0x8d4>
				DISP_DisplayText(&short_message, "Delete this action?");
 8007444:	4944      	ldr	r1, [pc, #272]	; (8007558 <UI_PlanSet+0x8fc>)
 8007446:	483f      	ldr	r0, [pc, #252]	; (8007544 <UI_PlanSet+0x8e8>)
 8007448:	f7fa fa26 	bl	8001898 <DISP_DisplayText>
				while(1) {
					if(bt == UI_ReadButton()) continue;
 800744c:	f7fe fc66 	bl	8005d1c <UI_ReadButton>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007458:	4293      	cmp	r3, r2
 800745a:	d02d      	beq.n	80074b8 <UI_PlanSet+0x85c>
					bt = UI_ReadButton();
 800745c:	f7fe fc5e 	bl	8005d1c <UI_ReadButton>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(bt & SW_OK_PRESS) {
 8007466:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01b      	beq.n	80074aa <UI_PlanSet+0x84e>
						DISP_DisplayText(&short_message, "Deleting");
 8007472:	493a      	ldr	r1, [pc, #232]	; (800755c <UI_PlanSet+0x900>)
 8007474:	4833      	ldr	r0, [pc, #204]	; (8007544 <UI_PlanSet+0x8e8>)
 8007476:	f7fa fa0f 	bl	8001898 <DISP_DisplayText>
						Storage_DeleteAction(num_index);
 800747a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd fefc 	bl	800527c <Storage_DeleteAction>
						DISP_DisplayText(&short_message, "Delete Done!");
 8007484:	4936      	ldr	r1, [pc, #216]	; (8007560 <UI_PlanSet+0x904>)
 8007486:	482f      	ldr	r0, [pc, #188]	; (8007544 <UI_PlanSet+0x8e8>)
 8007488:	f7fa fa06 	bl	8001898 <DISP_DisplayText>
						plan_set = GetAction(num_index);
 800748c:	463b      	mov	r3, r7
 800748e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd fa27 	bl	80048e8 <GetAction>
 800749a:	f107 0314 	add.w	r3, r7, #20
 800749e:	463a      	mov	r2, r7
 80074a0:	6810      	ldr	r0, [r2, #0]
 80074a2:	6851      	ldr	r1, [r2, #4]
 80074a4:	6892      	ldr	r2, [r2, #8]
 80074a6:	c307      	stmia	r3!, {r0, r1, r2}
						break;
 80074a8:	e009      	b.n	80074be <UI_PlanSet+0x862>
					}
					if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 80074aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <UI_PlanSet+0x860>
 80074b6:	e7c9      	b.n	800744c <UI_PlanSet+0x7f0>
					if(bt == UI_ReadButton()) continue;
 80074b8:	bf00      	nop
 80074ba:	e7c7      	b.n	800744c <UI_PlanSet+0x7f0>
						break;
 80074bc:	bf00      	nop
					}
				}
				DISP_DisplayText(&short_message_white, " ");
 80074be:	4924      	ldr	r1, [pc, #144]	; (8007550 <UI_PlanSet+0x8f4>)
 80074c0:	4824      	ldr	r0, [pc, #144]	; (8007554 <UI_PlanSet+0x8f8>)
 80074c2:	f7fa f9e9 	bl	8001898 <DISP_DisplayText>
				bt_status = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				change_status = 1;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				goto plan_set;
 80074d2:	f7ff bbdf 	b.w	8006c94 <UI_PlanSet+0x38>
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 80074d6:	bf00      	nop
 80074d8:	f7ff bbe8 	b.w	8006cac <UI_PlanSet+0x50>
		if(bt == bt2 && bt_status == 0) continue;
 80074dc:	bf00      	nop
 80074de:	f7ff bbe5 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 80074e2:	bf00      	nop
 80074e4:	f7ff bbe2 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 80074e8:	bf00      	nop
 80074ea:	f7ff bbdf 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 80074ee:	bf00      	nop
 80074f0:	f7ff bbdc 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 80074f4:	bf00      	nop
 80074f6:	f7ff bbd9 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 80074fa:	bf00      	nop
 80074fc:	f7ff bbd6 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 8007500:	bf00      	nop
 8007502:	f7ff bbd3 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 8007506:	bf00      	nop
 8007508:	f7ff bbd0 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 800750c:	bf00      	nop
 800750e:	f7ff bbcd 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 8007512:	bf00      	nop
 8007514:	f7ff bbca 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 8007518:	bf00      	nop
 800751a:	f7ff bbc7 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 800751e:	bf00      	nop
 8007520:	f7ff bbc4 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 8007524:	bf00      	nop
 8007526:	f7ff bbc1 	b.w	8006cac <UI_PlanSet+0x50>
			break;
 800752a:	bf00      	nop
 800752c:	f7ff bbbe 	b.w	8006cac <UI_PlanSet+0x50>
			}
			break;
 8007530:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?SW_DELAY_FAST:SW_DELAY)) continue;
 8007532:	f7ff bbbb 	b.w	8006cac <UI_PlanSet+0x50>
		}
	}
	return UI_IDLE;
}
 8007536:	4618      	mov	r0, r3
 8007538:	3730      	adds	r7, #48	; 0x30
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	0801108c 	.word	0x0801108c
 8007544:	20000ee8 	.word	0x20000ee8
 8007548:	0801109c 	.word	0x0801109c
 800754c:	080110a8 	.word	0x080110a8
 8007550:	08011080 	.word	0x08011080
 8007554:	20000ef0 	.word	0x20000ef0
 8007558:	080110b8 	.word	0x080110b8
 800755c:	080110cc 	.word	0x080110cc
 8007560:	080110d8 	.word	0x080110d8

08007564 <UI_ADCThresholdDisplayInit>:

DISP_Text_Typedef adc_menu[2];
DISP_Text_Typedef adc_head;
DISP_Text_Typedef adc_point;

void UI_ADCThresholdDisplayInit() {
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
	adc_menu[0].origin_x = 4;
 8007568:	4b24      	ldr	r3, [pc, #144]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 800756a:	2204      	movs	r2, #4
 800756c:	701a      	strb	r2, [r3, #0]
	adc_menu[0].origin_y = 50;
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 8007570:	2232      	movs	r2, #50	; 0x32
 8007572:	705a      	strb	r2, [r3, #1]
	adc_menu[0].size_x = 58;
 8007574:	4b21      	ldr	r3, [pc, #132]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 8007576:	223a      	movs	r2, #58	; 0x3a
 8007578:	70da      	strb	r2, [r3, #3]
	adc_menu[0].size_y = 11;
 800757a:	4b20      	ldr	r3, [pc, #128]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 800757c:	220b      	movs	r2, #11
 800757e:	711a      	strb	r2, [r3, #4]
	adc_menu[0].color = DISP_COLOR_BLACK;
 8007580:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 8007582:	2201      	movs	r2, #1
 8007584:	709a      	strb	r2, [r3, #2]
	adc_menu[0].align_y = DISP_ALIGN_CENTER;
 8007586:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 8007588:	2202      	movs	r2, #2
 800758a:	719a      	strb	r2, [r3, #6]
	adc_menu[0].align_x = DISP_ALIGN_CENTER;
 800758c:	4b1b      	ldr	r3, [pc, #108]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 800758e:	2202      	movs	r2, #2
 8007590:	715a      	strb	r2, [r3, #5]

	adc_menu[1] = adc_menu[0];
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 8007594:	4a19      	ldr	r2, [pc, #100]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 8007596:	3307      	adds	r3, #7
 8007598:	6810      	ldr	r0, [r2, #0]
 800759a:	6018      	str	r0, [r3, #0]
 800759c:	8891      	ldrh	r1, [r2, #4]
 800759e:	7992      	ldrb	r2, [r2, #6]
 80075a0:	8099      	strh	r1, [r3, #4]
 80075a2:	719a      	strb	r2, [r3, #6]
	adc_menu[1].origin_x = 63;
 80075a4:	4b15      	ldr	r3, [pc, #84]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 80075a6:	223f      	movs	r2, #63	; 0x3f
 80075a8:	71da      	strb	r2, [r3, #7]
	adc_menu[1].size_x = 60;
 80075aa:	4b14      	ldr	r3, [pc, #80]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 80075ac:	223c      	movs	r2, #60	; 0x3c
 80075ae:	729a      	strb	r2, [r3, #10]
	adc_menu[1].color = DISP_COLOR_WHITE;
 80075b0:	4b12      	ldr	r3, [pc, #72]	; (80075fc <UI_ADCThresholdDisplayInit+0x98>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	725a      	strb	r2, [r3, #9]

	adc_head.origin_x = 0;
 80075b6:	4b12      	ldr	r3, [pc, #72]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
	adc_head.origin_y = 0;
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075be:	2200      	movs	r2, #0
 80075c0:	705a      	strb	r2, [r3, #1]
	adc_head.size_x = 127;
 80075c2:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075c4:	227f      	movs	r2, #127	; 0x7f
 80075c6:	70da      	strb	r2, [r3, #3]
	adc_head.size_y = 10;
 80075c8:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075ca:	220a      	movs	r2, #10
 80075cc:	711a      	strb	r2, [r3, #4]
	adc_head.color = DISP_COLOR_BLACK;
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075d0:	2201      	movs	r2, #1
 80075d2:	709a      	strb	r2, [r3, #2]
	adc_head.align_x = DISP_ALIGN_CENTER;
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075d6:	2202      	movs	r2, #2
 80075d8:	715a      	strb	r2, [r3, #5]
	adc_head.align_y = DISP_ALIGN_CENTER;
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <UI_ADCThresholdDisplayInit+0x9c>)
 80075dc:	2202      	movs	r2, #2
 80075de:	719a      	strb	r2, [r3, #6]

	adc_point.origin_y = 32;
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <UI_ADCThresholdDisplayInit+0xa0>)
 80075e2:	2220      	movs	r2, #32
 80075e4:	705a      	strb	r2, [r3, #1]
	adc_point.size_x = SENSOR_WIDTH_SEN;
 80075e6:	4b07      	ldr	r3, [pc, #28]	; (8007604 <UI_ADCThresholdDisplayInit+0xa0>)
 80075e8:	2206      	movs	r2, #6
 80075ea:	70da      	strb	r2, [r3, #3]
	adc_point.align_x = DISP_ALIGN_CENTER;
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <UI_ADCThresholdDisplayInit+0xa0>)
 80075ee:	2202      	movs	r2, #2
 80075f0:	715a      	strb	r2, [r3, #5]

}
 80075f2:	bf00      	nop
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20000f80 	.word	0x20000f80
 8007600:	20000f90 	.word	0x20000f90
 8007604:	20000f98 	.word	0x20000f98

08007608 <UI_ADCThresholdDisplay>:

void UI_ADCThresholdDisplay(uint8_t num) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	; 0x28
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	71fb      	strb	r3, [r7, #7]
	static uint8_t last_num = 1;
	char buff[22];
	if(last_num != num) {
 8007612:	4b2d      	ldr	r3, [pc, #180]	; (80076c8 <UI_ADCThresholdDisplay+0xc0>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	79fa      	ldrb	r2, [r7, #7]
 8007618:	429a      	cmp	r2, r3
 800761a:	d03e      	beq.n	800769a <UI_ADCThresholdDisplay+0x92>
		sprintf(buff, "ADC ~ %i", num+1);
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	f107 0310 	add.w	r3, r7, #16
 8007624:	4929      	ldr	r1, [pc, #164]	; (80076cc <UI_ADCThresholdDisplay+0xc4>)
 8007626:	4618      	mov	r0, r3
 8007628:	f007 fa8a 	bl	800eb40 <siprintf>
		DISP_DisplayText(&adc_head, buff);
 800762c:	f107 0310 	add.w	r3, r7, #16
 8007630:	4619      	mov	r1, r3
 8007632:	4827      	ldr	r0, [pc, #156]	; (80076d0 <UI_ADCThresholdDisplay+0xc8>)
 8007634:	f7fa f930 	bl	8001898 <DISP_DisplayText>

		uint8_t point_x = (last_num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 8007638:	4b23      	ldr	r3, [pc, #140]	; (80076c8 <UI_ADCThresholdDisplay+0xc0>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	00d2      	lsls	r2, r2, #3
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	b2da      	uxtb	r2, r3
 8007644:	4b23      	ldr	r3, [pc, #140]	; (80076d4 <UI_ADCThresholdDisplay+0xcc>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	4413      	add	r3, r2
 800764a:	b2db      	uxtb	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		char point[] = " ";
 8007652:	2320      	movs	r3, #32
 8007654:	81bb      	strh	r3, [r7, #12]
		adc_point.origin_x = point_x;
 8007656:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <UI_ADCThresholdDisplay+0xd0>)
 8007658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800765c:	7013      	strb	r3, [r2, #0]
		DISP_DisplayText(&adc_point, point);
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	4619      	mov	r1, r3
 8007664:	481c      	ldr	r0, [pc, #112]	; (80076d8 <UI_ADCThresholdDisplay+0xd0>)
 8007666:	f7fa f917 	bl	8001898 <DISP_DisplayText>

		point[0] = '~'+2;
 800766a:	2380      	movs	r3, #128	; 0x80
 800766c:	733b      	strb	r3, [r7, #12]
		adc_point.origin_x = (num*(SENSOR_WIDTH_SEN+1))+SENSOR_ORIGIN_X-1;
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	461a      	mov	r2, r3
 8007672:	00d2      	lsls	r2, r2, #3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b2da      	uxtb	r2, r3
 8007678:	4b16      	ldr	r3, [pc, #88]	; (80076d4 <UI_ADCThresholdDisplay+0xcc>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	4413      	add	r3, r2
 800767e:	b2db      	uxtb	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b2da      	uxtb	r2, r3
 8007684:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <UI_ADCThresholdDisplay+0xd0>)
 8007686:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&adc_point, point);
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	4619      	mov	r1, r3
 800768e:	4812      	ldr	r0, [pc, #72]	; (80076d8 <UI_ADCThresholdDisplay+0xd0>)
 8007690:	f7fa f902 	bl	8001898 <DISP_DisplayText>

		last_num = num;
 8007694:	4a0c      	ldr	r2, [pc, #48]	; (80076c8 <UI_ADCThresholdDisplay+0xc0>)
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	7013      	strb	r3, [r2, #0]
	}
	sprintf(buff, "Tr %4i", threshold_sensor[SENSOR_NUM-num-1]);
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	f1c3 030d 	rsb	r3, r3, #13
 80076a0:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <UI_ADCThresholdDisplay+0xd4>)
 80076a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f107 0310 	add.w	r3, r7, #16
 80076ac:	490c      	ldr	r1, [pc, #48]	; (80076e0 <UI_ADCThresholdDisplay+0xd8>)
 80076ae:	4618      	mov	r0, r3
 80076b0:	f007 fa46 	bl	800eb40 <siprintf>
	DISP_DisplayText(&adc_menu[0], buff);
 80076b4:	f107 0310 	add.w	r3, r7, #16
 80076b8:	4619      	mov	r1, r3
 80076ba:	480a      	ldr	r0, [pc, #40]	; (80076e4 <UI_ADCThresholdDisplay+0xdc>)
 80076bc:	f7fa f8ec 	bl	8001898 <DISP_DisplayText>

}
 80076c0:	bf00      	nop
 80076c2:	3728      	adds	r7, #40	; 0x28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000320 	.word	0x20000320
 80076cc:	080110e8 	.word	0x080110e8
 80076d0:	20000f90 	.word	0x20000f90
 80076d4:	20000290 	.word	0x20000290
 80076d8:	20000f98 	.word	0x20000f98
 80076dc:	20000b74 	.word	0x20000b74
 80076e0:	080110f4 	.word	0x080110f4
 80076e4:	20000f80 	.word	0x20000f80

080076e8 <UI_ADCThreshold>:

UI_Menu_Lists UI_ADCThreshold() {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
	uint32_t tick;
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	77bb      	strb	r3, [r7, #30]
	uint8_t num_sen = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	777b      	strb	r3, [r7, #29]
	uint8_t actual_num_sen = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	773b      	strb	r3, [r7, #28]
	char buff[22];
	Storage_GetADCThreshold();
 80076fa:	f7fd fa9d 	bl	8004c38 <Storage_GetADCThreshold>
	UI_ADCThresholdDisplay(num_sen+1);
 80076fe:	7f7b      	ldrb	r3, [r7, #29]
 8007700:	3301      	adds	r3, #1
 8007702:	b2db      	uxtb	r3, r3
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff ff7f 	bl	8007608 <UI_ADCThresholdDisplay>
	adctreshold:
	UI_ADCThresholdDisplay(num_sen);
 800770a:	7f7b      	ldrb	r3, [r7, #29]
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff ff7b 	bl	8007608 <UI_ADCThresholdDisplay>
	tick = HAL_GetTick();
 8007712:	f001 fbb7 	bl	8008e84 <HAL_GetTick>
 8007716:	61b8      	str	r0, [r7, #24]
	while(1) {
		actual_num_sen = SENSOR_NUM-num_sen-1;
 8007718:	7f7b      	ldrb	r3, [r7, #29]
 800771a:	f1c3 030d 	rsb	r3, r3, #13
 800771e:	773b      	strb	r3, [r7, #28]
		if(UI_ShowSensor()) {
 8007720:	f7fe fa7e 	bl	8005c20 <UI_ShowSensor>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <UI_ADCThreshold+0x60>
			sprintf(buff, "ADC %4i", adc_sensor_arranged[actual_num_sen]);
 800772a:	7f3b      	ldrb	r3, [r7, #28]
 800772c:	4a52      	ldr	r2, [pc, #328]	; (8007878 <UI_ADCThreshold+0x190>)
 800772e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007732:	461a      	mov	r2, r3
 8007734:	463b      	mov	r3, r7
 8007736:	4951      	ldr	r1, [pc, #324]	; (800787c <UI_ADCThreshold+0x194>)
 8007738:	4618      	mov	r0, r3
 800773a:	f007 fa01 	bl	800eb40 <siprintf>
			DISP_DisplayText(&adc_menu[1], buff);
 800773e:	463b      	mov	r3, r7
 8007740:	4619      	mov	r1, r3
 8007742:	484f      	ldr	r0, [pc, #316]	; (8007880 <UI_ADCThreshold+0x198>)
 8007744:	f7fa f8a8 	bl	8001898 <DISP_DisplayText>
		}

		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8007748:	f001 fb9c 	bl	8008e84 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	7fba      	ldrb	r2, [r7, #30]
 8007754:	2a01      	cmp	r2, #1
 8007756:	d101      	bne.n	800775c <UI_ADCThreshold+0x74>
 8007758:	2214      	movs	r2, #20
 800775a:	e000      	b.n	800775e <UI_ADCThreshold+0x76>
 800775c:	2246      	movs	r2, #70	; 0x46
 800775e:	429a      	cmp	r2, r3
 8007760:	f200 8081 	bhi.w	8007866 <UI_ADCThreshold+0x17e>

		bt2 = UI_ReadButton();
 8007764:	f7fe fada 	bl	8005d1c <UI_ReadButton>
 8007768:	4603      	mov	r3, r0
 800776a:	75fb      	strb	r3, [r7, #23]

		if(bt == bt2 && bt_status == 0) continue;
 800776c:	7ffa      	ldrb	r2, [r7, #31]
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	429a      	cmp	r2, r3
 8007772:	d102      	bne.n	800777a <UI_ADCThreshold+0x92>
 8007774:	7fbb      	ldrb	r3, [r7, #30]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d077      	beq.n	800786a <UI_ADCThreshold+0x182>
		bt = bt2;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	77fb      	strb	r3, [r7, #31]

		if(bt & SW_HM_PRESS) {
 800777e:	7ffb      	ldrb	r3, [r7, #31]
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <UI_ADCThreshold+0xa8>
			num_sen = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	777b      	strb	r3, [r7, #29]
			return UI_HOMESCREEN;
 800778c:	2302      	movs	r3, #2
 800778e:	e06e      	b.n	800786e <UI_ADCThreshold+0x186>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8007790:	7ffb      	ldrb	r3, [r7, #31]
 8007792:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <UI_ADCThreshold+0xbe>
			Storage_SetADCThreshold();
 800779a:	f7fd fa71 	bl	8004c80 <Storage_SetADCThreshold>
			num_sen = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	777b      	strb	r3, [r7, #29]
			return UI_SET;
 80077a2:	2307      	movs	r3, #7
 80077a4:	e063      	b.n	800786e <UI_ADCThreshold+0x186>
		}
		else if(bt & SW_LF_PRESS) {
 80077a6:	7ffb      	ldrb	r3, [r7, #31]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <UI_ADCThreshold+0xe0>
			if(num_sen != 0) num_sen--; else num_sen=SENSOR_NUM-1;
 80077b0:	7f7b      	ldrb	r3, [r7, #29]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <UI_ADCThreshold+0xd6>
 80077b6:	7f7b      	ldrb	r3, [r7, #29]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	777b      	strb	r3, [r7, #29]
 80077bc:	e001      	b.n	80077c2 <UI_ADCThreshold+0xda>
 80077be:	230d      	movs	r3, #13
 80077c0:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80077c6:	e7a0      	b.n	800770a <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_RG_PRESS) {
 80077c8:	7ffb      	ldrb	r3, [r7, #31]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <UI_ADCThreshold+0x102>
			if(num_sen != SENSOR_NUM-1) num_sen++; else num_sen=0;
 80077d2:	7f7b      	ldrb	r3, [r7, #29]
 80077d4:	2b0d      	cmp	r3, #13
 80077d6:	d003      	beq.n	80077e0 <UI_ADCThreshold+0xf8>
 80077d8:	7f7b      	ldrb	r3, [r7, #29]
 80077da:	3301      	adds	r3, #1
 80077dc:	777b      	strb	r3, [r7, #29]
 80077de:	e001      	b.n	80077e4 <UI_ADCThreshold+0xfc>
 80077e0:	2300      	movs	r3, #0
 80077e2:	777b      	strb	r3, [r7, #29]
			bt_status = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 80077e8:	e78f      	b.n	800770a <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_DW_PRESS) {
 80077ea:	7ffb      	ldrb	r3, [r7, #31]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d018      	beq.n	8007826 <UI_ADCThreshold+0x13e>
			if(threshold_sensor[actual_num_sen] != 0) threshold_sensor[actual_num_sen]--; else threshold_sensor[actual_num_sen]=ADC_MAX;
 80077f4:	7f3b      	ldrb	r3, [r7, #28]
 80077f6:	4a23      	ldr	r2, [pc, #140]	; (8007884 <UI_ADCThreshold+0x19c>)
 80077f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <UI_ADCThreshold+0x12c>
 8007800:	7f3b      	ldrb	r3, [r7, #28]
 8007802:	4a20      	ldr	r2, [pc, #128]	; (8007884 <UI_ADCThreshold+0x19c>)
 8007804:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007808:	3a01      	subs	r2, #1
 800780a:	b291      	uxth	r1, r2
 800780c:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <UI_ADCThreshold+0x19c>)
 800780e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007812:	e005      	b.n	8007820 <UI_ADCThreshold+0x138>
 8007814:	7f3b      	ldrb	r3, [r7, #28]
 8007816:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <UI_ADCThreshold+0x19c>)
 8007818:	f640 71ff 	movw	r1, #4095	; 0xfff
 800781c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8007820:	2301      	movs	r3, #1
 8007822:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007824:	e771      	b.n	800770a <UI_ADCThreshold+0x22>
		}
		else if(bt & SW_UP_PRESS) {
 8007826:	7ffb      	ldrb	r3, [r7, #31]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	f43f af73 	beq.w	8007718 <UI_ADCThreshold+0x30>
			if(threshold_sensor[actual_num_sen] != ADC_MAX) threshold_sensor[actual_num_sen]++; else threshold_sensor[actual_num_sen]=0;
 8007832:	7f3b      	ldrb	r3, [r7, #28]
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <UI_ADCThreshold+0x19c>)
 8007836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800783a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800783e:	4293      	cmp	r3, r2
 8007840:	d009      	beq.n	8007856 <UI_ADCThreshold+0x16e>
 8007842:	7f3b      	ldrb	r3, [r7, #28]
 8007844:	4a0f      	ldr	r2, [pc, #60]	; (8007884 <UI_ADCThreshold+0x19c>)
 8007846:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800784a:	3201      	adds	r2, #1
 800784c:	b291      	uxth	r1, r2
 800784e:	4a0d      	ldr	r2, [pc, #52]	; (8007884 <UI_ADCThreshold+0x19c>)
 8007850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007854:	e004      	b.n	8007860 <UI_ADCThreshold+0x178>
 8007856:	7f3b      	ldrb	r3, [r7, #28]
 8007858:	4a0a      	ldr	r2, [pc, #40]	; (8007884 <UI_ADCThreshold+0x19c>)
 800785a:	2100      	movs	r1, #0
 800785c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			bt_status = 1;
 8007860:	2301      	movs	r3, #1
 8007862:	77bb      	strb	r3, [r7, #30]
			goto adctreshold;
 8007864:	e751      	b.n	800770a <UI_ADCThreshold+0x22>
		if(HAL_GetTick() - tick < ((bt_status == 1)?20:SW_DELAY)) continue;
 8007866:	bf00      	nop
 8007868:	e756      	b.n	8007718 <UI_ADCThreshold+0x30>
		if(bt == bt2 && bt_status == 0) continue;
 800786a:	bf00      	nop
		actual_num_sen = SENSOR_NUM-num_sen-1;
 800786c:	e754      	b.n	8007718 <UI_ADCThreshold+0x30>
		}
	}
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000b58 	.word	0x20000b58
 800787c:	080110fc 	.word	0x080110fc
 8007880:	20000f87 	.word	0x20000f87
 8007884:	20000b74 	.word	0x20000b74

08007888 <UI_AutoCalib>:



UI_Menu_Lists UI_AutoCalib() {
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
	uint8_t bt = UI_ReadButton();
 800788e:	f7fe fa45 	bl	8005d1c <UI_ReadButton>
 8007892:	4603      	mov	r3, r0
 8007894:	71fb      	strb	r3, [r7, #7]
	SEN_StartAutoCalibration();
 8007896:	f7fc fe7d 	bl	8004594 <SEN_StartAutoCalibration>
	while(1) {
		UI_ShowSensor();
 800789a:	f7fe f9c1 	bl	8005c20 <UI_ShowSensor>
		if(bt == UI_ReadButton()) continue;
 800789e:	f7fe fa3d 	bl	8005d1c <UI_ReadButton>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d02a      	beq.n	8007902 <UI_AutoCalib+0x7a>
		bt = UI_ReadButton();
 80078ac:	f7fe fa36 	bl	8005d1c <UI_ReadButton>
 80078b0:	4603      	mov	r3, r0
 80078b2:	71fb      	strb	r3, [r7, #7]
		if(bt & SW_HM_PRESS) {
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <UI_AutoCalib+0x40>
			SEN_EndAutoCalibration(0);
 80078be:	2000      	movs	r0, #0
 80078c0:	f7fc fefa 	bl	80046b8 <SEN_EndAutoCalibration>
			return UI_HOMESCREEN;
 80078c4:	2302      	movs	r3, #2
 80078c6:	e01e      	b.n	8007906 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_BK_PRESS) {
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d004      	beq.n	80078dc <UI_AutoCalib+0x54>
			SEN_EndAutoCalibration(0);
 80078d2:	2000      	movs	r0, #0
 80078d4:	f7fc fef0 	bl	80046b8 <SEN_EndAutoCalibration>
			return UI_SET;
 80078d8:	2307      	movs	r3, #7
 80078da:	e014      	b.n	8007906 <UI_AutoCalib+0x7e>
		}
		else if(bt & SW_OK_PRESS) {
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0d9      	beq.n	800789a <UI_AutoCalib+0x12>
			SEN_EndAutoCalibration(1);
 80078e6:	2001      	movs	r0, #1
 80078e8:	f7fc fee6 	bl	80046b8 <SEN_EndAutoCalibration>
			DISP_DisplayText(&short_message, "Saving...");
 80078ec:	4908      	ldr	r1, [pc, #32]	; (8007910 <UI_AutoCalib+0x88>)
 80078ee:	4809      	ldr	r0, [pc, #36]	; (8007914 <UI_AutoCalib+0x8c>)
 80078f0:	f7f9 ffd2 	bl	8001898 <DISP_DisplayText>
			Storage_SetADCThreshold();
 80078f4:	f7fd f9c4 	bl	8004c80 <Storage_SetADCThreshold>
			HAL_Delay(200);
 80078f8:	20c8      	movs	r0, #200	; 0xc8
 80078fa:	f001 facf 	bl	8008e9c <HAL_Delay>
			return UI_SET;
 80078fe:	2307      	movs	r3, #7
 8007900:	e001      	b.n	8007906 <UI_AutoCalib+0x7e>
		if(bt == UI_ReadButton()) continue;
 8007902:	bf00      	nop
		UI_ShowSensor();
 8007904:	e7c9      	b.n	800789a <UI_AutoCalib+0x12>
		}
	}
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	08011104 	.word	0x08011104
 8007914:	20000ee8 	.word	0x20000ee8

08007918 <UI_Startup>:


DISP_Text_Typedef startup;

UI_Menu_Lists UI_Startup() {
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
	char buff[22];
	startup.size_y = 9;
 800791e:	4b5e      	ldr	r3, [pc, #376]	; (8007a98 <UI_Startup+0x180>)
 8007920:	2209      	movs	r2, #9
 8007922:	711a      	strb	r2, [r3, #4]
	sprintf(buff, "[%5i]Check memory", (uint16_t)HAL_GetTick());
 8007924:	f001 faae 	bl	8008e84 <HAL_GetTick>
 8007928:	4603      	mov	r3, r0
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	463b      	mov	r3, r7
 8007930:	495a      	ldr	r1, [pc, #360]	; (8007a9c <UI_Startup+0x184>)
 8007932:	4618      	mov	r0, r3
 8007934:	f007 f904 	bl	800eb40 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007938:	463b      	mov	r3, r7
 800793a:	4619      	mov	r1, r3
 800793c:	4856      	ldr	r0, [pc, #344]	; (8007a98 <UI_Startup+0x180>)
 800793e:	f7f9 ffab 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007942:	4b55      	ldr	r3, [pc, #340]	; (8007a98 <UI_Startup+0x180>)
 8007944:	785a      	ldrb	r2, [r3, #1]
 8007946:	4b54      	ldr	r3, [pc, #336]	; (8007a98 <UI_Startup+0x180>)
 8007948:	791b      	ldrb	r3, [r3, #4]
 800794a:	4413      	add	r3, r2
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b52      	ldr	r3, [pc, #328]	; (8007a98 <UI_Startup+0x180>)
 8007950:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 8007952:	2001      	movs	r0, #1
 8007954:	f001 faa2 	bl	8008e9c <HAL_Delay>
	if(!Storage_Init()) {
 8007958:	f7fd f908 	bl	8004b6c <Storage_Init>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d11d      	bne.n	800799e <UI_Startup+0x86>
		sprintf(buff, "[%5i]Mem initialize", (uint16_t)HAL_GetTick());
 8007962:	f001 fa8f 	bl	8008e84 <HAL_GetTick>
 8007966:	4603      	mov	r3, r0
 8007968:	b29b      	uxth	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	463b      	mov	r3, r7
 800796e:	494c      	ldr	r1, [pc, #304]	; (8007aa0 <UI_Startup+0x188>)
 8007970:	4618      	mov	r0, r3
 8007972:	f007 f8e5 	bl	800eb40 <siprintf>
		DISP_DisplayText(&startup, buff);
 8007976:	463b      	mov	r3, r7
 8007978:	4619      	mov	r1, r3
 800797a:	4847      	ldr	r0, [pc, #284]	; (8007a98 <UI_Startup+0x180>)
 800797c:	f7f9 ff8c 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8007980:	4b45      	ldr	r3, [pc, #276]	; (8007a98 <UI_Startup+0x180>)
 8007982:	785a      	ldrb	r2, [r3, #1]
 8007984:	4b44      	ldr	r3, [pc, #272]	; (8007a98 <UI_Startup+0x180>)
 8007986:	791b      	ldrb	r3, [r3, #4]
 8007988:	4413      	add	r3, r2
 800798a:	b2da      	uxtb	r2, r3
 800798c:	4b42      	ldr	r3, [pc, #264]	; (8007a98 <UI_Startup+0x180>)
 800798e:	705a      	strb	r2, [r3, #1]
		do {
			Storage_ResetMemory();
 8007990:	f7fd f89e 	bl	8004ad0 <Storage_ResetMemory>
		} while(!Storage_Init());
 8007994:	f7fd f8ea 	bl	8004b6c <Storage_Init>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f8      	beq.n	8007990 <UI_Startup+0x78>
	}
	sprintf(buff, "[%5i]Memory OK", (uint16_t)HAL_GetTick());
 800799e:	f001 fa71 	bl	8008e84 <HAL_GetTick>
 80079a2:	4603      	mov	r3, r0
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	463b      	mov	r3, r7
 80079aa:	493e      	ldr	r1, [pc, #248]	; (8007aa4 <UI_Startup+0x18c>)
 80079ac:	4618      	mov	r0, r3
 80079ae:	f007 f8c7 	bl	800eb40 <siprintf>
	DISP_DisplayText(&startup, buff);
 80079b2:	463b      	mov	r3, r7
 80079b4:	4619      	mov	r1, r3
 80079b6:	4838      	ldr	r0, [pc, #224]	; (8007a98 <UI_Startup+0x180>)
 80079b8:	f7f9 ff6e 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80079bc:	4b36      	ldr	r3, [pc, #216]	; (8007a98 <UI_Startup+0x180>)
 80079be:	785a      	ldrb	r2, [r3, #1]
 80079c0:	4b35      	ldr	r3, [pc, #212]	; (8007a98 <UI_Startup+0x180>)
 80079c2:	791b      	ldrb	r3, [r3, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	4b33      	ldr	r3, [pc, #204]	; (8007a98 <UI_Startup+0x180>)
 80079ca:	705a      	strb	r2, [r3, #1]

	sprintf(buff, "[%5i]Checking plan", (uint16_t)HAL_GetTick());
 80079cc:	f001 fa5a 	bl	8008e84 <HAL_GetTick>
 80079d0:	4603      	mov	r3, r0
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	463b      	mov	r3, r7
 80079d8:	4933      	ldr	r1, [pc, #204]	; (8007aa8 <UI_Startup+0x190>)
 80079da:	4618      	mov	r0, r3
 80079dc:	f007 f8b0 	bl	800eb40 <siprintf>
	DISP_DisplayText(&startup, buff);
 80079e0:	463b      	mov	r3, r7
 80079e2:	4619      	mov	r1, r3
 80079e4:	482c      	ldr	r0, [pc, #176]	; (8007a98 <UI_Startup+0x180>)
 80079e6:	f7f9 ff57 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 80079ea:	4b2b      	ldr	r3, [pc, #172]	; (8007a98 <UI_Startup+0x180>)
 80079ec:	785a      	ldrb	r2, [r3, #1]
 80079ee:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <UI_Startup+0x180>)
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	4b28      	ldr	r3, [pc, #160]	; (8007a98 <UI_Startup+0x180>)
 80079f8:	705a      	strb	r2, [r3, #1]
	HAL_Delay(1);
 80079fa:	2001      	movs	r0, #1
 80079fc:	f001 fa4e 	bl	8008e9c <HAL_Delay>
	if(!Storage_PlanInit()) {
 8007a00:	f7fd f8ec 	bl	8004bdc <Storage_PlanInit>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11d      	bne.n	8007a46 <UI_Startup+0x12e>
		sprintf(buff, "[%5i]Plan initializ", (uint16_t)HAL_GetTick());
 8007a0a:	f001 fa3b 	bl	8008e84 <HAL_GetTick>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	463b      	mov	r3, r7
 8007a16:	4925      	ldr	r1, [pc, #148]	; (8007aac <UI_Startup+0x194>)
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f007 f891 	bl	800eb40 <siprintf>
		DISP_DisplayText(&startup, buff);
 8007a1e:	463b      	mov	r3, r7
 8007a20:	4619      	mov	r1, r3
 8007a22:	481d      	ldr	r0, [pc, #116]	; (8007a98 <UI_Startup+0x180>)
 8007a24:	f7f9 ff38 	bl	8001898 <DISP_DisplayText>
		startup.origin_y = startup.origin_y+startup.size_y;
 8007a28:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <UI_Startup+0x180>)
 8007a2a:	785a      	ldrb	r2, [r3, #1]
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <UI_Startup+0x180>)
 8007a2e:	791b      	ldrb	r3, [r3, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <UI_Startup+0x180>)
 8007a36:	705a      	strb	r2, [r3, #1]

		do {
			Storage_ResetPlan();
 8007a38:	f7fc ffd8 	bl	80049ec <Storage_ResetPlan>
		} while(!Storage_PlanInit());
 8007a3c:	f7fd f8ce 	bl	8004bdc <Storage_PlanInit>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f8      	beq.n	8007a38 <UI_Startup+0x120>
	}
	Storage_GetPlan(num_plan);
 8007a46:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <UI_Startup+0x198>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd f93c 	bl	8004cc8 <Storage_GetPlan>
	sprintf(buff, "[%5i]Plan OK", (uint16_t)HAL_GetTick());
 8007a50:	f001 fa18 	bl	8008e84 <HAL_GetTick>
 8007a54:	4603      	mov	r3, r0
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	4915      	ldr	r1, [pc, #84]	; (8007ab4 <UI_Startup+0x19c>)
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f007 f86e 	bl	800eb40 <siprintf>
	DISP_DisplayText(&startup, buff);
 8007a64:	463b      	mov	r3, r7
 8007a66:	4619      	mov	r1, r3
 8007a68:	480b      	ldr	r0, [pc, #44]	; (8007a98 <UI_Startup+0x180>)
 8007a6a:	f7f9 ff15 	bl	8001898 <DISP_DisplayText>
	startup.origin_y = startup.origin_y+startup.size_y;
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <UI_Startup+0x180>)
 8007a70:	785a      	ldrb	r2, [r3, #1]
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <UI_Startup+0x180>)
 8007a74:	791b      	ldrb	r3, [r3, #4]
 8007a76:	4413      	add	r3, r2
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <UI_Startup+0x180>)
 8007a7c:	705a      	strb	r2, [r3, #1]

	while(UI_ReadButton() & SW_HM_PRESS);
 8007a7e:	bf00      	nop
 8007a80:	f7fe f94c 	bl	8005d1c <UI_ReadButton>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f8      	bne.n	8007a80 <UI_Startup+0x168>

	return UI_HOMESCREEN;
 8007a8e:	2302      	movs	r3, #2
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20000fa0 	.word	0x20000fa0
 8007a9c:	08011110 	.word	0x08011110
 8007aa0:	08011124 	.word	0x08011124
 8007aa4:	08011138 	.word	0x08011138
 8007aa8:	08011148 	.word	0x08011148
 8007aac:	0801115c 	.word	0x0801115c
 8007ab0:	20000cc9 	.word	0x20000cc9
 8007ab4:	08011170 	.word	0x08011170

08007ab8 <UI_CPDisplayInit>:


DISP_Text_Typedef cp_menu[4];
DISP_Text_Typedef cp_head;

void UI_CPDisplayInit() {
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
	cp_menu[0].origin_x = 3;
 8007abe:	4b2f      	ldr	r3, [pc, #188]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	701a      	strb	r2, [r3, #0]
	cp_menu[0].origin_y = 13;
 8007ac4:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007ac6:	220d      	movs	r2, #13
 8007ac8:	705a      	strb	r2, [r3, #1]
	cp_menu[0].size_x = 120;
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007acc:	2278      	movs	r2, #120	; 0x78
 8007ace:	70da      	strb	r2, [r3, #3]
	cp_menu[0].size_y = 11;
 8007ad0:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007ad2:	220b      	movs	r2, #11
 8007ad4:	711a      	strb	r2, [r3, #4]
	cp_menu[0].color = DISP_COLOR_WHITE;
 8007ad6:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	709a      	strb	r2, [r3, #2]
	cp_menu[0].align_x = DISP_ALIGN_CENTER;
 8007adc:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007ade:	2202      	movs	r2, #2
 8007ae0:	715a      	strb	r2, [r3, #5]
	cp_menu[0].align_y = DISP_ALIGN_CENTER;
 8007ae2:	4b26      	ldr	r3, [pc, #152]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	719a      	strb	r2, [r3, #6]
	for(int i=1; i<4; i++) {
 8007ae8:	2301      	movs	r3, #1
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	e027      	b.n	8007b3e <UI_CPDisplayInit+0x86>
		cp_menu[i] = cp_menu[0];
 8007aee:	4923      	ldr	r1, [pc, #140]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	1a9b      	subs	r3, r3, r2
 8007af8:	440b      	add	r3, r1
 8007afa:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007afc:	6810      	ldr	r0, [r2, #0]
 8007afe:	6018      	str	r0, [r3, #0]
 8007b00:	8891      	ldrh	r1, [r2, #4]
 8007b02:	7992      	ldrb	r2, [r2, #6]
 8007b04:	8099      	strh	r1, [r3, #4]
 8007b06:	719a      	strb	r2, [r3, #6]
		cp_menu[i].origin_y = cp_menu[i-1].origin_y+cp_menu[0].size_y+2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	1e5a      	subs	r2, r3, #1
 8007b0c:	491b      	ldr	r1, [pc, #108]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007b0e:	4613      	mov	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	440b      	add	r3, r1
 8007b16:	3301      	adds	r3, #1
 8007b18:	781a      	ldrb	r2, [r3, #0]
 8007b1a:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007b1c:	791b      	ldrb	r3, [r3, #4]
 8007b1e:	4413      	add	r3, r2
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3302      	adds	r3, #2
 8007b24:	b2d8      	uxtb	r0, r3
 8007b26:	4915      	ldr	r1, [pc, #84]	; (8007b7c <UI_CPDisplayInit+0xc4>)
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	440b      	add	r3, r1
 8007b32:	3301      	adds	r3, #1
 8007b34:	4602      	mov	r2, r0
 8007b36:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<4; i++) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	607b      	str	r3, [r7, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	ddd4      	ble.n	8007aee <UI_CPDisplayInit+0x36>
	}

	cp_head.origin_x = 0;
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
	cp_head.origin_y = 0;
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	705a      	strb	r2, [r3, #1]
	cp_head.size_x = 127;
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b52:	227f      	movs	r2, #127	; 0x7f
 8007b54:	70da      	strb	r2, [r3, #3]
	cp_head.size_y = 10;
 8007b56:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b58:	220a      	movs	r2, #10
 8007b5a:	711a      	strb	r2, [r3, #4]
	cp_head.color = DISP_COLOR_BLACK;
 8007b5c:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	709a      	strb	r2, [r3, #2]
	cp_head.align_x = DISP_ALIGN_CENTER;
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b64:	2202      	movs	r2, #2
 8007b66:	715a      	strb	r2, [r3, #5]
	cp_head.align_y = DISP_ALIGN_CENTER;
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <UI_CPDisplayInit+0xc8>)
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	719a      	strb	r2, [r3, #6]
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20000fa8 	.word	0x20000fa8
 8007b80:	20000fc4 	.word	0x20000fc4

08007b84 <UI_CPDisplay>:

void UI_CPDisplay(uint8_t num, uint8_t* num_value) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	4a31      	ldr	r2, [pc, #196]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007b94:	f992 2000 	ldrsb.w	r2, [r2]
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	dd06      	ble.n	8007bac <UI_CPDisplay+0x28>
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	3b03      	subs	r3, #3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	b25a      	sxtb	r2, r3
 8007ba6:	4b2c      	ldr	r3, [pc, #176]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e009      	b.n	8007bc0 <UI_CPDisplay+0x3c>
	else if(num < first_list) first_list = num;
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007bb0:	f992 2000 	ldrsb.w	r2, [r2]
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	da03      	bge.n	8007bc0 <UI_CPDisplay+0x3c>
 8007bb8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007bbc:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007bbe:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc4:	e03f      	b.n	8007c46 <UI_CPDisplay+0xc2>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	441a      	add	r2, r3
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d109      	bne.n	8007bec <UI_CPDisplay+0x68>
 8007bd8:	4920      	ldr	r1, [pc, #128]	; (8007c5c <UI_CPDisplay+0xd8>)
 8007bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	440b      	add	r3, r1
 8007be4:	3302      	adds	r3, #2
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e008      	b.n	8007bfe <UI_CPDisplay+0x7a>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007bec:	491b      	ldr	r1, [pc, #108]	; (8007c5c <UI_CPDisplay+0xd8>)
 8007bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "CP%-2i  ~  %03i", i + first_list, num_value[i + first_list]);
 8007bfe:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007c00:	f993 3000 	ldrsb.w	r3, [r3]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	441a      	add	r2, r3
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <UI_CPDisplay+0xd4>)
 8007c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8007c10:	4619      	mov	r1, r3
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	440b      	add	r3, r1
 8007c16:	4619      	mov	r1, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	440b      	add	r3, r1
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f107 000c 	add.w	r0, r7, #12
 8007c22:	490f      	ldr	r1, [pc, #60]	; (8007c60 <UI_CPDisplay+0xdc>)
 8007c24:	f006 ff8c 	bl	800eb40 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	4a0a      	ldr	r2, [pc, #40]	; (8007c5c <UI_CPDisplay+0xd8>)
 8007c32:	4413      	add	r3, r2
 8007c34:	f107 020c 	add.w	r2, r7, #12
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7f9 fe2c 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	3301      	adds	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	ddbc      	ble.n	8007bc6 <UI_CPDisplay+0x42>
	}
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000fd4 	.word	0x20000fd4
 8007c5c:	20000fa8 	.word	0x20000fa8
 8007c60:	08011180 	.word	0x08011180

08007c64 <UI_CP>:

UI_Menu_Lists UI_CP() {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "CHECKPOINT");
 8007c72:	4949      	ldr	r1, [pc, #292]	; (8007d98 <UI_CP+0x134>)
 8007c74:	4849      	ldr	r0, [pc, #292]	; (8007d9c <UI_CP+0x138>)
 8007c76:	f7f9 fe0f 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_CPDisplay(num_menu, plan.checkpoint);
 8007c7a:	79bb      	ldrb	r3, [r7, #6]
 8007c7c:	4948      	ldr	r1, [pc, #288]	; (8007da0 <UI_CP+0x13c>)
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ff80 	bl	8007b84 <UI_CPDisplay>
	tick = HAL_GetTick();
 8007c84:	f001 f8fe 	bl	8008e84 <HAL_GetTick>
 8007c88:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007c8a:	f001 f8fb 	bl	8008e84 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b45      	cmp	r3, #69	; 0x45
 8007c96:	d977      	bls.n	8007d88 <UI_CP+0x124>
		if(bt == UI_ReadButton()) continue;
 8007c98:	f7fe f840 	bl	8005d1c <UI_ReadButton>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d072      	beq.n	8007d8c <UI_CP+0x128>
		bt = UI_ReadButton();
 8007ca6:	f7fe f839 	bl	8005d1c <UI_ReadButton>
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <UI_CP+0x68>
			if(num_menu==MAX_CHECKPOINT-1) num_menu = 0; else num_menu++;
 8007cb8:	79bb      	ldrb	r3, [r7, #6]
 8007cba:	2b13      	cmp	r3, #19
 8007cbc:	d102      	bne.n	8007cc4 <UI_CP+0x60>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	71bb      	strb	r3, [r7, #6]
 8007cc2:	e7da      	b.n	8007c7a <UI_CP+0x16>
 8007cc4:	79bb      	ldrb	r3, [r7, #6]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007cca:	e7d6      	b.n	8007c7a <UI_CP+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <UI_CP+0x86>
			if(num_menu==0) num_menu = MAX_CHECKPOINT-1; else num_menu--;
 8007cd6:	79bb      	ldrb	r3, [r7, #6]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <UI_CP+0x7e>
 8007cdc:	2313      	movs	r3, #19
 8007cde:	71bb      	strb	r3, [r7, #6]
 8007ce0:	e7cb      	b.n	8007c7a <UI_CP+0x16>
 8007ce2:	79bb      	ldrb	r3, [r7, #6]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007ce8:	e7c7      	b.n	8007c7a <UI_CP+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d016      	beq.n	8007d22 <UI_CP+0xbe>
			if(plan.checkpoint[num_menu]==DEF_ACTION_PER_PLAN-1) plan.checkpoint[num_menu] = 0; else plan.checkpoint[num_menu]++;
 8007cf4:	79bb      	ldrb	r3, [r7, #6]
 8007cf6:	4a2b      	ldr	r2, [pc, #172]	; (8007da4 <UI_CP+0x140>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	789b      	ldrb	r3, [r3, #2]
 8007cfc:	2b63      	cmp	r3, #99	; 0x63
 8007cfe:	d105      	bne.n	8007d0c <UI_CP+0xa8>
 8007d00:	79bb      	ldrb	r3, [r7, #6]
 8007d02:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <UI_CP+0x140>)
 8007d04:	4413      	add	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	709a      	strb	r2, [r3, #2]
 8007d0a:	e7b6      	b.n	8007c7a <UI_CP+0x16>
 8007d0c:	79bb      	ldrb	r3, [r7, #6]
 8007d0e:	4a25      	ldr	r2, [pc, #148]	; (8007da4 <UI_CP+0x140>)
 8007d10:	441a      	add	r2, r3
 8007d12:	7892      	ldrb	r2, [r2, #2]
 8007d14:	3201      	adds	r2, #1
 8007d16:	b2d1      	uxtb	r1, r2
 8007d18:	4a22      	ldr	r2, [pc, #136]	; (8007da4 <UI_CP+0x140>)
 8007d1a:	4413      	add	r3, r2
 8007d1c:	460a      	mov	r2, r1
 8007d1e:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8007d20:	e7ab      	b.n	8007c7a <UI_CP+0x16>
		}
		else if(bt & SW_LF_PRESS) {
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d016      	beq.n	8007d5a <UI_CP+0xf6>
			if(plan.checkpoint[num_menu]==0) plan.checkpoint[num_menu] = DEF_ACTION_PER_PLAN-1; else plan.checkpoint[num_menu]--;
 8007d2c:	79bb      	ldrb	r3, [r7, #6]
 8007d2e:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <UI_CP+0x140>)
 8007d30:	4413      	add	r3, r2
 8007d32:	789b      	ldrb	r3, [r3, #2]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <UI_CP+0xe0>
 8007d38:	79bb      	ldrb	r3, [r7, #6]
 8007d3a:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <UI_CP+0x140>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	2263      	movs	r2, #99	; 0x63
 8007d40:	709a      	strb	r2, [r3, #2]
 8007d42:	e79a      	b.n	8007c7a <UI_CP+0x16>
 8007d44:	79bb      	ldrb	r3, [r7, #6]
 8007d46:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <UI_CP+0x140>)
 8007d48:	441a      	add	r2, r3
 8007d4a:	7892      	ldrb	r2, [r2, #2]
 8007d4c:	3a01      	subs	r2, #1
 8007d4e:	b2d1      	uxtb	r1, r2
 8007d50:	4a14      	ldr	r2, [pc, #80]	; (8007da4 <UI_CP+0x140>)
 8007d52:	4413      	add	r3, r2
 8007d54:	460a      	mov	r2, r1
 8007d56:	709a      	strb	r2, [r3, #2]
			goto ui_cp;
 8007d58:	e78f      	b.n	8007c7a <UI_CP+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <UI_CP+0x104>
			return UI_HOMESCREEN;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e013      	b.n	8007d90 <UI_CP+0x12c>
		}
		else if(bt & (SW_BK_PRESS|SW_OK_PRESS)) {
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d08b      	beq.n	8007c8a <UI_CP+0x26>
			DISP_DisplayText(&short_message, "Saving...");
 8007d72:	490d      	ldr	r1, [pc, #52]	; (8007da8 <UI_CP+0x144>)
 8007d74:	480d      	ldr	r0, [pc, #52]	; (8007dac <UI_CP+0x148>)
 8007d76:	f7f9 fd8f 	bl	8001898 <DISP_DisplayText>
			Storage_SetCheckpoint();
 8007d7a:	f7fd f827 	bl	8004dcc <Storage_SetCheckpoint>
			HAL_Delay(200);
 8007d7e:	20c8      	movs	r0, #200	; 0xc8
 8007d80:	f001 f88c 	bl	8008e9c <HAL_Delay>
			return UI_SET;
 8007d84:	2307      	movs	r3, #7
 8007d86:	e003      	b.n	8007d90 <UI_CP+0x12c>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007d88:	bf00      	nop
 8007d8a:	e77e      	b.n	8007c8a <UI_CP+0x26>
		if(bt == UI_ReadButton()) continue;
 8007d8c:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007d8e:	e77c      	b.n	8007c8a <UI_CP+0x26>
		}
	}
	return UI_IDLE;
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	08011190 	.word	0x08011190
 8007d9c:	20000fc4 	.word	0x20000fc4
 8007da0:	20000d56 	.word	0x20000d56
 8007da4:	20000d54 	.word	0x20000d54
 8007da8:	08011104 	.word	0x08011104
 8007dac:	20000ee8 	.word	0x20000ee8

08007db0 <UI_PlanSelectDisplay>:




void UI_PlanSelectDisplay(uint8_t num) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	4a2c      	ldr	r2, [pc, #176]	; (8007e70 <UI_PlanSelectDisplay+0xc0>)
 8007dbe:	f992 2000 	ldrsb.w	r2, [r2]
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	dd06      	ble.n	8007dd6 <UI_PlanSelectDisplay+0x26>
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	3b03      	subs	r3, #3
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	b25a      	sxtb	r2, r3
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <UI_PlanSelectDisplay+0xc0>)
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e009      	b.n	8007dea <UI_PlanSelectDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <UI_PlanSelectDisplay+0xc0>)
 8007dda:	f992 2000 	ldrsb.w	r2, [r2]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	da03      	bge.n	8007dea <UI_PlanSelectDisplay+0x3a>
 8007de2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007de6:	4b22      	ldr	r3, [pc, #136]	; (8007e70 <UI_PlanSelectDisplay+0xc0>)
 8007de8:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8007dea:	2300      	movs	r3, #0
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
 8007dee:	e036      	b.n	8007e5e <UI_PlanSelectDisplay+0xae>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8007df0:	4b1f      	ldr	r3, [pc, #124]	; (8007e70 <UI_PlanSelectDisplay+0xc0>)
 8007df2:	f993 3000 	ldrsb.w	r3, [r3]
 8007df6:	461a      	mov	r2, r3
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	441a      	add	r2, r3
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d109      	bne.n	8007e16 <UI_PlanSelectDisplay+0x66>
 8007e02:	491c      	ldr	r1, [pc, #112]	; (8007e74 <UI_PlanSelectDisplay+0xc4>)
 8007e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e06:	4613      	mov	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	3302      	adds	r3, #2
 8007e10:	2201      	movs	r2, #1
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	e008      	b.n	8007e28 <UI_PlanSelectDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8007e16:	4917      	ldr	r1, [pc, #92]	; (8007e74 <UI_PlanSelectDisplay+0xc4>)
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	440b      	add	r3, r1
 8007e22:	3302      	adds	r3, #2
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
		char buff[22];
		sprintf(buff, "Plan%i", i + first_list);
 8007e28:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <UI_PlanSelectDisplay+0xc0>)
 8007e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	441a      	add	r2, r3
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	490f      	ldr	r1, [pc, #60]	; (8007e78 <UI_PlanSelectDisplay+0xc8>)
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f006 fe80 	bl	800eb40 <siprintf>
		DISP_DisplayText(&cp_menu[i], buff);
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	4613      	mov	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	4a0a      	ldr	r2, [pc, #40]	; (8007e74 <UI_PlanSelectDisplay+0xc4>)
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f107 020c 	add.w	r2, r7, #12
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7f9 fd20 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	ddc5      	ble.n	8007df0 <UI_PlanSelectDisplay+0x40>
	}
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	3728      	adds	r7, #40	; 0x28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000fd5 	.word	0x20000fd5
 8007e74:	20000fa8 	.word	0x20000fa8
 8007e78:	0801119c 	.word	0x0801119c

08007e7c <UI_PlanSelect>:

UI_Menu_Lists UI_PlanSelect() {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
	uint8_t bt;
	uint8_t num_menu = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	71bb      	strb	r3, [r7, #6]
	uint32_t tick = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&cp_head, "SELECT PLAN");
 8007e8a:	494f      	ldr	r1, [pc, #316]	; (8007fc8 <UI_PlanSelect+0x14c>)
 8007e8c:	484f      	ldr	r0, [pc, #316]	; (8007fcc <UI_PlanSelect+0x150>)
 8007e8e:	f7f9 fd03 	bl	8001898 <DISP_DisplayText>
	ui_cp:
	UI_PlanSelectDisplay(num_menu);
 8007e92:	79bb      	ldrb	r3, [r7, #6]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ff8b 	bl	8007db0 <UI_PlanSelectDisplay>
	tick = HAL_GetTick();
 8007e9a:	f000 fff3 	bl	8008e84 <HAL_GetTick>
 8007e9e:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007ea0:	f000 fff0 	bl	8008e84 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b45      	cmp	r3, #69	; 0x45
 8007eac:	f240 8083 	bls.w	8007fb6 <UI_PlanSelect+0x13a>
		if(bt == UI_ReadButton()) continue;
 8007eb0:	f7fd ff34 	bl	8005d1c <UI_ReadButton>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d07d      	beq.n	8007fba <UI_PlanSelect+0x13e>
		bt = UI_ReadButton();
 8007ebe:	f7fd ff2d 	bl	8005d1c <UI_ReadButton>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <UI_PlanSelect+0x68>
			if(num_menu==MAX_PLAN-1) num_menu = 0; else num_menu++;
 8007ed0:	79bb      	ldrb	r3, [r7, #6]
 8007ed2:	2b0e      	cmp	r3, #14
 8007ed4:	d102      	bne.n	8007edc <UI_PlanSelect+0x60>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	71bb      	strb	r3, [r7, #6]
 8007eda:	e7da      	b.n	8007e92 <UI_PlanSelect+0x16>
 8007edc:	79bb      	ldrb	r3, [r7, #6]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007ee2:	e7d6      	b.n	8007e92 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <UI_PlanSelect+0x86>
			if(num_menu==0) num_menu = MAX_PLAN-1; else num_menu--;
 8007eee:	79bb      	ldrb	r3, [r7, #6]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <UI_PlanSelect+0x7e>
 8007ef4:	230e      	movs	r3, #14
 8007ef6:	71bb      	strb	r3, [r7, #6]
 8007ef8:	e7cb      	b.n	8007e92 <UI_PlanSelect+0x16>
 8007efa:	79bb      	ldrb	r3, [r7, #6]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	71bb      	strb	r3, [r7, #6]
			goto ui_cp;
 8007f00:	e7c7      	b.n	8007e92 <UI_PlanSelect+0x16>
		}
		else if(bt & SW_RG_PRESS) {
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d029      	beq.n	8007f60 <UI_PlanSelect+0xe4>
			DISP_DisplayText(&short_message, "Copy to this Plan?");
 8007f0c:	4930      	ldr	r1, [pc, #192]	; (8007fd0 <UI_PlanSelect+0x154>)
 8007f0e:	4831      	ldr	r0, [pc, #196]	; (8007fd4 <UI_PlanSelect+0x158>)
 8007f10:	f7f9 fcc2 	bl	8001898 <DISP_DisplayText>
			while(1) {
				if(bt == UI_ReadButton()) continue;
 8007f14:	f7fd ff02 	bl	8005d1c <UI_ReadButton>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01c      	beq.n	8007f5c <UI_PlanSelect+0xe0>
				bt = UI_ReadButton();
 8007f22:	f7fd fefb 	bl	8005d1c <UI_ReadButton>
 8007f26:	4603      	mov	r3, r0
 8007f28:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_OK_PRESS) {
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00d      	beq.n	8007f50 <UI_PlanSelect+0xd4>
					DISP_DisplayText(&short_message, "Copying...");
 8007f34:	4928      	ldr	r1, [pc, #160]	; (8007fd8 <UI_PlanSelect+0x15c>)
 8007f36:	4827      	ldr	r0, [pc, #156]	; (8007fd4 <UI_PlanSelect+0x158>)
 8007f38:	f7f9 fcae 	bl	8001898 <DISP_DisplayText>
					Storage_CopyPlan(num_menu);
 8007f3c:	79bb      	ldrb	r3, [r7, #6]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd f9d2 	bl	80052e8 <Storage_CopyPlan>
					DISP_DisplayText(&short_message, "Copy done!");
 8007f44:	4925      	ldr	r1, [pc, #148]	; (8007fdc <UI_PlanSelect+0x160>)
 8007f46:	4823      	ldr	r0, [pc, #140]	; (8007fd4 <UI_PlanSelect+0x158>)
 8007f48:	f7f9 fca6 	bl	8001898 <DISP_DisplayText>
					break;
 8007f4c:	bf00      	nop
				}
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
					goto ui_cp;
				}
			}
			goto ui_cp;
 8007f4e:	e7a0      	b.n	8007e92 <UI_PlanSelect+0x16>
				if(bt & (SW_BK_PRESS||SW_HM_PRESS)) {
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0dc      	beq.n	8007f14 <UI_PlanSelect+0x98>
					goto ui_cp;
 8007f5a:	e79a      	b.n	8007e92 <UI_PlanSelect+0x16>
				if(bt == UI_ReadButton()) continue;
 8007f5c:	bf00      	nop
 8007f5e:	e7d9      	b.n	8007f14 <UI_PlanSelect+0x98>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <UI_PlanSelect+0xf2>
			return UI_HOMESCREEN;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e027      	b.n	8007fbe <UI_PlanSelect+0x142>
		}
		else if(bt & SW_OK_PRESS) {
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	f003 0320 	and.w	r3, r3, #32
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d093      	beq.n	8007ea0 <UI_PlanSelect+0x24>
			DISP_DisplayText(&short_message, "Loading...");
 8007f78:	4919      	ldr	r1, [pc, #100]	; (8007fe0 <UI_PlanSelect+0x164>)
 8007f7a:	4816      	ldr	r0, [pc, #88]	; (8007fd4 <UI_PlanSelect+0x158>)
 8007f7c:	f7f9 fc8c 	bl	8001898 <DISP_DisplayText>
			if(!Storage_GetPlan(num_menu)) {
 8007f80:	79bb      	ldrb	r3, [r7, #6]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fc fea0 	bl	8004cc8 <Storage_GetPlan>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <UI_PlanSelect+0x128>
				DISP_DisplayText(&short_message, "Reseting...");
 8007f8e:	4915      	ldr	r1, [pc, #84]	; (8007fe4 <UI_PlanSelect+0x168>)
 8007f90:	4810      	ldr	r0, [pc, #64]	; (8007fd4 <UI_PlanSelect+0x158>)
 8007f92:	f7f9 fc81 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8007f96:	f7fc fd29 	bl	80049ec <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 8007f9a:	f7fc fe1f 	bl	8004bdc <Storage_PlanInit>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f8      	beq.n	8007f96 <UI_PlanSelect+0x11a>
			}
			DISP_DisplayText(&short_message, "Done!");
 8007fa4:	4910      	ldr	r1, [pc, #64]	; (8007fe8 <UI_PlanSelect+0x16c>)
 8007fa6:	480b      	ldr	r0, [pc, #44]	; (8007fd4 <UI_PlanSelect+0x158>)
 8007fa8:	f7f9 fc76 	bl	8001898 <DISP_DisplayText>
			HAL_Delay(200);
 8007fac:	20c8      	movs	r0, #200	; 0xc8
 8007fae:	f000 ff75 	bl	8008e9c <HAL_Delay>
			return UI_HOMESCREEN;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e003      	b.n	8007fbe <UI_PlanSelect+0x142>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007fb6:	bf00      	nop
 8007fb8:	e772      	b.n	8007ea0 <UI_PlanSelect+0x24>
		if(bt == UI_ReadButton()) continue;
 8007fba:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 8007fbc:	e770      	b.n	8007ea0 <UI_PlanSelect+0x24>
		}
	}
	return UI_IDLE;
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	080111a4 	.word	0x080111a4
 8007fcc:	20000fc4 	.word	0x20000fc4
 8007fd0:	080111b0 	.word	0x080111b0
 8007fd4:	20000ee8 	.word	0x20000ee8
 8007fd8:	080111c4 	.word	0x080111c4
 8007fdc:	080111d0 	.word	0x080111d0
 8007fe0:	080111dc 	.word	0x080111dc
 8007fe4:	080111e8 	.word	0x080111e8
 8007fe8:	080111f4 	.word	0x080111f4

08007fec <UI_MemSettingDisplay>:
		" Reset All",
		" ",
		" "
};

void UI_MemSettingDisplay(uint8_t num) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	4a29      	ldr	r2, [pc, #164]	; (80080a0 <UI_MemSettingDisplay+0xb4>)
 8007ffa:	f992 2000 	ldrsb.w	r2, [r2]
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	2b03      	cmp	r3, #3
 8008002:	dd06      	ble.n	8008012 <UI_MemSettingDisplay+0x26>
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	3b03      	subs	r3, #3
 8008008:	b2db      	uxtb	r3, r3
 800800a:	b25a      	sxtb	r2, r3
 800800c:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <UI_MemSettingDisplay+0xb4>)
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e009      	b.n	8008026 <UI_MemSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	4a22      	ldr	r2, [pc, #136]	; (80080a0 <UI_MemSettingDisplay+0xb4>)
 8008016:	f992 2000 	ldrsb.w	r2, [r2]
 800801a:	4293      	cmp	r3, r2
 800801c:	da03      	bge.n	8008026 <UI_MemSettingDisplay+0x3a>
 800801e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8008022:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <UI_MemSettingDisplay+0xb4>)
 8008024:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e031      	b.n	8008090 <UI_MemSettingDisplay+0xa4>
		if(i + first_list == num) setting_menu[i].color = DISP_COLOR_BLACK;
 800802c:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <UI_MemSettingDisplay+0xb4>)
 800802e:	f993 3000 	ldrsb.w	r3, [r3]
 8008032:	461a      	mov	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	441a      	add	r2, r3
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	429a      	cmp	r2, r3
 800803c:	d109      	bne.n	8008052 <UI_MemSettingDisplay+0x66>
 800803e:	4919      	ldr	r1, [pc, #100]	; (80080a4 <UI_MemSettingDisplay+0xb8>)
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4613      	mov	r3, r2
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	440b      	add	r3, r1
 800804a:	3302      	adds	r3, #2
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e008      	b.n	8008064 <UI_MemSettingDisplay+0x78>
		else setting_menu[i].color = DISP_COLOR_WHITE;
 8008052:	4914      	ldr	r1, [pc, #80]	; (80080a4 <UI_MemSettingDisplay+0xb8>)
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4613      	mov	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	440b      	add	r3, r1
 800805e:	3302      	adds	r3, #2
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
		DISP_DisplayText(&setting_menu[i], memory_menus[i+first_list]);
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4613      	mov	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <UI_MemSettingDisplay+0xb8>)
 800806e:	441a      	add	r2, r3
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <UI_MemSettingDisplay+0xb4>)
 8008072:	f993 3000 	ldrsb.w	r3, [r3]
 8008076:	4619      	mov	r1, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	440b      	add	r3, r1
 800807c:	490a      	ldr	r1, [pc, #40]	; (80080a8 <UI_MemSettingDisplay+0xbc>)
 800807e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f7f9 fc07 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3301      	adds	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b03      	cmp	r3, #3
 8008094:	ddca      	ble.n	800802c <UI_MemSettingDisplay+0x40>
	}
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000fd6 	.word	0x20000fd6
 80080a4:	20000f1c 	.word	0x20000f1c
 80080a8:	20000310 	.word	0x20000310

080080ac <UI_MemSetting>:

UI_Menu_Lists UI_MemSetting() {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
	uint8_t bt;
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	603b      	str	r3, [r7, #0]
	DISP_DisplayText(&home_status, "MEMORY");
 80080b6:	495b      	ldr	r1, [pc, #364]	; (8008224 <UI_MemSetting+0x178>)
 80080b8:	485b      	ldr	r0, [pc, #364]	; (8008228 <UI_MemSetting+0x17c>)
 80080ba:	f7f9 fbed 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_MemSettingDisplay(num_menu);
 80080be:	4b5b      	ldr	r3, [pc, #364]	; (800822c <UI_MemSetting+0x180>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff ff92 	bl	8007fec <UI_MemSettingDisplay>
	tick = HAL_GetTick();
 80080c8:	f000 fedc 	bl	8008e84 <HAL_GetTick>
 80080cc:	6038      	str	r0, [r7, #0]
	while(1) {
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 80080ce:	f000 fed9 	bl	8008e84 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b45      	cmp	r3, #69	; 0x45
 80080da:	f240 8097 	bls.w	800820c <UI_MemSetting+0x160>
		if(bt == UI_ReadButton()) continue;
 80080de:	f7fd fe1d 	bl	8005d1c <UI_ReadButton>
 80080e2:	4603      	mov	r3, r0
 80080e4:	461a      	mov	r2, r3
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	4293      	cmp	r3, r2
 80080ea:	f000 8091 	beq.w	8008210 <UI_MemSetting+0x164>
		bt = UI_ReadButton();
 80080ee:	f7fd fe15 	bl	8005d1c <UI_ReadButton>
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]

		if(bt & SW_DW_PRESS) {
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00e      	beq.n	800811e <UI_MemSetting+0x72>
			if(num_menu==1) num_menu = 0; else num_menu++;
 8008100:	4b4a      	ldr	r3, [pc, #296]	; (800822c <UI_MemSetting+0x180>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d103      	bne.n	8008110 <UI_MemSetting+0x64>
 8008108:	4b48      	ldr	r3, [pc, #288]	; (800822c <UI_MemSetting+0x180>)
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e7d6      	b.n	80080be <UI_MemSetting+0x12>
 8008110:	4b46      	ldr	r3, [pc, #280]	; (800822c <UI_MemSetting+0x180>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	4b44      	ldr	r3, [pc, #272]	; (800822c <UI_MemSetting+0x180>)
 800811a:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 800811c:	e7cf      	b.n	80080be <UI_MemSetting+0x12>
		}
		else if(bt & SW_UP_PRESS) {
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00e      	beq.n	8008146 <UI_MemSetting+0x9a>
			if(num_menu==0) num_menu = 1; else num_menu--;
 8008128:	4b40      	ldr	r3, [pc, #256]	; (800822c <UI_MemSetting+0x180>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <UI_MemSetting+0x8c>
 8008130:	4b3e      	ldr	r3, [pc, #248]	; (800822c <UI_MemSetting+0x180>)
 8008132:	2201      	movs	r2, #1
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	e7c2      	b.n	80080be <UI_MemSetting+0x12>
 8008138:	4b3c      	ldr	r3, [pc, #240]	; (800822c <UI_MemSetting+0x180>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	3b01      	subs	r3, #1
 800813e:	b2da      	uxtb	r2, r3
 8008140:	4b3a      	ldr	r3, [pc, #232]	; (800822c <UI_MemSetting+0x180>)
 8008142:	701a      	strb	r2, [r3, #0]
			goto ui_mem;
 8008144:	e7bb      	b.n	80080be <UI_MemSetting+0x12>
		}
		else if(bt & SW_HM_PRESS) {
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <UI_MemSetting+0xae>
			num_menu = 0;
 8008150:	4b36      	ldr	r3, [pc, #216]	; (800822c <UI_MemSetting+0x180>)
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 8008156:	2302      	movs	r3, #2
 8008158:	e060      	b.n	800821c <UI_MemSetting+0x170>
		}
		else if(bt & SW_BK_PRESS) {
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <UI_MemSetting+0xc2>
			num_menu = 0;
 8008164:	4b31      	ldr	r3, [pc, #196]	; (800822c <UI_MemSetting+0x180>)
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
			return UI_SET;
 800816a:	2307      	movs	r3, #7
 800816c:	e056      	b.n	800821c <UI_MemSetting+0x170>
		}
		switch(num_menu) {
 800816e:	4b2f      	ldr	r3, [pc, #188]	; (800822c <UI_MemSetting+0x180>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b03      	cmp	r3, #3
 8008174:	d027      	beq.n	80081c6 <UI_MemSetting+0x11a>
 8008176:	2b03      	cmp	r3, #3
 8008178:	dca9      	bgt.n	80080ce <UI_MemSetting+0x22>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <UI_MemSetting+0xd8>
 800817e:	2b01      	cmp	r3, #1
 8008180:	d018      	beq.n	80081b4 <UI_MemSetting+0x108>
 8008182:	e04a      	b.n	800821a <UI_MemSetting+0x16e>
		case 0:
			if(bt & SW_OK_PRESS) {
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d042      	beq.n	8008214 <UI_MemSetting+0x168>
				DISP_DisplayText(&short_message, "Reseting...");
 800818e:	4928      	ldr	r1, [pc, #160]	; (8008230 <UI_MemSetting+0x184>)
 8008190:	4828      	ldr	r0, [pc, #160]	; (8008234 <UI_MemSetting+0x188>)
 8008192:	f7f9 fb81 	bl	8001898 <DISP_DisplayText>
				do {
					Storage_ResetPlan();
 8008196:	f7fc fc29 	bl	80049ec <Storage_ResetPlan>
				} while(!Storage_PlanInit());
 800819a:	f7fc fd1f 	bl	8004bdc <Storage_PlanInit>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0f8      	beq.n	8008196 <UI_MemSetting+0xea>
				DISP_DisplayText(&short_message, "Done!");
 80081a4:	4924      	ldr	r1, [pc, #144]	; (8008238 <UI_MemSetting+0x18c>)
 80081a6:	4823      	ldr	r0, [pc, #140]	; (8008234 <UI_MemSetting+0x188>)
 80081a8:	f7f9 fb76 	bl	8001898 <DISP_DisplayText>
				HAL_Delay(200);
 80081ac:	20c8      	movs	r0, #200	; 0xc8
 80081ae:	f000 fe75 	bl	8008e9c <HAL_Delay>
				goto ui_mem;
 80081b2:	e784      	b.n	80080be <UI_MemSetting+0x12>
			}
			break;
		case 1:
			if(bt & SW_OK_PRESS) {
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d02c      	beq.n	8008218 <UI_MemSetting+0x16c>
				num_menu = 3;
 80081be:	4b1b      	ldr	r3, [pc, #108]	; (800822c <UI_MemSetting+0x180>)
 80081c0:	2203      	movs	r2, #3
 80081c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80081c4:	e028      	b.n	8008218 <UI_MemSetting+0x16c>
		case 3:
			DISP_DisplayText(&setting_menu[3], "Are you sure?");
 80081c6:	491d      	ldr	r1, [pc, #116]	; (800823c <UI_MemSetting+0x190>)
 80081c8:	481d      	ldr	r0, [pc, #116]	; (8008240 <UI_MemSetting+0x194>)
 80081ca:	f7f9 fb65 	bl	8001898 <DISP_DisplayText>
			while(1) {
				bt = UI_ReadButton();
 80081ce:	f7fd fda5 	bl	8005d1c <UI_ReadButton>
 80081d2:	4603      	mov	r3, r0
 80081d4:	71fb      	strb	r3, [r7, #7]
				if(bt & SW_BK_PRESS) {
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <UI_MemSetting+0x13c>
					num_menu = 1;
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <UI_MemSetting+0x180>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	701a      	strb	r2, [r3, #0]
					goto ui_mem;
 80081e6:	e76a      	b.n	80080be <UI_MemSetting+0x12>
				}
				if(bt & SW_OK_PRESS) {
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0ed      	beq.n	80081ce <UI_MemSetting+0x122>
					DISP_DisplayText(&setting_menu[3], "Wait...");
 80081f2:	4914      	ldr	r1, [pc, #80]	; (8008244 <UI_MemSetting+0x198>)
 80081f4:	4812      	ldr	r0, [pc, #72]	; (8008240 <UI_MemSetting+0x194>)
 80081f6:	f7f9 fb4f 	bl	8001898 <DISP_DisplayText>
					Storage_CleanInit();
 80081fa:	f7fd f8a7 	bl	800534c <Storage_CleanInit>
					HAL_Delay(1000);
 80081fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008202:	f000 fe4b 	bl	8008e9c <HAL_Delay>
					HAL_NVIC_SystemReset();
 8008206:	f001 fcb4 	bl	8009b72 <HAL_NVIC_SystemReset>
				bt = UI_ReadButton();
 800820a:	e7e0      	b.n	80081ce <UI_MemSetting+0x122>
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800820c:	bf00      	nop
 800820e:	e75e      	b.n	80080ce <UI_MemSetting+0x22>
		if(bt == UI_ReadButton()) continue;
 8008210:	bf00      	nop
 8008212:	e75c      	b.n	80080ce <UI_MemSetting+0x22>
			break;
 8008214:	bf00      	nop
 8008216:	e75a      	b.n	80080ce <UI_MemSetting+0x22>
			break;
 8008218:	bf00      	nop
		if(HAL_GetTick() - tick < SW_DELAY) continue;
 800821a:	e758      	b.n	80080ce <UI_MemSetting+0x22>
				}
			}
		}
	}
	return UI_IDLE;
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	08011214 	.word	0x08011214
 8008228:	20000f14 	.word	0x20000f14
 800822c:	20000fd7 	.word	0x20000fd7
 8008230:	080111e8 	.word	0x080111e8
 8008234:	20000ee8 	.word	0x20000ee8
 8008238:	080111f4 	.word	0x080111f4
 800823c:	0801121c 	.word	0x0801121c
 8008240:	20000f31 	.word	0x20000f31
 8008244:	0801122c 	.word	0x0801122c

08008248 <UI_PIDSettingDisplay>:



void UI_PIDSettingDisplay(uint8_t num) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	; 0x28
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
	static int8_t first_list = 0;
	if(num - first_list >= 4) first_list = (num-3);
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	4a4b      	ldr	r2, [pc, #300]	; (8008384 <UI_PIDSettingDisplay+0x13c>)
 8008256:	f992 2000 	ldrsb.w	r2, [r2]
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	2b03      	cmp	r3, #3
 800825e:	dd06      	ble.n	800826e <UI_PIDSettingDisplay+0x26>
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	3b03      	subs	r3, #3
 8008264:	b2db      	uxtb	r3, r3
 8008266:	b25a      	sxtb	r2, r3
 8008268:	4b46      	ldr	r3, [pc, #280]	; (8008384 <UI_PIDSettingDisplay+0x13c>)
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e009      	b.n	8008282 <UI_PIDSettingDisplay+0x3a>
	else if(num < first_list) first_list = num;
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	4a44      	ldr	r2, [pc, #272]	; (8008384 <UI_PIDSettingDisplay+0x13c>)
 8008272:	f992 2000 	ldrsb.w	r2, [r2]
 8008276:	4293      	cmp	r3, r2
 8008278:	da03      	bge.n	8008282 <UI_PIDSettingDisplay+0x3a>
 800827a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800827e:	4b41      	ldr	r3, [pc, #260]	; (8008384 <UI_PIDSettingDisplay+0x13c>)
 8008280:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<4; i++) {
 8008282:	2300      	movs	r3, #0
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
 8008286:	e074      	b.n	8008372 <UI_PIDSettingDisplay+0x12a>
		if(i + first_list == num) cp_menu[i].color = DISP_COLOR_BLACK;
 8008288:	4b3e      	ldr	r3, [pc, #248]	; (8008384 <UI_PIDSettingDisplay+0x13c>)
 800828a:	f993 3000 	ldrsb.w	r3, [r3]
 800828e:	461a      	mov	r2, r3
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	441a      	add	r2, r3
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	429a      	cmp	r2, r3
 8008298:	d109      	bne.n	80082ae <UI_PIDSettingDisplay+0x66>
 800829a:	493b      	ldr	r1, [pc, #236]	; (8008388 <UI_PIDSettingDisplay+0x140>)
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	4613      	mov	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	440b      	add	r3, r1
 80082a6:	3302      	adds	r3, #2
 80082a8:	2201      	movs	r2, #1
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	e008      	b.n	80082c0 <UI_PIDSettingDisplay+0x78>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 80082ae:	4936      	ldr	r1, [pc, #216]	; (8008388 <UI_PIDSettingDisplay+0x140>)
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	4613      	mov	r3, r2
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	440b      	add	r3, r1
 80082ba:	3302      	adds	r3, #2
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i + first_list) {
 80082c0:	4b30      	ldr	r3, [pc, #192]	; (8008384 <UI_PIDSettingDisplay+0x13c>)
 80082c2:	f993 3000 	ldrsb.w	r3, [r3]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	4413      	add	r3, r2
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d841      	bhi.n	8008354 <UI_PIDSettingDisplay+0x10c>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <UI_PIDSettingDisplay+0x90>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	08008303 	.word	0x08008303
 80082e0:	0800831d 	.word	0x0800831d
 80082e4:	08008337 	.word	0x08008337
		case 0:
			sprintf(buff, "KP ~ %3.2f", plan.kpid[0]);
 80082e8:	4b28      	ldr	r3, [pc, #160]	; (800838c <UI_PIDSettingDisplay+0x144>)
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7f8 f92b 	bl	8000548 <__aeabi_f2d>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	f107 000c 	add.w	r0, r7, #12
 80082fa:	4925      	ldr	r1, [pc, #148]	; (8008390 <UI_PIDSettingDisplay+0x148>)
 80082fc:	f006 fc20 	bl	800eb40 <siprintf>
			break;
 8008300:	e028      	b.n	8008354 <UI_PIDSettingDisplay+0x10c>
		case 1:
			sprintf(buff, "KI ~ %3.2f", plan.kpid[1]);
 8008302:	4b22      	ldr	r3, [pc, #136]	; (800838c <UI_PIDSettingDisplay+0x144>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	4618      	mov	r0, r3
 8008308:	f7f8 f91e 	bl	8000548 <__aeabi_f2d>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	f107 000c 	add.w	r0, r7, #12
 8008314:	491f      	ldr	r1, [pc, #124]	; (8008394 <UI_PIDSettingDisplay+0x14c>)
 8008316:	f006 fc13 	bl	800eb40 <siprintf>
			break;
 800831a:	e01b      	b.n	8008354 <UI_PIDSettingDisplay+0x10c>
		case 2:
			sprintf(buff, "KD ~ %3.2f", plan.kpid[2]);
 800831c:	4b1b      	ldr	r3, [pc, #108]	; (800838c <UI_PIDSettingDisplay+0x144>)
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	4618      	mov	r0, r3
 8008322:	f7f8 f911 	bl	8000548 <__aeabi_f2d>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	f107 000c 	add.w	r0, r7, #12
 800832e:	491a      	ldr	r1, [pc, #104]	; (8008398 <UI_PIDSettingDisplay+0x150>)
 8008330:	f006 fc06 	bl	800eb40 <siprintf>
			break;
 8008334:	e00e      	b.n	8008354 <UI_PIDSettingDisplay+0x10c>
		case 3:
			sprintf(buff, "%s", plan.status_pid?"AUTO":"MANUAL");
 8008336:	4b15      	ldr	r3, [pc, #84]	; (800838c <UI_PIDSettingDisplay+0x144>)
 8008338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <UI_PIDSettingDisplay+0xfc>
 8008340:	4a16      	ldr	r2, [pc, #88]	; (800839c <UI_PIDSettingDisplay+0x154>)
 8008342:	e000      	b.n	8008346 <UI_PIDSettingDisplay+0xfe>
 8008344:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <UI_PIDSettingDisplay+0x158>)
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	4916      	ldr	r1, [pc, #88]	; (80083a4 <UI_PIDSettingDisplay+0x15c>)
 800834c:	4618      	mov	r0, r3
 800834e:	f006 fbf7 	bl	800eb40 <siprintf>
			break;
 8008352:	bf00      	nop
		}
		DISP_DisplayText(&cp_menu[i], buff);
 8008354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008356:	4613      	mov	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <UI_PIDSettingDisplay+0x140>)
 800835e:	4413      	add	r3, r2
 8008360:	f107 020c 	add.w	r2, r7, #12
 8008364:	4611      	mov	r1, r2
 8008366:	4618      	mov	r0, r3
 8008368:	f7f9 fa96 	bl	8001898 <DISP_DisplayText>
	for(int i=0; i<4; i++) {
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	3301      	adds	r3, #1
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	2b03      	cmp	r3, #3
 8008376:	dd87      	ble.n	8008288 <UI_PIDSettingDisplay+0x40>
	}
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	3728      	adds	r7, #40	; 0x28
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000fd8 	.word	0x20000fd8
 8008388:	20000fa8 	.word	0x20000fa8
 800838c:	20000d54 	.word	0x20000d54
 8008390:	08011234 	.word	0x08011234
 8008394:	08011240 	.word	0x08011240
 8008398:	0801124c 	.word	0x0801124c
 800839c:	08011258 	.word	0x08011258
 80083a0:	08011260 	.word	0x08011260
 80083a4:	08011268 	.word	0x08011268

080083a8 <UI_PIDSetting>:

UI_Menu_Lists UI_PIDSetting() {
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t bt_status = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73bb      	strb	r3, [r7, #14]
	static uint8_t num_menu = 0;
	uint32_t tick = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60bb      	str	r3, [r7, #8]
	DISP_DisplayText(&home_status, "PID");
 80083b6:	49a0      	ldr	r1, [pc, #640]	; (8008638 <UI_PIDSetting+0x290>)
 80083b8:	48a0      	ldr	r0, [pc, #640]	; (800863c <UI_PIDSetting+0x294>)
 80083ba:	f7f9 fa6d 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_PIDSettingDisplay(num_menu);
 80083be:	4ba0      	ldr	r3, [pc, #640]	; (8008640 <UI_PIDSetting+0x298>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff ff40 	bl	8008248 <UI_PIDSettingDisplay>
	tick = HAL_GetTick();
 80083c8:	f000 fd5c 	bl	8008e84 <HAL_GetTick>
 80083cc:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80083ce:	f000 fd59 	bl	8008e84 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	7bba      	ldrb	r2, [r7, #14]
 80083da:	2a01      	cmp	r2, #1
 80083dc:	d101      	bne.n	80083e2 <UI_PIDSetting+0x3a>
 80083de:	2219      	movs	r2, #25
 80083e0:	e000      	b.n	80083e4 <UI_PIDSetting+0x3c>
 80083e2:	2246      	movs	r2, #70	; 0x46
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f200 816d 	bhi.w	80086c4 <UI_PIDSetting+0x31c>
		bt2 = UI_ReadButton();
 80083ea:	f7fd fc97 	bl	8005d1c <UI_ReadButton>
 80083ee:	4603      	mov	r3, r0
 80083f0:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80083f2:	7bfa      	ldrb	r2, [r7, #15]
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d103      	bne.n	8008402 <UI_PIDSetting+0x5a>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8163 	beq.w	80086c8 <UI_PIDSetting+0x320>
		bt = bt2;
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <UI_PIDSetting+0x8a>
			if(num_menu==3) num_menu = 0; else num_menu++;
 8008410:	4b8b      	ldr	r3, [pc, #556]	; (8008640 <UI_PIDSetting+0x298>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d103      	bne.n	8008420 <UI_PIDSetting+0x78>
 8008418:	4b89      	ldr	r3, [pc, #548]	; (8008640 <UI_PIDSetting+0x298>)
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	e005      	b.n	800842c <UI_PIDSetting+0x84>
 8008420:	4b87      	ldr	r3, [pc, #540]	; (8008640 <UI_PIDSetting+0x298>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	b2da      	uxtb	r2, r3
 8008428:	4b85      	ldr	r3, [pc, #532]	; (8008640 <UI_PIDSetting+0x298>)
 800842a:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 8008430:	e7c5      	b.n	80083be <UI_PIDSetting+0x16>
		}
		else if(bt & SW_UP_PRESS) {
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d010      	beq.n	800845e <UI_PIDSetting+0xb6>
			if(num_menu==0) num_menu = 3; else num_menu--;
 800843c:	4b80      	ldr	r3, [pc, #512]	; (8008640 <UI_PIDSetting+0x298>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d103      	bne.n	800844c <UI_PIDSetting+0xa4>
 8008444:	4b7e      	ldr	r3, [pc, #504]	; (8008640 <UI_PIDSetting+0x298>)
 8008446:	2203      	movs	r2, #3
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	e005      	b.n	8008458 <UI_PIDSetting+0xb0>
 800844c:	4b7c      	ldr	r3, [pc, #496]	; (8008640 <UI_PIDSetting+0x298>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	b2da      	uxtb	r2, r3
 8008454:	4b7a      	ldr	r3, [pc, #488]	; (8008640 <UI_PIDSetting+0x298>)
 8008456:	701a      	strb	r2, [r3, #0]
			bt_status = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]
			goto ui_mem;
 800845c:	e7af      	b.n	80083be <UI_PIDSetting+0x16>
		}
		else if(bt & SW_HM_PRESS) {
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d004      	beq.n	8008472 <UI_PIDSetting+0xca>
			num_menu = 0;
 8008468:	4b75      	ldr	r3, [pc, #468]	; (8008640 <UI_PIDSetting+0x298>)
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
			return UI_HOMESCREEN;
 800846e:	2302      	movs	r3, #2
 8008470:	e12e      	b.n	80086d0 <UI_PIDSetting+0x328>
		}
		else if(bt & SW_BK_PRESS) {
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00a      	beq.n	8008492 <UI_PIDSetting+0xea>
			num_menu = 0;
 800847c:	4b70      	ldr	r3, [pc, #448]	; (8008640 <UI_PIDSetting+0x298>)
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
			DISP_DisplayText(&short_message, "Saving..");
 8008482:	4970      	ldr	r1, [pc, #448]	; (8008644 <UI_PIDSetting+0x29c>)
 8008484:	4870      	ldr	r0, [pc, #448]	; (8008648 <UI_PIDSetting+0x2a0>)
 8008486:	f7f9 fa07 	bl	8001898 <DISP_DisplayText>
			Storage_SetPID();
 800848a:	f7fc fcbd 	bl	8004e08 <Storage_SetPID>
			return UI_SET;
 800848e:	2307      	movs	r3, #7
 8008490:	e11e      	b.n	80086d0 <UI_PIDSetting+0x328>
		}
		switch(num_menu) {
 8008492:	4b6b      	ldr	r3, [pc, #428]	; (8008640 <UI_PIDSetting+0x298>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	2b02      	cmp	r3, #2
 8008498:	dc02      	bgt.n	80084a0 <UI_PIDSetting+0xf8>
 800849a:	2b00      	cmp	r3, #0
 800849c:	da04      	bge.n	80084a8 <UI_PIDSetting+0x100>
 800849e:	e116      	b.n	80086ce <UI_PIDSetting+0x326>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	f000 80fa 	beq.w	800869a <UI_PIDSetting+0x2f2>
 80084a6:	e112      	b.n	80086ce <UI_PIDSetting+0x326>
		case 0:
		case 1:
		case 2:
			if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == SW_LF_PRESS) {
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084ae:	2b10      	cmp	r3, #16
 80084b0:	d12c      	bne.n	800850c <UI_PIDSetting+0x164>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=1.0;
 80084b2:	4b63      	ldr	r3, [pc, #396]	; (8008640 <UI_PIDSetting+0x298>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4a65      	ldr	r2, [pc, #404]	; (800864c <UI_PIDSetting+0x2a4>)
 80084b8:	3306      	adds	r3, #6
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	edd3 7a00 	vldr	s15, [r3]
 80084c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ca:	d108      	bne.n	80084de <UI_PIDSetting+0x136>
 80084cc:	4b5c      	ldr	r3, [pc, #368]	; (8008640 <UI_PIDSetting+0x298>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	4a5e      	ldr	r2, [pc, #376]	; (800864c <UI_PIDSetting+0x2a4>)
 80084d2:	3306      	adds	r3, #6
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	4a5d      	ldr	r2, [pc, #372]	; (8008650 <UI_PIDSetting+0x2a8>)
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	e013      	b.n	8008506 <UI_PIDSetting+0x15e>
 80084de:	4b58      	ldr	r3, [pc, #352]	; (8008640 <UI_PIDSetting+0x298>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	4a5a      	ldr	r2, [pc, #360]	; (800864c <UI_PIDSetting+0x2a4>)
 80084e4:	3306      	adds	r3, #6
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	edd3 7a00 	vldr	s15, [r3]
 80084ee:	4b54      	ldr	r3, [pc, #336]	; (8008640 <UI_PIDSetting+0x298>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084fa:	4a54      	ldr	r2, [pc, #336]	; (800864c <UI_PIDSetting+0x2a4>)
 80084fc:	3306      	adds	r3, #6
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8008506:	2301      	movs	r3, #1
 8008508:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 800850a:	e758      	b.n	80083be <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == SW_RG_PRESS) {
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008512:	2b02      	cmp	r3, #2
 8008514:	d12f      	bne.n	8008576 <UI_PIDSetting+0x1ce>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=1.0;
 8008516:	4b4a      	ldr	r3, [pc, #296]	; (8008640 <UI_PIDSetting+0x298>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	4a4c      	ldr	r2, [pc, #304]	; (800864c <UI_PIDSetting+0x2a4>)
 800851c:	3306      	adds	r3, #6
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	edd3 7a00 	vldr	s15, [r3]
 8008526:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008654 <UI_PIDSetting+0x2ac>
 800852a:	eef4 7a47 	vcmp.f32	s15, s14
 800852e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008532:	d109      	bne.n	8008548 <UI_PIDSetting+0x1a0>
 8008534:	4b42      	ldr	r3, [pc, #264]	; (8008640 <UI_PIDSetting+0x298>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	4a44      	ldr	r2, [pc, #272]	; (800864c <UI_PIDSetting+0x2a4>)
 800853a:	3306      	adds	r3, #6
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	e013      	b.n	8008570 <UI_PIDSetting+0x1c8>
 8008548:	4b3d      	ldr	r3, [pc, #244]	; (8008640 <UI_PIDSetting+0x298>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	4a3f      	ldr	r2, [pc, #252]	; (800864c <UI_PIDSetting+0x2a4>)
 800854e:	3306      	adds	r3, #6
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	edd3 7a00 	vldr	s15, [r3]
 8008558:	4b39      	ldr	r3, [pc, #228]	; (8008640 <UI_PIDSetting+0x298>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008560:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008564:	4a39      	ldr	r2, [pc, #228]	; (800864c <UI_PIDSetting+0x2a4>)
 8008566:	3306      	adds	r3, #6
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	edc3 7a00 	vstr	s15, [r3]
				bt_status = 1;
 8008570:	2301      	movs	r3, #1
 8008572:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008574:	e723      	b.n	80083be <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_LF_PRESS|SW_OK_PRESS)) == (SW_LF_PRESS|SW_OK_PRESS)) {
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800857c:	2b30      	cmp	r3, #48	; 0x30
 800857e:	d136      	bne.n	80085ee <UI_PIDSetting+0x246>
				if(plan.kpid[num_menu]==0) plan.kpid[num_menu] = 99.0; else plan.kpid[num_menu]-=0.10;
 8008580:	4b2f      	ldr	r3, [pc, #188]	; (8008640 <UI_PIDSetting+0x298>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	4a31      	ldr	r2, [pc, #196]	; (800864c <UI_PIDSetting+0x2a4>)
 8008586:	3306      	adds	r3, #6
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	edd3 7a00 	vldr	s15, [r3]
 8008590:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	d108      	bne.n	80085ac <UI_PIDSetting+0x204>
 800859a:	4b29      	ldr	r3, [pc, #164]	; (8008640 <UI_PIDSetting+0x298>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4a2b      	ldr	r2, [pc, #172]	; (800864c <UI_PIDSetting+0x2a4>)
 80085a0:	3306      	adds	r3, #6
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	4a2a      	ldr	r2, [pc, #168]	; (8008650 <UI_PIDSetting+0x2a8>)
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e01d      	b.n	80085e8 <UI_PIDSetting+0x240>
 80085ac:	4b24      	ldr	r3, [pc, #144]	; (8008640 <UI_PIDSetting+0x298>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4a26      	ldr	r2, [pc, #152]	; (800864c <UI_PIDSetting+0x2a4>)
 80085b2:	3306      	adds	r3, #6
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f7 ffc4 	bl	8000548 <__aeabi_f2d>
 80085c0:	a31b      	add	r3, pc, #108	; (adr r3, 8008630 <UI_PIDSetting+0x288>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f7 fe5f 	bl	8000288 <__aeabi_dsub>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	491c      	ldr	r1, [pc, #112]	; (8008640 <UI_PIDSetting+0x298>)
 80085d0:	7809      	ldrb	r1, [r1, #0]
 80085d2:	460c      	mov	r4, r1
 80085d4:	4610      	mov	r0, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	f7f8 fb06 	bl	8000be8 <__aeabi_d2f>
 80085dc:	4602      	mov	r2, r0
 80085de:	491b      	ldr	r1, [pc, #108]	; (800864c <UI_PIDSetting+0x2a4>)
 80085e0:	1da3      	adds	r3, r4, #6
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80085ec:	e6e7      	b.n	80083be <UI_PIDSetting+0x16>
			}
			else if((bt & (SW_RG_PRESS|SW_OK_PRESS)) == (SW_RG_PRESS|SW_OK_PRESS)) {
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80085f4:	2b22      	cmp	r3, #34	; 0x22
 80085f6:	d169      	bne.n	80086cc <UI_PIDSetting+0x324>
				if(plan.kpid[num_menu]==99.0) plan.kpid[num_menu] = 0.0; else plan.kpid[num_menu]+=0.1;
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <UI_PIDSetting+0x298>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	4a13      	ldr	r2, [pc, #76]	; (800864c <UI_PIDSetting+0x2a4>)
 80085fe:	3306      	adds	r3, #6
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	edd3 7a00 	vldr	s15, [r3]
 8008608:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008654 <UI_PIDSetting+0x2ac>
 800860c:	eef4 7a47 	vcmp.f32	s15, s14
 8008610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008614:	d120      	bne.n	8008658 <UI_PIDSetting+0x2b0>
 8008616:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <UI_PIDSetting+0x298>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	4a0c      	ldr	r2, [pc, #48]	; (800864c <UI_PIDSetting+0x2a4>)
 800861c:	3306      	adds	r3, #6
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e034      	b.n	8008694 <UI_PIDSetting+0x2ec>
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w
 8008630:	9999999a 	.word	0x9999999a
 8008634:	3fb99999 	.word	0x3fb99999
 8008638:	0801126c 	.word	0x0801126c
 800863c:	20000f14 	.word	0x20000f14
 8008640:	20000fd9 	.word	0x20000fd9
 8008644:	08011270 	.word	0x08011270
 8008648:	20000ee8 	.word	0x20000ee8
 800864c:	20000d54 	.word	0x20000d54
 8008650:	42c60000 	.word	0x42c60000
 8008654:	42c60000 	.word	0x42c60000
 8008658:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <UI_PIDSetting+0x338>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	4a21      	ldr	r2, [pc, #132]	; (80086e4 <UI_PIDSetting+0x33c>)
 800865e:	3306      	adds	r3, #6
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f7f7 ff6e 	bl	8000548 <__aeabi_f2d>
 800866c:	a31a      	add	r3, pc, #104	; (adr r3, 80086d8 <UI_PIDSetting+0x330>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 fe0b 	bl	800028c <__adddf3>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4919      	ldr	r1, [pc, #100]	; (80086e0 <UI_PIDSetting+0x338>)
 800867c:	7809      	ldrb	r1, [r1, #0]
 800867e:	460c      	mov	r4, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	f7f8 fab0 	bl	8000be8 <__aeabi_d2f>
 8008688:	4602      	mov	r2, r0
 800868a:	4916      	ldr	r1, [pc, #88]	; (80086e4 <UI_PIDSetting+0x33c>)
 800868c:	1da3      	adds	r3, r4, #6
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	601a      	str	r2, [r3, #0]
				bt_status = 1;
 8008694:	2301      	movs	r3, #1
 8008696:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 8008698:	e691      	b.n	80083be <UI_PIDSetting+0x16>
			}
			break;
		case 3 :
			if(bt & (SW_LF_PRESS|SW_RG_PRESS)) {
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	f003 0312 	and.w	r3, r3, #18
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f43f ae94 	beq.w	80083ce <UI_PIDSetting+0x26>
				plan.status_pid = !plan.status_pid;
 80086a6:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <UI_PIDSetting+0x33c>)
 80086a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	461a      	mov	r2, r3
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <UI_PIDSetting+0x33c>)
 80086ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				bt_status = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	73bb      	strb	r3, [r7, #14]
				goto ui_mem;
 80086c2:	e67c      	b.n	80083be <UI_PIDSetting+0x16>
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80086c4:	bf00      	nop
 80086c6:	e682      	b.n	80083ce <UI_PIDSetting+0x26>
		if(bt == bt2 && bt_status == 0) continue;
 80086c8:	bf00      	nop
 80086ca:	e680      	b.n	80083ce <UI_PIDSetting+0x26>
			break;
 80086cc:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?25:SW_DELAY)) continue;
 80086ce:	e67e      	b.n	80083ce <UI_PIDSetting+0x26>
			}
		}
	}
	return UI_IDLE;
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd90      	pop	{r4, r7, pc}
 80086d8:	9999999a 	.word	0x9999999a
 80086dc:	3fb99999 	.word	0x3fb99999
 80086e0:	20000fd9 	.word	0x20000fd9
 80086e4:	20000d54 	.word	0x20000d54

080086e8 <UI_SpeedSetDisplay>:



void UI_SpeedSetDisplay(uint8_t num) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08a      	sub	sp, #40	; 0x28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<4; i++) {
 80086f2:	2301      	movs	r3, #1
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
 80086f6:	e040      	b.n	800877a <UI_SpeedSetDisplay+0x92>
		if(i == num) cp_menu[i].color = DISP_COLOR_BLACK;
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d109      	bne.n	8008714 <UI_SpeedSetDisplay+0x2c>
 8008700:	4922      	ldr	r1, [pc, #136]	; (800878c <UI_SpeedSetDisplay+0xa4>)
 8008702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008704:	4613      	mov	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	440b      	add	r3, r1
 800870c:	3302      	adds	r3, #2
 800870e:	2201      	movs	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	e008      	b.n	8008726 <UI_SpeedSetDisplay+0x3e>
		else cp_menu[i].color = DISP_COLOR_WHITE;
 8008714:	491d      	ldr	r1, [pc, #116]	; (800878c <UI_SpeedSetDisplay+0xa4>)
 8008716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008718:	4613      	mov	r3, r2
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	440b      	add	r3, r1
 8008720:	3302      	adds	r3, #2
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
		char buff[22];
		switch(i) {
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	2b01      	cmp	r3, #1
 800872a:	d003      	beq.n	8008734 <UI_SpeedSetDisplay+0x4c>
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	2b02      	cmp	r3, #2
 8008730:	d00a      	beq.n	8008748 <UI_SpeedSetDisplay+0x60>
 8008732:	e013      	b.n	800875c <UI_SpeedSetDisplay+0x74>
		case 1:
			sprintf(buff, "Speed ~ %-3i", plan.speed);
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <UI_SpeedSetDisplay+0xa8>)
 8008736:	7d9b      	ldrb	r3, [r3, #22]
 8008738:	461a      	mov	r2, r3
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	4915      	ldr	r1, [pc, #84]	; (8008794 <UI_SpeedSetDisplay+0xac>)
 8008740:	4618      	mov	r0, r3
 8008742:	f006 f9fd 	bl	800eb40 <siprintf>
			break;
 8008746:	e009      	b.n	800875c <UI_SpeedSetDisplay+0x74>
		case 2:
			sprintf(buff, "Tr Speed ~ %-3i", plan.turn_speed);
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <UI_SpeedSetDisplay+0xa8>)
 800874a:	7ddb      	ldrb	r3, [r3, #23]
 800874c:	461a      	mov	r2, r3
 800874e:	f107 030c 	add.w	r3, r7, #12
 8008752:	4911      	ldr	r1, [pc, #68]	; (8008798 <UI_SpeedSetDisplay+0xb0>)
 8008754:	4618      	mov	r0, r3
 8008756:	f006 f9f3 	bl	800eb40 <siprintf>
			break;
 800875a:	bf00      	nop
//		case 3:
//			sprintf(buff, "Accel ~ %-3i", plan.acc);
//			break;
		}
		DISP_DisplayText(&cp_menu[i], buff);
 800875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875e:	4613      	mov	r3, r2
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	4a09      	ldr	r2, [pc, #36]	; (800878c <UI_SpeedSetDisplay+0xa4>)
 8008766:	4413      	add	r3, r2
 8008768:	f107 020c 	add.w	r2, r7, #12
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f7f9 f892 	bl	8001898 <DISP_DisplayText>
	for(int i=1; i<4; i++) {
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	3301      	adds	r3, #1
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	2b03      	cmp	r3, #3
 800877e:	ddbb      	ble.n	80086f8 <UI_SpeedSetDisplay+0x10>
	}
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	3728      	adds	r7, #40	; 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000fa8 	.word	0x20000fa8
 8008790:	20000d54 	.word	0x20000d54
 8008794:	0801127c 	.word	0x0801127c
 8008798:	0801128c 	.word	0x0801128c

0800879c <UI_SpeedSetting>:

UI_Menu_Lists UI_SpeedSetting() {
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
	uint8_t bt, bt2;
	uint8_t num_menu = 1;
 80087a2:	2301      	movs	r3, #1
 80087a4:	73bb      	strb	r3, [r7, #14]
	uint32_t tick = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
	uint8_t bt_status = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	737b      	strb	r3, [r7, #13]
	DISP_DisplayText(&home_status, "SPEED");
 80087ae:	495e      	ldr	r1, [pc, #376]	; (8008928 <UI_SpeedSetting+0x18c>)
 80087b0:	485e      	ldr	r0, [pc, #376]	; (800892c <UI_SpeedSetting+0x190>)
 80087b2:	f7f9 f871 	bl	8001898 <DISP_DisplayText>
	ui_mem:
	UI_SpeedSetDisplay(num_menu);
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff ff95 	bl	80086e8 <UI_SpeedSetDisplay>
	tick = HAL_GetTick();
 80087be:	f000 fb61 	bl	8008e84 <HAL_GetTick>
 80087c2:	60b8      	str	r0, [r7, #8]
	while(1) {
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 80087c4:	f000 fb5e 	bl	8008e84 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	7b7a      	ldrb	r2, [r7, #13]
 80087d0:	2a01      	cmp	r2, #1
 80087d2:	d101      	bne.n	80087d8 <UI_SpeedSetting+0x3c>
 80087d4:	221e      	movs	r2, #30
 80087d6:	e000      	b.n	80087da <UI_SpeedSetting+0x3e>
 80087d8:	2246      	movs	r2, #70	; 0x46
 80087da:	429a      	cmp	r2, r3
 80087dc:	f200 809c 	bhi.w	8008918 <UI_SpeedSetting+0x17c>
		bt2 = UI_ReadButton();
 80087e0:	f7fd fa9c 	bl	8005d1c <UI_ReadButton>
 80087e4:	4603      	mov	r3, r0
 80087e6:	71fb      	strb	r3, [r7, #7]
		if(bt == bt2 && bt_status == 0) continue;
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d103      	bne.n	80087f8 <UI_SpeedSetting+0x5c>
 80087f0:	7b7b      	ldrb	r3, [r7, #13]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8092 	beq.w	800891c <UI_SpeedSetting+0x180>
		bt = bt2;
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	73fb      	strb	r3, [r7, #15]

		if(bt & SW_DW_PRESS) {
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UI_SpeedSetting+0x80>
			if(num_menu!=2) num_menu++;
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d002      	beq.n	8008812 <UI_SpeedSetting+0x76>
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	3301      	adds	r3, #1
 8008810:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 8008816:	f7fc fb21 	bl	8004e5c <Storage_SetSpeed>
			goto ui_mem;
 800881a:	e7cc      	b.n	80087b6 <UI_SpeedSetting+0x1a>
		}
		else if(bt & SW_UP_PRESS) {
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00e      	beq.n	8008844 <UI_SpeedSetting+0xa8>
			if(num_menu==1) {
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d103      	bne.n	8008834 <UI_SpeedSetting+0x98>
				Storage_SetSpeed();
 800882c:	f7fc fb16 	bl	8004e5c <Storage_SetSpeed>
				return UI_HOMESCREEN;
 8008830:	2302      	movs	r3, #2
 8008832:	e075      	b.n	8008920 <UI_SpeedSetting+0x184>
			}
			else num_menu--;
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	3b01      	subs	r3, #1
 8008838:	73bb      	strb	r3, [r7, #14]
			bt_status = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	737b      	strb	r3, [r7, #13]
			Storage_SetSpeed();
 800883e:	f7fc fb0d 	bl	8004e5c <Storage_SetSpeed>
			goto ui_mem;
 8008842:	e7b8      	b.n	80087b6 <UI_SpeedSetting+0x1a>
		}
		else if(bt & (SW_HM_PRESS|SW_BK_PRESS)) {
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	f003 0348 	and.w	r3, r3, #72	; 0x48
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <UI_SpeedSetting+0xbe>
			num_menu = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	73bb      	strb	r3, [r7, #14]
			Storage_SetSpeed();
 8008852:	f7fc fb03 	bl	8004e5c <Storage_SetSpeed>
			return UI_HOMESCREEN;
 8008856:	2302      	movs	r3, #2
 8008858:	e062      	b.n	8008920 <UI_SpeedSetting+0x184>
		}
		switch(num_menu) {
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d002      	beq.n	8008866 <UI_SpeedSetting+0xca>
 8008860:	2b02      	cmp	r3, #2
 8008862:	d02c      	beq.n	80088be <UI_SpeedSetting+0x122>
 8008864:	e05b      	b.n	800891e <UI_SpeedSetting+0x182>
		case 1 :
			if(bt & SW_LF_PRESS) {
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	d010      	beq.n	8008892 <UI_SpeedSetting+0xf6>
				if(plan.speed==0) plan.speed = 99; else plan.speed-=1;
 8008870:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <UI_SpeedSetting+0x194>)
 8008872:	7d9b      	ldrb	r3, [r3, #22]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <UI_SpeedSetting+0xe4>
 8008878:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <UI_SpeedSetting+0x194>)
 800887a:	2263      	movs	r2, #99	; 0x63
 800887c:	759a      	strb	r2, [r3, #22]
 800887e:	e005      	b.n	800888c <UI_SpeedSetting+0xf0>
 8008880:	4b2b      	ldr	r3, [pc, #172]	; (8008930 <UI_SpeedSetting+0x194>)
 8008882:	7d9b      	ldrb	r3, [r3, #22]
 8008884:	3b01      	subs	r3, #1
 8008886:	b2da      	uxtb	r2, r3
 8008888:	4b29      	ldr	r3, [pc, #164]	; (8008930 <UI_SpeedSetting+0x194>)
 800888a:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 800888c:	2301      	movs	r3, #1
 800888e:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008890:	e791      	b.n	80087b6 <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d010      	beq.n	80088be <UI_SpeedSetting+0x122>
				if(plan.speed==99) plan.speed = 0; else plan.speed+=1;
 800889c:	4b24      	ldr	r3, [pc, #144]	; (8008930 <UI_SpeedSetting+0x194>)
 800889e:	7d9b      	ldrb	r3, [r3, #22]
 80088a0:	2b63      	cmp	r3, #99	; 0x63
 80088a2:	d103      	bne.n	80088ac <UI_SpeedSetting+0x110>
 80088a4:	4b22      	ldr	r3, [pc, #136]	; (8008930 <UI_SpeedSetting+0x194>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	759a      	strb	r2, [r3, #22]
 80088aa:	e005      	b.n	80088b8 <UI_SpeedSetting+0x11c>
 80088ac:	4b20      	ldr	r3, [pc, #128]	; (8008930 <UI_SpeedSetting+0x194>)
 80088ae:	7d9b      	ldrb	r3, [r3, #22]
 80088b0:	3301      	adds	r3, #1
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <UI_SpeedSetting+0x194>)
 80088b6:	759a      	strb	r2, [r3, #22]
				bt_status = 1;
 80088b8:	2301      	movs	r3, #1
 80088ba:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80088bc:	e77b      	b.n	80087b6 <UI_SpeedSetting+0x1a>
			}
		case 2 :
			if(bt & SW_LF_PRESS) {
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <UI_SpeedSetting+0x14e>
				if(plan.turn_speed==0) plan.turn_speed = 99; else plan.turn_speed-=1;
 80088c8:	4b19      	ldr	r3, [pc, #100]	; (8008930 <UI_SpeedSetting+0x194>)
 80088ca:	7ddb      	ldrb	r3, [r3, #23]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <UI_SpeedSetting+0x13c>
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <UI_SpeedSetting+0x194>)
 80088d2:	2263      	movs	r2, #99	; 0x63
 80088d4:	75da      	strb	r2, [r3, #23]
 80088d6:	e005      	b.n	80088e4 <UI_SpeedSetting+0x148>
 80088d8:	4b15      	ldr	r3, [pc, #84]	; (8008930 <UI_SpeedSetting+0x194>)
 80088da:	7ddb      	ldrb	r3, [r3, #23]
 80088dc:	3b01      	subs	r3, #1
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	4b13      	ldr	r3, [pc, #76]	; (8008930 <UI_SpeedSetting+0x194>)
 80088e2:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 80088e8:	e765      	b.n	80087b6 <UI_SpeedSetting+0x1a>
			}
			else if(bt & SW_RG_PRESS) {
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f43f af67 	beq.w	80087c4 <UI_SpeedSetting+0x28>
				if(plan.turn_speed==99) plan.turn_speed = 0; else plan.turn_speed+=1;
 80088f6:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <UI_SpeedSetting+0x194>)
 80088f8:	7ddb      	ldrb	r3, [r3, #23]
 80088fa:	2b63      	cmp	r3, #99	; 0x63
 80088fc:	d103      	bne.n	8008906 <UI_SpeedSetting+0x16a>
 80088fe:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <UI_SpeedSetting+0x194>)
 8008900:	2200      	movs	r2, #0
 8008902:	75da      	strb	r2, [r3, #23]
 8008904:	e005      	b.n	8008912 <UI_SpeedSetting+0x176>
 8008906:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <UI_SpeedSetting+0x194>)
 8008908:	7ddb      	ldrb	r3, [r3, #23]
 800890a:	3301      	adds	r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4b08      	ldr	r3, [pc, #32]	; (8008930 <UI_SpeedSetting+0x194>)
 8008910:	75da      	strb	r2, [r3, #23]
				bt_status = 1;
 8008912:	2301      	movs	r3, #1
 8008914:	737b      	strb	r3, [r7, #13]
				goto ui_mem;
 8008916:	e74e      	b.n	80087b6 <UI_SpeedSetting+0x1a>
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 8008918:	bf00      	nop
 800891a:	e753      	b.n	80087c4 <UI_SpeedSetting+0x28>
		if(bt == bt2 && bt_status == 0) continue;
 800891c:	bf00      	nop
		if(HAL_GetTick() - tick < ((bt_status == 1)?30:SW_DELAY)) continue;
 800891e:	e751      	b.n	80087c4 <UI_SpeedSetting+0x28>
//			}

		}
	}
	return UI_IDLE;
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	0801129c 	.word	0x0801129c
 800892c:	20000f14 	.word	0x20000f14
 8008930:	20000d54 	.word	0x20000d54

08008934 <UI_Run>:


UI_Menu_Lists UI_Run() {
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af02      	add	r7, sp, #8
	static uint8_t bt;

	char buff[22];
	Plan_Start();
 800893a:	f7fa fd75 	bl	8003428 <Plan_Start>
	ui_run:
	Plan_UIRoutine();
 800893e:	f7fa fdbb 	bl	80034b8 <Plan_UIRoutine>
	sprintf(buff, "i:%03i  cp:%02i  Plan%i", num_index, num_checkpoint, num_plan);
 8008942:	4b3c      	ldr	r3, [pc, #240]	; (8008a34 <UI_Run+0x100>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	4b3b      	ldr	r3, [pc, #236]	; (8008a38 <UI_Run+0x104>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	4b3b      	ldr	r3, [pc, #236]	; (8008a3c <UI_Run+0x108>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	4638      	mov	r0, r7
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	460b      	mov	r3, r1
 8008958:	4939      	ldr	r1, [pc, #228]	; (8008a40 <UI_Run+0x10c>)
 800895a:	f006 f8f1 	bl	800eb40 <siprintf>
	DISP_DisplayText(&home_status, buff);
 800895e:	463b      	mov	r3, r7
 8008960:	4619      	mov	r1, r3
 8008962:	4838      	ldr	r0, [pc, #224]	; (8008a44 <UI_Run+0x110>)
 8008964:	f7f8 ff98 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "Act ~ %s", plan_act_lists[plan_active.act]);
 8008968:	4b37      	ldr	r3, [pc, #220]	; (8008a48 <UI_Run+0x114>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
 800896e:	4b37      	ldr	r3, [pc, #220]	; (8008a4c <UI_Run+0x118>)
 8008970:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008974:	463b      	mov	r3, r7
 8008976:	4936      	ldr	r1, [pc, #216]	; (8008a50 <UI_Run+0x11c>)
 8008978:	4618      	mov	r0, r3
 800897a:	f006 f8e1 	bl	800eb40 <siprintf>
	DISP_DisplayText(&cp_menu[2], buff);
 800897e:	463b      	mov	r3, r7
 8008980:	4619      	mov	r1, r3
 8008982:	4834      	ldr	r0, [pc, #208]	; (8008a54 <UI_Run+0x120>)
 8008984:	f7f8 ff88 	bl	8001898 <DISP_DisplayText>
	sprintf(buff, "%3i | %-3i", (int16_t)motor[1].pwm, (int16_t)motor[0].pwm);
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <UI_Run+0x124>)
 800898a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800898e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008992:	ee17 3a90 	vmov	r3, s15
 8008996:	b21b      	sxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <UI_Run+0x124>)
 800899c:	edd3 7a08 	vldr	s15, [r3, #32]
 80089a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089a4:	ee17 3a90 	vmov	r3, s15
 80089a8:	b21b      	sxth	r3, r3
 80089aa:	4638      	mov	r0, r7
 80089ac:	492b      	ldr	r1, [pc, #172]	; (8008a5c <UI_Run+0x128>)
 80089ae:	f006 f8c7 	bl	800eb40 <siprintf>
	DISP_DisplayText(&cp_menu[3], buff);
 80089b2:	463b      	mov	r3, r7
 80089b4:	4619      	mov	r1, r3
 80089b6:	482a      	ldr	r0, [pc, #168]	; (8008a60 <UI_Run+0x12c>)
 80089b8:	f7f8 ff6e 	bl	8001898 <DISP_DisplayText>
	while(1) {
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 80089bc:	4b29      	ldr	r3, [pc, #164]	; (8008a64 <UI_Run+0x130>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d027      	beq.n	8008a18 <UI_Run+0xe4>
		Plan_UIRoutine();
 80089c8:	f7fa fd76 	bl	80034b8 <Plan_UIRoutine>
		UI_ShowSensor();
 80089cc:	f7fd f928 	bl	8005c20 <UI_ShowSensor>
		bt = UI_ReadButton();
 80089d0:	f7fd f9a4 	bl	8005d1c <UI_ReadButton>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	4b23      	ldr	r3, [pc, #140]	; (8008a68 <UI_Run+0x134>)
 80089da:	701a      	strb	r2, [r3, #0]
		if(bt & SW_HM_PRESS) {
 80089dc:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <UI_Run+0x134>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <UI_Run+0xca>
			main_flag &=~0x01;
 80089e8:	4b1e      	ldr	r3, [pc, #120]	; (8008a64 <UI_Run+0x130>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	4b1c      	ldr	r3, [pc, #112]	; (8008a64 <UI_Run+0x130>)
 80089f4:	701a      	strb	r2, [r3, #0]
			Plan_Stop();
 80089f6:	f7fa fcdf 	bl	80033b8 <Plan_Stop>
			return UI_HOMESCREEN;
 80089fa:	2302      	movs	r3, #2
 80089fc:	e016      	b.n	8008a2c <UI_Run+0xf8>
		}
		if(main_flag & 0x80) {
 80089fe:	4b19      	ldr	r3, [pc, #100]	; (8008a64 <UI_Run+0x130>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dad9      	bge.n	80089bc <UI_Run+0x88>
			main_flag &=~0x80;
 8008a08:	4b16      	ldr	r3, [pc, #88]	; (8008a64 <UI_Run+0x130>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <UI_Run+0x130>)
 8008a14:	701a      	strb	r2, [r3, #0]
			goto ui_run;
 8008a16:	e792      	b.n	800893e <UI_Run+0xa>
		if((main_flag & MAIN_FLAG_RUN) == 0) break;
 8008a18:	bf00      	nop
		}
	}
	DISP_DisplayText(&short_message, "FINISH!");
 8008a1a:	4914      	ldr	r1, [pc, #80]	; (8008a6c <UI_Run+0x138>)
 8008a1c:	4814      	ldr	r0, [pc, #80]	; (8008a70 <UI_Run+0x13c>)
 8008a1e:	f7f8 ff3b 	bl	8001898 <DISP_DisplayText>
	HAL_Delay(500);
 8008a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a26:	f000 fa39 	bl	8008e9c <HAL_Delay>
//	num_checkpoint;
	return UI_HOMESCREEN;
 8008a2a:	2302      	movs	r3, #2
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20000ccd 	.word	0x20000ccd
 8008a38:	20000ccc 	.word	0x20000ccc
 8008a3c:	20000cc9 	.word	0x20000cc9
 8008a40:	08010e98 	.word	0x08010e98
 8008a44:	20000f14 	.word	0x20000f14
 8008a48:	20000d44 	.word	0x20000d44
 8008a4c:	200002c4 	.word	0x200002c4
 8008a50:	080112a4 	.word	0x080112a4
 8008a54:	20000fb6 	.word	0x20000fb6
 8008a58:	20000a90 	.word	0x20000a90
 8008a5c:	080112b0 	.word	0x080112b0
 8008a60:	20000fbd 	.word	0x20000fbd
 8008a64:	20000a74 	.word	0x20000a74
 8008a68:	20000fda 	.word	0x20000fda
 8008a6c:	080112bc 	.word	0x080112bc
 8008a70:	20000ee8 	.word	0x20000ee8

08008a74 <UI_Init>:


void UI_Init() {
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
	UI_HomeScreenInit();
 8008a78:	f7fd f9d4 	bl	8005e24 <UI_HomeScreenInit>
	UI_SettingDisplayInit();
 8008a7c:	f7fd fbc4 	bl	8006208 <UI_SettingDisplayInit>
	UI_PlanSetDisplayInit();
 8008a80:	f7fd fd8a 	bl	8006598 <UI_PlanSetDisplayInit>
	UI_ADCThresholdDisplayInit();
 8008a84:	f7fe fd6e 	bl	8007564 <UI_ADCThresholdDisplayInit>
	UI_CPDisplayInit();
 8008a88:	f7ff f816 	bl	8007ab8 <UI_CPDisplayInit>
}
 8008a8c:	bf00      	nop
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UI_Main>:

void UI_Main() {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
	static UI_Menu_Lists retval = UI_STARTUP;
	DISP_ClearAll();
 8008a94:	f7f9 f8ca 	bl	8001c2c <DISP_ClearAll>
	switch(retval) {
 8008a98:	4b3b      	ldr	r3, [pc, #236]	; (8008b88 <UI_Main+0xf8>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	2b0c      	cmp	r3, #12
 8008aa0:	d870      	bhi.n	8008b84 <UI_Main+0xf4>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <UI_Main+0x18>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008add 	.word	0x08008add
 8008aac:	08008aeb 	.word	0x08008aeb
 8008ab0:	08008af9 	.word	0x08008af9
 8008ab4:	08008b07 	.word	0x08008b07
 8008ab8:	08008b15 	.word	0x08008b15
 8008abc:	08008b23 	.word	0x08008b23
 8008ac0:	08008b31 	.word	0x08008b31
 8008ac4:	08008b3f 	.word	0x08008b3f
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b5b 	.word	0x08008b5b
 8008ad0:	08008b69 	.word	0x08008b69
 8008ad4:	08008b85 	.word	0x08008b85
 8008ad8:	08008b77 	.word	0x08008b77
	case UI_STARTUP:
		retval = UI_Startup();
 8008adc:	f7fe ff1c 	bl	8007918 <UI_Startup>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4b28      	ldr	r3, [pc, #160]	; (8008b88 <UI_Main+0xf8>)
 8008ae6:	701a      	strb	r2, [r3, #0]
		break;
 8008ae8:	e04c      	b.n	8008b84 <UI_Main+0xf4>
	case UI_HOMESCREEN:
		retval = UI_HomeScreen();
 8008aea:	f7fd fa79 	bl	8005fe0 <UI_HomeScreen>
 8008aee:	4603      	mov	r3, r0
 8008af0:	461a      	mov	r2, r3
 8008af2:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <UI_Main+0xf8>)
 8008af4:	701a      	strb	r2, [r3, #0]
		break;
 8008af6:	e045      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SPEED_SET:
		retval = UI_SpeedSetting();
 8008af8:	f7ff fe50 	bl	800879c <UI_SpeedSetting>
 8008afc:	4603      	mov	r3, r0
 8008afe:	461a      	mov	r2, r3
 8008b00:	4b21      	ldr	r3, [pc, #132]	; (8008b88 <UI_Main+0xf8>)
 8008b02:	701a      	strb	r2, [r3, #0]
		break;
 8008b04:	e03e      	b.n	8008b84 <UI_Main+0xf4>
	case UI_RUN:
		retval = UI_Run();
 8008b06:	f7ff ff15 	bl	8008934 <UI_Run>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4b1e      	ldr	r3, [pc, #120]	; (8008b88 <UI_Main+0xf8>)
 8008b10:	701a      	strb	r2, [r3, #0]
		break;
 8008b12:	e037      	b.n	8008b84 <UI_Main+0xf4>
	case UI_PLAN_SET:
		retval = UI_PlanSet();
 8008b14:	f7fe f8a2 	bl	8006c5c <UI_PlanSet>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <UI_Main+0xf8>)
 8008b1e:	701a      	strb	r2, [r3, #0]
		break;
 8008b20:	e030      	b.n	8008b84 <UI_Main+0xf4>
	case UI_PLAN_SELECT:
		retval = UI_PlanSelect();
 8008b22:	f7ff f9ab 	bl	8007e7c <UI_PlanSelect>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4b17      	ldr	r3, [pc, #92]	; (8008b88 <UI_Main+0xf8>)
 8008b2c:	701a      	strb	r2, [r3, #0]
		break;
 8008b2e:	e029      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SET:
		retval = UI_Setting();
 8008b30:	f7fd fc56 	bl	80063e0 <UI_Setting>
 8008b34:	4603      	mov	r3, r0
 8008b36:	461a      	mov	r2, r3
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <UI_Main+0xf8>)
 8008b3a:	701a      	strb	r2, [r3, #0]
		break;
 8008b3c:	e022      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SET_ADC:
		retval = UI_ADCThreshold();
 8008b3e:	f7fe fdd3 	bl	80076e8 <UI_ADCThreshold>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <UI_Main+0xf8>)
 8008b48:	701a      	strb	r2, [r3, #0]
		break;
 8008b4a:	e01b      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SET_CALIB:
		retval = UI_AutoCalib();
 8008b4c:	f7fe fe9c 	bl	8007888 <UI_AutoCalib>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <UI_Main+0xf8>)
 8008b56:	701a      	strb	r2, [r3, #0]
		break;
 8008b58:	e014      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SET_CP:
		retval = UI_CP();
 8008b5a:	f7ff f883 	bl	8007c64 <UI_CP>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	461a      	mov	r2, r3
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <UI_Main+0xf8>)
 8008b64:	701a      	strb	r2, [r3, #0]
		break;
 8008b66:	e00d      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SET_PID:
		retval = UI_PIDSetting();
 8008b68:	f7ff fc1e 	bl	80083a8 <UI_PIDSetting>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <UI_Main+0xf8>)
 8008b72:	701a      	strb	r2, [r3, #0]
		break;
 8008b74:	e006      	b.n	8008b84 <UI_Main+0xf4>
	case UI_SET_MEM:
		retval = UI_MemSetting();
 8008b76:	f7ff fa99 	bl	80080ac <UI_MemSetting>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <UI_Main+0xf8>)
 8008b80:	701a      	strb	r2, [r3, #0]
		break;
 8008b82:	bf00      	nop
	default:
		;
	}
}
 8008b84:	bf00      	nop
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000321 	.word	0x20000321

08008b8c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008b90:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008b92:	4a12      	ldr	r2, [pc, #72]	; (8008bdc <MX_USART3_UART_Init+0x50>)
 8008b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008baa:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008bb2:	220c      	movs	r2, #12
 8008bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bb6:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008bc2:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <MX_USART3_UART_Init+0x4c>)
 8008bc4:	f004 fc4e 	bl	800d464 <HAL_UART_Init>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008bce:	f7f9 fbae 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008bd2:	bf00      	nop
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000fdc 	.word	0x20000fdc
 8008bdc:	40004800 	.word	0x40004800

08008be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08a      	sub	sp, #40	; 0x28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	605a      	str	r2, [r3, #4]
 8008bf2:	609a      	str	r2, [r3, #8]
 8008bf4:	60da      	str	r2, [r3, #12]
 8008bf6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a19      	ldr	r2, [pc, #100]	; (8008c64 <HAL_UART_MspInit+0x84>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d12c      	bne.n	8008c5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <HAL_UART_MspInit+0x88>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <HAL_UART_MspInit+0x88>)
 8008c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c10:	6413      	str	r3, [r2, #64]	; 0x40
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <HAL_UART_MspInit+0x88>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <HAL_UART_MspInit+0x88>)
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <HAL_UART_MspInit+0x88>)
 8008c28:	f043 0304 	orr.w	r3, r3, #4
 8008c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <HAL_UART_MspInit+0x88>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008c3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c40:	2302      	movs	r3, #2
 8008c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008c4c:	2307      	movs	r3, #7
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c50:	f107 0314 	add.w	r3, r7, #20
 8008c54:	4619      	mov	r1, r3
 8008c56:	4805      	ldr	r0, [pc, #20]	; (8008c6c <HAL_UART_MspInit+0x8c>)
 8008c58:	f001 fb0c 	bl	800a274 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008c5c:	bf00      	nop
 8008c5e:	3728      	adds	r7, #40	; 0x28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40004800 	.word	0x40004800
 8008c68:	40023800 	.word	0x40023800
 8008c6c:	40020800 	.word	0x40020800

08008c70 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c74:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c7c:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c7e:	2204      	movs	r2, #4
 8008c80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c82:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c84:	2202      	movs	r2, #2
 8008c86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c90:	2202      	movs	r2, #2
 8008c92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cb2:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008cb4:	f002 fc6b 	bl	800b58e <HAL_PCD_Init>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008cbe:	f7f9 fb36 	bl	800232e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008cc2:	bf00      	nop
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20001020 	.word	0x20001020

08008ccc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	; 0x28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	605a      	str	r2, [r3, #4]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cec:	d132      	bne.n	8008d54 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	4a19      	ldr	r2, [pc, #100]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008cf8:	f043 0301 	orr.w	r3, r3, #1
 8008cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cfe:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d10:	2302      	movs	r3, #2
 8008d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d1c:	230a      	movs	r3, #10
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d20:	f107 0314 	add.w	r3, r7, #20
 8008d24:	4619      	mov	r1, r3
 8008d26:	480e      	ldr	r0, [pc, #56]	; (8008d60 <HAL_PCD_MspInit+0x94>)
 8008d28:	f001 faa4 	bl	800a274 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d30:	4a0a      	ldr	r2, [pc, #40]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d36:	6353      	str	r3, [r2, #52]	; 0x34
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	4a06      	ldr	r2, [pc, #24]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d46:	6453      	str	r3, [r2, #68]	; 0x44
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <HAL_PCD_MspInit+0x90>)
 8008d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d54:	bf00      	nop
 8008d56:	3728      	adds	r7, #40	; 0x28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	40020000 	.word	0x40020000

08008d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008d68:	480d      	ldr	r0, [pc, #52]	; (8008da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008d6a:	490e      	ldr	r1, [pc, #56]	; (8008da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008d6c:	4a0e      	ldr	r2, [pc, #56]	; (8008da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d70:	e002      	b.n	8008d78 <LoopCopyDataInit>

08008d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d76:	3304      	adds	r3, #4

08008d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d7c:	d3f9      	bcc.n	8008d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d7e:	4a0b      	ldr	r2, [pc, #44]	; (8008dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008d80:	4c0b      	ldr	r4, [pc, #44]	; (8008db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d84:	e001      	b.n	8008d8a <LoopFillZerobss>

08008d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d88:	3204      	adds	r2, #4

08008d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d8c:	d3fb      	bcc.n	8008d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008d8e:	f7fc fbc7 	bl	8005520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d92:	f005 f931 	bl	800dff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d96:	f7f9 f9a7 	bl	80020e8 <main>
  bx  lr    
 8008d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008da4:	200004fc 	.word	0x200004fc
  ldr r2, =_sidata
 8008da8:	080116dc 	.word	0x080116dc
  ldr r2, =_sbss
 8008dac:	200004fc 	.word	0x200004fc
  ldr r4, =_ebss
 8008db0:	20001540 	.word	0x20001540

08008db4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008db4:	e7fe      	b.n	8008db4 <CAN1_RX0_IRQHandler>
	...

08008db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <HAL_Init+0x40>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <HAL_Init+0x40>)
 8008dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <HAL_Init+0x40>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	; (8008df8 <HAL_Init+0x40>)
 8008dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_Init+0x40>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <HAL_Init+0x40>)
 8008dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008de0:	2003      	movs	r0, #3
 8008de2:	f000 fe91 	bl	8009b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008de6:	200f      	movs	r0, #15
 8008de8:	f000 f808 	bl	8008dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008dec:	f7fb fd0c 	bl	8004808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40023c00 	.word	0x40023c00

08008dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_InitTick+0x54>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <HAL_InitTick+0x58>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fead 	bl	8009b7a <HAL_SYSTICK_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e00e      	b.n	8008e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d80a      	bhi.n	8008e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e30:	2200      	movs	r2, #0
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	f000 fe71 	bl	8009b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e3c:	4a06      	ldr	r2, [pc, #24]	; (8008e58 <HAL_InitTick+0x5c>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e000      	b.n	8008e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	2000028c 	.word	0x2000028c
 8008e54:	20000328 	.word	0x20000328
 8008e58:	20000324 	.word	0x20000324

08008e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <HAL_IncTick+0x20>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <HAL_IncTick+0x24>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <HAL_IncTick+0x24>)
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000328 	.word	0x20000328
 8008e80:	2000152c 	.word	0x2000152c

08008e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return uwTick;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <HAL_GetTick+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	2000152c 	.word	0x2000152c

08008e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ea4:	f7ff ffee 	bl	8008e84 <HAL_GetTick>
 8008ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d005      	beq.n	8008ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <HAL_Delay+0x44>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ec2:	bf00      	nop
 8008ec4:	f7ff ffde 	bl	8008e84 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d8f7      	bhi.n	8008ec4 <HAL_Delay+0x28>
  {
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000328 	.word	0x20000328

08008ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e033      	b.n	8008f62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f8 f94e 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	f003 0310 	and.w	r3, r3, #16
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d118      	bne.n	8008f54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f2a:	f023 0302 	bic.w	r3, r3, #2
 8008f2e:	f043 0202 	orr.w	r2, r3, #2
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fb78 	bl	800962c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	f043 0201 	orr.w	r2, r3, #1
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	641a      	str	r2, [r3, #64]	; 0x40
 8008f52:	e001      	b.n	8008f58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b086      	sub	sp, #24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d049      	beq.n	8009034 <HAL_ADC_IRQHandler+0xca>
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d046      	beq.n	8009034 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d12b      	bne.n	8009024 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d127      	bne.n	8009024 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d006      	beq.n	8008ff0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d119      	bne.n	8009024 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0220 	bic.w	r2, r2, #32
 8008ffe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d105      	bne.n	8009024 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	f043 0201 	orr.w	r2, r3, #1
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7f9 f977 	bl	8002318 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f06f 0212 	mvn.w	r2, #18
 8009032:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d057      	beq.n	80090fa <HAL_ADC_IRQHandler+0x190>
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d054      	beq.n	80090fa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009060:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d139      	bne.n	80090ea <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800908e:	2b00      	cmp	r3, #0
 8009090:	d12b      	bne.n	80090ea <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800909c:	2b00      	cmp	r3, #0
 800909e:	d124      	bne.n	80090ea <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d11d      	bne.n	80090ea <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d119      	bne.n	80090ea <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090c4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	f043 0201 	orr.w	r2, r3, #1
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fc1c 	bl	8009928 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 020c 	mvn.w	r2, #12
 80090f8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009108:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d017      	beq.n	8009140 <HAL_ADC_IRQHandler+0x1d6>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d014      	beq.n	8009140 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10d      	bne.n	8009140 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f945 	bl	80093c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f06f 0201 	mvn.w	r2, #1
 800913e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800914e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d015      	beq.n	8009182 <HAL_ADC_IRQHandler+0x218>
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d012      	beq.n	8009182 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009160:	f043 0202 	orr.w	r2, r3, #2
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f06f 0220 	mvn.w	r2, #32
 8009170:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f92e 	bl	80093d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0220 	mvn.w	r2, #32
 8009180:	601a      	str	r2, [r3, #0]
  }
}
 8009182:	bf00      	nop
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_ADC_Start_DMA+0x1e>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e0e9      	b.n	800937e <HAL_ADC_Start_DMA+0x1f2>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d018      	beq.n	80091f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80091d0:	4b6d      	ldr	r3, [pc, #436]	; (8009388 <HAL_ADC_Start_DMA+0x1fc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a6d      	ldr	r2, [pc, #436]	; (800938c <HAL_ADC_Start_DMA+0x200>)
 80091d6:	fba2 2303 	umull	r2, r3, r2, r3
 80091da:	0c9a      	lsrs	r2, r3, #18
 80091dc:	4613      	mov	r3, r2
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	4413      	add	r3, r2
 80091e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80091e4:	e002      	b.n	80091ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f9      	bne.n	80091e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009200:	d107      	bne.n	8009212 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009210:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b01      	cmp	r3, #1
 800921e:	f040 80a1 	bne.w	8009364 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800924c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800925c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009260:	d106      	bne.n	8009270 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	f023 0206 	bic.w	r2, r3, #6
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	645a      	str	r2, [r3, #68]	; 0x44
 800926e:	e002      	b.n	8009276 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800927e:	4b44      	ldr	r3, [pc, #272]	; (8009390 <HAL_ADC_Start_DMA+0x204>)
 8009280:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	4a43      	ldr	r2, [pc, #268]	; (8009394 <HAL_ADC_Start_DMA+0x208>)
 8009288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	4a42      	ldr	r2, [pc, #264]	; (8009398 <HAL_ADC_Start_DMA+0x20c>)
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	4a41      	ldr	r2, [pc, #260]	; (800939c <HAL_ADC_Start_DMA+0x210>)
 8009298:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80092a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80092b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	334c      	adds	r3, #76	; 0x4c
 80092ce:	4619      	mov	r1, r3
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f000 fd0c 	bl	8009cf0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d12a      	bne.n	800933a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a2d      	ldr	r2, [pc, #180]	; (80093a0 <HAL_ADC_Start_DMA+0x214>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d015      	beq.n	800931a <HAL_ADC_Start_DMA+0x18e>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a2c      	ldr	r2, [pc, #176]	; (80093a4 <HAL_ADC_Start_DMA+0x218>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d105      	bne.n	8009304 <HAL_ADC_Start_DMA+0x178>
 80092f8:	4b25      	ldr	r3, [pc, #148]	; (8009390 <HAL_ADC_Start_DMA+0x204>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f003 031f 	and.w	r3, r3, #31
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a27      	ldr	r2, [pc, #156]	; (80093a8 <HAL_ADC_Start_DMA+0x21c>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d136      	bne.n	800937c <HAL_ADC_Start_DMA+0x1f0>
 800930e:	4b20      	ldr	r3, [pc, #128]	; (8009390 <HAL_ADC_Start_DMA+0x204>)
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f003 0310 	and.w	r3, r3, #16
 8009316:	2b00      	cmp	r3, #0
 8009318:	d130      	bne.n	800937c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d129      	bne.n	800937c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009336:	609a      	str	r2, [r3, #8]
 8009338:	e020      	b.n	800937c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a18      	ldr	r2, [pc, #96]	; (80093a0 <HAL_ADC_Start_DMA+0x214>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d11b      	bne.n	800937c <HAL_ADC_Start_DMA+0x1f0>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d114      	bne.n	800937c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009360:	609a      	str	r2, [r3, #8]
 8009362:	e00b      	b.n	800937c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	f043 0210 	orr.w	r2, r3, #16
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009374:	f043 0201 	orr.w	r2, r3, #1
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	2000028c 	.word	0x2000028c
 800938c:	431bde83 	.word	0x431bde83
 8009390:	40012300 	.word	0x40012300
 8009394:	08009825 	.word	0x08009825
 8009398:	080098df 	.word	0x080098df
 800939c:	080098fb 	.word	0x080098fb
 80093a0:	40012000 	.word	0x40012000
 80093a4:	40012100 	.word	0x40012100
 80093a8:	40012200 	.word	0x40012200

080093ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d101      	bne.n	8009404 <HAL_ADC_ConfigChannel+0x1c>
 8009400:	2302      	movs	r3, #2
 8009402:	e105      	b.n	8009610 <HAL_ADC_ConfigChannel+0x228>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b09      	cmp	r3, #9
 8009412:	d925      	bls.n	8009460 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68d9      	ldr	r1, [r3, #12]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	461a      	mov	r2, r3
 8009422:	4613      	mov	r3, r2
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	4413      	add	r3, r2
 8009428:	3b1e      	subs	r3, #30
 800942a:	2207      	movs	r2, #7
 800942c:	fa02 f303 	lsl.w	r3, r2, r3
 8009430:	43da      	mvns	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	400a      	ands	r2, r1
 8009438:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68d9      	ldr	r1, [r3, #12]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	4618      	mov	r0, r3
 800944c:	4603      	mov	r3, r0
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	4403      	add	r3, r0
 8009452:	3b1e      	subs	r3, #30
 8009454:	409a      	lsls	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	60da      	str	r2, [r3, #12]
 800945e:	e022      	b.n	80094a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6919      	ldr	r1, [r3, #16]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	461a      	mov	r2, r3
 800946e:	4613      	mov	r3, r2
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	4413      	add	r3, r2
 8009474:	2207      	movs	r2, #7
 8009476:	fa02 f303 	lsl.w	r3, r2, r3
 800947a:	43da      	mvns	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	400a      	ands	r2, r1
 8009482:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6919      	ldr	r1, [r3, #16]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	4618      	mov	r0, r3
 8009496:	4603      	mov	r3, r0
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	4403      	add	r3, r0
 800949c:	409a      	lsls	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b06      	cmp	r3, #6
 80094ac:	d824      	bhi.n	80094f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	3b05      	subs	r3, #5
 80094c0:	221f      	movs	r2, #31
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	43da      	mvns	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	400a      	ands	r2, r1
 80094ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	4618      	mov	r0, r3
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	3b05      	subs	r3, #5
 80094ea:	fa00 f203 	lsl.w	r2, r0, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	635a      	str	r2, [r3, #52]	; 0x34
 80094f6:	e04c      	b.n	8009592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b0c      	cmp	r3, #12
 80094fe:	d824      	bhi.n	800954a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	3b23      	subs	r3, #35	; 0x23
 8009512:	221f      	movs	r2, #31
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	43da      	mvns	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	400a      	ands	r2, r1
 8009520:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	b29b      	uxth	r3, r3
 800952e:	4618      	mov	r0, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	3b23      	subs	r3, #35	; 0x23
 800953c:	fa00 f203 	lsl.w	r2, r0, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
 8009548:	e023      	b.n	8009592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	3b41      	subs	r3, #65	; 0x41
 800955c:	221f      	movs	r2, #31
 800955e:	fa02 f303 	lsl.w	r3, r2, r3
 8009562:	43da      	mvns	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	400a      	ands	r2, r1
 800956a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	4618      	mov	r0, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	4613      	mov	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	3b41      	subs	r3, #65	; 0x41
 8009586:	fa00 f203 	lsl.w	r2, r0, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009592:	4b22      	ldr	r3, [pc, #136]	; (800961c <HAL_ADC_ConfigChannel+0x234>)
 8009594:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a21      	ldr	r2, [pc, #132]	; (8009620 <HAL_ADC_ConfigChannel+0x238>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d109      	bne.n	80095b4 <HAL_ADC_ConfigChannel+0x1cc>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b12      	cmp	r3, #18
 80095a6:	d105      	bne.n	80095b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a19      	ldr	r2, [pc, #100]	; (8009620 <HAL_ADC_ConfigChannel+0x238>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d123      	bne.n	8009606 <HAL_ADC_ConfigChannel+0x21e>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d003      	beq.n	80095ce <HAL_ADC_ConfigChannel+0x1e6>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b11      	cmp	r3, #17
 80095cc:	d11b      	bne.n	8009606 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b10      	cmp	r3, #16
 80095e0:	d111      	bne.n	8009606 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80095e2:	4b10      	ldr	r3, [pc, #64]	; (8009624 <HAL_ADC_ConfigChannel+0x23c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a10      	ldr	r2, [pc, #64]	; (8009628 <HAL_ADC_ConfigChannel+0x240>)
 80095e8:	fba2 2303 	umull	r2, r3, r2, r3
 80095ec:	0c9a      	lsrs	r2, r3, #18
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80095f8:	e002      	b.n	8009600 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f9      	bne.n	80095fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	40012300 	.word	0x40012300
 8009620:	40012000 	.word	0x40012000
 8009624:	2000028c 	.word	0x2000028c
 8009628:	431bde83 	.word	0x431bde83

0800962c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009634:	4b79      	ldr	r3, [pc, #484]	; (800981c <ADC_Init+0x1f0>)
 8009636:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	431a      	orrs	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6859      	ldr	r1, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	021a      	lsls	r2, r3, #8
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6899      	ldr	r1, [r3, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	430a      	orrs	r2, r1
 80096b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096be:	4a58      	ldr	r2, [pc, #352]	; (8009820 <ADC_Init+0x1f4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d022      	beq.n	800970a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6899      	ldr	r1, [r3, #8]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80096f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6899      	ldr	r1, [r3, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	609a      	str	r2, [r3, #8]
 8009708:	e00f      	b.n	800972a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009728:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0202 	bic.w	r2, r2, #2
 8009738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6899      	ldr	r1, [r3, #8]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7e1b      	ldrb	r3, [r3, #24]
 8009744:	005a      	lsls	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01b      	beq.n	8009790 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009766:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009776:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6859      	ldr	r1, [r3, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	3b01      	subs	r3, #1
 8009784:	035a      	lsls	r2, r3, #13
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	605a      	str	r2, [r3, #4]
 800978e:	e007      	b.n	80097a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800979e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80097ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	051a      	lsls	r2, r3, #20
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6899      	ldr	r1, [r3, #8]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097e2:	025a      	lsls	r2, r3, #9
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6899      	ldr	r1, [r3, #8]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	029a      	lsls	r2, r3, #10
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]
}
 8009810:	bf00      	nop
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	40012300 	.word	0x40012300
 8009820:	0f000001 	.word	0x0f000001

08009824 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800983a:	2b00      	cmp	r3, #0
 800983c:	d13c      	bne.n	80098b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d12b      	bne.n	80098b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800985c:	2b00      	cmp	r3, #0
 800985e:	d127      	bne.n	80098b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800986a:	2b00      	cmp	r3, #0
 800986c:	d006      	beq.n	800987c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009878:	2b00      	cmp	r3, #0
 800987a:	d119      	bne.n	80098b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0220 	bic.w	r2, r2, #32
 800988a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d105      	bne.n	80098b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	f043 0201 	orr.w	r2, r3, #1
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7f8 fd31 	bl	8002318 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80098b6:	e00e      	b.n	80098d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f7ff fd85 	bl	80093d4 <HAL_ADC_ErrorCallback>
}
 80098ca:	e004      	b.n	80098d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fd5d 	bl	80093ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2240      	movs	r2, #64	; 0x40
 800990c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	f043 0204 	orr.w	r2, r3, #4
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fd5a 	bl	80093d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800994c:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <__NVIC_SetPriorityGrouping+0x44>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009958:	4013      	ands	r3, r2
 800995a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800996c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800996e:	4a04      	ldr	r2, [pc, #16]	; (8009980 <__NVIC_SetPriorityGrouping+0x44>)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	60d3      	str	r3, [r2, #12]
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	e000ed00 	.word	0xe000ed00

08009984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <__NVIC_GetPriorityGrouping+0x18>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	f003 0307 	and.w	r3, r3, #7
}
 8009992:	4618      	mov	r0, r3
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	e000ed00 	.word	0xe000ed00

080099a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	db0b      	blt.n	80099ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	f003 021f 	and.w	r2, r3, #31
 80099b8:	4907      	ldr	r1, [pc, #28]	; (80099d8 <__NVIC_EnableIRQ+0x38>)
 80099ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099be:	095b      	lsrs	r3, r3, #5
 80099c0:	2001      	movs	r0, #1
 80099c2:	fa00 f202 	lsl.w	r2, r0, r2
 80099c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	e000e100 	.word	0xe000e100

080099dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	6039      	str	r1, [r7, #0]
 80099e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	db0a      	blt.n	8009a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	490c      	ldr	r1, [pc, #48]	; (8009a28 <__NVIC_SetPriority+0x4c>)
 80099f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099fa:	0112      	lsls	r2, r2, #4
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	440b      	add	r3, r1
 8009a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a04:	e00a      	b.n	8009a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	4908      	ldr	r1, [pc, #32]	; (8009a2c <__NVIC_SetPriority+0x50>)
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
 8009a0e:	f003 030f 	and.w	r3, r3, #15
 8009a12:	3b04      	subs	r3, #4
 8009a14:	0112      	lsls	r2, r2, #4
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	440b      	add	r3, r1
 8009a1a:	761a      	strb	r2, [r3, #24]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	e000e100 	.word	0xe000e100
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b089      	sub	sp, #36	; 0x24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f003 0307 	and.w	r3, r3, #7
 8009a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f1c3 0307 	rsb	r3, r3, #7
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	bf28      	it	cs
 8009a4e:	2304      	movcs	r3, #4
 8009a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	3304      	adds	r3, #4
 8009a56:	2b06      	cmp	r3, #6
 8009a58:	d902      	bls.n	8009a60 <NVIC_EncodePriority+0x30>
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	3b03      	subs	r3, #3
 8009a5e:	e000      	b.n	8009a62 <NVIC_EncodePriority+0x32>
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6e:	43da      	mvns	r2, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	401a      	ands	r2, r3
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a78:	f04f 31ff 	mov.w	r1, #4294967295
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a82:	43d9      	mvns	r1, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a88:	4313      	orrs	r3, r2
         );
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3724      	adds	r7, #36	; 0x24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
	...

08009a98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009a9c:	f3bf 8f4f 	dsb	sy
}
 8009aa0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009aa2:	4b06      	ldr	r3, [pc, #24]	; (8009abc <__NVIC_SystemReset+0x24>)
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009aaa:	4904      	ldr	r1, [pc, #16]	; (8009abc <__NVIC_SystemReset+0x24>)
 8009aac:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <__NVIC_SystemReset+0x28>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ab2:	f3bf 8f4f 	dsb	sy
}
 8009ab6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <__NVIC_SystemReset+0x20>
 8009abc:	e000ed00 	.word	0xe000ed00
 8009ac0:	05fa0004 	.word	0x05fa0004

08009ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ad4:	d301      	bcc.n	8009ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e00f      	b.n	8009afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ada:	4a0a      	ldr	r2, [pc, #40]	; (8009b04 <SysTick_Config+0x40>)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ae2:	210f      	movs	r1, #15
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	f7ff ff78 	bl	80099dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <SysTick_Config+0x40>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009af2:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <SysTick_Config+0x40>)
 8009af4:	2207      	movs	r2, #7
 8009af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	e000e010 	.word	0xe000e010

08009b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ff13 	bl	800993c <__NVIC_SetPriorityGrouping>
}
 8009b16:	bf00      	nop
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b086      	sub	sp, #24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	4603      	mov	r3, r0
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b30:	f7ff ff28 	bl	8009984 <__NVIC_GetPriorityGrouping>
 8009b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f7ff ff78 	bl	8009a30 <NVIC_EncodePriority>
 8009b40:	4602      	mov	r2, r0
 8009b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff ff47 	bl	80099dc <__NVIC_SetPriority>
}
 8009b4e:	bf00      	nop
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff ff1b 	bl	80099a0 <__NVIC_EnableIRQ>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009b76:	f7ff ff8f 	bl	8009a98 <__NVIC_SystemReset>

08009b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff ff9e 	bl	8009ac4 <SysTick_Config>
 8009b88:	4603      	mov	r3, r0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009ba0:	f7ff f970 	bl	8008e84 <HAL_GetTick>
 8009ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e099      	b.n	8009ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 0201 	bic.w	r2, r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009bd0:	e00f      	b.n	8009bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009bd2:	f7ff f957 	bl	8008e84 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b05      	cmp	r3, #5
 8009bde:	d908      	bls.n	8009bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2203      	movs	r2, #3
 8009bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e078      	b.n	8009ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e8      	bne.n	8009bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4b38      	ldr	r3, [pc, #224]	; (8009cec <HAL_DMA_Init+0x158>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d107      	bne.n	8009c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	4313      	orrs	r3, r2
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f023 0307 	bic.w	r3, r3, #7
 8009c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d117      	bne.n	8009cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00e      	beq.n	8009cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa6f 	bl	800a17c <DMA_CheckFifoParam>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d008      	beq.n	8009cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2240      	movs	r2, #64	; 0x40
 8009ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e016      	b.n	8009ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa26 	bl	800a110 <DMA_CalcBaseAndBitshift>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ccc:	223f      	movs	r2, #63	; 0x3f
 8009cce:	409a      	lsls	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	f010803f 	.word	0xf010803f

08009cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d101      	bne.n	8009d16 <HAL_DMA_Start_IT+0x26>
 8009d12:	2302      	movs	r3, #2
 8009d14:	e040      	b.n	8009d98 <HAL_DMA_Start_IT+0xa8>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d12f      	bne.n	8009d8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 f9b8 	bl	800a0b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d48:	223f      	movs	r2, #63	; 0x3f
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0216 	orr.w	r2, r2, #22
 8009d5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 0208 	orr.w	r2, r2, #8
 8009d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	e005      	b.n	8009d96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009d92:	2302      	movs	r3, #2
 8009d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009dac:	4b8e      	ldr	r3, [pc, #568]	; (8009fe8 <HAL_DMA_IRQHandler+0x248>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a8e      	ldr	r2, [pc, #568]	; (8009fec <HAL_DMA_IRQHandler+0x24c>)
 8009db2:	fba2 2303 	umull	r2, r3, r2, r3
 8009db6:	0a9b      	lsrs	r3, r3, #10
 8009db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dca:	2208      	movs	r2, #8
 8009dcc:	409a      	lsls	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01a      	beq.n	8009e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d013      	beq.n	8009e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0204 	bic.w	r2, r2, #4
 8009df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df8:	2208      	movs	r2, #8
 8009dfa:	409a      	lsls	r2, r3
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e04:	f043 0201 	orr.w	r2, r3, #1
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e10:	2201      	movs	r2, #1
 8009e12:	409a      	lsls	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4013      	ands	r3, r2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d012      	beq.n	8009e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00b      	beq.n	8009e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e2e:	2201      	movs	r2, #1
 8009e30:	409a      	lsls	r2, r3
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3a:	f043 0202 	orr.w	r2, r3, #2
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e46:	2204      	movs	r2, #4
 8009e48:	409a      	lsls	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d012      	beq.n	8009e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e64:	2204      	movs	r2, #4
 8009e66:	409a      	lsls	r2, r3
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e70:	f043 0204 	orr.w	r2, r3, #4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e7c:	2210      	movs	r2, #16
 8009e7e:	409a      	lsls	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4013      	ands	r3, r2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d043      	beq.n	8009f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 0308 	and.w	r3, r3, #8
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d03c      	beq.n	8009f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9a:	2210      	movs	r2, #16
 8009e9c:	409a      	lsls	r2, r3
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d018      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d108      	bne.n	8009ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d024      	beq.n	8009f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
 8009ece:	e01f      	b.n	8009f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01b      	beq.n	8009f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	4798      	blx	r3
 8009ee0:	e016      	b.n	8009f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d107      	bne.n	8009f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0208 	bic.w	r2, r2, #8
 8009efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f14:	2220      	movs	r2, #32
 8009f16:	409a      	lsls	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 808f 	beq.w	800a040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0310 	and.w	r3, r3, #16
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8087 	beq.w	800a040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f36:	2220      	movs	r2, #32
 8009f38:	409a      	lsls	r2, r3
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d136      	bne.n	8009fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0216 	bic.w	r2, r2, #22
 8009f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695a      	ldr	r2, [r3, #20]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <HAL_DMA_IRQHandler+0x1da>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0208 	bic.w	r2, r2, #8
 8009f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8e:	223f      	movs	r2, #63	; 0x3f
 8009f90:	409a      	lsls	r2, r3
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d07e      	beq.n	800a0ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
        }
        return;
 8009fb6:	e079      	b.n	800a0ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d01d      	beq.n	800a002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10d      	bne.n	8009ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d031      	beq.n	800a040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
 8009fe4:	e02c      	b.n	800a040 <HAL_DMA_IRQHandler+0x2a0>
 8009fe6:	bf00      	nop
 8009fe8:	2000028c 	.word	0x2000028c
 8009fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d023      	beq.n	800a040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	4798      	blx	r3
 800a000:	e01e      	b.n	800a040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10f      	bne.n	800a030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0210 	bic.w	r2, r2, #16
 800a01e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a044:	2b00      	cmp	r3, #0
 800a046:	d032      	beq.n	800a0ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d022      	beq.n	800a09a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2205      	movs	r2, #5
 800a058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0201 	bic.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3301      	adds	r3, #1
 800a070:	60bb      	str	r3, [r7, #8]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d307      	bcc.n	800a088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f2      	bne.n	800a06c <HAL_DMA_IRQHandler+0x2cc>
 800a086:	e000      	b.n	800a08a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	4798      	blx	r3
 800a0aa:	e000      	b.n	800a0ae <HAL_DMA_IRQHandler+0x30e>
        return;
 800a0ac:	bf00      	nop
    }
  }
}
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a0d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	2b40      	cmp	r3, #64	; 0x40
 800a0e0:	d108      	bne.n	800a0f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a0f2:	e007      	b.n	800a104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	60da      	str	r2, [r3, #12]
}
 800a104:	bf00      	nop
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	3b10      	subs	r3, #16
 800a120:	4a14      	ldr	r2, [pc, #80]	; (800a174 <DMA_CalcBaseAndBitshift+0x64>)
 800a122:	fba2 2303 	umull	r2, r3, r2, r3
 800a126:	091b      	lsrs	r3, r3, #4
 800a128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a12a:	4a13      	ldr	r2, [pc, #76]	; (800a178 <DMA_CalcBaseAndBitshift+0x68>)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d909      	bls.n	800a152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a146:	f023 0303 	bic.w	r3, r3, #3
 800a14a:	1d1a      	adds	r2, r3, #4
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	659a      	str	r2, [r3, #88]	; 0x58
 800a150:	e007      	b.n	800a162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a15a:	f023 0303 	bic.w	r3, r3, #3
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	aaaaaaab 	.word	0xaaaaaaab
 800a178:	080112e8 	.word	0x080112e8

0800a17c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d11f      	bne.n	800a1d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d856      	bhi.n	800a24a <DMA_CheckFifoParam+0xce>
 800a19c:	a201      	add	r2, pc, #4	; (adr r2, 800a1a4 <DMA_CheckFifoParam+0x28>)
 800a19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a1b5 	.word	0x0800a1b5
 800a1a8:	0800a1c7 	.word	0x0800a1c7
 800a1ac:	0800a1b5 	.word	0x0800a1b5
 800a1b0:	0800a24b 	.word	0x0800a24b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d046      	beq.n	800a24e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a1c4:	e043      	b.n	800a24e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a1ce:	d140      	bne.n	800a252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a1d4:	e03d      	b.n	800a252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1de:	d121      	bne.n	800a224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d837      	bhi.n	800a256 <DMA_CheckFifoParam+0xda>
 800a1e6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <DMA_CheckFifoParam+0x70>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a1fd 	.word	0x0800a1fd
 800a1f0:	0800a203 	.word	0x0800a203
 800a1f4:	0800a1fd 	.word	0x0800a1fd
 800a1f8:	0800a215 	.word	0x0800a215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a200:	e030      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d025      	beq.n	800a25a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a212:	e022      	b.n	800a25a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a21c:	d11f      	bne.n	800a25e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a222:	e01c      	b.n	800a25e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b02      	cmp	r3, #2
 800a228:	d903      	bls.n	800a232 <DMA_CheckFifoParam+0xb6>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d003      	beq.n	800a238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a230:	e018      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	73fb      	strb	r3, [r7, #15]
      break;
 800a236:	e015      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00e      	beq.n	800a262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	73fb      	strb	r3, [r7, #15]
      break;
 800a248:	e00b      	b.n	800a262 <DMA_CheckFifoParam+0xe6>
      break;
 800a24a:	bf00      	nop
 800a24c:	e00a      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      break;
 800a24e:	bf00      	nop
 800a250:	e008      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      break;
 800a252:	bf00      	nop
 800a254:	e006      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      break;
 800a256:	bf00      	nop
 800a258:	e004      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      break;
 800a25a:	bf00      	nop
 800a25c:	e002      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      break;   
 800a25e:	bf00      	nop
 800a260:	e000      	b.n	800a264 <DMA_CheckFifoParam+0xe8>
      break;
 800a262:	bf00      	nop
    }
  } 
  
  return status; 
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop

0800a274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a274:	b480      	push	{r7}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a282:	2300      	movs	r3, #0
 800a284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a286:	2300      	movs	r3, #0
 800a288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	e16b      	b.n	800a568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a290:	2201      	movs	r2, #1
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	fa02 f303 	lsl.w	r3, r2, r3
 800a298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	f040 815a 	bne.w	800a562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f003 0303 	and.w	r3, r3, #3
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d005      	beq.n	800a2c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d130      	bne.n	800a328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	43db      	mvns	r3, r3
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	fa02 f303 	lsl.w	r3, r2, r3
 800a304:	43db      	mvns	r3, r3
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	4013      	ands	r3, r2
 800a30a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	091b      	lsrs	r3, r3, #4
 800a312:	f003 0201 	and.w	r2, r3, #1
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	4313      	orrs	r3, r2
 800a320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	2b03      	cmp	r3, #3
 800a332:	d017      	beq.n	800a364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	2203      	movs	r2, #3
 800a340:	fa02 f303 	lsl.w	r3, r2, r3
 800a344:	43db      	mvns	r3, r3
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	4013      	ands	r3, r2
 800a34a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d123      	bne.n	800a3b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	08da      	lsrs	r2, r3, #3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3208      	adds	r2, #8
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	f003 0307 	and.w	r3, r3, #7
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	220f      	movs	r2, #15
 800a388:	fa02 f303 	lsl.w	r3, r2, r3
 800a38c:	43db      	mvns	r3, r3
 800a38e:	69ba      	ldr	r2, [r7, #24]
 800a390:	4013      	ands	r3, r2
 800a392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	691a      	ldr	r2, [r3, #16]
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	08da      	lsrs	r2, r3, #3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3208      	adds	r2, #8
 800a3b2:	69b9      	ldr	r1, [r7, #24]
 800a3b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f003 0203 	and.w	r2, r3, #3
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 80b4 	beq.w	800a562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	4b60      	ldr	r3, [pc, #384]	; (800a580 <HAL_GPIO_Init+0x30c>)
 800a400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a402:	4a5f      	ldr	r2, [pc, #380]	; (800a580 <HAL_GPIO_Init+0x30c>)
 800a404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a408:	6453      	str	r3, [r2, #68]	; 0x44
 800a40a:	4b5d      	ldr	r3, [pc, #372]	; (800a580 <HAL_GPIO_Init+0x30c>)
 800a40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a40e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a416:	4a5b      	ldr	r2, [pc, #364]	; (800a584 <HAL_GPIO_Init+0x310>)
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	089b      	lsrs	r3, r3, #2
 800a41c:	3302      	adds	r3, #2
 800a41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	220f      	movs	r2, #15
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	43db      	mvns	r3, r3
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	4013      	ands	r3, r2
 800a438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a52      	ldr	r2, [pc, #328]	; (800a588 <HAL_GPIO_Init+0x314>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d02b      	beq.n	800a49a <HAL_GPIO_Init+0x226>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a51      	ldr	r2, [pc, #324]	; (800a58c <HAL_GPIO_Init+0x318>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d025      	beq.n	800a496 <HAL_GPIO_Init+0x222>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a50      	ldr	r2, [pc, #320]	; (800a590 <HAL_GPIO_Init+0x31c>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d01f      	beq.n	800a492 <HAL_GPIO_Init+0x21e>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a4f      	ldr	r2, [pc, #316]	; (800a594 <HAL_GPIO_Init+0x320>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d019      	beq.n	800a48e <HAL_GPIO_Init+0x21a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a4e      	ldr	r2, [pc, #312]	; (800a598 <HAL_GPIO_Init+0x324>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <HAL_GPIO_Init+0x216>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a4d      	ldr	r2, [pc, #308]	; (800a59c <HAL_GPIO_Init+0x328>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00d      	beq.n	800a486 <HAL_GPIO_Init+0x212>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a4c      	ldr	r2, [pc, #304]	; (800a5a0 <HAL_GPIO_Init+0x32c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d007      	beq.n	800a482 <HAL_GPIO_Init+0x20e>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a4b      	ldr	r2, [pc, #300]	; (800a5a4 <HAL_GPIO_Init+0x330>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d101      	bne.n	800a47e <HAL_GPIO_Init+0x20a>
 800a47a:	2307      	movs	r3, #7
 800a47c:	e00e      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a47e:	2308      	movs	r3, #8
 800a480:	e00c      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a482:	2306      	movs	r3, #6
 800a484:	e00a      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a486:	2305      	movs	r3, #5
 800a488:	e008      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a48a:	2304      	movs	r3, #4
 800a48c:	e006      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a48e:	2303      	movs	r3, #3
 800a490:	e004      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a492:	2302      	movs	r3, #2
 800a494:	e002      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a496:	2301      	movs	r3, #1
 800a498:	e000      	b.n	800a49c <HAL_GPIO_Init+0x228>
 800a49a:	2300      	movs	r3, #0
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	f002 0203 	and.w	r2, r2, #3
 800a4a2:	0092      	lsls	r2, r2, #2
 800a4a4:	4093      	lsls	r3, r2
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a4ac:	4935      	ldr	r1, [pc, #212]	; (800a584 <HAL_GPIO_Init+0x310>)
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	089b      	lsrs	r3, r3, #2
 800a4b2:	3302      	adds	r3, #2
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a4ba:	4b3b      	ldr	r3, [pc, #236]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	43db      	mvns	r3, r3
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a4de:	4a32      	ldr	r2, [pc, #200]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a4e4:	4b30      	ldr	r3, [pc, #192]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	43db      	mvns	r3, r3
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4313      	orrs	r3, r2
 800a506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a508:	4a27      	ldr	r2, [pc, #156]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a50e:	4b26      	ldr	r3, [pc, #152]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	43db      	mvns	r3, r3
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	4013      	ands	r3, r2
 800a51c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4313      	orrs	r3, r2
 800a530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a532:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a538:	4b1b      	ldr	r3, [pc, #108]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	43db      	mvns	r3, r3
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	4013      	ands	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	4313      	orrs	r3, r2
 800a55a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a55c:	4a12      	ldr	r2, [pc, #72]	; (800a5a8 <HAL_GPIO_Init+0x334>)
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	3301      	adds	r3, #1
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b0f      	cmp	r3, #15
 800a56c:	f67f ae90 	bls.w	800a290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	3724      	adds	r7, #36	; 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40023800 	.word	0x40023800
 800a584:	40013800 	.word	0x40013800
 800a588:	40020000 	.word	0x40020000
 800a58c:	40020400 	.word	0x40020400
 800a590:	40020800 	.word	0x40020800
 800a594:	40020c00 	.word	0x40020c00
 800a598:	40021000 	.word	0x40021000
 800a59c:	40021400 	.word	0x40021400
 800a5a0:	40021800 	.word	0x40021800
 800a5a4:	40021c00 	.word	0x40021c00
 800a5a8:	40013c00 	.word	0x40013c00

0800a5ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	887b      	ldrh	r3, [r7, #2]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
 800a5c8:	e001      	b.n	800a5ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	807b      	strh	r3, [r7, #2]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a5ec:	787b      	ldrb	r3, [r7, #1]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5f2:	887a      	ldrh	r2, [r7, #2]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a5f8:	e003      	b.n	800a602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a5fa:	887b      	ldrh	r3, [r7, #2]
 800a5fc:	041a      	lsls	r2, r3, #16
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	619a      	str	r2, [r3, #24]
}
 800a602:	bf00      	nop
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
	...

0800a610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e12b      	b.n	800a87a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7f7 fcd8 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2224      	movs	r2, #36	; 0x24
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0201 	bic.w	r2, r2, #1
 800a652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a674:	f001 fd16 	bl	800c0a4 <HAL_RCC_GetPCLK1Freq>
 800a678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	4a81      	ldr	r2, [pc, #516]	; (800a884 <HAL_I2C_Init+0x274>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d807      	bhi.n	800a694 <HAL_I2C_Init+0x84>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4a80      	ldr	r2, [pc, #512]	; (800a888 <HAL_I2C_Init+0x278>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	bf94      	ite	ls
 800a68c:	2301      	movls	r3, #1
 800a68e:	2300      	movhi	r3, #0
 800a690:	b2db      	uxtb	r3, r3
 800a692:	e006      	b.n	800a6a2 <HAL_I2C_Init+0x92>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4a7d      	ldr	r2, [pc, #500]	; (800a88c <HAL_I2C_Init+0x27c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	bf94      	ite	ls
 800a69c:	2301      	movls	r3, #1
 800a69e:	2300      	movhi	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e0e7      	b.n	800a87a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a78      	ldr	r2, [pc, #480]	; (800a890 <HAL_I2C_Init+0x280>)
 800a6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b2:	0c9b      	lsrs	r3, r3, #18
 800a6b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	4a6a      	ldr	r2, [pc, #424]	; (800a884 <HAL_I2C_Init+0x274>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d802      	bhi.n	800a6e4 <HAL_I2C_Init+0xd4>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	e009      	b.n	800a6f8 <HAL_I2C_Init+0xe8>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
 800a6ee:	4a69      	ldr	r2, [pc, #420]	; (800a894 <HAL_I2C_Init+0x284>)
 800a6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f4:	099b      	lsrs	r3, r3, #6
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a70a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	495c      	ldr	r1, [pc, #368]	; (800a884 <HAL_I2C_Init+0x274>)
 800a714:	428b      	cmp	r3, r1
 800a716:	d819      	bhi.n	800a74c <HAL_I2C_Init+0x13c>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	1e59      	subs	r1, r3, #1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	fbb1 f3f3 	udiv	r3, r1, r3
 800a726:	1c59      	adds	r1, r3, #1
 800a728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a72c:	400b      	ands	r3, r1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <HAL_I2C_Init+0x138>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	1e59      	subs	r1, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a740:	3301      	adds	r3, #1
 800a742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a746:	e051      	b.n	800a7ec <HAL_I2C_Init+0x1dc>
 800a748:	2304      	movs	r3, #4
 800a74a:	e04f      	b.n	800a7ec <HAL_I2C_Init+0x1dc>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d111      	bne.n	800a778 <HAL_I2C_Init+0x168>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	1e58      	subs	r0, r3, #1
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6859      	ldr	r1, [r3, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	440b      	add	r3, r1
 800a762:	fbb0 f3f3 	udiv	r3, r0, r3
 800a766:	3301      	adds	r3, #1
 800a768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	bf0c      	ite	eq
 800a770:	2301      	moveq	r3, #1
 800a772:	2300      	movne	r3, #0
 800a774:	b2db      	uxtb	r3, r3
 800a776:	e012      	b.n	800a79e <HAL_I2C_Init+0x18e>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	1e58      	subs	r0, r3, #1
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6859      	ldr	r1, [r3, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	440b      	add	r3, r1
 800a786:	0099      	lsls	r1, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a78e:	3301      	adds	r3, #1
 800a790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a794:	2b00      	cmp	r3, #0
 800a796:	bf0c      	ite	eq
 800a798:	2301      	moveq	r3, #1
 800a79a:	2300      	movne	r3, #0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <HAL_I2C_Init+0x196>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e022      	b.n	800a7ec <HAL_I2C_Init+0x1dc>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10e      	bne.n	800a7cc <HAL_I2C_Init+0x1bc>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	1e58      	subs	r0, r3, #1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6859      	ldr	r1, [r3, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	440b      	add	r3, r1
 800a7bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ca:	e00f      	b.n	800a7ec <HAL_I2C_Init+0x1dc>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	1e58      	subs	r0, r3, #1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6859      	ldr	r1, [r3, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	440b      	add	r3, r1
 800a7da:	0099      	lsls	r1, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	6809      	ldr	r1, [r1, #0]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69da      	ldr	r2, [r3, #28]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	431a      	orrs	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a81a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6911      	ldr	r1, [r2, #16]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	68d2      	ldr	r2, [r2, #12]
 800a826:	4311      	orrs	r1, r2
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6812      	ldr	r2, [r2, #0]
 800a82c:	430b      	orrs	r3, r1
 800a82e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695a      	ldr	r2, [r3, #20]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	431a      	orrs	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0201 	orr.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	000186a0 	.word	0x000186a0
 800a888:	001e847f 	.word	0x001e847f
 800a88c:	003d08ff 	.word	0x003d08ff
 800a890:	431bde83 	.word	0x431bde83
 800a894:	10624dd3 	.word	0x10624dd3

0800a898 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af02      	add	r7, sp, #8
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	817b      	strh	r3, [r7, #10]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	813b      	strh	r3, [r7, #8]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8b2:	f7fe fae7 	bl	8008e84 <HAL_GetTick>
 800a8b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b20      	cmp	r3, #32
 800a8c2:	f040 80d9 	bne.w	800aa78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	2319      	movs	r3, #25
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	496d      	ldr	r1, [pc, #436]	; (800aa84 <HAL_I2C_Mem_Write+0x1ec>)
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 fc7f 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e0cc      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_I2C_Mem_Write+0x56>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e0c5      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b01      	cmp	r3, #1
 800a902:	d007      	beq.n	800a914 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f042 0201 	orr.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a922:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2221      	movs	r2, #33	; 0x21
 800a928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2240      	movs	r2, #64	; 0x40
 800a930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6a3a      	ldr	r2, [r7, #32]
 800a93e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4a4d      	ldr	r2, [pc, #308]	; (800aa88 <HAL_I2C_Mem_Write+0x1f0>)
 800a954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a956:	88f8      	ldrh	r0, [r7, #6]
 800a958:	893a      	ldrh	r2, [r7, #8]
 800a95a:	8979      	ldrh	r1, [r7, #10]
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	4603      	mov	r3, r0
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fab6 	bl	800aed8 <I2C_RequestMemoryWrite>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d052      	beq.n	800aa18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e081      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fd00 	bl	800b380 <I2C_WaitOnTXEFlagUntilTimeout>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d107      	bne.n	800a99e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a99c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e06b      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	781a      	ldrb	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d11b      	bne.n	800aa18 <HAL_I2C_Mem_Write+0x180>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d017      	beq.n	800aa18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	781a      	ldrb	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	3b01      	subs	r3, #1
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1aa      	bne.n	800a976 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fcec 	bl	800b402 <I2C_WaitOnBTFFlagUntilTimeout>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d107      	bne.n	800aa48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e016      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	e000      	b.n	800aa7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa78:	2302      	movs	r3, #2
  }
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	00100002 	.word	0x00100002
 800aa88:	ffff0000 	.word	0xffff0000

0800aa8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08c      	sub	sp, #48	; 0x30
 800aa90:	af02      	add	r7, sp, #8
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	817b      	strh	r3, [r7, #10]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	813b      	strh	r3, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aaa6:	f7fe f9ed 	bl	8008e84 <HAL_GetTick>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	f040 8208 	bne.w	800aeca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	2319      	movs	r3, #25
 800aac0:	2201      	movs	r2, #1
 800aac2:	497b      	ldr	r1, [pc, #492]	; (800acb0 <HAL_I2C_Mem_Read+0x224>)
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 fb85 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800aad0:	2302      	movs	r3, #2
 800aad2:	e1fb      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d101      	bne.n	800aae2 <HAL_I2C_Mem_Read+0x56>
 800aade:	2302      	movs	r3, #2
 800aae0:	e1f4      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d007      	beq.n	800ab08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0201 	orr.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2222      	movs	r2, #34	; 0x22
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2240      	movs	r2, #64	; 0x40
 800ab24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ab38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4a5b      	ldr	r2, [pc, #364]	; (800acb4 <HAL_I2C_Mem_Read+0x228>)
 800ab48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab4a:	88f8      	ldrh	r0, [r7, #6]
 800ab4c:	893a      	ldrh	r2, [r7, #8]
 800ab4e:	8979      	ldrh	r1, [r7, #10]
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	4603      	mov	r3, r0
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 fa52 	bl	800b004 <I2C_RequestMemoryRead>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e1b0      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d113      	bne.n	800ab9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab72:	2300      	movs	r3, #0
 800ab74:	623b      	str	r3, [r7, #32]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	623b      	str	r3, [r7, #32]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	623b      	str	r3, [r7, #32]
 800ab86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	e184      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d11b      	bne.n	800abda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb2:	2300      	movs	r3, #0
 800abb4:	61fb      	str	r3, [r7, #28]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	e164      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d11b      	bne.n	800ac1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abf0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac02:	2300      	movs	r3, #0
 800ac04:	61bb      	str	r3, [r7, #24]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	61bb      	str	r3, [r7, #24]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	61bb      	str	r3, [r7, #24]
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	e144      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ac30:	e138      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	f200 80f1 	bhi.w	800ae1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d123      	bne.n	800ac8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fc1b 	bl	800b484 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e139      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	691a      	ldr	r2, [r3, #16]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	b2d2      	uxtb	r2, r2
 800ac64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac74:	3b01      	subs	r3, #1
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	3b01      	subs	r3, #1
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac8a:	e10b      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d14e      	bne.n	800ad32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4906      	ldr	r1, [pc, #24]	; (800acb8 <HAL_I2C_Mem_Read+0x22c>)
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 fa98 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d008      	beq.n	800acbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e10e      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
 800acae:	bf00      	nop
 800acb0:	00100002 	.word	0x00100002
 800acb4:	ffff0000 	.word	0xffff0000
 800acb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	691a      	ldr	r2, [r3, #16]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ace8:	3b01      	subs	r3, #1
 800acea:	b29a      	uxth	r2, r3
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	3b01      	subs	r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	691a      	ldr	r2, [r3, #16]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad30:	e0b8      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4966      	ldr	r1, [pc, #408]	; (800aed4 <HAL_I2C_Mem_Read+0x448>)
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 fa49 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0bf      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691a      	ldr	r2, [r3, #16]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	b2d2      	uxtb	r2, r2
 800ad68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	2200      	movs	r2, #0
 800ad96:	494f      	ldr	r1, [pc, #316]	; (800aed4 <HAL_I2C_Mem_Read+0x448>)
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 fa1b 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e091      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691a      	ldr	r2, [r3, #16]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	b2d2      	uxtb	r2, r2
 800adc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add4:	3b01      	subs	r3, #1
 800add6:	b29a      	uxth	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf4:	b2d2      	uxtb	r2, r2
 800adf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae06:	3b01      	subs	r3, #1
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	3b01      	subs	r3, #1
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae1c:	e042      	b.n	800aea4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f000 fb2e 	bl	800b484 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e04c      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691a      	ldr	r2, [r3, #16]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	b2d2      	uxtb	r2, r2
 800ae3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	f003 0304 	and.w	r3, r3, #4
 800ae6e:	2b04      	cmp	r3, #4
 800ae70:	d118      	bne.n	800aea4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	691a      	ldr	r2, [r3, #16]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	b2d2      	uxtb	r2, r2
 800ae7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f aec2 	bne.w	800ac32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e000      	b.n	800aecc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800aeca:	2302      	movs	r3, #2
  }
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3728      	adds	r7, #40	; 0x28
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	00010004 	.word	0x00010004

0800aed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af02      	add	r7, sp, #8
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	4608      	mov	r0, r1
 800aee2:	4611      	mov	r1, r2
 800aee4:	461a      	mov	r2, r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	817b      	strh	r3, [r7, #10]
 800aeea:	460b      	mov	r3, r1
 800aeec:	813b      	strh	r3, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	6a3b      	ldr	r3, [r7, #32]
 800af08:	2200      	movs	r2, #0
 800af0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 f960 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00d      	beq.n	800af36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af28:	d103      	bne.n	800af32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e05f      	b.n	800aff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af36:	897b      	ldrh	r3, [r7, #10]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	461a      	mov	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800af44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	6a3a      	ldr	r2, [r7, #32]
 800af4a:	492d      	ldr	r1, [pc, #180]	; (800b000 <I2C_RequestMemoryWrite+0x128>)
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 f998 	bl	800b282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e04c      	b.n	800aff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af5c:	2300      	movs	r3, #0
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	617b      	str	r3, [r7, #20]
 800af70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af74:	6a39      	ldr	r1, [r7, #32]
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f000 fa02 	bl	800b380 <I2C_WaitOnTXEFlagUntilTimeout>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00d      	beq.n	800af9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	2b04      	cmp	r3, #4
 800af88:	d107      	bne.n	800af9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e02b      	b.n	800aff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af9e:	88fb      	ldrh	r3, [r7, #6]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d105      	bne.n	800afb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afa4:	893b      	ldrh	r3, [r7, #8]
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	611a      	str	r2, [r3, #16]
 800afae:	e021      	b.n	800aff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800afb0:	893b      	ldrh	r3, [r7, #8]
 800afb2:	0a1b      	lsrs	r3, r3, #8
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc0:	6a39      	ldr	r1, [r7, #32]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f9dc 	bl	800b380 <I2C_WaitOnTXEFlagUntilTimeout>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00d      	beq.n	800afea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	d107      	bne.n	800afe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e005      	b.n	800aff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afea:	893b      	ldrh	r3, [r7, #8]
 800afec:	b2da      	uxtb	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	00010002 	.word	0x00010002

0800b004 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af02      	add	r7, sp, #8
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	4603      	mov	r3, r0
 800b014:	817b      	strh	r3, [r7, #10]
 800b016:	460b      	mov	r3, r1
 800b018:	813b      	strh	r3, [r7, #8]
 800b01a:	4613      	mov	r3, r2
 800b01c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b02c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b03c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	2200      	movs	r2, #0
 800b046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 f8c2 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00d      	beq.n	800b072 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b064:	d103      	bne.n	800b06e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b06c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e0aa      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b072:	897b      	ldrh	r3, [r7, #10]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	461a      	mov	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	6a3a      	ldr	r2, [r7, #32]
 800b086:	4952      	ldr	r1, [pc, #328]	; (800b1d0 <I2C_RequestMemoryRead+0x1cc>)
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 f8fa 	bl	800b282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e097      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	617b      	str	r3, [r7, #20]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b0:	6a39      	ldr	r1, [r7, #32]
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f000 f964 	bl	800b380 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00d      	beq.n	800b0da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d107      	bne.n	800b0d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e076      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0da:	88fb      	ldrh	r3, [r7, #6]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d105      	bne.n	800b0ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b0e0:	893b      	ldrh	r3, [r7, #8]
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	611a      	str	r2, [r3, #16]
 800b0ea:	e021      	b.n	800b130 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b0ec:	893b      	ldrh	r3, [r7, #8]
 800b0ee:	0a1b      	lsrs	r3, r3, #8
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0fc:	6a39      	ldr	r1, [r7, #32]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 f93e 	bl	800b380 <I2C_WaitOnTXEFlagUntilTimeout>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00d      	beq.n	800b126 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d107      	bne.n	800b122 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e050      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b126:	893b      	ldrh	r3, [r7, #8]
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b132:	6a39      	ldr	r1, [r7, #32]
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 f923 	bl	800b380 <I2C_WaitOnTXEFlagUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00d      	beq.n	800b15c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b144:	2b04      	cmp	r3, #4
 800b146:	d107      	bne.n	800b158 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b156:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e035      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b16a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	2200      	movs	r2, #0
 800b174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 f82b 	bl	800b1d4 <I2C_WaitOnFlagUntilTimeout>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00d      	beq.n	800b1a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b192:	d103      	bne.n	800b19c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b19a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e013      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b1a0:	897b      	ldrh	r3, [r7, #10]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f043 0301 	orr.w	r3, r3, #1
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	6a3a      	ldr	r2, [r7, #32]
 800b1b4:	4906      	ldr	r1, [pc, #24]	; (800b1d0 <I2C_RequestMemoryRead+0x1cc>)
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 f863 	bl	800b282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	00010002 	.word	0x00010002

0800b1d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	603b      	str	r3, [r7, #0]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1e4:	e025      	b.n	800b232 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ec:	d021      	beq.n	800b232 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ee:	f7fd fe49 	bl	8008e84 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d302      	bcc.n	800b204 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d116      	bne.n	800b232 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	f043 0220 	orr.w	r2, r3, #32
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e023      	b.n	800b27a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	0c1b      	lsrs	r3, r3, #16
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d10d      	bne.n	800b258 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	43da      	mvns	r2, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	4013      	ands	r3, r2
 800b248:	b29b      	uxth	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bf0c      	ite	eq
 800b24e:	2301      	moveq	r3, #1
 800b250:	2300      	movne	r3, #0
 800b252:	b2db      	uxtb	r3, r3
 800b254:	461a      	mov	r2, r3
 800b256:	e00c      	b.n	800b272 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	43da      	mvns	r2, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	4013      	ands	r3, r2
 800b264:	b29b      	uxth	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	bf0c      	ite	eq
 800b26a:	2301      	moveq	r3, #1
 800b26c:	2300      	movne	r3, #0
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	429a      	cmp	r2, r3
 800b276:	d0b6      	beq.n	800b1e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b290:	e051      	b.n	800b336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2a0:	d123      	bne.n	800b2ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b2ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	f043 0204 	orr.w	r2, r3, #4
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e046      	b.n	800b378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f0:	d021      	beq.n	800b336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2f2:	f7fd fdc7 	bl	8008e84 <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d302      	bcc.n	800b308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d116      	bne.n	800b336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2220      	movs	r2, #32
 800b312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b322:	f043 0220 	orr.w	r2, r3, #32
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e020      	b.n	800b378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	0c1b      	lsrs	r3, r3, #16
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d10c      	bne.n	800b35a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	43da      	mvns	r2, r3
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	4013      	ands	r3, r2
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	bf14      	ite	ne
 800b352:	2301      	movne	r3, #1
 800b354:	2300      	moveq	r3, #0
 800b356:	b2db      	uxtb	r3, r3
 800b358:	e00b      	b.n	800b372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	43da      	mvns	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	4013      	ands	r3, r2
 800b366:	b29b      	uxth	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bf14      	ite	ne
 800b36c:	2301      	movne	r3, #1
 800b36e:	2300      	moveq	r3, #0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d18d      	bne.n	800b292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b38c:	e02d      	b.n	800b3ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 f8ce 	bl	800b530 <I2C_IsAcknowledgeFailed>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e02d      	b.n	800b3fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a4:	d021      	beq.n	800b3ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3a6:	f7fd fd6d 	bl	8008e84 <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d302      	bcc.n	800b3bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d116      	bne.n	800b3ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d6:	f043 0220 	orr.w	r2, r3, #32
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e007      	b.n	800b3fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f4:	2b80      	cmp	r3, #128	; 0x80
 800b3f6:	d1ca      	bne.n	800b38e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b40e:	e02d      	b.n	800b46c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 f88d 	bl	800b530 <I2C_IsAcknowledgeFailed>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e02d      	b.n	800b47c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b426:	d021      	beq.n	800b46c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b428:	f7fd fd2c 	bl	8008e84 <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	429a      	cmp	r2, r3
 800b436:	d302      	bcc.n	800b43e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d116      	bne.n	800b46c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2220      	movs	r2, #32
 800b448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b458:	f043 0220 	orr.w	r2, r3, #32
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e007      	b.n	800b47c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	f003 0304 	and.w	r3, r3, #4
 800b476:	2b04      	cmp	r3, #4
 800b478:	d1ca      	bne.n	800b410 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b490:	e042      	b.n	800b518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	f003 0310 	and.w	r3, r3, #16
 800b49c:	2b10      	cmp	r3, #16
 800b49e:	d119      	bne.n	800b4d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f06f 0210 	mvn.w	r2, #16
 800b4a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2220      	movs	r2, #32
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e029      	b.n	800b528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4d4:	f7fd fcd6 	bl	8008e84 <HAL_GetTick>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d302      	bcc.n	800b4ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d116      	bne.n	800b518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2220      	movs	r2, #32
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	f043 0220 	orr.w	r2, r3, #32
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e007      	b.n	800b528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b522:	2b40      	cmp	r3, #64	; 0x40
 800b524:	d1b5      	bne.n	800b492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b546:	d11b      	bne.n	800b580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2220      	movs	r2, #32
 800b55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	f043 0204 	orr.w	r2, r3, #4
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e000      	b.n	800b582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b590:	b08f      	sub	sp, #60	; 0x3c
 800b592:	af0a      	add	r7, sp, #40	; 0x28
 800b594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e10f      	b.n	800b7c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fd fb86 	bl	8008ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f002 fa63 	bl	800daaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	603b      	str	r3, [r7, #0]
 800b5ea:	687e      	ldr	r6, [r7, #4]
 800b5ec:	466d      	mov	r5, sp
 800b5ee:	f106 0410 	add.w	r4, r6, #16
 800b5f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b5f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b5f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b5fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b5fe:	e885 0003 	stmia.w	r5, {r0, r1}
 800b602:	1d33      	adds	r3, r6, #4
 800b604:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b606:	6838      	ldr	r0, [r7, #0]
 800b608:	f002 f9ee 	bl	800d9e8 <USB_CoreInit>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2202      	movs	r2, #2
 800b616:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e0d0      	b.n	800b7c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f002 fa51 	bl	800dacc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b62a:	2300      	movs	r3, #0
 800b62c:	73fb      	strb	r3, [r7, #15]
 800b62e:	e04a      	b.n	800b6c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b630:	7bfa      	ldrb	r2, [r7, #15]
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	4613      	mov	r3, r2
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	333d      	adds	r3, #61	; 0x3d
 800b640:	2201      	movs	r2, #1
 800b642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b644:	7bfa      	ldrb	r2, [r7, #15]
 800b646:	6879      	ldr	r1, [r7, #4]
 800b648:	4613      	mov	r3, r2
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	440b      	add	r3, r1
 800b652:	333c      	adds	r3, #60	; 0x3c
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b658:	7bfa      	ldrb	r2, [r7, #15]
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	b298      	uxth	r0, r3
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	4613      	mov	r3, r2
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	4413      	add	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	440b      	add	r3, r1
 800b66a:	3344      	adds	r3, #68	; 0x44
 800b66c:	4602      	mov	r2, r0
 800b66e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b670:	7bfa      	ldrb	r2, [r7, #15]
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4613      	mov	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	3340      	adds	r3, #64	; 0x40
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b684:	7bfa      	ldrb	r2, [r7, #15]
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4613      	mov	r3, r2
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	4413      	add	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	440b      	add	r3, r1
 800b692:	3348      	adds	r3, #72	; 0x48
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b698:	7bfa      	ldrb	r2, [r7, #15]
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	4413      	add	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	440b      	add	r3, r1
 800b6a6:	334c      	adds	r3, #76	; 0x4c
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b6ac:	7bfa      	ldrb	r2, [r7, #15]
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	440b      	add	r3, r1
 800b6ba:	3354      	adds	r3, #84	; 0x54
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	73fb      	strb	r3, [r7, #15]
 800b6c6:	7bfa      	ldrb	r2, [r7, #15]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d3af      	bcc.n	800b630 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73fb      	strb	r3, [r7, #15]
 800b6d4:	e044      	b.n	800b760 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b6d6:	7bfa      	ldrb	r2, [r7, #15]
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b6ec:	7bfa      	ldrb	r2, [r7, #15]
 800b6ee:	6879      	ldr	r1, [r7, #4]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	4413      	add	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	440b      	add	r3, r1
 800b6fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b6fe:	7bfa      	ldrb	r2, [r7, #15]
 800b700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b702:	7bfa      	ldrb	r2, [r7, #15]
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b714:	2200      	movs	r2, #0
 800b716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b718:	7bfa      	ldrb	r2, [r7, #15]
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	4613      	mov	r3, r2
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b72e:	7bfa      	ldrb	r2, [r7, #15]
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	4613      	mov	r3, r2
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	440b      	add	r3, r1
 800b73c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b744:	7bfa      	ldrb	r2, [r7, #15]
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	4613      	mov	r3, r2
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	4413      	add	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	440b      	add	r3, r1
 800b752:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	3301      	adds	r3, #1
 800b75e:	73fb      	strb	r3, [r7, #15]
 800b760:	7bfa      	ldrb	r2, [r7, #15]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d3b5      	bcc.n	800b6d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	687e      	ldr	r6, [r7, #4]
 800b772:	466d      	mov	r5, sp
 800b774:	f106 0410 	add.w	r4, r6, #16
 800b778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b77a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b77c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b77e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b780:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b784:	e885 0003 	stmia.w	r5, {r0, r1}
 800b788:	1d33      	adds	r3, r6, #4
 800b78a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b78c:	6838      	ldr	r0, [r7, #0]
 800b78e:	f002 f9e9 	bl	800db64 <USB_DevInit>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e00d      	b.n	800b7c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f002 fbb4 	bl	800df26 <USB_DevDisconnect>

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e267      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d075      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b7e6:	4b88      	ldr	r3, [pc, #544]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f003 030c 	and.w	r3, r3, #12
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d00c      	beq.n	800b80c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7f2:	4b85      	ldr	r3, [pc, #532]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b7fa:	2b08      	cmp	r3, #8
 800b7fc:	d112      	bne.n	800b824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b7fe:	4b82      	ldr	r3, [pc, #520]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b80a:	d10b      	bne.n	800b824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b80c:	4b7e      	ldr	r3, [pc, #504]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d05b      	beq.n	800b8d0 <HAL_RCC_OscConfig+0x108>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d157      	bne.n	800b8d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e242      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82c:	d106      	bne.n	800b83c <HAL_RCC_OscConfig+0x74>
 800b82e:	4b76      	ldr	r3, [pc, #472]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a75      	ldr	r2, [pc, #468]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	e01d      	b.n	800b878 <HAL_RCC_OscConfig+0xb0>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b844:	d10c      	bne.n	800b860 <HAL_RCC_OscConfig+0x98>
 800b846:	4b70      	ldr	r3, [pc, #448]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a6f      	ldr	r2, [pc, #444]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b84c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	4b6d      	ldr	r3, [pc, #436]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a6c      	ldr	r2, [pc, #432]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	e00b      	b.n	800b878 <HAL_RCC_OscConfig+0xb0>
 800b860:	4b69      	ldr	r3, [pc, #420]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a68      	ldr	r2, [pc, #416]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	4b66      	ldr	r3, [pc, #408]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a65      	ldr	r2, [pc, #404]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d013      	beq.n	800b8a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b880:	f7fd fb00 	bl	8008e84 <HAL_GetTick>
 800b884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b886:	e008      	b.n	800b89a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b888:	f7fd fafc 	bl	8008e84 <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b64      	cmp	r3, #100	; 0x64
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e207      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b89a:	4b5b      	ldr	r3, [pc, #364]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0f0      	beq.n	800b888 <HAL_RCC_OscConfig+0xc0>
 800b8a6:	e014      	b.n	800b8d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8a8:	f7fd faec 	bl	8008e84 <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8ae:	e008      	b.n	800b8c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b8b0:	f7fd fae8 	bl	8008e84 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b64      	cmp	r3, #100	; 0x64
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e1f3      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b8c2:	4b51      	ldr	r3, [pc, #324]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f0      	bne.n	800b8b0 <HAL_RCC_OscConfig+0xe8>
 800b8ce:	e000      	b.n	800b8d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0302 	and.w	r3, r3, #2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d063      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8de:	4b4a      	ldr	r3, [pc, #296]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f003 030c 	and.w	r3, r3, #12
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00b      	beq.n	800b902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b8ea:	4b47      	ldr	r3, [pc, #284]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d11c      	bne.n	800b930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b8f6:	4b44      	ldr	r3, [pc, #272]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d116      	bne.n	800b930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b902:	4b41      	ldr	r3, [pc, #260]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <HAL_RCC_OscConfig+0x152>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d001      	beq.n	800b91a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e1c7      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b91a:	4b3b      	ldr	r3, [pc, #236]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	4937      	ldr	r1, [pc, #220]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b92a:	4313      	orrs	r3, r2
 800b92c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b92e:	e03a      	b.n	800b9a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d020      	beq.n	800b97a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b938:	4b34      	ldr	r3, [pc, #208]	; (800ba0c <HAL_RCC_OscConfig+0x244>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b93e:	f7fd faa1 	bl	8008e84 <HAL_GetTick>
 800b942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b944:	e008      	b.n	800b958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b946:	f7fd fa9d 	bl	8008e84 <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e1a8      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b958:	4b2b      	ldr	r3, [pc, #172]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0f0      	beq.n	800b946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b964:	4b28      	ldr	r3, [pc, #160]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	4925      	ldr	r1, [pc, #148]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b974:	4313      	orrs	r3, r2
 800b976:	600b      	str	r3, [r1, #0]
 800b978:	e015      	b.n	800b9a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b97a:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <HAL_RCC_OscConfig+0x244>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b980:	f7fd fa80 	bl	8008e84 <HAL_GetTick>
 800b984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b986:	e008      	b.n	800b99a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b988:	f7fd fa7c 	bl	8008e84 <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d901      	bls.n	800b99a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e187      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b99a:	4b1b      	ldr	r3, [pc, #108]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1f0      	bne.n	800b988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0308 	and.w	r3, r3, #8
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d036      	beq.n	800ba20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d016      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9ba:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <HAL_RCC_OscConfig+0x248>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c0:	f7fd fa60 	bl	8008e84 <HAL_GetTick>
 800b9c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9c6:	e008      	b.n	800b9da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9c8:	f7fd fa5c 	bl	8008e84 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d901      	bls.n	800b9da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e167      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9da:	4b0b      	ldr	r3, [pc, #44]	; (800ba08 <HAL_RCC_OscConfig+0x240>)
 800b9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9de:	f003 0302 	and.w	r3, r3, #2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0f0      	beq.n	800b9c8 <HAL_RCC_OscConfig+0x200>
 800b9e6:	e01b      	b.n	800ba20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9e8:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <HAL_RCC_OscConfig+0x248>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9ee:	f7fd fa49 	bl	8008e84 <HAL_GetTick>
 800b9f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9f4:	e00e      	b.n	800ba14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b9f6:	f7fd fa45 	bl	8008e84 <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d907      	bls.n	800ba14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e150      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
 800ba08:	40023800 	.word	0x40023800
 800ba0c:	42470000 	.word	0x42470000
 800ba10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba14:	4b88      	ldr	r3, [pc, #544]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800ba16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1ea      	bne.n	800b9f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 8097 	beq.w	800bb5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba32:	4b81      	ldr	r3, [pc, #516]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10f      	bne.n	800ba5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60bb      	str	r3, [r7, #8]
 800ba42:	4b7d      	ldr	r3, [pc, #500]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	4a7c      	ldr	r2, [pc, #496]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800ba48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba4e:	4b7a      	ldr	r3, [pc, #488]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba56:	60bb      	str	r3, [r7, #8]
 800ba58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba5e:	4b77      	ldr	r3, [pc, #476]	; (800bc3c <HAL_RCC_OscConfig+0x474>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d118      	bne.n	800ba9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba6a:	4b74      	ldr	r3, [pc, #464]	; (800bc3c <HAL_RCC_OscConfig+0x474>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a73      	ldr	r2, [pc, #460]	; (800bc3c <HAL_RCC_OscConfig+0x474>)
 800ba70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba76:	f7fd fa05 	bl	8008e84 <HAL_GetTick>
 800ba7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba7c:	e008      	b.n	800ba90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba7e:	f7fd fa01 	bl	8008e84 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d901      	bls.n	800ba90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e10c      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba90:	4b6a      	ldr	r3, [pc, #424]	; (800bc3c <HAL_RCC_OscConfig+0x474>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0f0      	beq.n	800ba7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d106      	bne.n	800bab2 <HAL_RCC_OscConfig+0x2ea>
 800baa4:	4b64      	ldr	r3, [pc, #400]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800baa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa8:	4a63      	ldr	r2, [pc, #396]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800baaa:	f043 0301 	orr.w	r3, r3, #1
 800baae:	6713      	str	r3, [r2, #112]	; 0x70
 800bab0:	e01c      	b.n	800baec <HAL_RCC_OscConfig+0x324>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	2b05      	cmp	r3, #5
 800bab8:	d10c      	bne.n	800bad4 <HAL_RCC_OscConfig+0x30c>
 800baba:	4b5f      	ldr	r3, [pc, #380]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800babc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800babe:	4a5e      	ldr	r2, [pc, #376]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bac0:	f043 0304 	orr.w	r3, r3, #4
 800bac4:	6713      	str	r3, [r2, #112]	; 0x70
 800bac6:	4b5c      	ldr	r3, [pc, #368]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	4a5b      	ldr	r2, [pc, #364]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bacc:	f043 0301 	orr.w	r3, r3, #1
 800bad0:	6713      	str	r3, [r2, #112]	; 0x70
 800bad2:	e00b      	b.n	800baec <HAL_RCC_OscConfig+0x324>
 800bad4:	4b58      	ldr	r3, [pc, #352]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad8:	4a57      	ldr	r2, [pc, #348]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bada:	f023 0301 	bic.w	r3, r3, #1
 800bade:	6713      	str	r3, [r2, #112]	; 0x70
 800bae0:	4b55      	ldr	r3, [pc, #340]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae4:	4a54      	ldr	r2, [pc, #336]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bae6:	f023 0304 	bic.w	r3, r3, #4
 800baea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d015      	beq.n	800bb20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baf4:	f7fd f9c6 	bl	8008e84 <HAL_GetTick>
 800baf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bafa:	e00a      	b.n	800bb12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bafc:	f7fd f9c2 	bl	8008e84 <HAL_GetTick>
 800bb00:	4602      	mov	r2, r0
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d901      	bls.n	800bb12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e0cb      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb12:	4b49      	ldr	r3, [pc, #292]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	f003 0302 	and.w	r3, r3, #2
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0ee      	beq.n	800bafc <HAL_RCC_OscConfig+0x334>
 800bb1e:	e014      	b.n	800bb4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb20:	f7fd f9b0 	bl	8008e84 <HAL_GetTick>
 800bb24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb26:	e00a      	b.n	800bb3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb28:	f7fd f9ac 	bl	8008e84 <HAL_GetTick>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d901      	bls.n	800bb3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e0b5      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb3e:	4b3e      	ldr	r3, [pc, #248]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb42:	f003 0302 	and.w	r3, r3, #2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1ee      	bne.n	800bb28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d105      	bne.n	800bb5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb50:	4b39      	ldr	r3, [pc, #228]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	4a38      	ldr	r2, [pc, #224]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bb56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 80a1 	beq.w	800bca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bb66:	4b34      	ldr	r3, [pc, #208]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f003 030c 	and.w	r3, r3, #12
 800bb6e:	2b08      	cmp	r3, #8
 800bb70:	d05c      	beq.n	800bc2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d141      	bne.n	800bbfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb7a:	4b31      	ldr	r3, [pc, #196]	; (800bc40 <HAL_RCC_OscConfig+0x478>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb80:	f7fd f980 	bl	8008e84 <HAL_GetTick>
 800bb84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb86:	e008      	b.n	800bb9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb88:	f7fd f97c 	bl	8008e84 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d901      	bls.n	800bb9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e087      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb9a:	4b27      	ldr	r3, [pc, #156]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1f0      	bne.n	800bb88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	69da      	ldr	r2, [r3, #28]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	431a      	orrs	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	019b      	lsls	r3, r3, #6
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbc:	085b      	lsrs	r3, r3, #1
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	041b      	lsls	r3, r3, #16
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc8:	061b      	lsls	r3, r3, #24
 800bbca:	491b      	ldr	r1, [pc, #108]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbd0:	4b1b      	ldr	r3, [pc, #108]	; (800bc40 <HAL_RCC_OscConfig+0x478>)
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbd6:	f7fd f955 	bl	8008e84 <HAL_GetTick>
 800bbda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbdc:	e008      	b.n	800bbf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbde:	f7fd f951 	bl	8008e84 <HAL_GetTick>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d901      	bls.n	800bbf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e05c      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbf0:	4b11      	ldr	r3, [pc, #68]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0f0      	beq.n	800bbde <HAL_RCC_OscConfig+0x416>
 800bbfc:	e054      	b.n	800bca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbfe:	4b10      	ldr	r3, [pc, #64]	; (800bc40 <HAL_RCC_OscConfig+0x478>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc04:	f7fd f93e 	bl	8008e84 <HAL_GetTick>
 800bc08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc0a:	e008      	b.n	800bc1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc0c:	f7fd f93a 	bl	8008e84 <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d901      	bls.n	800bc1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e045      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc1e:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <HAL_RCC_OscConfig+0x470>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1f0      	bne.n	800bc0c <HAL_RCC_OscConfig+0x444>
 800bc2a:	e03d      	b.n	800bca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d107      	bne.n	800bc44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e038      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
 800bc38:	40023800 	.word	0x40023800
 800bc3c:	40007000 	.word	0x40007000
 800bc40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bc44:	4b1b      	ldr	r3, [pc, #108]	; (800bcb4 <HAL_RCC_OscConfig+0x4ec>)
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d028      	beq.n	800bca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d121      	bne.n	800bca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d11a      	bne.n	800bca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bc74:	4013      	ands	r3, r2
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d111      	bne.n	800bca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d107      	bne.n	800bca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d001      	beq.n	800bca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e000      	b.n	800bcaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	40023800 	.word	0x40023800

0800bcb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e0cc      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bccc:	4b68      	ldr	r3, [pc, #416]	; (800be70 <HAL_RCC_ClockConfig+0x1b8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0307 	and.w	r3, r3, #7
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d90c      	bls.n	800bcf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcda:	4b65      	ldr	r3, [pc, #404]	; (800be70 <HAL_RCC_ClockConfig+0x1b8>)
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bce2:	4b63      	ldr	r3, [pc, #396]	; (800be70 <HAL_RCC_ClockConfig+0x1b8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d001      	beq.n	800bcf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e0b8      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 0302 	and.w	r3, r3, #2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d020      	beq.n	800bd42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 0304 	and.w	r3, r3, #4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd0c:	4b59      	ldr	r3, [pc, #356]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	4a58      	ldr	r2, [pc, #352]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bd16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0308 	and.w	r3, r3, #8
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd24:	4b53      	ldr	r3, [pc, #332]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	4a52      	ldr	r2, [pc, #328]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd30:	4b50      	ldr	r3, [pc, #320]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	494d      	ldr	r1, [pc, #308]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d044      	beq.n	800bdd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d107      	bne.n	800bd66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd56:	4b47      	ldr	r3, [pc, #284]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d119      	bne.n	800bd96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e07f      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d003      	beq.n	800bd76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d107      	bne.n	800bd86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd76:	4b3f      	ldr	r3, [pc, #252]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d109      	bne.n	800bd96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e06f      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd86:	4b3b      	ldr	r3, [pc, #236]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e067      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd96:	4b37      	ldr	r3, [pc, #220]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f023 0203 	bic.w	r2, r3, #3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	4934      	ldr	r1, [pc, #208]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bda8:	f7fd f86c 	bl	8008e84 <HAL_GetTick>
 800bdac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdae:	e00a      	b.n	800bdc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdb0:	f7fd f868 	bl	8008e84 <HAL_GetTick>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d901      	bls.n	800bdc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e04f      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdc6:	4b2b      	ldr	r3, [pc, #172]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f003 020c 	and.w	r2, r3, #12
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d1eb      	bne.n	800bdb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bdd8:	4b25      	ldr	r3, [pc, #148]	; (800be70 <HAL_RCC_ClockConfig+0x1b8>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 0307 	and.w	r3, r3, #7
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d20c      	bcs.n	800be00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bde6:	4b22      	ldr	r3, [pc, #136]	; (800be70 <HAL_RCC_ClockConfig+0x1b8>)
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	b2d2      	uxtb	r2, r2
 800bdec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdee:	4b20      	ldr	r3, [pc, #128]	; (800be70 <HAL_RCC_ClockConfig+0x1b8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 0307 	and.w	r3, r3, #7
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d001      	beq.n	800be00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e032      	b.n	800be66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f003 0304 	and.w	r3, r3, #4
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d008      	beq.n	800be1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be0c:	4b19      	ldr	r3, [pc, #100]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	4916      	ldr	r1, [pc, #88]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0308 	and.w	r3, r3, #8
 800be26:	2b00      	cmp	r3, #0
 800be28:	d009      	beq.n	800be3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be2a:	4b12      	ldr	r3, [pc, #72]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	490e      	ldr	r1, [pc, #56]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800be3a:	4313      	orrs	r3, r2
 800be3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be3e:	f000 f821 	bl	800be84 <HAL_RCC_GetSysClockFreq>
 800be42:	4602      	mov	r2, r0
 800be44:	4b0b      	ldr	r3, [pc, #44]	; (800be74 <HAL_RCC_ClockConfig+0x1bc>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	091b      	lsrs	r3, r3, #4
 800be4a:	f003 030f 	and.w	r3, r3, #15
 800be4e:	490a      	ldr	r1, [pc, #40]	; (800be78 <HAL_RCC_ClockConfig+0x1c0>)
 800be50:	5ccb      	ldrb	r3, [r1, r3]
 800be52:	fa22 f303 	lsr.w	r3, r2, r3
 800be56:	4a09      	ldr	r2, [pc, #36]	; (800be7c <HAL_RCC_ClockConfig+0x1c4>)
 800be58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be5a:	4b09      	ldr	r3, [pc, #36]	; (800be80 <HAL_RCC_ClockConfig+0x1c8>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fc ffcc 	bl	8008dfc <HAL_InitTick>

  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	40023c00 	.word	0x40023c00
 800be74:	40023800 	.word	0x40023800
 800be78:	080112d0 	.word	0x080112d0
 800be7c:	2000028c 	.word	0x2000028c
 800be80:	20000324 	.word	0x20000324

0800be84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be88:	b094      	sub	sp, #80	; 0x50
 800be8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	647b      	str	r3, [r7, #68]	; 0x44
 800be90:	2300      	movs	r3, #0
 800be92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be94:	2300      	movs	r3, #0
 800be96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be9c:	4b79      	ldr	r3, [pc, #484]	; (800c084 <HAL_RCC_GetSysClockFreq+0x200>)
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f003 030c 	and.w	r3, r3, #12
 800bea4:	2b08      	cmp	r3, #8
 800bea6:	d00d      	beq.n	800bec4 <HAL_RCC_GetSysClockFreq+0x40>
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	f200 80e1 	bhi.w	800c070 <HAL_RCC_GetSysClockFreq+0x1ec>
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <HAL_RCC_GetSysClockFreq+0x34>
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d003      	beq.n	800bebe <HAL_RCC_GetSysClockFreq+0x3a>
 800beb6:	e0db      	b.n	800c070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800beb8:	4b73      	ldr	r3, [pc, #460]	; (800c088 <HAL_RCC_GetSysClockFreq+0x204>)
 800beba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800bebc:	e0db      	b.n	800c076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bebe:	4b72      	ldr	r3, [pc, #456]	; (800c088 <HAL_RCC_GetSysClockFreq+0x204>)
 800bec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bec2:	e0d8      	b.n	800c076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bec4:	4b6f      	ldr	r3, [pc, #444]	; (800c084 <HAL_RCC_GetSysClockFreq+0x200>)
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800becc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bece:	4b6d      	ldr	r3, [pc, #436]	; (800c084 <HAL_RCC_GetSysClockFreq+0x200>)
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d063      	beq.n	800bfa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800beda:	4b6a      	ldr	r3, [pc, #424]	; (800c084 <HAL_RCC_GetSysClockFreq+0x200>)
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	099b      	lsrs	r3, r3, #6
 800bee0:	2200      	movs	r2, #0
 800bee2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bee4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beec:	633b      	str	r3, [r7, #48]	; 0x30
 800beee:	2300      	movs	r3, #0
 800bef0:	637b      	str	r3, [r7, #52]	; 0x34
 800bef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bef6:	4622      	mov	r2, r4
 800bef8:	462b      	mov	r3, r5
 800befa:	f04f 0000 	mov.w	r0, #0
 800befe:	f04f 0100 	mov.w	r1, #0
 800bf02:	0159      	lsls	r1, r3, #5
 800bf04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf08:	0150      	lsls	r0, r2, #5
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4621      	mov	r1, r4
 800bf10:	1a51      	subs	r1, r2, r1
 800bf12:	6139      	str	r1, [r7, #16]
 800bf14:	4629      	mov	r1, r5
 800bf16:	eb63 0301 	sbc.w	r3, r3, r1
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	f04f 0200 	mov.w	r2, #0
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf28:	4659      	mov	r1, fp
 800bf2a:	018b      	lsls	r3, r1, #6
 800bf2c:	4651      	mov	r1, sl
 800bf2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bf32:	4651      	mov	r1, sl
 800bf34:	018a      	lsls	r2, r1, #6
 800bf36:	4651      	mov	r1, sl
 800bf38:	ebb2 0801 	subs.w	r8, r2, r1
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	eb63 0901 	sbc.w	r9, r3, r1
 800bf42:	f04f 0200 	mov.w	r2, #0
 800bf46:	f04f 0300 	mov.w	r3, #0
 800bf4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf56:	4690      	mov	r8, r2
 800bf58:	4699      	mov	r9, r3
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	eb18 0303 	adds.w	r3, r8, r3
 800bf60:	60bb      	str	r3, [r7, #8]
 800bf62:	462b      	mov	r3, r5
 800bf64:	eb49 0303 	adc.w	r3, r9, r3
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	f04f 0200 	mov.w	r2, #0
 800bf6e:	f04f 0300 	mov.w	r3, #0
 800bf72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bf76:	4629      	mov	r1, r5
 800bf78:	028b      	lsls	r3, r1, #10
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf80:	4621      	mov	r1, r4
 800bf82:	028a      	lsls	r2, r1, #10
 800bf84:	4610      	mov	r0, r2
 800bf86:	4619      	mov	r1, r3
 800bf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf94:	f7f4 fe78 	bl	8000c88 <__aeabi_uldivmod>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfa0:	e058      	b.n	800c054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bfa2:	4b38      	ldr	r3, [pc, #224]	; (800c084 <HAL_RCC_GetSysClockFreq+0x200>)
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	099b      	lsrs	r3, r3, #6
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	4611      	mov	r1, r2
 800bfae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800bfb2:	623b      	str	r3, [r7, #32]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800bfbc:	4642      	mov	r2, r8
 800bfbe:	464b      	mov	r3, r9
 800bfc0:	f04f 0000 	mov.w	r0, #0
 800bfc4:	f04f 0100 	mov.w	r1, #0
 800bfc8:	0159      	lsls	r1, r3, #5
 800bfca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bfce:	0150      	lsls	r0, r2, #5
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4641      	mov	r1, r8
 800bfd6:	ebb2 0a01 	subs.w	sl, r2, r1
 800bfda:	4649      	mov	r1, r9
 800bfdc:	eb63 0b01 	sbc.w	fp, r3, r1
 800bfe0:	f04f 0200 	mov.w	r2, #0
 800bfe4:	f04f 0300 	mov.w	r3, #0
 800bfe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800bfec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800bff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800bff4:	ebb2 040a 	subs.w	r4, r2, sl
 800bff8:	eb63 050b 	sbc.w	r5, r3, fp
 800bffc:	f04f 0200 	mov.w	r2, #0
 800c000:	f04f 0300 	mov.w	r3, #0
 800c004:	00eb      	lsls	r3, r5, #3
 800c006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c00a:	00e2      	lsls	r2, r4, #3
 800c00c:	4614      	mov	r4, r2
 800c00e:	461d      	mov	r5, r3
 800c010:	4643      	mov	r3, r8
 800c012:	18e3      	adds	r3, r4, r3
 800c014:	603b      	str	r3, [r7, #0]
 800c016:	464b      	mov	r3, r9
 800c018:	eb45 0303 	adc.w	r3, r5, r3
 800c01c:	607b      	str	r3, [r7, #4]
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c02a:	4629      	mov	r1, r5
 800c02c:	028b      	lsls	r3, r1, #10
 800c02e:	4621      	mov	r1, r4
 800c030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c034:	4621      	mov	r1, r4
 800c036:	028a      	lsls	r2, r1, #10
 800c038:	4610      	mov	r0, r2
 800c03a:	4619      	mov	r1, r3
 800c03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c03e:	2200      	movs	r2, #0
 800c040:	61bb      	str	r3, [r7, #24]
 800c042:	61fa      	str	r2, [r7, #28]
 800c044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c048:	f7f4 fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4613      	mov	r3, r2
 800c052:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c054:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <HAL_RCC_GetSysClockFreq+0x200>)
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	0c1b      	lsrs	r3, r3, #16
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	3301      	adds	r3, #1
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c068:	fbb2 f3f3 	udiv	r3, r2, r3
 800c06c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c06e:	e002      	b.n	800c076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <HAL_RCC_GetSysClockFreq+0x204>)
 800c072:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c074:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3750      	adds	r7, #80	; 0x50
 800c07c:	46bd      	mov	sp, r7
 800c07e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c082:	bf00      	nop
 800c084:	40023800 	.word	0x40023800
 800c088:	00f42400 	.word	0x00f42400

0800c08c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c090:	4b03      	ldr	r3, [pc, #12]	; (800c0a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c092:	681b      	ldr	r3, [r3, #0]
}
 800c094:	4618      	mov	r0, r3
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	2000028c 	.word	0x2000028c

0800c0a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c0a8:	f7ff fff0 	bl	800c08c <HAL_RCC_GetHCLKFreq>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	0a9b      	lsrs	r3, r3, #10
 800c0b4:	f003 0307 	and.w	r3, r3, #7
 800c0b8:	4903      	ldr	r1, [pc, #12]	; (800c0c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0ba:	5ccb      	ldrb	r3, [r1, r3]
 800c0bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	40023800 	.word	0x40023800
 800c0c8:	080112e0 	.word	0x080112e0

0800c0cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c0d0:	f7ff ffdc 	bl	800c08c <HAL_RCC_GetHCLKFreq>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	0b5b      	lsrs	r3, r3, #13
 800c0dc:	f003 0307 	and.w	r3, r3, #7
 800c0e0:	4903      	ldr	r1, [pc, #12]	; (800c0f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0e2:	5ccb      	ldrb	r3, [r1, r3]
 800c0e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	40023800 	.word	0x40023800
 800c0f0:	080112e0 	.word	0x080112e0

0800c0f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e041      	b.n	800c18a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7f9 fc22 	bl	8005964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2202      	movs	r2, #2
 800c124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3304      	adds	r3, #4
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f000 fda4 	bl	800cc80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d001      	beq.n	800c1ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e04e      	b.n	800c24a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0201 	orr.w	r2, r2, #1
 800c1c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a23      	ldr	r2, [pc, #140]	; (800c258 <HAL_TIM_Base_Start_IT+0xc4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d022      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d6:	d01d      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a1f      	ldr	r2, [pc, #124]	; (800c25c <HAL_TIM_Base_Start_IT+0xc8>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d018      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a1e      	ldr	r2, [pc, #120]	; (800c260 <HAL_TIM_Base_Start_IT+0xcc>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d013      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a1c      	ldr	r2, [pc, #112]	; (800c264 <HAL_TIM_Base_Start_IT+0xd0>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d00e      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a1b      	ldr	r2, [pc, #108]	; (800c268 <HAL_TIM_Base_Start_IT+0xd4>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d009      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a19      	ldr	r2, [pc, #100]	; (800c26c <HAL_TIM_Base_Start_IT+0xd8>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d004      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x80>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a18      	ldr	r2, [pc, #96]	; (800c270 <HAL_TIM_Base_Start_IT+0xdc>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d111      	bne.n	800c238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b06      	cmp	r3, #6
 800c224:	d010      	beq.n	800c248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f042 0201 	orr.w	r2, r2, #1
 800c234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c236:	e007      	b.n	800c248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f042 0201 	orr.w	r2, r2, #1
 800c246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	40010000 	.word	0x40010000
 800c25c:	40000400 	.word	0x40000400
 800c260:	40000800 	.word	0x40000800
 800c264:	40000c00 	.word	0x40000c00
 800c268:	40010400 	.word	0x40010400
 800c26c:	40014000 	.word	0x40014000
 800c270:	40001800 	.word	0x40001800

0800c274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e041      	b.n	800c30a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d106      	bne.n	800c2a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7f9 fc3a 	bl	8005b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	f000 fce4 	bl	800cc80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d109      	bne.n	800c338 <HAL_TIM_PWM_Start+0x24>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
 800c336:	e022      	b.n	800c37e <HAL_TIM_PWM_Start+0x6a>
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b04      	cmp	r3, #4
 800c33c:	d109      	bne.n	800c352 <HAL_TIM_PWM_Start+0x3e>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b01      	cmp	r3, #1
 800c348:	bf14      	ite	ne
 800c34a:	2301      	movne	r3, #1
 800c34c:	2300      	moveq	r3, #0
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	e015      	b.n	800c37e <HAL_TIM_PWM_Start+0x6a>
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b08      	cmp	r3, #8
 800c356:	d109      	bne.n	800c36c <HAL_TIM_PWM_Start+0x58>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b01      	cmp	r3, #1
 800c362:	bf14      	ite	ne
 800c364:	2301      	movne	r3, #1
 800c366:	2300      	moveq	r3, #0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	e008      	b.n	800c37e <HAL_TIM_PWM_Start+0x6a>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b01      	cmp	r3, #1
 800c376:	bf14      	ite	ne
 800c378:	2301      	movne	r3, #1
 800c37a:	2300      	moveq	r3, #0
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	e07c      	b.n	800c480 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d104      	bne.n	800c396 <HAL_TIM_PWM_Start+0x82>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c394:	e013      	b.n	800c3be <HAL_TIM_PWM_Start+0xaa>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b04      	cmp	r3, #4
 800c39a:	d104      	bne.n	800c3a6 <HAL_TIM_PWM_Start+0x92>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3a4:	e00b      	b.n	800c3be <HAL_TIM_PWM_Start+0xaa>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b08      	cmp	r3, #8
 800c3aa:	d104      	bne.n	800c3b6 <HAL_TIM_PWM_Start+0xa2>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3b4:	e003      	b.n	800c3be <HAL_TIM_PWM_Start+0xaa>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 ff44 	bl	800d254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a2d      	ldr	r2, [pc, #180]	; (800c488 <HAL_TIM_PWM_Start+0x174>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d004      	beq.n	800c3e0 <HAL_TIM_PWM_Start+0xcc>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a2c      	ldr	r2, [pc, #176]	; (800c48c <HAL_TIM_PWM_Start+0x178>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d101      	bne.n	800c3e4 <HAL_TIM_PWM_Start+0xd0>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e000      	b.n	800c3e6 <HAL_TIM_PWM_Start+0xd2>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d007      	beq.n	800c3fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c3f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a22      	ldr	r2, [pc, #136]	; (800c488 <HAL_TIM_PWM_Start+0x174>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d022      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c40c:	d01d      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a1f      	ldr	r2, [pc, #124]	; (800c490 <HAL_TIM_PWM_Start+0x17c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d018      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a1d      	ldr	r2, [pc, #116]	; (800c494 <HAL_TIM_PWM_Start+0x180>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d013      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a1c      	ldr	r2, [pc, #112]	; (800c498 <HAL_TIM_PWM_Start+0x184>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00e      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a16      	ldr	r2, [pc, #88]	; (800c48c <HAL_TIM_PWM_Start+0x178>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d009      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a18      	ldr	r2, [pc, #96]	; (800c49c <HAL_TIM_PWM_Start+0x188>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d004      	beq.n	800c44a <HAL_TIM_PWM_Start+0x136>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a16      	ldr	r2, [pc, #88]	; (800c4a0 <HAL_TIM_PWM_Start+0x18c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d111      	bne.n	800c46e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f003 0307 	and.w	r3, r3, #7
 800c454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b06      	cmp	r3, #6
 800c45a:	d010      	beq.n	800c47e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f042 0201 	orr.w	r2, r2, #1
 800c46a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c46c:	e007      	b.n	800c47e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0201 	orr.w	r2, r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	40010000 	.word	0x40010000
 800c48c:	40010400 	.word	0x40010400
 800c490:	40000400 	.word	0x40000400
 800c494:	40000800 	.word	0x40000800
 800c498:	40000c00 	.word	0x40000c00
 800c49c:	40014000 	.word	0x40014000
 800c4a0:	40001800 	.word	0x40001800

0800c4a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e097      	b.n	800c5e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d106      	bne.n	800c4d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7f9 fa87 	bl	80059e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	6812      	ldr	r2, [r2, #0]
 800c4e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4e8:	f023 0307 	bic.w	r3, r3, #7
 800c4ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	f000 fbc1 	bl	800cc80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c526:	f023 0303 	bic.w	r3, r3, #3
 800c52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	689a      	ldr	r2, [r3, #8]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	4313      	orrs	r3, r2
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c544:	f023 030c 	bic.w	r3, r3, #12
 800c548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	4313      	orrs	r3, r2
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	4313      	orrs	r3, r2
 800c566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	011a      	lsls	r2, r3, #4
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	031b      	lsls	r3, r3, #12
 800c574:	4313      	orrs	r3, r2
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	4313      	orrs	r3, r2
 800c57a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c582:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c58a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	011b      	lsls	r3, r3, #4
 800c596:	4313      	orrs	r3, r2
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c600:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c608:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c610:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c618:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d110      	bne.n	800c642 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d102      	bne.n	800c62c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c626:	7b7b      	ldrb	r3, [r7, #13]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d001      	beq.n	800c630 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e069      	b.n	800c704 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c640:	e031      	b.n	800c6a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b04      	cmp	r3, #4
 800c646:	d110      	bne.n	800c66a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d102      	bne.n	800c654 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c64e:	7b3b      	ldrb	r3, [r7, #12]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d001      	beq.n	800c658 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	e055      	b.n	800c704 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2202      	movs	r2, #2
 800c664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c668:	e01d      	b.n	800c6a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d108      	bne.n	800c682 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d105      	bne.n	800c682 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c676:	7b7b      	ldrb	r3, [r7, #13]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d102      	bne.n	800c682 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c67c:	7b3b      	ldrb	r3, [r7, #12]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d001      	beq.n	800c686 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e03e      	b.n	800c704 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2202      	movs	r2, #2
 800c68a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2202      	movs	r2, #2
 800c692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2202      	movs	r2, #2
 800c69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <HAL_TIM_Encoder_Start+0xc4>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	d008      	beq.n	800c6c4 <HAL_TIM_Encoder_Start+0xd4>
 800c6b2:	e00f      	b.n	800c6d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 fdc9 	bl	800d254 <TIM_CCxChannelCmd>
      break;
 800c6c2:	e016      	b.n	800c6f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	2104      	movs	r1, #4
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fdc1 	bl	800d254 <TIM_CCxChannelCmd>
      break;
 800c6d2:	e00e      	b.n	800c6f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	2100      	movs	r1, #0
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 fdb9 	bl	800d254 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	2104      	movs	r1, #4
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fdb2 	bl	800d254 <TIM_CCxChannelCmd>
      break;
 800c6f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f042 0201 	orr.w	r2, r2, #1
 800c700:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	f003 0302 	and.w	r3, r3, #2
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d122      	bne.n	800c768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f003 0302 	and.w	r3, r3, #2
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d11b      	bne.n	800c768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f06f 0202 	mvn.w	r2, #2
 800c738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	f003 0303 	and.w	r3, r3, #3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d003      	beq.n	800c756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fa77 	bl	800cc42 <HAL_TIM_IC_CaptureCallback>
 800c754:	e005      	b.n	800c762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fa69 	bl	800cc2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fa7a 	bl	800cc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f003 0304 	and.w	r3, r3, #4
 800c772:	2b04      	cmp	r3, #4
 800c774:	d122      	bne.n	800c7bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	f003 0304 	and.w	r3, r3, #4
 800c780:	2b04      	cmp	r3, #4
 800c782:	d11b      	bne.n	800c7bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f06f 0204 	mvn.w	r2, #4
 800c78c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2202      	movs	r2, #2
 800c792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	699b      	ldr	r3, [r3, #24]
 800c79a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fa4d 	bl	800cc42 <HAL_TIM_IC_CaptureCallback>
 800c7a8:	e005      	b.n	800c7b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa3f 	bl	800cc2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fa50 	bl	800cc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	f003 0308 	and.w	r3, r3, #8
 800c7c6:	2b08      	cmp	r3, #8
 800c7c8:	d122      	bne.n	800c810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d11b      	bne.n	800c810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f06f 0208 	mvn.w	r2, #8
 800c7e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2204      	movs	r2, #4
 800c7e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	f003 0303 	and.w	r3, r3, #3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d003      	beq.n	800c7fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fa23 	bl	800cc42 <HAL_TIM_IC_CaptureCallback>
 800c7fc:	e005      	b.n	800c80a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fa15 	bl	800cc2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fa26 	bl	800cc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	f003 0310 	and.w	r3, r3, #16
 800c81a:	2b10      	cmp	r3, #16
 800c81c:	d122      	bne.n	800c864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f003 0310 	and.w	r3, r3, #16
 800c828:	2b10      	cmp	r3, #16
 800c82a:	d11b      	bne.n	800c864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f06f 0210 	mvn.w	r2, #16
 800c834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2208      	movs	r2, #8
 800c83a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f9f9 	bl	800cc42 <HAL_TIM_IC_CaptureCallback>
 800c850:	e005      	b.n	800c85e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f9eb 	bl	800cc2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f9fc 	bl	800cc56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d10e      	bne.n	800c890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d107      	bne.n	800c890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f06f 0201 	mvn.w	r2, #1
 800c888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f5 fcfc 	bl	8002288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89a:	2b80      	cmp	r3, #128	; 0x80
 800c89c:	d10e      	bne.n	800c8bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a8:	2b80      	cmp	r3, #128	; 0x80
 800c8aa:	d107      	bne.n	800c8bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fdca 	bl	800d450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c6:	2b40      	cmp	r3, #64	; 0x40
 800c8c8:	d10e      	bne.n	800c8e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d4:	2b40      	cmp	r3, #64	; 0x40
 800c8d6:	d107      	bne.n	800c8e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f9c1 	bl	800cc6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	f003 0320 	and.w	r3, r3, #32
 800c8f2:	2b20      	cmp	r3, #32
 800c8f4:	d10e      	bne.n	800c914 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	f003 0320 	and.w	r3, r3, #32
 800c900:	2b20      	cmp	r3, #32
 800c902:	d107      	bne.n	800c914 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f06f 0220 	mvn.w	r2, #32
 800c90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fd94 	bl	800d43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c914:	bf00      	nop
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c928:	2300      	movs	r3, #0
 800c92a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c932:	2b01      	cmp	r3, #1
 800c934:	d101      	bne.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c936:	2302      	movs	r3, #2
 800c938:	e0ae      	b.n	800ca98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b0c      	cmp	r3, #12
 800c946:	f200 809f 	bhi.w	800ca88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c94a:	a201      	add	r2, pc, #4	; (adr r2, 800c950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c950:	0800c985 	.word	0x0800c985
 800c954:	0800ca89 	.word	0x0800ca89
 800c958:	0800ca89 	.word	0x0800ca89
 800c95c:	0800ca89 	.word	0x0800ca89
 800c960:	0800c9c5 	.word	0x0800c9c5
 800c964:	0800ca89 	.word	0x0800ca89
 800c968:	0800ca89 	.word	0x0800ca89
 800c96c:	0800ca89 	.word	0x0800ca89
 800c970:	0800ca07 	.word	0x0800ca07
 800c974:	0800ca89 	.word	0x0800ca89
 800c978:	0800ca89 	.word	0x0800ca89
 800c97c:	0800ca89 	.word	0x0800ca89
 800c980:	0800ca47 	.word	0x0800ca47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 fa18 	bl	800cdc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f042 0208 	orr.w	r2, r2, #8
 800c99e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	699a      	ldr	r2, [r3, #24]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 0204 	bic.w	r2, r2, #4
 800c9ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6999      	ldr	r1, [r3, #24]
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	691a      	ldr	r2, [r3, #16]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	619a      	str	r2, [r3, #24]
      break;
 800c9c2:	e064      	b.n	800ca8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 fa68 	bl	800cea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	699a      	ldr	r2, [r3, #24]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	699a      	ldr	r2, [r3, #24]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6999      	ldr	r1, [r3, #24]
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	021a      	lsls	r2, r3, #8
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	430a      	orrs	r2, r1
 800ca02:	619a      	str	r2, [r3, #24]
      break;
 800ca04:	e043      	b.n	800ca8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 fabd 	bl	800cf8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69da      	ldr	r2, [r3, #28]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f042 0208 	orr.w	r2, r2, #8
 800ca20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	69da      	ldr	r2, [r3, #28]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f022 0204 	bic.w	r2, r2, #4
 800ca30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	69d9      	ldr	r1, [r3, #28]
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	691a      	ldr	r2, [r3, #16]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	430a      	orrs	r2, r1
 800ca42:	61da      	str	r2, [r3, #28]
      break;
 800ca44:	e023      	b.n	800ca8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68b9      	ldr	r1, [r7, #8]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 fb11 	bl	800d074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	69da      	ldr	r2, [r3, #28]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	69da      	ldr	r2, [r3, #28]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	69d9      	ldr	r1, [r3, #28]
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	021a      	lsls	r2, r3, #8
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	430a      	orrs	r2, r1
 800ca84:	61da      	str	r2, [r3, #28]
      break;
 800ca86:	e002      	b.n	800ca8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d101      	bne.n	800cabc <HAL_TIM_ConfigClockSource+0x1c>
 800cab8:	2302      	movs	r3, #2
 800caba:	e0b4      	b.n	800cc26 <HAL_TIM_ConfigClockSource+0x186>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2202      	movs	r2, #2
 800cac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caf4:	d03e      	beq.n	800cb74 <HAL_TIM_ConfigClockSource+0xd4>
 800caf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cafa:	f200 8087 	bhi.w	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb02:	f000 8086 	beq.w	800cc12 <HAL_TIM_ConfigClockSource+0x172>
 800cb06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb0a:	d87f      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb0c:	2b70      	cmp	r3, #112	; 0x70
 800cb0e:	d01a      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0xa6>
 800cb10:	2b70      	cmp	r3, #112	; 0x70
 800cb12:	d87b      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb14:	2b60      	cmp	r3, #96	; 0x60
 800cb16:	d050      	beq.n	800cbba <HAL_TIM_ConfigClockSource+0x11a>
 800cb18:	2b60      	cmp	r3, #96	; 0x60
 800cb1a:	d877      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb1c:	2b50      	cmp	r3, #80	; 0x50
 800cb1e:	d03c      	beq.n	800cb9a <HAL_TIM_ConfigClockSource+0xfa>
 800cb20:	2b50      	cmp	r3, #80	; 0x50
 800cb22:	d873      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb24:	2b40      	cmp	r3, #64	; 0x40
 800cb26:	d058      	beq.n	800cbda <HAL_TIM_ConfigClockSource+0x13a>
 800cb28:	2b40      	cmp	r3, #64	; 0x40
 800cb2a:	d86f      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb2c:	2b30      	cmp	r3, #48	; 0x30
 800cb2e:	d064      	beq.n	800cbfa <HAL_TIM_ConfigClockSource+0x15a>
 800cb30:	2b30      	cmp	r3, #48	; 0x30
 800cb32:	d86b      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb34:	2b20      	cmp	r3, #32
 800cb36:	d060      	beq.n	800cbfa <HAL_TIM_ConfigClockSource+0x15a>
 800cb38:	2b20      	cmp	r3, #32
 800cb3a:	d867      	bhi.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d05c      	beq.n	800cbfa <HAL_TIM_ConfigClockSource+0x15a>
 800cb40:	2b10      	cmp	r3, #16
 800cb42:	d05a      	beq.n	800cbfa <HAL_TIM_ConfigClockSource+0x15a>
 800cb44:	e062      	b.n	800cc0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6818      	ldr	r0, [r3, #0]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	6899      	ldr	r1, [r3, #8]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	f000 fb5d 	bl	800d214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cb68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	609a      	str	r2, [r3, #8]
      break;
 800cb72:	e04f      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6818      	ldr	r0, [r3, #0]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	6899      	ldr	r1, [r3, #8]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	f000 fb46 	bl	800d214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	689a      	ldr	r2, [r3, #8]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb96:	609a      	str	r2, [r3, #8]
      break;
 800cb98:	e03c      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	6859      	ldr	r1, [r3, #4]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	461a      	mov	r2, r3
 800cba8:	f000 faba 	bl	800d120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2150      	movs	r1, #80	; 0x50
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fb13 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800cbb8:	e02c      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6818      	ldr	r0, [r3, #0]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	6859      	ldr	r1, [r3, #4]
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f000 fad9 	bl	800d17e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2160      	movs	r1, #96	; 0x60
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fb03 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800cbd8:	e01c      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	6859      	ldr	r1, [r3, #4]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	f000 fa9a 	bl	800d120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2140      	movs	r1, #64	; 0x40
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 faf3 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800cbf8:	e00c      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f000 faea 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800cc0a:	e003      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc10:	e000      	b.n	800cc14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cc12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b083      	sub	sp, #12
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc4a:	bf00      	nop
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b083      	sub	sp, #12
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc5e:	bf00      	nop
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc72:	bf00      	nop
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
	...

0800cc80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a40      	ldr	r2, [pc, #256]	; (800cd94 <TIM_Base_SetConfig+0x114>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d013      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9e:	d00f      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a3d      	ldr	r2, [pc, #244]	; (800cd98 <TIM_Base_SetConfig+0x118>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d00b      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a3c      	ldr	r2, [pc, #240]	; (800cd9c <TIM_Base_SetConfig+0x11c>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d007      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a3b      	ldr	r2, [pc, #236]	; (800cda0 <TIM_Base_SetConfig+0x120>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <TIM_Base_SetConfig+0x40>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a3a      	ldr	r2, [pc, #232]	; (800cda4 <TIM_Base_SetConfig+0x124>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d108      	bne.n	800ccd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a2f      	ldr	r2, [pc, #188]	; (800cd94 <TIM_Base_SetConfig+0x114>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d02b      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce0:	d027      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a2c      	ldr	r2, [pc, #176]	; (800cd98 <TIM_Base_SetConfig+0x118>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d023      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a2b      	ldr	r2, [pc, #172]	; (800cd9c <TIM_Base_SetConfig+0x11c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d01f      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a2a      	ldr	r2, [pc, #168]	; (800cda0 <TIM_Base_SetConfig+0x120>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d01b      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a29      	ldr	r2, [pc, #164]	; (800cda4 <TIM_Base_SetConfig+0x124>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d017      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a28      	ldr	r2, [pc, #160]	; (800cda8 <TIM_Base_SetConfig+0x128>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d013      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a27      	ldr	r2, [pc, #156]	; (800cdac <TIM_Base_SetConfig+0x12c>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d00f      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a26      	ldr	r2, [pc, #152]	; (800cdb0 <TIM_Base_SetConfig+0x130>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00b      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a25      	ldr	r2, [pc, #148]	; (800cdb4 <TIM_Base_SetConfig+0x134>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d007      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a24      	ldr	r2, [pc, #144]	; (800cdb8 <TIM_Base_SetConfig+0x138>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d003      	beq.n	800cd32 <TIM_Base_SetConfig+0xb2>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a23      	ldr	r2, [pc, #140]	; (800cdbc <TIM_Base_SetConfig+0x13c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d108      	bne.n	800cd44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	689a      	ldr	r2, [r3, #8]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a0a      	ldr	r2, [pc, #40]	; (800cd94 <TIM_Base_SetConfig+0x114>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d003      	beq.n	800cd78 <TIM_Base_SetConfig+0xf8>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a0c      	ldr	r2, [pc, #48]	; (800cda4 <TIM_Base_SetConfig+0x124>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d103      	bne.n	800cd80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	691a      	ldr	r2, [r3, #16]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	615a      	str	r2, [r3, #20]
}
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	40010000 	.word	0x40010000
 800cd98:	40000400 	.word	0x40000400
 800cd9c:	40000800 	.word	0x40000800
 800cda0:	40000c00 	.word	0x40000c00
 800cda4:	40010400 	.word	0x40010400
 800cda8:	40014000 	.word	0x40014000
 800cdac:	40014400 	.word	0x40014400
 800cdb0:	40014800 	.word	0x40014800
 800cdb4:	40001800 	.word	0x40001800
 800cdb8:	40001c00 	.word	0x40001c00
 800cdbc:	40002000 	.word	0x40002000

0800cdc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	f023 0201 	bic.w	r2, r3, #1
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0303 	bic.w	r3, r3, #3
 800cdf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f023 0302 	bic.w	r3, r3, #2
 800ce08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a20      	ldr	r2, [pc, #128]	; (800ce98 <TIM_OC1_SetConfig+0xd8>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d003      	beq.n	800ce24 <TIM_OC1_SetConfig+0x64>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a1f      	ldr	r2, [pc, #124]	; (800ce9c <TIM_OC1_SetConfig+0xdc>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d10c      	bne.n	800ce3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	f023 0308 	bic.w	r3, r3, #8
 800ce2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f023 0304 	bic.w	r3, r3, #4
 800ce3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a15      	ldr	r2, [pc, #84]	; (800ce98 <TIM_OC1_SetConfig+0xd8>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d003      	beq.n	800ce4e <TIM_OC1_SetConfig+0x8e>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a14      	ldr	r2, [pc, #80]	; (800ce9c <TIM_OC1_SetConfig+0xdc>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d111      	bne.n	800ce72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	621a      	str	r2, [r3, #32]
}
 800ce8c:	bf00      	nop
 800ce8e:	371c      	adds	r7, #28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	40010000 	.word	0x40010000
 800ce9c:	40010400 	.word	0x40010400

0800cea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	f023 0210 	bic.w	r2, r3, #16
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a1b      	ldr	r3, [r3, #32]
 800ceba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	021b      	lsls	r3, r3, #8
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	f023 0320 	bic.w	r3, r3, #32
 800ceea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	011b      	lsls	r3, r3, #4
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a22      	ldr	r2, [pc, #136]	; (800cf84 <TIM_OC2_SetConfig+0xe4>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d003      	beq.n	800cf08 <TIM_OC2_SetConfig+0x68>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a21      	ldr	r2, [pc, #132]	; (800cf88 <TIM_OC2_SetConfig+0xe8>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d10d      	bne.n	800cf24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	011b      	lsls	r3, r3, #4
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a17      	ldr	r2, [pc, #92]	; (800cf84 <TIM_OC2_SetConfig+0xe4>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d003      	beq.n	800cf34 <TIM_OC2_SetConfig+0x94>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a16      	ldr	r2, [pc, #88]	; (800cf88 <TIM_OC2_SetConfig+0xe8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d113      	bne.n	800cf5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	693a      	ldr	r2, [r7, #16]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	693a      	ldr	r2, [r7, #16]
 800cf60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	621a      	str	r2, [r3, #32]
}
 800cf76:	bf00      	nop
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	40010000 	.word	0x40010000
 800cf88:	40010400 	.word	0x40010400

0800cf8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	69db      	ldr	r3, [r3, #28]
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f023 0303 	bic.w	r3, r3, #3
 800cfc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	021b      	lsls	r3, r3, #8
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a21      	ldr	r2, [pc, #132]	; (800d06c <TIM_OC3_SetConfig+0xe0>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d003      	beq.n	800cff2 <TIM_OC3_SetConfig+0x66>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a20      	ldr	r2, [pc, #128]	; (800d070 <TIM_OC3_SetConfig+0xe4>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d10d      	bne.n	800d00e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	4313      	orrs	r3, r2
 800d004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d00c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a16      	ldr	r2, [pc, #88]	; (800d06c <TIM_OC3_SetConfig+0xe0>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d003      	beq.n	800d01e <TIM_OC3_SetConfig+0x92>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a15      	ldr	r2, [pc, #84]	; (800d070 <TIM_OC3_SetConfig+0xe4>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d113      	bne.n	800d046 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d02c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	011b      	lsls	r3, r3, #4
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	4313      	orrs	r3, r2
 800d038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	011b      	lsls	r3, r3, #4
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	4313      	orrs	r3, r2
 800d044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	621a      	str	r2, [r3, #32]
}
 800d060:	bf00      	nop
 800d062:	371c      	adds	r7, #28
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	40010000 	.word	0x40010000
 800d070:	40010400 	.word	0x40010400

0800d074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	021b      	lsls	r3, r3, #8
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	031b      	lsls	r3, r3, #12
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a12      	ldr	r2, [pc, #72]	; (800d118 <TIM_OC4_SetConfig+0xa4>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d003      	beq.n	800d0dc <TIM_OC4_SetConfig+0x68>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a11      	ldr	r2, [pc, #68]	; (800d11c <TIM_OC4_SetConfig+0xa8>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d109      	bne.n	800d0f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	695b      	ldr	r3, [r3, #20]
 800d0e8:	019b      	lsls	r3, r3, #6
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	693a      	ldr	r2, [r7, #16]
 800d108:	621a      	str	r2, [r3, #32]
}
 800d10a:	bf00      	nop
 800d10c:	371c      	adds	r7, #28
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	40010000 	.word	0x40010000
 800d11c:	40010400 	.word	0x40010400

0800d120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6a1b      	ldr	r3, [r3, #32]
 800d130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f023 0201 	bic.w	r2, r3, #1
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d14a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	011b      	lsls	r3, r3, #4
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	4313      	orrs	r3, r2
 800d154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f023 030a 	bic.w	r3, r3, #10
 800d15c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	4313      	orrs	r3, r2
 800d164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	621a      	str	r2, [r3, #32]
}
 800d172:	bf00      	nop
 800d174:	371c      	adds	r7, #28
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d17e:	b480      	push	{r7}
 800d180:	b087      	sub	sp, #28
 800d182:	af00      	add	r7, sp, #0
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	f023 0210 	bic.w	r2, r3, #16
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6a1b      	ldr	r3, [r3, #32]
 800d1a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	031b      	lsls	r3, r3, #12
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d1ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	011b      	lsls	r3, r3, #4
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	621a      	str	r2, [r3, #32]
}
 800d1d2:	bf00      	nop
 800d1d4:	371c      	adds	r7, #28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1de:	b480      	push	{r7}
 800d1e0:	b085      	sub	sp, #20
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	f043 0307 	orr.w	r3, r3, #7
 800d200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	609a      	str	r2, [r3, #8]
}
 800d208:	bf00      	nop
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d214:	b480      	push	{r7}
 800d216:	b087      	sub	sp, #28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d22e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	021a      	lsls	r2, r3, #8
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	431a      	orrs	r2, r3
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4313      	orrs	r3, r2
 800d240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	609a      	str	r2, [r3, #8]
}
 800d248:	bf00      	nop
 800d24a:	371c      	adds	r7, #28
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d254:	b480      	push	{r7}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f003 031f 	and.w	r3, r3, #31
 800d266:	2201      	movs	r2, #1
 800d268:	fa02 f303 	lsl.w	r3, r2, r3
 800d26c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6a1a      	ldr	r2, [r3, #32]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	43db      	mvns	r3, r3
 800d276:	401a      	ands	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6a1a      	ldr	r2, [r3, #32]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f003 031f 	and.w	r3, r3, #31
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	fa01 f303 	lsl.w	r3, r1, r3
 800d28c:	431a      	orrs	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	621a      	str	r2, [r3, #32]
}
 800d292:	bf00      	nop
 800d294:	371c      	adds	r7, #28
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
	...

0800d2a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d101      	bne.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	e05a      	b.n	800d36e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a21      	ldr	r2, [pc, #132]	; (800d37c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d022      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d304:	d01d      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a1d      	ldr	r2, [pc, #116]	; (800d380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d018      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a1b      	ldr	r2, [pc, #108]	; (800d384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d013      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a1a      	ldr	r2, [pc, #104]	; (800d388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d00e      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a18      	ldr	r2, [pc, #96]	; (800d38c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d009      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a17      	ldr	r2, [pc, #92]	; (800d390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d004      	beq.n	800d342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a15      	ldr	r2, [pc, #84]	; (800d394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d10c      	bne.n	800d35c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	4313      	orrs	r3, r2
 800d352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	40010000 	.word	0x40010000
 800d380:	40000400 	.word	0x40000400
 800d384:	40000800 	.word	0x40000800
 800d388:	40000c00 	.word	0x40000c00
 800d38c:	40010400 	.word	0x40010400
 800d390:	40014000 	.word	0x40014000
 800d394:	40001800 	.word	0x40001800

0800d398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d101      	bne.n	800d3b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	e03d      	b.n	800d430 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	695b      	ldr	r3, [r3, #20]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	69db      	ldr	r3, [r3, #28]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d472:	2301      	movs	r3, #1
 800d474:	e03f      	b.n	800d4f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7fb fba8 	bl	8008be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2224      	movs	r2, #36	; 0x24
 800d494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68da      	ldr	r2, [r3, #12]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d4a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f829 	bl	800d500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	691a      	ldr	r2, [r3, #16]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d4bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	695a      	ldr	r2, [r3, #20]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d4cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d4dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2220      	movs	r2, #32
 800d4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2220      	movs	r2, #32
 800d4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3708      	adds	r7, #8
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
	...

0800d500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d504:	b0c0      	sub	sp, #256	; 0x100
 800d506:	af00      	add	r7, sp, #0
 800d508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d51c:	68d9      	ldr	r1, [r3, #12]
 800d51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	ea40 0301 	orr.w	r3, r0, r1
 800d528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d52e:	689a      	ldr	r2, [r3, #8]
 800d530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	431a      	orrs	r2, r3
 800d538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	431a      	orrs	r2, r3
 800d540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d544:	69db      	ldr	r3, [r3, #28]
 800d546:	4313      	orrs	r3, r2
 800d548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d558:	f021 010c 	bic.w	r1, r1, #12
 800d55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d566:	430b      	orrs	r3, r1
 800d568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d57a:	6999      	ldr	r1, [r3, #24]
 800d57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	ea40 0301 	orr.w	r3, r0, r1
 800d586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	4b8f      	ldr	r3, [pc, #572]	; (800d7cc <UART_SetConfig+0x2cc>)
 800d590:	429a      	cmp	r2, r3
 800d592:	d005      	beq.n	800d5a0 <UART_SetConfig+0xa0>
 800d594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b8d      	ldr	r3, [pc, #564]	; (800d7d0 <UART_SetConfig+0x2d0>)
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d104      	bne.n	800d5aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d5a0:	f7fe fd94 	bl	800c0cc <HAL_RCC_GetPCLK2Freq>
 800d5a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d5a8:	e003      	b.n	800d5b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d5aa:	f7fe fd7b 	bl	800c0a4 <HAL_RCC_GetPCLK1Freq>
 800d5ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5bc:	f040 810c 	bne.w	800d7d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d5c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d5ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d5ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	1891      	adds	r1, r2, r2
 800d5d8:	65b9      	str	r1, [r7, #88]	; 0x58
 800d5da:	415b      	adcs	r3, r3
 800d5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	eb12 0801 	adds.w	r8, r2, r1
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	eb43 0901 	adc.w	r9, r3, r1
 800d5ee:	f04f 0200 	mov.w	r2, #0
 800d5f2:	f04f 0300 	mov.w	r3, #0
 800d5f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d5fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d5fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d602:	4690      	mov	r8, r2
 800d604:	4699      	mov	r9, r3
 800d606:	4623      	mov	r3, r4
 800d608:	eb18 0303 	adds.w	r3, r8, r3
 800d60c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d610:	462b      	mov	r3, r5
 800d612:	eb49 0303 	adc.w	r3, r9, r3
 800d616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d62a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d62e:	460b      	mov	r3, r1
 800d630:	18db      	adds	r3, r3, r3
 800d632:	653b      	str	r3, [r7, #80]	; 0x50
 800d634:	4613      	mov	r3, r2
 800d636:	eb42 0303 	adc.w	r3, r2, r3
 800d63a:	657b      	str	r3, [r7, #84]	; 0x54
 800d63c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d644:	f7f3 fb20 	bl	8000c88 <__aeabi_uldivmod>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	4b61      	ldr	r3, [pc, #388]	; (800d7d4 <UART_SetConfig+0x2d4>)
 800d64e:	fba3 2302 	umull	r2, r3, r3, r2
 800d652:	095b      	lsrs	r3, r3, #5
 800d654:	011c      	lsls	r4, r3, #4
 800d656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d65a:	2200      	movs	r2, #0
 800d65c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d668:	4642      	mov	r2, r8
 800d66a:	464b      	mov	r3, r9
 800d66c:	1891      	adds	r1, r2, r2
 800d66e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d670:	415b      	adcs	r3, r3
 800d672:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d678:	4641      	mov	r1, r8
 800d67a:	eb12 0a01 	adds.w	sl, r2, r1
 800d67e:	4649      	mov	r1, r9
 800d680:	eb43 0b01 	adc.w	fp, r3, r1
 800d684:	f04f 0200 	mov.w	r2, #0
 800d688:	f04f 0300 	mov.w	r3, #0
 800d68c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d698:	4692      	mov	sl, r2
 800d69a:	469b      	mov	fp, r3
 800d69c:	4643      	mov	r3, r8
 800d69e:	eb1a 0303 	adds.w	r3, sl, r3
 800d6a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d6a6:	464b      	mov	r3, r9
 800d6a8:	eb4b 0303 	adc.w	r3, fp, r3
 800d6ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d6bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d6c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	18db      	adds	r3, r3, r3
 800d6c8:	643b      	str	r3, [r7, #64]	; 0x40
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	eb42 0303 	adc.w	r3, r2, r3
 800d6d0:	647b      	str	r3, [r7, #68]	; 0x44
 800d6d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d6d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d6da:	f7f3 fad5 	bl	8000c88 <__aeabi_uldivmod>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	4b3b      	ldr	r3, [pc, #236]	; (800d7d4 <UART_SetConfig+0x2d4>)
 800d6e6:	fba3 2301 	umull	r2, r3, r3, r1
 800d6ea:	095b      	lsrs	r3, r3, #5
 800d6ec:	2264      	movs	r2, #100	; 0x64
 800d6ee:	fb02 f303 	mul.w	r3, r2, r3
 800d6f2:	1acb      	subs	r3, r1, r3
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d6fa:	4b36      	ldr	r3, [pc, #216]	; (800d7d4 <UART_SetConfig+0x2d4>)
 800d6fc:	fba3 2302 	umull	r2, r3, r3, r2
 800d700:	095b      	lsrs	r3, r3, #5
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d708:	441c      	add	r4, r3
 800d70a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d70e:	2200      	movs	r2, #0
 800d710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d71c:	4642      	mov	r2, r8
 800d71e:	464b      	mov	r3, r9
 800d720:	1891      	adds	r1, r2, r2
 800d722:	63b9      	str	r1, [r7, #56]	; 0x38
 800d724:	415b      	adcs	r3, r3
 800d726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d72c:	4641      	mov	r1, r8
 800d72e:	1851      	adds	r1, r2, r1
 800d730:	6339      	str	r1, [r7, #48]	; 0x30
 800d732:	4649      	mov	r1, r9
 800d734:	414b      	adcs	r3, r1
 800d736:	637b      	str	r3, [r7, #52]	; 0x34
 800d738:	f04f 0200 	mov.w	r2, #0
 800d73c:	f04f 0300 	mov.w	r3, #0
 800d740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d744:	4659      	mov	r1, fp
 800d746:	00cb      	lsls	r3, r1, #3
 800d748:	4651      	mov	r1, sl
 800d74a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d74e:	4651      	mov	r1, sl
 800d750:	00ca      	lsls	r2, r1, #3
 800d752:	4610      	mov	r0, r2
 800d754:	4619      	mov	r1, r3
 800d756:	4603      	mov	r3, r0
 800d758:	4642      	mov	r2, r8
 800d75a:	189b      	adds	r3, r3, r2
 800d75c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d760:	464b      	mov	r3, r9
 800d762:	460a      	mov	r2, r1
 800d764:	eb42 0303 	adc.w	r3, r2, r3
 800d768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d77c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d780:	460b      	mov	r3, r1
 800d782:	18db      	adds	r3, r3, r3
 800d784:	62bb      	str	r3, [r7, #40]	; 0x28
 800d786:	4613      	mov	r3, r2
 800d788:	eb42 0303 	adc.w	r3, r2, r3
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d78e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d796:	f7f3 fa77 	bl	8000c88 <__aeabi_uldivmod>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <UART_SetConfig+0x2d4>)
 800d7a0:	fba3 1302 	umull	r1, r3, r3, r2
 800d7a4:	095b      	lsrs	r3, r3, #5
 800d7a6:	2164      	movs	r1, #100	; 0x64
 800d7a8:	fb01 f303 	mul.w	r3, r1, r3
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	3332      	adds	r3, #50	; 0x32
 800d7b2:	4a08      	ldr	r2, [pc, #32]	; (800d7d4 <UART_SetConfig+0x2d4>)
 800d7b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b8:	095b      	lsrs	r3, r3, #5
 800d7ba:	f003 0207 	and.w	r2, r3, #7
 800d7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4422      	add	r2, r4
 800d7c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d7c8:	e105      	b.n	800d9d6 <UART_SetConfig+0x4d6>
 800d7ca:	bf00      	nop
 800d7cc:	40011000 	.word	0x40011000
 800d7d0:	40011400 	.word	0x40011400
 800d7d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d7d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d7e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d7e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d7ea:	4642      	mov	r2, r8
 800d7ec:	464b      	mov	r3, r9
 800d7ee:	1891      	adds	r1, r2, r2
 800d7f0:	6239      	str	r1, [r7, #32]
 800d7f2:	415b      	adcs	r3, r3
 800d7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d7fa:	4641      	mov	r1, r8
 800d7fc:	1854      	adds	r4, r2, r1
 800d7fe:	4649      	mov	r1, r9
 800d800:	eb43 0501 	adc.w	r5, r3, r1
 800d804:	f04f 0200 	mov.w	r2, #0
 800d808:	f04f 0300 	mov.w	r3, #0
 800d80c:	00eb      	lsls	r3, r5, #3
 800d80e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d812:	00e2      	lsls	r2, r4, #3
 800d814:	4614      	mov	r4, r2
 800d816:	461d      	mov	r5, r3
 800d818:	4643      	mov	r3, r8
 800d81a:	18e3      	adds	r3, r4, r3
 800d81c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d820:	464b      	mov	r3, r9
 800d822:	eb45 0303 	adc.w	r3, r5, r3
 800d826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d83a:	f04f 0200 	mov.w	r2, #0
 800d83e:	f04f 0300 	mov.w	r3, #0
 800d842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d846:	4629      	mov	r1, r5
 800d848:	008b      	lsls	r3, r1, #2
 800d84a:	4621      	mov	r1, r4
 800d84c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d850:	4621      	mov	r1, r4
 800d852:	008a      	lsls	r2, r1, #2
 800d854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d858:	f7f3 fa16 	bl	8000c88 <__aeabi_uldivmod>
 800d85c:	4602      	mov	r2, r0
 800d85e:	460b      	mov	r3, r1
 800d860:	4b60      	ldr	r3, [pc, #384]	; (800d9e4 <UART_SetConfig+0x4e4>)
 800d862:	fba3 2302 	umull	r2, r3, r3, r2
 800d866:	095b      	lsrs	r3, r3, #5
 800d868:	011c      	lsls	r4, r3, #4
 800d86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d86e:	2200      	movs	r2, #0
 800d870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d87c:	4642      	mov	r2, r8
 800d87e:	464b      	mov	r3, r9
 800d880:	1891      	adds	r1, r2, r2
 800d882:	61b9      	str	r1, [r7, #24]
 800d884:	415b      	adcs	r3, r3
 800d886:	61fb      	str	r3, [r7, #28]
 800d888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d88c:	4641      	mov	r1, r8
 800d88e:	1851      	adds	r1, r2, r1
 800d890:	6139      	str	r1, [r7, #16]
 800d892:	4649      	mov	r1, r9
 800d894:	414b      	adcs	r3, r1
 800d896:	617b      	str	r3, [r7, #20]
 800d898:	f04f 0200 	mov.w	r2, #0
 800d89c:	f04f 0300 	mov.w	r3, #0
 800d8a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d8a4:	4659      	mov	r1, fp
 800d8a6:	00cb      	lsls	r3, r1, #3
 800d8a8:	4651      	mov	r1, sl
 800d8aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d8ae:	4651      	mov	r1, sl
 800d8b0:	00ca      	lsls	r2, r1, #3
 800d8b2:	4610      	mov	r0, r2
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	4642      	mov	r2, r8
 800d8ba:	189b      	adds	r3, r3, r2
 800d8bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8c0:	464b      	mov	r3, r9
 800d8c2:	460a      	mov	r2, r1
 800d8c4:	eb42 0303 	adc.w	r3, r2, r3
 800d8c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d8d8:	f04f 0200 	mov.w	r2, #0
 800d8dc:	f04f 0300 	mov.w	r3, #0
 800d8e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	008b      	lsls	r3, r1, #2
 800d8e8:	4641      	mov	r1, r8
 800d8ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8ee:	4641      	mov	r1, r8
 800d8f0:	008a      	lsls	r2, r1, #2
 800d8f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d8f6:	f7f3 f9c7 	bl	8000c88 <__aeabi_uldivmod>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4b39      	ldr	r3, [pc, #228]	; (800d9e4 <UART_SetConfig+0x4e4>)
 800d900:	fba3 1302 	umull	r1, r3, r3, r2
 800d904:	095b      	lsrs	r3, r3, #5
 800d906:	2164      	movs	r1, #100	; 0x64
 800d908:	fb01 f303 	mul.w	r3, r1, r3
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	011b      	lsls	r3, r3, #4
 800d910:	3332      	adds	r3, #50	; 0x32
 800d912:	4a34      	ldr	r2, [pc, #208]	; (800d9e4 <UART_SetConfig+0x4e4>)
 800d914:	fba2 2303 	umull	r2, r3, r2, r3
 800d918:	095b      	lsrs	r3, r3, #5
 800d91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d91e:	441c      	add	r4, r3
 800d920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d924:	2200      	movs	r2, #0
 800d926:	673b      	str	r3, [r7, #112]	; 0x70
 800d928:	677a      	str	r2, [r7, #116]	; 0x74
 800d92a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d92e:	4642      	mov	r2, r8
 800d930:	464b      	mov	r3, r9
 800d932:	1891      	adds	r1, r2, r2
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	415b      	adcs	r3, r3
 800d938:	60fb      	str	r3, [r7, #12]
 800d93a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d93e:	4641      	mov	r1, r8
 800d940:	1851      	adds	r1, r2, r1
 800d942:	6039      	str	r1, [r7, #0]
 800d944:	4649      	mov	r1, r9
 800d946:	414b      	adcs	r3, r1
 800d948:	607b      	str	r3, [r7, #4]
 800d94a:	f04f 0200 	mov.w	r2, #0
 800d94e:	f04f 0300 	mov.w	r3, #0
 800d952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d956:	4659      	mov	r1, fp
 800d958:	00cb      	lsls	r3, r1, #3
 800d95a:	4651      	mov	r1, sl
 800d95c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d960:	4651      	mov	r1, sl
 800d962:	00ca      	lsls	r2, r1, #3
 800d964:	4610      	mov	r0, r2
 800d966:	4619      	mov	r1, r3
 800d968:	4603      	mov	r3, r0
 800d96a:	4642      	mov	r2, r8
 800d96c:	189b      	adds	r3, r3, r2
 800d96e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d970:	464b      	mov	r3, r9
 800d972:	460a      	mov	r2, r1
 800d974:	eb42 0303 	adc.w	r3, r2, r3
 800d978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	663b      	str	r3, [r7, #96]	; 0x60
 800d984:	667a      	str	r2, [r7, #100]	; 0x64
 800d986:	f04f 0200 	mov.w	r2, #0
 800d98a:	f04f 0300 	mov.w	r3, #0
 800d98e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d992:	4649      	mov	r1, r9
 800d994:	008b      	lsls	r3, r1, #2
 800d996:	4641      	mov	r1, r8
 800d998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d99c:	4641      	mov	r1, r8
 800d99e:	008a      	lsls	r2, r1, #2
 800d9a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d9a4:	f7f3 f970 	bl	8000c88 <__aeabi_uldivmod>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <UART_SetConfig+0x4e4>)
 800d9ae:	fba3 1302 	umull	r1, r3, r3, r2
 800d9b2:	095b      	lsrs	r3, r3, #5
 800d9b4:	2164      	movs	r1, #100	; 0x64
 800d9b6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	011b      	lsls	r3, r3, #4
 800d9be:	3332      	adds	r3, #50	; 0x32
 800d9c0:	4a08      	ldr	r2, [pc, #32]	; (800d9e4 <UART_SetConfig+0x4e4>)
 800d9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c6:	095b      	lsrs	r3, r3, #5
 800d9c8:	f003 020f 	and.w	r2, r3, #15
 800d9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4422      	add	r2, r4
 800d9d4:	609a      	str	r2, [r3, #8]
}
 800d9d6:	bf00      	nop
 800d9d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9e2:	bf00      	nop
 800d9e4:	51eb851f 	.word	0x51eb851f

0800d9e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b084      	sub	sp, #16
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	f107 001c 	add.w	r0, r7, #28
 800d9f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d122      	bne.n	800da46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800da14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d105      	bne.n	800da3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 faa2 	bl	800df84 <USB_CoreReset>
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
 800da44:	e01a      	b.n	800da7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 fa96 	bl	800df84 <USB_CoreReset>
 800da58:	4603      	mov	r3, r0
 800da5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	639a      	str	r2, [r3, #56]	; 0x38
 800da6e:	e005      	b.n	800da7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d10b      	bne.n	800da9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	f043 0206 	orr.w	r2, r3, #6
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	f043 0220 	orr.w	r2, r3, #32
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daa6:	b004      	add	sp, #16
 800daa8:	4770      	bx	lr

0800daaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800daaa:	b480      	push	{r7}
 800daac:	b083      	sub	sp, #12
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f023 0201 	bic.w	r2, r3, #1
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d115      	bne.n	800db1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dafa:	2001      	movs	r0, #1
 800dafc:	f7fb f9ce 	bl	8008e9c <HAL_Delay>
      ms++;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3301      	adds	r3, #1
 800db04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fa2e 	bl	800df68 <USB_GetMode>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d01e      	beq.n	800db50 <USB_SetCurrentMode+0x84>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b31      	cmp	r3, #49	; 0x31
 800db16:	d9f0      	bls.n	800dafa <USB_SetCurrentMode+0x2e>
 800db18:	e01a      	b.n	800db50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db1a:	78fb      	ldrb	r3, [r7, #3]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d115      	bne.n	800db4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db2c:	2001      	movs	r0, #1
 800db2e:	f7fb f9b5 	bl	8008e9c <HAL_Delay>
      ms++;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3301      	adds	r3, #1
 800db36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fa15 	bl	800df68 <USB_GetMode>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d005      	beq.n	800db50 <USB_SetCurrentMode+0x84>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2b31      	cmp	r3, #49	; 0x31
 800db48:	d9f0      	bls.n	800db2c <USB_SetCurrentMode+0x60>
 800db4a:	e001      	b.n	800db50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e005      	b.n	800db5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b32      	cmp	r3, #50	; 0x32
 800db54:	d101      	bne.n	800db5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	e000      	b.n	800db5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db64:	b084      	sub	sp, #16
 800db66:	b580      	push	{r7, lr}
 800db68:	b086      	sub	sp, #24
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800db72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db7e:	2300      	movs	r3, #0
 800db80:	613b      	str	r3, [r7, #16]
 800db82:	e009      	b.n	800db98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	3340      	adds	r3, #64	; 0x40
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	2200      	movs	r2, #0
 800db90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	3301      	adds	r3, #1
 800db96:	613b      	str	r3, [r7, #16]
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	2b0e      	cmp	r3, #14
 800db9c:	d9f2      	bls.n	800db84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d11c      	bne.n	800dbde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbb2:	f043 0302 	orr.w	r3, r3, #2
 800dbb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
 800dbdc:	e00b      	b.n	800dbf6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc08:	4619      	mov	r1, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc10:	461a      	mov	r2, r3
 800dc12:	680b      	ldr	r3, [r1, #0]
 800dc14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d10c      	bne.n	800dc36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d104      	bne.n	800dc2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc22:	2100      	movs	r1, #0
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f965 	bl	800def4 <USB_SetDevSpeed>
 800dc2a:	e008      	b.n	800dc3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f960 	bl	800def4 <USB_SetDevSpeed>
 800dc34:	e003      	b.n	800dc3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc36:	2103      	movs	r1, #3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 f95b 	bl	800def4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc3e:	2110      	movs	r1, #16
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 f8f3 	bl	800de2c <USB_FlushTxFifo>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d001      	beq.n	800dc50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f91f 	bl	800de94 <USB_FlushRxFifo>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc66:	461a      	mov	r2, r3
 800dc68:	2300      	movs	r3, #0
 800dc6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc72:	461a      	mov	r2, r3
 800dc74:	2300      	movs	r3, #0
 800dc76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc7e:	461a      	mov	r2, r3
 800dc80:	2300      	movs	r3, #0
 800dc82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc84:	2300      	movs	r3, #0
 800dc86:	613b      	str	r3, [r7, #16]
 800dc88:	e043      	b.n	800dd12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	015a      	lsls	r2, r3, #5
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	4413      	add	r3, r2
 800dc92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dca0:	d118      	bne.n	800dcd4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10a      	bne.n	800dcbe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	e013      	b.n	800dce6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	015a      	lsls	r2, r3, #5
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcca:	461a      	mov	r2, r3
 800dccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	e008      	b.n	800dce6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce0:	461a      	mov	r2, r3
 800dce2:	2300      	movs	r3, #0
 800dce4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	015a      	lsls	r2, r3, #5
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	4413      	add	r3, r2
 800dcee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	015a      	lsls	r2, r3, #5
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4413      	add	r3, r2
 800dd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd04:	461a      	mov	r2, r3
 800dd06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	613b      	str	r3, [r7, #16]
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d3b7      	bcc.n	800dc8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]
 800dd1e:	e043      	b.n	800dda8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd36:	d118      	bne.n	800dd6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	e013      	b.n	800dd7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	015a      	lsls	r2, r3, #5
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd60:	461a      	mov	r2, r3
 800dd62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	e008      	b.n	800dd7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	015a      	lsls	r2, r3, #5
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	4413      	add	r3, r2
 800dd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd76:	461a      	mov	r2, r3
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd88:	461a      	mov	r2, r3
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	015a      	lsls	r2, r3, #5
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4413      	add	r3, r2
 800dd96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dda0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	3301      	adds	r3, #1
 800dda6:	613b      	str	r3, [r7, #16]
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	693a      	ldr	r2, [r7, #16]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d3b7      	bcc.n	800dd20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ddd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d105      	bne.n	800dde4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	f043 0210 	orr.w	r2, r3, #16
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	699a      	ldr	r2, [r3, #24]
 800dde8:	4b0f      	ldr	r3, [pc, #60]	; (800de28 <USB_DevInit+0x2c4>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ddf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d005      	beq.n	800de02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	f043 0208 	orr.w	r2, r3, #8
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de04:	2b01      	cmp	r3, #1
 800de06:	d107      	bne.n	800de18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de10:	f043 0304 	orr.w	r3, r3, #4
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de18:	7dfb      	ldrb	r3, [r7, #23]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de24:	b004      	add	sp, #16
 800de26:	4770      	bx	lr
 800de28:	803c3800 	.word	0x803c3800

0800de2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de36:	2300      	movs	r3, #0
 800de38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3301      	adds	r3, #1
 800de3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	4a13      	ldr	r2, [pc, #76]	; (800de90 <USB_FlushTxFifo+0x64>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d901      	bls.n	800de4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de48:	2303      	movs	r3, #3
 800de4a:	e01b      	b.n	800de84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	daf2      	bge.n	800de3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de54:	2300      	movs	r3, #0
 800de56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	019b      	lsls	r3, r3, #6
 800de5c:	f043 0220 	orr.w	r2, r3, #32
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	3301      	adds	r3, #1
 800de68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	4a08      	ldr	r2, [pc, #32]	; (800de90 <USB_FlushTxFifo+0x64>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d901      	bls.n	800de76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de72:	2303      	movs	r3, #3
 800de74:	e006      	b.n	800de84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	f003 0320 	and.w	r3, r3, #32
 800de7e:	2b20      	cmp	r3, #32
 800de80:	d0f0      	beq.n	800de64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3714      	adds	r7, #20
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr
 800de90:	00030d40 	.word	0x00030d40

0800de94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	4a11      	ldr	r2, [pc, #68]	; (800def0 <USB_FlushRxFifo+0x5c>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d901      	bls.n	800deb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800deae:	2303      	movs	r3, #3
 800deb0:	e018      	b.n	800dee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	daf2      	bge.n	800dea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800deba:	2300      	movs	r3, #0
 800debc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2210      	movs	r2, #16
 800dec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	4a08      	ldr	r2, [pc, #32]	; (800def0 <USB_FlushRxFifo+0x5c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d901      	bls.n	800ded6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e006      	b.n	800dee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	f003 0310 	and.w	r3, r3, #16
 800dede:	2b10      	cmp	r3, #16
 800dee0:	d0f0      	beq.n	800dec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	00030d40 	.word	0x00030d40

0800def4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	460b      	mov	r3, r1
 800defe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	78fb      	ldrb	r3, [r7, #3]
 800df0e:	68f9      	ldr	r1, [r7, #12]
 800df10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df14:	4313      	orrs	r3, r2
 800df16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df26:	b480      	push	{r7}
 800df28:	b085      	sub	sp, #20
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df40:	f023 0303 	bic.w	r3, r3, #3
 800df44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df54:	f043 0302 	orr.w	r3, r3, #2
 800df58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	f003 0301 	and.w	r3, r3, #1
}
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	3301      	adds	r3, #1
 800df94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	4a13      	ldr	r2, [pc, #76]	; (800dfe8 <USB_CoreReset+0x64>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d901      	bls.n	800dfa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	e01b      	b.n	800dfda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	daf2      	bge.n	800df90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	f043 0201 	orr.w	r2, r3, #1
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4a09      	ldr	r2, [pc, #36]	; (800dfe8 <USB_CoreReset+0x64>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d901      	bls.n	800dfcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	e006      	b.n	800dfda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	f003 0301 	and.w	r3, r3, #1
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d0f0      	beq.n	800dfba <USB_CoreReset+0x36>

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	00030d40 	.word	0x00030d40

0800dfec <__errno>:
 800dfec:	4b01      	ldr	r3, [pc, #4]	; (800dff4 <__errno+0x8>)
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	2000032c 	.word	0x2000032c

0800dff8 <__libc_init_array>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4d0d      	ldr	r5, [pc, #52]	; (800e030 <__libc_init_array+0x38>)
 800dffc:	4c0d      	ldr	r4, [pc, #52]	; (800e034 <__libc_init_array+0x3c>)
 800dffe:	1b64      	subs	r4, r4, r5
 800e000:	10a4      	asrs	r4, r4, #2
 800e002:	2600      	movs	r6, #0
 800e004:	42a6      	cmp	r6, r4
 800e006:	d109      	bne.n	800e01c <__libc_init_array+0x24>
 800e008:	4d0b      	ldr	r5, [pc, #44]	; (800e038 <__libc_init_array+0x40>)
 800e00a:	4c0c      	ldr	r4, [pc, #48]	; (800e03c <__libc_init_array+0x44>)
 800e00c:	f002 ff0a 	bl	8010e24 <_init>
 800e010:	1b64      	subs	r4, r4, r5
 800e012:	10a4      	asrs	r4, r4, #2
 800e014:	2600      	movs	r6, #0
 800e016:	42a6      	cmp	r6, r4
 800e018:	d105      	bne.n	800e026 <__libc_init_array+0x2e>
 800e01a:	bd70      	pop	{r4, r5, r6, pc}
 800e01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e020:	4798      	blx	r3
 800e022:	3601      	adds	r6, #1
 800e024:	e7ee      	b.n	800e004 <__libc_init_array+0xc>
 800e026:	f855 3b04 	ldr.w	r3, [r5], #4
 800e02a:	4798      	blx	r3
 800e02c:	3601      	adds	r6, #1
 800e02e:	e7f2      	b.n	800e016 <__libc_init_array+0x1e>
 800e030:	080116d4 	.word	0x080116d4
 800e034:	080116d4 	.word	0x080116d4
 800e038:	080116d4 	.word	0x080116d4
 800e03c:	080116d8 	.word	0x080116d8

0800e040 <malloc>:
 800e040:	4b02      	ldr	r3, [pc, #8]	; (800e04c <malloc+0xc>)
 800e042:	4601      	mov	r1, r0
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	f000 b88d 	b.w	800e164 <_malloc_r>
 800e04a:	bf00      	nop
 800e04c:	2000032c 	.word	0x2000032c

0800e050 <free>:
 800e050:	4b02      	ldr	r3, [pc, #8]	; (800e05c <free+0xc>)
 800e052:	4601      	mov	r1, r0
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	f000 b819 	b.w	800e08c <_free_r>
 800e05a:	bf00      	nop
 800e05c:	2000032c 	.word	0x2000032c

0800e060 <memcpy>:
 800e060:	440a      	add	r2, r1
 800e062:	4291      	cmp	r1, r2
 800e064:	f100 33ff 	add.w	r3, r0, #4294967295
 800e068:	d100      	bne.n	800e06c <memcpy+0xc>
 800e06a:	4770      	bx	lr
 800e06c:	b510      	push	{r4, lr}
 800e06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e072:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e076:	4291      	cmp	r1, r2
 800e078:	d1f9      	bne.n	800e06e <memcpy+0xe>
 800e07a:	bd10      	pop	{r4, pc}

0800e07c <memset>:
 800e07c:	4402      	add	r2, r0
 800e07e:	4603      	mov	r3, r0
 800e080:	4293      	cmp	r3, r2
 800e082:	d100      	bne.n	800e086 <memset+0xa>
 800e084:	4770      	bx	lr
 800e086:	f803 1b01 	strb.w	r1, [r3], #1
 800e08a:	e7f9      	b.n	800e080 <memset+0x4>

0800e08c <_free_r>:
 800e08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e08e:	2900      	cmp	r1, #0
 800e090:	d044      	beq.n	800e11c <_free_r+0x90>
 800e092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e096:	9001      	str	r0, [sp, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f1a1 0404 	sub.w	r4, r1, #4
 800e09e:	bfb8      	it	lt
 800e0a0:	18e4      	addlt	r4, r4, r3
 800e0a2:	f001 fbeb 	bl	800f87c <__malloc_lock>
 800e0a6:	4a1e      	ldr	r2, [pc, #120]	; (800e120 <_free_r+0x94>)
 800e0a8:	9801      	ldr	r0, [sp, #4]
 800e0aa:	6813      	ldr	r3, [r2, #0]
 800e0ac:	b933      	cbnz	r3, 800e0bc <_free_r+0x30>
 800e0ae:	6063      	str	r3, [r4, #4]
 800e0b0:	6014      	str	r4, [r2, #0]
 800e0b2:	b003      	add	sp, #12
 800e0b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0b8:	f001 bbe6 	b.w	800f888 <__malloc_unlock>
 800e0bc:	42a3      	cmp	r3, r4
 800e0be:	d908      	bls.n	800e0d2 <_free_r+0x46>
 800e0c0:	6825      	ldr	r5, [r4, #0]
 800e0c2:	1961      	adds	r1, r4, r5
 800e0c4:	428b      	cmp	r3, r1
 800e0c6:	bf01      	itttt	eq
 800e0c8:	6819      	ldreq	r1, [r3, #0]
 800e0ca:	685b      	ldreq	r3, [r3, #4]
 800e0cc:	1949      	addeq	r1, r1, r5
 800e0ce:	6021      	streq	r1, [r4, #0]
 800e0d0:	e7ed      	b.n	800e0ae <_free_r+0x22>
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	b10b      	cbz	r3, 800e0dc <_free_r+0x50>
 800e0d8:	42a3      	cmp	r3, r4
 800e0da:	d9fa      	bls.n	800e0d2 <_free_r+0x46>
 800e0dc:	6811      	ldr	r1, [r2, #0]
 800e0de:	1855      	adds	r5, r2, r1
 800e0e0:	42a5      	cmp	r5, r4
 800e0e2:	d10b      	bne.n	800e0fc <_free_r+0x70>
 800e0e4:	6824      	ldr	r4, [r4, #0]
 800e0e6:	4421      	add	r1, r4
 800e0e8:	1854      	adds	r4, r2, r1
 800e0ea:	42a3      	cmp	r3, r4
 800e0ec:	6011      	str	r1, [r2, #0]
 800e0ee:	d1e0      	bne.n	800e0b2 <_free_r+0x26>
 800e0f0:	681c      	ldr	r4, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	6053      	str	r3, [r2, #4]
 800e0f6:	4421      	add	r1, r4
 800e0f8:	6011      	str	r1, [r2, #0]
 800e0fa:	e7da      	b.n	800e0b2 <_free_r+0x26>
 800e0fc:	d902      	bls.n	800e104 <_free_r+0x78>
 800e0fe:	230c      	movs	r3, #12
 800e100:	6003      	str	r3, [r0, #0]
 800e102:	e7d6      	b.n	800e0b2 <_free_r+0x26>
 800e104:	6825      	ldr	r5, [r4, #0]
 800e106:	1961      	adds	r1, r4, r5
 800e108:	428b      	cmp	r3, r1
 800e10a:	bf04      	itt	eq
 800e10c:	6819      	ldreq	r1, [r3, #0]
 800e10e:	685b      	ldreq	r3, [r3, #4]
 800e110:	6063      	str	r3, [r4, #4]
 800e112:	bf04      	itt	eq
 800e114:	1949      	addeq	r1, r1, r5
 800e116:	6021      	streq	r1, [r4, #0]
 800e118:	6054      	str	r4, [r2, #4]
 800e11a:	e7ca      	b.n	800e0b2 <_free_r+0x26>
 800e11c:	b003      	add	sp, #12
 800e11e:	bd30      	pop	{r4, r5, pc}
 800e120:	20001530 	.word	0x20001530

0800e124 <sbrk_aligned>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	4e0e      	ldr	r6, [pc, #56]	; (800e160 <sbrk_aligned+0x3c>)
 800e128:	460c      	mov	r4, r1
 800e12a:	6831      	ldr	r1, [r6, #0]
 800e12c:	4605      	mov	r5, r0
 800e12e:	b911      	cbnz	r1, 800e136 <sbrk_aligned+0x12>
 800e130:	f000 fcf6 	bl	800eb20 <_sbrk_r>
 800e134:	6030      	str	r0, [r6, #0]
 800e136:	4621      	mov	r1, r4
 800e138:	4628      	mov	r0, r5
 800e13a:	f000 fcf1 	bl	800eb20 <_sbrk_r>
 800e13e:	1c43      	adds	r3, r0, #1
 800e140:	d00a      	beq.n	800e158 <sbrk_aligned+0x34>
 800e142:	1cc4      	adds	r4, r0, #3
 800e144:	f024 0403 	bic.w	r4, r4, #3
 800e148:	42a0      	cmp	r0, r4
 800e14a:	d007      	beq.n	800e15c <sbrk_aligned+0x38>
 800e14c:	1a21      	subs	r1, r4, r0
 800e14e:	4628      	mov	r0, r5
 800e150:	f000 fce6 	bl	800eb20 <_sbrk_r>
 800e154:	3001      	adds	r0, #1
 800e156:	d101      	bne.n	800e15c <sbrk_aligned+0x38>
 800e158:	f04f 34ff 	mov.w	r4, #4294967295
 800e15c:	4620      	mov	r0, r4
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	20001534 	.word	0x20001534

0800e164 <_malloc_r>:
 800e164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e168:	1ccd      	adds	r5, r1, #3
 800e16a:	f025 0503 	bic.w	r5, r5, #3
 800e16e:	3508      	adds	r5, #8
 800e170:	2d0c      	cmp	r5, #12
 800e172:	bf38      	it	cc
 800e174:	250c      	movcc	r5, #12
 800e176:	2d00      	cmp	r5, #0
 800e178:	4607      	mov	r7, r0
 800e17a:	db01      	blt.n	800e180 <_malloc_r+0x1c>
 800e17c:	42a9      	cmp	r1, r5
 800e17e:	d905      	bls.n	800e18c <_malloc_r+0x28>
 800e180:	230c      	movs	r3, #12
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	2600      	movs	r6, #0
 800e186:	4630      	mov	r0, r6
 800e188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e18c:	4e2e      	ldr	r6, [pc, #184]	; (800e248 <_malloc_r+0xe4>)
 800e18e:	f001 fb75 	bl	800f87c <__malloc_lock>
 800e192:	6833      	ldr	r3, [r6, #0]
 800e194:	461c      	mov	r4, r3
 800e196:	bb34      	cbnz	r4, 800e1e6 <_malloc_r+0x82>
 800e198:	4629      	mov	r1, r5
 800e19a:	4638      	mov	r0, r7
 800e19c:	f7ff ffc2 	bl	800e124 <sbrk_aligned>
 800e1a0:	1c43      	adds	r3, r0, #1
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	d14d      	bne.n	800e242 <_malloc_r+0xde>
 800e1a6:	6834      	ldr	r4, [r6, #0]
 800e1a8:	4626      	mov	r6, r4
 800e1aa:	2e00      	cmp	r6, #0
 800e1ac:	d140      	bne.n	800e230 <_malloc_r+0xcc>
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	4631      	mov	r1, r6
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	eb04 0803 	add.w	r8, r4, r3
 800e1b8:	f000 fcb2 	bl	800eb20 <_sbrk_r>
 800e1bc:	4580      	cmp	r8, r0
 800e1be:	d13a      	bne.n	800e236 <_malloc_r+0xd2>
 800e1c0:	6821      	ldr	r1, [r4, #0]
 800e1c2:	3503      	adds	r5, #3
 800e1c4:	1a6d      	subs	r5, r5, r1
 800e1c6:	f025 0503 	bic.w	r5, r5, #3
 800e1ca:	3508      	adds	r5, #8
 800e1cc:	2d0c      	cmp	r5, #12
 800e1ce:	bf38      	it	cc
 800e1d0:	250c      	movcc	r5, #12
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f7ff ffa5 	bl	800e124 <sbrk_aligned>
 800e1da:	3001      	adds	r0, #1
 800e1dc:	d02b      	beq.n	800e236 <_malloc_r+0xd2>
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	442b      	add	r3, r5
 800e1e2:	6023      	str	r3, [r4, #0]
 800e1e4:	e00e      	b.n	800e204 <_malloc_r+0xa0>
 800e1e6:	6822      	ldr	r2, [r4, #0]
 800e1e8:	1b52      	subs	r2, r2, r5
 800e1ea:	d41e      	bmi.n	800e22a <_malloc_r+0xc6>
 800e1ec:	2a0b      	cmp	r2, #11
 800e1ee:	d916      	bls.n	800e21e <_malloc_r+0xba>
 800e1f0:	1961      	adds	r1, r4, r5
 800e1f2:	42a3      	cmp	r3, r4
 800e1f4:	6025      	str	r5, [r4, #0]
 800e1f6:	bf18      	it	ne
 800e1f8:	6059      	strne	r1, [r3, #4]
 800e1fa:	6863      	ldr	r3, [r4, #4]
 800e1fc:	bf08      	it	eq
 800e1fe:	6031      	streq	r1, [r6, #0]
 800e200:	5162      	str	r2, [r4, r5]
 800e202:	604b      	str	r3, [r1, #4]
 800e204:	4638      	mov	r0, r7
 800e206:	f104 060b 	add.w	r6, r4, #11
 800e20a:	f001 fb3d 	bl	800f888 <__malloc_unlock>
 800e20e:	f026 0607 	bic.w	r6, r6, #7
 800e212:	1d23      	adds	r3, r4, #4
 800e214:	1af2      	subs	r2, r6, r3
 800e216:	d0b6      	beq.n	800e186 <_malloc_r+0x22>
 800e218:	1b9b      	subs	r3, r3, r6
 800e21a:	50a3      	str	r3, [r4, r2]
 800e21c:	e7b3      	b.n	800e186 <_malloc_r+0x22>
 800e21e:	6862      	ldr	r2, [r4, #4]
 800e220:	42a3      	cmp	r3, r4
 800e222:	bf0c      	ite	eq
 800e224:	6032      	streq	r2, [r6, #0]
 800e226:	605a      	strne	r2, [r3, #4]
 800e228:	e7ec      	b.n	800e204 <_malloc_r+0xa0>
 800e22a:	4623      	mov	r3, r4
 800e22c:	6864      	ldr	r4, [r4, #4]
 800e22e:	e7b2      	b.n	800e196 <_malloc_r+0x32>
 800e230:	4634      	mov	r4, r6
 800e232:	6876      	ldr	r6, [r6, #4]
 800e234:	e7b9      	b.n	800e1aa <_malloc_r+0x46>
 800e236:	230c      	movs	r3, #12
 800e238:	603b      	str	r3, [r7, #0]
 800e23a:	4638      	mov	r0, r7
 800e23c:	f001 fb24 	bl	800f888 <__malloc_unlock>
 800e240:	e7a1      	b.n	800e186 <_malloc_r+0x22>
 800e242:	6025      	str	r5, [r4, #0]
 800e244:	e7de      	b.n	800e204 <_malloc_r+0xa0>
 800e246:	bf00      	nop
 800e248:	20001530 	.word	0x20001530

0800e24c <__cvt>:
 800e24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e250:	ec55 4b10 	vmov	r4, r5, d0
 800e254:	2d00      	cmp	r5, #0
 800e256:	460e      	mov	r6, r1
 800e258:	4619      	mov	r1, r3
 800e25a:	462b      	mov	r3, r5
 800e25c:	bfbb      	ittet	lt
 800e25e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e262:	461d      	movlt	r5, r3
 800e264:	2300      	movge	r3, #0
 800e266:	232d      	movlt	r3, #45	; 0x2d
 800e268:	700b      	strb	r3, [r1, #0]
 800e26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e26c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e270:	4691      	mov	r9, r2
 800e272:	f023 0820 	bic.w	r8, r3, #32
 800e276:	bfbc      	itt	lt
 800e278:	4622      	movlt	r2, r4
 800e27a:	4614      	movlt	r4, r2
 800e27c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e280:	d005      	beq.n	800e28e <__cvt+0x42>
 800e282:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e286:	d100      	bne.n	800e28a <__cvt+0x3e>
 800e288:	3601      	adds	r6, #1
 800e28a:	2102      	movs	r1, #2
 800e28c:	e000      	b.n	800e290 <__cvt+0x44>
 800e28e:	2103      	movs	r1, #3
 800e290:	ab03      	add	r3, sp, #12
 800e292:	9301      	str	r3, [sp, #4]
 800e294:	ab02      	add	r3, sp, #8
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	ec45 4b10 	vmov	d0, r4, r5
 800e29c:	4653      	mov	r3, sl
 800e29e:	4632      	mov	r2, r6
 800e2a0:	f000 fcfa 	bl	800ec98 <_dtoa_r>
 800e2a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e2a8:	4607      	mov	r7, r0
 800e2aa:	d102      	bne.n	800e2b2 <__cvt+0x66>
 800e2ac:	f019 0f01 	tst.w	r9, #1
 800e2b0:	d022      	beq.n	800e2f8 <__cvt+0xac>
 800e2b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2b6:	eb07 0906 	add.w	r9, r7, r6
 800e2ba:	d110      	bne.n	800e2de <__cvt+0x92>
 800e2bc:	783b      	ldrb	r3, [r7, #0]
 800e2be:	2b30      	cmp	r3, #48	; 0x30
 800e2c0:	d10a      	bne.n	800e2d8 <__cvt+0x8c>
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f2 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2ce:	b918      	cbnz	r0, 800e2d8 <__cvt+0x8c>
 800e2d0:	f1c6 0601 	rsb	r6, r6, #1
 800e2d4:	f8ca 6000 	str.w	r6, [sl]
 800e2d8:	f8da 3000 	ldr.w	r3, [sl]
 800e2dc:	4499      	add	r9, r3
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	f7f2 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2ea:	b108      	cbz	r0, 800e2f0 <__cvt+0xa4>
 800e2ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2f0:	2230      	movs	r2, #48	; 0x30
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	454b      	cmp	r3, r9
 800e2f6:	d307      	bcc.n	800e308 <__cvt+0xbc>
 800e2f8:	9b03      	ldr	r3, [sp, #12]
 800e2fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2fc:	1bdb      	subs	r3, r3, r7
 800e2fe:	4638      	mov	r0, r7
 800e300:	6013      	str	r3, [r2, #0]
 800e302:	b004      	add	sp, #16
 800e304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e308:	1c59      	adds	r1, r3, #1
 800e30a:	9103      	str	r1, [sp, #12]
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	e7f0      	b.n	800e2f2 <__cvt+0xa6>

0800e310 <__exponent>:
 800e310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e312:	4603      	mov	r3, r0
 800e314:	2900      	cmp	r1, #0
 800e316:	bfb8      	it	lt
 800e318:	4249      	neglt	r1, r1
 800e31a:	f803 2b02 	strb.w	r2, [r3], #2
 800e31e:	bfb4      	ite	lt
 800e320:	222d      	movlt	r2, #45	; 0x2d
 800e322:	222b      	movge	r2, #43	; 0x2b
 800e324:	2909      	cmp	r1, #9
 800e326:	7042      	strb	r2, [r0, #1]
 800e328:	dd2a      	ble.n	800e380 <__exponent+0x70>
 800e32a:	f10d 0407 	add.w	r4, sp, #7
 800e32e:	46a4      	mov	ip, r4
 800e330:	270a      	movs	r7, #10
 800e332:	46a6      	mov	lr, r4
 800e334:	460a      	mov	r2, r1
 800e336:	fb91 f6f7 	sdiv	r6, r1, r7
 800e33a:	fb07 1516 	mls	r5, r7, r6, r1
 800e33e:	3530      	adds	r5, #48	; 0x30
 800e340:	2a63      	cmp	r2, #99	; 0x63
 800e342:	f104 34ff 	add.w	r4, r4, #4294967295
 800e346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e34a:	4631      	mov	r1, r6
 800e34c:	dcf1      	bgt.n	800e332 <__exponent+0x22>
 800e34e:	3130      	adds	r1, #48	; 0x30
 800e350:	f1ae 0502 	sub.w	r5, lr, #2
 800e354:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e358:	1c44      	adds	r4, r0, #1
 800e35a:	4629      	mov	r1, r5
 800e35c:	4561      	cmp	r1, ip
 800e35e:	d30a      	bcc.n	800e376 <__exponent+0x66>
 800e360:	f10d 0209 	add.w	r2, sp, #9
 800e364:	eba2 020e 	sub.w	r2, r2, lr
 800e368:	4565      	cmp	r5, ip
 800e36a:	bf88      	it	hi
 800e36c:	2200      	movhi	r2, #0
 800e36e:	4413      	add	r3, r2
 800e370:	1a18      	subs	r0, r3, r0
 800e372:	b003      	add	sp, #12
 800e374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e37a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e37e:	e7ed      	b.n	800e35c <__exponent+0x4c>
 800e380:	2330      	movs	r3, #48	; 0x30
 800e382:	3130      	adds	r1, #48	; 0x30
 800e384:	7083      	strb	r3, [r0, #2]
 800e386:	70c1      	strb	r1, [r0, #3]
 800e388:	1d03      	adds	r3, r0, #4
 800e38a:	e7f1      	b.n	800e370 <__exponent+0x60>

0800e38c <_printf_float>:
 800e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e390:	ed2d 8b02 	vpush	{d8}
 800e394:	b08d      	sub	sp, #52	; 0x34
 800e396:	460c      	mov	r4, r1
 800e398:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e39c:	4616      	mov	r6, r2
 800e39e:	461f      	mov	r7, r3
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	f001 fa67 	bl	800f874 <_localeconv_r>
 800e3a6:	f8d0 a000 	ldr.w	sl, [r0]
 800e3aa:	4650      	mov	r0, sl
 800e3ac:	f7f1 ff10 	bl	80001d0 <strlen>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	9305      	str	r3, [sp, #20]
 800e3b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e3bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e3c0:	3307      	adds	r3, #7
 800e3c2:	f023 0307 	bic.w	r3, r3, #7
 800e3c6:	f103 0208 	add.w	r2, r3, #8
 800e3ca:	f8c8 2000 	str.w	r2, [r8]
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e3d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e3da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3de:	9307      	str	r3, [sp, #28]
 800e3e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3e4:	ee08 0a10 	vmov	s16, r0
 800e3e8:	4b9f      	ldr	r3, [pc, #636]	; (800e668 <_printf_float+0x2dc>)
 800e3ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f2:	f7f2 fb9b 	bl	8000b2c <__aeabi_dcmpun>
 800e3f6:	bb88      	cbnz	r0, 800e45c <_printf_float+0xd0>
 800e3f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3fc:	4b9a      	ldr	r3, [pc, #616]	; (800e668 <_printf_float+0x2dc>)
 800e3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e402:	f7f2 fb75 	bl	8000af0 <__aeabi_dcmple>
 800e406:	bb48      	cbnz	r0, 800e45c <_printf_float+0xd0>
 800e408:	2200      	movs	r2, #0
 800e40a:	2300      	movs	r3, #0
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 fb64 	bl	8000adc <__aeabi_dcmplt>
 800e414:	b110      	cbz	r0, 800e41c <_printf_float+0x90>
 800e416:	232d      	movs	r3, #45	; 0x2d
 800e418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e41c:	4b93      	ldr	r3, [pc, #588]	; (800e66c <_printf_float+0x2e0>)
 800e41e:	4894      	ldr	r0, [pc, #592]	; (800e670 <_printf_float+0x2e4>)
 800e420:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e424:	bf94      	ite	ls
 800e426:	4698      	movls	r8, r3
 800e428:	4680      	movhi	r8, r0
 800e42a:	2303      	movs	r3, #3
 800e42c:	6123      	str	r3, [r4, #16]
 800e42e:	9b05      	ldr	r3, [sp, #20]
 800e430:	f023 0204 	bic.w	r2, r3, #4
 800e434:	6022      	str	r2, [r4, #0]
 800e436:	f04f 0900 	mov.w	r9, #0
 800e43a:	9700      	str	r7, [sp, #0]
 800e43c:	4633      	mov	r3, r6
 800e43e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e440:	4621      	mov	r1, r4
 800e442:	4628      	mov	r0, r5
 800e444:	f000 f9d8 	bl	800e7f8 <_printf_common>
 800e448:	3001      	adds	r0, #1
 800e44a:	f040 8090 	bne.w	800e56e <_printf_float+0x1e2>
 800e44e:	f04f 30ff 	mov.w	r0, #4294967295
 800e452:	b00d      	add	sp, #52	; 0x34
 800e454:	ecbd 8b02 	vpop	{d8}
 800e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45c:	4642      	mov	r2, r8
 800e45e:	464b      	mov	r3, r9
 800e460:	4640      	mov	r0, r8
 800e462:	4649      	mov	r1, r9
 800e464:	f7f2 fb62 	bl	8000b2c <__aeabi_dcmpun>
 800e468:	b140      	cbz	r0, 800e47c <_printf_float+0xf0>
 800e46a:	464b      	mov	r3, r9
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	bfbc      	itt	lt
 800e470:	232d      	movlt	r3, #45	; 0x2d
 800e472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e476:	487f      	ldr	r0, [pc, #508]	; (800e674 <_printf_float+0x2e8>)
 800e478:	4b7f      	ldr	r3, [pc, #508]	; (800e678 <_printf_float+0x2ec>)
 800e47a:	e7d1      	b.n	800e420 <_printf_float+0x94>
 800e47c:	6863      	ldr	r3, [r4, #4]
 800e47e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e482:	9206      	str	r2, [sp, #24]
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	d13f      	bne.n	800e508 <_printf_float+0x17c>
 800e488:	2306      	movs	r3, #6
 800e48a:	6063      	str	r3, [r4, #4]
 800e48c:	9b05      	ldr	r3, [sp, #20]
 800e48e:	6861      	ldr	r1, [r4, #4]
 800e490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e494:	2300      	movs	r3, #0
 800e496:	9303      	str	r3, [sp, #12]
 800e498:	ab0a      	add	r3, sp, #40	; 0x28
 800e49a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e49e:	ab09      	add	r3, sp, #36	; 0x24
 800e4a0:	ec49 8b10 	vmov	d0, r8, r9
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	6022      	str	r2, [r4, #0]
 800e4a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f7ff fecd 	bl	800e24c <__cvt>
 800e4b2:	9b06      	ldr	r3, [sp, #24]
 800e4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4b6:	2b47      	cmp	r3, #71	; 0x47
 800e4b8:	4680      	mov	r8, r0
 800e4ba:	d108      	bne.n	800e4ce <_printf_float+0x142>
 800e4bc:	1cc8      	adds	r0, r1, #3
 800e4be:	db02      	blt.n	800e4c6 <_printf_float+0x13a>
 800e4c0:	6863      	ldr	r3, [r4, #4]
 800e4c2:	4299      	cmp	r1, r3
 800e4c4:	dd41      	ble.n	800e54a <_printf_float+0x1be>
 800e4c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800e4ca:	fa5f fb8b 	uxtb.w	fp, fp
 800e4ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4d2:	d820      	bhi.n	800e516 <_printf_float+0x18a>
 800e4d4:	3901      	subs	r1, #1
 800e4d6:	465a      	mov	r2, fp
 800e4d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4dc:	9109      	str	r1, [sp, #36]	; 0x24
 800e4de:	f7ff ff17 	bl	800e310 <__exponent>
 800e4e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4e4:	1813      	adds	r3, r2, r0
 800e4e6:	2a01      	cmp	r2, #1
 800e4e8:	4681      	mov	r9, r0
 800e4ea:	6123      	str	r3, [r4, #16]
 800e4ec:	dc02      	bgt.n	800e4f4 <_printf_float+0x168>
 800e4ee:	6822      	ldr	r2, [r4, #0]
 800e4f0:	07d2      	lsls	r2, r2, #31
 800e4f2:	d501      	bpl.n	800e4f8 <_printf_float+0x16c>
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	6123      	str	r3, [r4, #16]
 800e4f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d09c      	beq.n	800e43a <_printf_float+0xae>
 800e500:	232d      	movs	r3, #45	; 0x2d
 800e502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e506:	e798      	b.n	800e43a <_printf_float+0xae>
 800e508:	9a06      	ldr	r2, [sp, #24]
 800e50a:	2a47      	cmp	r2, #71	; 0x47
 800e50c:	d1be      	bne.n	800e48c <_printf_float+0x100>
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1bc      	bne.n	800e48c <_printf_float+0x100>
 800e512:	2301      	movs	r3, #1
 800e514:	e7b9      	b.n	800e48a <_printf_float+0xfe>
 800e516:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e51a:	d118      	bne.n	800e54e <_printf_float+0x1c2>
 800e51c:	2900      	cmp	r1, #0
 800e51e:	6863      	ldr	r3, [r4, #4]
 800e520:	dd0b      	ble.n	800e53a <_printf_float+0x1ae>
 800e522:	6121      	str	r1, [r4, #16]
 800e524:	b913      	cbnz	r3, 800e52c <_printf_float+0x1a0>
 800e526:	6822      	ldr	r2, [r4, #0]
 800e528:	07d0      	lsls	r0, r2, #31
 800e52a:	d502      	bpl.n	800e532 <_printf_float+0x1a6>
 800e52c:	3301      	adds	r3, #1
 800e52e:	440b      	add	r3, r1
 800e530:	6123      	str	r3, [r4, #16]
 800e532:	65a1      	str	r1, [r4, #88]	; 0x58
 800e534:	f04f 0900 	mov.w	r9, #0
 800e538:	e7de      	b.n	800e4f8 <_printf_float+0x16c>
 800e53a:	b913      	cbnz	r3, 800e542 <_printf_float+0x1b6>
 800e53c:	6822      	ldr	r2, [r4, #0]
 800e53e:	07d2      	lsls	r2, r2, #31
 800e540:	d501      	bpl.n	800e546 <_printf_float+0x1ba>
 800e542:	3302      	adds	r3, #2
 800e544:	e7f4      	b.n	800e530 <_printf_float+0x1a4>
 800e546:	2301      	movs	r3, #1
 800e548:	e7f2      	b.n	800e530 <_printf_float+0x1a4>
 800e54a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e550:	4299      	cmp	r1, r3
 800e552:	db05      	blt.n	800e560 <_printf_float+0x1d4>
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	6121      	str	r1, [r4, #16]
 800e558:	07d8      	lsls	r0, r3, #31
 800e55a:	d5ea      	bpl.n	800e532 <_printf_float+0x1a6>
 800e55c:	1c4b      	adds	r3, r1, #1
 800e55e:	e7e7      	b.n	800e530 <_printf_float+0x1a4>
 800e560:	2900      	cmp	r1, #0
 800e562:	bfd4      	ite	le
 800e564:	f1c1 0202 	rsble	r2, r1, #2
 800e568:	2201      	movgt	r2, #1
 800e56a:	4413      	add	r3, r2
 800e56c:	e7e0      	b.n	800e530 <_printf_float+0x1a4>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	055a      	lsls	r2, r3, #21
 800e572:	d407      	bmi.n	800e584 <_printf_float+0x1f8>
 800e574:	6923      	ldr	r3, [r4, #16]
 800e576:	4642      	mov	r2, r8
 800e578:	4631      	mov	r1, r6
 800e57a:	4628      	mov	r0, r5
 800e57c:	47b8      	blx	r7
 800e57e:	3001      	adds	r0, #1
 800e580:	d12c      	bne.n	800e5dc <_printf_float+0x250>
 800e582:	e764      	b.n	800e44e <_printf_float+0xc2>
 800e584:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e588:	f240 80e0 	bls.w	800e74c <_printf_float+0x3c0>
 800e58c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e590:	2200      	movs	r2, #0
 800e592:	2300      	movs	r3, #0
 800e594:	f7f2 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 800e598:	2800      	cmp	r0, #0
 800e59a:	d034      	beq.n	800e606 <_printf_float+0x27a>
 800e59c:	4a37      	ldr	r2, [pc, #220]	; (800e67c <_printf_float+0x2f0>)
 800e59e:	2301      	movs	r3, #1
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f43f af51 	beq.w	800e44e <_printf_float+0xc2>
 800e5ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	db02      	blt.n	800e5ba <_printf_float+0x22e>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	07d8      	lsls	r0, r3, #31
 800e5b8:	d510      	bpl.n	800e5dc <_printf_float+0x250>
 800e5ba:	ee18 3a10 	vmov	r3, s16
 800e5be:	4652      	mov	r2, sl
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	47b8      	blx	r7
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	f43f af41 	beq.w	800e44e <_printf_float+0xc2>
 800e5cc:	f04f 0800 	mov.w	r8, #0
 800e5d0:	f104 091a 	add.w	r9, r4, #26
 800e5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	4543      	cmp	r3, r8
 800e5da:	dc09      	bgt.n	800e5f0 <_printf_float+0x264>
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	079b      	lsls	r3, r3, #30
 800e5e0:	f100 8105 	bmi.w	800e7ee <_printf_float+0x462>
 800e5e4:	68e0      	ldr	r0, [r4, #12]
 800e5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5e8:	4298      	cmp	r0, r3
 800e5ea:	bfb8      	it	lt
 800e5ec:	4618      	movlt	r0, r3
 800e5ee:	e730      	b.n	800e452 <_printf_float+0xc6>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	464a      	mov	r2, r9
 800e5f4:	4631      	mov	r1, r6
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	47b8      	blx	r7
 800e5fa:	3001      	adds	r0, #1
 800e5fc:	f43f af27 	beq.w	800e44e <_printf_float+0xc2>
 800e600:	f108 0801 	add.w	r8, r8, #1
 800e604:	e7e6      	b.n	800e5d4 <_printf_float+0x248>
 800e606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dc39      	bgt.n	800e680 <_printf_float+0x2f4>
 800e60c:	4a1b      	ldr	r2, [pc, #108]	; (800e67c <_printf_float+0x2f0>)
 800e60e:	2301      	movs	r3, #1
 800e610:	4631      	mov	r1, r6
 800e612:	4628      	mov	r0, r5
 800e614:	47b8      	blx	r7
 800e616:	3001      	adds	r0, #1
 800e618:	f43f af19 	beq.w	800e44e <_printf_float+0xc2>
 800e61c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e620:	4313      	orrs	r3, r2
 800e622:	d102      	bne.n	800e62a <_printf_float+0x29e>
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	07d9      	lsls	r1, r3, #31
 800e628:	d5d8      	bpl.n	800e5dc <_printf_float+0x250>
 800e62a:	ee18 3a10 	vmov	r3, s16
 800e62e:	4652      	mov	r2, sl
 800e630:	4631      	mov	r1, r6
 800e632:	4628      	mov	r0, r5
 800e634:	47b8      	blx	r7
 800e636:	3001      	adds	r0, #1
 800e638:	f43f af09 	beq.w	800e44e <_printf_float+0xc2>
 800e63c:	f04f 0900 	mov.w	r9, #0
 800e640:	f104 0a1a 	add.w	sl, r4, #26
 800e644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e646:	425b      	negs	r3, r3
 800e648:	454b      	cmp	r3, r9
 800e64a:	dc01      	bgt.n	800e650 <_printf_float+0x2c4>
 800e64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64e:	e792      	b.n	800e576 <_printf_float+0x1ea>
 800e650:	2301      	movs	r3, #1
 800e652:	4652      	mov	r2, sl
 800e654:	4631      	mov	r1, r6
 800e656:	4628      	mov	r0, r5
 800e658:	47b8      	blx	r7
 800e65a:	3001      	adds	r0, #1
 800e65c:	f43f aef7 	beq.w	800e44e <_printf_float+0xc2>
 800e660:	f109 0901 	add.w	r9, r9, #1
 800e664:	e7ee      	b.n	800e644 <_printf_float+0x2b8>
 800e666:	bf00      	nop
 800e668:	7fefffff 	.word	0x7fefffff
 800e66c:	080112f4 	.word	0x080112f4
 800e670:	080112f8 	.word	0x080112f8
 800e674:	08011300 	.word	0x08011300
 800e678:	080112fc 	.word	0x080112fc
 800e67c:	08011304 	.word	0x08011304
 800e680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e684:	429a      	cmp	r2, r3
 800e686:	bfa8      	it	ge
 800e688:	461a      	movge	r2, r3
 800e68a:	2a00      	cmp	r2, #0
 800e68c:	4691      	mov	r9, r2
 800e68e:	dc37      	bgt.n	800e700 <_printf_float+0x374>
 800e690:	f04f 0b00 	mov.w	fp, #0
 800e694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e698:	f104 021a 	add.w	r2, r4, #26
 800e69c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e69e:	9305      	str	r3, [sp, #20]
 800e6a0:	eba3 0309 	sub.w	r3, r3, r9
 800e6a4:	455b      	cmp	r3, fp
 800e6a6:	dc33      	bgt.n	800e710 <_printf_float+0x384>
 800e6a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	db3b      	blt.n	800e728 <_printf_float+0x39c>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	07da      	lsls	r2, r3, #31
 800e6b4:	d438      	bmi.n	800e728 <_printf_float+0x39c>
 800e6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6b8:	9a05      	ldr	r2, [sp, #20]
 800e6ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6bc:	1a9a      	subs	r2, r3, r2
 800e6be:	eba3 0901 	sub.w	r9, r3, r1
 800e6c2:	4591      	cmp	r9, r2
 800e6c4:	bfa8      	it	ge
 800e6c6:	4691      	movge	r9, r2
 800e6c8:	f1b9 0f00 	cmp.w	r9, #0
 800e6cc:	dc35      	bgt.n	800e73a <_printf_float+0x3ae>
 800e6ce:	f04f 0800 	mov.w	r8, #0
 800e6d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6d6:	f104 0a1a 	add.w	sl, r4, #26
 800e6da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6de:	1a9b      	subs	r3, r3, r2
 800e6e0:	eba3 0309 	sub.w	r3, r3, r9
 800e6e4:	4543      	cmp	r3, r8
 800e6e6:	f77f af79 	ble.w	800e5dc <_printf_float+0x250>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	4652      	mov	r2, sl
 800e6ee:	4631      	mov	r1, r6
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	47b8      	blx	r7
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	f43f aeaa 	beq.w	800e44e <_printf_float+0xc2>
 800e6fa:	f108 0801 	add.w	r8, r8, #1
 800e6fe:	e7ec      	b.n	800e6da <_printf_float+0x34e>
 800e700:	4613      	mov	r3, r2
 800e702:	4631      	mov	r1, r6
 800e704:	4642      	mov	r2, r8
 800e706:	4628      	mov	r0, r5
 800e708:	47b8      	blx	r7
 800e70a:	3001      	adds	r0, #1
 800e70c:	d1c0      	bne.n	800e690 <_printf_float+0x304>
 800e70e:	e69e      	b.n	800e44e <_printf_float+0xc2>
 800e710:	2301      	movs	r3, #1
 800e712:	4631      	mov	r1, r6
 800e714:	4628      	mov	r0, r5
 800e716:	9205      	str	r2, [sp, #20]
 800e718:	47b8      	blx	r7
 800e71a:	3001      	adds	r0, #1
 800e71c:	f43f ae97 	beq.w	800e44e <_printf_float+0xc2>
 800e720:	9a05      	ldr	r2, [sp, #20]
 800e722:	f10b 0b01 	add.w	fp, fp, #1
 800e726:	e7b9      	b.n	800e69c <_printf_float+0x310>
 800e728:	ee18 3a10 	vmov	r3, s16
 800e72c:	4652      	mov	r2, sl
 800e72e:	4631      	mov	r1, r6
 800e730:	4628      	mov	r0, r5
 800e732:	47b8      	blx	r7
 800e734:	3001      	adds	r0, #1
 800e736:	d1be      	bne.n	800e6b6 <_printf_float+0x32a>
 800e738:	e689      	b.n	800e44e <_printf_float+0xc2>
 800e73a:	9a05      	ldr	r2, [sp, #20]
 800e73c:	464b      	mov	r3, r9
 800e73e:	4442      	add	r2, r8
 800e740:	4631      	mov	r1, r6
 800e742:	4628      	mov	r0, r5
 800e744:	47b8      	blx	r7
 800e746:	3001      	adds	r0, #1
 800e748:	d1c1      	bne.n	800e6ce <_printf_float+0x342>
 800e74a:	e680      	b.n	800e44e <_printf_float+0xc2>
 800e74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e74e:	2a01      	cmp	r2, #1
 800e750:	dc01      	bgt.n	800e756 <_printf_float+0x3ca>
 800e752:	07db      	lsls	r3, r3, #31
 800e754:	d538      	bpl.n	800e7c8 <_printf_float+0x43c>
 800e756:	2301      	movs	r3, #1
 800e758:	4642      	mov	r2, r8
 800e75a:	4631      	mov	r1, r6
 800e75c:	4628      	mov	r0, r5
 800e75e:	47b8      	blx	r7
 800e760:	3001      	adds	r0, #1
 800e762:	f43f ae74 	beq.w	800e44e <_printf_float+0xc2>
 800e766:	ee18 3a10 	vmov	r3, s16
 800e76a:	4652      	mov	r2, sl
 800e76c:	4631      	mov	r1, r6
 800e76e:	4628      	mov	r0, r5
 800e770:	47b8      	blx	r7
 800e772:	3001      	adds	r0, #1
 800e774:	f43f ae6b 	beq.w	800e44e <_printf_float+0xc2>
 800e778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e77c:	2200      	movs	r2, #0
 800e77e:	2300      	movs	r3, #0
 800e780:	f7f2 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e784:	b9d8      	cbnz	r0, 800e7be <_printf_float+0x432>
 800e786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e788:	f108 0201 	add.w	r2, r8, #1
 800e78c:	3b01      	subs	r3, #1
 800e78e:	4631      	mov	r1, r6
 800e790:	4628      	mov	r0, r5
 800e792:	47b8      	blx	r7
 800e794:	3001      	adds	r0, #1
 800e796:	d10e      	bne.n	800e7b6 <_printf_float+0x42a>
 800e798:	e659      	b.n	800e44e <_printf_float+0xc2>
 800e79a:	2301      	movs	r3, #1
 800e79c:	4652      	mov	r2, sl
 800e79e:	4631      	mov	r1, r6
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	47b8      	blx	r7
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	f43f ae52 	beq.w	800e44e <_printf_float+0xc2>
 800e7aa:	f108 0801 	add.w	r8, r8, #1
 800e7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	4543      	cmp	r3, r8
 800e7b4:	dcf1      	bgt.n	800e79a <_printf_float+0x40e>
 800e7b6:	464b      	mov	r3, r9
 800e7b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7bc:	e6dc      	b.n	800e578 <_printf_float+0x1ec>
 800e7be:	f04f 0800 	mov.w	r8, #0
 800e7c2:	f104 0a1a 	add.w	sl, r4, #26
 800e7c6:	e7f2      	b.n	800e7ae <_printf_float+0x422>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	4642      	mov	r2, r8
 800e7cc:	e7df      	b.n	800e78e <_printf_float+0x402>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	464a      	mov	r2, r9
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	47b8      	blx	r7
 800e7d8:	3001      	adds	r0, #1
 800e7da:	f43f ae38 	beq.w	800e44e <_printf_float+0xc2>
 800e7de:	f108 0801 	add.w	r8, r8, #1
 800e7e2:	68e3      	ldr	r3, [r4, #12]
 800e7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7e6:	1a5b      	subs	r3, r3, r1
 800e7e8:	4543      	cmp	r3, r8
 800e7ea:	dcf0      	bgt.n	800e7ce <_printf_float+0x442>
 800e7ec:	e6fa      	b.n	800e5e4 <_printf_float+0x258>
 800e7ee:	f04f 0800 	mov.w	r8, #0
 800e7f2:	f104 0919 	add.w	r9, r4, #25
 800e7f6:	e7f4      	b.n	800e7e2 <_printf_float+0x456>

0800e7f8 <_printf_common>:
 800e7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fc:	4616      	mov	r6, r2
 800e7fe:	4699      	mov	r9, r3
 800e800:	688a      	ldr	r2, [r1, #8]
 800e802:	690b      	ldr	r3, [r1, #16]
 800e804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e808:	4293      	cmp	r3, r2
 800e80a:	bfb8      	it	lt
 800e80c:	4613      	movlt	r3, r2
 800e80e:	6033      	str	r3, [r6, #0]
 800e810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e814:	4607      	mov	r7, r0
 800e816:	460c      	mov	r4, r1
 800e818:	b10a      	cbz	r2, 800e81e <_printf_common+0x26>
 800e81a:	3301      	adds	r3, #1
 800e81c:	6033      	str	r3, [r6, #0]
 800e81e:	6823      	ldr	r3, [r4, #0]
 800e820:	0699      	lsls	r1, r3, #26
 800e822:	bf42      	ittt	mi
 800e824:	6833      	ldrmi	r3, [r6, #0]
 800e826:	3302      	addmi	r3, #2
 800e828:	6033      	strmi	r3, [r6, #0]
 800e82a:	6825      	ldr	r5, [r4, #0]
 800e82c:	f015 0506 	ands.w	r5, r5, #6
 800e830:	d106      	bne.n	800e840 <_printf_common+0x48>
 800e832:	f104 0a19 	add.w	sl, r4, #25
 800e836:	68e3      	ldr	r3, [r4, #12]
 800e838:	6832      	ldr	r2, [r6, #0]
 800e83a:	1a9b      	subs	r3, r3, r2
 800e83c:	42ab      	cmp	r3, r5
 800e83e:	dc26      	bgt.n	800e88e <_printf_common+0x96>
 800e840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e844:	1e13      	subs	r3, r2, #0
 800e846:	6822      	ldr	r2, [r4, #0]
 800e848:	bf18      	it	ne
 800e84a:	2301      	movne	r3, #1
 800e84c:	0692      	lsls	r2, r2, #26
 800e84e:	d42b      	bmi.n	800e8a8 <_printf_common+0xb0>
 800e850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e854:	4649      	mov	r1, r9
 800e856:	4638      	mov	r0, r7
 800e858:	47c0      	blx	r8
 800e85a:	3001      	adds	r0, #1
 800e85c:	d01e      	beq.n	800e89c <_printf_common+0xa4>
 800e85e:	6823      	ldr	r3, [r4, #0]
 800e860:	68e5      	ldr	r5, [r4, #12]
 800e862:	6832      	ldr	r2, [r6, #0]
 800e864:	f003 0306 	and.w	r3, r3, #6
 800e868:	2b04      	cmp	r3, #4
 800e86a:	bf08      	it	eq
 800e86c:	1aad      	subeq	r5, r5, r2
 800e86e:	68a3      	ldr	r3, [r4, #8]
 800e870:	6922      	ldr	r2, [r4, #16]
 800e872:	bf0c      	ite	eq
 800e874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e878:	2500      	movne	r5, #0
 800e87a:	4293      	cmp	r3, r2
 800e87c:	bfc4      	itt	gt
 800e87e:	1a9b      	subgt	r3, r3, r2
 800e880:	18ed      	addgt	r5, r5, r3
 800e882:	2600      	movs	r6, #0
 800e884:	341a      	adds	r4, #26
 800e886:	42b5      	cmp	r5, r6
 800e888:	d11a      	bne.n	800e8c0 <_printf_common+0xc8>
 800e88a:	2000      	movs	r0, #0
 800e88c:	e008      	b.n	800e8a0 <_printf_common+0xa8>
 800e88e:	2301      	movs	r3, #1
 800e890:	4652      	mov	r2, sl
 800e892:	4649      	mov	r1, r9
 800e894:	4638      	mov	r0, r7
 800e896:	47c0      	blx	r8
 800e898:	3001      	adds	r0, #1
 800e89a:	d103      	bne.n	800e8a4 <_printf_common+0xac>
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a4:	3501      	adds	r5, #1
 800e8a6:	e7c6      	b.n	800e836 <_printf_common+0x3e>
 800e8a8:	18e1      	adds	r1, r4, r3
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	2030      	movs	r0, #48	; 0x30
 800e8ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8b2:	4422      	add	r2, r4
 800e8b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8bc:	3302      	adds	r3, #2
 800e8be:	e7c7      	b.n	800e850 <_printf_common+0x58>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	4649      	mov	r1, r9
 800e8c6:	4638      	mov	r0, r7
 800e8c8:	47c0      	blx	r8
 800e8ca:	3001      	adds	r0, #1
 800e8cc:	d0e6      	beq.n	800e89c <_printf_common+0xa4>
 800e8ce:	3601      	adds	r6, #1
 800e8d0:	e7d9      	b.n	800e886 <_printf_common+0x8e>
	...

0800e8d4 <_printf_i>:
 800e8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d8:	7e0f      	ldrb	r7, [r1, #24]
 800e8da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8dc:	2f78      	cmp	r7, #120	; 0x78
 800e8de:	4691      	mov	r9, r2
 800e8e0:	4680      	mov	r8, r0
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	469a      	mov	sl, r3
 800e8e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8ea:	d807      	bhi.n	800e8fc <_printf_i+0x28>
 800e8ec:	2f62      	cmp	r7, #98	; 0x62
 800e8ee:	d80a      	bhi.n	800e906 <_printf_i+0x32>
 800e8f0:	2f00      	cmp	r7, #0
 800e8f2:	f000 80d8 	beq.w	800eaa6 <_printf_i+0x1d2>
 800e8f6:	2f58      	cmp	r7, #88	; 0x58
 800e8f8:	f000 80a3 	beq.w	800ea42 <_printf_i+0x16e>
 800e8fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e904:	e03a      	b.n	800e97c <_printf_i+0xa8>
 800e906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e90a:	2b15      	cmp	r3, #21
 800e90c:	d8f6      	bhi.n	800e8fc <_printf_i+0x28>
 800e90e:	a101      	add	r1, pc, #4	; (adr r1, 800e914 <_printf_i+0x40>)
 800e910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e914:	0800e96d 	.word	0x0800e96d
 800e918:	0800e981 	.word	0x0800e981
 800e91c:	0800e8fd 	.word	0x0800e8fd
 800e920:	0800e8fd 	.word	0x0800e8fd
 800e924:	0800e8fd 	.word	0x0800e8fd
 800e928:	0800e8fd 	.word	0x0800e8fd
 800e92c:	0800e981 	.word	0x0800e981
 800e930:	0800e8fd 	.word	0x0800e8fd
 800e934:	0800e8fd 	.word	0x0800e8fd
 800e938:	0800e8fd 	.word	0x0800e8fd
 800e93c:	0800e8fd 	.word	0x0800e8fd
 800e940:	0800ea8d 	.word	0x0800ea8d
 800e944:	0800e9b1 	.word	0x0800e9b1
 800e948:	0800ea6f 	.word	0x0800ea6f
 800e94c:	0800e8fd 	.word	0x0800e8fd
 800e950:	0800e8fd 	.word	0x0800e8fd
 800e954:	0800eaaf 	.word	0x0800eaaf
 800e958:	0800e8fd 	.word	0x0800e8fd
 800e95c:	0800e9b1 	.word	0x0800e9b1
 800e960:	0800e8fd 	.word	0x0800e8fd
 800e964:	0800e8fd 	.word	0x0800e8fd
 800e968:	0800ea77 	.word	0x0800ea77
 800e96c:	682b      	ldr	r3, [r5, #0]
 800e96e:	1d1a      	adds	r2, r3, #4
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	602a      	str	r2, [r5, #0]
 800e974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e97c:	2301      	movs	r3, #1
 800e97e:	e0a3      	b.n	800eac8 <_printf_i+0x1f4>
 800e980:	6820      	ldr	r0, [r4, #0]
 800e982:	6829      	ldr	r1, [r5, #0]
 800e984:	0606      	lsls	r6, r0, #24
 800e986:	f101 0304 	add.w	r3, r1, #4
 800e98a:	d50a      	bpl.n	800e9a2 <_printf_i+0xce>
 800e98c:	680e      	ldr	r6, [r1, #0]
 800e98e:	602b      	str	r3, [r5, #0]
 800e990:	2e00      	cmp	r6, #0
 800e992:	da03      	bge.n	800e99c <_printf_i+0xc8>
 800e994:	232d      	movs	r3, #45	; 0x2d
 800e996:	4276      	negs	r6, r6
 800e998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e99c:	485e      	ldr	r0, [pc, #376]	; (800eb18 <_printf_i+0x244>)
 800e99e:	230a      	movs	r3, #10
 800e9a0:	e019      	b.n	800e9d6 <_printf_i+0x102>
 800e9a2:	680e      	ldr	r6, [r1, #0]
 800e9a4:	602b      	str	r3, [r5, #0]
 800e9a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9aa:	bf18      	it	ne
 800e9ac:	b236      	sxthne	r6, r6
 800e9ae:	e7ef      	b.n	800e990 <_printf_i+0xbc>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	6820      	ldr	r0, [r4, #0]
 800e9b4:	1d19      	adds	r1, r3, #4
 800e9b6:	6029      	str	r1, [r5, #0]
 800e9b8:	0601      	lsls	r1, r0, #24
 800e9ba:	d501      	bpl.n	800e9c0 <_printf_i+0xec>
 800e9bc:	681e      	ldr	r6, [r3, #0]
 800e9be:	e002      	b.n	800e9c6 <_printf_i+0xf2>
 800e9c0:	0646      	lsls	r6, r0, #25
 800e9c2:	d5fb      	bpl.n	800e9bc <_printf_i+0xe8>
 800e9c4:	881e      	ldrh	r6, [r3, #0]
 800e9c6:	4854      	ldr	r0, [pc, #336]	; (800eb18 <_printf_i+0x244>)
 800e9c8:	2f6f      	cmp	r7, #111	; 0x6f
 800e9ca:	bf0c      	ite	eq
 800e9cc:	2308      	moveq	r3, #8
 800e9ce:	230a      	movne	r3, #10
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9d6:	6865      	ldr	r5, [r4, #4]
 800e9d8:	60a5      	str	r5, [r4, #8]
 800e9da:	2d00      	cmp	r5, #0
 800e9dc:	bfa2      	ittt	ge
 800e9de:	6821      	ldrge	r1, [r4, #0]
 800e9e0:	f021 0104 	bicge.w	r1, r1, #4
 800e9e4:	6021      	strge	r1, [r4, #0]
 800e9e6:	b90e      	cbnz	r6, 800e9ec <_printf_i+0x118>
 800e9e8:	2d00      	cmp	r5, #0
 800e9ea:	d04d      	beq.n	800ea88 <_printf_i+0x1b4>
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9f2:	fb03 6711 	mls	r7, r3, r1, r6
 800e9f6:	5dc7      	ldrb	r7, [r0, r7]
 800e9f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9fc:	4637      	mov	r7, r6
 800e9fe:	42bb      	cmp	r3, r7
 800ea00:	460e      	mov	r6, r1
 800ea02:	d9f4      	bls.n	800e9ee <_printf_i+0x11a>
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	d10b      	bne.n	800ea20 <_printf_i+0x14c>
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	07de      	lsls	r6, r3, #31
 800ea0c:	d508      	bpl.n	800ea20 <_printf_i+0x14c>
 800ea0e:	6923      	ldr	r3, [r4, #16]
 800ea10:	6861      	ldr	r1, [r4, #4]
 800ea12:	4299      	cmp	r1, r3
 800ea14:	bfde      	ittt	le
 800ea16:	2330      	movle	r3, #48	; 0x30
 800ea18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea20:	1b52      	subs	r2, r2, r5
 800ea22:	6122      	str	r2, [r4, #16]
 800ea24:	f8cd a000 	str.w	sl, [sp]
 800ea28:	464b      	mov	r3, r9
 800ea2a:	aa03      	add	r2, sp, #12
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	4640      	mov	r0, r8
 800ea30:	f7ff fee2 	bl	800e7f8 <_printf_common>
 800ea34:	3001      	adds	r0, #1
 800ea36:	d14c      	bne.n	800ead2 <_printf_i+0x1fe>
 800ea38:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3c:	b004      	add	sp, #16
 800ea3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea42:	4835      	ldr	r0, [pc, #212]	; (800eb18 <_printf_i+0x244>)
 800ea44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea48:	6829      	ldr	r1, [r5, #0]
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea50:	6029      	str	r1, [r5, #0]
 800ea52:	061d      	lsls	r5, r3, #24
 800ea54:	d514      	bpl.n	800ea80 <_printf_i+0x1ac>
 800ea56:	07df      	lsls	r7, r3, #31
 800ea58:	bf44      	itt	mi
 800ea5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ea5e:	6023      	strmi	r3, [r4, #0]
 800ea60:	b91e      	cbnz	r6, 800ea6a <_printf_i+0x196>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	f023 0320 	bic.w	r3, r3, #32
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	2310      	movs	r3, #16
 800ea6c:	e7b0      	b.n	800e9d0 <_printf_i+0xfc>
 800ea6e:	6823      	ldr	r3, [r4, #0]
 800ea70:	f043 0320 	orr.w	r3, r3, #32
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	2378      	movs	r3, #120	; 0x78
 800ea78:	4828      	ldr	r0, [pc, #160]	; (800eb1c <_printf_i+0x248>)
 800ea7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea7e:	e7e3      	b.n	800ea48 <_printf_i+0x174>
 800ea80:	0659      	lsls	r1, r3, #25
 800ea82:	bf48      	it	mi
 800ea84:	b2b6      	uxthmi	r6, r6
 800ea86:	e7e6      	b.n	800ea56 <_printf_i+0x182>
 800ea88:	4615      	mov	r5, r2
 800ea8a:	e7bb      	b.n	800ea04 <_printf_i+0x130>
 800ea8c:	682b      	ldr	r3, [r5, #0]
 800ea8e:	6826      	ldr	r6, [r4, #0]
 800ea90:	6961      	ldr	r1, [r4, #20]
 800ea92:	1d18      	adds	r0, r3, #4
 800ea94:	6028      	str	r0, [r5, #0]
 800ea96:	0635      	lsls	r5, r6, #24
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	d501      	bpl.n	800eaa0 <_printf_i+0x1cc>
 800ea9c:	6019      	str	r1, [r3, #0]
 800ea9e:	e002      	b.n	800eaa6 <_printf_i+0x1d2>
 800eaa0:	0670      	lsls	r0, r6, #25
 800eaa2:	d5fb      	bpl.n	800ea9c <_printf_i+0x1c8>
 800eaa4:	8019      	strh	r1, [r3, #0]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	6123      	str	r3, [r4, #16]
 800eaaa:	4615      	mov	r5, r2
 800eaac:	e7ba      	b.n	800ea24 <_printf_i+0x150>
 800eaae:	682b      	ldr	r3, [r5, #0]
 800eab0:	1d1a      	adds	r2, r3, #4
 800eab2:	602a      	str	r2, [r5, #0]
 800eab4:	681d      	ldr	r5, [r3, #0]
 800eab6:	6862      	ldr	r2, [r4, #4]
 800eab8:	2100      	movs	r1, #0
 800eaba:	4628      	mov	r0, r5
 800eabc:	f7f1 fb90 	bl	80001e0 <memchr>
 800eac0:	b108      	cbz	r0, 800eac6 <_printf_i+0x1f2>
 800eac2:	1b40      	subs	r0, r0, r5
 800eac4:	6060      	str	r0, [r4, #4]
 800eac6:	6863      	ldr	r3, [r4, #4]
 800eac8:	6123      	str	r3, [r4, #16]
 800eaca:	2300      	movs	r3, #0
 800eacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ead0:	e7a8      	b.n	800ea24 <_printf_i+0x150>
 800ead2:	6923      	ldr	r3, [r4, #16]
 800ead4:	462a      	mov	r2, r5
 800ead6:	4649      	mov	r1, r9
 800ead8:	4640      	mov	r0, r8
 800eada:	47d0      	blx	sl
 800eadc:	3001      	adds	r0, #1
 800eade:	d0ab      	beq.n	800ea38 <_printf_i+0x164>
 800eae0:	6823      	ldr	r3, [r4, #0]
 800eae2:	079b      	lsls	r3, r3, #30
 800eae4:	d413      	bmi.n	800eb0e <_printf_i+0x23a>
 800eae6:	68e0      	ldr	r0, [r4, #12]
 800eae8:	9b03      	ldr	r3, [sp, #12]
 800eaea:	4298      	cmp	r0, r3
 800eaec:	bfb8      	it	lt
 800eaee:	4618      	movlt	r0, r3
 800eaf0:	e7a4      	b.n	800ea3c <_printf_i+0x168>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	4649      	mov	r1, r9
 800eaf8:	4640      	mov	r0, r8
 800eafa:	47d0      	blx	sl
 800eafc:	3001      	adds	r0, #1
 800eafe:	d09b      	beq.n	800ea38 <_printf_i+0x164>
 800eb00:	3501      	adds	r5, #1
 800eb02:	68e3      	ldr	r3, [r4, #12]
 800eb04:	9903      	ldr	r1, [sp, #12]
 800eb06:	1a5b      	subs	r3, r3, r1
 800eb08:	42ab      	cmp	r3, r5
 800eb0a:	dcf2      	bgt.n	800eaf2 <_printf_i+0x21e>
 800eb0c:	e7eb      	b.n	800eae6 <_printf_i+0x212>
 800eb0e:	2500      	movs	r5, #0
 800eb10:	f104 0619 	add.w	r6, r4, #25
 800eb14:	e7f5      	b.n	800eb02 <_printf_i+0x22e>
 800eb16:	bf00      	nop
 800eb18:	08011306 	.word	0x08011306
 800eb1c:	08011317 	.word	0x08011317

0800eb20 <_sbrk_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	; (800eb3c <_sbrk_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f7f6 fcc2 	bl	80054b4 <_sbrk>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_sbrk_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_sbrk_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	20001538 	.word	0x20001538

0800eb40 <siprintf>:
 800eb40:	b40e      	push	{r1, r2, r3}
 800eb42:	b500      	push	{lr}
 800eb44:	b09c      	sub	sp, #112	; 0x70
 800eb46:	ab1d      	add	r3, sp, #116	; 0x74
 800eb48:	9002      	str	r0, [sp, #8]
 800eb4a:	9006      	str	r0, [sp, #24]
 800eb4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb50:	4809      	ldr	r0, [pc, #36]	; (800eb78 <siprintf+0x38>)
 800eb52:	9107      	str	r1, [sp, #28]
 800eb54:	9104      	str	r1, [sp, #16]
 800eb56:	4909      	ldr	r1, [pc, #36]	; (800eb7c <siprintf+0x3c>)
 800eb58:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb5c:	9105      	str	r1, [sp, #20]
 800eb5e:	6800      	ldr	r0, [r0, #0]
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	a902      	add	r1, sp, #8
 800eb64:	f001 fa8c 	bl	8010080 <_svfiprintf_r>
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	701a      	strb	r2, [r3, #0]
 800eb6e:	b01c      	add	sp, #112	; 0x70
 800eb70:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb74:	b003      	add	sp, #12
 800eb76:	4770      	bx	lr
 800eb78:	2000032c 	.word	0x2000032c
 800eb7c:	ffff0208 	.word	0xffff0208

0800eb80 <quorem>:
 800eb80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	6903      	ldr	r3, [r0, #16]
 800eb86:	690c      	ldr	r4, [r1, #16]
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	4607      	mov	r7, r0
 800eb8c:	f2c0 8081 	blt.w	800ec92 <quorem+0x112>
 800eb90:	3c01      	subs	r4, #1
 800eb92:	f101 0814 	add.w	r8, r1, #20
 800eb96:	f100 0514 	add.w	r5, r0, #20
 800eb9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb9e:	9301      	str	r3, [sp, #4]
 800eba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebb8:	d331      	bcc.n	800ec1e <quorem+0x9e>
 800ebba:	f04f 0e00 	mov.w	lr, #0
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	46ac      	mov	ip, r5
 800ebc2:	46f2      	mov	sl, lr
 800ebc4:	f850 2b04 	ldr.w	r2, [r0], #4
 800ebc8:	b293      	uxth	r3, r2
 800ebca:	fb06 e303 	mla	r3, r6, r3, lr
 800ebce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	ebaa 0303 	sub.w	r3, sl, r3
 800ebd8:	f8dc a000 	ldr.w	sl, [ip]
 800ebdc:	0c12      	lsrs	r2, r2, #16
 800ebde:	fa13 f38a 	uxtah	r3, r3, sl
 800ebe2:	fb06 e202 	mla	r2, r6, r2, lr
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	9b00      	ldr	r3, [sp, #0]
 800ebea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ebee:	b292      	uxth	r2, r2
 800ebf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ebf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ebf8:	f8bd 3000 	ldrh.w	r3, [sp]
 800ebfc:	4581      	cmp	r9, r0
 800ebfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec02:	f84c 3b04 	str.w	r3, [ip], #4
 800ec06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec0a:	d2db      	bcs.n	800ebc4 <quorem+0x44>
 800ec0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec10:	b92b      	cbnz	r3, 800ec1e <quorem+0x9e>
 800ec12:	9b01      	ldr	r3, [sp, #4]
 800ec14:	3b04      	subs	r3, #4
 800ec16:	429d      	cmp	r5, r3
 800ec18:	461a      	mov	r2, r3
 800ec1a:	d32e      	bcc.n	800ec7a <quorem+0xfa>
 800ec1c:	613c      	str	r4, [r7, #16]
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f001 f8ba 	bl	800fd98 <__mcmp>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	db24      	blt.n	800ec72 <quorem+0xf2>
 800ec28:	3601      	adds	r6, #1
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f04f 0c00 	mov.w	ip, #0
 800ec30:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec34:	f8d0 e000 	ldr.w	lr, [r0]
 800ec38:	b293      	uxth	r3, r2
 800ec3a:	ebac 0303 	sub.w	r3, ip, r3
 800ec3e:	0c12      	lsrs	r2, r2, #16
 800ec40:	fa13 f38e 	uxtah	r3, r3, lr
 800ec44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec52:	45c1      	cmp	r9, r8
 800ec54:	f840 3b04 	str.w	r3, [r0], #4
 800ec58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ec5c:	d2e8      	bcs.n	800ec30 <quorem+0xb0>
 800ec5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec66:	b922      	cbnz	r2, 800ec72 <quorem+0xf2>
 800ec68:	3b04      	subs	r3, #4
 800ec6a:	429d      	cmp	r5, r3
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	d30a      	bcc.n	800ec86 <quorem+0x106>
 800ec70:	613c      	str	r4, [r7, #16]
 800ec72:	4630      	mov	r0, r6
 800ec74:	b003      	add	sp, #12
 800ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7a:	6812      	ldr	r2, [r2, #0]
 800ec7c:	3b04      	subs	r3, #4
 800ec7e:	2a00      	cmp	r2, #0
 800ec80:	d1cc      	bne.n	800ec1c <quorem+0x9c>
 800ec82:	3c01      	subs	r4, #1
 800ec84:	e7c7      	b.n	800ec16 <quorem+0x96>
 800ec86:	6812      	ldr	r2, [r2, #0]
 800ec88:	3b04      	subs	r3, #4
 800ec8a:	2a00      	cmp	r2, #0
 800ec8c:	d1f0      	bne.n	800ec70 <quorem+0xf0>
 800ec8e:	3c01      	subs	r4, #1
 800ec90:	e7eb      	b.n	800ec6a <quorem+0xea>
 800ec92:	2000      	movs	r0, #0
 800ec94:	e7ee      	b.n	800ec74 <quorem+0xf4>
	...

0800ec98 <_dtoa_r>:
 800ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	ed2d 8b04 	vpush	{d8-d9}
 800eca0:	ec57 6b10 	vmov	r6, r7, d0
 800eca4:	b093      	sub	sp, #76	; 0x4c
 800eca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ecac:	9106      	str	r1, [sp, #24]
 800ecae:	ee10 aa10 	vmov	sl, s0
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	9209      	str	r2, [sp, #36]	; 0x24
 800ecb6:	930c      	str	r3, [sp, #48]	; 0x30
 800ecb8:	46bb      	mov	fp, r7
 800ecba:	b975      	cbnz	r5, 800ecda <_dtoa_r+0x42>
 800ecbc:	2010      	movs	r0, #16
 800ecbe:	f7ff f9bf 	bl	800e040 <malloc>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	6260      	str	r0, [r4, #36]	; 0x24
 800ecc6:	b920      	cbnz	r0, 800ecd2 <_dtoa_r+0x3a>
 800ecc8:	4ba7      	ldr	r3, [pc, #668]	; (800ef68 <_dtoa_r+0x2d0>)
 800ecca:	21ea      	movs	r1, #234	; 0xea
 800eccc:	48a7      	ldr	r0, [pc, #668]	; (800ef6c <_dtoa_r+0x2d4>)
 800ecce:	f001 fad7 	bl	8010280 <__assert_func>
 800ecd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ecd6:	6005      	str	r5, [r0, #0]
 800ecd8:	60c5      	str	r5, [r0, #12]
 800ecda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecdc:	6819      	ldr	r1, [r3, #0]
 800ecde:	b151      	cbz	r1, 800ecf6 <_dtoa_r+0x5e>
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	604a      	str	r2, [r1, #4]
 800ece4:	2301      	movs	r3, #1
 800ece6:	4093      	lsls	r3, r2
 800ece8:	608b      	str	r3, [r1, #8]
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fe12 	bl	800f914 <_Bfree>
 800ecf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	601a      	str	r2, [r3, #0]
 800ecf6:	1e3b      	subs	r3, r7, #0
 800ecf8:	bfaa      	itet	ge
 800ecfa:	2300      	movge	r3, #0
 800ecfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ed00:	f8c8 3000 	strge.w	r3, [r8]
 800ed04:	4b9a      	ldr	r3, [pc, #616]	; (800ef70 <_dtoa_r+0x2d8>)
 800ed06:	bfbc      	itt	lt
 800ed08:	2201      	movlt	r2, #1
 800ed0a:	f8c8 2000 	strlt.w	r2, [r8]
 800ed0e:	ea33 030b 	bics.w	r3, r3, fp
 800ed12:	d11b      	bne.n	800ed4c <_dtoa_r+0xb4>
 800ed14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed16:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed1a:	6013      	str	r3, [r2, #0]
 800ed1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed20:	4333      	orrs	r3, r6
 800ed22:	f000 8592 	beq.w	800f84a <_dtoa_r+0xbb2>
 800ed26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed28:	b963      	cbnz	r3, 800ed44 <_dtoa_r+0xac>
 800ed2a:	4b92      	ldr	r3, [pc, #584]	; (800ef74 <_dtoa_r+0x2dc>)
 800ed2c:	e022      	b.n	800ed74 <_dtoa_r+0xdc>
 800ed2e:	4b92      	ldr	r3, [pc, #584]	; (800ef78 <_dtoa_r+0x2e0>)
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	3308      	adds	r3, #8
 800ed34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	9801      	ldr	r0, [sp, #4]
 800ed3a:	b013      	add	sp, #76	; 0x4c
 800ed3c:	ecbd 8b04 	vpop	{d8-d9}
 800ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	4b8b      	ldr	r3, [pc, #556]	; (800ef74 <_dtoa_r+0x2dc>)
 800ed46:	9301      	str	r3, [sp, #4]
 800ed48:	3303      	adds	r3, #3
 800ed4a:	e7f3      	b.n	800ed34 <_dtoa_r+0x9c>
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2300      	movs	r3, #0
 800ed50:	4650      	mov	r0, sl
 800ed52:	4659      	mov	r1, fp
 800ed54:	f7f1 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed58:	ec4b ab19 	vmov	d9, sl, fp
 800ed5c:	4680      	mov	r8, r0
 800ed5e:	b158      	cbz	r0, 800ed78 <_dtoa_r+0xe0>
 800ed60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed62:	2301      	movs	r3, #1
 800ed64:	6013      	str	r3, [r2, #0]
 800ed66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 856b 	beq.w	800f844 <_dtoa_r+0xbac>
 800ed6e:	4883      	ldr	r0, [pc, #524]	; (800ef7c <_dtoa_r+0x2e4>)
 800ed70:	6018      	str	r0, [r3, #0]
 800ed72:	1e43      	subs	r3, r0, #1
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	e7df      	b.n	800ed38 <_dtoa_r+0xa0>
 800ed78:	ec4b ab10 	vmov	d0, sl, fp
 800ed7c:	aa10      	add	r2, sp, #64	; 0x40
 800ed7e:	a911      	add	r1, sp, #68	; 0x44
 800ed80:	4620      	mov	r0, r4
 800ed82:	f001 f8af 	bl	800fee4 <__d2b>
 800ed86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ed8a:	ee08 0a10 	vmov	s16, r0
 800ed8e:	2d00      	cmp	r5, #0
 800ed90:	f000 8084 	beq.w	800ee9c <_dtoa_r+0x204>
 800ed94:	ee19 3a90 	vmov	r3, s19
 800ed98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800eda0:	4656      	mov	r6, sl
 800eda2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800eda6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edaa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800edae:	4b74      	ldr	r3, [pc, #464]	; (800ef80 <_dtoa_r+0x2e8>)
 800edb0:	2200      	movs	r2, #0
 800edb2:	4630      	mov	r0, r6
 800edb4:	4639      	mov	r1, r7
 800edb6:	f7f1 fa67 	bl	8000288 <__aeabi_dsub>
 800edba:	a365      	add	r3, pc, #404	; (adr r3, 800ef50 <_dtoa_r+0x2b8>)
 800edbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	a364      	add	r3, pc, #400	; (adr r3, 800ef58 <_dtoa_r+0x2c0>)
 800edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edca:	f7f1 fa5f 	bl	800028c <__adddf3>
 800edce:	4606      	mov	r6, r0
 800edd0:	4628      	mov	r0, r5
 800edd2:	460f      	mov	r7, r1
 800edd4:	f7f1 fba6 	bl	8000524 <__aeabi_i2d>
 800edd8:	a361      	add	r3, pc, #388	; (adr r3, 800ef60 <_dtoa_r+0x2c8>)
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	f7f1 fc0b 	bl	80005f8 <__aeabi_dmul>
 800ede2:	4602      	mov	r2, r0
 800ede4:	460b      	mov	r3, r1
 800ede6:	4630      	mov	r0, r6
 800ede8:	4639      	mov	r1, r7
 800edea:	f7f1 fa4f 	bl	800028c <__adddf3>
 800edee:	4606      	mov	r6, r0
 800edf0:	460f      	mov	r7, r1
 800edf2:	f7f1 feb1 	bl	8000b58 <__aeabi_d2iz>
 800edf6:	2200      	movs	r2, #0
 800edf8:	9000      	str	r0, [sp, #0]
 800edfa:	2300      	movs	r3, #0
 800edfc:	4630      	mov	r0, r6
 800edfe:	4639      	mov	r1, r7
 800ee00:	f7f1 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ee04:	b150      	cbz	r0, 800ee1c <_dtoa_r+0x184>
 800ee06:	9800      	ldr	r0, [sp, #0]
 800ee08:	f7f1 fb8c 	bl	8000524 <__aeabi_i2d>
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	463b      	mov	r3, r7
 800ee10:	f7f1 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee14:	b910      	cbnz	r0, 800ee1c <_dtoa_r+0x184>
 800ee16:	9b00      	ldr	r3, [sp, #0]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	9b00      	ldr	r3, [sp, #0]
 800ee1e:	2b16      	cmp	r3, #22
 800ee20:	d85a      	bhi.n	800eed8 <_dtoa_r+0x240>
 800ee22:	9a00      	ldr	r2, [sp, #0]
 800ee24:	4b57      	ldr	r3, [pc, #348]	; (800ef84 <_dtoa_r+0x2ec>)
 800ee26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	ec51 0b19 	vmov	r0, r1, d9
 800ee32:	f7f1 fe53 	bl	8000adc <__aeabi_dcmplt>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d050      	beq.n	800eedc <_dtoa_r+0x244>
 800ee3a:	9b00      	ldr	r3, [sp, #0]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	2300      	movs	r3, #0
 800ee42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee46:	1b5d      	subs	r5, r3, r5
 800ee48:	1e6b      	subs	r3, r5, #1
 800ee4a:	9305      	str	r3, [sp, #20]
 800ee4c:	bf45      	ittet	mi
 800ee4e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ee52:	9304      	strmi	r3, [sp, #16]
 800ee54:	2300      	movpl	r3, #0
 800ee56:	2300      	movmi	r3, #0
 800ee58:	bf4c      	ite	mi
 800ee5a:	9305      	strmi	r3, [sp, #20]
 800ee5c:	9304      	strpl	r3, [sp, #16]
 800ee5e:	9b00      	ldr	r3, [sp, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	db3d      	blt.n	800eee0 <_dtoa_r+0x248>
 800ee64:	9b05      	ldr	r3, [sp, #20]
 800ee66:	9a00      	ldr	r2, [sp, #0]
 800ee68:	920a      	str	r2, [sp, #40]	; 0x28
 800ee6a:	4413      	add	r3, r2
 800ee6c:	9305      	str	r3, [sp, #20]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	9307      	str	r3, [sp, #28]
 800ee72:	9b06      	ldr	r3, [sp, #24]
 800ee74:	2b09      	cmp	r3, #9
 800ee76:	f200 8089 	bhi.w	800ef8c <_dtoa_r+0x2f4>
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	bfc4      	itt	gt
 800ee7e:	3b04      	subgt	r3, #4
 800ee80:	9306      	strgt	r3, [sp, #24]
 800ee82:	9b06      	ldr	r3, [sp, #24]
 800ee84:	f1a3 0302 	sub.w	r3, r3, #2
 800ee88:	bfcc      	ite	gt
 800ee8a:	2500      	movgt	r5, #0
 800ee8c:	2501      	movle	r5, #1
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	f200 8087 	bhi.w	800efa2 <_dtoa_r+0x30a>
 800ee94:	e8df f003 	tbb	[pc, r3]
 800ee98:	59383a2d 	.word	0x59383a2d
 800ee9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eea0:	441d      	add	r5, r3
 800eea2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eea6:	2b20      	cmp	r3, #32
 800eea8:	bfc1      	itttt	gt
 800eeaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eeae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eeb2:	fa0b f303 	lslgt.w	r3, fp, r3
 800eeb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eeba:	bfda      	itte	le
 800eebc:	f1c3 0320 	rsble	r3, r3, #32
 800eec0:	fa06 f003 	lslle.w	r0, r6, r3
 800eec4:	4318      	orrgt	r0, r3
 800eec6:	f7f1 fb1d 	bl	8000504 <__aeabi_ui2d>
 800eeca:	2301      	movs	r3, #1
 800eecc:	4606      	mov	r6, r0
 800eece:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eed2:	3d01      	subs	r5, #1
 800eed4:	930e      	str	r3, [sp, #56]	; 0x38
 800eed6:	e76a      	b.n	800edae <_dtoa_r+0x116>
 800eed8:	2301      	movs	r3, #1
 800eeda:	e7b2      	b.n	800ee42 <_dtoa_r+0x1aa>
 800eedc:	900b      	str	r0, [sp, #44]	; 0x2c
 800eede:	e7b1      	b.n	800ee44 <_dtoa_r+0x1ac>
 800eee0:	9b04      	ldr	r3, [sp, #16]
 800eee2:	9a00      	ldr	r2, [sp, #0]
 800eee4:	1a9b      	subs	r3, r3, r2
 800eee6:	9304      	str	r3, [sp, #16]
 800eee8:	4253      	negs	r3, r2
 800eeea:	9307      	str	r3, [sp, #28]
 800eeec:	2300      	movs	r3, #0
 800eeee:	930a      	str	r3, [sp, #40]	; 0x28
 800eef0:	e7bf      	b.n	800ee72 <_dtoa_r+0x1da>
 800eef2:	2300      	movs	r3, #0
 800eef4:	9308      	str	r3, [sp, #32]
 800eef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	dc55      	bgt.n	800efa8 <_dtoa_r+0x310>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef02:	461a      	mov	r2, r3
 800ef04:	9209      	str	r2, [sp, #36]	; 0x24
 800ef06:	e00c      	b.n	800ef22 <_dtoa_r+0x28a>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e7f3      	b.n	800eef4 <_dtoa_r+0x25c>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef10:	9308      	str	r3, [sp, #32]
 800ef12:	9b00      	ldr	r3, [sp, #0]
 800ef14:	4413      	add	r3, r2
 800ef16:	9302      	str	r3, [sp, #8]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	9303      	str	r3, [sp, #12]
 800ef1e:	bfb8      	it	lt
 800ef20:	2301      	movlt	r3, #1
 800ef22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef24:	2200      	movs	r2, #0
 800ef26:	6042      	str	r2, [r0, #4]
 800ef28:	2204      	movs	r2, #4
 800ef2a:	f102 0614 	add.w	r6, r2, #20
 800ef2e:	429e      	cmp	r6, r3
 800ef30:	6841      	ldr	r1, [r0, #4]
 800ef32:	d93d      	bls.n	800efb0 <_dtoa_r+0x318>
 800ef34:	4620      	mov	r0, r4
 800ef36:	f000 fcad 	bl	800f894 <_Balloc>
 800ef3a:	9001      	str	r0, [sp, #4]
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d13b      	bne.n	800efb8 <_dtoa_r+0x320>
 800ef40:	4b11      	ldr	r3, [pc, #68]	; (800ef88 <_dtoa_r+0x2f0>)
 800ef42:	4602      	mov	r2, r0
 800ef44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ef48:	e6c0      	b.n	800eccc <_dtoa_r+0x34>
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e7df      	b.n	800ef0e <_dtoa_r+0x276>
 800ef4e:	bf00      	nop
 800ef50:	636f4361 	.word	0x636f4361
 800ef54:	3fd287a7 	.word	0x3fd287a7
 800ef58:	8b60c8b3 	.word	0x8b60c8b3
 800ef5c:	3fc68a28 	.word	0x3fc68a28
 800ef60:	509f79fb 	.word	0x509f79fb
 800ef64:	3fd34413 	.word	0x3fd34413
 800ef68:	08011335 	.word	0x08011335
 800ef6c:	0801134c 	.word	0x0801134c
 800ef70:	7ff00000 	.word	0x7ff00000
 800ef74:	08011331 	.word	0x08011331
 800ef78:	08011328 	.word	0x08011328
 800ef7c:	08011305 	.word	0x08011305
 800ef80:	3ff80000 	.word	0x3ff80000
 800ef84:	08011440 	.word	0x08011440
 800ef88:	080113a7 	.word	0x080113a7
 800ef8c:	2501      	movs	r5, #1
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9306      	str	r3, [sp, #24]
 800ef92:	9508      	str	r5, [sp, #32]
 800ef94:	f04f 33ff 	mov.w	r3, #4294967295
 800ef98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2312      	movs	r3, #18
 800efa0:	e7b0      	b.n	800ef04 <_dtoa_r+0x26c>
 800efa2:	2301      	movs	r3, #1
 800efa4:	9308      	str	r3, [sp, #32]
 800efa6:	e7f5      	b.n	800ef94 <_dtoa_r+0x2fc>
 800efa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efae:	e7b8      	b.n	800ef22 <_dtoa_r+0x28a>
 800efb0:	3101      	adds	r1, #1
 800efb2:	6041      	str	r1, [r0, #4]
 800efb4:	0052      	lsls	r2, r2, #1
 800efb6:	e7b8      	b.n	800ef2a <_dtoa_r+0x292>
 800efb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efba:	9a01      	ldr	r2, [sp, #4]
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	2b0e      	cmp	r3, #14
 800efc2:	f200 809d 	bhi.w	800f100 <_dtoa_r+0x468>
 800efc6:	2d00      	cmp	r5, #0
 800efc8:	f000 809a 	beq.w	800f100 <_dtoa_r+0x468>
 800efcc:	9b00      	ldr	r3, [sp, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	dd32      	ble.n	800f038 <_dtoa_r+0x3a0>
 800efd2:	4ab7      	ldr	r2, [pc, #732]	; (800f2b0 <_dtoa_r+0x618>)
 800efd4:	f003 030f 	and.w	r3, r3, #15
 800efd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800efdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efe0:	9b00      	ldr	r3, [sp, #0]
 800efe2:	05d8      	lsls	r0, r3, #23
 800efe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800efe8:	d516      	bpl.n	800f018 <_dtoa_r+0x380>
 800efea:	4bb2      	ldr	r3, [pc, #712]	; (800f2b4 <_dtoa_r+0x61c>)
 800efec:	ec51 0b19 	vmov	r0, r1, d9
 800eff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eff4:	f7f1 fc2a 	bl	800084c <__aeabi_ddiv>
 800eff8:	f007 070f 	and.w	r7, r7, #15
 800effc:	4682      	mov	sl, r0
 800effe:	468b      	mov	fp, r1
 800f000:	2503      	movs	r5, #3
 800f002:	4eac      	ldr	r6, [pc, #688]	; (800f2b4 <_dtoa_r+0x61c>)
 800f004:	b957      	cbnz	r7, 800f01c <_dtoa_r+0x384>
 800f006:	4642      	mov	r2, r8
 800f008:	464b      	mov	r3, r9
 800f00a:	4650      	mov	r0, sl
 800f00c:	4659      	mov	r1, fp
 800f00e:	f7f1 fc1d 	bl	800084c <__aeabi_ddiv>
 800f012:	4682      	mov	sl, r0
 800f014:	468b      	mov	fp, r1
 800f016:	e028      	b.n	800f06a <_dtoa_r+0x3d2>
 800f018:	2502      	movs	r5, #2
 800f01a:	e7f2      	b.n	800f002 <_dtoa_r+0x36a>
 800f01c:	07f9      	lsls	r1, r7, #31
 800f01e:	d508      	bpl.n	800f032 <_dtoa_r+0x39a>
 800f020:	4640      	mov	r0, r8
 800f022:	4649      	mov	r1, r9
 800f024:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f028:	f7f1 fae6 	bl	80005f8 <__aeabi_dmul>
 800f02c:	3501      	adds	r5, #1
 800f02e:	4680      	mov	r8, r0
 800f030:	4689      	mov	r9, r1
 800f032:	107f      	asrs	r7, r7, #1
 800f034:	3608      	adds	r6, #8
 800f036:	e7e5      	b.n	800f004 <_dtoa_r+0x36c>
 800f038:	f000 809b 	beq.w	800f172 <_dtoa_r+0x4da>
 800f03c:	9b00      	ldr	r3, [sp, #0]
 800f03e:	4f9d      	ldr	r7, [pc, #628]	; (800f2b4 <_dtoa_r+0x61c>)
 800f040:	425e      	negs	r6, r3
 800f042:	4b9b      	ldr	r3, [pc, #620]	; (800f2b0 <_dtoa_r+0x618>)
 800f044:	f006 020f 	and.w	r2, r6, #15
 800f048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	ec51 0b19 	vmov	r0, r1, d9
 800f054:	f7f1 fad0 	bl	80005f8 <__aeabi_dmul>
 800f058:	1136      	asrs	r6, r6, #4
 800f05a:	4682      	mov	sl, r0
 800f05c:	468b      	mov	fp, r1
 800f05e:	2300      	movs	r3, #0
 800f060:	2502      	movs	r5, #2
 800f062:	2e00      	cmp	r6, #0
 800f064:	d17a      	bne.n	800f15c <_dtoa_r+0x4c4>
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1d3      	bne.n	800f012 <_dtoa_r+0x37a>
 800f06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 8082 	beq.w	800f176 <_dtoa_r+0x4de>
 800f072:	4b91      	ldr	r3, [pc, #580]	; (800f2b8 <_dtoa_r+0x620>)
 800f074:	2200      	movs	r2, #0
 800f076:	4650      	mov	r0, sl
 800f078:	4659      	mov	r1, fp
 800f07a:	f7f1 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800f07e:	2800      	cmp	r0, #0
 800f080:	d079      	beq.n	800f176 <_dtoa_r+0x4de>
 800f082:	9b03      	ldr	r3, [sp, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d076      	beq.n	800f176 <_dtoa_r+0x4de>
 800f088:	9b02      	ldr	r3, [sp, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	dd36      	ble.n	800f0fc <_dtoa_r+0x464>
 800f08e:	9b00      	ldr	r3, [sp, #0]
 800f090:	4650      	mov	r0, sl
 800f092:	4659      	mov	r1, fp
 800f094:	1e5f      	subs	r7, r3, #1
 800f096:	2200      	movs	r2, #0
 800f098:	4b88      	ldr	r3, [pc, #544]	; (800f2bc <_dtoa_r+0x624>)
 800f09a:	f7f1 faad 	bl	80005f8 <__aeabi_dmul>
 800f09e:	9e02      	ldr	r6, [sp, #8]
 800f0a0:	4682      	mov	sl, r0
 800f0a2:	468b      	mov	fp, r1
 800f0a4:	3501      	adds	r5, #1
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	f7f1 fa3c 	bl	8000524 <__aeabi_i2d>
 800f0ac:	4652      	mov	r2, sl
 800f0ae:	465b      	mov	r3, fp
 800f0b0:	f7f1 faa2 	bl	80005f8 <__aeabi_dmul>
 800f0b4:	4b82      	ldr	r3, [pc, #520]	; (800f2c0 <_dtoa_r+0x628>)
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f7f1 f8e8 	bl	800028c <__adddf3>
 800f0bc:	46d0      	mov	r8, sl
 800f0be:	46d9      	mov	r9, fp
 800f0c0:	4682      	mov	sl, r0
 800f0c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f0c6:	2e00      	cmp	r6, #0
 800f0c8:	d158      	bne.n	800f17c <_dtoa_r+0x4e4>
 800f0ca:	4b7e      	ldr	r3, [pc, #504]	; (800f2c4 <_dtoa_r+0x62c>)
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	4649      	mov	r1, r9
 800f0d2:	f7f1 f8d9 	bl	8000288 <__aeabi_dsub>
 800f0d6:	4652      	mov	r2, sl
 800f0d8:	465b      	mov	r3, fp
 800f0da:	4680      	mov	r8, r0
 800f0dc:	4689      	mov	r9, r1
 800f0de:	f7f1 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	f040 8295 	bne.w	800f612 <_dtoa_r+0x97a>
 800f0e8:	4652      	mov	r2, sl
 800f0ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	f7f1 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	f040 8289 	bne.w	800f60e <_dtoa_r+0x976>
 800f0fc:	ec5b ab19 	vmov	sl, fp, d9
 800f100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f102:	2b00      	cmp	r3, #0
 800f104:	f2c0 8148 	blt.w	800f398 <_dtoa_r+0x700>
 800f108:	9a00      	ldr	r2, [sp, #0]
 800f10a:	2a0e      	cmp	r2, #14
 800f10c:	f300 8144 	bgt.w	800f398 <_dtoa_r+0x700>
 800f110:	4b67      	ldr	r3, [pc, #412]	; (800f2b0 <_dtoa_r+0x618>)
 800f112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f280 80d5 	bge.w	800f2cc <_dtoa_r+0x634>
 800f122:	9b03      	ldr	r3, [sp, #12]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f300 80d1 	bgt.w	800f2cc <_dtoa_r+0x634>
 800f12a:	f040 826f 	bne.w	800f60c <_dtoa_r+0x974>
 800f12e:	4b65      	ldr	r3, [pc, #404]	; (800f2c4 <_dtoa_r+0x62c>)
 800f130:	2200      	movs	r2, #0
 800f132:	4640      	mov	r0, r8
 800f134:	4649      	mov	r1, r9
 800f136:	f7f1 fa5f 	bl	80005f8 <__aeabi_dmul>
 800f13a:	4652      	mov	r2, sl
 800f13c:	465b      	mov	r3, fp
 800f13e:	f7f1 fce1 	bl	8000b04 <__aeabi_dcmpge>
 800f142:	9e03      	ldr	r6, [sp, #12]
 800f144:	4637      	mov	r7, r6
 800f146:	2800      	cmp	r0, #0
 800f148:	f040 8245 	bne.w	800f5d6 <_dtoa_r+0x93e>
 800f14c:	9d01      	ldr	r5, [sp, #4]
 800f14e:	2331      	movs	r3, #49	; 0x31
 800f150:	f805 3b01 	strb.w	r3, [r5], #1
 800f154:	9b00      	ldr	r3, [sp, #0]
 800f156:	3301      	adds	r3, #1
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	e240      	b.n	800f5de <_dtoa_r+0x946>
 800f15c:	07f2      	lsls	r2, r6, #31
 800f15e:	d505      	bpl.n	800f16c <_dtoa_r+0x4d4>
 800f160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	3501      	adds	r5, #1
 800f16a:	2301      	movs	r3, #1
 800f16c:	1076      	asrs	r6, r6, #1
 800f16e:	3708      	adds	r7, #8
 800f170:	e777      	b.n	800f062 <_dtoa_r+0x3ca>
 800f172:	2502      	movs	r5, #2
 800f174:	e779      	b.n	800f06a <_dtoa_r+0x3d2>
 800f176:	9f00      	ldr	r7, [sp, #0]
 800f178:	9e03      	ldr	r6, [sp, #12]
 800f17a:	e794      	b.n	800f0a6 <_dtoa_r+0x40e>
 800f17c:	9901      	ldr	r1, [sp, #4]
 800f17e:	4b4c      	ldr	r3, [pc, #304]	; (800f2b0 <_dtoa_r+0x618>)
 800f180:	4431      	add	r1, r6
 800f182:	910d      	str	r1, [sp, #52]	; 0x34
 800f184:	9908      	ldr	r1, [sp, #32]
 800f186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f18a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f18e:	2900      	cmp	r1, #0
 800f190:	d043      	beq.n	800f21a <_dtoa_r+0x582>
 800f192:	494d      	ldr	r1, [pc, #308]	; (800f2c8 <_dtoa_r+0x630>)
 800f194:	2000      	movs	r0, #0
 800f196:	f7f1 fb59 	bl	800084c <__aeabi_ddiv>
 800f19a:	4652      	mov	r2, sl
 800f19c:	465b      	mov	r3, fp
 800f19e:	f7f1 f873 	bl	8000288 <__aeabi_dsub>
 800f1a2:	9d01      	ldr	r5, [sp, #4]
 800f1a4:	4682      	mov	sl, r0
 800f1a6:	468b      	mov	fp, r1
 800f1a8:	4649      	mov	r1, r9
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	f7f1 fcd4 	bl	8000b58 <__aeabi_d2iz>
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	f7f1 f9b7 	bl	8000524 <__aeabi_i2d>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	4640      	mov	r0, r8
 800f1bc:	4649      	mov	r1, r9
 800f1be:	f7f1 f863 	bl	8000288 <__aeabi_dsub>
 800f1c2:	3630      	adds	r6, #48	; 0x30
 800f1c4:	f805 6b01 	strb.w	r6, [r5], #1
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	4680      	mov	r8, r0
 800f1ce:	4689      	mov	r9, r1
 800f1d0:	f7f1 fc84 	bl	8000adc <__aeabi_dcmplt>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d163      	bne.n	800f2a0 <_dtoa_r+0x608>
 800f1d8:	4642      	mov	r2, r8
 800f1da:	464b      	mov	r3, r9
 800f1dc:	4936      	ldr	r1, [pc, #216]	; (800f2b8 <_dtoa_r+0x620>)
 800f1de:	2000      	movs	r0, #0
 800f1e0:	f7f1 f852 	bl	8000288 <__aeabi_dsub>
 800f1e4:	4652      	mov	r2, sl
 800f1e6:	465b      	mov	r3, fp
 800f1e8:	f7f1 fc78 	bl	8000adc <__aeabi_dcmplt>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	f040 80b5 	bne.w	800f35c <_dtoa_r+0x6c4>
 800f1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1f4:	429d      	cmp	r5, r3
 800f1f6:	d081      	beq.n	800f0fc <_dtoa_r+0x464>
 800f1f8:	4b30      	ldr	r3, [pc, #192]	; (800f2bc <_dtoa_r+0x624>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	4650      	mov	r0, sl
 800f1fe:	4659      	mov	r1, fp
 800f200:	f7f1 f9fa 	bl	80005f8 <__aeabi_dmul>
 800f204:	4b2d      	ldr	r3, [pc, #180]	; (800f2bc <_dtoa_r+0x624>)
 800f206:	4682      	mov	sl, r0
 800f208:	468b      	mov	fp, r1
 800f20a:	4640      	mov	r0, r8
 800f20c:	4649      	mov	r1, r9
 800f20e:	2200      	movs	r2, #0
 800f210:	f7f1 f9f2 	bl	80005f8 <__aeabi_dmul>
 800f214:	4680      	mov	r8, r0
 800f216:	4689      	mov	r9, r1
 800f218:	e7c6      	b.n	800f1a8 <_dtoa_r+0x510>
 800f21a:	4650      	mov	r0, sl
 800f21c:	4659      	mov	r1, fp
 800f21e:	f7f1 f9eb 	bl	80005f8 <__aeabi_dmul>
 800f222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f224:	9d01      	ldr	r5, [sp, #4]
 800f226:	930f      	str	r3, [sp, #60]	; 0x3c
 800f228:	4682      	mov	sl, r0
 800f22a:	468b      	mov	fp, r1
 800f22c:	4649      	mov	r1, r9
 800f22e:	4640      	mov	r0, r8
 800f230:	f7f1 fc92 	bl	8000b58 <__aeabi_d2iz>
 800f234:	4606      	mov	r6, r0
 800f236:	f7f1 f975 	bl	8000524 <__aeabi_i2d>
 800f23a:	3630      	adds	r6, #48	; 0x30
 800f23c:	4602      	mov	r2, r0
 800f23e:	460b      	mov	r3, r1
 800f240:	4640      	mov	r0, r8
 800f242:	4649      	mov	r1, r9
 800f244:	f7f1 f820 	bl	8000288 <__aeabi_dsub>
 800f248:	f805 6b01 	strb.w	r6, [r5], #1
 800f24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f24e:	429d      	cmp	r5, r3
 800f250:	4680      	mov	r8, r0
 800f252:	4689      	mov	r9, r1
 800f254:	f04f 0200 	mov.w	r2, #0
 800f258:	d124      	bne.n	800f2a4 <_dtoa_r+0x60c>
 800f25a:	4b1b      	ldr	r3, [pc, #108]	; (800f2c8 <_dtoa_r+0x630>)
 800f25c:	4650      	mov	r0, sl
 800f25e:	4659      	mov	r1, fp
 800f260:	f7f1 f814 	bl	800028c <__adddf3>
 800f264:	4602      	mov	r2, r0
 800f266:	460b      	mov	r3, r1
 800f268:	4640      	mov	r0, r8
 800f26a:	4649      	mov	r1, r9
 800f26c:	f7f1 fc54 	bl	8000b18 <__aeabi_dcmpgt>
 800f270:	2800      	cmp	r0, #0
 800f272:	d173      	bne.n	800f35c <_dtoa_r+0x6c4>
 800f274:	4652      	mov	r2, sl
 800f276:	465b      	mov	r3, fp
 800f278:	4913      	ldr	r1, [pc, #76]	; (800f2c8 <_dtoa_r+0x630>)
 800f27a:	2000      	movs	r0, #0
 800f27c:	f7f1 f804 	bl	8000288 <__aeabi_dsub>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4640      	mov	r0, r8
 800f286:	4649      	mov	r1, r9
 800f288:	f7f1 fc28 	bl	8000adc <__aeabi_dcmplt>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	f43f af35 	beq.w	800f0fc <_dtoa_r+0x464>
 800f292:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f294:	1e6b      	subs	r3, r5, #1
 800f296:	930f      	str	r3, [sp, #60]	; 0x3c
 800f298:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f29c:	2b30      	cmp	r3, #48	; 0x30
 800f29e:	d0f8      	beq.n	800f292 <_dtoa_r+0x5fa>
 800f2a0:	9700      	str	r7, [sp, #0]
 800f2a2:	e049      	b.n	800f338 <_dtoa_r+0x6a0>
 800f2a4:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <_dtoa_r+0x624>)
 800f2a6:	f7f1 f9a7 	bl	80005f8 <__aeabi_dmul>
 800f2aa:	4680      	mov	r8, r0
 800f2ac:	4689      	mov	r9, r1
 800f2ae:	e7bd      	b.n	800f22c <_dtoa_r+0x594>
 800f2b0:	08011440 	.word	0x08011440
 800f2b4:	08011418 	.word	0x08011418
 800f2b8:	3ff00000 	.word	0x3ff00000
 800f2bc:	40240000 	.word	0x40240000
 800f2c0:	401c0000 	.word	0x401c0000
 800f2c4:	40140000 	.word	0x40140000
 800f2c8:	3fe00000 	.word	0x3fe00000
 800f2cc:	9d01      	ldr	r5, [sp, #4]
 800f2ce:	4656      	mov	r6, sl
 800f2d0:	465f      	mov	r7, fp
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	464b      	mov	r3, r9
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	4639      	mov	r1, r7
 800f2da:	f7f1 fab7 	bl	800084c <__aeabi_ddiv>
 800f2de:	f7f1 fc3b 	bl	8000b58 <__aeabi_d2iz>
 800f2e2:	4682      	mov	sl, r0
 800f2e4:	f7f1 f91e 	bl	8000524 <__aeabi_i2d>
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	464b      	mov	r3, r9
 800f2ec:	f7f1 f984 	bl	80005f8 <__aeabi_dmul>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	4639      	mov	r1, r7
 800f2f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f2fc:	f7f0 ffc4 	bl	8000288 <__aeabi_dsub>
 800f300:	f805 6b01 	strb.w	r6, [r5], #1
 800f304:	9e01      	ldr	r6, [sp, #4]
 800f306:	9f03      	ldr	r7, [sp, #12]
 800f308:	1bae      	subs	r6, r5, r6
 800f30a:	42b7      	cmp	r7, r6
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	d135      	bne.n	800f37e <_dtoa_r+0x6e6>
 800f312:	f7f0 ffbb 	bl	800028c <__adddf3>
 800f316:	4642      	mov	r2, r8
 800f318:	464b      	mov	r3, r9
 800f31a:	4606      	mov	r6, r0
 800f31c:	460f      	mov	r7, r1
 800f31e:	f7f1 fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 800f322:	b9d0      	cbnz	r0, 800f35a <_dtoa_r+0x6c2>
 800f324:	4642      	mov	r2, r8
 800f326:	464b      	mov	r3, r9
 800f328:	4630      	mov	r0, r6
 800f32a:	4639      	mov	r1, r7
 800f32c:	f7f1 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800f330:	b110      	cbz	r0, 800f338 <_dtoa_r+0x6a0>
 800f332:	f01a 0f01 	tst.w	sl, #1
 800f336:	d110      	bne.n	800f35a <_dtoa_r+0x6c2>
 800f338:	4620      	mov	r0, r4
 800f33a:	ee18 1a10 	vmov	r1, s16
 800f33e:	f000 fae9 	bl	800f914 <_Bfree>
 800f342:	2300      	movs	r3, #0
 800f344:	9800      	ldr	r0, [sp, #0]
 800f346:	702b      	strb	r3, [r5, #0]
 800f348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f34a:	3001      	adds	r0, #1
 800f34c:	6018      	str	r0, [r3, #0]
 800f34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f350:	2b00      	cmp	r3, #0
 800f352:	f43f acf1 	beq.w	800ed38 <_dtoa_r+0xa0>
 800f356:	601d      	str	r5, [r3, #0]
 800f358:	e4ee      	b.n	800ed38 <_dtoa_r+0xa0>
 800f35a:	9f00      	ldr	r7, [sp, #0]
 800f35c:	462b      	mov	r3, r5
 800f35e:	461d      	mov	r5, r3
 800f360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f364:	2a39      	cmp	r2, #57	; 0x39
 800f366:	d106      	bne.n	800f376 <_dtoa_r+0x6de>
 800f368:	9a01      	ldr	r2, [sp, #4]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d1f7      	bne.n	800f35e <_dtoa_r+0x6c6>
 800f36e:	9901      	ldr	r1, [sp, #4]
 800f370:	2230      	movs	r2, #48	; 0x30
 800f372:	3701      	adds	r7, #1
 800f374:	700a      	strb	r2, [r1, #0]
 800f376:	781a      	ldrb	r2, [r3, #0]
 800f378:	3201      	adds	r2, #1
 800f37a:	701a      	strb	r2, [r3, #0]
 800f37c:	e790      	b.n	800f2a0 <_dtoa_r+0x608>
 800f37e:	4ba6      	ldr	r3, [pc, #664]	; (800f618 <_dtoa_r+0x980>)
 800f380:	2200      	movs	r2, #0
 800f382:	f7f1 f939 	bl	80005f8 <__aeabi_dmul>
 800f386:	2200      	movs	r2, #0
 800f388:	2300      	movs	r3, #0
 800f38a:	4606      	mov	r6, r0
 800f38c:	460f      	mov	r7, r1
 800f38e:	f7f1 fb9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f392:	2800      	cmp	r0, #0
 800f394:	d09d      	beq.n	800f2d2 <_dtoa_r+0x63a>
 800f396:	e7cf      	b.n	800f338 <_dtoa_r+0x6a0>
 800f398:	9a08      	ldr	r2, [sp, #32]
 800f39a:	2a00      	cmp	r2, #0
 800f39c:	f000 80d7 	beq.w	800f54e <_dtoa_r+0x8b6>
 800f3a0:	9a06      	ldr	r2, [sp, #24]
 800f3a2:	2a01      	cmp	r2, #1
 800f3a4:	f300 80ba 	bgt.w	800f51c <_dtoa_r+0x884>
 800f3a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3aa:	2a00      	cmp	r2, #0
 800f3ac:	f000 80b2 	beq.w	800f514 <_dtoa_r+0x87c>
 800f3b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3b4:	9e07      	ldr	r6, [sp, #28]
 800f3b6:	9d04      	ldr	r5, [sp, #16]
 800f3b8:	9a04      	ldr	r2, [sp, #16]
 800f3ba:	441a      	add	r2, r3
 800f3bc:	9204      	str	r2, [sp, #16]
 800f3be:	9a05      	ldr	r2, [sp, #20]
 800f3c0:	2101      	movs	r1, #1
 800f3c2:	441a      	add	r2, r3
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	9205      	str	r2, [sp, #20]
 800f3c8:	f000 fb5c 	bl	800fa84 <__i2b>
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	2d00      	cmp	r5, #0
 800f3d0:	dd0c      	ble.n	800f3ec <_dtoa_r+0x754>
 800f3d2:	9b05      	ldr	r3, [sp, #20]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	dd09      	ble.n	800f3ec <_dtoa_r+0x754>
 800f3d8:	42ab      	cmp	r3, r5
 800f3da:	9a04      	ldr	r2, [sp, #16]
 800f3dc:	bfa8      	it	ge
 800f3de:	462b      	movge	r3, r5
 800f3e0:	1ad2      	subs	r2, r2, r3
 800f3e2:	9204      	str	r2, [sp, #16]
 800f3e4:	9a05      	ldr	r2, [sp, #20]
 800f3e6:	1aed      	subs	r5, r5, r3
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	9305      	str	r3, [sp, #20]
 800f3ec:	9b07      	ldr	r3, [sp, #28]
 800f3ee:	b31b      	cbz	r3, 800f438 <_dtoa_r+0x7a0>
 800f3f0:	9b08      	ldr	r3, [sp, #32]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 80af 	beq.w	800f556 <_dtoa_r+0x8be>
 800f3f8:	2e00      	cmp	r6, #0
 800f3fa:	dd13      	ble.n	800f424 <_dtoa_r+0x78c>
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	4632      	mov	r2, r6
 800f400:	4620      	mov	r0, r4
 800f402:	f000 fbff 	bl	800fc04 <__pow5mult>
 800f406:	ee18 2a10 	vmov	r2, s16
 800f40a:	4601      	mov	r1, r0
 800f40c:	4607      	mov	r7, r0
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 fb4e 	bl	800fab0 <__multiply>
 800f414:	ee18 1a10 	vmov	r1, s16
 800f418:	4680      	mov	r8, r0
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 fa7a 	bl	800f914 <_Bfree>
 800f420:	ee08 8a10 	vmov	s16, r8
 800f424:	9b07      	ldr	r3, [sp, #28]
 800f426:	1b9a      	subs	r2, r3, r6
 800f428:	d006      	beq.n	800f438 <_dtoa_r+0x7a0>
 800f42a:	ee18 1a10 	vmov	r1, s16
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 fbe8 	bl	800fc04 <__pow5mult>
 800f434:	ee08 0a10 	vmov	s16, r0
 800f438:	2101      	movs	r1, #1
 800f43a:	4620      	mov	r0, r4
 800f43c:	f000 fb22 	bl	800fa84 <__i2b>
 800f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f442:	2b00      	cmp	r3, #0
 800f444:	4606      	mov	r6, r0
 800f446:	f340 8088 	ble.w	800f55a <_dtoa_r+0x8c2>
 800f44a:	461a      	mov	r2, r3
 800f44c:	4601      	mov	r1, r0
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fbd8 	bl	800fc04 <__pow5mult>
 800f454:	9b06      	ldr	r3, [sp, #24]
 800f456:	2b01      	cmp	r3, #1
 800f458:	4606      	mov	r6, r0
 800f45a:	f340 8081 	ble.w	800f560 <_dtoa_r+0x8c8>
 800f45e:	f04f 0800 	mov.w	r8, #0
 800f462:	6933      	ldr	r3, [r6, #16]
 800f464:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f468:	6918      	ldr	r0, [r3, #16]
 800f46a:	f000 fabb 	bl	800f9e4 <__hi0bits>
 800f46e:	f1c0 0020 	rsb	r0, r0, #32
 800f472:	9b05      	ldr	r3, [sp, #20]
 800f474:	4418      	add	r0, r3
 800f476:	f010 001f 	ands.w	r0, r0, #31
 800f47a:	f000 8092 	beq.w	800f5a2 <_dtoa_r+0x90a>
 800f47e:	f1c0 0320 	rsb	r3, r0, #32
 800f482:	2b04      	cmp	r3, #4
 800f484:	f340 808a 	ble.w	800f59c <_dtoa_r+0x904>
 800f488:	f1c0 001c 	rsb	r0, r0, #28
 800f48c:	9b04      	ldr	r3, [sp, #16]
 800f48e:	4403      	add	r3, r0
 800f490:	9304      	str	r3, [sp, #16]
 800f492:	9b05      	ldr	r3, [sp, #20]
 800f494:	4403      	add	r3, r0
 800f496:	4405      	add	r5, r0
 800f498:	9305      	str	r3, [sp, #20]
 800f49a:	9b04      	ldr	r3, [sp, #16]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dd07      	ble.n	800f4b0 <_dtoa_r+0x818>
 800f4a0:	ee18 1a10 	vmov	r1, s16
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f000 fc06 	bl	800fcb8 <__lshift>
 800f4ac:	ee08 0a10 	vmov	s16, r0
 800f4b0:	9b05      	ldr	r3, [sp, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dd05      	ble.n	800f4c2 <_dtoa_r+0x82a>
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f000 fbfc 	bl	800fcb8 <__lshift>
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d06e      	beq.n	800f5a6 <_dtoa_r+0x90e>
 800f4c8:	ee18 0a10 	vmov	r0, s16
 800f4cc:	4631      	mov	r1, r6
 800f4ce:	f000 fc63 	bl	800fd98 <__mcmp>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	da67      	bge.n	800f5a6 <_dtoa_r+0x90e>
 800f4d6:	9b00      	ldr	r3, [sp, #0]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	ee18 1a10 	vmov	r1, s16
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	220a      	movs	r2, #10
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	f000 fa37 	bl	800f958 <__multadd>
 800f4ea:	9b08      	ldr	r3, [sp, #32]
 800f4ec:	ee08 0a10 	vmov	s16, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f000 81b1 	beq.w	800f858 <_dtoa_r+0xbc0>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	220a      	movs	r2, #10
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 fa2b 	bl	800f958 <__multadd>
 800f502:	9b02      	ldr	r3, [sp, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	4607      	mov	r7, r0
 800f508:	f300 808e 	bgt.w	800f628 <_dtoa_r+0x990>
 800f50c:	9b06      	ldr	r3, [sp, #24]
 800f50e:	2b02      	cmp	r3, #2
 800f510:	dc51      	bgt.n	800f5b6 <_dtoa_r+0x91e>
 800f512:	e089      	b.n	800f628 <_dtoa_r+0x990>
 800f514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f51a:	e74b      	b.n	800f3b4 <_dtoa_r+0x71c>
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	1e5e      	subs	r6, r3, #1
 800f520:	9b07      	ldr	r3, [sp, #28]
 800f522:	42b3      	cmp	r3, r6
 800f524:	bfbf      	itttt	lt
 800f526:	9b07      	ldrlt	r3, [sp, #28]
 800f528:	9607      	strlt	r6, [sp, #28]
 800f52a:	1af2      	sublt	r2, r6, r3
 800f52c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f52e:	bfb6      	itet	lt
 800f530:	189b      	addlt	r3, r3, r2
 800f532:	1b9e      	subge	r6, r3, r6
 800f534:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f536:	9b03      	ldr	r3, [sp, #12]
 800f538:	bfb8      	it	lt
 800f53a:	2600      	movlt	r6, #0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	bfb7      	itett	lt
 800f540:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f544:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f548:	1a9d      	sublt	r5, r3, r2
 800f54a:	2300      	movlt	r3, #0
 800f54c:	e734      	b.n	800f3b8 <_dtoa_r+0x720>
 800f54e:	9e07      	ldr	r6, [sp, #28]
 800f550:	9d04      	ldr	r5, [sp, #16]
 800f552:	9f08      	ldr	r7, [sp, #32]
 800f554:	e73b      	b.n	800f3ce <_dtoa_r+0x736>
 800f556:	9a07      	ldr	r2, [sp, #28]
 800f558:	e767      	b.n	800f42a <_dtoa_r+0x792>
 800f55a:	9b06      	ldr	r3, [sp, #24]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	dc18      	bgt.n	800f592 <_dtoa_r+0x8fa>
 800f560:	f1ba 0f00 	cmp.w	sl, #0
 800f564:	d115      	bne.n	800f592 <_dtoa_r+0x8fa>
 800f566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f56a:	b993      	cbnz	r3, 800f592 <_dtoa_r+0x8fa>
 800f56c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f570:	0d1b      	lsrs	r3, r3, #20
 800f572:	051b      	lsls	r3, r3, #20
 800f574:	b183      	cbz	r3, 800f598 <_dtoa_r+0x900>
 800f576:	9b04      	ldr	r3, [sp, #16]
 800f578:	3301      	adds	r3, #1
 800f57a:	9304      	str	r3, [sp, #16]
 800f57c:	9b05      	ldr	r3, [sp, #20]
 800f57e:	3301      	adds	r3, #1
 800f580:	9305      	str	r3, [sp, #20]
 800f582:	f04f 0801 	mov.w	r8, #1
 800f586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f47f af6a 	bne.w	800f462 <_dtoa_r+0x7ca>
 800f58e:	2001      	movs	r0, #1
 800f590:	e76f      	b.n	800f472 <_dtoa_r+0x7da>
 800f592:	f04f 0800 	mov.w	r8, #0
 800f596:	e7f6      	b.n	800f586 <_dtoa_r+0x8ee>
 800f598:	4698      	mov	r8, r3
 800f59a:	e7f4      	b.n	800f586 <_dtoa_r+0x8ee>
 800f59c:	f43f af7d 	beq.w	800f49a <_dtoa_r+0x802>
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	301c      	adds	r0, #28
 800f5a4:	e772      	b.n	800f48c <_dtoa_r+0x7f4>
 800f5a6:	9b03      	ldr	r3, [sp, #12]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	dc37      	bgt.n	800f61c <_dtoa_r+0x984>
 800f5ac:	9b06      	ldr	r3, [sp, #24]
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	dd34      	ble.n	800f61c <_dtoa_r+0x984>
 800f5b2:	9b03      	ldr	r3, [sp, #12]
 800f5b4:	9302      	str	r3, [sp, #8]
 800f5b6:	9b02      	ldr	r3, [sp, #8]
 800f5b8:	b96b      	cbnz	r3, 800f5d6 <_dtoa_r+0x93e>
 800f5ba:	4631      	mov	r1, r6
 800f5bc:	2205      	movs	r2, #5
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f000 f9ca 	bl	800f958 <__multadd>
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	ee18 0a10 	vmov	r0, s16
 800f5cc:	f000 fbe4 	bl	800fd98 <__mcmp>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	f73f adbb 	bgt.w	800f14c <_dtoa_r+0x4b4>
 800f5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d8:	9d01      	ldr	r5, [sp, #4]
 800f5da:	43db      	mvns	r3, r3
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	f04f 0800 	mov.w	r8, #0
 800f5e2:	4631      	mov	r1, r6
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f000 f995 	bl	800f914 <_Bfree>
 800f5ea:	2f00      	cmp	r7, #0
 800f5ec:	f43f aea4 	beq.w	800f338 <_dtoa_r+0x6a0>
 800f5f0:	f1b8 0f00 	cmp.w	r8, #0
 800f5f4:	d005      	beq.n	800f602 <_dtoa_r+0x96a>
 800f5f6:	45b8      	cmp	r8, r7
 800f5f8:	d003      	beq.n	800f602 <_dtoa_r+0x96a>
 800f5fa:	4641      	mov	r1, r8
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f000 f989 	bl	800f914 <_Bfree>
 800f602:	4639      	mov	r1, r7
 800f604:	4620      	mov	r0, r4
 800f606:	f000 f985 	bl	800f914 <_Bfree>
 800f60a:	e695      	b.n	800f338 <_dtoa_r+0x6a0>
 800f60c:	2600      	movs	r6, #0
 800f60e:	4637      	mov	r7, r6
 800f610:	e7e1      	b.n	800f5d6 <_dtoa_r+0x93e>
 800f612:	9700      	str	r7, [sp, #0]
 800f614:	4637      	mov	r7, r6
 800f616:	e599      	b.n	800f14c <_dtoa_r+0x4b4>
 800f618:	40240000 	.word	0x40240000
 800f61c:	9b08      	ldr	r3, [sp, #32]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f000 80ca 	beq.w	800f7b8 <_dtoa_r+0xb20>
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	9302      	str	r3, [sp, #8]
 800f628:	2d00      	cmp	r5, #0
 800f62a:	dd05      	ble.n	800f638 <_dtoa_r+0x9a0>
 800f62c:	4639      	mov	r1, r7
 800f62e:	462a      	mov	r2, r5
 800f630:	4620      	mov	r0, r4
 800f632:	f000 fb41 	bl	800fcb8 <__lshift>
 800f636:	4607      	mov	r7, r0
 800f638:	f1b8 0f00 	cmp.w	r8, #0
 800f63c:	d05b      	beq.n	800f6f6 <_dtoa_r+0xa5e>
 800f63e:	6879      	ldr	r1, [r7, #4]
 800f640:	4620      	mov	r0, r4
 800f642:	f000 f927 	bl	800f894 <_Balloc>
 800f646:	4605      	mov	r5, r0
 800f648:	b928      	cbnz	r0, 800f656 <_dtoa_r+0x9be>
 800f64a:	4b87      	ldr	r3, [pc, #540]	; (800f868 <_dtoa_r+0xbd0>)
 800f64c:	4602      	mov	r2, r0
 800f64e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f652:	f7ff bb3b 	b.w	800eccc <_dtoa_r+0x34>
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	3202      	adds	r2, #2
 800f65a:	0092      	lsls	r2, r2, #2
 800f65c:	f107 010c 	add.w	r1, r7, #12
 800f660:	300c      	adds	r0, #12
 800f662:	f7fe fcfd 	bl	800e060 <memcpy>
 800f666:	2201      	movs	r2, #1
 800f668:	4629      	mov	r1, r5
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fb24 	bl	800fcb8 <__lshift>
 800f670:	9b01      	ldr	r3, [sp, #4]
 800f672:	f103 0901 	add.w	r9, r3, #1
 800f676:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f67a:	4413      	add	r3, r2
 800f67c:	9305      	str	r3, [sp, #20]
 800f67e:	f00a 0301 	and.w	r3, sl, #1
 800f682:	46b8      	mov	r8, r7
 800f684:	9304      	str	r3, [sp, #16]
 800f686:	4607      	mov	r7, r0
 800f688:	4631      	mov	r1, r6
 800f68a:	ee18 0a10 	vmov	r0, s16
 800f68e:	f7ff fa77 	bl	800eb80 <quorem>
 800f692:	4641      	mov	r1, r8
 800f694:	9002      	str	r0, [sp, #8]
 800f696:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f69a:	ee18 0a10 	vmov	r0, s16
 800f69e:	f000 fb7b 	bl	800fd98 <__mcmp>
 800f6a2:	463a      	mov	r2, r7
 800f6a4:	9003      	str	r0, [sp, #12]
 800f6a6:	4631      	mov	r1, r6
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f000 fb91 	bl	800fdd0 <__mdiff>
 800f6ae:	68c2      	ldr	r2, [r0, #12]
 800f6b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	bb02      	cbnz	r2, 800f6fa <_dtoa_r+0xa62>
 800f6b8:	4601      	mov	r1, r0
 800f6ba:	ee18 0a10 	vmov	r0, s16
 800f6be:	f000 fb6b 	bl	800fd98 <__mcmp>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	9207      	str	r2, [sp, #28]
 800f6ca:	f000 f923 	bl	800f914 <_Bfree>
 800f6ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f6d2:	ea43 0102 	orr.w	r1, r3, r2
 800f6d6:	9b04      	ldr	r3, [sp, #16]
 800f6d8:	430b      	orrs	r3, r1
 800f6da:	464d      	mov	r5, r9
 800f6dc:	d10f      	bne.n	800f6fe <_dtoa_r+0xa66>
 800f6de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f6e2:	d02a      	beq.n	800f73a <_dtoa_r+0xaa2>
 800f6e4:	9b03      	ldr	r3, [sp, #12]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	dd02      	ble.n	800f6f0 <_dtoa_r+0xa58>
 800f6ea:	9b02      	ldr	r3, [sp, #8]
 800f6ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f6f0:	f88b a000 	strb.w	sl, [fp]
 800f6f4:	e775      	b.n	800f5e2 <_dtoa_r+0x94a>
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	e7ba      	b.n	800f670 <_dtoa_r+0x9d8>
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	e7e2      	b.n	800f6c4 <_dtoa_r+0xa2c>
 800f6fe:	9b03      	ldr	r3, [sp, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	db04      	blt.n	800f70e <_dtoa_r+0xa76>
 800f704:	9906      	ldr	r1, [sp, #24]
 800f706:	430b      	orrs	r3, r1
 800f708:	9904      	ldr	r1, [sp, #16]
 800f70a:	430b      	orrs	r3, r1
 800f70c:	d122      	bne.n	800f754 <_dtoa_r+0xabc>
 800f70e:	2a00      	cmp	r2, #0
 800f710:	ddee      	ble.n	800f6f0 <_dtoa_r+0xa58>
 800f712:	ee18 1a10 	vmov	r1, s16
 800f716:	2201      	movs	r2, #1
 800f718:	4620      	mov	r0, r4
 800f71a:	f000 facd 	bl	800fcb8 <__lshift>
 800f71e:	4631      	mov	r1, r6
 800f720:	ee08 0a10 	vmov	s16, r0
 800f724:	f000 fb38 	bl	800fd98 <__mcmp>
 800f728:	2800      	cmp	r0, #0
 800f72a:	dc03      	bgt.n	800f734 <_dtoa_r+0xa9c>
 800f72c:	d1e0      	bne.n	800f6f0 <_dtoa_r+0xa58>
 800f72e:	f01a 0f01 	tst.w	sl, #1
 800f732:	d0dd      	beq.n	800f6f0 <_dtoa_r+0xa58>
 800f734:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f738:	d1d7      	bne.n	800f6ea <_dtoa_r+0xa52>
 800f73a:	2339      	movs	r3, #57	; 0x39
 800f73c:	f88b 3000 	strb.w	r3, [fp]
 800f740:	462b      	mov	r3, r5
 800f742:	461d      	mov	r5, r3
 800f744:	3b01      	subs	r3, #1
 800f746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f74a:	2a39      	cmp	r2, #57	; 0x39
 800f74c:	d071      	beq.n	800f832 <_dtoa_r+0xb9a>
 800f74e:	3201      	adds	r2, #1
 800f750:	701a      	strb	r2, [r3, #0]
 800f752:	e746      	b.n	800f5e2 <_dtoa_r+0x94a>
 800f754:	2a00      	cmp	r2, #0
 800f756:	dd07      	ble.n	800f768 <_dtoa_r+0xad0>
 800f758:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f75c:	d0ed      	beq.n	800f73a <_dtoa_r+0xaa2>
 800f75e:	f10a 0301 	add.w	r3, sl, #1
 800f762:	f88b 3000 	strb.w	r3, [fp]
 800f766:	e73c      	b.n	800f5e2 <_dtoa_r+0x94a>
 800f768:	9b05      	ldr	r3, [sp, #20]
 800f76a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f76e:	4599      	cmp	r9, r3
 800f770:	d047      	beq.n	800f802 <_dtoa_r+0xb6a>
 800f772:	ee18 1a10 	vmov	r1, s16
 800f776:	2300      	movs	r3, #0
 800f778:	220a      	movs	r2, #10
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 f8ec 	bl	800f958 <__multadd>
 800f780:	45b8      	cmp	r8, r7
 800f782:	ee08 0a10 	vmov	s16, r0
 800f786:	f04f 0300 	mov.w	r3, #0
 800f78a:	f04f 020a 	mov.w	r2, #10
 800f78e:	4641      	mov	r1, r8
 800f790:	4620      	mov	r0, r4
 800f792:	d106      	bne.n	800f7a2 <_dtoa_r+0xb0a>
 800f794:	f000 f8e0 	bl	800f958 <__multadd>
 800f798:	4680      	mov	r8, r0
 800f79a:	4607      	mov	r7, r0
 800f79c:	f109 0901 	add.w	r9, r9, #1
 800f7a0:	e772      	b.n	800f688 <_dtoa_r+0x9f0>
 800f7a2:	f000 f8d9 	bl	800f958 <__multadd>
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	4680      	mov	r8, r0
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	220a      	movs	r2, #10
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f000 f8d2 	bl	800f958 <__multadd>
 800f7b4:	4607      	mov	r7, r0
 800f7b6:	e7f1      	b.n	800f79c <_dtoa_r+0xb04>
 800f7b8:	9b03      	ldr	r3, [sp, #12]
 800f7ba:	9302      	str	r3, [sp, #8]
 800f7bc:	9d01      	ldr	r5, [sp, #4]
 800f7be:	ee18 0a10 	vmov	r0, s16
 800f7c2:	4631      	mov	r1, r6
 800f7c4:	f7ff f9dc 	bl	800eb80 <quorem>
 800f7c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f7cc:	9b01      	ldr	r3, [sp, #4]
 800f7ce:	f805 ab01 	strb.w	sl, [r5], #1
 800f7d2:	1aea      	subs	r2, r5, r3
 800f7d4:	9b02      	ldr	r3, [sp, #8]
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	dd09      	ble.n	800f7ee <_dtoa_r+0xb56>
 800f7da:	ee18 1a10 	vmov	r1, s16
 800f7de:	2300      	movs	r3, #0
 800f7e0:	220a      	movs	r2, #10
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f000 f8b8 	bl	800f958 <__multadd>
 800f7e8:	ee08 0a10 	vmov	s16, r0
 800f7ec:	e7e7      	b.n	800f7be <_dtoa_r+0xb26>
 800f7ee:	9b02      	ldr	r3, [sp, #8]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bfc8      	it	gt
 800f7f4:	461d      	movgt	r5, r3
 800f7f6:	9b01      	ldr	r3, [sp, #4]
 800f7f8:	bfd8      	it	le
 800f7fa:	2501      	movle	r5, #1
 800f7fc:	441d      	add	r5, r3
 800f7fe:	f04f 0800 	mov.w	r8, #0
 800f802:	ee18 1a10 	vmov	r1, s16
 800f806:	2201      	movs	r2, #1
 800f808:	4620      	mov	r0, r4
 800f80a:	f000 fa55 	bl	800fcb8 <__lshift>
 800f80e:	4631      	mov	r1, r6
 800f810:	ee08 0a10 	vmov	s16, r0
 800f814:	f000 fac0 	bl	800fd98 <__mcmp>
 800f818:	2800      	cmp	r0, #0
 800f81a:	dc91      	bgt.n	800f740 <_dtoa_r+0xaa8>
 800f81c:	d102      	bne.n	800f824 <_dtoa_r+0xb8c>
 800f81e:	f01a 0f01 	tst.w	sl, #1
 800f822:	d18d      	bne.n	800f740 <_dtoa_r+0xaa8>
 800f824:	462b      	mov	r3, r5
 800f826:	461d      	mov	r5, r3
 800f828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f82c:	2a30      	cmp	r2, #48	; 0x30
 800f82e:	d0fa      	beq.n	800f826 <_dtoa_r+0xb8e>
 800f830:	e6d7      	b.n	800f5e2 <_dtoa_r+0x94a>
 800f832:	9a01      	ldr	r2, [sp, #4]
 800f834:	429a      	cmp	r2, r3
 800f836:	d184      	bne.n	800f742 <_dtoa_r+0xaaa>
 800f838:	9b00      	ldr	r3, [sp, #0]
 800f83a:	3301      	adds	r3, #1
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	2331      	movs	r3, #49	; 0x31
 800f840:	7013      	strb	r3, [r2, #0]
 800f842:	e6ce      	b.n	800f5e2 <_dtoa_r+0x94a>
 800f844:	4b09      	ldr	r3, [pc, #36]	; (800f86c <_dtoa_r+0xbd4>)
 800f846:	f7ff ba95 	b.w	800ed74 <_dtoa_r+0xdc>
 800f84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f47f aa6e 	bne.w	800ed2e <_dtoa_r+0x96>
 800f852:	4b07      	ldr	r3, [pc, #28]	; (800f870 <_dtoa_r+0xbd8>)
 800f854:	f7ff ba8e 	b.w	800ed74 <_dtoa_r+0xdc>
 800f858:	9b02      	ldr	r3, [sp, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	dcae      	bgt.n	800f7bc <_dtoa_r+0xb24>
 800f85e:	9b06      	ldr	r3, [sp, #24]
 800f860:	2b02      	cmp	r3, #2
 800f862:	f73f aea8 	bgt.w	800f5b6 <_dtoa_r+0x91e>
 800f866:	e7a9      	b.n	800f7bc <_dtoa_r+0xb24>
 800f868:	080113a7 	.word	0x080113a7
 800f86c:	08011304 	.word	0x08011304
 800f870:	08011328 	.word	0x08011328

0800f874 <_localeconv_r>:
 800f874:	4800      	ldr	r0, [pc, #0]	; (800f878 <_localeconv_r+0x4>)
 800f876:	4770      	bx	lr
 800f878:	20000480 	.word	0x20000480

0800f87c <__malloc_lock>:
 800f87c:	4801      	ldr	r0, [pc, #4]	; (800f884 <__malloc_lock+0x8>)
 800f87e:	f000 bd30 	b.w	80102e2 <__retarget_lock_acquire_recursive>
 800f882:	bf00      	nop
 800f884:	2000153c 	.word	0x2000153c

0800f888 <__malloc_unlock>:
 800f888:	4801      	ldr	r0, [pc, #4]	; (800f890 <__malloc_unlock+0x8>)
 800f88a:	f000 bd2b 	b.w	80102e4 <__retarget_lock_release_recursive>
 800f88e:	bf00      	nop
 800f890:	2000153c 	.word	0x2000153c

0800f894 <_Balloc>:
 800f894:	b570      	push	{r4, r5, r6, lr}
 800f896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f898:	4604      	mov	r4, r0
 800f89a:	460d      	mov	r5, r1
 800f89c:	b976      	cbnz	r6, 800f8bc <_Balloc+0x28>
 800f89e:	2010      	movs	r0, #16
 800f8a0:	f7fe fbce 	bl	800e040 <malloc>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	6260      	str	r0, [r4, #36]	; 0x24
 800f8a8:	b920      	cbnz	r0, 800f8b4 <_Balloc+0x20>
 800f8aa:	4b18      	ldr	r3, [pc, #96]	; (800f90c <_Balloc+0x78>)
 800f8ac:	4818      	ldr	r0, [pc, #96]	; (800f910 <_Balloc+0x7c>)
 800f8ae:	2166      	movs	r1, #102	; 0x66
 800f8b0:	f000 fce6 	bl	8010280 <__assert_func>
 800f8b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8b8:	6006      	str	r6, [r0, #0]
 800f8ba:	60c6      	str	r6, [r0, #12]
 800f8bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8be:	68f3      	ldr	r3, [r6, #12]
 800f8c0:	b183      	cbz	r3, 800f8e4 <_Balloc+0x50>
 800f8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8ca:	b9b8      	cbnz	r0, 800f8fc <_Balloc+0x68>
 800f8cc:	2101      	movs	r1, #1
 800f8ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f8d2:	1d72      	adds	r2, r6, #5
 800f8d4:	0092      	lsls	r2, r2, #2
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 fb60 	bl	800ff9c <_calloc_r>
 800f8dc:	b160      	cbz	r0, 800f8f8 <_Balloc+0x64>
 800f8de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8e2:	e00e      	b.n	800f902 <_Balloc+0x6e>
 800f8e4:	2221      	movs	r2, #33	; 0x21
 800f8e6:	2104      	movs	r1, #4
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f000 fb57 	bl	800ff9c <_calloc_r>
 800f8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8f0:	60f0      	str	r0, [r6, #12]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1e4      	bne.n	800f8c2 <_Balloc+0x2e>
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	bd70      	pop	{r4, r5, r6, pc}
 800f8fc:	6802      	ldr	r2, [r0, #0]
 800f8fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f902:	2300      	movs	r3, #0
 800f904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f908:	e7f7      	b.n	800f8fa <_Balloc+0x66>
 800f90a:	bf00      	nop
 800f90c:	08011335 	.word	0x08011335
 800f910:	080113b8 	.word	0x080113b8

0800f914 <_Bfree>:
 800f914:	b570      	push	{r4, r5, r6, lr}
 800f916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f918:	4605      	mov	r5, r0
 800f91a:	460c      	mov	r4, r1
 800f91c:	b976      	cbnz	r6, 800f93c <_Bfree+0x28>
 800f91e:	2010      	movs	r0, #16
 800f920:	f7fe fb8e 	bl	800e040 <malloc>
 800f924:	4602      	mov	r2, r0
 800f926:	6268      	str	r0, [r5, #36]	; 0x24
 800f928:	b920      	cbnz	r0, 800f934 <_Bfree+0x20>
 800f92a:	4b09      	ldr	r3, [pc, #36]	; (800f950 <_Bfree+0x3c>)
 800f92c:	4809      	ldr	r0, [pc, #36]	; (800f954 <_Bfree+0x40>)
 800f92e:	218a      	movs	r1, #138	; 0x8a
 800f930:	f000 fca6 	bl	8010280 <__assert_func>
 800f934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f938:	6006      	str	r6, [r0, #0]
 800f93a:	60c6      	str	r6, [r0, #12]
 800f93c:	b13c      	cbz	r4, 800f94e <_Bfree+0x3a>
 800f93e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f940:	6862      	ldr	r2, [r4, #4]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f948:	6021      	str	r1, [r4, #0]
 800f94a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
 800f950:	08011335 	.word	0x08011335
 800f954:	080113b8 	.word	0x080113b8

0800f958 <__multadd>:
 800f958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95c:	690d      	ldr	r5, [r1, #16]
 800f95e:	4607      	mov	r7, r0
 800f960:	460c      	mov	r4, r1
 800f962:	461e      	mov	r6, r3
 800f964:	f101 0c14 	add.w	ip, r1, #20
 800f968:	2000      	movs	r0, #0
 800f96a:	f8dc 3000 	ldr.w	r3, [ip]
 800f96e:	b299      	uxth	r1, r3
 800f970:	fb02 6101 	mla	r1, r2, r1, r6
 800f974:	0c1e      	lsrs	r6, r3, #16
 800f976:	0c0b      	lsrs	r3, r1, #16
 800f978:	fb02 3306 	mla	r3, r2, r6, r3
 800f97c:	b289      	uxth	r1, r1
 800f97e:	3001      	adds	r0, #1
 800f980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f984:	4285      	cmp	r5, r0
 800f986:	f84c 1b04 	str.w	r1, [ip], #4
 800f98a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f98e:	dcec      	bgt.n	800f96a <__multadd+0x12>
 800f990:	b30e      	cbz	r6, 800f9d6 <__multadd+0x7e>
 800f992:	68a3      	ldr	r3, [r4, #8]
 800f994:	42ab      	cmp	r3, r5
 800f996:	dc19      	bgt.n	800f9cc <__multadd+0x74>
 800f998:	6861      	ldr	r1, [r4, #4]
 800f99a:	4638      	mov	r0, r7
 800f99c:	3101      	adds	r1, #1
 800f99e:	f7ff ff79 	bl	800f894 <_Balloc>
 800f9a2:	4680      	mov	r8, r0
 800f9a4:	b928      	cbnz	r0, 800f9b2 <__multadd+0x5a>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	4b0c      	ldr	r3, [pc, #48]	; (800f9dc <__multadd+0x84>)
 800f9aa:	480d      	ldr	r0, [pc, #52]	; (800f9e0 <__multadd+0x88>)
 800f9ac:	21b5      	movs	r1, #181	; 0xb5
 800f9ae:	f000 fc67 	bl	8010280 <__assert_func>
 800f9b2:	6922      	ldr	r2, [r4, #16]
 800f9b4:	3202      	adds	r2, #2
 800f9b6:	f104 010c 	add.w	r1, r4, #12
 800f9ba:	0092      	lsls	r2, r2, #2
 800f9bc:	300c      	adds	r0, #12
 800f9be:	f7fe fb4f 	bl	800e060 <memcpy>
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	f7ff ffa5 	bl	800f914 <_Bfree>
 800f9ca:	4644      	mov	r4, r8
 800f9cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9d0:	3501      	adds	r5, #1
 800f9d2:	615e      	str	r6, [r3, #20]
 800f9d4:	6125      	str	r5, [r4, #16]
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9dc:	080113a7 	.word	0x080113a7
 800f9e0:	080113b8 	.word	0x080113b8

0800f9e4 <__hi0bits>:
 800f9e4:	0c03      	lsrs	r3, r0, #16
 800f9e6:	041b      	lsls	r3, r3, #16
 800f9e8:	b9d3      	cbnz	r3, 800fa20 <__hi0bits+0x3c>
 800f9ea:	0400      	lsls	r0, r0, #16
 800f9ec:	2310      	movs	r3, #16
 800f9ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f9f2:	bf04      	itt	eq
 800f9f4:	0200      	lsleq	r0, r0, #8
 800f9f6:	3308      	addeq	r3, #8
 800f9f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f9fc:	bf04      	itt	eq
 800f9fe:	0100      	lsleq	r0, r0, #4
 800fa00:	3304      	addeq	r3, #4
 800fa02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa06:	bf04      	itt	eq
 800fa08:	0080      	lsleq	r0, r0, #2
 800fa0a:	3302      	addeq	r3, #2
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	db05      	blt.n	800fa1c <__hi0bits+0x38>
 800fa10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa14:	f103 0301 	add.w	r3, r3, #1
 800fa18:	bf08      	it	eq
 800fa1a:	2320      	moveq	r3, #32
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	4770      	bx	lr
 800fa20:	2300      	movs	r3, #0
 800fa22:	e7e4      	b.n	800f9ee <__hi0bits+0xa>

0800fa24 <__lo0bits>:
 800fa24:	6803      	ldr	r3, [r0, #0]
 800fa26:	f013 0207 	ands.w	r2, r3, #7
 800fa2a:	4601      	mov	r1, r0
 800fa2c:	d00b      	beq.n	800fa46 <__lo0bits+0x22>
 800fa2e:	07da      	lsls	r2, r3, #31
 800fa30:	d423      	bmi.n	800fa7a <__lo0bits+0x56>
 800fa32:	0798      	lsls	r0, r3, #30
 800fa34:	bf49      	itett	mi
 800fa36:	085b      	lsrmi	r3, r3, #1
 800fa38:	089b      	lsrpl	r3, r3, #2
 800fa3a:	2001      	movmi	r0, #1
 800fa3c:	600b      	strmi	r3, [r1, #0]
 800fa3e:	bf5c      	itt	pl
 800fa40:	600b      	strpl	r3, [r1, #0]
 800fa42:	2002      	movpl	r0, #2
 800fa44:	4770      	bx	lr
 800fa46:	b298      	uxth	r0, r3
 800fa48:	b9a8      	cbnz	r0, 800fa76 <__lo0bits+0x52>
 800fa4a:	0c1b      	lsrs	r3, r3, #16
 800fa4c:	2010      	movs	r0, #16
 800fa4e:	b2da      	uxtb	r2, r3
 800fa50:	b90a      	cbnz	r2, 800fa56 <__lo0bits+0x32>
 800fa52:	3008      	adds	r0, #8
 800fa54:	0a1b      	lsrs	r3, r3, #8
 800fa56:	071a      	lsls	r2, r3, #28
 800fa58:	bf04      	itt	eq
 800fa5a:	091b      	lsreq	r3, r3, #4
 800fa5c:	3004      	addeq	r0, #4
 800fa5e:	079a      	lsls	r2, r3, #30
 800fa60:	bf04      	itt	eq
 800fa62:	089b      	lsreq	r3, r3, #2
 800fa64:	3002      	addeq	r0, #2
 800fa66:	07da      	lsls	r2, r3, #31
 800fa68:	d403      	bmi.n	800fa72 <__lo0bits+0x4e>
 800fa6a:	085b      	lsrs	r3, r3, #1
 800fa6c:	f100 0001 	add.w	r0, r0, #1
 800fa70:	d005      	beq.n	800fa7e <__lo0bits+0x5a>
 800fa72:	600b      	str	r3, [r1, #0]
 800fa74:	4770      	bx	lr
 800fa76:	4610      	mov	r0, r2
 800fa78:	e7e9      	b.n	800fa4e <__lo0bits+0x2a>
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	4770      	bx	lr
 800fa7e:	2020      	movs	r0, #32
 800fa80:	4770      	bx	lr
	...

0800fa84 <__i2b>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	460c      	mov	r4, r1
 800fa88:	2101      	movs	r1, #1
 800fa8a:	f7ff ff03 	bl	800f894 <_Balloc>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	b928      	cbnz	r0, 800fa9e <__i2b+0x1a>
 800fa92:	4b05      	ldr	r3, [pc, #20]	; (800faa8 <__i2b+0x24>)
 800fa94:	4805      	ldr	r0, [pc, #20]	; (800faac <__i2b+0x28>)
 800fa96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fa9a:	f000 fbf1 	bl	8010280 <__assert_func>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	6144      	str	r4, [r0, #20]
 800faa2:	6103      	str	r3, [r0, #16]
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	bf00      	nop
 800faa8:	080113a7 	.word	0x080113a7
 800faac:	080113b8 	.word	0x080113b8

0800fab0 <__multiply>:
 800fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab4:	4691      	mov	r9, r2
 800fab6:	690a      	ldr	r2, [r1, #16]
 800fab8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	bfb8      	it	lt
 800fac0:	460b      	movlt	r3, r1
 800fac2:	460c      	mov	r4, r1
 800fac4:	bfbc      	itt	lt
 800fac6:	464c      	movlt	r4, r9
 800fac8:	4699      	movlt	r9, r3
 800faca:	6927      	ldr	r7, [r4, #16]
 800facc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fad0:	68a3      	ldr	r3, [r4, #8]
 800fad2:	6861      	ldr	r1, [r4, #4]
 800fad4:	eb07 060a 	add.w	r6, r7, sl
 800fad8:	42b3      	cmp	r3, r6
 800fada:	b085      	sub	sp, #20
 800fadc:	bfb8      	it	lt
 800fade:	3101      	addlt	r1, #1
 800fae0:	f7ff fed8 	bl	800f894 <_Balloc>
 800fae4:	b930      	cbnz	r0, 800faf4 <__multiply+0x44>
 800fae6:	4602      	mov	r2, r0
 800fae8:	4b44      	ldr	r3, [pc, #272]	; (800fbfc <__multiply+0x14c>)
 800faea:	4845      	ldr	r0, [pc, #276]	; (800fc00 <__multiply+0x150>)
 800faec:	f240 115d 	movw	r1, #349	; 0x15d
 800faf0:	f000 fbc6 	bl	8010280 <__assert_func>
 800faf4:	f100 0514 	add.w	r5, r0, #20
 800faf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fafc:	462b      	mov	r3, r5
 800fafe:	2200      	movs	r2, #0
 800fb00:	4543      	cmp	r3, r8
 800fb02:	d321      	bcc.n	800fb48 <__multiply+0x98>
 800fb04:	f104 0314 	add.w	r3, r4, #20
 800fb08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fb0c:	f109 0314 	add.w	r3, r9, #20
 800fb10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fb14:	9202      	str	r2, [sp, #8]
 800fb16:	1b3a      	subs	r2, r7, r4
 800fb18:	3a15      	subs	r2, #21
 800fb1a:	f022 0203 	bic.w	r2, r2, #3
 800fb1e:	3204      	adds	r2, #4
 800fb20:	f104 0115 	add.w	r1, r4, #21
 800fb24:	428f      	cmp	r7, r1
 800fb26:	bf38      	it	cc
 800fb28:	2204      	movcc	r2, #4
 800fb2a:	9201      	str	r2, [sp, #4]
 800fb2c:	9a02      	ldr	r2, [sp, #8]
 800fb2e:	9303      	str	r3, [sp, #12]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d80c      	bhi.n	800fb4e <__multiply+0x9e>
 800fb34:	2e00      	cmp	r6, #0
 800fb36:	dd03      	ble.n	800fb40 <__multiply+0x90>
 800fb38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d05a      	beq.n	800fbf6 <__multiply+0x146>
 800fb40:	6106      	str	r6, [r0, #16]
 800fb42:	b005      	add	sp, #20
 800fb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb48:	f843 2b04 	str.w	r2, [r3], #4
 800fb4c:	e7d8      	b.n	800fb00 <__multiply+0x50>
 800fb4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb52:	f1ba 0f00 	cmp.w	sl, #0
 800fb56:	d024      	beq.n	800fba2 <__multiply+0xf2>
 800fb58:	f104 0e14 	add.w	lr, r4, #20
 800fb5c:	46a9      	mov	r9, r5
 800fb5e:	f04f 0c00 	mov.w	ip, #0
 800fb62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fb66:	f8d9 1000 	ldr.w	r1, [r9]
 800fb6a:	fa1f fb82 	uxth.w	fp, r2
 800fb6e:	b289      	uxth	r1, r1
 800fb70:	fb0a 110b 	mla	r1, sl, fp, r1
 800fb74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fb78:	f8d9 2000 	ldr.w	r2, [r9]
 800fb7c:	4461      	add	r1, ip
 800fb7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb82:	fb0a c20b 	mla	r2, sl, fp, ip
 800fb86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb8a:	b289      	uxth	r1, r1
 800fb8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb90:	4577      	cmp	r7, lr
 800fb92:	f849 1b04 	str.w	r1, [r9], #4
 800fb96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb9a:	d8e2      	bhi.n	800fb62 <__multiply+0xb2>
 800fb9c:	9a01      	ldr	r2, [sp, #4]
 800fb9e:	f845 c002 	str.w	ip, [r5, r2]
 800fba2:	9a03      	ldr	r2, [sp, #12]
 800fba4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	f1b9 0f00 	cmp.w	r9, #0
 800fbae:	d020      	beq.n	800fbf2 <__multiply+0x142>
 800fbb0:	6829      	ldr	r1, [r5, #0]
 800fbb2:	f104 0c14 	add.w	ip, r4, #20
 800fbb6:	46ae      	mov	lr, r5
 800fbb8:	f04f 0a00 	mov.w	sl, #0
 800fbbc:	f8bc b000 	ldrh.w	fp, [ip]
 800fbc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fbc4:	fb09 220b 	mla	r2, r9, fp, r2
 800fbc8:	4492      	add	sl, r2
 800fbca:	b289      	uxth	r1, r1
 800fbcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fbd0:	f84e 1b04 	str.w	r1, [lr], #4
 800fbd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fbd8:	f8be 1000 	ldrh.w	r1, [lr]
 800fbdc:	0c12      	lsrs	r2, r2, #16
 800fbde:	fb09 1102 	mla	r1, r9, r2, r1
 800fbe2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fbe6:	4567      	cmp	r7, ip
 800fbe8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fbec:	d8e6      	bhi.n	800fbbc <__multiply+0x10c>
 800fbee:	9a01      	ldr	r2, [sp, #4]
 800fbf0:	50a9      	str	r1, [r5, r2]
 800fbf2:	3504      	adds	r5, #4
 800fbf4:	e79a      	b.n	800fb2c <__multiply+0x7c>
 800fbf6:	3e01      	subs	r6, #1
 800fbf8:	e79c      	b.n	800fb34 <__multiply+0x84>
 800fbfa:	bf00      	nop
 800fbfc:	080113a7 	.word	0x080113a7
 800fc00:	080113b8 	.word	0x080113b8

0800fc04 <__pow5mult>:
 800fc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc08:	4615      	mov	r5, r2
 800fc0a:	f012 0203 	ands.w	r2, r2, #3
 800fc0e:	4606      	mov	r6, r0
 800fc10:	460f      	mov	r7, r1
 800fc12:	d007      	beq.n	800fc24 <__pow5mult+0x20>
 800fc14:	4c25      	ldr	r4, [pc, #148]	; (800fcac <__pow5mult+0xa8>)
 800fc16:	3a01      	subs	r2, #1
 800fc18:	2300      	movs	r3, #0
 800fc1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc1e:	f7ff fe9b 	bl	800f958 <__multadd>
 800fc22:	4607      	mov	r7, r0
 800fc24:	10ad      	asrs	r5, r5, #2
 800fc26:	d03d      	beq.n	800fca4 <__pow5mult+0xa0>
 800fc28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc2a:	b97c      	cbnz	r4, 800fc4c <__pow5mult+0x48>
 800fc2c:	2010      	movs	r0, #16
 800fc2e:	f7fe fa07 	bl	800e040 <malloc>
 800fc32:	4602      	mov	r2, r0
 800fc34:	6270      	str	r0, [r6, #36]	; 0x24
 800fc36:	b928      	cbnz	r0, 800fc44 <__pow5mult+0x40>
 800fc38:	4b1d      	ldr	r3, [pc, #116]	; (800fcb0 <__pow5mult+0xac>)
 800fc3a:	481e      	ldr	r0, [pc, #120]	; (800fcb4 <__pow5mult+0xb0>)
 800fc3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc40:	f000 fb1e 	bl	8010280 <__assert_func>
 800fc44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc48:	6004      	str	r4, [r0, #0]
 800fc4a:	60c4      	str	r4, [r0, #12]
 800fc4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc54:	b94c      	cbnz	r4, 800fc6a <__pow5mult+0x66>
 800fc56:	f240 2171 	movw	r1, #625	; 0x271
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f7ff ff12 	bl	800fa84 <__i2b>
 800fc60:	2300      	movs	r3, #0
 800fc62:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc66:	4604      	mov	r4, r0
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	f04f 0900 	mov.w	r9, #0
 800fc6e:	07eb      	lsls	r3, r5, #31
 800fc70:	d50a      	bpl.n	800fc88 <__pow5mult+0x84>
 800fc72:	4639      	mov	r1, r7
 800fc74:	4622      	mov	r2, r4
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7ff ff1a 	bl	800fab0 <__multiply>
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	4680      	mov	r8, r0
 800fc80:	4630      	mov	r0, r6
 800fc82:	f7ff fe47 	bl	800f914 <_Bfree>
 800fc86:	4647      	mov	r7, r8
 800fc88:	106d      	asrs	r5, r5, #1
 800fc8a:	d00b      	beq.n	800fca4 <__pow5mult+0xa0>
 800fc8c:	6820      	ldr	r0, [r4, #0]
 800fc8e:	b938      	cbnz	r0, 800fca0 <__pow5mult+0x9c>
 800fc90:	4622      	mov	r2, r4
 800fc92:	4621      	mov	r1, r4
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7ff ff0b 	bl	800fab0 <__multiply>
 800fc9a:	6020      	str	r0, [r4, #0]
 800fc9c:	f8c0 9000 	str.w	r9, [r0]
 800fca0:	4604      	mov	r4, r0
 800fca2:	e7e4      	b.n	800fc6e <__pow5mult+0x6a>
 800fca4:	4638      	mov	r0, r7
 800fca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcaa:	bf00      	nop
 800fcac:	08011508 	.word	0x08011508
 800fcb0:	08011335 	.word	0x08011335
 800fcb4:	080113b8 	.word	0x080113b8

0800fcb8 <__lshift>:
 800fcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcbc:	460c      	mov	r4, r1
 800fcbe:	6849      	ldr	r1, [r1, #4]
 800fcc0:	6923      	ldr	r3, [r4, #16]
 800fcc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcc6:	68a3      	ldr	r3, [r4, #8]
 800fcc8:	4607      	mov	r7, r0
 800fcca:	4691      	mov	r9, r2
 800fccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcd0:	f108 0601 	add.w	r6, r8, #1
 800fcd4:	42b3      	cmp	r3, r6
 800fcd6:	db0b      	blt.n	800fcf0 <__lshift+0x38>
 800fcd8:	4638      	mov	r0, r7
 800fcda:	f7ff fddb 	bl	800f894 <_Balloc>
 800fcde:	4605      	mov	r5, r0
 800fce0:	b948      	cbnz	r0, 800fcf6 <__lshift+0x3e>
 800fce2:	4602      	mov	r2, r0
 800fce4:	4b2a      	ldr	r3, [pc, #168]	; (800fd90 <__lshift+0xd8>)
 800fce6:	482b      	ldr	r0, [pc, #172]	; (800fd94 <__lshift+0xdc>)
 800fce8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fcec:	f000 fac8 	bl	8010280 <__assert_func>
 800fcf0:	3101      	adds	r1, #1
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	e7ee      	b.n	800fcd4 <__lshift+0x1c>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f100 0114 	add.w	r1, r0, #20
 800fcfc:	f100 0210 	add.w	r2, r0, #16
 800fd00:	4618      	mov	r0, r3
 800fd02:	4553      	cmp	r3, sl
 800fd04:	db37      	blt.n	800fd76 <__lshift+0xbe>
 800fd06:	6920      	ldr	r0, [r4, #16]
 800fd08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd0c:	f104 0314 	add.w	r3, r4, #20
 800fd10:	f019 091f 	ands.w	r9, r9, #31
 800fd14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fd1c:	d02f      	beq.n	800fd7e <__lshift+0xc6>
 800fd1e:	f1c9 0e20 	rsb	lr, r9, #32
 800fd22:	468a      	mov	sl, r1
 800fd24:	f04f 0c00 	mov.w	ip, #0
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	fa02 f209 	lsl.w	r2, r2, r9
 800fd2e:	ea42 020c 	orr.w	r2, r2, ip
 800fd32:	f84a 2b04 	str.w	r2, [sl], #4
 800fd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd3a:	4298      	cmp	r0, r3
 800fd3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fd40:	d8f2      	bhi.n	800fd28 <__lshift+0x70>
 800fd42:	1b03      	subs	r3, r0, r4
 800fd44:	3b15      	subs	r3, #21
 800fd46:	f023 0303 	bic.w	r3, r3, #3
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	f104 0215 	add.w	r2, r4, #21
 800fd50:	4290      	cmp	r0, r2
 800fd52:	bf38      	it	cc
 800fd54:	2304      	movcc	r3, #4
 800fd56:	f841 c003 	str.w	ip, [r1, r3]
 800fd5a:	f1bc 0f00 	cmp.w	ip, #0
 800fd5e:	d001      	beq.n	800fd64 <__lshift+0xac>
 800fd60:	f108 0602 	add.w	r6, r8, #2
 800fd64:	3e01      	subs	r6, #1
 800fd66:	4638      	mov	r0, r7
 800fd68:	612e      	str	r6, [r5, #16]
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	f7ff fdd2 	bl	800f914 <_Bfree>
 800fd70:	4628      	mov	r0, r5
 800fd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd76:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	e7c1      	b.n	800fd02 <__lshift+0x4a>
 800fd7e:	3904      	subs	r1, #4
 800fd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd84:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd88:	4298      	cmp	r0, r3
 800fd8a:	d8f9      	bhi.n	800fd80 <__lshift+0xc8>
 800fd8c:	e7ea      	b.n	800fd64 <__lshift+0xac>
 800fd8e:	bf00      	nop
 800fd90:	080113a7 	.word	0x080113a7
 800fd94:	080113b8 	.word	0x080113b8

0800fd98 <__mcmp>:
 800fd98:	b530      	push	{r4, r5, lr}
 800fd9a:	6902      	ldr	r2, [r0, #16]
 800fd9c:	690c      	ldr	r4, [r1, #16]
 800fd9e:	1b12      	subs	r2, r2, r4
 800fda0:	d10e      	bne.n	800fdc0 <__mcmp+0x28>
 800fda2:	f100 0314 	add.w	r3, r0, #20
 800fda6:	3114      	adds	r1, #20
 800fda8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fdac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fdb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fdb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fdb8:	42a5      	cmp	r5, r4
 800fdba:	d003      	beq.n	800fdc4 <__mcmp+0x2c>
 800fdbc:	d305      	bcc.n	800fdca <__mcmp+0x32>
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	bd30      	pop	{r4, r5, pc}
 800fdc4:	4283      	cmp	r3, r0
 800fdc6:	d3f3      	bcc.n	800fdb0 <__mcmp+0x18>
 800fdc8:	e7fa      	b.n	800fdc0 <__mcmp+0x28>
 800fdca:	f04f 32ff 	mov.w	r2, #4294967295
 800fdce:	e7f7      	b.n	800fdc0 <__mcmp+0x28>

0800fdd0 <__mdiff>:
 800fdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd4:	460c      	mov	r4, r1
 800fdd6:	4606      	mov	r6, r0
 800fdd8:	4611      	mov	r1, r2
 800fdda:	4620      	mov	r0, r4
 800fddc:	4690      	mov	r8, r2
 800fdde:	f7ff ffdb 	bl	800fd98 <__mcmp>
 800fde2:	1e05      	subs	r5, r0, #0
 800fde4:	d110      	bne.n	800fe08 <__mdiff+0x38>
 800fde6:	4629      	mov	r1, r5
 800fde8:	4630      	mov	r0, r6
 800fdea:	f7ff fd53 	bl	800f894 <_Balloc>
 800fdee:	b930      	cbnz	r0, 800fdfe <__mdiff+0x2e>
 800fdf0:	4b3a      	ldr	r3, [pc, #232]	; (800fedc <__mdiff+0x10c>)
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	f240 2132 	movw	r1, #562	; 0x232
 800fdf8:	4839      	ldr	r0, [pc, #228]	; (800fee0 <__mdiff+0x110>)
 800fdfa:	f000 fa41 	bl	8010280 <__assert_func>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe08:	bfa4      	itt	ge
 800fe0a:	4643      	movge	r3, r8
 800fe0c:	46a0      	movge	r8, r4
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe14:	bfa6      	itte	ge
 800fe16:	461c      	movge	r4, r3
 800fe18:	2500      	movge	r5, #0
 800fe1a:	2501      	movlt	r5, #1
 800fe1c:	f7ff fd3a 	bl	800f894 <_Balloc>
 800fe20:	b920      	cbnz	r0, 800fe2c <__mdiff+0x5c>
 800fe22:	4b2e      	ldr	r3, [pc, #184]	; (800fedc <__mdiff+0x10c>)
 800fe24:	4602      	mov	r2, r0
 800fe26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe2a:	e7e5      	b.n	800fdf8 <__mdiff+0x28>
 800fe2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe30:	6926      	ldr	r6, [r4, #16]
 800fe32:	60c5      	str	r5, [r0, #12]
 800fe34:	f104 0914 	add.w	r9, r4, #20
 800fe38:	f108 0514 	add.w	r5, r8, #20
 800fe3c:	f100 0e14 	add.w	lr, r0, #20
 800fe40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fe44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fe48:	f108 0210 	add.w	r2, r8, #16
 800fe4c:	46f2      	mov	sl, lr
 800fe4e:	2100      	movs	r1, #0
 800fe50:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe58:	fa1f f883 	uxth.w	r8, r3
 800fe5c:	fa11 f18b 	uxtah	r1, r1, fp
 800fe60:	0c1b      	lsrs	r3, r3, #16
 800fe62:	eba1 0808 	sub.w	r8, r1, r8
 800fe66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe6e:	fa1f f888 	uxth.w	r8, r8
 800fe72:	1419      	asrs	r1, r3, #16
 800fe74:	454e      	cmp	r6, r9
 800fe76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe7a:	f84a 3b04 	str.w	r3, [sl], #4
 800fe7e:	d8e7      	bhi.n	800fe50 <__mdiff+0x80>
 800fe80:	1b33      	subs	r3, r6, r4
 800fe82:	3b15      	subs	r3, #21
 800fe84:	f023 0303 	bic.w	r3, r3, #3
 800fe88:	3304      	adds	r3, #4
 800fe8a:	3415      	adds	r4, #21
 800fe8c:	42a6      	cmp	r6, r4
 800fe8e:	bf38      	it	cc
 800fe90:	2304      	movcc	r3, #4
 800fe92:	441d      	add	r5, r3
 800fe94:	4473      	add	r3, lr
 800fe96:	469e      	mov	lr, r3
 800fe98:	462e      	mov	r6, r5
 800fe9a:	4566      	cmp	r6, ip
 800fe9c:	d30e      	bcc.n	800febc <__mdiff+0xec>
 800fe9e:	f10c 0203 	add.w	r2, ip, #3
 800fea2:	1b52      	subs	r2, r2, r5
 800fea4:	f022 0203 	bic.w	r2, r2, #3
 800fea8:	3d03      	subs	r5, #3
 800feaa:	45ac      	cmp	ip, r5
 800feac:	bf38      	it	cc
 800feae:	2200      	movcc	r2, #0
 800feb0:	441a      	add	r2, r3
 800feb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800feb6:	b17b      	cbz	r3, 800fed8 <__mdiff+0x108>
 800feb8:	6107      	str	r7, [r0, #16]
 800feba:	e7a3      	b.n	800fe04 <__mdiff+0x34>
 800febc:	f856 8b04 	ldr.w	r8, [r6], #4
 800fec0:	fa11 f288 	uxtah	r2, r1, r8
 800fec4:	1414      	asrs	r4, r2, #16
 800fec6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800feca:	b292      	uxth	r2, r2
 800fecc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fed0:	f84e 2b04 	str.w	r2, [lr], #4
 800fed4:	1421      	asrs	r1, r4, #16
 800fed6:	e7e0      	b.n	800fe9a <__mdiff+0xca>
 800fed8:	3f01      	subs	r7, #1
 800feda:	e7ea      	b.n	800feb2 <__mdiff+0xe2>
 800fedc:	080113a7 	.word	0x080113a7
 800fee0:	080113b8 	.word	0x080113b8

0800fee4 <__d2b>:
 800fee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fee8:	4689      	mov	r9, r1
 800feea:	2101      	movs	r1, #1
 800feec:	ec57 6b10 	vmov	r6, r7, d0
 800fef0:	4690      	mov	r8, r2
 800fef2:	f7ff fccf 	bl	800f894 <_Balloc>
 800fef6:	4604      	mov	r4, r0
 800fef8:	b930      	cbnz	r0, 800ff08 <__d2b+0x24>
 800fefa:	4602      	mov	r2, r0
 800fefc:	4b25      	ldr	r3, [pc, #148]	; (800ff94 <__d2b+0xb0>)
 800fefe:	4826      	ldr	r0, [pc, #152]	; (800ff98 <__d2b+0xb4>)
 800ff00:	f240 310a 	movw	r1, #778	; 0x30a
 800ff04:	f000 f9bc 	bl	8010280 <__assert_func>
 800ff08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff10:	bb35      	cbnz	r5, 800ff60 <__d2b+0x7c>
 800ff12:	2e00      	cmp	r6, #0
 800ff14:	9301      	str	r3, [sp, #4]
 800ff16:	d028      	beq.n	800ff6a <__d2b+0x86>
 800ff18:	4668      	mov	r0, sp
 800ff1a:	9600      	str	r6, [sp, #0]
 800ff1c:	f7ff fd82 	bl	800fa24 <__lo0bits>
 800ff20:	9900      	ldr	r1, [sp, #0]
 800ff22:	b300      	cbz	r0, 800ff66 <__d2b+0x82>
 800ff24:	9a01      	ldr	r2, [sp, #4]
 800ff26:	f1c0 0320 	rsb	r3, r0, #32
 800ff2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff2e:	430b      	orrs	r3, r1
 800ff30:	40c2      	lsrs	r2, r0
 800ff32:	6163      	str	r3, [r4, #20]
 800ff34:	9201      	str	r2, [sp, #4]
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	61a3      	str	r3, [r4, #24]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	bf14      	ite	ne
 800ff3e:	2202      	movne	r2, #2
 800ff40:	2201      	moveq	r2, #1
 800ff42:	6122      	str	r2, [r4, #16]
 800ff44:	b1d5      	cbz	r5, 800ff7c <__d2b+0x98>
 800ff46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff4a:	4405      	add	r5, r0
 800ff4c:	f8c9 5000 	str.w	r5, [r9]
 800ff50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff54:	f8c8 0000 	str.w	r0, [r8]
 800ff58:	4620      	mov	r0, r4
 800ff5a:	b003      	add	sp, #12
 800ff5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff64:	e7d5      	b.n	800ff12 <__d2b+0x2e>
 800ff66:	6161      	str	r1, [r4, #20]
 800ff68:	e7e5      	b.n	800ff36 <__d2b+0x52>
 800ff6a:	a801      	add	r0, sp, #4
 800ff6c:	f7ff fd5a 	bl	800fa24 <__lo0bits>
 800ff70:	9b01      	ldr	r3, [sp, #4]
 800ff72:	6163      	str	r3, [r4, #20]
 800ff74:	2201      	movs	r2, #1
 800ff76:	6122      	str	r2, [r4, #16]
 800ff78:	3020      	adds	r0, #32
 800ff7a:	e7e3      	b.n	800ff44 <__d2b+0x60>
 800ff7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff84:	f8c9 0000 	str.w	r0, [r9]
 800ff88:	6918      	ldr	r0, [r3, #16]
 800ff8a:	f7ff fd2b 	bl	800f9e4 <__hi0bits>
 800ff8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff92:	e7df      	b.n	800ff54 <__d2b+0x70>
 800ff94:	080113a7 	.word	0x080113a7
 800ff98:	080113b8 	.word	0x080113b8

0800ff9c <_calloc_r>:
 800ff9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff9e:	fba1 2402 	umull	r2, r4, r1, r2
 800ffa2:	b94c      	cbnz	r4, 800ffb8 <_calloc_r+0x1c>
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	9201      	str	r2, [sp, #4]
 800ffa8:	f7fe f8dc 	bl	800e164 <_malloc_r>
 800ffac:	9a01      	ldr	r2, [sp, #4]
 800ffae:	4605      	mov	r5, r0
 800ffb0:	b930      	cbnz	r0, 800ffc0 <_calloc_r+0x24>
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	b003      	add	sp, #12
 800ffb6:	bd30      	pop	{r4, r5, pc}
 800ffb8:	220c      	movs	r2, #12
 800ffba:	6002      	str	r2, [r0, #0]
 800ffbc:	2500      	movs	r5, #0
 800ffbe:	e7f8      	b.n	800ffb2 <_calloc_r+0x16>
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	f7fe f85b 	bl	800e07c <memset>
 800ffc6:	e7f4      	b.n	800ffb2 <_calloc_r+0x16>

0800ffc8 <__ssputs_r>:
 800ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffcc:	688e      	ldr	r6, [r1, #8]
 800ffce:	429e      	cmp	r6, r3
 800ffd0:	4682      	mov	sl, r0
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	4690      	mov	r8, r2
 800ffd6:	461f      	mov	r7, r3
 800ffd8:	d838      	bhi.n	801004c <__ssputs_r+0x84>
 800ffda:	898a      	ldrh	r2, [r1, #12]
 800ffdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ffe0:	d032      	beq.n	8010048 <__ssputs_r+0x80>
 800ffe2:	6825      	ldr	r5, [r4, #0]
 800ffe4:	6909      	ldr	r1, [r1, #16]
 800ffe6:	eba5 0901 	sub.w	r9, r5, r1
 800ffea:	6965      	ldr	r5, [r4, #20]
 800ffec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fff4:	3301      	adds	r3, #1
 800fff6:	444b      	add	r3, r9
 800fff8:	106d      	asrs	r5, r5, #1
 800fffa:	429d      	cmp	r5, r3
 800fffc:	bf38      	it	cc
 800fffe:	461d      	movcc	r5, r3
 8010000:	0553      	lsls	r3, r2, #21
 8010002:	d531      	bpl.n	8010068 <__ssputs_r+0xa0>
 8010004:	4629      	mov	r1, r5
 8010006:	f7fe f8ad 	bl	800e164 <_malloc_r>
 801000a:	4606      	mov	r6, r0
 801000c:	b950      	cbnz	r0, 8010024 <__ssputs_r+0x5c>
 801000e:	230c      	movs	r3, #12
 8010010:	f8ca 3000 	str.w	r3, [sl]
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801001a:	81a3      	strh	r3, [r4, #12]
 801001c:	f04f 30ff 	mov.w	r0, #4294967295
 8010020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010024:	6921      	ldr	r1, [r4, #16]
 8010026:	464a      	mov	r2, r9
 8010028:	f7fe f81a 	bl	800e060 <memcpy>
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010036:	81a3      	strh	r3, [r4, #12]
 8010038:	6126      	str	r6, [r4, #16]
 801003a:	6165      	str	r5, [r4, #20]
 801003c:	444e      	add	r6, r9
 801003e:	eba5 0509 	sub.w	r5, r5, r9
 8010042:	6026      	str	r6, [r4, #0]
 8010044:	60a5      	str	r5, [r4, #8]
 8010046:	463e      	mov	r6, r7
 8010048:	42be      	cmp	r6, r7
 801004a:	d900      	bls.n	801004e <__ssputs_r+0x86>
 801004c:	463e      	mov	r6, r7
 801004e:	6820      	ldr	r0, [r4, #0]
 8010050:	4632      	mov	r2, r6
 8010052:	4641      	mov	r1, r8
 8010054:	f000 f959 	bl	801030a <memmove>
 8010058:	68a3      	ldr	r3, [r4, #8]
 801005a:	1b9b      	subs	r3, r3, r6
 801005c:	60a3      	str	r3, [r4, #8]
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	4433      	add	r3, r6
 8010062:	6023      	str	r3, [r4, #0]
 8010064:	2000      	movs	r0, #0
 8010066:	e7db      	b.n	8010020 <__ssputs_r+0x58>
 8010068:	462a      	mov	r2, r5
 801006a:	f000 f968 	bl	801033e <_realloc_r>
 801006e:	4606      	mov	r6, r0
 8010070:	2800      	cmp	r0, #0
 8010072:	d1e1      	bne.n	8010038 <__ssputs_r+0x70>
 8010074:	6921      	ldr	r1, [r4, #16]
 8010076:	4650      	mov	r0, sl
 8010078:	f7fe f808 	bl	800e08c <_free_r>
 801007c:	e7c7      	b.n	801000e <__ssputs_r+0x46>
	...

08010080 <_svfiprintf_r>:
 8010080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	4698      	mov	r8, r3
 8010086:	898b      	ldrh	r3, [r1, #12]
 8010088:	061b      	lsls	r3, r3, #24
 801008a:	b09d      	sub	sp, #116	; 0x74
 801008c:	4607      	mov	r7, r0
 801008e:	460d      	mov	r5, r1
 8010090:	4614      	mov	r4, r2
 8010092:	d50e      	bpl.n	80100b2 <_svfiprintf_r+0x32>
 8010094:	690b      	ldr	r3, [r1, #16]
 8010096:	b963      	cbnz	r3, 80100b2 <_svfiprintf_r+0x32>
 8010098:	2140      	movs	r1, #64	; 0x40
 801009a:	f7fe f863 	bl	800e164 <_malloc_r>
 801009e:	6028      	str	r0, [r5, #0]
 80100a0:	6128      	str	r0, [r5, #16]
 80100a2:	b920      	cbnz	r0, 80100ae <_svfiprintf_r+0x2e>
 80100a4:	230c      	movs	r3, #12
 80100a6:	603b      	str	r3, [r7, #0]
 80100a8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ac:	e0d1      	b.n	8010252 <_svfiprintf_r+0x1d2>
 80100ae:	2340      	movs	r3, #64	; 0x40
 80100b0:	616b      	str	r3, [r5, #20]
 80100b2:	2300      	movs	r3, #0
 80100b4:	9309      	str	r3, [sp, #36]	; 0x24
 80100b6:	2320      	movs	r3, #32
 80100b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80100c0:	2330      	movs	r3, #48	; 0x30
 80100c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801026c <_svfiprintf_r+0x1ec>
 80100c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100ca:	f04f 0901 	mov.w	r9, #1
 80100ce:	4623      	mov	r3, r4
 80100d0:	469a      	mov	sl, r3
 80100d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100d6:	b10a      	cbz	r2, 80100dc <_svfiprintf_r+0x5c>
 80100d8:	2a25      	cmp	r2, #37	; 0x25
 80100da:	d1f9      	bne.n	80100d0 <_svfiprintf_r+0x50>
 80100dc:	ebba 0b04 	subs.w	fp, sl, r4
 80100e0:	d00b      	beq.n	80100fa <_svfiprintf_r+0x7a>
 80100e2:	465b      	mov	r3, fp
 80100e4:	4622      	mov	r2, r4
 80100e6:	4629      	mov	r1, r5
 80100e8:	4638      	mov	r0, r7
 80100ea:	f7ff ff6d 	bl	800ffc8 <__ssputs_r>
 80100ee:	3001      	adds	r0, #1
 80100f0:	f000 80aa 	beq.w	8010248 <_svfiprintf_r+0x1c8>
 80100f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100f6:	445a      	add	r2, fp
 80100f8:	9209      	str	r2, [sp, #36]	; 0x24
 80100fa:	f89a 3000 	ldrb.w	r3, [sl]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f000 80a2 	beq.w	8010248 <_svfiprintf_r+0x1c8>
 8010104:	2300      	movs	r3, #0
 8010106:	f04f 32ff 	mov.w	r2, #4294967295
 801010a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801010e:	f10a 0a01 	add.w	sl, sl, #1
 8010112:	9304      	str	r3, [sp, #16]
 8010114:	9307      	str	r3, [sp, #28]
 8010116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801011a:	931a      	str	r3, [sp, #104]	; 0x68
 801011c:	4654      	mov	r4, sl
 801011e:	2205      	movs	r2, #5
 8010120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010124:	4851      	ldr	r0, [pc, #324]	; (801026c <_svfiprintf_r+0x1ec>)
 8010126:	f7f0 f85b 	bl	80001e0 <memchr>
 801012a:	9a04      	ldr	r2, [sp, #16]
 801012c:	b9d8      	cbnz	r0, 8010166 <_svfiprintf_r+0xe6>
 801012e:	06d0      	lsls	r0, r2, #27
 8010130:	bf44      	itt	mi
 8010132:	2320      	movmi	r3, #32
 8010134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010138:	0711      	lsls	r1, r2, #28
 801013a:	bf44      	itt	mi
 801013c:	232b      	movmi	r3, #43	; 0x2b
 801013e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010142:	f89a 3000 	ldrb.w	r3, [sl]
 8010146:	2b2a      	cmp	r3, #42	; 0x2a
 8010148:	d015      	beq.n	8010176 <_svfiprintf_r+0xf6>
 801014a:	9a07      	ldr	r2, [sp, #28]
 801014c:	4654      	mov	r4, sl
 801014e:	2000      	movs	r0, #0
 8010150:	f04f 0c0a 	mov.w	ip, #10
 8010154:	4621      	mov	r1, r4
 8010156:	f811 3b01 	ldrb.w	r3, [r1], #1
 801015a:	3b30      	subs	r3, #48	; 0x30
 801015c:	2b09      	cmp	r3, #9
 801015e:	d94e      	bls.n	80101fe <_svfiprintf_r+0x17e>
 8010160:	b1b0      	cbz	r0, 8010190 <_svfiprintf_r+0x110>
 8010162:	9207      	str	r2, [sp, #28]
 8010164:	e014      	b.n	8010190 <_svfiprintf_r+0x110>
 8010166:	eba0 0308 	sub.w	r3, r0, r8
 801016a:	fa09 f303 	lsl.w	r3, r9, r3
 801016e:	4313      	orrs	r3, r2
 8010170:	9304      	str	r3, [sp, #16]
 8010172:	46a2      	mov	sl, r4
 8010174:	e7d2      	b.n	801011c <_svfiprintf_r+0x9c>
 8010176:	9b03      	ldr	r3, [sp, #12]
 8010178:	1d19      	adds	r1, r3, #4
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	9103      	str	r1, [sp, #12]
 801017e:	2b00      	cmp	r3, #0
 8010180:	bfbb      	ittet	lt
 8010182:	425b      	neglt	r3, r3
 8010184:	f042 0202 	orrlt.w	r2, r2, #2
 8010188:	9307      	strge	r3, [sp, #28]
 801018a:	9307      	strlt	r3, [sp, #28]
 801018c:	bfb8      	it	lt
 801018e:	9204      	strlt	r2, [sp, #16]
 8010190:	7823      	ldrb	r3, [r4, #0]
 8010192:	2b2e      	cmp	r3, #46	; 0x2e
 8010194:	d10c      	bne.n	80101b0 <_svfiprintf_r+0x130>
 8010196:	7863      	ldrb	r3, [r4, #1]
 8010198:	2b2a      	cmp	r3, #42	; 0x2a
 801019a:	d135      	bne.n	8010208 <_svfiprintf_r+0x188>
 801019c:	9b03      	ldr	r3, [sp, #12]
 801019e:	1d1a      	adds	r2, r3, #4
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	9203      	str	r2, [sp, #12]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	bfb8      	it	lt
 80101a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80101ac:	3402      	adds	r4, #2
 80101ae:	9305      	str	r3, [sp, #20]
 80101b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801027c <_svfiprintf_r+0x1fc>
 80101b4:	7821      	ldrb	r1, [r4, #0]
 80101b6:	2203      	movs	r2, #3
 80101b8:	4650      	mov	r0, sl
 80101ba:	f7f0 f811 	bl	80001e0 <memchr>
 80101be:	b140      	cbz	r0, 80101d2 <_svfiprintf_r+0x152>
 80101c0:	2340      	movs	r3, #64	; 0x40
 80101c2:	eba0 000a 	sub.w	r0, r0, sl
 80101c6:	fa03 f000 	lsl.w	r0, r3, r0
 80101ca:	9b04      	ldr	r3, [sp, #16]
 80101cc:	4303      	orrs	r3, r0
 80101ce:	3401      	adds	r4, #1
 80101d0:	9304      	str	r3, [sp, #16]
 80101d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d6:	4826      	ldr	r0, [pc, #152]	; (8010270 <_svfiprintf_r+0x1f0>)
 80101d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101dc:	2206      	movs	r2, #6
 80101de:	f7ef ffff 	bl	80001e0 <memchr>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d038      	beq.n	8010258 <_svfiprintf_r+0x1d8>
 80101e6:	4b23      	ldr	r3, [pc, #140]	; (8010274 <_svfiprintf_r+0x1f4>)
 80101e8:	bb1b      	cbnz	r3, 8010232 <_svfiprintf_r+0x1b2>
 80101ea:	9b03      	ldr	r3, [sp, #12]
 80101ec:	3307      	adds	r3, #7
 80101ee:	f023 0307 	bic.w	r3, r3, #7
 80101f2:	3308      	adds	r3, #8
 80101f4:	9303      	str	r3, [sp, #12]
 80101f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101f8:	4433      	add	r3, r6
 80101fa:	9309      	str	r3, [sp, #36]	; 0x24
 80101fc:	e767      	b.n	80100ce <_svfiprintf_r+0x4e>
 80101fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010202:	460c      	mov	r4, r1
 8010204:	2001      	movs	r0, #1
 8010206:	e7a5      	b.n	8010154 <_svfiprintf_r+0xd4>
 8010208:	2300      	movs	r3, #0
 801020a:	3401      	adds	r4, #1
 801020c:	9305      	str	r3, [sp, #20]
 801020e:	4619      	mov	r1, r3
 8010210:	f04f 0c0a 	mov.w	ip, #10
 8010214:	4620      	mov	r0, r4
 8010216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801021a:	3a30      	subs	r2, #48	; 0x30
 801021c:	2a09      	cmp	r2, #9
 801021e:	d903      	bls.n	8010228 <_svfiprintf_r+0x1a8>
 8010220:	2b00      	cmp	r3, #0
 8010222:	d0c5      	beq.n	80101b0 <_svfiprintf_r+0x130>
 8010224:	9105      	str	r1, [sp, #20]
 8010226:	e7c3      	b.n	80101b0 <_svfiprintf_r+0x130>
 8010228:	fb0c 2101 	mla	r1, ip, r1, r2
 801022c:	4604      	mov	r4, r0
 801022e:	2301      	movs	r3, #1
 8010230:	e7f0      	b.n	8010214 <_svfiprintf_r+0x194>
 8010232:	ab03      	add	r3, sp, #12
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	462a      	mov	r2, r5
 8010238:	4b0f      	ldr	r3, [pc, #60]	; (8010278 <_svfiprintf_r+0x1f8>)
 801023a:	a904      	add	r1, sp, #16
 801023c:	4638      	mov	r0, r7
 801023e:	f7fe f8a5 	bl	800e38c <_printf_float>
 8010242:	1c42      	adds	r2, r0, #1
 8010244:	4606      	mov	r6, r0
 8010246:	d1d6      	bne.n	80101f6 <_svfiprintf_r+0x176>
 8010248:	89ab      	ldrh	r3, [r5, #12]
 801024a:	065b      	lsls	r3, r3, #25
 801024c:	f53f af2c 	bmi.w	80100a8 <_svfiprintf_r+0x28>
 8010250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010252:	b01d      	add	sp, #116	; 0x74
 8010254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010258:	ab03      	add	r3, sp, #12
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	462a      	mov	r2, r5
 801025e:	4b06      	ldr	r3, [pc, #24]	; (8010278 <_svfiprintf_r+0x1f8>)
 8010260:	a904      	add	r1, sp, #16
 8010262:	4638      	mov	r0, r7
 8010264:	f7fe fb36 	bl	800e8d4 <_printf_i>
 8010268:	e7eb      	b.n	8010242 <_svfiprintf_r+0x1c2>
 801026a:	bf00      	nop
 801026c:	08011514 	.word	0x08011514
 8010270:	0801151e 	.word	0x0801151e
 8010274:	0800e38d 	.word	0x0800e38d
 8010278:	0800ffc9 	.word	0x0800ffc9
 801027c:	0801151a 	.word	0x0801151a

08010280 <__assert_func>:
 8010280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010282:	4614      	mov	r4, r2
 8010284:	461a      	mov	r2, r3
 8010286:	4b09      	ldr	r3, [pc, #36]	; (80102ac <__assert_func+0x2c>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4605      	mov	r5, r0
 801028c:	68d8      	ldr	r0, [r3, #12]
 801028e:	b14c      	cbz	r4, 80102a4 <__assert_func+0x24>
 8010290:	4b07      	ldr	r3, [pc, #28]	; (80102b0 <__assert_func+0x30>)
 8010292:	9100      	str	r1, [sp, #0]
 8010294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010298:	4906      	ldr	r1, [pc, #24]	; (80102b4 <__assert_func+0x34>)
 801029a:	462b      	mov	r3, r5
 801029c:	f000 f80e 	bl	80102bc <fiprintf>
 80102a0:	f000 faa4 	bl	80107ec <abort>
 80102a4:	4b04      	ldr	r3, [pc, #16]	; (80102b8 <__assert_func+0x38>)
 80102a6:	461c      	mov	r4, r3
 80102a8:	e7f3      	b.n	8010292 <__assert_func+0x12>
 80102aa:	bf00      	nop
 80102ac:	2000032c 	.word	0x2000032c
 80102b0:	08011525 	.word	0x08011525
 80102b4:	08011532 	.word	0x08011532
 80102b8:	08011560 	.word	0x08011560

080102bc <fiprintf>:
 80102bc:	b40e      	push	{r1, r2, r3}
 80102be:	b503      	push	{r0, r1, lr}
 80102c0:	4601      	mov	r1, r0
 80102c2:	ab03      	add	r3, sp, #12
 80102c4:	4805      	ldr	r0, [pc, #20]	; (80102dc <fiprintf+0x20>)
 80102c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102ca:	6800      	ldr	r0, [r0, #0]
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	f000 f88f 	bl	80103f0 <_vfiprintf_r>
 80102d2:	b002      	add	sp, #8
 80102d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80102d8:	b003      	add	sp, #12
 80102da:	4770      	bx	lr
 80102dc:	2000032c 	.word	0x2000032c

080102e0 <__retarget_lock_init_recursive>:
 80102e0:	4770      	bx	lr

080102e2 <__retarget_lock_acquire_recursive>:
 80102e2:	4770      	bx	lr

080102e4 <__retarget_lock_release_recursive>:
 80102e4:	4770      	bx	lr

080102e6 <__ascii_mbtowc>:
 80102e6:	b082      	sub	sp, #8
 80102e8:	b901      	cbnz	r1, 80102ec <__ascii_mbtowc+0x6>
 80102ea:	a901      	add	r1, sp, #4
 80102ec:	b142      	cbz	r2, 8010300 <__ascii_mbtowc+0x1a>
 80102ee:	b14b      	cbz	r3, 8010304 <__ascii_mbtowc+0x1e>
 80102f0:	7813      	ldrb	r3, [r2, #0]
 80102f2:	600b      	str	r3, [r1, #0]
 80102f4:	7812      	ldrb	r2, [r2, #0]
 80102f6:	1e10      	subs	r0, r2, #0
 80102f8:	bf18      	it	ne
 80102fa:	2001      	movne	r0, #1
 80102fc:	b002      	add	sp, #8
 80102fe:	4770      	bx	lr
 8010300:	4610      	mov	r0, r2
 8010302:	e7fb      	b.n	80102fc <__ascii_mbtowc+0x16>
 8010304:	f06f 0001 	mvn.w	r0, #1
 8010308:	e7f8      	b.n	80102fc <__ascii_mbtowc+0x16>

0801030a <memmove>:
 801030a:	4288      	cmp	r0, r1
 801030c:	b510      	push	{r4, lr}
 801030e:	eb01 0402 	add.w	r4, r1, r2
 8010312:	d902      	bls.n	801031a <memmove+0x10>
 8010314:	4284      	cmp	r4, r0
 8010316:	4623      	mov	r3, r4
 8010318:	d807      	bhi.n	801032a <memmove+0x20>
 801031a:	1e43      	subs	r3, r0, #1
 801031c:	42a1      	cmp	r1, r4
 801031e:	d008      	beq.n	8010332 <memmove+0x28>
 8010320:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010324:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010328:	e7f8      	b.n	801031c <memmove+0x12>
 801032a:	4402      	add	r2, r0
 801032c:	4601      	mov	r1, r0
 801032e:	428a      	cmp	r2, r1
 8010330:	d100      	bne.n	8010334 <memmove+0x2a>
 8010332:	bd10      	pop	{r4, pc}
 8010334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010338:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801033c:	e7f7      	b.n	801032e <memmove+0x24>

0801033e <_realloc_r>:
 801033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010342:	4680      	mov	r8, r0
 8010344:	4614      	mov	r4, r2
 8010346:	460e      	mov	r6, r1
 8010348:	b921      	cbnz	r1, 8010354 <_realloc_r+0x16>
 801034a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801034e:	4611      	mov	r1, r2
 8010350:	f7fd bf08 	b.w	800e164 <_malloc_r>
 8010354:	b92a      	cbnz	r2, 8010362 <_realloc_r+0x24>
 8010356:	f7fd fe99 	bl	800e08c <_free_r>
 801035a:	4625      	mov	r5, r4
 801035c:	4628      	mov	r0, r5
 801035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010362:	f000 fc67 	bl	8010c34 <_malloc_usable_size_r>
 8010366:	4284      	cmp	r4, r0
 8010368:	4607      	mov	r7, r0
 801036a:	d802      	bhi.n	8010372 <_realloc_r+0x34>
 801036c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010370:	d812      	bhi.n	8010398 <_realloc_r+0x5a>
 8010372:	4621      	mov	r1, r4
 8010374:	4640      	mov	r0, r8
 8010376:	f7fd fef5 	bl	800e164 <_malloc_r>
 801037a:	4605      	mov	r5, r0
 801037c:	2800      	cmp	r0, #0
 801037e:	d0ed      	beq.n	801035c <_realloc_r+0x1e>
 8010380:	42bc      	cmp	r4, r7
 8010382:	4622      	mov	r2, r4
 8010384:	4631      	mov	r1, r6
 8010386:	bf28      	it	cs
 8010388:	463a      	movcs	r2, r7
 801038a:	f7fd fe69 	bl	800e060 <memcpy>
 801038e:	4631      	mov	r1, r6
 8010390:	4640      	mov	r0, r8
 8010392:	f7fd fe7b 	bl	800e08c <_free_r>
 8010396:	e7e1      	b.n	801035c <_realloc_r+0x1e>
 8010398:	4635      	mov	r5, r6
 801039a:	e7df      	b.n	801035c <_realloc_r+0x1e>

0801039c <__sfputc_r>:
 801039c:	6893      	ldr	r3, [r2, #8]
 801039e:	3b01      	subs	r3, #1
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	b410      	push	{r4}
 80103a4:	6093      	str	r3, [r2, #8]
 80103a6:	da08      	bge.n	80103ba <__sfputc_r+0x1e>
 80103a8:	6994      	ldr	r4, [r2, #24]
 80103aa:	42a3      	cmp	r3, r4
 80103ac:	db01      	blt.n	80103b2 <__sfputc_r+0x16>
 80103ae:	290a      	cmp	r1, #10
 80103b0:	d103      	bne.n	80103ba <__sfputc_r+0x1e>
 80103b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103b6:	f000 b94b 	b.w	8010650 <__swbuf_r>
 80103ba:	6813      	ldr	r3, [r2, #0]
 80103bc:	1c58      	adds	r0, r3, #1
 80103be:	6010      	str	r0, [r2, #0]
 80103c0:	7019      	strb	r1, [r3, #0]
 80103c2:	4608      	mov	r0, r1
 80103c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <__sfputs_r>:
 80103ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103cc:	4606      	mov	r6, r0
 80103ce:	460f      	mov	r7, r1
 80103d0:	4614      	mov	r4, r2
 80103d2:	18d5      	adds	r5, r2, r3
 80103d4:	42ac      	cmp	r4, r5
 80103d6:	d101      	bne.n	80103dc <__sfputs_r+0x12>
 80103d8:	2000      	movs	r0, #0
 80103da:	e007      	b.n	80103ec <__sfputs_r+0x22>
 80103dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e0:	463a      	mov	r2, r7
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7ff ffda 	bl	801039c <__sfputc_r>
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	d1f3      	bne.n	80103d4 <__sfputs_r+0xa>
 80103ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103f0 <_vfiprintf_r>:
 80103f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	460d      	mov	r5, r1
 80103f6:	b09d      	sub	sp, #116	; 0x74
 80103f8:	4614      	mov	r4, r2
 80103fa:	4698      	mov	r8, r3
 80103fc:	4606      	mov	r6, r0
 80103fe:	b118      	cbz	r0, 8010408 <_vfiprintf_r+0x18>
 8010400:	6983      	ldr	r3, [r0, #24]
 8010402:	b90b      	cbnz	r3, 8010408 <_vfiprintf_r+0x18>
 8010404:	f000 fb14 	bl	8010a30 <__sinit>
 8010408:	4b89      	ldr	r3, [pc, #548]	; (8010630 <_vfiprintf_r+0x240>)
 801040a:	429d      	cmp	r5, r3
 801040c:	d11b      	bne.n	8010446 <_vfiprintf_r+0x56>
 801040e:	6875      	ldr	r5, [r6, #4]
 8010410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010412:	07d9      	lsls	r1, r3, #31
 8010414:	d405      	bmi.n	8010422 <_vfiprintf_r+0x32>
 8010416:	89ab      	ldrh	r3, [r5, #12]
 8010418:	059a      	lsls	r2, r3, #22
 801041a:	d402      	bmi.n	8010422 <_vfiprintf_r+0x32>
 801041c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801041e:	f7ff ff60 	bl	80102e2 <__retarget_lock_acquire_recursive>
 8010422:	89ab      	ldrh	r3, [r5, #12]
 8010424:	071b      	lsls	r3, r3, #28
 8010426:	d501      	bpl.n	801042c <_vfiprintf_r+0x3c>
 8010428:	692b      	ldr	r3, [r5, #16]
 801042a:	b9eb      	cbnz	r3, 8010468 <_vfiprintf_r+0x78>
 801042c:	4629      	mov	r1, r5
 801042e:	4630      	mov	r0, r6
 8010430:	f000 f96e 	bl	8010710 <__swsetup_r>
 8010434:	b1c0      	cbz	r0, 8010468 <_vfiprintf_r+0x78>
 8010436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010438:	07dc      	lsls	r4, r3, #31
 801043a:	d50e      	bpl.n	801045a <_vfiprintf_r+0x6a>
 801043c:	f04f 30ff 	mov.w	r0, #4294967295
 8010440:	b01d      	add	sp, #116	; 0x74
 8010442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010446:	4b7b      	ldr	r3, [pc, #492]	; (8010634 <_vfiprintf_r+0x244>)
 8010448:	429d      	cmp	r5, r3
 801044a:	d101      	bne.n	8010450 <_vfiprintf_r+0x60>
 801044c:	68b5      	ldr	r5, [r6, #8]
 801044e:	e7df      	b.n	8010410 <_vfiprintf_r+0x20>
 8010450:	4b79      	ldr	r3, [pc, #484]	; (8010638 <_vfiprintf_r+0x248>)
 8010452:	429d      	cmp	r5, r3
 8010454:	bf08      	it	eq
 8010456:	68f5      	ldreq	r5, [r6, #12]
 8010458:	e7da      	b.n	8010410 <_vfiprintf_r+0x20>
 801045a:	89ab      	ldrh	r3, [r5, #12]
 801045c:	0598      	lsls	r0, r3, #22
 801045e:	d4ed      	bmi.n	801043c <_vfiprintf_r+0x4c>
 8010460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010462:	f7ff ff3f 	bl	80102e4 <__retarget_lock_release_recursive>
 8010466:	e7e9      	b.n	801043c <_vfiprintf_r+0x4c>
 8010468:	2300      	movs	r3, #0
 801046a:	9309      	str	r3, [sp, #36]	; 0x24
 801046c:	2320      	movs	r3, #32
 801046e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010472:	f8cd 800c 	str.w	r8, [sp, #12]
 8010476:	2330      	movs	r3, #48	; 0x30
 8010478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801063c <_vfiprintf_r+0x24c>
 801047c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010480:	f04f 0901 	mov.w	r9, #1
 8010484:	4623      	mov	r3, r4
 8010486:	469a      	mov	sl, r3
 8010488:	f813 2b01 	ldrb.w	r2, [r3], #1
 801048c:	b10a      	cbz	r2, 8010492 <_vfiprintf_r+0xa2>
 801048e:	2a25      	cmp	r2, #37	; 0x25
 8010490:	d1f9      	bne.n	8010486 <_vfiprintf_r+0x96>
 8010492:	ebba 0b04 	subs.w	fp, sl, r4
 8010496:	d00b      	beq.n	80104b0 <_vfiprintf_r+0xc0>
 8010498:	465b      	mov	r3, fp
 801049a:	4622      	mov	r2, r4
 801049c:	4629      	mov	r1, r5
 801049e:	4630      	mov	r0, r6
 80104a0:	f7ff ff93 	bl	80103ca <__sfputs_r>
 80104a4:	3001      	adds	r0, #1
 80104a6:	f000 80aa 	beq.w	80105fe <_vfiprintf_r+0x20e>
 80104aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ac:	445a      	add	r2, fp
 80104ae:	9209      	str	r2, [sp, #36]	; 0x24
 80104b0:	f89a 3000 	ldrb.w	r3, [sl]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f000 80a2 	beq.w	80105fe <_vfiprintf_r+0x20e>
 80104ba:	2300      	movs	r3, #0
 80104bc:	f04f 32ff 	mov.w	r2, #4294967295
 80104c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104c4:	f10a 0a01 	add.w	sl, sl, #1
 80104c8:	9304      	str	r3, [sp, #16]
 80104ca:	9307      	str	r3, [sp, #28]
 80104cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104d0:	931a      	str	r3, [sp, #104]	; 0x68
 80104d2:	4654      	mov	r4, sl
 80104d4:	2205      	movs	r2, #5
 80104d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104da:	4858      	ldr	r0, [pc, #352]	; (801063c <_vfiprintf_r+0x24c>)
 80104dc:	f7ef fe80 	bl	80001e0 <memchr>
 80104e0:	9a04      	ldr	r2, [sp, #16]
 80104e2:	b9d8      	cbnz	r0, 801051c <_vfiprintf_r+0x12c>
 80104e4:	06d1      	lsls	r1, r2, #27
 80104e6:	bf44      	itt	mi
 80104e8:	2320      	movmi	r3, #32
 80104ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104ee:	0713      	lsls	r3, r2, #28
 80104f0:	bf44      	itt	mi
 80104f2:	232b      	movmi	r3, #43	; 0x2b
 80104f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104f8:	f89a 3000 	ldrb.w	r3, [sl]
 80104fc:	2b2a      	cmp	r3, #42	; 0x2a
 80104fe:	d015      	beq.n	801052c <_vfiprintf_r+0x13c>
 8010500:	9a07      	ldr	r2, [sp, #28]
 8010502:	4654      	mov	r4, sl
 8010504:	2000      	movs	r0, #0
 8010506:	f04f 0c0a 	mov.w	ip, #10
 801050a:	4621      	mov	r1, r4
 801050c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010510:	3b30      	subs	r3, #48	; 0x30
 8010512:	2b09      	cmp	r3, #9
 8010514:	d94e      	bls.n	80105b4 <_vfiprintf_r+0x1c4>
 8010516:	b1b0      	cbz	r0, 8010546 <_vfiprintf_r+0x156>
 8010518:	9207      	str	r2, [sp, #28]
 801051a:	e014      	b.n	8010546 <_vfiprintf_r+0x156>
 801051c:	eba0 0308 	sub.w	r3, r0, r8
 8010520:	fa09 f303 	lsl.w	r3, r9, r3
 8010524:	4313      	orrs	r3, r2
 8010526:	9304      	str	r3, [sp, #16]
 8010528:	46a2      	mov	sl, r4
 801052a:	e7d2      	b.n	80104d2 <_vfiprintf_r+0xe2>
 801052c:	9b03      	ldr	r3, [sp, #12]
 801052e:	1d19      	adds	r1, r3, #4
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	9103      	str	r1, [sp, #12]
 8010534:	2b00      	cmp	r3, #0
 8010536:	bfbb      	ittet	lt
 8010538:	425b      	neglt	r3, r3
 801053a:	f042 0202 	orrlt.w	r2, r2, #2
 801053e:	9307      	strge	r3, [sp, #28]
 8010540:	9307      	strlt	r3, [sp, #28]
 8010542:	bfb8      	it	lt
 8010544:	9204      	strlt	r2, [sp, #16]
 8010546:	7823      	ldrb	r3, [r4, #0]
 8010548:	2b2e      	cmp	r3, #46	; 0x2e
 801054a:	d10c      	bne.n	8010566 <_vfiprintf_r+0x176>
 801054c:	7863      	ldrb	r3, [r4, #1]
 801054e:	2b2a      	cmp	r3, #42	; 0x2a
 8010550:	d135      	bne.n	80105be <_vfiprintf_r+0x1ce>
 8010552:	9b03      	ldr	r3, [sp, #12]
 8010554:	1d1a      	adds	r2, r3, #4
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	9203      	str	r2, [sp, #12]
 801055a:	2b00      	cmp	r3, #0
 801055c:	bfb8      	it	lt
 801055e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010562:	3402      	adds	r4, #2
 8010564:	9305      	str	r3, [sp, #20]
 8010566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801064c <_vfiprintf_r+0x25c>
 801056a:	7821      	ldrb	r1, [r4, #0]
 801056c:	2203      	movs	r2, #3
 801056e:	4650      	mov	r0, sl
 8010570:	f7ef fe36 	bl	80001e0 <memchr>
 8010574:	b140      	cbz	r0, 8010588 <_vfiprintf_r+0x198>
 8010576:	2340      	movs	r3, #64	; 0x40
 8010578:	eba0 000a 	sub.w	r0, r0, sl
 801057c:	fa03 f000 	lsl.w	r0, r3, r0
 8010580:	9b04      	ldr	r3, [sp, #16]
 8010582:	4303      	orrs	r3, r0
 8010584:	3401      	adds	r4, #1
 8010586:	9304      	str	r3, [sp, #16]
 8010588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801058c:	482c      	ldr	r0, [pc, #176]	; (8010640 <_vfiprintf_r+0x250>)
 801058e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010592:	2206      	movs	r2, #6
 8010594:	f7ef fe24 	bl	80001e0 <memchr>
 8010598:	2800      	cmp	r0, #0
 801059a:	d03f      	beq.n	801061c <_vfiprintf_r+0x22c>
 801059c:	4b29      	ldr	r3, [pc, #164]	; (8010644 <_vfiprintf_r+0x254>)
 801059e:	bb1b      	cbnz	r3, 80105e8 <_vfiprintf_r+0x1f8>
 80105a0:	9b03      	ldr	r3, [sp, #12]
 80105a2:	3307      	adds	r3, #7
 80105a4:	f023 0307 	bic.w	r3, r3, #7
 80105a8:	3308      	adds	r3, #8
 80105aa:	9303      	str	r3, [sp, #12]
 80105ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ae:	443b      	add	r3, r7
 80105b0:	9309      	str	r3, [sp, #36]	; 0x24
 80105b2:	e767      	b.n	8010484 <_vfiprintf_r+0x94>
 80105b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80105b8:	460c      	mov	r4, r1
 80105ba:	2001      	movs	r0, #1
 80105bc:	e7a5      	b.n	801050a <_vfiprintf_r+0x11a>
 80105be:	2300      	movs	r3, #0
 80105c0:	3401      	adds	r4, #1
 80105c2:	9305      	str	r3, [sp, #20]
 80105c4:	4619      	mov	r1, r3
 80105c6:	f04f 0c0a 	mov.w	ip, #10
 80105ca:	4620      	mov	r0, r4
 80105cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105d0:	3a30      	subs	r2, #48	; 0x30
 80105d2:	2a09      	cmp	r2, #9
 80105d4:	d903      	bls.n	80105de <_vfiprintf_r+0x1ee>
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d0c5      	beq.n	8010566 <_vfiprintf_r+0x176>
 80105da:	9105      	str	r1, [sp, #20]
 80105dc:	e7c3      	b.n	8010566 <_vfiprintf_r+0x176>
 80105de:	fb0c 2101 	mla	r1, ip, r1, r2
 80105e2:	4604      	mov	r4, r0
 80105e4:	2301      	movs	r3, #1
 80105e6:	e7f0      	b.n	80105ca <_vfiprintf_r+0x1da>
 80105e8:	ab03      	add	r3, sp, #12
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	462a      	mov	r2, r5
 80105ee:	4b16      	ldr	r3, [pc, #88]	; (8010648 <_vfiprintf_r+0x258>)
 80105f0:	a904      	add	r1, sp, #16
 80105f2:	4630      	mov	r0, r6
 80105f4:	f7fd feca 	bl	800e38c <_printf_float>
 80105f8:	4607      	mov	r7, r0
 80105fa:	1c78      	adds	r0, r7, #1
 80105fc:	d1d6      	bne.n	80105ac <_vfiprintf_r+0x1bc>
 80105fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010600:	07d9      	lsls	r1, r3, #31
 8010602:	d405      	bmi.n	8010610 <_vfiprintf_r+0x220>
 8010604:	89ab      	ldrh	r3, [r5, #12]
 8010606:	059a      	lsls	r2, r3, #22
 8010608:	d402      	bmi.n	8010610 <_vfiprintf_r+0x220>
 801060a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801060c:	f7ff fe6a 	bl	80102e4 <__retarget_lock_release_recursive>
 8010610:	89ab      	ldrh	r3, [r5, #12]
 8010612:	065b      	lsls	r3, r3, #25
 8010614:	f53f af12 	bmi.w	801043c <_vfiprintf_r+0x4c>
 8010618:	9809      	ldr	r0, [sp, #36]	; 0x24
 801061a:	e711      	b.n	8010440 <_vfiprintf_r+0x50>
 801061c:	ab03      	add	r3, sp, #12
 801061e:	9300      	str	r3, [sp, #0]
 8010620:	462a      	mov	r2, r5
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <_vfiprintf_r+0x258>)
 8010624:	a904      	add	r1, sp, #16
 8010626:	4630      	mov	r0, r6
 8010628:	f7fe f954 	bl	800e8d4 <_printf_i>
 801062c:	e7e4      	b.n	80105f8 <_vfiprintf_r+0x208>
 801062e:	bf00      	nop
 8010630:	0801168c 	.word	0x0801168c
 8010634:	080116ac 	.word	0x080116ac
 8010638:	0801166c 	.word	0x0801166c
 801063c:	08011514 	.word	0x08011514
 8010640:	0801151e 	.word	0x0801151e
 8010644:	0800e38d 	.word	0x0800e38d
 8010648:	080103cb 	.word	0x080103cb
 801064c:	0801151a 	.word	0x0801151a

08010650 <__swbuf_r>:
 8010650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010652:	460e      	mov	r6, r1
 8010654:	4614      	mov	r4, r2
 8010656:	4605      	mov	r5, r0
 8010658:	b118      	cbz	r0, 8010662 <__swbuf_r+0x12>
 801065a:	6983      	ldr	r3, [r0, #24]
 801065c:	b90b      	cbnz	r3, 8010662 <__swbuf_r+0x12>
 801065e:	f000 f9e7 	bl	8010a30 <__sinit>
 8010662:	4b21      	ldr	r3, [pc, #132]	; (80106e8 <__swbuf_r+0x98>)
 8010664:	429c      	cmp	r4, r3
 8010666:	d12b      	bne.n	80106c0 <__swbuf_r+0x70>
 8010668:	686c      	ldr	r4, [r5, #4]
 801066a:	69a3      	ldr	r3, [r4, #24]
 801066c:	60a3      	str	r3, [r4, #8]
 801066e:	89a3      	ldrh	r3, [r4, #12]
 8010670:	071a      	lsls	r2, r3, #28
 8010672:	d52f      	bpl.n	80106d4 <__swbuf_r+0x84>
 8010674:	6923      	ldr	r3, [r4, #16]
 8010676:	b36b      	cbz	r3, 80106d4 <__swbuf_r+0x84>
 8010678:	6923      	ldr	r3, [r4, #16]
 801067a:	6820      	ldr	r0, [r4, #0]
 801067c:	1ac0      	subs	r0, r0, r3
 801067e:	6963      	ldr	r3, [r4, #20]
 8010680:	b2f6      	uxtb	r6, r6
 8010682:	4283      	cmp	r3, r0
 8010684:	4637      	mov	r7, r6
 8010686:	dc04      	bgt.n	8010692 <__swbuf_r+0x42>
 8010688:	4621      	mov	r1, r4
 801068a:	4628      	mov	r0, r5
 801068c:	f000 f93c 	bl	8010908 <_fflush_r>
 8010690:	bb30      	cbnz	r0, 80106e0 <__swbuf_r+0x90>
 8010692:	68a3      	ldr	r3, [r4, #8]
 8010694:	3b01      	subs	r3, #1
 8010696:	60a3      	str	r3, [r4, #8]
 8010698:	6823      	ldr	r3, [r4, #0]
 801069a:	1c5a      	adds	r2, r3, #1
 801069c:	6022      	str	r2, [r4, #0]
 801069e:	701e      	strb	r6, [r3, #0]
 80106a0:	6963      	ldr	r3, [r4, #20]
 80106a2:	3001      	adds	r0, #1
 80106a4:	4283      	cmp	r3, r0
 80106a6:	d004      	beq.n	80106b2 <__swbuf_r+0x62>
 80106a8:	89a3      	ldrh	r3, [r4, #12]
 80106aa:	07db      	lsls	r3, r3, #31
 80106ac:	d506      	bpl.n	80106bc <__swbuf_r+0x6c>
 80106ae:	2e0a      	cmp	r6, #10
 80106b0:	d104      	bne.n	80106bc <__swbuf_r+0x6c>
 80106b2:	4621      	mov	r1, r4
 80106b4:	4628      	mov	r0, r5
 80106b6:	f000 f927 	bl	8010908 <_fflush_r>
 80106ba:	b988      	cbnz	r0, 80106e0 <__swbuf_r+0x90>
 80106bc:	4638      	mov	r0, r7
 80106be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c0:	4b0a      	ldr	r3, [pc, #40]	; (80106ec <__swbuf_r+0x9c>)
 80106c2:	429c      	cmp	r4, r3
 80106c4:	d101      	bne.n	80106ca <__swbuf_r+0x7a>
 80106c6:	68ac      	ldr	r4, [r5, #8]
 80106c8:	e7cf      	b.n	801066a <__swbuf_r+0x1a>
 80106ca:	4b09      	ldr	r3, [pc, #36]	; (80106f0 <__swbuf_r+0xa0>)
 80106cc:	429c      	cmp	r4, r3
 80106ce:	bf08      	it	eq
 80106d0:	68ec      	ldreq	r4, [r5, #12]
 80106d2:	e7ca      	b.n	801066a <__swbuf_r+0x1a>
 80106d4:	4621      	mov	r1, r4
 80106d6:	4628      	mov	r0, r5
 80106d8:	f000 f81a 	bl	8010710 <__swsetup_r>
 80106dc:	2800      	cmp	r0, #0
 80106de:	d0cb      	beq.n	8010678 <__swbuf_r+0x28>
 80106e0:	f04f 37ff 	mov.w	r7, #4294967295
 80106e4:	e7ea      	b.n	80106bc <__swbuf_r+0x6c>
 80106e6:	bf00      	nop
 80106e8:	0801168c 	.word	0x0801168c
 80106ec:	080116ac 	.word	0x080116ac
 80106f0:	0801166c 	.word	0x0801166c

080106f4 <__ascii_wctomb>:
 80106f4:	b149      	cbz	r1, 801070a <__ascii_wctomb+0x16>
 80106f6:	2aff      	cmp	r2, #255	; 0xff
 80106f8:	bf85      	ittet	hi
 80106fa:	238a      	movhi	r3, #138	; 0x8a
 80106fc:	6003      	strhi	r3, [r0, #0]
 80106fe:	700a      	strbls	r2, [r1, #0]
 8010700:	f04f 30ff 	movhi.w	r0, #4294967295
 8010704:	bf98      	it	ls
 8010706:	2001      	movls	r0, #1
 8010708:	4770      	bx	lr
 801070a:	4608      	mov	r0, r1
 801070c:	4770      	bx	lr
	...

08010710 <__swsetup_r>:
 8010710:	4b32      	ldr	r3, [pc, #200]	; (80107dc <__swsetup_r+0xcc>)
 8010712:	b570      	push	{r4, r5, r6, lr}
 8010714:	681d      	ldr	r5, [r3, #0]
 8010716:	4606      	mov	r6, r0
 8010718:	460c      	mov	r4, r1
 801071a:	b125      	cbz	r5, 8010726 <__swsetup_r+0x16>
 801071c:	69ab      	ldr	r3, [r5, #24]
 801071e:	b913      	cbnz	r3, 8010726 <__swsetup_r+0x16>
 8010720:	4628      	mov	r0, r5
 8010722:	f000 f985 	bl	8010a30 <__sinit>
 8010726:	4b2e      	ldr	r3, [pc, #184]	; (80107e0 <__swsetup_r+0xd0>)
 8010728:	429c      	cmp	r4, r3
 801072a:	d10f      	bne.n	801074c <__swsetup_r+0x3c>
 801072c:	686c      	ldr	r4, [r5, #4]
 801072e:	89a3      	ldrh	r3, [r4, #12]
 8010730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010734:	0719      	lsls	r1, r3, #28
 8010736:	d42c      	bmi.n	8010792 <__swsetup_r+0x82>
 8010738:	06dd      	lsls	r5, r3, #27
 801073a:	d411      	bmi.n	8010760 <__swsetup_r+0x50>
 801073c:	2309      	movs	r3, #9
 801073e:	6033      	str	r3, [r6, #0]
 8010740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010744:	81a3      	strh	r3, [r4, #12]
 8010746:	f04f 30ff 	mov.w	r0, #4294967295
 801074a:	e03e      	b.n	80107ca <__swsetup_r+0xba>
 801074c:	4b25      	ldr	r3, [pc, #148]	; (80107e4 <__swsetup_r+0xd4>)
 801074e:	429c      	cmp	r4, r3
 8010750:	d101      	bne.n	8010756 <__swsetup_r+0x46>
 8010752:	68ac      	ldr	r4, [r5, #8]
 8010754:	e7eb      	b.n	801072e <__swsetup_r+0x1e>
 8010756:	4b24      	ldr	r3, [pc, #144]	; (80107e8 <__swsetup_r+0xd8>)
 8010758:	429c      	cmp	r4, r3
 801075a:	bf08      	it	eq
 801075c:	68ec      	ldreq	r4, [r5, #12]
 801075e:	e7e6      	b.n	801072e <__swsetup_r+0x1e>
 8010760:	0758      	lsls	r0, r3, #29
 8010762:	d512      	bpl.n	801078a <__swsetup_r+0x7a>
 8010764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010766:	b141      	cbz	r1, 801077a <__swsetup_r+0x6a>
 8010768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801076c:	4299      	cmp	r1, r3
 801076e:	d002      	beq.n	8010776 <__swsetup_r+0x66>
 8010770:	4630      	mov	r0, r6
 8010772:	f7fd fc8b 	bl	800e08c <_free_r>
 8010776:	2300      	movs	r3, #0
 8010778:	6363      	str	r3, [r4, #52]	; 0x34
 801077a:	89a3      	ldrh	r3, [r4, #12]
 801077c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010780:	81a3      	strh	r3, [r4, #12]
 8010782:	2300      	movs	r3, #0
 8010784:	6063      	str	r3, [r4, #4]
 8010786:	6923      	ldr	r3, [r4, #16]
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	f043 0308 	orr.w	r3, r3, #8
 8010790:	81a3      	strh	r3, [r4, #12]
 8010792:	6923      	ldr	r3, [r4, #16]
 8010794:	b94b      	cbnz	r3, 80107aa <__swsetup_r+0x9a>
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801079c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107a0:	d003      	beq.n	80107aa <__swsetup_r+0x9a>
 80107a2:	4621      	mov	r1, r4
 80107a4:	4630      	mov	r0, r6
 80107a6:	f000 fa05 	bl	8010bb4 <__smakebuf_r>
 80107aa:	89a0      	ldrh	r0, [r4, #12]
 80107ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107b0:	f010 0301 	ands.w	r3, r0, #1
 80107b4:	d00a      	beq.n	80107cc <__swsetup_r+0xbc>
 80107b6:	2300      	movs	r3, #0
 80107b8:	60a3      	str	r3, [r4, #8]
 80107ba:	6963      	ldr	r3, [r4, #20]
 80107bc:	425b      	negs	r3, r3
 80107be:	61a3      	str	r3, [r4, #24]
 80107c0:	6923      	ldr	r3, [r4, #16]
 80107c2:	b943      	cbnz	r3, 80107d6 <__swsetup_r+0xc6>
 80107c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107c8:	d1ba      	bne.n	8010740 <__swsetup_r+0x30>
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
 80107cc:	0781      	lsls	r1, r0, #30
 80107ce:	bf58      	it	pl
 80107d0:	6963      	ldrpl	r3, [r4, #20]
 80107d2:	60a3      	str	r3, [r4, #8]
 80107d4:	e7f4      	b.n	80107c0 <__swsetup_r+0xb0>
 80107d6:	2000      	movs	r0, #0
 80107d8:	e7f7      	b.n	80107ca <__swsetup_r+0xba>
 80107da:	bf00      	nop
 80107dc:	2000032c 	.word	0x2000032c
 80107e0:	0801168c 	.word	0x0801168c
 80107e4:	080116ac 	.word	0x080116ac
 80107e8:	0801166c 	.word	0x0801166c

080107ec <abort>:
 80107ec:	b508      	push	{r3, lr}
 80107ee:	2006      	movs	r0, #6
 80107f0:	f000 fa50 	bl	8010c94 <raise>
 80107f4:	2001      	movs	r0, #1
 80107f6:	f7f4 fde6 	bl	80053c6 <_exit>
	...

080107fc <__sflush_r>:
 80107fc:	898a      	ldrh	r2, [r1, #12]
 80107fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010802:	4605      	mov	r5, r0
 8010804:	0710      	lsls	r0, r2, #28
 8010806:	460c      	mov	r4, r1
 8010808:	d458      	bmi.n	80108bc <__sflush_r+0xc0>
 801080a:	684b      	ldr	r3, [r1, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	dc05      	bgt.n	801081c <__sflush_r+0x20>
 8010810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010812:	2b00      	cmp	r3, #0
 8010814:	dc02      	bgt.n	801081c <__sflush_r+0x20>
 8010816:	2000      	movs	r0, #0
 8010818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801081e:	2e00      	cmp	r6, #0
 8010820:	d0f9      	beq.n	8010816 <__sflush_r+0x1a>
 8010822:	2300      	movs	r3, #0
 8010824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010828:	682f      	ldr	r7, [r5, #0]
 801082a:	602b      	str	r3, [r5, #0]
 801082c:	d032      	beq.n	8010894 <__sflush_r+0x98>
 801082e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010830:	89a3      	ldrh	r3, [r4, #12]
 8010832:	075a      	lsls	r2, r3, #29
 8010834:	d505      	bpl.n	8010842 <__sflush_r+0x46>
 8010836:	6863      	ldr	r3, [r4, #4]
 8010838:	1ac0      	subs	r0, r0, r3
 801083a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801083c:	b10b      	cbz	r3, 8010842 <__sflush_r+0x46>
 801083e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010840:	1ac0      	subs	r0, r0, r3
 8010842:	2300      	movs	r3, #0
 8010844:	4602      	mov	r2, r0
 8010846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010848:	6a21      	ldr	r1, [r4, #32]
 801084a:	4628      	mov	r0, r5
 801084c:	47b0      	blx	r6
 801084e:	1c43      	adds	r3, r0, #1
 8010850:	89a3      	ldrh	r3, [r4, #12]
 8010852:	d106      	bne.n	8010862 <__sflush_r+0x66>
 8010854:	6829      	ldr	r1, [r5, #0]
 8010856:	291d      	cmp	r1, #29
 8010858:	d82c      	bhi.n	80108b4 <__sflush_r+0xb8>
 801085a:	4a2a      	ldr	r2, [pc, #168]	; (8010904 <__sflush_r+0x108>)
 801085c:	40ca      	lsrs	r2, r1
 801085e:	07d6      	lsls	r6, r2, #31
 8010860:	d528      	bpl.n	80108b4 <__sflush_r+0xb8>
 8010862:	2200      	movs	r2, #0
 8010864:	6062      	str	r2, [r4, #4]
 8010866:	04d9      	lsls	r1, r3, #19
 8010868:	6922      	ldr	r2, [r4, #16]
 801086a:	6022      	str	r2, [r4, #0]
 801086c:	d504      	bpl.n	8010878 <__sflush_r+0x7c>
 801086e:	1c42      	adds	r2, r0, #1
 8010870:	d101      	bne.n	8010876 <__sflush_r+0x7a>
 8010872:	682b      	ldr	r3, [r5, #0]
 8010874:	b903      	cbnz	r3, 8010878 <__sflush_r+0x7c>
 8010876:	6560      	str	r0, [r4, #84]	; 0x54
 8010878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801087a:	602f      	str	r7, [r5, #0]
 801087c:	2900      	cmp	r1, #0
 801087e:	d0ca      	beq.n	8010816 <__sflush_r+0x1a>
 8010880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010884:	4299      	cmp	r1, r3
 8010886:	d002      	beq.n	801088e <__sflush_r+0x92>
 8010888:	4628      	mov	r0, r5
 801088a:	f7fd fbff 	bl	800e08c <_free_r>
 801088e:	2000      	movs	r0, #0
 8010890:	6360      	str	r0, [r4, #52]	; 0x34
 8010892:	e7c1      	b.n	8010818 <__sflush_r+0x1c>
 8010894:	6a21      	ldr	r1, [r4, #32]
 8010896:	2301      	movs	r3, #1
 8010898:	4628      	mov	r0, r5
 801089a:	47b0      	blx	r6
 801089c:	1c41      	adds	r1, r0, #1
 801089e:	d1c7      	bne.n	8010830 <__sflush_r+0x34>
 80108a0:	682b      	ldr	r3, [r5, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0c4      	beq.n	8010830 <__sflush_r+0x34>
 80108a6:	2b1d      	cmp	r3, #29
 80108a8:	d001      	beq.n	80108ae <__sflush_r+0xb2>
 80108aa:	2b16      	cmp	r3, #22
 80108ac:	d101      	bne.n	80108b2 <__sflush_r+0xb6>
 80108ae:	602f      	str	r7, [r5, #0]
 80108b0:	e7b1      	b.n	8010816 <__sflush_r+0x1a>
 80108b2:	89a3      	ldrh	r3, [r4, #12]
 80108b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108b8:	81a3      	strh	r3, [r4, #12]
 80108ba:	e7ad      	b.n	8010818 <__sflush_r+0x1c>
 80108bc:	690f      	ldr	r7, [r1, #16]
 80108be:	2f00      	cmp	r7, #0
 80108c0:	d0a9      	beq.n	8010816 <__sflush_r+0x1a>
 80108c2:	0793      	lsls	r3, r2, #30
 80108c4:	680e      	ldr	r6, [r1, #0]
 80108c6:	bf08      	it	eq
 80108c8:	694b      	ldreq	r3, [r1, #20]
 80108ca:	600f      	str	r7, [r1, #0]
 80108cc:	bf18      	it	ne
 80108ce:	2300      	movne	r3, #0
 80108d0:	eba6 0807 	sub.w	r8, r6, r7
 80108d4:	608b      	str	r3, [r1, #8]
 80108d6:	f1b8 0f00 	cmp.w	r8, #0
 80108da:	dd9c      	ble.n	8010816 <__sflush_r+0x1a>
 80108dc:	6a21      	ldr	r1, [r4, #32]
 80108de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108e0:	4643      	mov	r3, r8
 80108e2:	463a      	mov	r2, r7
 80108e4:	4628      	mov	r0, r5
 80108e6:	47b0      	blx	r6
 80108e8:	2800      	cmp	r0, #0
 80108ea:	dc06      	bgt.n	80108fa <__sflush_r+0xfe>
 80108ec:	89a3      	ldrh	r3, [r4, #12]
 80108ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108f2:	81a3      	strh	r3, [r4, #12]
 80108f4:	f04f 30ff 	mov.w	r0, #4294967295
 80108f8:	e78e      	b.n	8010818 <__sflush_r+0x1c>
 80108fa:	4407      	add	r7, r0
 80108fc:	eba8 0800 	sub.w	r8, r8, r0
 8010900:	e7e9      	b.n	80108d6 <__sflush_r+0xda>
 8010902:	bf00      	nop
 8010904:	20400001 	.word	0x20400001

08010908 <_fflush_r>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	690b      	ldr	r3, [r1, #16]
 801090c:	4605      	mov	r5, r0
 801090e:	460c      	mov	r4, r1
 8010910:	b913      	cbnz	r3, 8010918 <_fflush_r+0x10>
 8010912:	2500      	movs	r5, #0
 8010914:	4628      	mov	r0, r5
 8010916:	bd38      	pop	{r3, r4, r5, pc}
 8010918:	b118      	cbz	r0, 8010922 <_fflush_r+0x1a>
 801091a:	6983      	ldr	r3, [r0, #24]
 801091c:	b90b      	cbnz	r3, 8010922 <_fflush_r+0x1a>
 801091e:	f000 f887 	bl	8010a30 <__sinit>
 8010922:	4b14      	ldr	r3, [pc, #80]	; (8010974 <_fflush_r+0x6c>)
 8010924:	429c      	cmp	r4, r3
 8010926:	d11b      	bne.n	8010960 <_fflush_r+0x58>
 8010928:	686c      	ldr	r4, [r5, #4]
 801092a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0ef      	beq.n	8010912 <_fflush_r+0xa>
 8010932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010934:	07d0      	lsls	r0, r2, #31
 8010936:	d404      	bmi.n	8010942 <_fflush_r+0x3a>
 8010938:	0599      	lsls	r1, r3, #22
 801093a:	d402      	bmi.n	8010942 <_fflush_r+0x3a>
 801093c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801093e:	f7ff fcd0 	bl	80102e2 <__retarget_lock_acquire_recursive>
 8010942:	4628      	mov	r0, r5
 8010944:	4621      	mov	r1, r4
 8010946:	f7ff ff59 	bl	80107fc <__sflush_r>
 801094a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801094c:	07da      	lsls	r2, r3, #31
 801094e:	4605      	mov	r5, r0
 8010950:	d4e0      	bmi.n	8010914 <_fflush_r+0xc>
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	059b      	lsls	r3, r3, #22
 8010956:	d4dd      	bmi.n	8010914 <_fflush_r+0xc>
 8010958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801095a:	f7ff fcc3 	bl	80102e4 <__retarget_lock_release_recursive>
 801095e:	e7d9      	b.n	8010914 <_fflush_r+0xc>
 8010960:	4b05      	ldr	r3, [pc, #20]	; (8010978 <_fflush_r+0x70>)
 8010962:	429c      	cmp	r4, r3
 8010964:	d101      	bne.n	801096a <_fflush_r+0x62>
 8010966:	68ac      	ldr	r4, [r5, #8]
 8010968:	e7df      	b.n	801092a <_fflush_r+0x22>
 801096a:	4b04      	ldr	r3, [pc, #16]	; (801097c <_fflush_r+0x74>)
 801096c:	429c      	cmp	r4, r3
 801096e:	bf08      	it	eq
 8010970:	68ec      	ldreq	r4, [r5, #12]
 8010972:	e7da      	b.n	801092a <_fflush_r+0x22>
 8010974:	0801168c 	.word	0x0801168c
 8010978:	080116ac 	.word	0x080116ac
 801097c:	0801166c 	.word	0x0801166c

08010980 <std>:
 8010980:	2300      	movs	r3, #0
 8010982:	b510      	push	{r4, lr}
 8010984:	4604      	mov	r4, r0
 8010986:	e9c0 3300 	strd	r3, r3, [r0]
 801098a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801098e:	6083      	str	r3, [r0, #8]
 8010990:	8181      	strh	r1, [r0, #12]
 8010992:	6643      	str	r3, [r0, #100]	; 0x64
 8010994:	81c2      	strh	r2, [r0, #14]
 8010996:	6183      	str	r3, [r0, #24]
 8010998:	4619      	mov	r1, r3
 801099a:	2208      	movs	r2, #8
 801099c:	305c      	adds	r0, #92	; 0x5c
 801099e:	f7fd fb6d 	bl	800e07c <memset>
 80109a2:	4b05      	ldr	r3, [pc, #20]	; (80109b8 <std+0x38>)
 80109a4:	6263      	str	r3, [r4, #36]	; 0x24
 80109a6:	4b05      	ldr	r3, [pc, #20]	; (80109bc <std+0x3c>)
 80109a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80109aa:	4b05      	ldr	r3, [pc, #20]	; (80109c0 <std+0x40>)
 80109ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <std+0x44>)
 80109b0:	6224      	str	r4, [r4, #32]
 80109b2:	6323      	str	r3, [r4, #48]	; 0x30
 80109b4:	bd10      	pop	{r4, pc}
 80109b6:	bf00      	nop
 80109b8:	08010ccd 	.word	0x08010ccd
 80109bc:	08010cef 	.word	0x08010cef
 80109c0:	08010d27 	.word	0x08010d27
 80109c4:	08010d4b 	.word	0x08010d4b

080109c8 <_cleanup_r>:
 80109c8:	4901      	ldr	r1, [pc, #4]	; (80109d0 <_cleanup_r+0x8>)
 80109ca:	f000 b8af 	b.w	8010b2c <_fwalk_reent>
 80109ce:	bf00      	nop
 80109d0:	08010909 	.word	0x08010909

080109d4 <__sfmoreglue>:
 80109d4:	b570      	push	{r4, r5, r6, lr}
 80109d6:	2268      	movs	r2, #104	; 0x68
 80109d8:	1e4d      	subs	r5, r1, #1
 80109da:	4355      	muls	r5, r2
 80109dc:	460e      	mov	r6, r1
 80109de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109e2:	f7fd fbbf 	bl	800e164 <_malloc_r>
 80109e6:	4604      	mov	r4, r0
 80109e8:	b140      	cbz	r0, 80109fc <__sfmoreglue+0x28>
 80109ea:	2100      	movs	r1, #0
 80109ec:	e9c0 1600 	strd	r1, r6, [r0]
 80109f0:	300c      	adds	r0, #12
 80109f2:	60a0      	str	r0, [r4, #8]
 80109f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80109f8:	f7fd fb40 	bl	800e07c <memset>
 80109fc:	4620      	mov	r0, r4
 80109fe:	bd70      	pop	{r4, r5, r6, pc}

08010a00 <__sfp_lock_acquire>:
 8010a00:	4801      	ldr	r0, [pc, #4]	; (8010a08 <__sfp_lock_acquire+0x8>)
 8010a02:	f7ff bc6e 	b.w	80102e2 <__retarget_lock_acquire_recursive>
 8010a06:	bf00      	nop
 8010a08:	2000153d 	.word	0x2000153d

08010a0c <__sfp_lock_release>:
 8010a0c:	4801      	ldr	r0, [pc, #4]	; (8010a14 <__sfp_lock_release+0x8>)
 8010a0e:	f7ff bc69 	b.w	80102e4 <__retarget_lock_release_recursive>
 8010a12:	bf00      	nop
 8010a14:	2000153d 	.word	0x2000153d

08010a18 <__sinit_lock_acquire>:
 8010a18:	4801      	ldr	r0, [pc, #4]	; (8010a20 <__sinit_lock_acquire+0x8>)
 8010a1a:	f7ff bc62 	b.w	80102e2 <__retarget_lock_acquire_recursive>
 8010a1e:	bf00      	nop
 8010a20:	2000153e 	.word	0x2000153e

08010a24 <__sinit_lock_release>:
 8010a24:	4801      	ldr	r0, [pc, #4]	; (8010a2c <__sinit_lock_release+0x8>)
 8010a26:	f7ff bc5d 	b.w	80102e4 <__retarget_lock_release_recursive>
 8010a2a:	bf00      	nop
 8010a2c:	2000153e 	.word	0x2000153e

08010a30 <__sinit>:
 8010a30:	b510      	push	{r4, lr}
 8010a32:	4604      	mov	r4, r0
 8010a34:	f7ff fff0 	bl	8010a18 <__sinit_lock_acquire>
 8010a38:	69a3      	ldr	r3, [r4, #24]
 8010a3a:	b11b      	cbz	r3, 8010a44 <__sinit+0x14>
 8010a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a40:	f7ff bff0 	b.w	8010a24 <__sinit_lock_release>
 8010a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010a48:	6523      	str	r3, [r4, #80]	; 0x50
 8010a4a:	4b13      	ldr	r3, [pc, #76]	; (8010a98 <__sinit+0x68>)
 8010a4c:	4a13      	ldr	r2, [pc, #76]	; (8010a9c <__sinit+0x6c>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8010a52:	42a3      	cmp	r3, r4
 8010a54:	bf04      	itt	eq
 8010a56:	2301      	moveq	r3, #1
 8010a58:	61a3      	streq	r3, [r4, #24]
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f000 f820 	bl	8010aa0 <__sfp>
 8010a60:	6060      	str	r0, [r4, #4]
 8010a62:	4620      	mov	r0, r4
 8010a64:	f000 f81c 	bl	8010aa0 <__sfp>
 8010a68:	60a0      	str	r0, [r4, #8]
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f000 f818 	bl	8010aa0 <__sfp>
 8010a70:	2200      	movs	r2, #0
 8010a72:	60e0      	str	r0, [r4, #12]
 8010a74:	2104      	movs	r1, #4
 8010a76:	6860      	ldr	r0, [r4, #4]
 8010a78:	f7ff ff82 	bl	8010980 <std>
 8010a7c:	68a0      	ldr	r0, [r4, #8]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	2109      	movs	r1, #9
 8010a82:	f7ff ff7d 	bl	8010980 <std>
 8010a86:	68e0      	ldr	r0, [r4, #12]
 8010a88:	2202      	movs	r2, #2
 8010a8a:	2112      	movs	r1, #18
 8010a8c:	f7ff ff78 	bl	8010980 <std>
 8010a90:	2301      	movs	r3, #1
 8010a92:	61a3      	str	r3, [r4, #24]
 8010a94:	e7d2      	b.n	8010a3c <__sinit+0xc>
 8010a96:	bf00      	nop
 8010a98:	080112f0 	.word	0x080112f0
 8010a9c:	080109c9 	.word	0x080109c9

08010aa0 <__sfp>:
 8010aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	f7ff ffac 	bl	8010a00 <__sfp_lock_acquire>
 8010aa8:	4b1e      	ldr	r3, [pc, #120]	; (8010b24 <__sfp+0x84>)
 8010aaa:	681e      	ldr	r6, [r3, #0]
 8010aac:	69b3      	ldr	r3, [r6, #24]
 8010aae:	b913      	cbnz	r3, 8010ab6 <__sfp+0x16>
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	f7ff ffbd 	bl	8010a30 <__sinit>
 8010ab6:	3648      	adds	r6, #72	; 0x48
 8010ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010abc:	3b01      	subs	r3, #1
 8010abe:	d503      	bpl.n	8010ac8 <__sfp+0x28>
 8010ac0:	6833      	ldr	r3, [r6, #0]
 8010ac2:	b30b      	cbz	r3, 8010b08 <__sfp+0x68>
 8010ac4:	6836      	ldr	r6, [r6, #0]
 8010ac6:	e7f7      	b.n	8010ab8 <__sfp+0x18>
 8010ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010acc:	b9d5      	cbnz	r5, 8010b04 <__sfp+0x64>
 8010ace:	4b16      	ldr	r3, [pc, #88]	; (8010b28 <__sfp+0x88>)
 8010ad0:	60e3      	str	r3, [r4, #12]
 8010ad2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8010ad8:	f7ff fc02 	bl	80102e0 <__retarget_lock_init_recursive>
 8010adc:	f7ff ff96 	bl	8010a0c <__sfp_lock_release>
 8010ae0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ae4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ae8:	6025      	str	r5, [r4, #0]
 8010aea:	61a5      	str	r5, [r4, #24]
 8010aec:	2208      	movs	r2, #8
 8010aee:	4629      	mov	r1, r5
 8010af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010af4:	f7fd fac2 	bl	800e07c <memset>
 8010af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b00:	4620      	mov	r0, r4
 8010b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b04:	3468      	adds	r4, #104	; 0x68
 8010b06:	e7d9      	b.n	8010abc <__sfp+0x1c>
 8010b08:	2104      	movs	r1, #4
 8010b0a:	4638      	mov	r0, r7
 8010b0c:	f7ff ff62 	bl	80109d4 <__sfmoreglue>
 8010b10:	4604      	mov	r4, r0
 8010b12:	6030      	str	r0, [r6, #0]
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d1d5      	bne.n	8010ac4 <__sfp+0x24>
 8010b18:	f7ff ff78 	bl	8010a0c <__sfp_lock_release>
 8010b1c:	230c      	movs	r3, #12
 8010b1e:	603b      	str	r3, [r7, #0]
 8010b20:	e7ee      	b.n	8010b00 <__sfp+0x60>
 8010b22:	bf00      	nop
 8010b24:	080112f0 	.word	0x080112f0
 8010b28:	ffff0001 	.word	0xffff0001

08010b2c <_fwalk_reent>:
 8010b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b30:	4606      	mov	r6, r0
 8010b32:	4688      	mov	r8, r1
 8010b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b38:	2700      	movs	r7, #0
 8010b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8010b42:	d505      	bpl.n	8010b50 <_fwalk_reent+0x24>
 8010b44:	6824      	ldr	r4, [r4, #0]
 8010b46:	2c00      	cmp	r4, #0
 8010b48:	d1f7      	bne.n	8010b3a <_fwalk_reent+0xe>
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b50:	89ab      	ldrh	r3, [r5, #12]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d907      	bls.n	8010b66 <_fwalk_reent+0x3a>
 8010b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	d003      	beq.n	8010b66 <_fwalk_reent+0x3a>
 8010b5e:	4629      	mov	r1, r5
 8010b60:	4630      	mov	r0, r6
 8010b62:	47c0      	blx	r8
 8010b64:	4307      	orrs	r7, r0
 8010b66:	3568      	adds	r5, #104	; 0x68
 8010b68:	e7e9      	b.n	8010b3e <_fwalk_reent+0x12>

08010b6a <__swhatbuf_r>:
 8010b6a:	b570      	push	{r4, r5, r6, lr}
 8010b6c:	460e      	mov	r6, r1
 8010b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b72:	2900      	cmp	r1, #0
 8010b74:	b096      	sub	sp, #88	; 0x58
 8010b76:	4614      	mov	r4, r2
 8010b78:	461d      	mov	r5, r3
 8010b7a:	da08      	bge.n	8010b8e <__swhatbuf_r+0x24>
 8010b7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010b80:	2200      	movs	r2, #0
 8010b82:	602a      	str	r2, [r5, #0]
 8010b84:	061a      	lsls	r2, r3, #24
 8010b86:	d410      	bmi.n	8010baa <__swhatbuf_r+0x40>
 8010b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b8c:	e00e      	b.n	8010bac <__swhatbuf_r+0x42>
 8010b8e:	466a      	mov	r2, sp
 8010b90:	f000 f902 	bl	8010d98 <_fstat_r>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	dbf1      	blt.n	8010b7c <__swhatbuf_r+0x12>
 8010b98:	9a01      	ldr	r2, [sp, #4]
 8010b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ba2:	425a      	negs	r2, r3
 8010ba4:	415a      	adcs	r2, r3
 8010ba6:	602a      	str	r2, [r5, #0]
 8010ba8:	e7ee      	b.n	8010b88 <__swhatbuf_r+0x1e>
 8010baa:	2340      	movs	r3, #64	; 0x40
 8010bac:	2000      	movs	r0, #0
 8010bae:	6023      	str	r3, [r4, #0]
 8010bb0:	b016      	add	sp, #88	; 0x58
 8010bb2:	bd70      	pop	{r4, r5, r6, pc}

08010bb4 <__smakebuf_r>:
 8010bb4:	898b      	ldrh	r3, [r1, #12]
 8010bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bb8:	079d      	lsls	r5, r3, #30
 8010bba:	4606      	mov	r6, r0
 8010bbc:	460c      	mov	r4, r1
 8010bbe:	d507      	bpl.n	8010bd0 <__smakebuf_r+0x1c>
 8010bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010bc4:	6023      	str	r3, [r4, #0]
 8010bc6:	6123      	str	r3, [r4, #16]
 8010bc8:	2301      	movs	r3, #1
 8010bca:	6163      	str	r3, [r4, #20]
 8010bcc:	b002      	add	sp, #8
 8010bce:	bd70      	pop	{r4, r5, r6, pc}
 8010bd0:	ab01      	add	r3, sp, #4
 8010bd2:	466a      	mov	r2, sp
 8010bd4:	f7ff ffc9 	bl	8010b6a <__swhatbuf_r>
 8010bd8:	9900      	ldr	r1, [sp, #0]
 8010bda:	4605      	mov	r5, r0
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f7fd fac1 	bl	800e164 <_malloc_r>
 8010be2:	b948      	cbnz	r0, 8010bf8 <__smakebuf_r+0x44>
 8010be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010be8:	059a      	lsls	r2, r3, #22
 8010bea:	d4ef      	bmi.n	8010bcc <__smakebuf_r+0x18>
 8010bec:	f023 0303 	bic.w	r3, r3, #3
 8010bf0:	f043 0302 	orr.w	r3, r3, #2
 8010bf4:	81a3      	strh	r3, [r4, #12]
 8010bf6:	e7e3      	b.n	8010bc0 <__smakebuf_r+0xc>
 8010bf8:	4b0d      	ldr	r3, [pc, #52]	; (8010c30 <__smakebuf_r+0x7c>)
 8010bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bfc:	89a3      	ldrh	r3, [r4, #12]
 8010bfe:	6020      	str	r0, [r4, #0]
 8010c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c04:	81a3      	strh	r3, [r4, #12]
 8010c06:	9b00      	ldr	r3, [sp, #0]
 8010c08:	6163      	str	r3, [r4, #20]
 8010c0a:	9b01      	ldr	r3, [sp, #4]
 8010c0c:	6120      	str	r0, [r4, #16]
 8010c0e:	b15b      	cbz	r3, 8010c28 <__smakebuf_r+0x74>
 8010c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c14:	4630      	mov	r0, r6
 8010c16:	f000 f8d1 	bl	8010dbc <_isatty_r>
 8010c1a:	b128      	cbz	r0, 8010c28 <__smakebuf_r+0x74>
 8010c1c:	89a3      	ldrh	r3, [r4, #12]
 8010c1e:	f023 0303 	bic.w	r3, r3, #3
 8010c22:	f043 0301 	orr.w	r3, r3, #1
 8010c26:	81a3      	strh	r3, [r4, #12]
 8010c28:	89a0      	ldrh	r0, [r4, #12]
 8010c2a:	4305      	orrs	r5, r0
 8010c2c:	81a5      	strh	r5, [r4, #12]
 8010c2e:	e7cd      	b.n	8010bcc <__smakebuf_r+0x18>
 8010c30:	080109c9 	.word	0x080109c9

08010c34 <_malloc_usable_size_r>:
 8010c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c38:	1f18      	subs	r0, r3, #4
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	bfbc      	itt	lt
 8010c3e:	580b      	ldrlt	r3, [r1, r0]
 8010c40:	18c0      	addlt	r0, r0, r3
 8010c42:	4770      	bx	lr

08010c44 <_raise_r>:
 8010c44:	291f      	cmp	r1, #31
 8010c46:	b538      	push	{r3, r4, r5, lr}
 8010c48:	4604      	mov	r4, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	d904      	bls.n	8010c58 <_raise_r+0x14>
 8010c4e:	2316      	movs	r3, #22
 8010c50:	6003      	str	r3, [r0, #0]
 8010c52:	f04f 30ff 	mov.w	r0, #4294967295
 8010c56:	bd38      	pop	{r3, r4, r5, pc}
 8010c58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c5a:	b112      	cbz	r2, 8010c62 <_raise_r+0x1e>
 8010c5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c60:	b94b      	cbnz	r3, 8010c76 <_raise_r+0x32>
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 f830 	bl	8010cc8 <_getpid_r>
 8010c68:	462a      	mov	r2, r5
 8010c6a:	4601      	mov	r1, r0
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c72:	f000 b817 	b.w	8010ca4 <_kill_r>
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	d00a      	beq.n	8010c90 <_raise_r+0x4c>
 8010c7a:	1c59      	adds	r1, r3, #1
 8010c7c:	d103      	bne.n	8010c86 <_raise_r+0x42>
 8010c7e:	2316      	movs	r3, #22
 8010c80:	6003      	str	r3, [r0, #0]
 8010c82:	2001      	movs	r0, #1
 8010c84:	e7e7      	b.n	8010c56 <_raise_r+0x12>
 8010c86:	2400      	movs	r4, #0
 8010c88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	4798      	blx	r3
 8010c90:	2000      	movs	r0, #0
 8010c92:	e7e0      	b.n	8010c56 <_raise_r+0x12>

08010c94 <raise>:
 8010c94:	4b02      	ldr	r3, [pc, #8]	; (8010ca0 <raise+0xc>)
 8010c96:	4601      	mov	r1, r0
 8010c98:	6818      	ldr	r0, [r3, #0]
 8010c9a:	f7ff bfd3 	b.w	8010c44 <_raise_r>
 8010c9e:	bf00      	nop
 8010ca0:	2000032c 	.word	0x2000032c

08010ca4 <_kill_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4d07      	ldr	r5, [pc, #28]	; (8010cc4 <_kill_r+0x20>)
 8010ca8:	2300      	movs	r3, #0
 8010caa:	4604      	mov	r4, r0
 8010cac:	4608      	mov	r0, r1
 8010cae:	4611      	mov	r1, r2
 8010cb0:	602b      	str	r3, [r5, #0]
 8010cb2:	f7f4 fb78 	bl	80053a6 <_kill>
 8010cb6:	1c43      	adds	r3, r0, #1
 8010cb8:	d102      	bne.n	8010cc0 <_kill_r+0x1c>
 8010cba:	682b      	ldr	r3, [r5, #0]
 8010cbc:	b103      	cbz	r3, 8010cc0 <_kill_r+0x1c>
 8010cbe:	6023      	str	r3, [r4, #0]
 8010cc0:	bd38      	pop	{r3, r4, r5, pc}
 8010cc2:	bf00      	nop
 8010cc4:	20001538 	.word	0x20001538

08010cc8 <_getpid_r>:
 8010cc8:	f7f4 bb65 	b.w	8005396 <_getpid>

08010ccc <__sread>:
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	460c      	mov	r4, r1
 8010cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cd4:	f000 f894 	bl	8010e00 <_read_r>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	bfab      	itete	ge
 8010cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010cde:	89a3      	ldrhlt	r3, [r4, #12]
 8010ce0:	181b      	addge	r3, r3, r0
 8010ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ce6:	bfac      	ite	ge
 8010ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010cea:	81a3      	strhlt	r3, [r4, #12]
 8010cec:	bd10      	pop	{r4, pc}

08010cee <__swrite>:
 8010cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf2:	461f      	mov	r7, r3
 8010cf4:	898b      	ldrh	r3, [r1, #12]
 8010cf6:	05db      	lsls	r3, r3, #23
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	4616      	mov	r6, r2
 8010cfe:	d505      	bpl.n	8010d0c <__swrite+0x1e>
 8010d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d04:	2302      	movs	r3, #2
 8010d06:	2200      	movs	r2, #0
 8010d08:	f000 f868 	bl	8010ddc <_lseek_r>
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d16:	81a3      	strh	r3, [r4, #12]
 8010d18:	4632      	mov	r2, r6
 8010d1a:	463b      	mov	r3, r7
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d22:	f000 b817 	b.w	8010d54 <_write_r>

08010d26 <__sseek>:
 8010d26:	b510      	push	{r4, lr}
 8010d28:	460c      	mov	r4, r1
 8010d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d2e:	f000 f855 	bl	8010ddc <_lseek_r>
 8010d32:	1c43      	adds	r3, r0, #1
 8010d34:	89a3      	ldrh	r3, [r4, #12]
 8010d36:	bf15      	itete	ne
 8010d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d42:	81a3      	strheq	r3, [r4, #12]
 8010d44:	bf18      	it	ne
 8010d46:	81a3      	strhne	r3, [r4, #12]
 8010d48:	bd10      	pop	{r4, pc}

08010d4a <__sclose>:
 8010d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d4e:	f000 b813 	b.w	8010d78 <_close_r>
	...

08010d54 <_write_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_write_r+0x20>)
 8010d58:	4604      	mov	r4, r0
 8010d5a:	4608      	mov	r0, r1
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	2200      	movs	r2, #0
 8010d60:	602a      	str	r2, [r5, #0]
 8010d62:	461a      	mov	r2, r3
 8010d64:	f7f4 fb56 	bl	8005414 <_write>
 8010d68:	1c43      	adds	r3, r0, #1
 8010d6a:	d102      	bne.n	8010d72 <_write_r+0x1e>
 8010d6c:	682b      	ldr	r3, [r5, #0]
 8010d6e:	b103      	cbz	r3, 8010d72 <_write_r+0x1e>
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	bd38      	pop	{r3, r4, r5, pc}
 8010d74:	20001538 	.word	0x20001538

08010d78 <_close_r>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4d06      	ldr	r5, [pc, #24]	; (8010d94 <_close_r+0x1c>)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	4608      	mov	r0, r1
 8010d82:	602b      	str	r3, [r5, #0]
 8010d84:	f7f4 fb62 	bl	800544c <_close>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d102      	bne.n	8010d92 <_close_r+0x1a>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	b103      	cbz	r3, 8010d92 <_close_r+0x1a>
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	20001538 	.word	0x20001538

08010d98 <_fstat_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_fstat_r+0x20>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	4611      	mov	r1, r2
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	f7f4 fb5d 	bl	8005464 <_fstat>
 8010daa:	1c43      	adds	r3, r0, #1
 8010dac:	d102      	bne.n	8010db4 <_fstat_r+0x1c>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	b103      	cbz	r3, 8010db4 <_fstat_r+0x1c>
 8010db2:	6023      	str	r3, [r4, #0]
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop
 8010db8:	20001538 	.word	0x20001538

08010dbc <_isatty_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d06      	ldr	r5, [pc, #24]	; (8010dd8 <_isatty_r+0x1c>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	602b      	str	r3, [r5, #0]
 8010dc8:	f7f4 fb5c 	bl	8005484 <_isatty>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d102      	bne.n	8010dd6 <_isatty_r+0x1a>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	b103      	cbz	r3, 8010dd6 <_isatty_r+0x1a>
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	20001538 	.word	0x20001538

08010ddc <_lseek_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4d07      	ldr	r5, [pc, #28]	; (8010dfc <_lseek_r+0x20>)
 8010de0:	4604      	mov	r4, r0
 8010de2:	4608      	mov	r0, r1
 8010de4:	4611      	mov	r1, r2
 8010de6:	2200      	movs	r2, #0
 8010de8:	602a      	str	r2, [r5, #0]
 8010dea:	461a      	mov	r2, r3
 8010dec:	f7f4 fb55 	bl	800549a <_lseek>
 8010df0:	1c43      	adds	r3, r0, #1
 8010df2:	d102      	bne.n	8010dfa <_lseek_r+0x1e>
 8010df4:	682b      	ldr	r3, [r5, #0]
 8010df6:	b103      	cbz	r3, 8010dfa <_lseek_r+0x1e>
 8010df8:	6023      	str	r3, [r4, #0]
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	20001538 	.word	0x20001538

08010e00 <_read_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d07      	ldr	r5, [pc, #28]	; (8010e20 <_read_r+0x20>)
 8010e04:	4604      	mov	r4, r0
 8010e06:	4608      	mov	r0, r1
 8010e08:	4611      	mov	r1, r2
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	602a      	str	r2, [r5, #0]
 8010e0e:	461a      	mov	r2, r3
 8010e10:	f7f4 fae3 	bl	80053da <_read>
 8010e14:	1c43      	adds	r3, r0, #1
 8010e16:	d102      	bne.n	8010e1e <_read_r+0x1e>
 8010e18:	682b      	ldr	r3, [r5, #0]
 8010e1a:	b103      	cbz	r3, 8010e1e <_read_r+0x1e>
 8010e1c:	6023      	str	r3, [r4, #0]
 8010e1e:	bd38      	pop	{r3, r4, r5, pc}
 8010e20:	20001538 	.word	0x20001538

08010e24 <_init>:
 8010e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e26:	bf00      	nop
 8010e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e2a:	bc08      	pop	{r3}
 8010e2c:	469e      	mov	lr, r3
 8010e2e:	4770      	bx	lr

08010e30 <_fini>:
 8010e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e32:	bf00      	nop
 8010e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e36:	bc08      	pop	{r3}
 8010e38:	469e      	mov	lr, r3
 8010e3a:	4770      	bx	lr
